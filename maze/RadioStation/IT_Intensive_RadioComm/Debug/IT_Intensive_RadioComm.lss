
IT_Intensive_RadioComm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008000  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000070  20000000  00008000  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000091c  20000070  00008070  00020070  2**2
                  ALLOC
  3 .stack        00002004  2000098c  0000898c  00020070  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  5 .comment      0000008c  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
  6 .debug_info   00042adf  00000000  00000000  00020124  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006e85  00000000  00000000  00062c03  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000e057  00000000  00000000  00069a88  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000cb0  00000000  00000000  00077adf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001218  00000000  00000000  0007878f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00021e28  00000000  00000000  000799a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001cb26  00000000  00000000  0009b7cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000897f8  00000000  00000000  000b82f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002810  00000000  00000000  00141af0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002990 	.word	0x20002990
       4:	000026f5 	.word	0x000026f5
       8:	000026f1 	.word	0x000026f1
       c:	000026f1 	.word	0x000026f1
	...
      2c:	000026f1 	.word	0x000026f1
	...
      38:	000026f1 	.word	0x000026f1
      3c:	000026f1 	.word	0x000026f1
      40:	000026f1 	.word	0x000026f1
      44:	000026f1 	.word	0x000026f1
      48:	000026f1 	.word	0x000026f1
      4c:	000026f1 	.word	0x000026f1
      50:	0000032d 	.word	0x0000032d
      54:	000026f1 	.word	0x000026f1
      58:	000026f1 	.word	0x000026f1
      5c:	000026f1 	.word	0x000026f1
      60:	000026f1 	.word	0x000026f1
      64:	0000104d 	.word	0x0000104d
      68:	0000105d 	.word	0x0000105d
      6c:	0000106d 	.word	0x0000106d
      70:	0000107d 	.word	0x0000107d
      74:	0000108d 	.word	0x0000108d
      78:	0000109d 	.word	0x0000109d
      7c:	000026f1 	.word	0x000026f1
      80:	000026f1 	.word	0x000026f1
      84:	000026f1 	.word	0x000026f1
      88:	00002389 	.word	0x00002389
      8c:	00002399 	.word	0x00002399
      90:	000023a9 	.word	0x000023a9
	...
      9c:	000026f1 	.word	0x000026f1
      a0:	000026f1 	.word	0x000026f1
      a4:	00000000 	.word	0x00000000
      a8:	000026f1 	.word	0x000026f1
	...

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000070 	.word	0x20000070
      d4:	00000000 	.word	0x00000000
      d8:	00008000 	.word	0x00008000

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000074 	.word	0x20000074
     108:	00008000 	.word	0x00008000
     10c:	00008000 	.word	0x00008000
     110:	00000000 	.word	0x00000000

00000114 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     114:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     116:	2000      	movs	r0, #0
     118:	4b08      	ldr	r3, [pc, #32]	; (13c <delay_init+0x28>)
     11a:	4798      	blx	r3
     11c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     11e:	4c08      	ldr	r4, [pc, #32]	; (140 <delay_init+0x2c>)
     120:	21fa      	movs	r1, #250	; 0xfa
     122:	0089      	lsls	r1, r1, #2
     124:	47a0      	blx	r4
     126:	4b07      	ldr	r3, [pc, #28]	; (144 <delay_init+0x30>)
     128:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     12a:	4907      	ldr	r1, [pc, #28]	; (148 <delay_init+0x34>)
     12c:	0028      	movs	r0, r5
     12e:	47a0      	blx	r4
     130:	4b06      	ldr	r3, [pc, #24]	; (14c <delay_init+0x38>)
     132:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     134:	2205      	movs	r2, #5
     136:	4b06      	ldr	r3, [pc, #24]	; (150 <delay_init+0x3c>)
     138:	601a      	str	r2, [r3, #0]
}
     13a:	bd70      	pop	{r4, r5, r6, pc}
     13c:	0000208d 	.word	0x0000208d
     140:	00005199 	.word	0x00005199
     144:	20000004 	.word	0x20000004
     148:	000f4240 	.word	0x000f4240
     14c:	20000000 	.word	0x20000000
     150:	e000e010 	.word	0xe000e010

00000154 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
     154:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
     156:	4b08      	ldr	r3, [pc, #32]	; (178 <delay_cycles_us+0x24>)
     158:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     15a:	4a08      	ldr	r2, [pc, #32]	; (17c <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
     15c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     15e:	2180      	movs	r1, #128	; 0x80
     160:	0249      	lsls	r1, r1, #9
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
	while (n--) {
     162:	e006      	b.n	172 <delay_cycles_us+0x1e>
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
     164:	2c00      	cmp	r4, #0
     166:	d004      	beq.n	172 <delay_cycles_us+0x1e>
		SysTick->LOAD = n;
     168:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     16a:	6095      	str	r5, [r2, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     16c:	6813      	ldr	r3, [r2, #0]
     16e:	420b      	tst	r3, r1
     170:	d0fc      	beq.n	16c <delay_cycles_us+0x18>
     172:	3801      	subs	r0, #1
     174:	d2f6      	bcs.n	164 <delay_cycles_us+0x10>
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
	}
}
     176:	bd30      	pop	{r4, r5, pc}
     178:	20000000 	.word	0x20000000
     17c:	e000e010 	.word	0xe000e010

00000180 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     180:	4b0c      	ldr	r3, [pc, #48]	; (1b4 <cpu_irq_enter_critical+0x34>)
     182:	681b      	ldr	r3, [r3, #0]
     184:	2b00      	cmp	r3, #0
     186:	d110      	bne.n	1aa <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     188:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     18c:	2b00      	cmp	r3, #0
     18e:	d109      	bne.n	1a4 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     190:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     192:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     196:	2200      	movs	r2, #0
     198:	4b07      	ldr	r3, [pc, #28]	; (1b8 <cpu_irq_enter_critical+0x38>)
     19a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     19c:	3201      	adds	r2, #1
     19e:	4b07      	ldr	r3, [pc, #28]	; (1bc <cpu_irq_enter_critical+0x3c>)
     1a0:	701a      	strb	r2, [r3, #0]
     1a2:	e002      	b.n	1aa <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     1a4:	2200      	movs	r2, #0
     1a6:	4b05      	ldr	r3, [pc, #20]	; (1bc <cpu_irq_enter_critical+0x3c>)
     1a8:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     1aa:	4a02      	ldr	r2, [pc, #8]	; (1b4 <cpu_irq_enter_critical+0x34>)
     1ac:	6813      	ldr	r3, [r2, #0]
     1ae:	3301      	adds	r3, #1
     1b0:	6013      	str	r3, [r2, #0]
}
     1b2:	4770      	bx	lr
     1b4:	2000008c 	.word	0x2000008c
     1b8:	20000008 	.word	0x20000008
     1bc:	20000090 	.word	0x20000090

000001c0 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     1c0:	4b08      	ldr	r3, [pc, #32]	; (1e4 <cpu_irq_leave_critical+0x24>)
     1c2:	681a      	ldr	r2, [r3, #0]
     1c4:	3a01      	subs	r2, #1
     1c6:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     1c8:	681b      	ldr	r3, [r3, #0]
     1ca:	2b00      	cmp	r3, #0
     1cc:	d109      	bne.n	1e2 <cpu_irq_leave_critical+0x22>
     1ce:	4b06      	ldr	r3, [pc, #24]	; (1e8 <cpu_irq_leave_critical+0x28>)
     1d0:	781b      	ldrb	r3, [r3, #0]
     1d2:	2b00      	cmp	r3, #0
     1d4:	d005      	beq.n	1e2 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     1d6:	2201      	movs	r2, #1
     1d8:	4b04      	ldr	r3, [pc, #16]	; (1ec <cpu_irq_leave_critical+0x2c>)
     1da:	701a      	strb	r2, [r3, #0]
     1dc:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     1e0:	b662      	cpsie	i
	}
}
     1e2:	4770      	bx	lr
     1e4:	2000008c 	.word	0x2000008c
     1e8:	20000090 	.word	0x20000090
     1ec:	20000008 	.word	0x20000008

000001f0 <system_board_init>:




void system_board_init(void)
{
     1f0:	b5f0      	push	{r4, r5, r6, r7, lr}
     1f2:	4647      	mov	r7, r8
     1f4:	b480      	push	{r7}
     1f6:	b082      	sub	sp, #8
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     1f8:	ac01      	add	r4, sp, #4
     1fa:	2601      	movs	r6, #1
     1fc:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
     1fe:	2700      	movs	r7, #0
     200:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     202:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     204:	0021      	movs	r1, r4
     206:	2013      	movs	r0, #19
     208:	4d27      	ldr	r5, [pc, #156]	; (2a8 <system_board_init+0xb8>)
     20a:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     20c:	4b27      	ldr	r3, [pc, #156]	; (2ac <system_board_init+0xbc>)
     20e:	4698      	mov	r8, r3
     210:	2380      	movs	r3, #128	; 0x80
     212:	031b      	lsls	r3, r3, #12
     214:	4642      	mov	r2, r8
     216:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     218:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     21a:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     21c:	0021      	movs	r1, r4
     21e:	201c      	movs	r0, #28
     220:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     222:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
     224:	70a7      	strb	r7, [r4, #2]
	
#ifdef CONF_BOARD_AT86RFX	

	port_get_config_defaults(&pin_conf);
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     226:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_SCK, &pin_conf);
     228:	0021      	movs	r1, r4
     22a:	2052      	movs	r0, #82	; 0x52
     22c:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_MOSI, &pin_conf);
     22e:	0021      	movs	r1, r4
     230:	203e      	movs	r0, #62	; 0x3e
     232:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_CS, &pin_conf);
     234:	0021      	movs	r1, r4
     236:	203f      	movs	r0, #63	; 0x3f
     238:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_RST_PIN, &pin_conf);
     23a:	0021      	movs	r1, r4
     23c:	202f      	movs	r0, #47	; 0x2f
     23e:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SLP_PIN, &pin_conf);
     240:	0021      	movs	r1, r4
     242:	2014      	movs	r0, #20
     244:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     246:	2280      	movs	r2, #128	; 0x80
     248:	02d2      	lsls	r2, r2, #11
     24a:	4b19      	ldr	r3, [pc, #100]	; (2b0 <system_board_init+0xc0>)
     24c:	619a      	str	r2, [r3, #24]
     24e:	3b80      	subs	r3, #128	; 0x80
     250:	2280      	movs	r2, #128	; 0x80
     252:	05d2      	lsls	r2, r2, #23
     254:	619a      	str	r2, [r3, #24]
     256:	2280      	movs	r2, #128	; 0x80
     258:	0612      	lsls	r2, r2, #24
     25a:	619a      	str	r2, [r3, #24]
     25c:	2280      	movs	r2, #128	; 0x80
     25e:	0212      	lsls	r2, r2, #8
     260:	619a      	str	r2, [r3, #24]
     262:	2380      	movs	r3, #128	; 0x80
     264:	035b      	lsls	r3, r3, #13
     266:	4642      	mov	r2, r8
     268:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(AT86RFX_SPI_MOSI, true);
	port_pin_set_output_level(AT86RFX_SPI_CS, true);
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);

	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     26a:	7027      	strb	r7, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
     26c:	0021      	movs	r1, r4
     26e:	2053      	movs	r0, #83	; 0x53
     270:	47a8      	blx	r5
	
	/* SAMR21 Antenna Diversity Configuration */

	PM->APBCMASK.reg |= (1<<PM_APBCMASK_RFCTRL_Pos);
     272:	4a10      	ldr	r2, [pc, #64]	; (2b4 <system_board_init+0xc4>)
     274:	6a13      	ldr	r3, [r2, #32]
     276:	2180      	movs	r1, #128	; 0x80
     278:	0389      	lsls	r1, r1, #14
     27a:	430b      	orrs	r3, r1
     27c:	6213      	str	r3, [r2, #32]
		
	/*Pins  PA12/RFCTRL2 and PA09/RFCTRL1 are used as DIG1 and DIG2 pins respectively in SAMR21 Xplained Pro*/	
	
	/* FECTRL register is Written with value 4 => F2CFG = 00 and F1CFG = 01 */	
	REG_RFCTRL_FECFG = RFCTRL_CFG_ANT_DIV;
     27e:	2204      	movs	r2, #4
     280:	4b0d      	ldr	r3, [pc, #52]	; (2b8 <system_board_init+0xc8>)
     282:	801a      	strh	r2, [r3, #0]
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     284:	466b      	mov	r3, sp
     286:	709e      	strb	r6, [r3, #2]
	config->powersave    = false;
     288:	70df      	strb	r7, [r3, #3]
	struct system_pinmux_config config_pinmux;
	system_pinmux_get_config_defaults(&config_pinmux);
	
	/*MUX Position is 'F' i.e 5 for FECTRL Function and is same for all  FECTRL supported pins
	 * as provided in the data sheet */
	config_pinmux.mux_position = MUX_PA09F_RFCTRL_FECTRL1 ;
     28a:	2305      	movs	r3, #5
     28c:	466a      	mov	r2, sp
     28e:	7013      	strb	r3, [r2, #0]
	
	config_pinmux.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;	
     290:	7056      	strb	r6, [r2, #1]
	system_pinmux_pin_set_config(PIN_RFCTRL1, &config_pinmux);
     292:	4669      	mov	r1, sp
     294:	2009      	movs	r0, #9
     296:	4c09      	ldr	r4, [pc, #36]	; (2bc <system_board_init+0xcc>)
     298:	47a0      	blx	r4
	system_pinmux_pin_set_config(PIN_RFCTRL2, &config_pinmux);
     29a:	4669      	mov	r1, sp
     29c:	200c      	movs	r0, #12
     29e:	47a0      	blx	r4
#endif

}
     2a0:	b002      	add	sp, #8
     2a2:	bc04      	pop	{r2}
     2a4:	4690      	mov	r8, r2
     2a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     2a8:	000004a1 	.word	0x000004a1
     2ac:	41004400 	.word	0x41004400
     2b0:	41004500 	.word	0x41004500
     2b4:	40000400 	.word	0x40000400
     2b8:	42005400 	.word	0x42005400
     2bc:	0000229d 	.word	0x0000229d

000002c0 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     2c0:	2317      	movs	r3, #23
	const enum extint_callback_type type)
{
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     2c2:	2a00      	cmp	r2, #0
     2c4:	d10d      	bne.n	2e2 <extint_register_callback+0x22>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	if (_extint_dev.callbacks[channel] == NULL) {
     2c6:	008b      	lsls	r3, r1, #2
     2c8:	4a07      	ldr	r2, [pc, #28]	; (2e8 <extint_register_callback+0x28>)
     2ca:	589b      	ldr	r3, [r3, r2]
     2cc:	2b00      	cmp	r3, #0
     2ce:	d103      	bne.n	2d8 <extint_register_callback+0x18>
		_extint_dev.callbacks[channel] = callback;
     2d0:	0089      	lsls	r1, r1, #2
     2d2:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
     2d4:	2300      	movs	r3, #0
     2d6:	e004      	b.n	2e2 <extint_register_callback+0x22>
	} else if (_extint_dev.callbacks[channel] == callback) {
     2d8:	4283      	cmp	r3, r0
     2da:	d001      	beq.n	2e0 <extint_register_callback+0x20>
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
     2dc:	231d      	movs	r3, #29
     2de:	e000      	b.n	2e2 <extint_register_callback+0x22>

	if (_extint_dev.callbacks[channel] == NULL) {
		_extint_dev.callbacks[channel] = callback;
		return STATUS_OK;
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
     2e0:	2300      	movs	r3, #0
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
     2e2:	0018      	movs	r0, r3
     2e4:	4770      	bx	lr
     2e6:	46c0      	nop			; (mov r8, r8)
     2e8:	200007ec 	.word	0x200007ec

000002ec <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     2ec:	2317      	movs	r3, #23
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     2ee:	2900      	cmp	r1, #0
     2f0:	d107      	bne.n	302 <extint_chan_enable_callback+0x16>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     2f2:	2200      	movs	r2, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     2f4:	281f      	cmp	r0, #31
     2f6:	d800      	bhi.n	2fa <extint_chan_enable_callback+0xe>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     2f8:	4a03      	ldr	r2, [pc, #12]	; (308 <extint_chan_enable_callback+0x1c>)
		Eic *const eic = _extint_get_eic_from_channel(channel);

		eic->INTENSET.reg = (1UL << channel);
     2fa:	2301      	movs	r3, #1
     2fc:	4083      	lsls	r3, r0
     2fe:	60d3      	str	r3, [r2, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     300:	2300      	movs	r3, #0
}
     302:	0018      	movs	r0, r3
     304:	4770      	bx	lr
     306:	46c0      	nop			; (mov r8, r8)
     308:	40001800 	.word	0x40001800

0000030c <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     30c:	2317      	movs	r3, #23
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     30e:	2900      	cmp	r1, #0
     310:	d107      	bne.n	322 <extint_chan_disable_callback+0x16>
	} else {
		Assert(false);
		return NULL;
     312:	2200      	movs	r2, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     314:	281f      	cmp	r0, #31
     316:	d800      	bhi.n	31a <extint_chan_disable_callback+0xe>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     318:	4a03      	ldr	r2, [pc, #12]	; (328 <extint_chan_disable_callback+0x1c>)
		Eic *const eic = _extint_get_eic_from_channel(channel);

		eic->INTENCLR.reg = (1UL << channel);
     31a:	2301      	movs	r3, #1
     31c:	4083      	lsls	r3, r0
     31e:	6093      	str	r3, [r2, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     320:	2300      	movs	r3, #0
}
     322:	0018      	movs	r0, r3
     324:	4770      	bx	lr
     326:	46c0      	nop			; (mov r8, r8)
     328:	40001800 	.word	0x40001800

0000032c <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     32c:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     32e:	2200      	movs	r2, #0
     330:	4b15      	ldr	r3, [pc, #84]	; (388 <EIC_Handler+0x5c>)
     332:	701a      	strb	r2, [r3, #0]
     334:	2300      	movs	r3, #0
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     336:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     338:	4e14      	ldr	r6, [pc, #80]	; (38c <EIC_Handler+0x60>)

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     33a:	4c13      	ldr	r4, [pc, #76]	; (388 <EIC_Handler+0x5c>)
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     33c:	2b1f      	cmp	r3, #31
     33e:	d919      	bls.n	374 <EIC_Handler+0x48>
     340:	e00f      	b.n	362 <EIC_Handler+0x36>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     342:	2100      	movs	r1, #0
     344:	e000      	b.n	348 <EIC_Handler+0x1c>

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     346:	4912      	ldr	r1, [pc, #72]	; (390 <EIC_Handler+0x64>)
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     348:	610a      	str	r2, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     34a:	009b      	lsls	r3, r3, #2
     34c:	599b      	ldr	r3, [r3, r6]
     34e:	2b00      	cmp	r3, #0
     350:	d000      	beq.n	354 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     352:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     354:	7823      	ldrb	r3, [r4, #0]
     356:	3301      	adds	r3, #1
     358:	b2db      	uxtb	r3, r3
     35a:	7023      	strb	r3, [r4, #0]
     35c:	2b0f      	cmp	r3, #15
     35e:	d9ed      	bls.n	33c <EIC_Handler+0x10>
     360:	e011      	b.n	386 <EIC_Handler+0x5a>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     362:	0029      	movs	r1, r5
     364:	4019      	ands	r1, r3
     366:	2201      	movs	r2, #1
     368:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
     36a:	2100      	movs	r1, #0
     36c:	6909      	ldr	r1, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     36e:	4211      	tst	r1, r2
     370:	d1e7      	bne.n	342 <EIC_Handler+0x16>
     372:	e7ef      	b.n	354 <EIC_Handler+0x28>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     374:	0029      	movs	r1, r5
     376:	4019      	ands	r1, r3
     378:	2201      	movs	r2, #1
     37a:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
     37c:	4904      	ldr	r1, [pc, #16]	; (390 <EIC_Handler+0x64>)
     37e:	6909      	ldr	r1, [r1, #16]
     380:	4211      	tst	r1, r2
     382:	d1e0      	bne.n	346 <EIC_Handler+0x1a>
     384:	e7e6      	b.n	354 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
     386:	bd70      	pop	{r4, r5, r6, pc}
     388:	200007e8 	.word	0x200007e8
     38c:	200007ec 	.word	0x200007ec
     390:	40001800 	.word	0x40001800

00000394 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     394:	4a04      	ldr	r2, [pc, #16]	; (3a8 <_extint_enable+0x14>)
     396:	7811      	ldrb	r1, [r2, #0]
     398:	2302      	movs	r3, #2
     39a:	430b      	orrs	r3, r1
     39c:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     39e:	7853      	ldrb	r3, [r2, #1]
     3a0:	b25b      	sxtb	r3, r3
     3a2:	2b00      	cmp	r3, #0
     3a4:	dbfb      	blt.n	39e <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     3a6:	4770      	bx	lr
     3a8:	40001800 	.word	0x40001800

000003ac <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
     3ac:	b500      	push	{lr}
     3ae:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     3b0:	4a12      	ldr	r2, [pc, #72]	; (3fc <_system_extint_init+0x50>)
     3b2:	6991      	ldr	r1, [r2, #24]
     3b4:	2340      	movs	r3, #64	; 0x40
     3b6:	430b      	orrs	r3, r1
     3b8:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     3ba:	a901      	add	r1, sp, #4
     3bc:	2300      	movs	r3, #0
     3be:	700b      	strb	r3, [r1, #0]

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     3c0:	2005      	movs	r0, #5
     3c2:	4b0f      	ldr	r3, [pc, #60]	; (400 <_system_extint_init+0x54>)
     3c4:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
     3c6:	2005      	movs	r0, #5
     3c8:	4b0e      	ldr	r3, [pc, #56]	; (404 <_system_extint_init+0x58>)
     3ca:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     3cc:	4a0e      	ldr	r2, [pc, #56]	; (408 <_system_extint_init+0x5c>)
     3ce:	7811      	ldrb	r1, [r2, #0]
     3d0:	2301      	movs	r3, #1
     3d2:	430b      	orrs	r3, r1
     3d4:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     3d6:	7853      	ldrb	r3, [r2, #1]
     3d8:	b25b      	sxtb	r3, r3
     3da:	2b00      	cmp	r3, #0
     3dc:	dbfb      	blt.n	3d6 <_system_extint_init+0x2a>
     3de:	4b0b      	ldr	r3, [pc, #44]	; (40c <_system_extint_init+0x60>)
     3e0:	0019      	movs	r1, r3
     3e2:	3140      	adds	r1, #64	; 0x40

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
     3e4:	2200      	movs	r2, #0
     3e6:	c304      	stmia	r3!, {r2}
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     3e8:	4299      	cmp	r1, r3
     3ea:	d1fc      	bne.n	3e6 <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     3ec:	2210      	movs	r2, #16
     3ee:	4b08      	ldr	r3, [pc, #32]	; (410 <_system_extint_init+0x64>)
     3f0:	601a      	str	r2, [r3, #0]
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
     3f2:	4b08      	ldr	r3, [pc, #32]	; (414 <_system_extint_init+0x68>)
     3f4:	4798      	blx	r3
}
     3f6:	b003      	add	sp, #12
     3f8:	bd00      	pop	{pc}
     3fa:	46c0      	nop			; (mov r8, r8)
     3fc:	40000400 	.word	0x40000400
     400:	000021a5 	.word	0x000021a5
     404:	00002119 	.word	0x00002119
     408:	40001800 	.word	0x40001800
     40c:	200007ec 	.word	0x200007ec
     410:	e000e100 	.word	0xe000e100
     414:	00000395 	.word	0x00000395

00000418 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     418:	2300      	movs	r3, #0
     41a:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     41c:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     41e:	2201      	movs	r2, #1
     420:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
     422:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
     424:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     426:	3302      	adds	r3, #2
     428:	72c3      	strb	r3, [r0, #11]
}
     42a:	4770      	bx	lr

0000042c <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     42c:	b5f0      	push	{r4, r5, r6, r7, lr}
     42e:	b083      	sub	sp, #12
     430:	0005      	movs	r5, r0
     432:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     434:	a901      	add	r1, sp, #4
     436:	2300      	movs	r3, #0
     438:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     43a:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     43c:	7923      	ldrb	r3, [r4, #4]
     43e:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     440:	7a23      	ldrb	r3, [r4, #8]
     442:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     444:	7820      	ldrb	r0, [r4, #0]
     446:	4b14      	ldr	r3, [pc, #80]	; (498 <extint_chan_set_config+0x6c>)
     448:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     44a:	2000      	movs	r0, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     44c:	2d1f      	cmp	r5, #31
     44e:	d800      	bhi.n	452 <extint_chan_set_config+0x26>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     450:	4812      	ldr	r0, [pc, #72]	; (49c <extint_chan_set_config+0x70>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     452:	2107      	movs	r1, #7
     454:	4029      	ands	r1, r5
     456:	0089      	lsls	r1, r1, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     458:	7ae2      	ldrb	r2, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     45a:	7aa3      	ldrb	r3, [r4, #10]
     45c:	2b00      	cmp	r3, #0
     45e:	d001      	beq.n	464 <extint_chan_set_config+0x38>
		new_config |= EIC_CONFIG_FILTEN0;
     460:	2308      	movs	r3, #8
     462:	431a      	orrs	r2, r3
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
     464:	08eb      	lsrs	r3, r5, #3
     466:	009b      	lsls	r3, r3, #2
     468:	18c3      	adds	r3, r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
     46a:	699e      	ldr	r6, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     46c:	270f      	movs	r7, #15
     46e:	408f      	lsls	r7, r1
     470:	43be      	bics	r6, r7
     472:	408a      	lsls	r2, r1
     474:	4332      	orrs	r2, r6
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     476:	619a      	str	r2, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     478:	7a63      	ldrb	r3, [r4, #9]
     47a:	2b00      	cmp	r3, #0
     47c:	d005      	beq.n	48a <extint_chan_set_config+0x5e>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     47e:	6942      	ldr	r2, [r0, #20]
     480:	2301      	movs	r3, #1
     482:	40ab      	lsls	r3, r5
     484:	4313      	orrs	r3, r2
     486:	6143      	str	r3, [r0, #20]
     488:	e004      	b.n	494 <extint_chan_set_config+0x68>
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     48a:	6943      	ldr	r3, [r0, #20]
     48c:	2201      	movs	r2, #1
     48e:	40aa      	lsls	r2, r5
     490:	4393      	bics	r3, r2
     492:	6143      	str	r3, [r0, #20]
	}
}
     494:	b003      	add	sp, #12
     496:	bdf0      	pop	{r4, r5, r6, r7, pc}
     498:	0000229d 	.word	0x0000229d
     49c:	40001800 	.word	0x40001800

000004a0 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     4a0:	b500      	push	{lr}
     4a2:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     4a4:	ab01      	add	r3, sp, #4
     4a6:	2280      	movs	r2, #128	; 0x80
     4a8:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     4aa:	780a      	ldrb	r2, [r1, #0]
     4ac:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     4ae:	784a      	ldrb	r2, [r1, #1]
     4b0:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     4b2:	788a      	ldrb	r2, [r1, #2]
     4b4:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     4b6:	0019      	movs	r1, r3
     4b8:	4b01      	ldr	r3, [pc, #4]	; (4c0 <port_pin_set_config+0x20>)
     4ba:	4798      	blx	r3
}
     4bc:	b003      	add	sp, #12
     4be:	bd00      	pop	{pc}
     4c0:	0000229d 	.word	0x0000229d

000004c4 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     4c4:	6801      	ldr	r1, [r0, #0]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     4c6:	2207      	movs	r2, #7
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     4c8:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     4ca:	421a      	tst	r2, r3
     4cc:	d1fc      	bne.n	4c8 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
     4ce:	4770      	bx	lr

000004d0 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     4d0:	b5f0      	push	{r4, r5, r6, r7, lr}
     4d2:	465f      	mov	r7, fp
     4d4:	4656      	mov	r6, sl
     4d6:	464d      	mov	r5, r9
     4d8:	4644      	mov	r4, r8
     4da:	b4f0      	push	{r4, r5, r6, r7}
     4dc:	b08b      	sub	sp, #44	; 0x2c
     4de:	0007      	movs	r7, r0
     4e0:	000d      	movs	r5, r1
     4e2:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     4e4:	6039      	str	r1, [r7, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     4e6:	0008      	movs	r0, r1
     4e8:	4b99      	ldr	r3, [pc, #612]	; (750 <i2c_master_init+0x280>)
     4ea:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     4ec:	4999      	ldr	r1, [pc, #612]	; (754 <i2c_master_init+0x284>)
     4ee:	6a0a      	ldr	r2, [r1, #32]
     4f0:	1c84      	adds	r4, r0, #2
     4f2:	2301      	movs	r3, #1
     4f4:	40a3      	lsls	r3, r4
     4f6:	4313      	orrs	r3, r2
     4f8:	620b      	str	r3, [r1, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     4fa:	a909      	add	r1, sp, #36	; 0x24
     4fc:	7b33      	ldrb	r3, [r6, #12]
     4fe:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     500:	3014      	adds	r0, #20
     502:	b2c4      	uxtb	r4, r0
     504:	0020      	movs	r0, r4
     506:	4b94      	ldr	r3, [pc, #592]	; (758 <i2c_master_init+0x288>)
     508:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     50a:	0020      	movs	r0, r4
     50c:	4b93      	ldr	r3, [pc, #588]	; (75c <i2c_master_init+0x28c>)
     50e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     510:	7b30      	ldrb	r0, [r6, #12]
     512:	2100      	movs	r1, #0
     514:	4b92      	ldr	r3, [pc, #584]	; (760 <i2c_master_init+0x290>)
     516:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     518:	682b      	ldr	r3, [r5, #0]
		return STATUS_ERR_DENIED;
     51a:	201c      	movs	r0, #28
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
	system_gclk_chan_enable(gclk_index);
	sercom_set_gclk_generator(config->generator_source, false);

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     51c:	079b      	lsls	r3, r3, #30
     51e:	d500      	bpl.n	522 <i2c_master_init+0x52>
     520:	e10f      	b.n	742 <i2c_master_init+0x272>
		return STATUS_ERR_DENIED;
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     522:	682b      	ldr	r3, [r5, #0]
		return STATUS_BUSY;
     524:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
		return STATUS_ERR_DENIED;
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     526:	07db      	lsls	r3, r3, #31
     528:	d500      	bpl.n	52c <i2c_master_init+0x5c>
     52a:	e10a      	b.n	742 <i2c_master_init+0x272>
		return STATUS_BUSY;
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     52c:	6838      	ldr	r0, [r7, #0]
     52e:	4b88      	ldr	r3, [pc, #544]	; (750 <i2c_master_init+0x280>)
     530:	4699      	mov	r9, r3
     532:	4798      	blx	r3
     534:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
     536:	498b      	ldr	r1, [pc, #556]	; (764 <i2c_master_init+0x294>)
     538:	4b8b      	ldr	r3, [pc, #556]	; (768 <i2c_master_init+0x298>)
     53a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     53c:	00a4      	lsls	r4, r4, #2
     53e:	4b8b      	ldr	r3, [pc, #556]	; (76c <i2c_master_init+0x29c>)
     540:	50e7      	str	r7, [r4, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
     542:	2300      	movs	r3, #0
     544:	763b      	strb	r3, [r7, #24]
	module->enabled_callback = 0;
     546:	767b      	strb	r3, [r7, #25]
	module->buffer_length = 0;
     548:	2400      	movs	r4, #0
     54a:	837b      	strh	r3, [r7, #26]
	module->buffer_remaining = 0;
     54c:	83bb      	strh	r3, [r7, #28]

	module->status = STATUS_OK;
     54e:	2225      	movs	r2, #37	; 0x25
     550:	54bc      	strb	r4, [r7, r2]
	module->buffer = NULL;
     552:	623b      	str	r3, [r7, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     554:	3314      	adds	r3, #20
     556:	602b      	str	r3, [r5, #0]
	int32_t tmp_baud = 0;
	int32_t tmp_baud_hs = 0;
	int32_t tmp_baudlow_hs = 0;
	enum status_code tmp_status_code = STATUS_OK;

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     558:	683b      	ldr	r3, [r7, #0]
     55a:	4698      	mov	r8, r3
	Sercom *const sercom_hw = module->hw;

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     55c:	0018      	movs	r0, r3
     55e:	47c8      	blx	r9
     560:	4681      	mov	r9, r0
     562:	2380      	movs	r3, #128	; 0x80
     564:	aa08      	add	r2, sp, #32
     566:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     568:	7054      	strb	r4, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     56a:	2301      	movs	r3, #1
     56c:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
     56e:	70d4      	strb	r4, [r2, #3]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);

	uint32_t pad0 = config->pinmux_pad0;
     570:	69f0      	ldr	r0, [r6, #28]
	uint32_t pad1 = config->pinmux_pad1;
     572:	6a35      	ldr	r5, [r6, #32]

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
     574:	2800      	cmp	r0, #0
     576:	d103      	bne.n	580 <i2c_master_init+0xb0>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     578:	2100      	movs	r1, #0
     57a:	4640      	mov	r0, r8
     57c:	4b7c      	ldr	r3, [pc, #496]	; (770 <i2c_master_init+0x2a0>)
     57e:	4798      	blx	r3
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
     580:	ab08      	add	r3, sp, #32
     582:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     584:	2302      	movs	r3, #2
     586:	aa08      	add	r2, sp, #32
     588:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     58a:	0c00      	lsrs	r0, r0, #16
     58c:	b2c0      	uxtb	r0, r0
     58e:	0011      	movs	r1, r2
     590:	4b78      	ldr	r3, [pc, #480]	; (774 <i2c_master_init+0x2a4>)
     592:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
     594:	2d00      	cmp	r5, #0
     596:	d104      	bne.n	5a2 <i2c_master_init+0xd2>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     598:	2101      	movs	r1, #1
     59a:	4640      	mov	r0, r8
     59c:	4b74      	ldr	r3, [pc, #464]	; (770 <i2c_master_init+0x2a0>)
     59e:	4798      	blx	r3
     5a0:	0005      	movs	r5, r0
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
     5a2:	ab08      	add	r3, sp, #32
     5a4:	701d      	strb	r5, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     5a6:	2302      	movs	r3, #2
     5a8:	aa08      	add	r2, sp, #32
     5aa:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     5ac:	0c28      	lsrs	r0, r5, #16
     5ae:	b2c0      	uxtb	r0, r0
     5b0:	0011      	movs	r1, r2
     5b2:	4b70      	ldr	r3, [pc, #448]	; (774 <i2c_master_init+0x2a4>)
     5b4:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     5b6:	8ab3      	ldrh	r3, [r6, #20]
     5b8:	80fb      	strh	r3, [r7, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
     5ba:	8af3      	ldrh	r3, [r6, #22]
     5bc:	813b      	strh	r3, [r7, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     5be:	7e32      	ldrb	r2, [r6, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     5c0:	2380      	movs	r3, #128	; 0x80

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     5c2:	2a00      	cmp	r2, #0
     5c4:	d104      	bne.n	5d0 <i2c_master_init+0x100>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     5c6:	4b6c      	ldr	r3, [pc, #432]	; (778 <i2c_master_init+0x2a8>)
     5c8:	789b      	ldrb	r3, [r3, #2]
     5ca:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     5cc:	0fdb      	lsrs	r3, r3, #31
     5ce:	01db      	lsls	r3, r3, #7
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
		tmp_ctrla |= config->start_hold_time;
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
     5d0:	68b1      	ldr	r1, [r6, #8]
     5d2:	6932      	ldr	r2, [r6, #16]
     5d4:	430a      	orrs	r2, r1
     5d6:	4313      	orrs	r3, r2

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
     5d8:	2224      	movs	r2, #36	; 0x24
     5da:	5cb2      	ldrb	r2, [r6, r2]
     5dc:	2a00      	cmp	r2, #0
     5de:	d002      	beq.n	5e6 <i2c_master_init+0x116>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     5e0:	2280      	movs	r2, #128	; 0x80
     5e2:	05d2      	lsls	r2, r2, #23
     5e4:	4313      	orrs	r3, r2
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
		tmp_ctrla |= config->inactive_timeout;
     5e6:	6ab2      	ldr	r2, [r6, #40]	; 0x28
     5e8:	4313      	orrs	r3, r2
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     5ea:	222c      	movs	r2, #44	; 0x2c
     5ec:	5cb2      	ldrb	r2, [r6, r2]
     5ee:	2a00      	cmp	r2, #0
     5f0:	d103      	bne.n	5fa <i2c_master_init+0x12a>
     5f2:	2280      	movs	r2, #128	; 0x80
     5f4:	0492      	lsls	r2, r2, #18
     5f6:	4291      	cmp	r1, r2
     5f8:	d102      	bne.n	600 <i2c_master_init+0x130>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     5fa:	2280      	movs	r2, #128	; 0x80
     5fc:	0512      	lsls	r2, r2, #20
     5fe:	4313      	orrs	r3, r2
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
     600:	222d      	movs	r2, #45	; 0x2d
     602:	5cb2      	ldrb	r2, [r6, r2]
     604:	2a00      	cmp	r2, #0
     606:	d002      	beq.n	60e <i2c_master_init+0x13e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     608:	2280      	movs	r2, #128	; 0x80
     60a:	0412      	lsls	r2, r2, #16
     60c:	4313      	orrs	r3, r2
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
     60e:	222e      	movs	r2, #46	; 0x2e
     610:	5cb2      	ldrb	r2, [r6, r2]
     612:	2a00      	cmp	r2, #0
     614:	d002      	beq.n	61c <i2c_master_init+0x14c>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     616:	2280      	movs	r2, #128	; 0x80
     618:	03d2      	lsls	r2, r2, #15
     61a:	4313      	orrs	r3, r2
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
     61c:	4642      	mov	r2, r8
     61e:	6812      	ldr	r2, [r2, #0]
     620:	4313      	orrs	r3, r2
     622:	4642      	mov	r2, r8
     624:	6013      	str	r3, [r2, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     626:	2380      	movs	r3, #128	; 0x80
     628:	005b      	lsls	r3, r3, #1
     62a:	6053      	str	r3, [r2, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     62c:	4648      	mov	r0, r9
     62e:	3014      	adds	r0, #20
     630:	b2c0      	uxtb	r0, r0
     632:	4b52      	ldr	r3, [pc, #328]	; (77c <i2c_master_init+0x2ac>)
     634:	4798      	blx	r3
     636:	0005      	movs	r5, r0
     638:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
     63a:	27fa      	movs	r7, #250	; 0xfa
     63c:	00bf      	lsls	r7, r7, #2
     63e:	6833      	ldr	r3, [r6, #0]
     640:	435f      	muls	r7, r3
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     642:	6873      	ldr	r3, [r6, #4]
     644:	469a      	mov	sl, r3
	uint32_t trise       = config->sda_scl_rise_time_ns;
	
	tmp_baud = (int32_t)(div_ceil(
     646:	4c4e      	ldr	r4, [pc, #312]	; (780 <i2c_master_init+0x2b0>)
     648:	47a0      	blx	r4
     64a:	9002      	str	r0, [sp, #8]
     64c:	9103      	str	r1, [sp, #12]
     64e:	0078      	lsls	r0, r7, #1
     650:	47a0      	blx	r4
     652:	9000      	str	r0, [sp, #0]
     654:	9101      	str	r1, [sp, #4]
     656:	8e30      	ldrh	r0, [r6, #48]	; 0x30
     658:	4368      	muls	r0, r5
     65a:	47a0      	blx	r4
     65c:	4b49      	ldr	r3, [pc, #292]	; (784 <i2c_master_init+0x2b4>)
     65e:	469b      	mov	fp, r3
     660:	4a49      	ldr	r2, [pc, #292]	; (788 <i2c_master_init+0x2b8>)
     662:	4b4a      	ldr	r3, [pc, #296]	; (78c <i2c_master_init+0x2bc>)
     664:	47d8      	blx	fp
     666:	4d4a      	ldr	r5, [pc, #296]	; (790 <i2c_master_init+0x2c0>)
     668:	2200      	movs	r2, #0
     66a:	4b4a      	ldr	r3, [pc, #296]	; (794 <i2c_master_init+0x2c4>)
     66c:	47a8      	blx	r5
     66e:	9004      	str	r0, [sp, #16]
     670:	9105      	str	r1, [sp, #20]
     672:	0038      	movs	r0, r7
     674:	47a0      	blx	r4
     676:	0002      	movs	r2, r0
     678:	000b      	movs	r3, r1
     67a:	9804      	ldr	r0, [sp, #16]
     67c:	9905      	ldr	r1, [sp, #20]
     67e:	47d8      	blx	fp
     680:	0002      	movs	r2, r0
     682:	000b      	movs	r3, r1
     684:	4c44      	ldr	r4, [pc, #272]	; (798 <i2c_master_init+0x2c8>)
     686:	9802      	ldr	r0, [sp, #8]
     688:	9903      	ldr	r1, [sp, #12]
     68a:	47a0      	blx	r4
     68c:	9a00      	ldr	r2, [sp, #0]
     68e:	9b01      	ldr	r3, [sp, #4]
     690:	47a8      	blx	r5
     692:	2200      	movs	r2, #0
     694:	4b41      	ldr	r3, [pc, #260]	; (79c <i2c_master_init+0x2cc>)
     696:	47a0      	blx	r4
     698:	9a00      	ldr	r2, [sp, #0]
     69a:	9b01      	ldr	r3, [sp, #4]
     69c:	4c40      	ldr	r4, [pc, #256]	; (7a0 <i2c_master_init+0x2d0>)
     69e:	47a0      	blx	r4
     6a0:	4b40      	ldr	r3, [pc, #256]	; (7a4 <i2c_master_init+0x2d4>)
     6a2:	4798      	blx	r3
     6a4:	0004      	movs	r4, r0
			fgclk - fscl * (10 + fgclk * trise * 0.000000001), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
     6a6:	68b2      	ldr	r2, [r6, #8]
     6a8:	2380      	movs	r3, #128	; 0x80
     6aa:	049b      	lsls	r3, r3, #18
     6ac:	429a      	cmp	r2, r3
     6ae:	d142      	bne.n	736 <i2c_master_init+0x266>
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
	uint32_t fscl        = 1000 * config->baud_rate;
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     6b0:	21fa      	movs	r1, #250	; 0xfa
     6b2:	0089      	lsls	r1, r1, #2
     6b4:	4657      	mov	r7, sl
     6b6:	434f      	muls	r7, r1
	tmp_baud = (int32_t)(div_ceil(
			fgclk - fscl * (10 + fgclk * trise * 0.000000001), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
     6b8:	9802      	ldr	r0, [sp, #8]
     6ba:	9903      	ldr	r1, [sp, #12]
     6bc:	0002      	movs	r2, r0
     6be:	000b      	movs	r3, r1
     6c0:	47a8      	blx	r5
     6c2:	9000      	str	r0, [sp, #0]
     6c4:	9101      	str	r1, [sp, #4]
     6c6:	0038      	movs	r0, r7
     6c8:	4b2d      	ldr	r3, [pc, #180]	; (780 <i2c_master_init+0x2b0>)
     6ca:	4798      	blx	r3
     6cc:	2200      	movs	r2, #0
     6ce:	4b36      	ldr	r3, [pc, #216]	; (7a8 <i2c_master_init+0x2d8>)
     6d0:	47d8      	blx	fp
     6d2:	0002      	movs	r2, r0
     6d4:	000b      	movs	r3, r1
     6d6:	9800      	ldr	r0, [sp, #0]
     6d8:	9901      	ldr	r1, [sp, #4]
     6da:	4e31      	ldr	r6, [pc, #196]	; (7a0 <i2c_master_init+0x2d0>)
     6dc:	47b0      	blx	r6
     6de:	2200      	movs	r2, #0
     6e0:	4b2e      	ldr	r3, [pc, #184]	; (79c <i2c_master_init+0x2cc>)
     6e2:	4e2d      	ldr	r6, [pc, #180]	; (798 <i2c_master_init+0x2c8>)
     6e4:	47b0      	blx	r6
     6e6:	4b2f      	ldr	r3, [pc, #188]	; (7a4 <i2c_master_init+0x2d4>)
     6e8:	4798      	blx	r3
     6ea:	1e06      	subs	r6, r0, #0
		if (tmp_baudlow_hs) {
     6ec:	d006      	beq.n	6fc <i2c_master_init+0x22c>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
     6ee:	0039      	movs	r1, r7
     6f0:	9807      	ldr	r0, [sp, #28]
     6f2:	4b2e      	ldr	r3, [pc, #184]	; (7ac <i2c_master_init+0x2dc>)
     6f4:	4798      	blx	r3
     6f6:	3802      	subs	r0, #2
     6f8:	1b83      	subs	r3, r0, r6
     6fa:	e007      	b.n	70c <i2c_master_init+0x23c>
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
     6fc:	0079      	lsls	r1, r7, #1
     6fe:	1e48      	subs	r0, r1, #1
     700:	9b07      	ldr	r3, [sp, #28]
     702:	469c      	mov	ip, r3
     704:	4460      	add	r0, ip
     706:	4b29      	ldr	r3, [pc, #164]	; (7ac <i2c_master_init+0x2dc>)
     708:	4798      	blx	r3
     70a:	1e43      	subs	r3, r0, #1
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     70c:	2cff      	cmp	r4, #255	; 0xff
     70e:	d803      	bhi.n	718 <i2c_master_init+0x248>
     710:	2bff      	cmp	r3, #255	; 0xff
     712:	d903      	bls.n	71c <i2c_master_init+0x24c>
     714:	2040      	movs	r0, #64	; 0x40
     716:	e014      	b.n	742 <i2c_master_init+0x272>
     718:	2040      	movs	r0, #64	; 0x40

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
     71a:	e012      	b.n	742 <i2c_master_init+0x272>
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     71c:	22ff      	movs	r2, #255	; 0xff
     71e:	4014      	ands	r4, r2
     720:	0636      	lsls	r6, r6, #24
     722:	4334      	orrs	r4, r6
     724:	041b      	lsls	r3, r3, #16
     726:	22ff      	movs	r2, #255	; 0xff
     728:	0412      	lsls	r2, r2, #16
     72a:	4013      	ands	r3, r2
     72c:	431c      	orrs	r4, r3
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     72e:	4643      	mov	r3, r8
     730:	60dc      	str	r4, [r3, #12]
	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
	int32_t tmp_baud_hs = 0;
	int32_t tmp_baudlow_hs = 0;
	enum status_code tmp_status_code = STATUS_OK;
     732:	2000      	movs	r0, #0
     734:	e005      	b.n	742 <i2c_master_init+0x272>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     736:	2040      	movs	r0, #64	; 0x40
     738:	2cff      	cmp	r4, #255	; 0xff
     73a:	d802      	bhi.n	742 <i2c_master_init+0x272>

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
	int32_t tmp_baud_hs = 0;
	int32_t tmp_baudlow_hs = 0;
     73c:	2600      	movs	r6, #0
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
	int32_t tmp_baud_hs = 0;
     73e:	2300      	movs	r3, #0
     740:	e7ec      	b.n	71c <i2c_master_init+0x24c>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
     742:	b00b      	add	sp, #44	; 0x2c
     744:	bc3c      	pop	{r2, r3, r4, r5}
     746:	4690      	mov	r8, r2
     748:	4699      	mov	r9, r3
     74a:	46a2      	mov	sl, r4
     74c:	46ab      	mov	fp, r5
     74e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     750:	00000fa5 	.word	0x00000fa5
     754:	40000400 	.word	0x40000400
     758:	000021a5 	.word	0x000021a5
     75c:	00002119 	.word	0x00002119
     760:	00000dd1 	.word	0x00000dd1
     764:	00000a0d 	.word	0x00000a0d
     768:	00000fe5 	.word	0x00000fe5
     76c:	2000082c 	.word	0x2000082c
     770:	00000e1d 	.word	0x00000e1d
     774:	0000229d 	.word	0x0000229d
     778:	41002000 	.word	0x41002000
     77c:	000021c1 	.word	0x000021c1
     780:	00006b95 	.word	0x00006b95
     784:	00005f8d 	.word	0x00005f8d
     788:	e826d695 	.word	0xe826d695
     78c:	3e112e0b 	.word	0x3e112e0b
     790:	00005309 	.word	0x00005309
     794:	40240000 	.word	0x40240000
     798:	00006481 	.word	0x00006481
     79c:	3ff00000 	.word	0x3ff00000
     7a0:	00005961 	.word	0x00005961
     7a4:	00006b29 	.word	0x00006b29
     7a8:	40080000 	.word	0x40080000
     7ac:	00005199 	.word	0x00005199

000007b0 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     7b0:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     7b2:	7e1a      	ldrb	r2, [r3, #24]
     7b4:	0792      	lsls	r2, r2, #30
     7b6:	d507      	bpl.n	7c8 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     7b8:	2202      	movs	r2, #2
     7ba:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     7bc:	8b5b      	ldrh	r3, [r3, #26]
     7be:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     7c0:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
     7c2:	17db      	asrs	r3, r3, #31
     7c4:	4018      	ands	r0, r3
     7c6:	e00a      	b.n	7de <_i2c_master_address_response+0x2e>
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     7c8:	8b5a      	ldrh	r2, [r3, #26]
     7ca:	0752      	lsls	r2, r2, #29
     7cc:	d506      	bpl.n	7dc <_i2c_master_address_response+0x2c>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     7ce:	685a      	ldr	r2, [r3, #4]
     7d0:	21c0      	movs	r1, #192	; 0xc0
     7d2:	0289      	lsls	r1, r1, #10
     7d4:	430a      	orrs	r2, r1
     7d6:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
     7d8:	2018      	movs	r0, #24
     7da:	e000      	b.n	7de <_i2c_master_address_response+0x2e>
	}

	return STATUS_OK;
     7dc:	2000      	movs	r0, #0
}
     7de:	4770      	bx	lr

000007e0 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
     7e0:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     7e2:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     7e4:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     7e6:	2401      	movs	r4, #1
     7e8:	2502      	movs	r5, #2
     7ea:	e004      	b.n	7f6 <_i2c_master_wait_for_bus+0x16>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     7ec:	3301      	adds	r3, #1
     7ee:	b29b      	uxth	r3, r3
     7f0:	8901      	ldrh	r1, [r0, #8]
     7f2:	4299      	cmp	r1, r3
     7f4:	d907      	bls.n	806 <_i2c_master_wait_for_bus+0x26>

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     7f6:	7e11      	ldrb	r1, [r2, #24]
     7f8:	4221      	tst	r1, r4
     7fa:	d106      	bne.n	80a <_i2c_master_wait_for_bus+0x2a>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     7fc:	7e11      	ldrb	r1, [r2, #24]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     7fe:	4229      	tst	r1, r5
     800:	d0f4      	beq.n	7ec <_i2c_master_wait_for_bus+0xc>
		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
			return STATUS_ERR_TIMEOUT;
		}
	}
	return STATUS_OK;
     802:	2000      	movs	r0, #0
     804:	e002      	b.n	80c <_i2c_master_wait_for_bus+0x2c>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
			return STATUS_ERR_TIMEOUT;
     806:	2012      	movs	r0, #18
     808:	e000      	b.n	80c <_i2c_master_wait_for_bus+0x2c>
		}
	}
	return STATUS_OK;
     80a:	2000      	movs	r0, #0
}
     80c:	bd30      	pop	{r4, r5, pc}
     80e:	46c0      	nop			; (mov r8, r8)

00000810 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
     810:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     812:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     814:	6863      	ldr	r3, [r4, #4]
     816:	2280      	movs	r2, #128	; 0x80
     818:	02d2      	lsls	r2, r2, #11
     81a:	4313      	orrs	r3, r2
     81c:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
     81e:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     820:	4b02      	ldr	r3, [pc, #8]	; (82c <_i2c_master_send_hs_master_code+0x1c>)
     822:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     824:	2301      	movs	r3, #1
     826:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
     828:	bd10      	pop	{r4, pc}
     82a:	46c0      	nop			; (mov r8, r8)
     82c:	000007e1 	.word	0x000007e1

00000830 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     830:	b5f0      	push	{r4, r5, r6, r7, lr}
     832:	465f      	mov	r7, fp
     834:	4656      	mov	r6, sl
     836:	464d      	mov	r5, r9
     838:	4644      	mov	r4, r8
     83a:	b4f0      	push	{r4, r5, r6, r7}
     83c:	b083      	sub	sp, #12
     83e:	0006      	movs	r6, r0
     840:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     842:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     844:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
     846:	4b31      	ldr	r3, [pc, #196]	; (90c <_i2c_master_write_packet+0xdc>)
     848:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     84a:	7a7b      	ldrb	r3, [r7, #9]
     84c:	2b00      	cmp	r3, #0
     84e:	d003      	beq.n	858 <_i2c_master_write_packet+0x28>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     850:	7ab9      	ldrb	r1, [r7, #10]
     852:	0030      	movs	r0, r6
     854:	4b2e      	ldr	r3, [pc, #184]	; (910 <_i2c_master_write_packet+0xe0>)
     856:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     858:	686a      	ldr	r2, [r5, #4]
     85a:	4b2e      	ldr	r3, [pc, #184]	; (914 <_i2c_master_write_packet+0xe4>)
     85c:	4013      	ands	r3, r2
     85e:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     860:	7a3b      	ldrb	r3, [r7, #8]
     862:	2b00      	cmp	r3, #0
     864:	d009      	beq.n	87a <_i2c_master_write_packet+0x4a>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     866:	883b      	ldrh	r3, [r7, #0]
     868:	005a      	lsls	r2, r3, #1
     86a:	7a7b      	ldrb	r3, [r7, #9]
     86c:	039b      	lsls	r3, r3, #14
     86e:	4313      	orrs	r3, r2
     870:	2280      	movs	r2, #128	; 0x80
     872:	0212      	lsls	r2, r2, #8
     874:	4313      	orrs	r3, r2
	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     876:	626b      	str	r3, [r5, #36]	; 0x24
     878:	e005      	b.n	886 <_i2c_master_write_packet+0x56>
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     87a:	883b      	ldrh	r3, [r7, #0]
     87c:	005a      	lsls	r2, r3, #1
     87e:	7a7b      	ldrb	r3, [r7, #9]
     880:	039b      	lsls	r3, r3, #14
     882:	4313      	orrs	r3, r2
     884:	626b      	str	r3, [r5, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     886:	0030      	movs	r0, r6
     888:	4b23      	ldr	r3, [pc, #140]	; (918 <_i2c_master_write_packet+0xe8>)
     88a:	4798      	blx	r3

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     88c:	2800      	cmp	r0, #0
     88e:	d136      	bne.n	8fe <_i2c_master_write_packet+0xce>
		tmp_status = _i2c_master_address_response(module);
     890:	0030      	movs	r0, r6
     892:	4b22      	ldr	r3, [pc, #136]	; (91c <_i2c_master_write_packet+0xec>)
     894:	4798      	blx	r3
     896:	1e03      	subs	r3, r0, #0
     898:	9001      	str	r0, [sp, #4]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
     89a:	d130      	bne.n	8fe <_i2c_master_write_packet+0xce>
     89c:	46a0      	mov	r8, r4
     89e:	2400      	movs	r4, #0
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     8a0:	3320      	adds	r3, #32
     8a2:	4699      	mov	r9, r3
				return STATUS_ERR_PACKET_COLLISION;
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
     8a4:	4b19      	ldr	r3, [pc, #100]	; (90c <_i2c_master_write_packet+0xdc>)
     8a6:	469b      	mov	fp, r3
			i2c_module->DATA.reg = packet->data[buffer_counter++];

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
     8a8:	4b1b      	ldr	r3, [pc, #108]	; (918 <_i2c_master_write_packet+0xe8>)
     8aa:	469a      	mov	sl, r3
     8ac:	e011      	b.n	8d2 <_i2c_master_write_packet+0xa2>
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     8ae:	8b6b      	ldrh	r3, [r5, #26]
     8b0:	464a      	mov	r2, r9
     8b2:	4213      	tst	r3, r2
     8b4:	d022      	beq.n	8fc <_i2c_master_write_packet+0xcc>
				return STATUS_ERR_PACKET_COLLISION;
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
     8b6:	0030      	movs	r0, r6
     8b8:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
     8ba:	687b      	ldr	r3, [r7, #4]
     8bc:	5d1a      	ldrb	r2, [r3, r4]
     8be:	2328      	movs	r3, #40	; 0x28
     8c0:	54ea      	strb	r2, [r5, r3]

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
     8c2:	0030      	movs	r0, r6
     8c4:	47d0      	blx	sl

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
     8c6:	2800      	cmp	r0, #0
     8c8:	d106      	bne.n	8d8 <_i2c_master_write_packet+0xa8>
				break;
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     8ca:	8b6b      	ldrh	r3, [r5, #26]
     8cc:	3401      	adds	r4, #1
     8ce:	075b      	lsls	r3, r3, #29
     8d0:	d404      	bmi.n	8dc <_i2c_master_write_packet+0xac>
	if (tmp_status == STATUS_OK) {
		/* Buffer counter. */
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
     8d2:	45a0      	cmp	r8, r4
     8d4:	d1eb      	bne.n	8ae <_i2c_master_write_packet+0x7e>
     8d6:	e003      	b.n	8e0 <_i2c_master_write_packet+0xb0>
			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
			i2c_module->DATA.reg = packet->data[buffer_counter++];

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
     8d8:	9001      	str	r0, [sp, #4]
     8da:	e001      	b.n	8e0 <_i2c_master_write_packet+0xb0>
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
				/* Return bad data value. */
				tmp_status = STATUS_ERR_OVERFLOW;
     8dc:	231e      	movs	r3, #30
     8de:	9301      	str	r3, [sp, #4]
				break;
			}
		}

		if (module->send_stop) {
     8e0:	7ab3      	ldrb	r3, [r6, #10]
     8e2:	9801      	ldr	r0, [sp, #4]
     8e4:	2b00      	cmp	r3, #0
     8e6:	d00a      	beq.n	8fe <_i2c_master_write_packet+0xce>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
     8e8:	0030      	movs	r0, r6
     8ea:	4b08      	ldr	r3, [pc, #32]	; (90c <_i2c_master_write_packet+0xdc>)
     8ec:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     8ee:	686b      	ldr	r3, [r5, #4]
     8f0:	22c0      	movs	r2, #192	; 0xc0
     8f2:	0292      	lsls	r2, r2, #10
     8f4:	4313      	orrs	r3, r2
     8f6:	606b      	str	r3, [r5, #4]
     8f8:	9801      	ldr	r0, [sp, #4]
     8fa:	e000      	b.n	8fe <_i2c_master_write_packet+0xce>

		/* Write data buffer. */
		while (tmp_data_length--) {
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
				return STATUS_ERR_PACKET_COLLISION;
     8fc:	2041      	movs	r0, #65	; 0x41
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
     8fe:	b003      	add	sp, #12
     900:	bc3c      	pop	{r2, r3, r4, r5}
     902:	4690      	mov	r8, r2
     904:	4699      	mov	r9, r3
     906:	46a2      	mov	sl, r4
     908:	46ab      	mov	fp, r5
     90a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     90c:	000004c5 	.word	0x000004c5
     910:	00000811 	.word	0x00000811
     914:	fffbffff 	.word	0xfffbffff
     918:	000007e1 	.word	0x000007e1
     91c:	000007b1 	.word	0x000007b1

00000920 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     920:	b510      	push	{r4, lr}
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
     922:	8b83      	ldrh	r3, [r0, #28]
     924:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     926:	2205      	movs	r2, #5
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
     928:	2b00      	cmp	r3, #0
     92a:	d105      	bne.n	938 <i2c_master_write_packet_wait+0x18>
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
     92c:	3301      	adds	r3, #1
     92e:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     930:	72c3      	strb	r3, [r0, #11]

	return _i2c_master_write_packet(module, packet);
     932:	4b02      	ldr	r3, [pc, #8]	; (93c <i2c_master_write_packet_wait+0x1c>)
     934:	4798      	blx	r3
     936:	0002      	movs	r2, r0
}
     938:	0010      	movs	r0, r2
     93a:	bd10      	pop	{r4, pc}
     93c:	00000831 	.word	0x00000831

00000940 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     940:	6801      	ldr	r1, [r0, #0]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     942:	2207      	movs	r2, #7
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     944:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     946:	421a      	tst	r2, r3
     948:	d1fc      	bne.n	944 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
     94a:	4770      	bx	lr

0000094c <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
     94c:	b570      	push	{r4, r5, r6, lr}
     94e:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     950:	6806      	ldr	r6, [r0, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     952:	6832      	ldr	r2, [r6, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
     954:	8b43      	ldrh	r3, [r0, #26]
	buffer_index -= module->buffer_remaining;
     956:	8b85      	ldrh	r5, [r0, #28]
     958:	1b5d      	subs	r5, r3, r5
     95a:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
     95c:	8b83      	ldrh	r3, [r0, #28]
     95e:	3b01      	subs	r3, #1
     960:	b29b      	uxth	r3, r3
     962:	8383      	strh	r3, [r0, #28]

	if (sclsm_flag) {
     964:	0113      	lsls	r3, r2, #4
     966:	d50c      	bpl.n	982 <_i2c_master_read+0x36>
		if (module->send_nack && module->buffer_remaining == 1) {
     968:	7ac3      	ldrb	r3, [r0, #11]
     96a:	2b00      	cmp	r3, #0
     96c:	d015      	beq.n	99a <_i2c_master_read+0x4e>
     96e:	8b83      	ldrh	r3, [r0, #28]
     970:	b29b      	uxth	r3, r3
     972:	2b01      	cmp	r3, #1
     974:	d111      	bne.n	99a <_i2c_master_read+0x4e>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     976:	6873      	ldr	r3, [r6, #4]
     978:	2280      	movs	r2, #128	; 0x80
     97a:	02d2      	lsls	r2, r2, #11
     97c:	4313      	orrs	r3, r2
     97e:	6073      	str	r3, [r6, #4]
     980:	e00b      	b.n	99a <_i2c_master_read+0x4e>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
     982:	7ac3      	ldrb	r3, [r0, #11]
     984:	2b00      	cmp	r3, #0
     986:	d008      	beq.n	99a <_i2c_master_read+0x4e>
     988:	8b83      	ldrh	r3, [r0, #28]
     98a:	b29b      	uxth	r3, r3
     98c:	2b00      	cmp	r3, #0
     98e:	d104      	bne.n	99a <_i2c_master_read+0x4e>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     990:	6873      	ldr	r3, [r6, #4]
     992:	2280      	movs	r2, #128	; 0x80
     994:	02d2      	lsls	r2, r2, #11
     996:	4313      	orrs	r3, r2
     998:	6073      	str	r3, [r6, #4]
		}
	}

	if (module->buffer_remaining == 0) {
     99a:	8ba3      	ldrh	r3, [r4, #28]
     99c:	b29b      	uxth	r3, r3
     99e:	2b00      	cmp	r3, #0
     9a0:	d10a      	bne.n	9b8 <_i2c_master_read+0x6c>
		if (module->send_stop) {
     9a2:	7aa3      	ldrb	r3, [r4, #10]
     9a4:	2b00      	cmp	r3, #0
     9a6:	d007      	beq.n	9b8 <_i2c_master_read+0x6c>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
     9a8:	0020      	movs	r0, r4
     9aa:	4b08      	ldr	r3, [pc, #32]	; (9cc <_i2c_master_read+0x80>)
     9ac:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     9ae:	6873      	ldr	r3, [r6, #4]
     9b0:	22c0      	movs	r2, #192	; 0xc0
     9b2:	0292      	lsls	r2, r2, #10
     9b4:	4313      	orrs	r3, r2
     9b6:	6073      	str	r3, [r6, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
     9b8:	0020      	movs	r0, r4
     9ba:	4b04      	ldr	r3, [pc, #16]	; (9cc <_i2c_master_read+0x80>)
     9bc:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
     9be:	6a23      	ldr	r3, [r4, #32]
     9c0:	195d      	adds	r5, r3, r5
     9c2:	2328      	movs	r3, #40	; 0x28
     9c4:	5cf3      	ldrb	r3, [r6, r3]
     9c6:	b2db      	uxtb	r3, r3
     9c8:	702b      	strb	r3, [r5, #0]
}
     9ca:	bd70      	pop	{r4, r5, r6, pc}
     9cc:	00000941 	.word	0x00000941

000009d0 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
     9d0:	b570      	push	{r4, r5, r6, lr}
     9d2:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     9d4:	6806      	ldr	r6, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     9d6:	8b73      	ldrh	r3, [r6, #26]
     9d8:	075b      	lsls	r3, r3, #29
     9da:	d503      	bpl.n	9e4 <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
     9dc:	221e      	movs	r2, #30
     9de:	2325      	movs	r3, #37	; 0x25
     9e0:	54c2      	strb	r2, [r0, r3]
		/* Do not write more data */
		return;
     9e2:	e00f      	b.n	a04 <_i2c_master_write+0x34>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
     9e4:	8b43      	ldrh	r3, [r0, #26]
	buffer_index -= module->buffer_remaining;
     9e6:	8b85      	ldrh	r5, [r0, #28]
     9e8:	1b5d      	subs	r5, r3, r5
     9ea:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
     9ec:	8b83      	ldrh	r3, [r0, #28]
     9ee:	3b01      	subs	r3, #1
     9f0:	b29b      	uxth	r3, r3
     9f2:	8383      	strh	r3, [r0, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
     9f4:	4b04      	ldr	r3, [pc, #16]	; (a08 <_i2c_master_write+0x38>)
     9f6:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
     9f8:	6a23      	ldr	r3, [r4, #32]
     9fa:	195d      	adds	r5, r3, r5
     9fc:	782b      	ldrb	r3, [r5, #0]
     9fe:	b2db      	uxtb	r3, r3
     a00:	2228      	movs	r2, #40	; 0x28
     a02:	54b3      	strb	r3, [r6, r2]
}
     a04:	bd70      	pop	{r4, r5, r6, pc}
     a06:	46c0      	nop			; (mov r8, r8)
     a08:	00000941 	.word	0x00000941

00000a0c <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
     a0c:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
     a0e:	0080      	lsls	r0, r0, #2
     a10:	4b6f      	ldr	r3, [pc, #444]	; (bd0 <_i2c_master_interrupt_handler+0x1c4>)
     a12:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     a14:	6825      	ldr	r5, [r4, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     a16:	682b      	ldr	r3, [r5, #0]
     a18:	011b      	lsls	r3, r3, #4
     a1a:	0fda      	lsrs	r2, r3, #31

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
     a1c:	7e63      	ldrb	r3, [r4, #25]
	callback_mask &= module->registered_callback;
     a1e:	7e26      	ldrb	r6, [r4, #24]
     a20:	401e      	ands	r6, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
     a22:	8b63      	ldrh	r3, [r4, #26]
     a24:	b29b      	uxth	r3, r3
     a26:	2b00      	cmp	r3, #0
     a28:	d135      	bne.n	a96 <_i2c_master_interrupt_handler+0x8a>
     a2a:	8ba3      	ldrh	r3, [r4, #28]
     a2c:	b29b      	uxth	r3, r3
     a2e:	2b00      	cmp	r3, #0
     a30:	d031      	beq.n	a96 <_i2c_master_interrupt_handler+0x8a>
	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
     a32:	7e2b      	ldrb	r3, [r5, #24]
     a34:	07db      	lsls	r3, r3, #31
     a36:	d51b      	bpl.n	a70 <_i2c_master_interrupt_handler+0x64>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     a38:	2301      	movs	r3, #1
     a3a:	762b      	strb	r3, [r5, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     a3c:	8b6b      	ldrh	r3, [r5, #26]
     a3e:	079b      	lsls	r3, r3, #30
     a40:	d503      	bpl.n	a4a <_i2c_master_interrupt_handler+0x3e>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
     a42:	2241      	movs	r2, #65	; 0x41
     a44:	2325      	movs	r3, #37	; 0x25
     a46:	54e2      	strb	r2, [r4, r3]
     a48:	e012      	b.n	a70 <_i2c_master_interrupt_handler+0x64>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     a4a:	8b6b      	ldrh	r3, [r5, #26]
     a4c:	075b      	lsls	r3, r3, #29
     a4e:	d50f      	bpl.n	a70 <_i2c_master_interrupt_handler+0x64>
			module->status           = STATUS_ERR_BAD_ADDRESS;
     a50:	2218      	movs	r2, #24
     a52:	2325      	movs	r3, #37	; 0x25
     a54:	54e2      	strb	r2, [r4, r3]
			module->buffer_remaining = 0;
     a56:	2300      	movs	r3, #0
     a58:	83a3      	strh	r3, [r4, #28]

			if (module->send_stop) {
     a5a:	7aa3      	ldrb	r3, [r4, #10]
     a5c:	2b00      	cmp	r3, #0
     a5e:	d007      	beq.n	a70 <_i2c_master_interrupt_handler+0x64>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
     a60:	0020      	movs	r0, r4
     a62:	4b5c      	ldr	r3, [pc, #368]	; (bd4 <_i2c_master_interrupt_handler+0x1c8>)
     a64:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     a66:	686b      	ldr	r3, [r5, #4]
     a68:	22c0      	movs	r2, #192	; 0xc0
     a6a:	0292      	lsls	r2, r2, #10
     a6c:	4313      	orrs	r3, r2
     a6e:	606b      	str	r3, [r5, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
     a70:	8ba3      	ldrh	r3, [r4, #28]
     a72:	b29b      	uxth	r3, r3
     a74:	8363      	strh	r3, [r4, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
     a76:	2325      	movs	r3, #37	; 0x25
     a78:	5ce3      	ldrb	r3, [r4, r3]
     a7a:	2b05      	cmp	r3, #5
     a7c:	d156      	bne.n	b2c <_i2c_master_interrupt_handler+0x120>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     a7e:	331f      	adds	r3, #31
     a80:	5ce3      	ldrb	r3, [r4, r3]
     a82:	2b00      	cmp	r3, #0
     a84:	d103      	bne.n	a8e <_i2c_master_interrupt_handler+0x82>
			_i2c_master_write(module);
     a86:	0020      	movs	r0, r4
     a88:	4b53      	ldr	r3, [pc, #332]	; (bd8 <_i2c_master_interrupt_handler+0x1cc>)
     a8a:	4798      	blx	r3
     a8c:	e04e      	b.n	b2c <_i2c_master_interrupt_handler+0x120>
		} else {
			_i2c_master_read(module);
     a8e:	0020      	movs	r0, r4
     a90:	4b52      	ldr	r3, [pc, #328]	; (bdc <_i2c_master_interrupt_handler+0x1d0>)
     a92:	4798      	blx	r3
     a94:	e04a      	b.n	b2c <_i2c_master_interrupt_handler+0x120>
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     a96:	8b63      	ldrh	r3, [r4, #26]
     a98:	b29b      	uxth	r3, r3
     a9a:	2b00      	cmp	r3, #0
     a9c:	d026      	beq.n	aec <_i2c_master_interrupt_handler+0xe0>
     a9e:	8ba3      	ldrh	r3, [r4, #28]
     aa0:	b29b      	uxth	r3, r3
     aa2:	2b00      	cmp	r3, #0
     aa4:	d122      	bne.n	aec <_i2c_master_interrupt_handler+0xe0>
			(module->status == STATUS_BUSY) &&
     aa6:	3325      	adds	r3, #37	; 0x25
     aa8:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     aaa:	2b05      	cmp	r3, #5
     aac:	d11e      	bne.n	aec <_i2c_master_interrupt_handler+0xe0>
			(module->status == STATUS_BUSY) &&
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
     aae:	331f      	adds	r3, #31
     ab0:	5ce3      	ldrb	r3, [r4, r3]
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
			(module->status == STATUS_BUSY) &&
     ab2:	2b00      	cmp	r3, #0
     ab4:	d11a      	bne.n	aec <_i2c_master_interrupt_handler+0xe0>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
     ab6:	3303      	adds	r3, #3
     ab8:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
     aba:	2300      	movs	r3, #0
     abc:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     abe:	3325      	adds	r3, #37	; 0x25
     ac0:	2200      	movs	r2, #0
     ac2:	54e2      	strb	r2, [r4, r3]

		if (module->send_stop) {
     ac4:	7aa3      	ldrb	r3, [r4, #10]
     ac6:	2b00      	cmp	r3, #0
     ac8:	d008      	beq.n	adc <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
     aca:	0020      	movs	r0, r4
     acc:	4b41      	ldr	r3, [pc, #260]	; (bd4 <_i2c_master_interrupt_handler+0x1c8>)
     ace:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     ad0:	686b      	ldr	r3, [r5, #4]
     ad2:	22c0      	movs	r2, #192	; 0xc0
     ad4:	0292      	lsls	r2, r2, #10
     ad6:	4313      	orrs	r3, r2
     ad8:	606b      	str	r3, [r5, #4]
     ada:	e001      	b.n	ae0 <_i2c_master_interrupt_handler+0xd4>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     adc:	2301      	movs	r3, #1
     ade:	762b      	strb	r3, [r5, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
     ae0:	07f3      	lsls	r3, r6, #31
     ae2:	d523      	bpl.n	b2c <_i2c_master_interrupt_handler+0x120>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     ae4:	68e3      	ldr	r3, [r4, #12]
     ae6:	0020      	movs	r0, r4
     ae8:	4798      	blx	r3
     aea:	e01f      	b.n	b2c <_i2c_master_interrupt_handler+0x120>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
     aec:	8b63      	ldrh	r3, [r4, #26]
     aee:	b29b      	uxth	r3, r3
     af0:	2b00      	cmp	r3, #0
     af2:	d01b      	beq.n	b2c <_i2c_master_interrupt_handler+0x120>
     af4:	8ba3      	ldrh	r3, [r4, #28]
     af6:	b29b      	uxth	r3, r3
     af8:	2b00      	cmp	r3, #0
     afa:	d017      	beq.n	b2c <_i2c_master_interrupt_handler+0x120>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
     afc:	8b6b      	ldrh	r3, [r5, #26]
     afe:	069b      	lsls	r3, r3, #26
     b00:	d409      	bmi.n	b16 <_i2c_master_interrupt_handler+0x10a>
     b02:	2a00      	cmp	r2, #0
     b04:	d003      	beq.n	b0e <_i2c_master_interrupt_handler+0x102>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
     b06:	8ba3      	ldrh	r3, [r4, #28]
     b08:	b29b      	uxth	r3, r3
     b0a:	2b01      	cmp	r3, #1
     b0c:	d003      	beq.n	b16 <_i2c_master_interrupt_handler+0x10a>
			module->status = STATUS_ERR_PACKET_COLLISION;
     b0e:	2241      	movs	r2, #65	; 0x41
     b10:	2325      	movs	r3, #37	; 0x25
     b12:	54e2      	strb	r2, [r4, r3]
     b14:	e00a      	b.n	b2c <_i2c_master_interrupt_handler+0x120>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     b16:	2324      	movs	r3, #36	; 0x24
     b18:	5ce3      	ldrb	r3, [r4, r3]
     b1a:	2b00      	cmp	r3, #0
     b1c:	d103      	bne.n	b26 <_i2c_master_interrupt_handler+0x11a>
			_i2c_master_write(module);
     b1e:	0020      	movs	r0, r4
     b20:	4b2d      	ldr	r3, [pc, #180]	; (bd8 <_i2c_master_interrupt_handler+0x1cc>)
     b22:	4798      	blx	r3
     b24:	e002      	b.n	b2c <_i2c_master_interrupt_handler+0x120>
		} else {
			_i2c_master_read(module);
     b26:	0020      	movs	r0, r4
     b28:	4b2c      	ldr	r3, [pc, #176]	; (bdc <_i2c_master_interrupt_handler+0x1d0>)
     b2a:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     b2c:	8b63      	ldrh	r3, [r4, #26]
     b2e:	b29b      	uxth	r3, r3
     b30:	2b00      	cmp	r3, #0
     b32:	d02a      	beq.n	b8a <_i2c_master_interrupt_handler+0x17e>
     b34:	8ba3      	ldrh	r3, [r4, #28]
     b36:	b29b      	uxth	r3, r3
     b38:	2b00      	cmp	r3, #0
     b3a:	d126      	bne.n	b8a <_i2c_master_interrupt_handler+0x17e>
			(module->status == STATUS_BUSY) &&
     b3c:	3325      	adds	r3, #37	; 0x25
     b3e:	5ce3      	ldrb	r3, [r4, r3]
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     b40:	2b05      	cmp	r3, #5
     b42:	d122      	bne.n	b8a <_i2c_master_interrupt_handler+0x17e>
			(module->status == STATUS_BUSY) &&
			(module->transfer_direction == I2C_TRANSFER_READ)) {
     b44:	331f      	adds	r3, #31
     b46:	5ce3      	ldrb	r3, [r4, r3]
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
			(module->status == STATUS_BUSY) &&
     b48:	2b01      	cmp	r3, #1
     b4a:	d11e      	bne.n	b8a <_i2c_master_interrupt_handler+0x17e>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     b4c:	7e2b      	ldrb	r3, [r5, #24]
     b4e:	079b      	lsls	r3, r3, #30
     b50:	d501      	bpl.n	b56 <_i2c_master_interrupt_handler+0x14a>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     b52:	2302      	movs	r3, #2
     b54:	762b      	strb	r3, [r5, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
     b56:	2303      	movs	r3, #3
     b58:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
     b5a:	2300      	movs	r3, #0
     b5c:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     b5e:	3325      	adds	r3, #37	; 0x25
     b60:	2200      	movs	r2, #0
     b62:	54e2      	strb	r2, [r4, r3]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
     b64:	07b3      	lsls	r3, r6, #30
     b66:	d507      	bpl.n	b78 <_i2c_master_interrupt_handler+0x16c>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
     b68:	2324      	movs	r3, #36	; 0x24
     b6a:	5ce3      	ldrb	r3, [r4, r3]
     b6c:	2b01      	cmp	r3, #1
     b6e:	d103      	bne.n	b78 <_i2c_master_interrupt_handler+0x16c>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
     b70:	6923      	ldr	r3, [r4, #16]
     b72:	0020      	movs	r0, r4
     b74:	4798      	blx	r3
     b76:	e008      	b.n	b8a <_i2c_master_interrupt_handler+0x17e>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
     b78:	07f3      	lsls	r3, r6, #31
     b7a:	d506      	bpl.n	b8a <_i2c_master_interrupt_handler+0x17e>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
     b7c:	2324      	movs	r3, #36	; 0x24
     b7e:	5ce3      	ldrb	r3, [r4, r3]
     b80:	2b00      	cmp	r3, #0
     b82:	d102      	bne.n	b8a <_i2c_master_interrupt_handler+0x17e>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     b84:	68e3      	ldr	r3, [r4, #12]
     b86:	0020      	movs	r0, r4
     b88:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
     b8a:	2325      	movs	r3, #37	; 0x25
     b8c:	5ce3      	ldrb	r3, [r4, r3]
     b8e:	2b05      	cmp	r3, #5
     b90:	d01c      	beq.n	bcc <_i2c_master_interrupt_handler+0x1c0>
     b92:	2325      	movs	r3, #37	; 0x25
     b94:	5ce3      	ldrb	r3, [r4, r3]
     b96:	2b00      	cmp	r3, #0
     b98:	d018      	beq.n	bcc <_i2c_master_interrupt_handler+0x1c0>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
     b9a:	2303      	movs	r3, #3
     b9c:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
     b9e:	2300      	movs	r3, #0
     ba0:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
     ba2:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
     ba4:	3325      	adds	r3, #37	; 0x25
     ba6:	5ce3      	ldrb	r3, [r4, r3]
     ba8:	2b41      	cmp	r3, #65	; 0x41
     baa:	d00a      	beq.n	bc2 <_i2c_master_interrupt_handler+0x1b6>
     bac:	7aa3      	ldrb	r3, [r4, #10]
     bae:	2b00      	cmp	r3, #0
     bb0:	d007      	beq.n	bc2 <_i2c_master_interrupt_handler+0x1b6>
				module->send_stop) {
			_i2c_master_wait_for_sync(module);
     bb2:	0020      	movs	r0, r4
     bb4:	4b07      	ldr	r3, [pc, #28]	; (bd4 <_i2c_master_interrupt_handler+0x1c8>)
     bb6:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
     bb8:	686b      	ldr	r3, [r5, #4]
     bba:	22e0      	movs	r2, #224	; 0xe0
     bbc:	02d2      	lsls	r2, r2, #11
     bbe:	4313      	orrs	r3, r2
     bc0:	606b      	str	r3, [r5, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
     bc2:	0773      	lsls	r3, r6, #29
     bc4:	d502      	bpl.n	bcc <_i2c_master_interrupt_handler+0x1c0>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
     bc6:	6963      	ldr	r3, [r4, #20]
     bc8:	0020      	movs	r0, r4
     bca:	4798      	blx	r3
		}
	}
}
     bcc:	bd70      	pop	{r4, r5, r6, pc}
     bce:	46c0      	nop			; (mov r8, r8)
     bd0:	2000082c 	.word	0x2000082c
     bd4:	00000941 	.word	0x00000941
     bd8:	000009d1 	.word	0x000009d1
     bdc:	0000094d 	.word	0x0000094d

00000be0 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     be0:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     be2:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     be4:	2340      	movs	r3, #64	; 0x40
     be6:	2400      	movs	r4, #0
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     be8:	4281      	cmp	r1, r0
     bea:	d201      	bcs.n	bf0 <_sercom_get_sync_baud_val+0x10>
     bec:	e00a      	b.n	c04 <_sercom_get_sync_baud_val+0x24>

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
		baud_calculated++;
     bee:	001c      	movs	r4, r3
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
     bf0:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     bf2:	1c63      	adds	r3, r4, #1
     bf4:	b29b      	uxth	r3, r3
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     bf6:	4288      	cmp	r0, r1
     bf8:	d9f9      	bls.n	bee <_sercom_get_sync_baud_val+0xe>

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     bfa:	2340      	movs	r3, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     bfc:	2cff      	cmp	r4, #255	; 0xff
     bfe:	d801      	bhi.n	c04 <_sercom_get_sync_baud_val+0x24>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
     c00:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     c02:	2300      	movs	r3, #0
	}
}
     c04:	0018      	movs	r0, r3
     c06:	bd10      	pop	{r4, pc}

00000c08 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     c08:	b5f0      	push	{r4, r5, r6, r7, lr}
     c0a:	465f      	mov	r7, fp
     c0c:	4656      	mov	r6, sl
     c0e:	464d      	mov	r5, r9
     c10:	4644      	mov	r4, r8
     c12:	b4f0      	push	{r4, r5, r6, r7}
     c14:	b089      	sub	sp, #36	; 0x24
     c16:	000c      	movs	r4, r1
     c18:	9205      	str	r2, [sp, #20]
     c1a:	aa12      	add	r2, sp, #72	; 0x48
     c1c:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     c1e:	0002      	movs	r2, r0
     c20:	434a      	muls	r2, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     c22:	2540      	movs	r5, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     c24:	42a2      	cmp	r2, r4
     c26:	d900      	bls.n	c2a <_sercom_get_async_baud_val+0x22>
     c28:	e0c6      	b.n	db8 <_sercom_get_async_baud_val+0x1b0>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     c2a:	2b00      	cmp	r3, #0
     c2c:	d151      	bne.n	cd2 <_sercom_get_async_baud_val+0xca>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     c2e:	0002      	movs	r2, r0
     c30:	0008      	movs	r0, r1
     c32:	2100      	movs	r1, #0
     c34:	4d64      	ldr	r5, [pc, #400]	; (dc8 <_sercom_get_async_baud_val+0x1c0>)
     c36:	47a8      	blx	r5
     c38:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
     c3a:	0026      	movs	r6, r4
     c3c:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     c3e:	2300      	movs	r3, #0
     c40:	2400      	movs	r4, #0
     c42:	9300      	str	r3, [sp, #0]
     c44:	9401      	str	r4, [sp, #4]
     c46:	2200      	movs	r2, #0
     c48:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     c4a:	203f      	movs	r0, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     c4c:	2120      	movs	r1, #32
     c4e:	468c      	mov	ip, r1
     c50:	391f      	subs	r1, #31
     c52:	9602      	str	r6, [sp, #8]
     c54:	9703      	str	r7, [sp, #12]
     c56:	2420      	movs	r4, #32
     c58:	4264      	negs	r4, r4
     c5a:	1904      	adds	r4, r0, r4
     c5c:	d403      	bmi.n	c66 <_sercom_get_async_baud_val+0x5e>
     c5e:	000d      	movs	r5, r1
     c60:	40a5      	lsls	r5, r4
     c62:	46a8      	mov	r8, r5
     c64:	e004      	b.n	c70 <_sercom_get_async_baud_val+0x68>
     c66:	4664      	mov	r4, ip
     c68:	1a24      	subs	r4, r4, r0
     c6a:	000d      	movs	r5, r1
     c6c:	40e5      	lsrs	r5, r4
     c6e:	46a8      	mov	r8, r5
     c70:	000c      	movs	r4, r1
     c72:	4084      	lsls	r4, r0
     c74:	46a1      	mov	r9, r4

		r = r << 1;
     c76:	0014      	movs	r4, r2
     c78:	001d      	movs	r5, r3
     c7a:	18a4      	adds	r4, r4, r2
     c7c:	415d      	adcs	r5, r3
     c7e:	0022      	movs	r2, r4
     c80:	002b      	movs	r3, r5

		if (n & bit_shift) {
     c82:	4646      	mov	r6, r8
     c84:	465f      	mov	r7, fp
     c86:	423e      	tst	r6, r7
     c88:	d003      	beq.n	c92 <_sercom_get_async_baud_val+0x8a>
			r |= 0x01;
     c8a:	000e      	movs	r6, r1
     c8c:	4326      	orrs	r6, r4
     c8e:	0032      	movs	r2, r6
     c90:	002b      	movs	r3, r5
		}

		if (r >= d) {
     c92:	9c02      	ldr	r4, [sp, #8]
     c94:	9d03      	ldr	r5, [sp, #12]
     c96:	429d      	cmp	r5, r3
     c98:	d80f      	bhi.n	cba <_sercom_get_async_baud_val+0xb2>
     c9a:	d101      	bne.n	ca0 <_sercom_get_async_baud_val+0x98>
     c9c:	4294      	cmp	r4, r2
     c9e:	d80c      	bhi.n	cba <_sercom_get_async_baud_val+0xb2>
			r = r - d;
     ca0:	9c02      	ldr	r4, [sp, #8]
     ca2:	9d03      	ldr	r5, [sp, #12]
     ca4:	1b12      	subs	r2, r2, r4
     ca6:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     ca8:	464d      	mov	r5, r9
     caa:	9e00      	ldr	r6, [sp, #0]
     cac:	9f01      	ldr	r7, [sp, #4]
     cae:	4335      	orrs	r5, r6
     cb0:	003c      	movs	r4, r7
     cb2:	4646      	mov	r6, r8
     cb4:	4334      	orrs	r4, r6
     cb6:	9500      	str	r5, [sp, #0]
     cb8:	9401      	str	r4, [sp, #4]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     cba:	3801      	subs	r0, #1
     cbc:	d2cb      	bcs.n	c56 <_sercom_get_async_baud_val+0x4e>
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
     cbe:	2200      	movs	r2, #0
     cc0:	2301      	movs	r3, #1
     cc2:	9800      	ldr	r0, [sp, #0]
     cc4:	9901      	ldr	r1, [sp, #4]
     cc6:	1a12      	subs	r2, r2, r0
     cc8:	418b      	sbcs	r3, r1
     cca:	0c12      	lsrs	r2, r2, #16
     ccc:	041b      	lsls	r3, r3, #16
     cce:	431a      	orrs	r2, r3
     cd0:	e06f      	b.n	db2 <_sercom_get_async_baud_val+0x1aa>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
     cd2:	2200      	movs	r2, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     cd4:	2b01      	cmp	r3, #1
     cd6:	d16c      	bne.n	db2 <_sercom_get_async_baud_val+0x1aa>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     cd8:	0f63      	lsrs	r3, r4, #29
     cda:	9304      	str	r3, [sp, #16]
     cdc:	00e3      	lsls	r3, r4, #3
     cde:	4698      	mov	r8, r3
			temp2 = ((uint64_t)baudrate * sample_num);
     ce0:	000a      	movs	r2, r1
     ce2:	2300      	movs	r3, #0
     ce4:	2100      	movs	r1, #0
     ce6:	4c38      	ldr	r4, [pc, #224]	; (dc8 <_sercom_get_async_baud_val+0x1c0>)
     ce8:	47a0      	blx	r4
     cea:	0004      	movs	r4, r0
     cec:	000d      	movs	r5, r1
     cee:	2300      	movs	r3, #0
     cf0:	469c      	mov	ip, r3
     cf2:	9306      	str	r3, [sp, #24]
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
     cf4:	3320      	adds	r3, #32
     cf6:	469b      	mov	fp, r3
     cf8:	2601      	movs	r6, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
     cfa:	4663      	mov	r3, ip
     cfc:	9307      	str	r3, [sp, #28]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     cfe:	2300      	movs	r3, #0
     d00:	9302      	str	r3, [sp, #8]
     d02:	2200      	movs	r2, #0
     d04:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     d06:	213f      	movs	r1, #63	; 0x3f
     d08:	9400      	str	r4, [sp, #0]
     d0a:	9501      	str	r5, [sp, #4]
     d0c:	000f      	movs	r7, r1
		bit_shift = (uint64_t)1 << i;
     d0e:	2120      	movs	r1, #32
     d10:	4249      	negs	r1, r1
     d12:	1879      	adds	r1, r7, r1
     d14:	d403      	bmi.n	d1e <_sercom_get_async_baud_val+0x116>
     d16:	0030      	movs	r0, r6
     d18:	4088      	lsls	r0, r1
     d1a:	4684      	mov	ip, r0
     d1c:	e004      	b.n	d28 <_sercom_get_async_baud_val+0x120>
     d1e:	4659      	mov	r1, fp
     d20:	1bc9      	subs	r1, r1, r7
     d22:	0030      	movs	r0, r6
     d24:	40c8      	lsrs	r0, r1
     d26:	4684      	mov	ip, r0
     d28:	0031      	movs	r1, r6
     d2a:	40b9      	lsls	r1, r7
     d2c:	4689      	mov	r9, r1

		r = r << 1;
     d2e:	0010      	movs	r0, r2
     d30:	0019      	movs	r1, r3
     d32:	1880      	adds	r0, r0, r2
     d34:	4159      	adcs	r1, r3
     d36:	0002      	movs	r2, r0
     d38:	000b      	movs	r3, r1

		if (n & bit_shift) {
     d3a:	4644      	mov	r4, r8
     d3c:	464d      	mov	r5, r9
     d3e:	402c      	ands	r4, r5
     d40:	46a2      	mov	sl, r4
     d42:	4664      	mov	r4, ip
     d44:	9d04      	ldr	r5, [sp, #16]
     d46:	402c      	ands	r4, r5
     d48:	46a4      	mov	ip, r4
     d4a:	4654      	mov	r4, sl
     d4c:	4665      	mov	r5, ip
     d4e:	432c      	orrs	r4, r5
     d50:	d003      	beq.n	d5a <_sercom_get_async_baud_val+0x152>
			r |= 0x01;
     d52:	0034      	movs	r4, r6
     d54:	4304      	orrs	r4, r0
     d56:	0022      	movs	r2, r4
     d58:	000b      	movs	r3, r1
		}

		if (r >= d) {
     d5a:	9800      	ldr	r0, [sp, #0]
     d5c:	9901      	ldr	r1, [sp, #4]
     d5e:	4299      	cmp	r1, r3
     d60:	d80a      	bhi.n	d78 <_sercom_get_async_baud_val+0x170>
     d62:	d101      	bne.n	d68 <_sercom_get_async_baud_val+0x160>
     d64:	4290      	cmp	r0, r2
     d66:	d807      	bhi.n	d78 <_sercom_get_async_baud_val+0x170>
			r = r - d;
     d68:	9800      	ldr	r0, [sp, #0]
     d6a:	9901      	ldr	r1, [sp, #4]
     d6c:	1a12      	subs	r2, r2, r0
     d6e:	418b      	sbcs	r3, r1
			q |= bit_shift;
     d70:	9902      	ldr	r1, [sp, #8]
     d72:	4648      	mov	r0, r9
     d74:	4301      	orrs	r1, r0
     d76:	9102      	str	r1, [sp, #8]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     d78:	3f01      	subs	r7, #1
     d7a:	d2c8      	bcs.n	d0e <_sercom_get_async_baud_val+0x106>
     d7c:	9c00      	ldr	r4, [sp, #0]
     d7e:	9d01      	ldr	r5, [sp, #4]
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
     d80:	9902      	ldr	r1, [sp, #8]
     d82:	9a07      	ldr	r2, [sp, #28]
     d84:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
     d86:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
     d88:	4910      	ldr	r1, [pc, #64]	; (dcc <_sercom_get_async_baud_val+0x1c4>)
     d8a:	428b      	cmp	r3, r1
     d8c:	d90b      	bls.n	da6 <_sercom_get_async_baud_val+0x19e>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     d8e:	9b06      	ldr	r3, [sp, #24]
     d90:	3301      	adds	r3, #1
     d92:	b2db      	uxtb	r3, r3
     d94:	0019      	movs	r1, r3
     d96:	9306      	str	r3, [sp, #24]
     d98:	0013      	movs	r3, r2
     d9a:	3301      	adds	r3, #1
     d9c:	9307      	str	r3, [sp, #28]
     d9e:	2908      	cmp	r1, #8
     da0:	d1ad      	bne.n	cfe <_sercom_get_async_baud_val+0xf6>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     da2:	2540      	movs	r5, #64	; 0x40
     da4:	e008      	b.n	db8 <_sercom_get_async_baud_val+0x1b0>
     da6:	2540      	movs	r5, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
     da8:	9a06      	ldr	r2, [sp, #24]
     daa:	2a08      	cmp	r2, #8
     dac:	d004      	beq.n	db8 <_sercom_get_async_baud_val+0x1b0>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
     dae:	0352      	lsls	r2, r2, #13
     db0:	431a      	orrs	r2, r3
	}

	*baudval = baud_calculated;
     db2:	9b05      	ldr	r3, [sp, #20]
     db4:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
     db6:	2500      	movs	r5, #0
}
     db8:	0028      	movs	r0, r5
     dba:	b009      	add	sp, #36	; 0x24
     dbc:	bc3c      	pop	{r2, r3, r4, r5}
     dbe:	4690      	mov	r8, r2
     dc0:	4699      	mov	r9, r3
     dc2:	46a2      	mov	sl, r4
     dc4:	46ab      	mov	fp, r5
     dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     dc8:	000052b1 	.word	0x000052b1
     dcc:	00001fff 	.word	0x00001fff

00000dd0 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     dd0:	b510      	push	{r4, lr}
     dd2:	b082      	sub	sp, #8
     dd4:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     dd6:	4b0e      	ldr	r3, [pc, #56]	; (e10 <sercom_set_gclk_generator+0x40>)
     dd8:	781b      	ldrb	r3, [r3, #0]
     dda:	2b00      	cmp	r3, #0
     ddc:	d001      	beq.n	de2 <sercom_set_gclk_generator+0x12>
     dde:	2900      	cmp	r1, #0
     de0:	d00d      	beq.n	dfe <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     de2:	a901      	add	r1, sp, #4
     de4:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     de6:	2013      	movs	r0, #19
     de8:	4b0a      	ldr	r3, [pc, #40]	; (e14 <sercom_set_gclk_generator+0x44>)
     dea:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     dec:	2013      	movs	r0, #19
     dee:	4b0a      	ldr	r3, [pc, #40]	; (e18 <sercom_set_gclk_generator+0x48>)
     df0:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
     df2:	4b07      	ldr	r3, [pc, #28]	; (e10 <sercom_set_gclk_generator+0x40>)
     df4:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     df6:	2201      	movs	r2, #1
     df8:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     dfa:	2000      	movs	r0, #0
     dfc:	e006      	b.n	e0c <sercom_set_gclk_generator+0x3c>
	} else if (generator_source == _sercom_config.generator_source) {
     dfe:	4b04      	ldr	r3, [pc, #16]	; (e10 <sercom_set_gclk_generator+0x40>)
     e00:	785b      	ldrb	r3, [r3, #1]
     e02:	4283      	cmp	r3, r0
     e04:	d001      	beq.n	e0a <sercom_set_gclk_generator+0x3a>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     e06:	201d      	movs	r0, #29
     e08:	e000      	b.n	e0c <sercom_set_gclk_generator+0x3c>
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config */
		return STATUS_OK;
     e0a:	2000      	movs	r0, #0
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     e0c:	b002      	add	sp, #8
     e0e:	bd10      	pop	{r4, pc}
     e10:	20000094 	.word	0x20000094
     e14:	000021a5 	.word	0x000021a5
     e18:	00002119 	.word	0x00002119

00000e1c <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     e1c:	4b44      	ldr	r3, [pc, #272]	; (f30 <_sercom_get_default_pad+0x114>)
     e1e:	4298      	cmp	r0, r3
     e20:	d033      	beq.n	e8a <_sercom_get_default_pad+0x6e>
     e22:	d806      	bhi.n	e32 <_sercom_get_default_pad+0x16>
     e24:	4b43      	ldr	r3, [pc, #268]	; (f34 <_sercom_get_default_pad+0x118>)
     e26:	4298      	cmp	r0, r3
     e28:	d00d      	beq.n	e46 <_sercom_get_default_pad+0x2a>
     e2a:	4b43      	ldr	r3, [pc, #268]	; (f38 <_sercom_get_default_pad+0x11c>)
     e2c:	4298      	cmp	r0, r3
     e2e:	d01b      	beq.n	e68 <_sercom_get_default_pad+0x4c>
     e30:	e06f      	b.n	f12 <_sercom_get_default_pad+0xf6>
     e32:	4b42      	ldr	r3, [pc, #264]	; (f3c <_sercom_get_default_pad+0x120>)
     e34:	4298      	cmp	r0, r3
     e36:	d04a      	beq.n	ece <_sercom_get_default_pad+0xb2>
     e38:	4b41      	ldr	r3, [pc, #260]	; (f40 <_sercom_get_default_pad+0x124>)
     e3a:	4298      	cmp	r0, r3
     e3c:	d058      	beq.n	ef0 <_sercom_get_default_pad+0xd4>
     e3e:	4b41      	ldr	r3, [pc, #260]	; (f44 <_sercom_get_default_pad+0x128>)
     e40:	4298      	cmp	r0, r3
     e42:	d166      	bne.n	f12 <_sercom_get_default_pad+0xf6>
     e44:	e032      	b.n	eac <_sercom_get_default_pad+0x90>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     e46:	2901      	cmp	r1, #1
     e48:	d006      	beq.n	e58 <_sercom_get_default_pad+0x3c>
     e4a:	2900      	cmp	r1, #0
     e4c:	d063      	beq.n	f16 <_sercom_get_default_pad+0xfa>
     e4e:	2902      	cmp	r1, #2
     e50:	d006      	beq.n	e60 <_sercom_get_default_pad+0x44>
     e52:	2903      	cmp	r1, #3
     e54:	d006      	beq.n	e64 <_sercom_get_default_pad+0x48>
     e56:	e001      	b.n	e5c <_sercom_get_default_pad+0x40>
     e58:	483b      	ldr	r0, [pc, #236]	; (f48 <_sercom_get_default_pad+0x12c>)
     e5a:	e067      	b.n	f2c <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     e5c:	2000      	movs	r0, #0
     e5e:	e065      	b.n	f2c <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     e60:	483a      	ldr	r0, [pc, #232]	; (f4c <_sercom_get_default_pad+0x130>)
     e62:	e063      	b.n	f2c <_sercom_get_default_pad+0x110>
     e64:	483a      	ldr	r0, [pc, #232]	; (f50 <_sercom_get_default_pad+0x134>)
     e66:	e061      	b.n	f2c <_sercom_get_default_pad+0x110>
     e68:	2901      	cmp	r1, #1
     e6a:	d006      	beq.n	e7a <_sercom_get_default_pad+0x5e>
     e6c:	2900      	cmp	r1, #0
     e6e:	d054      	beq.n	f1a <_sercom_get_default_pad+0xfe>
     e70:	2902      	cmp	r1, #2
     e72:	d006      	beq.n	e82 <_sercom_get_default_pad+0x66>
     e74:	2903      	cmp	r1, #3
     e76:	d006      	beq.n	e86 <_sercom_get_default_pad+0x6a>
     e78:	e001      	b.n	e7e <_sercom_get_default_pad+0x62>
     e7a:	4836      	ldr	r0, [pc, #216]	; (f54 <_sercom_get_default_pad+0x138>)
     e7c:	e056      	b.n	f2c <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     e7e:	2000      	movs	r0, #0
     e80:	e054      	b.n	f2c <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     e82:	4835      	ldr	r0, [pc, #212]	; (f58 <_sercom_get_default_pad+0x13c>)
     e84:	e052      	b.n	f2c <_sercom_get_default_pad+0x110>
     e86:	4835      	ldr	r0, [pc, #212]	; (f5c <_sercom_get_default_pad+0x140>)
     e88:	e050      	b.n	f2c <_sercom_get_default_pad+0x110>
     e8a:	2901      	cmp	r1, #1
     e8c:	d006      	beq.n	e9c <_sercom_get_default_pad+0x80>
     e8e:	2900      	cmp	r1, #0
     e90:	d045      	beq.n	f1e <_sercom_get_default_pad+0x102>
     e92:	2902      	cmp	r1, #2
     e94:	d006      	beq.n	ea4 <_sercom_get_default_pad+0x88>
     e96:	2903      	cmp	r1, #3
     e98:	d006      	beq.n	ea8 <_sercom_get_default_pad+0x8c>
     e9a:	e001      	b.n	ea0 <_sercom_get_default_pad+0x84>
     e9c:	4830      	ldr	r0, [pc, #192]	; (f60 <_sercom_get_default_pad+0x144>)
     e9e:	e045      	b.n	f2c <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     ea0:	2000      	movs	r0, #0
     ea2:	e043      	b.n	f2c <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     ea4:	482f      	ldr	r0, [pc, #188]	; (f64 <_sercom_get_default_pad+0x148>)
     ea6:	e041      	b.n	f2c <_sercom_get_default_pad+0x110>
     ea8:	482f      	ldr	r0, [pc, #188]	; (f68 <_sercom_get_default_pad+0x14c>)
     eaa:	e03f      	b.n	f2c <_sercom_get_default_pad+0x110>
     eac:	2901      	cmp	r1, #1
     eae:	d006      	beq.n	ebe <_sercom_get_default_pad+0xa2>
     eb0:	2900      	cmp	r1, #0
     eb2:	d036      	beq.n	f22 <_sercom_get_default_pad+0x106>
     eb4:	2902      	cmp	r1, #2
     eb6:	d006      	beq.n	ec6 <_sercom_get_default_pad+0xaa>
     eb8:	2903      	cmp	r1, #3
     eba:	d006      	beq.n	eca <_sercom_get_default_pad+0xae>
     ebc:	e001      	b.n	ec2 <_sercom_get_default_pad+0xa6>
     ebe:	482b      	ldr	r0, [pc, #172]	; (f6c <_sercom_get_default_pad+0x150>)
     ec0:	e034      	b.n	f2c <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     ec2:	2000      	movs	r0, #0
     ec4:	e032      	b.n	f2c <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     ec6:	482a      	ldr	r0, [pc, #168]	; (f70 <_sercom_get_default_pad+0x154>)
     ec8:	e030      	b.n	f2c <_sercom_get_default_pad+0x110>
     eca:	482a      	ldr	r0, [pc, #168]	; (f74 <_sercom_get_default_pad+0x158>)
     ecc:	e02e      	b.n	f2c <_sercom_get_default_pad+0x110>
     ece:	2901      	cmp	r1, #1
     ed0:	d006      	beq.n	ee0 <_sercom_get_default_pad+0xc4>
     ed2:	2900      	cmp	r1, #0
     ed4:	d027      	beq.n	f26 <_sercom_get_default_pad+0x10a>
     ed6:	2902      	cmp	r1, #2
     ed8:	d006      	beq.n	ee8 <_sercom_get_default_pad+0xcc>
     eda:	2903      	cmp	r1, #3
     edc:	d006      	beq.n	eec <_sercom_get_default_pad+0xd0>
     ede:	e001      	b.n	ee4 <_sercom_get_default_pad+0xc8>
     ee0:	4825      	ldr	r0, [pc, #148]	; (f78 <_sercom_get_default_pad+0x15c>)
     ee2:	e023      	b.n	f2c <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     ee4:	2000      	movs	r0, #0
     ee6:	e021      	b.n	f2c <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     ee8:	4824      	ldr	r0, [pc, #144]	; (f7c <_sercom_get_default_pad+0x160>)
     eea:	e01f      	b.n	f2c <_sercom_get_default_pad+0x110>
     eec:	4824      	ldr	r0, [pc, #144]	; (f80 <_sercom_get_default_pad+0x164>)
     eee:	e01d      	b.n	f2c <_sercom_get_default_pad+0x110>
     ef0:	2901      	cmp	r1, #1
     ef2:	d006      	beq.n	f02 <_sercom_get_default_pad+0xe6>
     ef4:	2900      	cmp	r1, #0
     ef6:	d018      	beq.n	f2a <_sercom_get_default_pad+0x10e>
     ef8:	2902      	cmp	r1, #2
     efa:	d006      	beq.n	f0a <_sercom_get_default_pad+0xee>
     efc:	2903      	cmp	r1, #3
     efe:	d006      	beq.n	f0e <_sercom_get_default_pad+0xf2>
     f00:	e001      	b.n	f06 <_sercom_get_default_pad+0xea>
     f02:	4820      	ldr	r0, [pc, #128]	; (f84 <_sercom_get_default_pad+0x168>)
     f04:	e012      	b.n	f2c <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     f06:	2000      	movs	r0, #0
     f08:	e010      	b.n	f2c <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     f0a:	481f      	ldr	r0, [pc, #124]	; (f88 <_sercom_get_default_pad+0x16c>)
     f0c:	e00e      	b.n	f2c <_sercom_get_default_pad+0x110>
     f0e:	481f      	ldr	r0, [pc, #124]	; (f8c <_sercom_get_default_pad+0x170>)
     f10:	e00c      	b.n	f2c <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     f12:	2000      	movs	r0, #0
     f14:	e00a      	b.n	f2c <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     f16:	481e      	ldr	r0, [pc, #120]	; (f90 <_sercom_get_default_pad+0x174>)
     f18:	e008      	b.n	f2c <_sercom_get_default_pad+0x110>
     f1a:	2003      	movs	r0, #3
     f1c:	e006      	b.n	f2c <_sercom_get_default_pad+0x110>
     f1e:	481d      	ldr	r0, [pc, #116]	; (f94 <_sercom_get_default_pad+0x178>)
     f20:	e004      	b.n	f2c <_sercom_get_default_pad+0x110>
     f22:	481d      	ldr	r0, [pc, #116]	; (f98 <_sercom_get_default_pad+0x17c>)
     f24:	e002      	b.n	f2c <_sercom_get_default_pad+0x110>
     f26:	481d      	ldr	r0, [pc, #116]	; (f9c <_sercom_get_default_pad+0x180>)
     f28:	e000      	b.n	f2c <_sercom_get_default_pad+0x110>
     f2a:	481d      	ldr	r0, [pc, #116]	; (fa0 <_sercom_get_default_pad+0x184>)
	}

	Assert(false);
	return 0;
}
     f2c:	4770      	bx	lr
     f2e:	46c0      	nop			; (mov r8, r8)
     f30:	42001000 	.word	0x42001000
     f34:	42000800 	.word	0x42000800
     f38:	42000c00 	.word	0x42000c00
     f3c:	42001800 	.word	0x42001800
     f40:	42001c00 	.word	0x42001c00
     f44:	42001400 	.word	0x42001400
     f48:	00050003 	.word	0x00050003
     f4c:	00060003 	.word	0x00060003
     f50:	00070003 	.word	0x00070003
     f54:	00010003 	.word	0x00010003
     f58:	001e0003 	.word	0x001e0003
     f5c:	001f0003 	.word	0x001f0003
     f60:	000d0002 	.word	0x000d0002
     f64:	000e0002 	.word	0x000e0002
     f68:	000f0002 	.word	0x000f0002
     f6c:	00110003 	.word	0x00110003
     f70:	00120003 	.word	0x00120003
     f74:	00130003 	.word	0x00130003
     f78:	003f0005 	.word	0x003f0005
     f7c:	003e0005 	.word	0x003e0005
     f80:	00520005 	.word	0x00520005
     f84:	00170003 	.word	0x00170003
     f88:	00180003 	.word	0x00180003
     f8c:	00190003 	.word	0x00190003
     f90:	00040003 	.word	0x00040003
     f94:	000c0002 	.word	0x000c0002
     f98:	00100003 	.word	0x00100003
     f9c:	00530005 	.word	0x00530005
     fa0:	00160003 	.word	0x00160003

00000fa4 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     fa4:	b530      	push	{r4, r5, lr}
     fa6:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     fa8:	4b0c      	ldr	r3, [pc, #48]	; (fdc <_sercom_get_sercom_inst_index+0x38>)
     faa:	466a      	mov	r2, sp
     fac:	cb32      	ldmia	r3!, {r1, r4, r5}
     fae:	c232      	stmia	r2!, {r1, r4, r5}
     fb0:	cb32      	ldmia	r3!, {r1, r4, r5}
     fb2:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     fb4:	9b00      	ldr	r3, [sp, #0]
     fb6:	4283      	cmp	r3, r0
     fb8:	d006      	beq.n	fc8 <_sercom_get_sercom_inst_index+0x24>
     fba:	2301      	movs	r3, #1
     fbc:	009a      	lsls	r2, r3, #2
     fbe:	4669      	mov	r1, sp
     fc0:	5852      	ldr	r2, [r2, r1]
     fc2:	4282      	cmp	r2, r0
     fc4:	d103      	bne.n	fce <_sercom_get_sercom_inst_index+0x2a>
     fc6:	e000      	b.n	fca <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     fc8:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
     fca:	b2d8      	uxtb	r0, r3
     fcc:	e003      	b.n	fd6 <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     fce:	3301      	adds	r3, #1
     fd0:	2b06      	cmp	r3, #6
     fd2:	d1f3      	bne.n	fbc <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     fd4:	2000      	movs	r0, #0
}
     fd6:	b007      	add	sp, #28
     fd8:	bd30      	pop	{r4, r5, pc}
     fda:	46c0      	nop			; (mov r8, r8)
     fdc:	00007dc8 	.word	0x00007dc8

00000fe0 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     fe0:	4770      	bx	lr
     fe2:	46c0      	nop			; (mov r8, r8)

00000fe4 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     fe6:	4b0a      	ldr	r3, [pc, #40]	; (1010 <_sercom_set_handler+0x2c>)
     fe8:	781b      	ldrb	r3, [r3, #0]
     fea:	2b00      	cmp	r3, #0
     fec:	d10c      	bne.n	1008 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     fee:	4f09      	ldr	r7, [pc, #36]	; (1014 <_sercom_set_handler+0x30>)
     ff0:	4e09      	ldr	r6, [pc, #36]	; (1018 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     ff2:	4d0a      	ldr	r5, [pc, #40]	; (101c <_sercom_set_handler+0x38>)
     ff4:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     ff6:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     ff8:	195a      	adds	r2, r3, r5
     ffa:	6014      	str	r4, [r2, #0]
     ffc:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     ffe:	2b18      	cmp	r3, #24
    1000:	d1f9      	bne.n	ff6 <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    1002:	2201      	movs	r2, #1
    1004:	4b02      	ldr	r3, [pc, #8]	; (1010 <_sercom_set_handler+0x2c>)
    1006:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1008:	0080      	lsls	r0, r0, #2
    100a:	4b02      	ldr	r3, [pc, #8]	; (1014 <_sercom_set_handler+0x30>)
    100c:	50c1      	str	r1, [r0, r3]
}
    100e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1010:	20000096 	.word	0x20000096
    1014:	20000098 	.word	0x20000098
    1018:	00000fe1 	.word	0x00000fe1
    101c:	2000082c 	.word	0x2000082c

00001020 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1020:	b510      	push	{r4, lr}
    1022:	b082      	sub	sp, #8
    1024:	0004      	movs	r4, r0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1026:	2206      	movs	r2, #6
    1028:	4905      	ldr	r1, [pc, #20]	; (1040 <_sercom_get_interrupt_vector+0x20>)
    102a:	4668      	mov	r0, sp
    102c:	4b05      	ldr	r3, [pc, #20]	; (1044 <_sercom_get_interrupt_vector+0x24>)
    102e:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1030:	0020      	movs	r0, r4
    1032:	4b05      	ldr	r3, [pc, #20]	; (1048 <_sercom_get_interrupt_vector+0x28>)
    1034:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1036:	466b      	mov	r3, sp
    1038:	5618      	ldrsb	r0, [r3, r0]
}
    103a:	b002      	add	sp, #8
    103c:	bd10      	pop	{r4, pc}
    103e:	46c0      	nop			; (mov r8, r8)
    1040:	00007de0 	.word	0x00007de0
    1044:	00006c8d 	.word	0x00006c8d
    1048:	00000fa5 	.word	0x00000fa5

0000104c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    104c:	b510      	push	{r4, lr}
    104e:	4b02      	ldr	r3, [pc, #8]	; (1058 <SERCOM0_Handler+0xc>)
    1050:	681b      	ldr	r3, [r3, #0]
    1052:	2000      	movs	r0, #0
    1054:	4798      	blx	r3
    1056:	bd10      	pop	{r4, pc}
    1058:	20000098 	.word	0x20000098

0000105c <SERCOM1_Handler>:
    105c:	b510      	push	{r4, lr}
    105e:	4b02      	ldr	r3, [pc, #8]	; (1068 <SERCOM1_Handler+0xc>)
    1060:	685b      	ldr	r3, [r3, #4]
    1062:	2001      	movs	r0, #1
    1064:	4798      	blx	r3
    1066:	bd10      	pop	{r4, pc}
    1068:	20000098 	.word	0x20000098

0000106c <SERCOM2_Handler>:
    106c:	b510      	push	{r4, lr}
    106e:	4b02      	ldr	r3, [pc, #8]	; (1078 <SERCOM2_Handler+0xc>)
    1070:	689b      	ldr	r3, [r3, #8]
    1072:	2002      	movs	r0, #2
    1074:	4798      	blx	r3
    1076:	bd10      	pop	{r4, pc}
    1078:	20000098 	.word	0x20000098

0000107c <SERCOM3_Handler>:
    107c:	b510      	push	{r4, lr}
    107e:	4b02      	ldr	r3, [pc, #8]	; (1088 <SERCOM3_Handler+0xc>)
    1080:	68db      	ldr	r3, [r3, #12]
    1082:	2003      	movs	r0, #3
    1084:	4798      	blx	r3
    1086:	bd10      	pop	{r4, pc}
    1088:	20000098 	.word	0x20000098

0000108c <SERCOM4_Handler>:
    108c:	b510      	push	{r4, lr}
    108e:	4b02      	ldr	r3, [pc, #8]	; (1098 <SERCOM4_Handler+0xc>)
    1090:	691b      	ldr	r3, [r3, #16]
    1092:	2004      	movs	r0, #4
    1094:	4798      	blx	r3
    1096:	bd10      	pop	{r4, pc}
    1098:	20000098 	.word	0x20000098

0000109c <SERCOM5_Handler>:
    109c:	b510      	push	{r4, lr}
    109e:	4b02      	ldr	r3, [pc, #8]	; (10a8 <SERCOM5_Handler+0xc>)
    10a0:	695b      	ldr	r3, [r3, #20]
    10a2:	2005      	movs	r0, #5
    10a4:	4798      	blx	r3
    10a6:	bd10      	pop	{r4, pc}
    10a8:	20000098 	.word	0x20000098

000010ac <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    10ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    10ae:	4657      	mov	r7, sl
    10b0:	464e      	mov	r6, r9
    10b2:	4645      	mov	r5, r8
    10b4:	b4e0      	push	{r5, r6, r7}
    10b6:	b08a      	sub	sp, #40	; 0x28
    10b8:	0005      	movs	r5, r0
    10ba:	000e      	movs	r6, r1
    10bc:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    10be:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    10c0:	680b      	ldr	r3, [r1, #0]
    10c2:	079b      	lsls	r3, r3, #30
    10c4:	d400      	bmi.n	10c8 <spi_init+0x1c>
    10c6:	e08c      	b.n	11e2 <spi_init+0x136>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
    10c8:	6a93      	ldr	r3, [r2, #40]	; 0x28
    10ca:	9305      	str	r3, [sp, #20]
    10cc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    10ce:	9306      	str	r3, [sp, #24]
    10d0:	6b13      	ldr	r3, [r2, #48]	; 0x30
    10d2:	9307      	str	r3, [sp, #28]
    10d4:	6b53      	ldr	r3, [r2, #52]	; 0x34
    10d6:	9308      	str	r3, [sp, #32]
    10d8:	2700      	movs	r7, #0
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);
    10da:	231f      	movs	r3, #31
    10dc:	4699      	mov	r9, r3
    10de:	b2f9      	uxtb	r1, r7
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    10e0:	00bb      	lsls	r3, r7, #2
    10e2:	aa05      	add	r2, sp, #20
    10e4:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    10e6:	2800      	cmp	r0, #0
    10e8:	d102      	bne.n	10f0 <spi_init+0x44>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    10ea:	0030      	movs	r0, r6
    10ec:	4b8f      	ldr	r3, [pc, #572]	; (132c <spi_init+0x280>)
    10ee:	4798      	blx	r3
		}

		if (current_pinmux == PINMUX_UNUSED) {
    10f0:	1c43      	adds	r3, r0, #1
    10f2:	d029      	beq.n	1148 <spi_init+0x9c>
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
    10f4:	0402      	lsls	r2, r0, #16
    10f6:	0c13      	lsrs	r3, r2, #16
    10f8:	4698      	mov	r8, r3
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    10fa:	0c00      	lsrs	r0, r0, #16
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    10fc:	b2c1      	uxtb	r1, r0
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    10fe:	2300      	movs	r3, #0
    1100:	469c      	mov	ip, r3
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1102:	0603      	lsls	r3, r0, #24
    1104:	d404      	bmi.n	1110 <spi_init+0x64>
		return &(ports[port_index]->Group[group_index]);
    1106:	094b      	lsrs	r3, r1, #5
    1108:	01db      	lsls	r3, r3, #7
    110a:	4a89      	ldr	r2, [pc, #548]	; (1330 <spi_init+0x284>)
    110c:	4694      	mov	ip, r2
    110e:	449c      	add	ip, r3
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);
    1110:	464b      	mov	r3, r9
    1112:	400b      	ands	r3, r1

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    1114:	4660      	mov	r0, ip
    1116:	18c0      	adds	r0, r0, r3
    1118:	3040      	adds	r0, #64	; 0x40
    111a:	7800      	ldrb	r0, [r0, #0]
    111c:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
    111e:	2080      	movs	r0, #128	; 0x80
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    1120:	4652      	mov	r2, sl
    1122:	07d2      	lsls	r2, r2, #31
    1124:	d50a      	bpl.n	113c <spi_init+0x90>
		return SYSTEM_PINMUX_GPIO;
	}

	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    1126:	085b      	lsrs	r3, r3, #1
    1128:	4463      	add	r3, ip
    112a:	3330      	adds	r3, #48	; 0x30
    112c:	7818      	ldrb	r0, [r3, #0]
    112e:	b2c0      	uxtb	r0, r0

	if (pin_index & 1) {
    1130:	07cb      	lsls	r3, r1, #31
    1132:	d501      	bpl.n	1138 <spi_init+0x8c>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    1134:	0900      	lsrs	r0, r0, #4
    1136:	e001      	b.n	113c <spi_init+0x90>
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    1138:	230f      	movs	r3, #15
    113a:	4018      	ands	r0, r3

		if (current_pinmux == PINMUX_UNUSED) {
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
    113c:	4580      	cmp	r8, r0
    113e:	d003      	beq.n	1148 <spi_init+0x9c>
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
			module->hw = NULL;
    1140:	2300      	movs	r3, #0
    1142:	602b      	str	r3, [r5, #0]
			return STATUS_ERR_DENIED;
    1144:	201c      	movs	r0, #28
    1146:	e0ea      	b.n	131e <spi_init+0x272>
    1148:	3701      	adds	r7, #1
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    114a:	2f04      	cmp	r7, #4
    114c:	d1c7      	bne.n	10de <spi_init+0x32>
	}

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    114e:	2013      	movs	r0, #19
    1150:	4b78      	ldr	r3, [pc, #480]	; (1334 <spi_init+0x288>)
    1152:	4798      	blx	r3
	uint32_t addr = 0;
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
    1154:	7822      	ldrb	r2, [r4, #0]
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
#  endif
	/* Value to read CTRLA, CTRLB and ADDR register */
	uint32_t ctrla = 0;
    1156:	2100      	movs	r1, #0
	uint32_t addr = 0;
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
    1158:	2a01      	cmp	r2, #1
    115a:	d112      	bne.n	1182 <spi_init+0xd6>
		enum status_code error_code = _sercom_get_sync_baud_val(
    115c:	aa04      	add	r2, sp, #16
    115e:	0001      	movs	r1, r0
    1160:	69a0      	ldr	r0, [r4, #24]
    1162:	4b75      	ldr	r3, [pc, #468]	; (1338 <spi_init+0x28c>)
    1164:	4798      	blx	r3
    1166:	0003      	movs	r3, r0
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    1168:	2017      	movs	r0, #23
	if (config->mode == SPI_MODE_MASTER) {
		enum status_code error_code = _sercom_get_sync_baud_val(
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
    116a:	2b00      	cmp	r3, #0
    116c:	d000      	beq.n	1170 <spi_init+0xc4>
    116e:	e0d6      	b.n	131e <spi_init+0x272>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    1170:	7b33      	ldrb	r3, [r6, #12]
    1172:	b2db      	uxtb	r3, r3
    1174:	aa04      	add	r2, sp, #16
    1176:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
    1178:	3005      	adds	r0, #5
		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    117a:	429a      	cmp	r2, r3
    117c:	d000      	beq.n	1180 <spi_init+0xd4>
    117e:	e0ce      	b.n	131e <spi_init+0x272>
			return STATUS_ERR_DENIED;
		}

		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    1180:	210c      	movs	r1, #12

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    1182:	6863      	ldr	r3, [r4, #4]
    1184:	68a2      	ldr	r2, [r4, #8]
    1186:	4313      	orrs	r3, r2
    1188:	68e2      	ldr	r2, [r4, #12]
    118a:	4313      	orrs	r3, r2
    118c:	430b      	orrs	r3, r1

	/* Set SPI character size */
	ctrlb |= config->character_size;
    118e:	7c21      	ldrb	r1, [r4, #16]

	if (config->run_in_standby) {
    1190:	7c62      	ldrb	r2, [r4, #17]
    1192:	2a00      	cmp	r2, #0
    1194:	d001      	beq.n	119a <spi_init+0xee>
		/* Enable in sleep mode */
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    1196:	2280      	movs	r2, #128	; 0x80
    1198:	4313      	orrs	r3, r2
	}

	if (config->receiver_enable) {
    119a:	7ca2      	ldrb	r2, [r4, #18]
    119c:	2a00      	cmp	r2, #0
    119e:	d002      	beq.n	11a6 <spi_init+0xfa>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    11a0:	2280      	movs	r2, #128	; 0x80
    11a2:	0292      	lsls	r2, r2, #10
    11a4:	4311      	orrs	r1, r2
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    11a6:	7ce2      	ldrb	r2, [r4, #19]
    11a8:	2a00      	cmp	r2, #0
    11aa:	d002      	beq.n	11b2 <spi_init+0x106>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    11ac:	2280      	movs	r2, #128	; 0x80
    11ae:	0092      	lsls	r2, r2, #2
    11b0:	4311      	orrs	r1, r2
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    11b2:	7d22      	ldrb	r2, [r4, #20]
    11b4:	2a00      	cmp	r2, #0
    11b6:	d002      	beq.n	11be <spi_init+0x112>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    11b8:	2280      	movs	r2, #128	; 0x80
    11ba:	0192      	lsls	r2, r2, #6
    11bc:	4311      	orrs	r1, r2
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
    11be:	6830      	ldr	r0, [r6, #0]
    11c0:	2202      	movs	r2, #2
    11c2:	4313      	orrs	r3, r2
    11c4:	4283      	cmp	r3, r0
    11c6:	d108      	bne.n	11da <spi_init+0x12e>
			spi_module->CTRLB.reg == ctrlb) {
    11c8:	6873      	ldr	r3, [r6, #4]
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
    11ca:	428b      	cmp	r3, r1
    11cc:	d105      	bne.n	11da <spi_init+0x12e>
			spi_module->CTRLB.reg == ctrlb) {
		module->mode           = config->mode;
    11ce:	7823      	ldrb	r3, [r4, #0]
    11d0:	716b      	strb	r3, [r5, #5]
		module->character_size = config->character_size;
    11d2:	7c23      	ldrb	r3, [r4, #16]
    11d4:	71ab      	strb	r3, [r5, #6]
		return STATUS_OK;
    11d6:	2000      	movs	r0, #0
    11d8:	e0a1      	b.n	131e <spi_init+0x272>
	}

	/* Not same config, wipe module pointer and return */
	module->hw = NULL;
    11da:	2300      	movs	r3, #0
    11dc:	602b      	str	r3, [r5, #0]

	return STATUS_ERR_DENIED;
    11de:	201c      	movs	r0, #28
    11e0:	e09d      	b.n	131e <spi_init+0x272>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    11e2:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    11e4:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    11e6:	07db      	lsls	r3, r3, #31
    11e8:	d500      	bpl.n	11ec <spi_init+0x140>
    11ea:	e098      	b.n	131e <spi_init+0x272>
		return STATUS_BUSY;
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    11ec:	0008      	movs	r0, r1
    11ee:	4b53      	ldr	r3, [pc, #332]	; (133c <spi_init+0x290>)
    11f0:	4798      	blx	r3
    11f2:	4953      	ldr	r1, [pc, #332]	; (1340 <spi_init+0x294>)
    11f4:	6a0a      	ldr	r2, [r1, #32]
    11f6:	1c87      	adds	r7, r0, #2
    11f8:	2301      	movs	r3, #1
    11fa:	40bb      	lsls	r3, r7
    11fc:	4313      	orrs	r3, r2
    11fe:	620b      	str	r3, [r1, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    1200:	a909      	add	r1, sp, #36	; 0x24
    1202:	2724      	movs	r7, #36	; 0x24
    1204:	5de3      	ldrb	r3, [r4, r7]
    1206:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1208:	3014      	adds	r0, #20
    120a:	b2c3      	uxtb	r3, r0
    120c:	9301      	str	r3, [sp, #4]
    120e:	0018      	movs	r0, r3
    1210:	4b4c      	ldr	r3, [pc, #304]	; (1344 <spi_init+0x298>)
    1212:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1214:	9801      	ldr	r0, [sp, #4]
    1216:	4b4c      	ldr	r3, [pc, #304]	; (1348 <spi_init+0x29c>)
    1218:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    121a:	5de0      	ldrb	r0, [r4, r7]
    121c:	2100      	movs	r1, #0
    121e:	4b4b      	ldr	r3, [pc, #300]	; (134c <spi_init+0x2a0>)
    1220:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    1222:	7823      	ldrb	r3, [r4, #0]
    1224:	2b01      	cmp	r3, #1
    1226:	d103      	bne.n	1230 <spi_init+0x184>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    1228:	6832      	ldr	r2, [r6, #0]
    122a:	330b      	adds	r3, #11
    122c:	4313      	orrs	r3, r2
    122e:	6033      	str	r3, [r6, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1230:	682e      	ldr	r6, [r5, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1232:	ab04      	add	r3, sp, #16
    1234:	2280      	movs	r2, #128	; 0x80
    1236:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1238:	2200      	movs	r2, #0
    123a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    123c:	2101      	movs	r1, #1
    123e:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    1240:	70da      	strb	r2, [r3, #3]
	Sercom *const hw = module->hw;

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
    1242:	7823      	ldrb	r3, [r4, #0]
    1244:	2b00      	cmp	r3, #0
    1246:	d101      	bne.n	124c <spi_init+0x1a0>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1248:	ab04      	add	r3, sp, #16
    124a:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
    124c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    124e:	9305      	str	r3, [sp, #20]
    1250:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1252:	9306      	str	r3, [sp, #24]
    1254:	6b23      	ldr	r3, [r4, #48]	; 0x30
    1256:	9307      	str	r3, [sp, #28]
    1258:	6b63      	ldr	r3, [r4, #52]	; 0x34
    125a:	9308      	str	r3, [sp, #32]
    125c:	2700      	movs	r7, #0
    125e:	b2f9      	uxtb	r1, r7
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1260:	00bb      	lsls	r3, r7, #2
    1262:	aa05      	add	r2, sp, #20
    1264:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    1266:	2800      	cmp	r0, #0
    1268:	d102      	bne.n	1270 <spi_init+0x1c4>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    126a:	0030      	movs	r0, r6
    126c:	4b2f      	ldr	r3, [pc, #188]	; (132c <spi_init+0x280>)
    126e:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
    1270:	1c43      	adds	r3, r0, #1
    1272:	d006      	beq.n	1282 <spi_init+0x1d6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1274:	ab02      	add	r3, sp, #8
    1276:	7218      	strb	r0, [r3, #8]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1278:	0c00      	lsrs	r0, r0, #16
    127a:	b2c0      	uxtb	r0, r0
    127c:	a904      	add	r1, sp, #16
    127e:	4b34      	ldr	r3, [pc, #208]	; (1350 <spi_init+0x2a4>)
    1280:	4798      	blx	r3
    1282:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    1284:	2f04      	cmp	r7, #4
    1286:	d1ea      	bne.n	125e <spi_init+0x1b2>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
    1288:	7823      	ldrb	r3, [r4, #0]
    128a:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    128c:	7c23      	ldrb	r3, [r4, #16]
    128e:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    1290:	7ca3      	ldrb	r3, [r4, #18]
    1292:	71eb      	strb	r3, [r5, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    1294:	7d23      	ldrb	r3, [r4, #20]
    1296:	722b      	strb	r3, [r5, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    1298:	2200      	movs	r2, #0
    129a:	ab02      	add	r3, sp, #8
    129c:	80da      	strh	r2, [r3, #6]
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    129e:	7823      	ldrb	r3, [r4, #0]
    12a0:	2b01      	cmp	r3, #1
    12a2:	d114      	bne.n	12ce <spi_init+0x222>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    12a4:	6828      	ldr	r0, [r5, #0]
    12a6:	4b25      	ldr	r3, [pc, #148]	; (133c <spi_init+0x290>)
    12a8:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    12aa:	3014      	adds	r0, #20
    12ac:	b2c0      	uxtb	r0, r0
    12ae:	4b21      	ldr	r3, [pc, #132]	; (1334 <spi_init+0x288>)
    12b0:	4798      	blx	r3
    12b2:	0001      	movs	r1, r0

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    12b4:	ab02      	add	r3, sp, #8
    12b6:	1d9a      	adds	r2, r3, #6
    12b8:	69a0      	ldr	r0, [r4, #24]
    12ba:	4b1f      	ldr	r3, [pc, #124]	; (1338 <spi_init+0x28c>)
    12bc:	4798      	blx	r3
    12be:	0003      	movs	r3, r0
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    12c0:	2017      	movs	r0, #23
		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    12c2:	2b00      	cmp	r3, #0
    12c4:	d12b      	bne.n	131e <spi_init+0x272>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    12c6:	ab02      	add	r3, sp, #8
    12c8:	3306      	adds	r3, #6
    12ca:	781b      	ldrb	r3, [r3, #0]
    12cc:	7333      	strb	r3, [r6, #12]
# endif
	/* Set data order */
	ctrla |= config->data_order;

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    12ce:	6863      	ldr	r3, [r4, #4]
    12d0:	68a2      	ldr	r2, [r4, #8]
    12d2:	4313      	orrs	r3, r2

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    12d4:	68e2      	ldr	r2, [r4, #12]
    12d6:	4313      	orrs	r3, r2

	/* Set SPI character size */
	ctrlb |= config->character_size;
    12d8:	7c22      	ldrb	r2, [r4, #16]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    12da:	7c61      	ldrb	r1, [r4, #17]
    12dc:	2900      	cmp	r1, #0
    12de:	d103      	bne.n	12e8 <spi_init+0x23c>
    12e0:	491c      	ldr	r1, [pc, #112]	; (1354 <spi_init+0x2a8>)
    12e2:	7889      	ldrb	r1, [r1, #2]
    12e4:	0789      	lsls	r1, r1, #30
    12e6:	d501      	bpl.n	12ec <spi_init+0x240>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    12e8:	2180      	movs	r1, #128	; 0x80
    12ea:	430b      	orrs	r3, r1
	}

	if (config->receiver_enable) {
    12ec:	7ca1      	ldrb	r1, [r4, #18]
    12ee:	2900      	cmp	r1, #0
    12f0:	d002      	beq.n	12f8 <spi_init+0x24c>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    12f2:	2180      	movs	r1, #128	; 0x80
    12f4:	0289      	lsls	r1, r1, #10
    12f6:	430a      	orrs	r2, r1
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    12f8:	7ce1      	ldrb	r1, [r4, #19]
    12fa:	2900      	cmp	r1, #0
    12fc:	d002      	beq.n	1304 <spi_init+0x258>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    12fe:	2180      	movs	r1, #128	; 0x80
    1300:	0089      	lsls	r1, r1, #2
    1302:	430a      	orrs	r2, r1
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    1304:	7d21      	ldrb	r1, [r4, #20]
    1306:	2900      	cmp	r1, #0
    1308:	d002      	beq.n	1310 <spi_init+0x264>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    130a:	2180      	movs	r1, #128	; 0x80
    130c:	0189      	lsls	r1, r1, #6
    130e:	430a      	orrs	r2, r1
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    1310:	6831      	ldr	r1, [r6, #0]
    1312:	430b      	orrs	r3, r1
    1314:	6033      	str	r3, [r6, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    1316:	6873      	ldr	r3, [r6, #4]
    1318:	4313      	orrs	r3, r2
    131a:	6073      	str	r3, [r6, #4]

	return STATUS_OK;
    131c:	2000      	movs	r0, #0
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    131e:	b00a      	add	sp, #40	; 0x28
    1320:	bc1c      	pop	{r2, r3, r4}
    1322:	4690      	mov	r8, r2
    1324:	4699      	mov	r9, r3
    1326:	46a2      	mov	sl, r4
    1328:	bdf0      	pop	{r4, r5, r6, r7, pc}
    132a:	46c0      	nop			; (mov r8, r8)
    132c:	00000e1d 	.word	0x00000e1d
    1330:	41004400 	.word	0x41004400
    1334:	000021c1 	.word	0x000021c1
    1338:	00000be1 	.word	0x00000be1
    133c:	00000fa5 	.word	0x00000fa5
    1340:	40000400 	.word	0x40000400
    1344:	000021a5 	.word	0x000021a5
    1348:	00002119 	.word	0x00002119
    134c:	00000dd1 	.word	0x00000dd1
    1350:	0000229d 	.word	0x0000229d
    1354:	41002000 	.word	0x41002000

00001358 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    1358:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    135a:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    135c:	2315      	movs	r3, #21
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    135e:	2c01      	cmp	r4, #1
    1360:	d16e      	bne.n	1440 <spi_select_slave+0xe8>
		return STATUS_ERR_UNSUPPORTED_DEV;
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    1362:	7a04      	ldrb	r4, [r0, #8]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    1364:	2300      	movs	r3, #0
	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
		return STATUS_ERR_UNSUPPORTED_DEV;
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    1366:	2c00      	cmp	r4, #0
    1368:	d16a      	bne.n	1440 <spi_select_slave+0xe8>
#  endif
	{
		if (select) {
    136a:	2a00      	cmp	r2, #0
    136c:	d058      	beq.n	1420 <spi_select_slave+0xc8>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    136e:	784b      	ldrb	r3, [r1, #1]
    1370:	2b00      	cmp	r3, #0
    1372:	d044      	beq.n	13fe <spi_select_slave+0xa6>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1374:	6803      	ldr	r3, [r0, #0]
    1376:	7e1b      	ldrb	r3, [r3, #24]
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    1378:	07db      	lsls	r3, r3, #31
    137a:	d410      	bmi.n	139e <spi_select_slave+0x46>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    137c:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    137e:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1380:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1382:	2900      	cmp	r1, #0
    1384:	d104      	bne.n	1390 <spi_select_slave+0x38>
		return &(ports[port_index]->Group[group_index]);
    1386:	095a      	lsrs	r2, r3, #5
    1388:	01d2      	lsls	r2, r2, #7
    138a:	492e      	ldr	r1, [pc, #184]	; (1444 <spi_select_slave+0xec>)
    138c:	468c      	mov	ip, r1
    138e:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1390:	211f      	movs	r1, #31
    1392:	400b      	ands	r3, r1
    1394:	391e      	subs	r1, #30
    1396:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1398:	6191      	str	r1, [r2, #24]
					return STATUS_BUSY;
    139a:	2305      	movs	r3, #5
    139c:	e050      	b.n	1440 <spi_select_slave+0xe8>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    139e:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    13a0:	09dc      	lsrs	r4, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    13a2:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    13a4:	2c00      	cmp	r4, #0
    13a6:	d104      	bne.n	13b2 <spi_select_slave+0x5a>
		return &(ports[port_index]->Group[group_index]);
    13a8:	095a      	lsrs	r2, r3, #5
    13aa:	01d2      	lsls	r2, r2, #7
    13ac:	4c25      	ldr	r4, [pc, #148]	; (1444 <spi_select_slave+0xec>)
    13ae:	46a4      	mov	ip, r4
    13b0:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    13b2:	241f      	movs	r4, #31
    13b4:	4023      	ands	r3, r4
    13b6:	3c1e      	subs	r4, #30
    13b8:	409c      	lsls	r4, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    13ba:	6154      	str	r4, [r2, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    13bc:	6803      	ldr	r3, [r0, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    13be:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    13c0:	07d2      	lsls	r2, r2, #31
    13c2:	d501      	bpl.n	13c8 <spi_select_slave+0x70>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    13c4:	788a      	ldrb	r2, [r1, #2]
    13c6:	629a      	str	r2, [r3, #40]	; 0x28

				/* Write address to slave */
				spi_write(module, slave->address);

				if (!(module->receiver_enabled)) {
    13c8:	79c2      	ldrb	r2, [r0, #7]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    13ca:	2300      	movs	r3, #0
				port_pin_set_output_level(slave->ss_pin, false);

				/* Write address to slave */
				spi_write(module, slave->address);

				if (!(module->receiver_enabled)) {
    13cc:	2a00      	cmp	r2, #0
    13ce:	d137      	bne.n	1440 <spi_select_slave+0xe8>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    13d0:	6802      	ldr	r2, [r0, #0]
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    13d2:	2104      	movs	r1, #4

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    13d4:	7e13      	ldrb	r3, [r2, #24]
    13d6:	420b      	tst	r3, r1
    13d8:	d0fc      	beq.n	13d4 <spi_select_slave+0x7c>
    13da:	7e11      	ldrb	r1, [r2, #24]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    13dc:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    13de:	0749      	lsls	r1, r1, #29
    13e0:	d52e      	bpl.n	1440 <spi_select_slave+0xe8>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    13e2:	8b53      	ldrh	r3, [r2, #26]
    13e4:	075b      	lsls	r3, r3, #29
    13e6:	d501      	bpl.n	13ec <spi_select_slave+0x94>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    13e8:	2304      	movs	r3, #4
    13ea:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    13ec:	7983      	ldrb	r3, [r0, #6]
    13ee:	2b01      	cmp	r3, #1
    13f0:	d102      	bne.n	13f8 <spi_select_slave+0xa0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    13f2:	6a93      	ldr	r3, [r2, #40]	; 0x28
    13f4:	2300      	movs	r3, #0
    13f6:	e023      	b.n	1440 <spi_select_slave+0xe8>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    13f8:	6a93      	ldr	r3, [r2, #40]	; 0x28
    13fa:	2300      	movs	r3, #0
    13fc:	e020      	b.n	1440 <spi_select_slave+0xe8>
					uint16_t flush = 0;
					spi_read(module, &flush);
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    13fe:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1400:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1402:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1404:	2900      	cmp	r1, #0
    1406:	d104      	bne.n	1412 <spi_select_slave+0xba>
		return &(ports[port_index]->Group[group_index]);
    1408:	095a      	lsrs	r2, r3, #5
    140a:	01d2      	lsls	r2, r2, #7
    140c:	490d      	ldr	r1, [pc, #52]	; (1444 <spi_select_slave+0xec>)
    140e:	468c      	mov	ip, r1
    1410:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1412:	211f      	movs	r1, #31
    1414:	400b      	ands	r3, r1
    1416:	391e      	subs	r1, #30
    1418:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    141a:	6151      	str	r1, [r2, #20]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    141c:	2300      	movs	r3, #0
    141e:	e00f      	b.n	1440 <spi_select_slave+0xe8>
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    1420:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1422:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1424:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1426:	2900      	cmp	r1, #0
    1428:	d104      	bne.n	1434 <spi_select_slave+0xdc>
		return &(ports[port_index]->Group[group_index]);
    142a:	095a      	lsrs	r2, r3, #5
    142c:	01d2      	lsls	r2, r2, #7
    142e:	4905      	ldr	r1, [pc, #20]	; (1444 <spi_select_slave+0xec>)
    1430:	468c      	mov	ip, r1
    1432:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1434:	211f      	movs	r1, #31
    1436:	400b      	ands	r3, r1
    1438:	391e      	subs	r1, #30
    143a:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    143c:	6191      	str	r1, [r2, #24]
		}
	}
	return STATUS_OK;
    143e:	2300      	movs	r3, #0
}
    1440:	0018      	movs	r0, r3
    1442:	bd10      	pop	{r4, pc}
    1444:	41004400 	.word	0x41004400

00001448 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    1448:	b5f0      	push	{r4, r5, r6, r7, lr}
    144a:	465f      	mov	r7, fp
    144c:	4656      	mov	r6, sl
    144e:	464d      	mov	r5, r9
    1450:	4644      	mov	r4, r8
    1452:	b4f0      	push	{r4, r5, r6, r7}
    1454:	b091      	sub	sp, #68	; 0x44
    1456:	0005      	movs	r5, r0
    1458:	000c      	movs	r4, r1
    145a:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    145c:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    145e:	0008      	movs	r0, r1
    1460:	4bb9      	ldr	r3, [pc, #740]	; (1748 <usart_init+0x300>)
    1462:	4798      	blx	r3
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1464:	6822      	ldr	r2, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    1466:	2305      	movs	r3, #5
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1468:	07d2      	lsls	r2, r2, #31
    146a:	d500      	bpl.n	146e <usart_init+0x26>
    146c:	e164      	b.n	1738 <usart_init+0x2f0>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    146e:	6822      	ldr	r2, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    1470:	3317      	adds	r3, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1472:	0792      	lsls	r2, r2, #30
    1474:	d500      	bpl.n	1478 <usart_init+0x30>
    1476:	e15f      	b.n	1738 <usart_init+0x2f0>
    1478:	49b4      	ldr	r1, [pc, #720]	; (174c <usart_init+0x304>)
    147a:	6a0a      	ldr	r2, [r1, #32]
    147c:	1c87      	adds	r7, r0, #2
    147e:	3b1b      	subs	r3, #27
    1480:	40bb      	lsls	r3, r7
    1482:	4313      	orrs	r3, r2
    1484:	620b      	str	r3, [r1, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    1486:	a90f      	add	r1, sp, #60	; 0x3c
    1488:	272d      	movs	r7, #45	; 0x2d
    148a:	5df3      	ldrb	r3, [r6, r7]
    148c:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    148e:	3014      	adds	r0, #20
    1490:	b2c3      	uxtb	r3, r0
    1492:	9302      	str	r3, [sp, #8]
    1494:	0018      	movs	r0, r3
    1496:	4bae      	ldr	r3, [pc, #696]	; (1750 <usart_init+0x308>)
    1498:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    149a:	9802      	ldr	r0, [sp, #8]
    149c:	4bad      	ldr	r3, [pc, #692]	; (1754 <usart_init+0x30c>)
    149e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    14a0:	5df0      	ldrb	r0, [r6, r7]
    14a2:	2100      	movs	r1, #0
    14a4:	4bac      	ldr	r3, [pc, #688]	; (1758 <usart_init+0x310>)
    14a6:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    14a8:	7af3      	ldrb	r3, [r6, #11]
    14aa:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    14ac:	2324      	movs	r3, #36	; 0x24
    14ae:	5cf3      	ldrb	r3, [r6, r3]
    14b0:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    14b2:	2325      	movs	r3, #37	; 0x25
    14b4:	5cf3      	ldrb	r3, [r6, r3]
    14b6:	71eb      	strb	r3, [r5, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    14b8:	7ef3      	ldrb	r3, [r6, #27]
    14ba:	722b      	strb	r3, [r5, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    14bc:	7f33      	ldrb	r3, [r6, #28]
    14be:	726b      	strb	r3, [r5, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    14c0:	682b      	ldr	r3, [r5, #0]
    14c2:	4699      	mov	r9, r3

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    14c4:	0018      	movs	r0, r3
    14c6:	4ba0      	ldr	r3, [pc, #640]	; (1748 <usart_init+0x300>)
    14c8:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    14ca:	3014      	adds	r0, #20
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    14cc:	2200      	movs	r2, #0
    14ce:	230e      	movs	r3, #14
    14d0:	a906      	add	r1, sp, #24
    14d2:	468c      	mov	ip, r1
    14d4:	4463      	add	r3, ip
    14d6:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    14d8:	8a32      	ldrh	r2, [r6, #16]
    14da:	9202      	str	r2, [sp, #8]
    14dc:	2380      	movs	r3, #128	; 0x80
    14de:	01db      	lsls	r3, r3, #7
    14e0:	429a      	cmp	r2, r3
    14e2:	d01a      	beq.n	151a <usart_init+0xd2>
    14e4:	d804      	bhi.n	14f0 <usart_init+0xa8>
    14e6:	2380      	movs	r3, #128	; 0x80
    14e8:	019b      	lsls	r3, r3, #6
    14ea:	429a      	cmp	r2, r3
    14ec:	d00b      	beq.n	1506 <usart_init+0xbe>
    14ee:	e104      	b.n	16fa <usart_init+0x2b2>
    14f0:	23c0      	movs	r3, #192	; 0xc0
    14f2:	01db      	lsls	r3, r3, #7
    14f4:	9a02      	ldr	r2, [sp, #8]
    14f6:	429a      	cmp	r2, r3
    14f8:	d00a      	beq.n	1510 <usart_init+0xc8>
    14fa:	2380      	movs	r3, #128	; 0x80
    14fc:	021b      	lsls	r3, r3, #8
    14fe:	429a      	cmp	r2, r3
    1500:	d100      	bne.n	1504 <usart_init+0xbc>
    1502:	e0ff      	b.n	1704 <usart_init+0x2bc>
    1504:	e0f9      	b.n	16fa <usart_init+0x2b2>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1506:	2310      	movs	r3, #16
    1508:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    150a:	3b0f      	subs	r3, #15
    150c:	9307      	str	r3, [sp, #28]
    150e:	e0fd      	b.n	170c <usart_init+0x2c4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1510:	2308      	movs	r3, #8
    1512:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1514:	3b07      	subs	r3, #7
    1516:	9307      	str	r3, [sp, #28]
    1518:	e0f8      	b.n	170c <usart_init+0x2c4>
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    151a:	6833      	ldr	r3, [r6, #0]
    151c:	9304      	str	r3, [sp, #16]
		(uint32_t)config->mux_setting |
    151e:	68f3      	ldr	r3, [r6, #12]
    1520:	469b      	mov	fp, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    1522:	6973      	ldr	r3, [r6, #20]
    1524:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1526:	7e33      	ldrb	r3, [r6, #24]
    1528:	4698      	mov	r8, r3
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    152a:	2326      	movs	r3, #38	; 0x26
    152c:	5cf3      	ldrb	r3, [r6, r3]
    152e:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
    1530:	6873      	ldr	r3, [r6, #4]
    1532:	469a      	mov	sl, r3
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    1534:	2b00      	cmp	r3, #0
    1536:	d015      	beq.n	1564 <usart_init+0x11c>
    1538:	2380      	movs	r3, #128	; 0x80
    153a:	055b      	lsls	r3, r3, #21
    153c:	459a      	cmp	sl, r3
    153e:	d136      	bne.n	15ae <usart_init+0x166>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    1540:	2327      	movs	r3, #39	; 0x27
    1542:	5cf3      	ldrb	r3, [r6, r3]
    1544:	2b00      	cmp	r3, #0
    1546:	d136      	bne.n	15b6 <usart_init+0x16e>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    1548:	6a33      	ldr	r3, [r6, #32]
    154a:	001f      	movs	r7, r3
    154c:	b2c0      	uxtb	r0, r0
    154e:	4b83      	ldr	r3, [pc, #524]	; (175c <usart_init+0x314>)
    1550:	4798      	blx	r3
    1552:	0001      	movs	r1, r0
    1554:	220e      	movs	r2, #14
    1556:	ab06      	add	r3, sp, #24
    1558:	469c      	mov	ip, r3
    155a:	4462      	add	r2, ip
    155c:	0038      	movs	r0, r7
    155e:	4b80      	ldr	r3, [pc, #512]	; (1760 <usart_init+0x318>)
    1560:	4798      	blx	r3
    1562:	e025      	b.n	15b0 <usart_init+0x168>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1564:	2308      	movs	r3, #8
    1566:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1568:	2300      	movs	r3, #0
    156a:	9307      	str	r3, [sp, #28]
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    156c:	2327      	movs	r3, #39	; 0x27
    156e:	5cf3      	ldrb	r3, [r6, r3]
    1570:	2b00      	cmp	r3, #0
    1572:	d00b      	beq.n	158c <usart_init+0x144>
				status_code =
    1574:	9b06      	ldr	r3, [sp, #24]
    1576:	9300      	str	r3, [sp, #0]
    1578:	9b07      	ldr	r3, [sp, #28]
    157a:	220e      	movs	r2, #14
    157c:	a906      	add	r1, sp, #24
    157e:	468c      	mov	ip, r1
    1580:	4462      	add	r2, ip
    1582:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    1584:	6a30      	ldr	r0, [r6, #32]
    1586:	4f77      	ldr	r7, [pc, #476]	; (1764 <usart_init+0x31c>)
    1588:	47b8      	blx	r7
    158a:	e011      	b.n	15b0 <usart_init+0x168>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    158c:	6a33      	ldr	r3, [r6, #32]
    158e:	001f      	movs	r7, r3
    1590:	b2c0      	uxtb	r0, r0
    1592:	4b72      	ldr	r3, [pc, #456]	; (175c <usart_init+0x314>)
    1594:	4798      	blx	r3
    1596:	0001      	movs	r1, r0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    1598:	9b06      	ldr	r3, [sp, #24]
    159a:	9300      	str	r3, [sp, #0]
    159c:	9b07      	ldr	r3, [sp, #28]
    159e:	220e      	movs	r2, #14
    15a0:	a806      	add	r0, sp, #24
    15a2:	4684      	mov	ip, r0
    15a4:	4462      	add	r2, ip
    15a6:	0038      	movs	r0, r7
    15a8:	4f6e      	ldr	r7, [pc, #440]	; (1764 <usart_init+0x31c>)
    15aa:	47b8      	blx	r7
    15ac:	e000      	b.n	15b0 <usart_init+0x168>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
    15ae:	2000      	movs	r0, #0
    15b0:	1e03      	subs	r3, r0, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    15b2:	d000      	beq.n	15b6 <usart_init+0x16e>
    15b4:	e0c0      	b.n	1738 <usart_init+0x2f0>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    15b6:	7e73      	ldrb	r3, [r6, #25]
    15b8:	2b00      	cmp	r3, #0
    15ba:	d002      	beq.n	15c2 <usart_init+0x17a>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    15bc:	7eb3      	ldrb	r3, [r6, #26]
    15be:	464a      	mov	r2, r9
    15c0:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    15c2:	682a      	ldr	r2, [r5, #0]
    15c4:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    15c6:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    15c8:	2b00      	cmp	r3, #0
    15ca:	d1fc      	bne.n	15c6 <usart_init+0x17e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    15cc:	330e      	adds	r3, #14
    15ce:	aa06      	add	r2, sp, #24
    15d0:	4694      	mov	ip, r2
    15d2:	4463      	add	r3, ip
    15d4:	881b      	ldrh	r3, [r3, #0]
    15d6:	464a      	mov	r2, r9
    15d8:	8193      	strh	r3, [r2, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    15da:	9b04      	ldr	r3, [sp, #16]
    15dc:	465a      	mov	r2, fp
    15de:	4313      	orrs	r3, r2
    15e0:	9a03      	ldr	r2, [sp, #12]
    15e2:	4313      	orrs	r3, r2
    15e4:	4652      	mov	r2, sl
    15e6:	4313      	orrs	r3, r2
    15e8:	433b      	orrs	r3, r7
    15ea:	4642      	mov	r2, r8
    15ec:	0212      	lsls	r2, r2, #8
    15ee:	4313      	orrs	r3, r2
    15f0:	9a05      	ldr	r2, [sp, #20]
    15f2:	0757      	lsls	r7, r2, #29
    15f4:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
    15f6:	2327      	movs	r3, #39	; 0x27
    15f8:	5cf3      	ldrb	r3, [r6, r3]
    15fa:	2b00      	cmp	r3, #0
    15fc:	d101      	bne.n	1602 <usart_init+0x1ba>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    15fe:	3304      	adds	r3, #4
    1600:	431f      	orrs	r7, r3
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
    1602:	7e71      	ldrb	r1, [r6, #25]
    1604:	0289      	lsls	r1, r1, #10
    1606:	7f33      	ldrb	r3, [r6, #28]
    1608:	025b      	lsls	r3, r3, #9
    160a:	4319      	orrs	r1, r3
    160c:	7f73      	ldrb	r3, [r6, #29]
    160e:	021b      	lsls	r3, r3, #8
    1610:	4319      	orrs	r1, r3
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1612:	2324      	movs	r3, #36	; 0x24
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
    1614:	5cf3      	ldrb	r3, [r6, r3]
    1616:	045b      	lsls	r3, r3, #17
    1618:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    161a:	2325      	movs	r3, #37	; 0x25
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
    161c:	5cf2      	ldrb	r2, [r6, r3]
    161e:	0412      	lsls	r2, r2, #16
    1620:	4311      	orrs	r1, r2
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->character_size;
    1622:	7af3      	ldrb	r3, [r6, #11]
    1624:	4319      	orrs	r1, r3
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    1626:	8933      	ldrh	r3, [r6, #8]
    1628:	2bff      	cmp	r3, #255	; 0xff
    162a:	d004      	beq.n	1636 <usart_init+0x1ee>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    162c:	2280      	movs	r2, #128	; 0x80
    162e:	0452      	lsls	r2, r2, #17
    1630:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    1632:	4319      	orrs	r1, r3
    1634:	e005      	b.n	1642 <usart_init+0x1fa>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    1636:	7ef3      	ldrb	r3, [r6, #27]
    1638:	2b00      	cmp	r3, #0
    163a:	d002      	beq.n	1642 <usart_init+0x1fa>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    163c:	2380      	movs	r3, #128	; 0x80
    163e:	04db      	lsls	r3, r3, #19
    1640:	431f      	orrs	r7, r3
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    1642:	232c      	movs	r3, #44	; 0x2c
    1644:	5cf3      	ldrb	r3, [r6, r3]
    1646:	2b00      	cmp	r3, #0
    1648:	d103      	bne.n	1652 <usart_init+0x20a>
    164a:	4b47      	ldr	r3, [pc, #284]	; (1768 <usart_init+0x320>)
    164c:	789b      	ldrb	r3, [r3, #2]
    164e:	079b      	lsls	r3, r3, #30
    1650:	d501      	bpl.n	1656 <usart_init+0x20e>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1652:	2380      	movs	r3, #128	; 0x80
    1654:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1656:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1658:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    165a:	2b00      	cmp	r3, #0
    165c:	d1fc      	bne.n	1658 <usart_init+0x210>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    165e:	464b      	mov	r3, r9
    1660:	6059      	str	r1, [r3, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1662:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1664:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1666:	2b00      	cmp	r3, #0
    1668:	d1fc      	bne.n	1664 <usart_init+0x21c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    166a:	464b      	mov	r3, r9
    166c:	601f      	str	r7, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    166e:	ab0e      	add	r3, sp, #56	; 0x38
    1670:	2280      	movs	r2, #128	; 0x80
    1672:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1674:	2200      	movs	r2, #0
    1676:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    1678:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    167a:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
    167c:	6b33      	ldr	r3, [r6, #48]	; 0x30
    167e:	930a      	str	r3, [sp, #40]	; 0x28
    1680:	6b73      	ldr	r3, [r6, #52]	; 0x34
    1682:	930b      	str	r3, [sp, #44]	; 0x2c
    1684:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    1686:	930c      	str	r3, [sp, #48]	; 0x30
    1688:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    168a:	9302      	str	r3, [sp, #8]
    168c:	930d      	str	r3, [sp, #52]	; 0x34
    168e:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1690:	ae0e      	add	r6, sp, #56	; 0x38
    1692:	b2f9      	uxtb	r1, r7
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1694:	00bb      	lsls	r3, r7, #2
    1696:	aa0a      	add	r2, sp, #40	; 0x28
    1698:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    169a:	2800      	cmp	r0, #0
    169c:	d102      	bne.n	16a4 <usart_init+0x25c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    169e:	0020      	movs	r0, r4
    16a0:	4b32      	ldr	r3, [pc, #200]	; (176c <usart_init+0x324>)
    16a2:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
    16a4:	1c43      	adds	r3, r0, #1
    16a6:	d005      	beq.n	16b4 <usart_init+0x26c>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    16a8:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    16aa:	0c00      	lsrs	r0, r0, #16
    16ac:	b2c0      	uxtb	r0, r0
    16ae:	0031      	movs	r1, r6
    16b0:	4b2f      	ldr	r3, [pc, #188]	; (1770 <usart_init+0x328>)
    16b2:	4798      	blx	r3
    16b4:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    16b6:	2f04      	cmp	r7, #4
    16b8:	d1eb      	bne.n	1692 <usart_init+0x24a>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
    16ba:	2300      	movs	r3, #0
    16bc:	60eb      	str	r3, [r5, #12]
    16be:	612b      	str	r3, [r5, #16]
    16c0:	616b      	str	r3, [r5, #20]
    16c2:	61ab      	str	r3, [r5, #24]
    16c4:	61eb      	str	r3, [r5, #28]
    16c6:	622b      	str	r3, [r5, #32]
	}

	module->tx_buffer_ptr              = NULL;
    16c8:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    16ca:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    16cc:	2200      	movs	r2, #0
    16ce:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    16d0:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    16d2:	3330      	adds	r3, #48	; 0x30
    16d4:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    16d6:	3301      	adds	r3, #1
    16d8:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    16da:	3301      	adds	r3, #1
    16dc:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    16de:	3301      	adds	r3, #1
    16e0:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    16e2:	6828      	ldr	r0, [r5, #0]
    16e4:	4b18      	ldr	r3, [pc, #96]	; (1748 <usart_init+0x300>)
    16e6:	4798      	blx	r3
    16e8:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    16ea:	4922      	ldr	r1, [pc, #136]	; (1774 <usart_init+0x32c>)
    16ec:	4b22      	ldr	r3, [pc, #136]	; (1778 <usart_init+0x330>)
    16ee:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    16f0:	00a4      	lsls	r4, r4, #2
    16f2:	4b22      	ldr	r3, [pc, #136]	; (177c <usart_init+0x334>)
    16f4:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
    16f6:	2300      	movs	r3, #0
    16f8:	e01e      	b.n	1738 <usart_init+0x2f0>
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    16fa:	2310      	movs	r3, #16
    16fc:	9306      	str	r3, [sp, #24]
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    16fe:	2300      	movs	r3, #0
    1700:	9307      	str	r3, [sp, #28]
    1702:	e003      	b.n	170c <usart_init+0x2c4>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    1704:	2303      	movs	r3, #3
    1706:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1708:	2300      	movs	r3, #0
    170a:	9307      	str	r3, [sp, #28]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    170c:	6833      	ldr	r3, [r6, #0]
    170e:	9304      	str	r3, [sp, #16]
		(uint32_t)config->mux_setting |
    1710:	68f3      	ldr	r3, [r6, #12]
    1712:	469b      	mov	fp, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    1714:	6973      	ldr	r3, [r6, #20]
    1716:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1718:	7e33      	ldrb	r3, [r6, #24]
    171a:	4698      	mov	r8, r3
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    171c:	2326      	movs	r3, #38	; 0x26
    171e:	5cf3      	ldrb	r3, [r6, r3]
    1720:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
    1722:	6873      	ldr	r3, [r6, #4]
    1724:	469a      	mov	sl, r3
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    1726:	2b00      	cmp	r3, #0
    1728:	d100      	bne.n	172c <usart_init+0x2e4>
    172a:	e71f      	b.n	156c <usart_init+0x124>
    172c:	2380      	movs	r3, #128	; 0x80
    172e:	055b      	lsls	r3, r3, #21
    1730:	459a      	cmp	sl, r3
    1732:	d100      	bne.n	1736 <usart_init+0x2ee>
    1734:	e704      	b.n	1540 <usart_init+0xf8>
    1736:	e73e      	b.n	15b6 <usart_init+0x16e>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    1738:	0018      	movs	r0, r3
    173a:	b011      	add	sp, #68	; 0x44
    173c:	bc3c      	pop	{r2, r3, r4, r5}
    173e:	4690      	mov	r8, r2
    1740:	4699      	mov	r9, r3
    1742:	46a2      	mov	sl, r4
    1744:	46ab      	mov	fp, r5
    1746:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1748:	00000fa5 	.word	0x00000fa5
    174c:	40000400 	.word	0x40000400
    1750:	000021a5 	.word	0x000021a5
    1754:	00002119 	.word	0x00002119
    1758:	00000dd1 	.word	0x00000dd1
    175c:	000021c1 	.word	0x000021c1
    1760:	00000be1 	.word	0x00000be1
    1764:	00000c09 	.word	0x00000c09
    1768:	41002000 	.word	0x41002000
    176c:	00000e1d 	.word	0x00000e1d
    1770:	0000229d 	.word	0x0000229d
    1774:	000018b1 	.word	0x000018b1
    1778:	00000fe5 	.word	0x00000fe5
    177c:	2000082c 	.word	0x2000082c

00001780 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1780:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    1782:	231c      	movs	r3, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1784:	2a00      	cmp	r2, #0
    1786:	d00e      	beq.n	17a6 <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    1788:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    178a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    178c:	3b17      	subs	r3, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    178e:	2a00      	cmp	r2, #0
    1790:	d109      	bne.n	17a6 <usart_write_wait+0x26>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1792:	6803      	ldr	r3, [r0, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1794:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1796:	2a00      	cmp	r2, #0
    1798:	d1fc      	bne.n	1794 <usart_write_wait+0x14>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    179a:	8519      	strh	r1, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    179c:	2102      	movs	r1, #2
    179e:	7e1a      	ldrb	r2, [r3, #24]
    17a0:	420a      	tst	r2, r1
    17a2:	d0fc      	beq.n	179e <usart_write_wait+0x1e>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    17a4:	2300      	movs	r3, #0
}
    17a6:	0018      	movs	r0, r3
    17a8:	4770      	bx	lr
    17aa:	46c0      	nop			; (mov r8, r8)

000017ac <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    17ac:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    17ae:	231c      	movs	r3, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    17b0:	2a00      	cmp	r2, #0
    17b2:	d030      	beq.n	1816 <usart_read_wait+0x6a>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    17b4:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    17b6:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    17b8:	3b17      	subs	r3, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    17ba:	2a00      	cmp	r2, #0
    17bc:	d12b      	bne.n	1816 <usart_read_wait+0x6a>

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    17be:	6802      	ldr	r2, [r0, #0]
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    17c0:	7e10      	ldrb	r0, [r2, #24]
    17c2:	0740      	lsls	r0, r0, #29
    17c4:	d527      	bpl.n	1816 <usart_read_wait+0x6a>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    17c6:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    17c8:	2b00      	cmp	r3, #0
    17ca:	d1fc      	bne.n	17c6 <usart_read_wait+0x1a>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    17cc:	8b53      	ldrh	r3, [r2, #26]
    17ce:	b2db      	uxtb	r3, r3

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    17d0:	0698      	lsls	r0, r3, #26
    17d2:	d01d      	beq.n	1810 <usart_read_wait+0x64>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    17d4:	0798      	lsls	r0, r3, #30
    17d6:	d503      	bpl.n	17e0 <usart_read_wait+0x34>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    17d8:	2302      	movs	r3, #2
    17da:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_BAD_FORMAT;
    17dc:	3318      	adds	r3, #24
    17de:	e01a      	b.n	1816 <usart_read_wait+0x6a>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    17e0:	0758      	lsls	r0, r3, #29
    17e2:	d503      	bpl.n	17ec <usart_read_wait+0x40>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    17e4:	2304      	movs	r3, #4
    17e6:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_OVERFLOW;
    17e8:	331a      	adds	r3, #26
    17ea:	e014      	b.n	1816 <usart_read_wait+0x6a>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    17ec:	07d8      	lsls	r0, r3, #31
    17ee:	d503      	bpl.n	17f8 <usart_read_wait+0x4c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    17f0:	2301      	movs	r3, #1
    17f2:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_BAD_DATA;
    17f4:	3312      	adds	r3, #18
    17f6:	e00e      	b.n	1816 <usart_read_wait+0x6a>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    17f8:	06d8      	lsls	r0, r3, #27
    17fa:	d503      	bpl.n	1804 <usart_read_wait+0x58>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    17fc:	2310      	movs	r3, #16
    17fe:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_PROTOCOL;
    1800:	3332      	adds	r3, #50	; 0x32
    1802:	e008      	b.n	1816 <usart_read_wait+0x6a>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    1804:	069b      	lsls	r3, r3, #26
    1806:	d503      	bpl.n	1810 <usart_read_wait+0x64>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1808:	2320      	movs	r3, #32
    180a:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_PACKET_COLLISION;
    180c:	3321      	adds	r3, #33	; 0x21
    180e:	e002      	b.n	1816 <usart_read_wait+0x6a>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    1810:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    1812:	800b      	strh	r3, [r1, #0]

	return STATUS_OK;
    1814:	2300      	movs	r3, #0
}
    1816:	0018      	movs	r0, r3
    1818:	4770      	bx	lr
    181a:	46c0      	nop			; (mov r8, r8)

0000181c <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    181c:	b5f0      	push	{r4, r5, r6, r7, lr}
    181e:	4657      	mov	r7, sl
    1820:	b480      	push	{r7}
    1822:	b084      	sub	sp, #16
    1824:	0004      	movs	r4, r0
    1826:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    1828:	2017      	movs	r0, #23
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
    182a:	2a00      	cmp	r2, #0
    182c:	d038      	beq.n	18a0 <usart_read_buffer_wait+0x84>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    182e:	79a3      	ldrb	r3, [r4, #6]
		return STATUS_ERR_DENIED;
    1830:	3005      	adds	r0, #5
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1832:	2b00      	cmp	r3, #0
    1834:	d034      	beq.n	18a0 <usart_read_buffer_wait+0x84>
		return STATUS_ERR_DENIED;
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1836:	6826      	ldr	r6, [r4, #0]
    1838:	4692      	mov	sl, r2
    183a:	2500      	movs	r5, #0
	/* Blocks while buffer is being received */
	while (length--) {
		/* Wait for the USART to have new data and abort operation if it
		 * doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    183c:	2704      	movs	r7, #4
    183e:	e02a      	b.n	1896 <usart_read_buffer_wait+0x7a>
    1840:	7e32      	ldrb	r2, [r6, #24]
    1842:	423a      	tst	r2, r7
    1844:	d104      	bne.n	1850 <usart_read_buffer_wait+0x34>
				break;
			} else if (i == USART_TIMEOUT) {
    1846:	2b01      	cmp	r3, #1
    1848:	d023      	beq.n	1892 <usart_read_buffer_wait+0x76>
    184a:	3b01      	subs	r3, #1

	/* Blocks while buffer is being received */
	while (length--) {
		/* Wait for the USART to have new data and abort operation if it
		 * doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    184c:	2b00      	cmp	r3, #0
    184e:	d1f7      	bne.n	1840 <usart_read_buffer_wait+0x24>
				return STATUS_ERR_TIMEOUT;
			}
		}

		enum status_code retval;
		uint16_t received_data = 0;
    1850:	2300      	movs	r3, #0
    1852:	aa02      	add	r2, sp, #8
    1854:	80d3      	strh	r3, [r2, #6]

		retval = usart_read_wait(module, &received_data);
    1856:	1d91      	adds	r1, r2, #6
    1858:	0020      	movs	r0, r4
    185a:	4b13      	ldr	r3, [pc, #76]	; (18a8 <usart_read_buffer_wait+0x8c>)
    185c:	4798      	blx	r3

		if (retval != STATUS_OK) {
    185e:	2800      	cmp	r0, #0
    1860:	d11e      	bne.n	18a0 <usart_read_buffer_wait+0x84>
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    1862:	1c6b      	adds	r3, r5, #1
    1864:	b29b      	uxth	r3, r3
    1866:	aa02      	add	r2, sp, #8
    1868:	88d2      	ldrh	r2, [r2, #6]
    186a:	9901      	ldr	r1, [sp, #4]
    186c:	554a      	strb	r2, [r1, r5]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    186e:	7961      	ldrb	r1, [r4, #5]
    1870:	2901      	cmp	r1, #1
    1872:	d105      	bne.n	1880 <usart_read_buffer_wait+0x64>
			rx_data[rx_pos++] = (received_data >> 8);
    1874:	1ca9      	adds	r1, r5, #2
    1876:	b28d      	uxth	r5, r1
    1878:	0a12      	lsrs	r2, r2, #8
    187a:	9901      	ldr	r1, [sp, #4]
    187c:	54ca      	strb	r2, [r1, r3]
    187e:	e000      	b.n	1882 <usart_read_buffer_wait+0x66>
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    1880:	001d      	movs	r5, r3
    1882:	4652      	mov	r2, sl
    1884:	3a01      	subs	r2, #1
    1886:	b293      	uxth	r3, r2
    1888:	469a      	mov	sl, r3
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint16_t rx_pos = 0;

	/* Blocks while buffer is being received */
	while (length--) {
    188a:	2b00      	cmp	r3, #0
    188c:	d103      	bne.n	1896 <usart_read_buffer_wait+0x7a>
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
    188e:	2000      	movs	r0, #0
    1890:	e006      	b.n	18a0 <usart_read_buffer_wait+0x84>
		 * doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
				break;
			} else if (i == USART_TIMEOUT) {
				return STATUS_ERR_TIMEOUT;
    1892:	2012      	movs	r0, #18
    1894:	e004      	b.n	18a0 <usart_read_buffer_wait+0x84>
	/* Blocks while buffer is being received */
	while (length--) {
		/* Wait for the USART to have new data and abort operation if it
		 * doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    1896:	7e33      	ldrb	r3, [r6, #24]
    1898:	423b      	tst	r3, r7
    189a:	d1d9      	bne.n	1850 <usart_read_buffer_wait+0x34>
    189c:	4b03      	ldr	r3, [pc, #12]	; (18ac <usart_read_buffer_wait+0x90>)
    189e:	e7cf      	b.n	1840 <usart_read_buffer_wait+0x24>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    18a0:	b004      	add	sp, #16
    18a2:	bc04      	pop	{r2}
    18a4:	4692      	mov	sl, r2
    18a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    18a8:	000017ad 	.word	0x000017ad
    18ac:	0000ffff 	.word	0x0000ffff

000018b0 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    18b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    18b2:	0080      	lsls	r0, r0, #2
    18b4:	4b60      	ldr	r3, [pc, #384]	; (1a38 <_usart_interrupt_handler+0x188>)
    18b6:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    18b8:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    18ba:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    18bc:	2b00      	cmp	r3, #0
    18be:	d1fc      	bne.n	18ba <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    18c0:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    18c2:	7da6      	ldrb	r6, [r4, #22]
    18c4:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    18c6:	2330      	movs	r3, #48	; 0x30
    18c8:	5ceb      	ldrb	r3, [r5, r3]
    18ca:	2231      	movs	r2, #49	; 0x31
    18cc:	5caf      	ldrb	r7, [r5, r2]
    18ce:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    18d0:	07f3      	lsls	r3, r6, #31
    18d2:	d522      	bpl.n	191a <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    18d4:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    18d6:	b29b      	uxth	r3, r3
    18d8:	2b00      	cmp	r3, #0
    18da:	d01c      	beq.n	1916 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    18dc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    18de:	7813      	ldrb	r3, [r2, #0]
    18e0:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    18e2:	1c51      	adds	r1, r2, #1
    18e4:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    18e6:	7969      	ldrb	r1, [r5, #5]
    18e8:	2901      	cmp	r1, #1
    18ea:	d001      	beq.n	18f0 <_usart_interrupt_handler+0x40>
	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
		if (module->remaining_tx_buffer_length) {
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    18ec:	b29b      	uxth	r3, r3
    18ee:	e004      	b.n	18fa <_usart_interrupt_handler+0x4a>
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    18f0:	7851      	ldrb	r1, [r2, #1]
    18f2:	0209      	lsls	r1, r1, #8
    18f4:	430b      	orrs	r3, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    18f6:	3202      	adds	r2, #2
    18f8:	62aa      	str	r2, [r5, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    18fa:	05db      	lsls	r3, r3, #23
    18fc:	0ddb      	lsrs	r3, r3, #23
    18fe:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    1900:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1902:	3b01      	subs	r3, #1
    1904:	b29b      	uxth	r3, r3
    1906:	85eb      	strh	r3, [r5, #46]	; 0x2e
    1908:	2b00      	cmp	r3, #0
    190a:	d106      	bne.n	191a <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    190c:	3301      	adds	r3, #1
    190e:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    1910:	3301      	adds	r3, #1
    1912:	75a3      	strb	r3, [r4, #22]
    1914:	e001      	b.n	191a <_usart_interrupt_handler+0x6a>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1916:	2301      	movs	r3, #1
    1918:	7523      	strb	r3, [r4, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    191a:	07b3      	lsls	r3, r6, #30
    191c:	d509      	bpl.n	1932 <_usart_interrupt_handler+0x82>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    191e:	2302      	movs	r3, #2
    1920:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    1922:	2200      	movs	r2, #0
    1924:	3331      	adds	r3, #49	; 0x31
    1926:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    1928:	07fb      	lsls	r3, r7, #31
    192a:	d502      	bpl.n	1932 <_usart_interrupt_handler+0x82>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    192c:	0028      	movs	r0, r5
    192e:	68eb      	ldr	r3, [r5, #12]
    1930:	4798      	blx	r3

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    1932:	0773      	lsls	r3, r6, #29
    1934:	d560      	bpl.n	19f8 <_usart_interrupt_handler+0x148>

		if (module->remaining_rx_buffer_length) {
    1936:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1938:	b29b      	uxth	r3, r3
    193a:	2b00      	cmp	r3, #0
    193c:	d05a      	beq.n	19f4 <_usart_interrupt_handler+0x144>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    193e:	8b63      	ldrh	r3, [r4, #26]
    1940:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    1942:	071a      	lsls	r2, r3, #28
    1944:	d402      	bmi.n	194c <_usart_interrupt_handler+0x9c>

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {

		if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1946:	223f      	movs	r2, #63	; 0x3f
    1948:	4013      	ands	r3, r2
    194a:	e001      	b.n	1950 <_usart_interrupt_handler+0xa0>
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
				error_code &= ~SERCOM_USART_STATUS_CTS;
    194c:	2237      	movs	r2, #55	; 0x37
    194e:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    1950:	2b00      	cmp	r3, #0
    1952:	d02d      	beq.n	19b0 <_usart_interrupt_handler+0x100>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    1954:	079a      	lsls	r2, r3, #30
    1956:	d505      	bpl.n	1964 <_usart_interrupt_handler+0xb4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    1958:	221a      	movs	r2, #26
    195a:	2332      	movs	r3, #50	; 0x32
    195c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    195e:	3b30      	subs	r3, #48	; 0x30
    1960:	8363      	strh	r3, [r4, #26]
    1962:	e01f      	b.n	19a4 <_usart_interrupt_handler+0xf4>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1964:	075a      	lsls	r2, r3, #29
    1966:	d505      	bpl.n	1974 <_usart_interrupt_handler+0xc4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    1968:	221e      	movs	r2, #30
    196a:	2332      	movs	r3, #50	; 0x32
    196c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    196e:	3b2e      	subs	r3, #46	; 0x2e
    1970:	8363      	strh	r3, [r4, #26]
    1972:	e017      	b.n	19a4 <_usart_interrupt_handler+0xf4>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1974:	07da      	lsls	r2, r3, #31
    1976:	d505      	bpl.n	1984 <_usart_interrupt_handler+0xd4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    1978:	2213      	movs	r2, #19
    197a:	2332      	movs	r3, #50	; 0x32
    197c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    197e:	3b31      	subs	r3, #49	; 0x31
    1980:	8363      	strh	r3, [r4, #26]
    1982:	e00f      	b.n	19a4 <_usart_interrupt_handler+0xf4>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    1984:	06da      	lsls	r2, r3, #27
    1986:	d505      	bpl.n	1994 <_usart_interrupt_handler+0xe4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    1988:	2242      	movs	r2, #66	; 0x42
    198a:	2332      	movs	r3, #50	; 0x32
    198c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    198e:	3b22      	subs	r3, #34	; 0x22
    1990:	8363      	strh	r3, [r4, #26]
    1992:	e007      	b.n	19a4 <_usart_interrupt_handler+0xf4>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    1994:	2220      	movs	r2, #32
    1996:	421a      	tst	r2, r3
    1998:	d004      	beq.n	19a4 <_usart_interrupt_handler+0xf4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    199a:	3221      	adds	r2, #33	; 0x21
    199c:	2332      	movs	r3, #50	; 0x32
    199e:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    19a0:	3b12      	subs	r3, #18
    19a2:	8363      	strh	r3, [r4, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    19a4:	077b      	lsls	r3, r7, #29
    19a6:	d527      	bpl.n	19f8 <_usart_interrupt_handler+0x148>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    19a8:	0028      	movs	r0, r5
    19aa:	696b      	ldr	r3, [r5, #20]
    19ac:	4798      	blx	r3
    19ae:	e023      	b.n	19f8 <_usart_interrupt_handler+0x148>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    19b0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    19b2:	05db      	lsls	r3, r3, #23
    19b4:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    19b6:	b2da      	uxtb	r2, r3
    19b8:	6a69      	ldr	r1, [r5, #36]	; 0x24
    19ba:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    19bc:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    19be:	1c51      	adds	r1, r2, #1
    19c0:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    19c2:	7969      	ldrb	r1, [r5, #5]
    19c4:	2901      	cmp	r1, #1
    19c6:	d104      	bne.n	19d2 <_usart_interrupt_handler+0x122>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    19c8:	0a1b      	lsrs	r3, r3, #8
    19ca:	7053      	strb	r3, [r2, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    19cc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    19ce:	3301      	adds	r3, #1
    19d0:	626b      	str	r3, [r5, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    19d2:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    19d4:	3b01      	subs	r3, #1
    19d6:	b29b      	uxth	r3, r3
    19d8:	85ab      	strh	r3, [r5, #44]	; 0x2c
    19da:	2b00      	cmp	r3, #0
    19dc:	d10c      	bne.n	19f8 <_usart_interrupt_handler+0x148>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    19de:	3304      	adds	r3, #4
    19e0:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    19e2:	2200      	movs	r2, #0
    19e4:	332e      	adds	r3, #46	; 0x2e
    19e6:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    19e8:	07bb      	lsls	r3, r7, #30
    19ea:	d505      	bpl.n	19f8 <_usart_interrupt_handler+0x148>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    19ec:	0028      	movs	r0, r5
    19ee:	692b      	ldr	r3, [r5, #16]
    19f0:	4798      	blx	r3
    19f2:	e001      	b.n	19f8 <_usart_interrupt_handler+0x148>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    19f4:	2304      	movs	r3, #4
    19f6:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    19f8:	06f3      	lsls	r3, r6, #27
    19fa:	d507      	bpl.n	1a0c <_usart_interrupt_handler+0x15c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    19fc:	2310      	movs	r3, #16
    19fe:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    1a00:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    1a02:	06fb      	lsls	r3, r7, #27
    1a04:	d502      	bpl.n	1a0c <_usart_interrupt_handler+0x15c>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    1a06:	0028      	movs	r0, r5
    1a08:	69eb      	ldr	r3, [r5, #28]
    1a0a:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    1a0c:	06b3      	lsls	r3, r6, #26
    1a0e:	d507      	bpl.n	1a20 <_usart_interrupt_handler+0x170>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    1a10:	2320      	movs	r3, #32
    1a12:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    1a14:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    1a16:	073b      	lsls	r3, r7, #28
    1a18:	d502      	bpl.n	1a20 <_usart_interrupt_handler+0x170>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    1a1a:	0028      	movs	r0, r5
    1a1c:	69ab      	ldr	r3, [r5, #24]
    1a1e:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    1a20:	0733      	lsls	r3, r6, #28
    1a22:	d507      	bpl.n	1a34 <_usart_interrupt_handler+0x184>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1a24:	2308      	movs	r3, #8
    1a26:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1a28:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    1a2a:	06bb      	lsls	r3, r7, #26
    1a2c:	d502      	bpl.n	1a34 <_usart_interrupt_handler+0x184>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    1a2e:	6a2b      	ldr	r3, [r5, #32]
    1a30:	0028      	movs	r0, r5
    1a32:	4798      	blx	r3
		}
	}
#endif
}
    1a34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1a36:	46c0      	nop			; (mov r8, r8)
    1a38:	2000082c 	.word	0x2000082c

00001a3c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1a3c:	b510      	push	{r4, lr}
	switch (clock_source) {
    1a3e:	2808      	cmp	r0, #8
    1a40:	d803      	bhi.n	1a4a <system_clock_source_get_hz+0xe>
    1a42:	0080      	lsls	r0, r0, #2
    1a44:	4b1b      	ldr	r3, [pc, #108]	; (1ab4 <system_clock_source_get_hz+0x78>)
    1a46:	581b      	ldr	r3, [r3, r0]
    1a48:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    1a4a:	2000      	movs	r0, #0
    1a4c:	e030      	b.n	1ab0 <system_clock_source_get_hz+0x74>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    1a4e:	4b1a      	ldr	r3, [pc, #104]	; (1ab8 <system_clock_source_get_hz+0x7c>)
    1a50:	6918      	ldr	r0, [r3, #16]
    1a52:	e02d      	b.n	1ab0 <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1a54:	4b19      	ldr	r3, [pc, #100]	; (1abc <system_clock_source_get_hz+0x80>)
    1a56:	6a1b      	ldr	r3, [r3, #32]
    1a58:	059b      	lsls	r3, r3, #22
    1a5a:	0f9b      	lsrs	r3, r3, #30
    1a5c:	4818      	ldr	r0, [pc, #96]	; (1ac0 <system_clock_source_get_hz+0x84>)
    1a5e:	40d8      	lsrs	r0, r3
    1a60:	e026      	b.n	1ab0 <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    1a62:	4b15      	ldr	r3, [pc, #84]	; (1ab8 <system_clock_source_get_hz+0x7c>)
    1a64:	6958      	ldr	r0, [r3, #20]
    1a66:	e023      	b.n	1ab0 <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1a68:	4b13      	ldr	r3, [pc, #76]	; (1ab8 <system_clock_source_get_hz+0x7c>)
    1a6a:	681b      	ldr	r3, [r3, #0]
    1a6c:	2002      	movs	r0, #2
    1a6e:	4018      	ands	r0, r3
    1a70:	d01e      	beq.n	1ab0 <system_clock_source_get_hz+0x74>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1a72:	4912      	ldr	r1, [pc, #72]	; (1abc <system_clock_source_get_hz+0x80>)
    1a74:	2210      	movs	r2, #16
    1a76:	68cb      	ldr	r3, [r1, #12]
    1a78:	421a      	tst	r2, r3
    1a7a:	d0fc      	beq.n	1a76 <system_clock_source_get_hz+0x3a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    1a7c:	4b0e      	ldr	r3, [pc, #56]	; (1ab8 <system_clock_source_get_hz+0x7c>)
    1a7e:	681b      	ldr	r3, [r3, #0]
    1a80:	075b      	lsls	r3, r3, #29
    1a82:	d514      	bpl.n	1aae <system_clock_source_get_hz+0x72>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1a84:	2000      	movs	r0, #0
    1a86:	4b0f      	ldr	r3, [pc, #60]	; (1ac4 <system_clock_source_get_hz+0x88>)
    1a88:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1a8a:	4b0b      	ldr	r3, [pc, #44]	; (1ab8 <system_clock_source_get_hz+0x7c>)
    1a8c:	689b      	ldr	r3, [r3, #8]
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1a8e:	041b      	lsls	r3, r3, #16
    1a90:	0c1b      	lsrs	r3, r3, #16
    1a92:	4358      	muls	r0, r3
    1a94:	e00c      	b.n	1ab0 <system_clock_source_get_hz+0x74>

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1a96:	2350      	movs	r3, #80	; 0x50
    1a98:	4a08      	ldr	r2, [pc, #32]	; (1abc <system_clock_source_get_hz+0x80>)
    1a9a:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1a9c:	2000      	movs	r0, #0

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1a9e:	075b      	lsls	r3, r3, #29
    1aa0:	d506      	bpl.n	1ab0 <system_clock_source_get_hz+0x74>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    1aa2:	4b05      	ldr	r3, [pc, #20]	; (1ab8 <system_clock_source_get_hz+0x7c>)
    1aa4:	68d8      	ldr	r0, [r3, #12]
    1aa6:	e003      	b.n	1ab0 <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    1aa8:	2080      	movs	r0, #128	; 0x80
    1aaa:	0200      	lsls	r0, r0, #8
    1aac:	e000      	b.n	1ab0 <system_clock_source_get_hz+0x74>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    1aae:	4806      	ldr	r0, [pc, #24]	; (1ac8 <system_clock_source_get_hz+0x8c>)
#endif

	default:
		return 0;
	}
}
    1ab0:	bd10      	pop	{r4, pc}
    1ab2:	46c0      	nop			; (mov r8, r8)
    1ab4:	00007de8 	.word	0x00007de8
    1ab8:	200000b0 	.word	0x200000b0
    1abc:	40000800 	.word	0x40000800
    1ac0:	007a1200 	.word	0x007a1200
    1ac4:	000021c1 	.word	0x000021c1
    1ac8:	02dc6c00 	.word	0x02dc6c00

00001acc <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1acc:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1ace:	4c0c      	ldr	r4, [pc, #48]	; (1b00 <system_clock_source_osc8m_set_config+0x34>)
    1ad0:	6a23      	ldr	r3, [r4, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1ad2:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1ad4:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    1ad6:	7842      	ldrb	r2, [r0, #1]
    1ad8:	2001      	movs	r0, #1
    1ada:	4002      	ands	r2, r0
    1adc:	0192      	lsls	r2, r2, #6
    1ade:	2640      	movs	r6, #64	; 0x40
    1ae0:	43b3      	bics	r3, r6
    1ae2:	4313      	orrs	r3, r2
    1ae4:	0002      	movs	r2, r0
    1ae6:	402a      	ands	r2, r5
    1ae8:	01d2      	lsls	r2, r2, #7
    1aea:	307f      	adds	r0, #127	; 0x7f
    1aec:	4383      	bics	r3, r0
    1aee:	4313      	orrs	r3, r2
    1af0:	2203      	movs	r2, #3
    1af2:	400a      	ands	r2, r1
    1af4:	0212      	lsls	r2, r2, #8
    1af6:	4903      	ldr	r1, [pc, #12]	; (1b04 <system_clock_source_osc8m_set_config+0x38>)
    1af8:	400b      	ands	r3, r1
    1afa:	4313      	orrs	r3, r2
    1afc:	6223      	str	r3, [r4, #32]
}
    1afe:	bd70      	pop	{r4, r5, r6, pc}
    1b00:	40000800 	.word	0x40000800
    1b04:	fffffcff 	.word	0xfffffcff

00001b08 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    1b08:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b0a:	4657      	mov	r7, sl
    1b0c:	464e      	mov	r6, r9
    1b0e:	4645      	mov	r5, r8
    1b10:	b4e0      	push	{r5, r6, r7}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    1b12:	4e1c      	ldr	r6, [pc, #112]	; (1b84 <system_clock_source_osc32k_set_config+0x7c>)
    1b14:	69b3      	ldr	r3, [r6, #24]
    1b16:	469c      	mov	ip, r3

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    1b18:	7841      	ldrb	r1, [r0, #1]
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    1b1a:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1b1c:	7907      	ldrb	r7, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1b1e:	78c3      	ldrb	r3, [r0, #3]
    1b20:	4699      	mov	r9, r3
	temp.bit.WRTLOCK  = config->write_once;
    1b22:	7944      	ldrb	r4, [r0, #5]

	SYSCTRL->OSC32K  = temp;
    1b24:	7883      	ldrb	r3, [r0, #2]
    1b26:	2001      	movs	r0, #1
    1b28:	4003      	ands	r3, r0
    1b2a:	009b      	lsls	r3, r3, #2
    1b2c:	469a      	mov	sl, r3
    1b2e:	2204      	movs	r2, #4
    1b30:	4690      	mov	r8, r2
    1b32:	4662      	mov	r2, ip
    1b34:	4643      	mov	r3, r8
    1b36:	439a      	bics	r2, r3
    1b38:	0013      	movs	r3, r2
    1b3a:	4652      	mov	r2, sl
    1b3c:	431a      	orrs	r2, r3
    1b3e:	0013      	movs	r3, r2
    1b40:	4001      	ands	r1, r0
    1b42:	00c9      	lsls	r1, r1, #3
    1b44:	2208      	movs	r2, #8
    1b46:	4393      	bics	r3, r2
    1b48:	430b      	orrs	r3, r1
    1b4a:	464a      	mov	r2, r9
    1b4c:	4002      	ands	r2, r0
    1b4e:	0192      	lsls	r2, r2, #6
    1b50:	2140      	movs	r1, #64	; 0x40
    1b52:	438b      	bics	r3, r1
    1b54:	4313      	orrs	r3, r2
    1b56:	4007      	ands	r7, r0
    1b58:	01ff      	lsls	r7, r7, #7
    1b5a:	2280      	movs	r2, #128	; 0x80
    1b5c:	4393      	bics	r3, r2
    1b5e:	433b      	orrs	r3, r7
    1b60:	3a79      	subs	r2, #121	; 0x79
    1b62:	4015      	ands	r5, r2
    1b64:	022d      	lsls	r5, r5, #8
    1b66:	4f08      	ldr	r7, [pc, #32]	; (1b88 <system_clock_source_osc32k_set_config+0x80>)
    1b68:	403b      	ands	r3, r7
    1b6a:	432b      	orrs	r3, r5
    1b6c:	4004      	ands	r4, r0
    1b6e:	0320      	lsls	r0, r4, #12
    1b70:	4c06      	ldr	r4, [pc, #24]	; (1b8c <system_clock_source_osc32k_set_config+0x84>)
    1b72:	401c      	ands	r4, r3
    1b74:	4304      	orrs	r4, r0
    1b76:	61b4      	str	r4, [r6, #24]
}
    1b78:	bc1c      	pop	{r2, r3, r4}
    1b7a:	4690      	mov	r8, r2
    1b7c:	4699      	mov	r9, r3
    1b7e:	46a2      	mov	sl, r4
    1b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b82:	46c0      	nop			; (mov r8, r8)
    1b84:	40000800 	.word	0x40000800
    1b88:	fffff8ff 	.word	0xfffff8ff
    1b8c:	ffffefff 	.word	0xffffefff

00001b90 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    1b90:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b92:	465f      	mov	r7, fp
    1b94:	4656      	mov	r6, sl
    1b96:	464d      	mov	r5, r9
    1b98:	4644      	mov	r4, r8
    1b9a:	b4f0      	push	{r4, r5, r6, r7}
    1b9c:	b083      	sub	sp, #12
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    1b9e:	4e2e      	ldr	r6, [pc, #184]	; (1c58 <system_clock_source_xosc32k_set_config+0xc8>)
    1ba0:	8ab3      	ldrh	r3, [r6, #20]
    1ba2:	469c      	mov	ip, r3

	temp.bit.STARTUP = config->startup_time;
    1ba4:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    1ba6:	7803      	ldrb	r3, [r0, #0]
    1ba8:	425a      	negs	r2, r3
    1baa:	415a      	adcs	r2, r3
    1bac:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    1bae:	7883      	ldrb	r3, [r0, #2]
    1bb0:	469b      	mov	fp, r3
	temp.bit.EN1K = config->enable_1khz_output;
    1bb2:	78c3      	ldrb	r3, [r0, #3]
	temp.bit.EN32K = config->enable_32khz_output;
    1bb4:	7902      	ldrb	r2, [r0, #4]
    1bb6:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    1bb8:	7b47      	ldrb	r7, [r0, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1bba:	7b02      	ldrb	r2, [r0, #12]
    1bbc:	9201      	str	r2, [sp, #4]
	temp.bit.WRTLOCK  = config->write_once;
    1bbe:	7b84      	ldrb	r4, [r0, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    1bc0:	6882      	ldr	r2, [r0, #8]
    1bc2:	4826      	ldr	r0, [pc, #152]	; (1c5c <system_clock_source_xosc32k_set_config+0xcc>)
    1bc4:	6142      	str	r2, [r0, #20]

	SYSCTRL->XOSC32K = temp;
    1bc6:	2001      	movs	r0, #1
    1bc8:	464a      	mov	r2, r9
    1bca:	0092      	lsls	r2, r2, #2
    1bcc:	4691      	mov	r9, r2
    1bce:	2204      	movs	r2, #4
    1bd0:	4692      	mov	sl, r2
    1bd2:	4662      	mov	r2, ip
    1bd4:	4651      	mov	r1, sl
    1bd6:	438a      	bics	r2, r1
    1bd8:	4694      	mov	ip, r2
    1bda:	464a      	mov	r2, r9
    1bdc:	4661      	mov	r1, ip
    1bde:	430a      	orrs	r2, r1
    1be0:	4694      	mov	ip, r2
    1be2:	4642      	mov	r2, r8
    1be4:	4002      	ands	r2, r0
    1be6:	00d2      	lsls	r2, r2, #3
    1be8:	4690      	mov	r8, r2
    1bea:	2208      	movs	r2, #8
    1bec:	4691      	mov	r9, r2
    1bee:	4662      	mov	r2, ip
    1bf0:	4649      	mov	r1, r9
    1bf2:	438a      	bics	r2, r1
    1bf4:	4694      	mov	ip, r2
    1bf6:	4642      	mov	r2, r8
    1bf8:	4661      	mov	r1, ip
    1bfa:	430a      	orrs	r2, r1
    1bfc:	4694      	mov	ip, r2
    1bfe:	4003      	ands	r3, r0
    1c00:	011b      	lsls	r3, r3, #4
    1c02:	2210      	movs	r2, #16
    1c04:	4690      	mov	r8, r2
    1c06:	4662      	mov	r2, ip
    1c08:	4641      	mov	r1, r8
    1c0a:	438a      	bics	r2, r1
    1c0c:	4313      	orrs	r3, r2
    1c0e:	4659      	mov	r1, fp
    1c10:	4001      	ands	r1, r0
    1c12:	0149      	lsls	r1, r1, #5
    1c14:	2220      	movs	r2, #32
    1c16:	4393      	bics	r3, r2
    1c18:	430b      	orrs	r3, r1
    1c1a:	9a01      	ldr	r2, [sp, #4]
    1c1c:	4002      	ands	r2, r0
    1c1e:	0192      	lsls	r2, r2, #6
    1c20:	2140      	movs	r1, #64	; 0x40
    1c22:	438b      	bics	r3, r1
    1c24:	4313      	orrs	r3, r2
    1c26:	4007      	ands	r7, r0
    1c28:	01ff      	lsls	r7, r7, #7
    1c2a:	2280      	movs	r2, #128	; 0x80
    1c2c:	4393      	bics	r3, r2
    1c2e:	433b      	orrs	r3, r7
    1c30:	3a79      	subs	r2, #121	; 0x79
    1c32:	4015      	ands	r5, r2
    1c34:	022d      	lsls	r5, r5, #8
    1c36:	4f0a      	ldr	r7, [pc, #40]	; (1c60 <system_clock_source_xosc32k_set_config+0xd0>)
    1c38:	403b      	ands	r3, r7
    1c3a:	432b      	orrs	r3, r5
    1c3c:	4004      	ands	r4, r0
    1c3e:	0320      	lsls	r0, r4, #12
    1c40:	4c08      	ldr	r4, [pc, #32]	; (1c64 <system_clock_source_xosc32k_set_config+0xd4>)
    1c42:	401c      	ands	r4, r3
    1c44:	4304      	orrs	r4, r0
    1c46:	82b4      	strh	r4, [r6, #20]
}
    1c48:	b003      	add	sp, #12
    1c4a:	bc3c      	pop	{r2, r3, r4, r5}
    1c4c:	4690      	mov	r8, r2
    1c4e:	4699      	mov	r9, r3
    1c50:	46a2      	mov	sl, r4
    1c52:	46ab      	mov	fp, r5
    1c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c56:	46c0      	nop			; (mov r8, r8)
    1c58:	40000800 	.word	0x40000800
    1c5c:	200000b0 	.word	0x200000b0
    1c60:	fffff8ff 	.word	0xfffff8ff
    1c64:	ffffefff 	.word	0xffffefff

00001c68 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    1c68:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1c6a:	7a03      	ldrb	r3, [r0, #8]
    1c6c:	069b      	lsls	r3, r3, #26
    1c6e:	0c1a      	lsrs	r2, r3, #16
    1c70:	8943      	ldrh	r3, [r0, #10]
    1c72:	059b      	lsls	r3, r3, #22
    1c74:	0d9b      	lsrs	r3, r3, #22
    1c76:	4313      	orrs	r3, r2
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
    1c78:	4c19      	ldr	r4, [pc, #100]	; (1ce0 <system_clock_source_dfll_set_config+0x78>)
    1c7a:	6063      	str	r3, [r4, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    1c7c:	7981      	ldrb	r1, [r0, #6]
    1c7e:	79c3      	ldrb	r3, [r0, #7]
    1c80:	4319      	orrs	r1, r3
    1c82:	8843      	ldrh	r3, [r0, #2]
    1c84:	8882      	ldrh	r2, [r0, #4]
    1c86:	4313      	orrs	r3, r2
    1c88:	430b      	orrs	r3, r1
    1c8a:	7842      	ldrb	r2, [r0, #1]
    1c8c:	01d2      	lsls	r2, r2, #7
    1c8e:	4313      	orrs	r3, r2
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
    1c90:	6023      	str	r3, [r4, #0]
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    1c92:	7803      	ldrb	r3, [r0, #0]
    1c94:	2b04      	cmp	r3, #4
    1c96:	d10f      	bne.n	1cb8 <system_clock_source_dfll_set_config+0x50>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1c98:	7b03      	ldrb	r3, [r0, #12]
    1c9a:	069b      	lsls	r3, r3, #26
    1c9c:	8a02      	ldrh	r2, [r0, #16]
    1c9e:	4313      	orrs	r3, r2
    1ca0:	0019      	movs	r1, r3
    1ca2:	89c3      	ldrh	r3, [r0, #14]
    1ca4:	041b      	lsls	r3, r3, #16
    1ca6:	4a0f      	ldr	r2, [pc, #60]	; (1ce4 <system_clock_source_dfll_set_config+0x7c>)
    1ca8:	4013      	ands	r3, r2
    1caa:	430b      	orrs	r3, r1
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
    1cac:	60a3      	str	r3, [r4, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    1cae:	6821      	ldr	r1, [r4, #0]
    1cb0:	2304      	movs	r3, #4
    1cb2:	430b      	orrs	r3, r1
    1cb4:	6023      	str	r3, [r4, #0]
    1cb6:	e011      	b.n	1cdc <system_clock_source_dfll_set_config+0x74>
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    1cb8:	2b20      	cmp	r3, #32
    1cba:	d10f      	bne.n	1cdc <system_clock_source_dfll_set_config+0x74>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1cbc:	7b03      	ldrb	r3, [r0, #12]
    1cbe:	069b      	lsls	r3, r3, #26
    1cc0:	8a02      	ldrh	r2, [r0, #16]
    1cc2:	4313      	orrs	r3, r2
    1cc4:	0019      	movs	r1, r3
    1cc6:	89c3      	ldrh	r3, [r0, #14]
    1cc8:	041b      	lsls	r3, r3, #16
    1cca:	4a06      	ldr	r2, [pc, #24]	; (1ce4 <system_clock_source_dfll_set_config+0x7c>)
    1ccc:	4013      	ands	r3, r2
    1cce:	430b      	orrs	r3, r1
		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
    1cd0:	4a03      	ldr	r2, [pc, #12]	; (1ce0 <system_clock_source_dfll_set_config+0x78>)
    1cd2:	6093      	str	r3, [r2, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    1cd4:	6813      	ldr	r3, [r2, #0]
    1cd6:	4904      	ldr	r1, [pc, #16]	; (1ce8 <system_clock_source_dfll_set_config+0x80>)
    1cd8:	430b      	orrs	r3, r1
    1cda:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    1cdc:	bd10      	pop	{r4, pc}
    1cde:	46c0      	nop			; (mov r8, r8)
    1ce0:	200000b0 	.word	0x200000b0
    1ce4:	03ff0000 	.word	0x03ff0000
    1ce8:	00000424 	.word	0x00000424

00001cec <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1cec:	2808      	cmp	r0, #8
    1cee:	d803      	bhi.n	1cf8 <system_clock_source_enable+0xc>
    1cf0:	0080      	lsls	r0, r0, #2
    1cf2:	4b25      	ldr	r3, [pc, #148]	; (1d88 <system_clock_source_enable+0x9c>)
    1cf4:	581b      	ldr	r3, [r3, r0]
    1cf6:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1cf8:	2017      	movs	r0, #23
    1cfa:	e044      	b.n	1d86 <system_clock_source_enable+0x9a>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1cfc:	4a23      	ldr	r2, [pc, #140]	; (1d8c <system_clock_source_enable+0xa0>)
    1cfe:	6a11      	ldr	r1, [r2, #32]
    1d00:	2302      	movs	r3, #2
    1d02:	430b      	orrs	r3, r1
    1d04:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1d06:	2000      	movs	r0, #0
    1d08:	e03d      	b.n	1d86 <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1d0a:	4a20      	ldr	r2, [pc, #128]	; (1d8c <system_clock_source_enable+0xa0>)
    1d0c:	6991      	ldr	r1, [r2, #24]
    1d0e:	2302      	movs	r3, #2
    1d10:	430b      	orrs	r3, r1
    1d12:	6193      	str	r3, [r2, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1d14:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
    1d16:	e036      	b.n	1d86 <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1d18:	4a1c      	ldr	r2, [pc, #112]	; (1d8c <system_clock_source_enable+0xa0>)
    1d1a:	8a11      	ldrh	r1, [r2, #16]
    1d1c:	2302      	movs	r3, #2
    1d1e:	430b      	orrs	r3, r1
    1d20:	8213      	strh	r3, [r2, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1d22:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
    1d24:	e02f      	b.n	1d86 <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1d26:	4a19      	ldr	r2, [pc, #100]	; (1d8c <system_clock_source_enable+0xa0>)
    1d28:	8a91      	ldrh	r1, [r2, #20]
    1d2a:	2302      	movs	r3, #2
    1d2c:	430b      	orrs	r3, r1
    1d2e:	8293      	strh	r3, [r2, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1d30:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
    1d32:	e028      	b.n	1d86 <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1d34:	4916      	ldr	r1, [pc, #88]	; (1d90 <system_clock_source_enable+0xa4>)
    1d36:	680b      	ldr	r3, [r1, #0]
    1d38:	2202      	movs	r2, #2
    1d3a:	4313      	orrs	r3, r2
    1d3c:	600b      	str	r3, [r1, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1d3e:	4b13      	ldr	r3, [pc, #76]	; (1d8c <system_clock_source_enable+0xa0>)
    1d40:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1d42:	0019      	movs	r1, r3
    1d44:	320e      	adds	r2, #14
    1d46:	68cb      	ldr	r3, [r1, #12]
    1d48:	421a      	tst	r2, r3
    1d4a:	d0fc      	beq.n	1d46 <system_clock_source_enable+0x5a>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1d4c:	4a10      	ldr	r2, [pc, #64]	; (1d90 <system_clock_source_enable+0xa4>)
    1d4e:	6891      	ldr	r1, [r2, #8]
    1d50:	4b0e      	ldr	r3, [pc, #56]	; (1d8c <system_clock_source_enable+0xa0>)
    1d52:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1d54:	6852      	ldr	r2, [r2, #4]
    1d56:	629a      	str	r2, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    1d58:	2200      	movs	r2, #0
    1d5a:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1d5c:	0019      	movs	r1, r3
    1d5e:	3210      	adds	r2, #16
    1d60:	68cb      	ldr	r3, [r1, #12]
    1d62:	421a      	tst	r2, r3
    1d64:	d0fc      	beq.n	1d60 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
	_system_dfll_wait_for_sync();
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1d66:	4b0a      	ldr	r3, [pc, #40]	; (1d90 <system_clock_source_enable+0xa4>)
    1d68:	681b      	ldr	r3, [r3, #0]
    1d6a:	b29b      	uxth	r3, r3
    1d6c:	4a07      	ldr	r2, [pc, #28]	; (1d8c <system_clock_source_enable+0xa0>)
    1d6e:	8493      	strh	r3, [r2, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1d70:	2000      	movs	r0, #0
    1d72:	e008      	b.n	1d86 <system_clock_source_enable+0x9a>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1d74:	4905      	ldr	r1, [pc, #20]	; (1d8c <system_clock_source_enable+0xa0>)
    1d76:	2244      	movs	r2, #68	; 0x44
    1d78:	5c88      	ldrb	r0, [r1, r2]
    1d7a:	2302      	movs	r3, #2
    1d7c:	4303      	orrs	r3, r0
    1d7e:	548b      	strb	r3, [r1, r2]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1d80:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
    1d82:	e000      	b.n	1d86 <system_clock_source_enable+0x9a>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    1d84:	2000      	movs	r0, #0
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
    1d86:	4770      	bx	lr
    1d88:	00007e0c 	.word	0x00007e0c
    1d8c:	40000800 	.word	0x40000800
    1d90:	200000b0 	.word	0x200000b0

00001d94 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1d94:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d96:	4657      	mov	r7, sl
    1d98:	464e      	mov	r6, r9
    1d9a:	4645      	mov	r5, r8
    1d9c:	b4e0      	push	{r5, r6, r7}
    1d9e:	b090      	sub	sp, #64	; 0x40
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1da0:	22c2      	movs	r2, #194	; 0xc2
    1da2:	00d2      	lsls	r2, r2, #3
    1da4:	4b62      	ldr	r3, [pc, #392]	; (1f30 <system_clock_init+0x19c>)
    1da6:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1da8:	4962      	ldr	r1, [pc, #392]	; (1f34 <system_clock_init+0x1a0>)
    1daa:	684b      	ldr	r3, [r1, #4]
    1dac:	221e      	movs	r2, #30
    1dae:	4393      	bics	r3, r2
    1db0:	3a1a      	subs	r2, #26
    1db2:	4313      	orrs	r3, r2
    1db4:	604b      	str	r3, [r1, #4]
#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
    1db6:	3a01      	subs	r2, #1
    1db8:	ab01      	add	r3, sp, #4
    1dba:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1dbc:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1dbe:	4d5e      	ldr	r5, [pc, #376]	; (1f38 <system_clock_init+0x1a4>)
    1dc0:	b2e0      	uxtb	r0, r4
    1dc2:	a901      	add	r1, sp, #4
    1dc4:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1dc6:	3401      	adds	r4, #1
    1dc8:	2c25      	cmp	r4, #37	; 0x25
    1dca:	d1f9      	bne.n	1dc0 <system_clock_init+0x2c>
static inline void system_clock_source_xosc32k_get_config_defaults(
		struct system_clock_source_xosc32k_config *const config)
{
	Assert(config);

	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    1dcc:	a80c      	add	r0, sp, #48	; 0x30
    1dce:	2300      	movs	r3, #0
    1dd0:	7003      	strb	r3, [r0, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
	config->auto_gain_control   = false;
	config->frequency           = 32768UL;
    1dd2:	2280      	movs	r2, #128	; 0x80
    1dd4:	0212      	lsls	r2, r2, #8
    1dd6:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    1dd8:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    1dda:	2201      	movs	r2, #1
    1ddc:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    1dde:	7303      	strb	r3, [r0, #12]
	config->on_demand           = true;
	config->write_once          = false;
    1de0:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    1de2:	2106      	movs	r1, #6
    1de4:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
    1de6:	7082      	strb	r2, [r0, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    1de8:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    1dea:	4b54      	ldr	r3, [pc, #336]	; (1f3c <system_clock_init+0x1a8>)
    1dec:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    1dee:	2005      	movs	r0, #5
    1df0:	4b53      	ldr	r3, [pc, #332]	; (1f40 <system_clock_init+0x1ac>)
    1df2:	4798      	blx	r3

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1df4:	494e      	ldr	r1, [pc, #312]	; (1f30 <system_clock_init+0x19c>)
	xosc32k_conf.on_demand           = false;
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    1df6:	2202      	movs	r2, #2

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1df8:	68cb      	ldr	r3, [r1, #12]
	xosc32k_conf.on_demand           = false;
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    1dfa:	421a      	tst	r2, r3
    1dfc:	d0fc      	beq.n	1df8 <system_clock_init+0x64>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    1dfe:	494c      	ldr	r1, [pc, #304]	; (1f30 <system_clock_init+0x19c>)
    1e00:	8a8a      	ldrh	r2, [r1, #20]
    1e02:	2380      	movs	r3, #128	; 0x80
    1e04:	4313      	orrs	r3, r2
    1e06:	828b      	strh	r3, [r1, #20]


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> 
    1e08:	4c4e      	ldr	r4, [pc, #312]	; (1f44 <system_clock_init+0x1b0>)
#endif


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
    1e0a:	6823      	ldr	r3, [r4, #0]
    1e0c:	04da      	lsls	r2, r3, #19
    1e0e:	6988      	ldr	r0, [r1, #24]
    1e10:	0e52      	lsrs	r2, r2, #25
    1e12:	0412      	lsls	r2, r2, #16
    1e14:	4b4c      	ldr	r3, [pc, #304]	; (1f48 <system_clock_init+0x1b4>)
    1e16:	4003      	ands	r3, r0
    1e18:	4313      	orrs	r3, r2
    1e1a:	618b      	str	r3, [r1, #24]
static inline void system_clock_source_osc32k_get_config_defaults(
		struct system_clock_source_osc32k_config *const config)
{
	Assert(config);

	config->enable_1khz_output  = true;
    1e1c:	a80a      	add	r0, sp, #40	; 0x28
    1e1e:	2301      	movs	r3, #1
    1e20:	7043      	strb	r3, [r0, #1]
	config->enable_32khz_output = true;
    1e22:	7083      	strb	r3, [r0, #2]
	config->run_in_standby      = false;
	config->on_demand           = true;
    1e24:	7103      	strb	r3, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    1e26:	2207      	movs	r2, #7
    1e28:	7002      	strb	r2, [r0, #0]
	config->write_once          = false;
    1e2a:	2500      	movs	r5, #0
    1e2c:	7145      	strb	r5, [r0, #5]

	osc32k_conf.startup_time        = CONF_CLOCK_OSC32K_STARTUP_TIME;
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;
    1e2e:	70c3      	strb	r3, [r0, #3]

	system_clock_source_osc32k_set_config(&osc32k_conf);
    1e30:	4b46      	ldr	r3, [pc, #280]	; (1f4c <system_clock_init+0x1b8>)
    1e32:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    1e34:	2004      	movs	r0, #4
    1e36:	4b42      	ldr	r3, [pc, #264]	; (1f40 <system_clock_init+0x1ac>)
    1e38:	4798      	blx	r3
		struct system_clock_source_dfll_config *const config)
{
	Assert(config);

	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    1e3a:	ab05      	add	r3, sp, #20
    1e3c:	2200      	movs	r2, #0
    1e3e:	805d      	strh	r5, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    1e40:	809d      	strh	r5, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    1e42:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    1e44:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;

	/* Open loop mode calibration value */
	config->coarse_value    = 0x1f / 4; /* Midpoint */
	config->fine_value      = 0xff / 4; /* Midpoint */
    1e46:	213f      	movs	r1, #63	; 0x3f
    1e48:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    1e4a:	393b      	subs	r1, #59	; 0x3b
    1e4c:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    1e4e:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    1e50:	6823      	ldr	r3, [r4, #0]
    1e52:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    1e54:	2b3f      	cmp	r3, #63	; 0x3f
    1e56:	d100      	bne.n	1e5a <system_clock_init+0xc6>
		coarse = 0x1f;
    1e58:	3b20      	subs	r3, #32
	}
	dfll_conf.coarse_value = coarse;
    1e5a:	a805      	add	r0, sp, #20
    1e5c:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    1e5e:	23b7      	movs	r3, #183	; 0xb7
    1e60:	00db      	lsls	r3, r3, #3
    1e62:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    1e64:	2307      	movs	r3, #7
    1e66:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    1e68:	3338      	adds	r3, #56	; 0x38
    1e6a:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    1e6c:	4b38      	ldr	r3, [pc, #224]	; (1f50 <system_clock_init+0x1bc>)
    1e6e:	4798      	blx	r3
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
    1e70:	a804      	add	r0, sp, #16
    1e72:	2500      	movs	r5, #0
    1e74:	7045      	strb	r5, [r0, #1]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1e76:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    1e78:	7085      	strb	r5, [r0, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1e7a:	4b36      	ldr	r3, [pc, #216]	; (1f54 <system_clock_init+0x1c0>)
    1e7c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1e7e:	2006      	movs	r0, #6
    1e80:	4b2f      	ldr	r3, [pc, #188]	; (1f40 <system_clock_init+0x1ac>)
    1e82:	4699      	mov	r9, r3
    1e84:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1e86:	4b34      	ldr	r3, [pc, #208]	; (1f58 <system_clock_init+0x1c4>)
    1e88:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1e8a:	ac01      	add	r4, sp, #4
    1e8c:	2601      	movs	r6, #1
    1e8e:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    1e90:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    1e92:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1e94:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1e96:	2305      	movs	r3, #5
    1e98:	7023      	strb	r3, [r4, #0]
    1e9a:	0021      	movs	r1, r4
    1e9c:	2001      	movs	r0, #1
    1e9e:	4b2f      	ldr	r3, [pc, #188]	; (1f5c <system_clock_init+0x1c8>)
    1ea0:	4698      	mov	r8, r3
    1ea2:	4798      	blx	r3
    1ea4:	2001      	movs	r0, #1
    1ea6:	4f2e      	ldr	r7, [pc, #184]	; (1f60 <system_clock_init+0x1cc>)
    1ea8:	47b8      	blx	r7
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
    1eaa:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
	config->output_enable      = false;
    1eac:	7265      	strb	r5, [r4, #9]
    1eae:	2304      	movs	r3, #4
    1eb0:	7023      	strb	r3, [r4, #0]
    1eb2:	331c      	adds	r3, #28
    1eb4:	469a      	mov	sl, r3
    1eb6:	6063      	str	r3, [r4, #4]
    1eb8:	7226      	strb	r6, [r4, #8]
    1eba:	0021      	movs	r1, r4
    1ebc:	2002      	movs	r0, #2
    1ebe:	47c0      	blx	r8
    1ec0:	2002      	movs	r0, #2
    1ec2:	47b8      	blx	r7
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
    1ec4:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    1ec6:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1ec8:	7265      	strb	r5, [r4, #9]
    1eca:	2303      	movs	r3, #3
    1ecc:	7023      	strb	r3, [r4, #0]
    1ece:	4653      	mov	r3, sl
    1ed0:	6063      	str	r3, [r4, #4]
    1ed2:	0021      	movs	r1, r4
    1ed4:	2004      	movs	r0, #4
    1ed6:	47c0      	blx	r8
    1ed8:	2004      	movs	r0, #4
    1eda:	47b8      	blx	r7
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    1edc:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    1ede:	0021      	movs	r1, r4
    1ee0:	2000      	movs	r0, #0
    1ee2:	4b15      	ldr	r3, [pc, #84]	; (1f38 <system_clock_init+0x1a4>)
    1ee4:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    1ee6:	2000      	movs	r0, #0
    1ee8:	4b1e      	ldr	r3, [pc, #120]	; (1f64 <system_clock_init+0x1d0>)
    1eea:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    1eec:	2007      	movs	r0, #7
    1eee:	47c8      	blx	r9

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1ef0:	490f      	ldr	r1, [pc, #60]	; (1f30 <system_clock_init+0x19c>)


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    1ef2:	22d0      	movs	r2, #208	; 0xd0

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1ef4:	68cb      	ldr	r3, [r1, #12]


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    1ef6:	4013      	ands	r3, r2
    1ef8:	2bd0      	cmp	r3, #208	; 0xd0
    1efa:	d1fb      	bne.n	1ef4 <system_clock_init+0x160>
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    1efc:	4a1a      	ldr	r2, [pc, #104]	; (1f68 <system_clock_init+0x1d4>)
    1efe:	2300      	movs	r3, #0
    1f00:	7213      	strb	r3, [r2, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    1f02:	7253      	strb	r3, [r2, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    1f04:	7293      	strb	r3, [r2, #10]
			break;
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    1f06:	72d3      	strb	r3, [r2, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1f08:	a901      	add	r1, sp, #4
    1f0a:	2201      	movs	r2, #1
    1f0c:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    1f0e:	704b      	strb	r3, [r1, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    1f10:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    1f12:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1f14:	3307      	adds	r3, #7
    1f16:	700b      	strb	r3, [r1, #0]
    1f18:	2000      	movs	r0, #0
    1f1a:	4b10      	ldr	r3, [pc, #64]	; (1f5c <system_clock_init+0x1c8>)
    1f1c:	4798      	blx	r3
    1f1e:	2000      	movs	r0, #0
    1f20:	4b0f      	ldr	r3, [pc, #60]	; (1f60 <system_clock_init+0x1cc>)
    1f22:	4798      	blx	r3
#endif
}
    1f24:	b010      	add	sp, #64	; 0x40
    1f26:	bc1c      	pop	{r2, r3, r4}
    1f28:	4690      	mov	r8, r2
    1f2a:	4699      	mov	r9, r3
    1f2c:	46a2      	mov	sl, r4
    1f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f30:	40000800 	.word	0x40000800
    1f34:	41004000 	.word	0x41004000
    1f38:	000021a5 	.word	0x000021a5
    1f3c:	00001b91 	.word	0x00001b91
    1f40:	00001ced 	.word	0x00001ced
    1f44:	00806024 	.word	0x00806024
    1f48:	ff80ffff 	.word	0xff80ffff
    1f4c:	00001b09 	.word	0x00001b09
    1f50:	00001c69 	.word	0x00001c69
    1f54:	00001acd 	.word	0x00001acd
    1f58:	00001f6d 	.word	0x00001f6d
    1f5c:	00001f91 	.word	0x00001f91
    1f60:	00002049 	.word	0x00002049
    1f64:	00002119 	.word	0x00002119
    1f68:	40000400 	.word	0x40000400

00001f6c <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    1f6c:	4a06      	ldr	r2, [pc, #24]	; (1f88 <system_gclk_init+0x1c>)
    1f6e:	6991      	ldr	r1, [r2, #24]
    1f70:	2308      	movs	r3, #8
    1f72:	430b      	orrs	r3, r1
    1f74:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1f76:	2201      	movs	r2, #1
    1f78:	4b04      	ldr	r3, [pc, #16]	; (1f8c <system_gclk_init+0x20>)
    1f7a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1f7c:	0019      	movs	r1, r3
    1f7e:	780b      	ldrb	r3, [r1, #0]
    1f80:	4213      	tst	r3, r2
    1f82:	d1fc      	bne.n	1f7e <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1f84:	4770      	bx	lr
    1f86:	46c0      	nop			; (mov r8, r8)
    1f88:	40000400 	.word	0x40000400
    1f8c:	40000c00 	.word	0x40000c00

00001f90 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1f90:	b570      	push	{r4, r5, r6, lr}
    1f92:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1f94:	0005      	movs	r5, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1f96:	780c      	ldrb	r4, [r1, #0]
    1f98:	0224      	lsls	r4, r4, #8
    1f9a:	4304      	orrs	r4, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1f9c:	784b      	ldrb	r3, [r1, #1]
    1f9e:	2b00      	cmp	r3, #0
    1fa0:	d002      	beq.n	1fa8 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1fa2:	2380      	movs	r3, #128	; 0x80
    1fa4:	02db      	lsls	r3, r3, #11
    1fa6:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1fa8:	7a4b      	ldrb	r3, [r1, #9]
    1faa:	2b00      	cmp	r3, #0
    1fac:	d002      	beq.n	1fb4 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1fae:	2380      	movs	r3, #128	; 0x80
    1fb0:	031b      	lsls	r3, r3, #12
    1fb2:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1fb4:	6848      	ldr	r0, [r1, #4]
    1fb6:	2801      	cmp	r0, #1
    1fb8:	d918      	bls.n	1fec <system_gclk_gen_set_config+0x5c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1fba:	1e43      	subs	r3, r0, #1
    1fbc:	4218      	tst	r0, r3
    1fbe:	d110      	bne.n	1fe2 <system_gclk_gen_set_config+0x52>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1fc0:	2802      	cmp	r0, #2
    1fc2:	d906      	bls.n	1fd2 <system_gclk_gen_set_config+0x42>
    1fc4:	2302      	movs	r3, #2
    1fc6:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1fc8:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    1fca:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1fcc:	4298      	cmp	r0, r3
    1fce:	d8fb      	bhi.n	1fc8 <system_gclk_gen_set_config+0x38>
    1fd0:	e000      	b.n	1fd4 <system_gclk_gen_set_config+0x44>
    1fd2:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1fd4:	0212      	lsls	r2, r2, #8
    1fd6:	4332      	orrs	r2, r6
    1fd8:	0015      	movs	r5, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1fda:	2380      	movs	r3, #128	; 0x80
    1fdc:	035b      	lsls	r3, r3, #13
    1fde:	431c      	orrs	r4, r3
    1fe0:	e004      	b.n	1fec <system_gclk_gen_set_config+0x5c>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    1fe2:	0205      	lsls	r5, r0, #8
    1fe4:	4335      	orrs	r5, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1fe6:	2380      	movs	r3, #128	; 0x80
    1fe8:	029b      	lsls	r3, r3, #10
    1fea:	431c      	orrs	r4, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1fec:	7a0b      	ldrb	r3, [r1, #8]
    1fee:	2b00      	cmp	r3, #0
    1ff0:	d002      	beq.n	1ff8 <system_gclk_gen_set_config+0x68>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1ff2:	2380      	movs	r3, #128	; 0x80
    1ff4:	039b      	lsls	r3, r3, #14
    1ff6:	431c      	orrs	r4, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1ff8:	4a0f      	ldr	r2, [pc, #60]	; (2038 <STACK_SIZE+0x38>)
    1ffa:	7853      	ldrb	r3, [r2, #1]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing()) {
    1ffc:	b25b      	sxtb	r3, r3
    1ffe:	2b00      	cmp	r3, #0
    2000:	dbfb      	blt.n	1ffa <system_gclk_gen_set_config+0x6a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    2002:	4b0e      	ldr	r3, [pc, #56]	; (203c <STACK_SIZE+0x3c>)
    2004:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2006:	4b0e      	ldr	r3, [pc, #56]	; (2040 <STACK_SIZE+0x40>)
    2008:	701e      	strb	r6, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    200a:	4a0b      	ldr	r2, [pc, #44]	; (2038 <STACK_SIZE+0x38>)
    200c:	7853      	ldrb	r3, [r2, #1]

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    200e:	b25b      	sxtb	r3, r3
    2010:	2b00      	cmp	r3, #0
    2012:	dbfb      	blt.n	200c <STACK_SIZE+0xc>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    2014:	4b08      	ldr	r3, [pc, #32]	; (2038 <STACK_SIZE+0x38>)
    2016:	609d      	str	r5, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2018:	001a      	movs	r2, r3
    201a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
    201c:	b25b      	sxtb	r3, r3
    201e:	2b00      	cmp	r3, #0
    2020:	dbfb      	blt.n	201a <STACK_SIZE+0x1a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    2022:	4a05      	ldr	r2, [pc, #20]	; (2038 <STACK_SIZE+0x38>)
    2024:	6851      	ldr	r1, [r2, #4]
    2026:	2380      	movs	r3, #128	; 0x80
    2028:	025b      	lsls	r3, r3, #9
    202a:	400b      	ands	r3, r1
    202c:	431c      	orrs	r4, r3
    202e:	6054      	str	r4, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    2030:	4b04      	ldr	r3, [pc, #16]	; (2044 <STACK_SIZE+0x44>)
    2032:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2034:	bd70      	pop	{r4, r5, r6, pc}
    2036:	46c0      	nop			; (mov r8, r8)
    2038:	40000c00 	.word	0x40000c00
    203c:	00000181 	.word	0x00000181
    2040:	40000c08 	.word	0x40000c08
    2044:	000001c1 	.word	0x000001c1

00002048 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    2048:	b510      	push	{r4, lr}
    204a:	0004      	movs	r4, r0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    204c:	4a0b      	ldr	r2, [pc, #44]	; (207c <system_gclk_gen_enable+0x34>)
    204e:	7853      	ldrb	r3, [r2, #1]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    2050:	b25b      	sxtb	r3, r3
    2052:	2b00      	cmp	r3, #0
    2054:	dbfb      	blt.n	204e <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    2056:	4b0a      	ldr	r3, [pc, #40]	; (2080 <system_gclk_gen_enable+0x38>)
    2058:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    205a:	4b0a      	ldr	r3, [pc, #40]	; (2084 <system_gclk_gen_enable+0x3c>)
    205c:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    205e:	4a07      	ldr	r2, [pc, #28]	; (207c <system_gclk_gen_enable+0x34>)
    2060:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    2062:	b25b      	sxtb	r3, r3
    2064:	2b00      	cmp	r3, #0
    2066:	dbfb      	blt.n	2060 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    2068:	4a04      	ldr	r2, [pc, #16]	; (207c <system_gclk_gen_enable+0x34>)
    206a:	6853      	ldr	r3, [r2, #4]
    206c:	2180      	movs	r1, #128	; 0x80
    206e:	0249      	lsls	r1, r1, #9
    2070:	430b      	orrs	r3, r1
    2072:	6053      	str	r3, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    2074:	4b04      	ldr	r3, [pc, #16]	; (2088 <system_gclk_gen_enable+0x40>)
    2076:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2078:	bd10      	pop	{r4, pc}
    207a:	46c0      	nop			; (mov r8, r8)
    207c:	40000c00 	.word	0x40000c00
    2080:	00000181 	.word	0x00000181
    2084:	40000c04 	.word	0x40000c04
    2088:	000001c1 	.word	0x000001c1

0000208c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    208c:	b570      	push	{r4, r5, r6, lr}
    208e:	0004      	movs	r4, r0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2090:	4a1a      	ldr	r2, [pc, #104]	; (20fc <system_gclk_gen_get_hz+0x70>)
    2092:	7853      	ldrb	r3, [r2, #1]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    2094:	b25b      	sxtb	r3, r3
    2096:	2b00      	cmp	r3, #0
    2098:	dbfb      	blt.n	2092 <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    209a:	4b19      	ldr	r3, [pc, #100]	; (2100 <system_gclk_gen_get_hz+0x74>)
    209c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    209e:	4b19      	ldr	r3, [pc, #100]	; (2104 <system_gclk_gen_get_hz+0x78>)
    20a0:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    20a2:	4a16      	ldr	r2, [pc, #88]	; (20fc <system_gclk_gen_get_hz+0x70>)
    20a4:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    20a6:	b25b      	sxtb	r3, r3
    20a8:	2b00      	cmp	r3, #0
    20aa:	dbfb      	blt.n	20a4 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    20ac:	4e13      	ldr	r6, [pc, #76]	; (20fc <system_gclk_gen_get_hz+0x70>)
    20ae:	6870      	ldr	r0, [r6, #4]
    20b0:	04c0      	lsls	r0, r0, #19
    20b2:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    20b4:	4b14      	ldr	r3, [pc, #80]	; (2108 <system_gclk_gen_get_hz+0x7c>)
    20b6:	4798      	blx	r3
    20b8:	0005      	movs	r5, r0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    20ba:	4b12      	ldr	r3, [pc, #72]	; (2104 <system_gclk_gen_get_hz+0x78>)
    20bc:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    20be:	6876      	ldr	r6, [r6, #4]
    20c0:	02f6      	lsls	r6, r6, #11
    20c2:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    20c4:	4b11      	ldr	r3, [pc, #68]	; (210c <system_gclk_gen_get_hz+0x80>)
    20c6:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    20c8:	4a0c      	ldr	r2, [pc, #48]	; (20fc <system_gclk_gen_get_hz+0x70>)
    20ca:	7853      	ldrb	r3, [r2, #1]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
	while (system_gclk_is_syncing()) {
    20cc:	b25b      	sxtb	r3, r3
    20ce:	2b00      	cmp	r3, #0
    20d0:	dbfb      	blt.n	20ca <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    20d2:	4b0a      	ldr	r3, [pc, #40]	; (20fc <system_gclk_gen_get_hz+0x70>)
    20d4:	689c      	ldr	r4, [r3, #8]
    20d6:	0224      	lsls	r4, r4, #8
    20d8:	0c24      	lsrs	r4, r4, #16
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    20da:	4b0d      	ldr	r3, [pc, #52]	; (2110 <system_gclk_gen_get_hz+0x84>)
    20dc:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    20de:	2e00      	cmp	r6, #0
    20e0:	d107      	bne.n	20f2 <system_gclk_gen_get_hz+0x66>
    20e2:	2c01      	cmp	r4, #1
    20e4:	d907      	bls.n	20f6 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    20e6:	0021      	movs	r1, r4
    20e8:	0028      	movs	r0, r5
    20ea:	4b0a      	ldr	r3, [pc, #40]	; (2114 <system_gclk_gen_get_hz+0x88>)
    20ec:	4798      	blx	r3
    20ee:	0005      	movs	r5, r0
    20f0:	e001      	b.n	20f6 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    20f2:	3401      	adds	r4, #1
    20f4:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    20f6:	0028      	movs	r0, r5
    20f8:	bd70      	pop	{r4, r5, r6, pc}
    20fa:	46c0      	nop			; (mov r8, r8)
    20fc:	40000c00 	.word	0x40000c00
    2100:	00000181 	.word	0x00000181
    2104:	40000c04 	.word	0x40000c04
    2108:	00001a3d 	.word	0x00001a3d
    210c:	40000c08 	.word	0x40000c08
    2110:	000001c1 	.word	0x000001c1
    2114:	00005199 	.word	0x00005199

00002118 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    2118:	b510      	push	{r4, lr}
    211a:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    211c:	4b06      	ldr	r3, [pc, #24]	; (2138 <system_gclk_chan_enable+0x20>)
    211e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2120:	4b06      	ldr	r3, [pc, #24]	; (213c <system_gclk_chan_enable+0x24>)
    2122:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    2124:	4a06      	ldr	r2, [pc, #24]	; (2140 <system_gclk_chan_enable+0x28>)
    2126:	8851      	ldrh	r1, [r2, #2]
    2128:	2380      	movs	r3, #128	; 0x80
    212a:	01db      	lsls	r3, r3, #7
    212c:	430b      	orrs	r3, r1
    212e:	8053      	strh	r3, [r2, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    2130:	4b04      	ldr	r3, [pc, #16]	; (2144 <system_gclk_chan_enable+0x2c>)
    2132:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2134:	bd10      	pop	{r4, pc}
    2136:	46c0      	nop			; (mov r8, r8)
    2138:	00000181 	.word	0x00000181
    213c:	40000c02 	.word	0x40000c02
    2140:	40000c00 	.word	0x40000c00
    2144:	000001c1 	.word	0x000001c1

00002148 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    2148:	b510      	push	{r4, lr}
    214a:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    214c:	4b0f      	ldr	r3, [pc, #60]	; (218c <system_gclk_chan_disable+0x44>)
    214e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2150:	4b0f      	ldr	r3, [pc, #60]	; (2190 <system_gclk_chan_disable+0x48>)
    2152:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    2154:	4b0f      	ldr	r3, [pc, #60]	; (2194 <system_gclk_chan_disable+0x4c>)
    2156:	885a      	ldrh	r2, [r3, #2]
    2158:	0512      	lsls	r2, r2, #20
    215a:	0f10      	lsrs	r0, r2, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    215c:	8859      	ldrh	r1, [r3, #2]
    215e:	4a0e      	ldr	r2, [pc, #56]	; (2198 <system_gclk_chan_disable+0x50>)
    2160:	400a      	ands	r2, r1
    2162:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    2164:	8859      	ldrh	r1, [r3, #2]
    2166:	4a0d      	ldr	r2, [pc, #52]	; (219c <system_gclk_chan_disable+0x54>)
    2168:	400a      	ands	r2, r1
    216a:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    216c:	0019      	movs	r1, r3
    216e:	2280      	movs	r2, #128	; 0x80
    2170:	01d2      	lsls	r2, r2, #7
    2172:	884b      	ldrh	r3, [r1, #2]
    2174:	4213      	tst	r3, r2
    2176:	d1fc      	bne.n	2172 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    2178:	4906      	ldr	r1, [pc, #24]	; (2194 <system_gclk_chan_disable+0x4c>)
    217a:	884c      	ldrh	r4, [r1, #2]
    217c:	0202      	lsls	r2, r0, #8
    217e:	4b06      	ldr	r3, [pc, #24]	; (2198 <system_gclk_chan_disable+0x50>)
    2180:	4023      	ands	r3, r4
    2182:	4313      	orrs	r3, r2
    2184:	804b      	strh	r3, [r1, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    2186:	4b06      	ldr	r3, [pc, #24]	; (21a0 <system_gclk_chan_disable+0x58>)
    2188:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    218a:	bd10      	pop	{r4, pc}
    218c:	00000181 	.word	0x00000181
    2190:	40000c02 	.word	0x40000c02
    2194:	40000c00 	.word	0x40000c00
    2198:	fffff0ff 	.word	0xfffff0ff
    219c:	ffffbfff 	.word	0xffffbfff
    21a0:	000001c1 	.word	0x000001c1

000021a4 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    21a4:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    21a6:	780c      	ldrb	r4, [r1, #0]
    21a8:	0224      	lsls	r4, r4, #8
    21aa:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    21ac:	4b02      	ldr	r3, [pc, #8]	; (21b8 <system_gclk_chan_set_config+0x14>)
    21ae:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    21b0:	b2a4      	uxth	r4, r4
    21b2:	4b02      	ldr	r3, [pc, #8]	; (21bc <system_gclk_chan_set_config+0x18>)
    21b4:	805c      	strh	r4, [r3, #2]
}
    21b6:	bd10      	pop	{r4, pc}
    21b8:	00002149 	.word	0x00002149
    21bc:	40000c00 	.word	0x40000c00

000021c0 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    21c0:	b510      	push	{r4, lr}
    21c2:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    21c4:	4b06      	ldr	r3, [pc, #24]	; (21e0 <system_gclk_chan_get_hz+0x20>)
    21c6:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    21c8:	4b06      	ldr	r3, [pc, #24]	; (21e4 <system_gclk_chan_get_hz+0x24>)
    21ca:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    21cc:	4b06      	ldr	r3, [pc, #24]	; (21e8 <system_gclk_chan_get_hz+0x28>)
    21ce:	885c      	ldrh	r4, [r3, #2]
    21d0:	0524      	lsls	r4, r4, #20
    21d2:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    21d4:	4b05      	ldr	r3, [pc, #20]	; (21ec <system_gclk_chan_get_hz+0x2c>)
    21d6:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    21d8:	0020      	movs	r0, r4
    21da:	4b05      	ldr	r3, [pc, #20]	; (21f0 <system_gclk_chan_get_hz+0x30>)
    21dc:	4798      	blx	r3
}
    21de:	bd10      	pop	{r4, pc}
    21e0:	00000181 	.word	0x00000181
    21e4:	40000c02 	.word	0x40000c02
    21e8:	40000c00 	.word	0x40000c00
    21ec:	000001c1 	.word	0x000001c1
    21f0:	0000208d 	.word	0x0000208d

000021f4 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    21f4:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    21f6:	78d3      	ldrb	r3, [r2, #3]
    21f8:	2b00      	cmp	r3, #0
    21fa:	d11e      	bne.n	223a <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    21fc:	7813      	ldrb	r3, [r2, #0]
    21fe:	2b80      	cmp	r3, #128	; 0x80
    2200:	d004      	beq.n	220c <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    2202:	061b      	lsls	r3, r3, #24
    2204:	2480      	movs	r4, #128	; 0x80
    2206:	0264      	lsls	r4, r4, #9
    2208:	4323      	orrs	r3, r4
    220a:	e000      	b.n	220e <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    220c:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    220e:	7854      	ldrb	r4, [r2, #1]
    2210:	2502      	movs	r5, #2
    2212:	43ac      	bics	r4, r5
    2214:	d10a      	bne.n	222c <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    2216:	7894      	ldrb	r4, [r2, #2]
    2218:	2c00      	cmp	r4, #0
    221a:	d103      	bne.n	2224 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    221c:	2480      	movs	r4, #128	; 0x80
    221e:	02a4      	lsls	r4, r4, #10
    2220:	4323      	orrs	r3, r4
    2222:	e002      	b.n	222a <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    2224:	24c0      	movs	r4, #192	; 0xc0
    2226:	02e4      	lsls	r4, r4, #11
    2228:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    222a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    222c:	7854      	ldrb	r4, [r2, #1]
    222e:	3c01      	subs	r4, #1
    2230:	2c01      	cmp	r4, #1
    2232:	d812      	bhi.n	225a <_system_pinmux_config+0x66>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    2234:	4c18      	ldr	r4, [pc, #96]	; (2298 <_system_pinmux_config+0xa4>)
    2236:	4023      	ands	r3, r4
    2238:	e00f      	b.n	225a <_system_pinmux_config+0x66>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    223a:	6041      	str	r1, [r0, #4]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    223c:	040b      	lsls	r3, r1, #16
    223e:	0c1b      	lsrs	r3, r3, #16
    2240:	24a0      	movs	r4, #160	; 0xa0
    2242:	05e4      	lsls	r4, r4, #23
    2244:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2246:	6283      	str	r3, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2248:	0c0b      	lsrs	r3, r1, #16
    224a:	24d0      	movs	r4, #208	; 0xd0
    224c:	0624      	lsls	r4, r4, #24
    224e:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2250:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    2252:	78d3      	ldrb	r3, [r2, #3]
    2254:	2b00      	cmp	r3, #0
    2256:	d018      	beq.n	228a <_system_pinmux_config+0x96>
    2258:	e01c      	b.n	2294 <_system_pinmux_config+0xa0>

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    225a:	040c      	lsls	r4, r1, #16
    225c:	0c24      	lsrs	r4, r4, #16
    225e:	25a0      	movs	r5, #160	; 0xa0
    2260:	05ed      	lsls	r5, r5, #23
    2262:	432c      	orrs	r4, r5
    2264:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2266:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2268:	0c0c      	lsrs	r4, r1, #16
    226a:	25d0      	movs	r5, #208	; 0xd0
    226c:	062d      	lsls	r5, r5, #24
    226e:	432c      	orrs	r4, r5
    2270:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2272:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    2274:	78d4      	ldrb	r4, [r2, #3]
    2276:	2c00      	cmp	r4, #0
    2278:	d10c      	bne.n	2294 <_system_pinmux_config+0xa0>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    227a:	035b      	lsls	r3, r3, #13
    227c:	d505      	bpl.n	228a <_system_pinmux_config+0x96>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    227e:	7893      	ldrb	r3, [r2, #2]
    2280:	2b01      	cmp	r3, #1
    2282:	d101      	bne.n	2288 <_system_pinmux_config+0x94>
				port->OUTSET.reg = pin_mask;
    2284:	6181      	str	r1, [r0, #24]
    2286:	e000      	b.n	228a <_system_pinmux_config+0x96>
			} else {
				port->OUTCLR.reg = pin_mask;
    2288:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    228a:	7853      	ldrb	r3, [r2, #1]
    228c:	3b01      	subs	r3, #1
    228e:	2b01      	cmp	r3, #1
    2290:	d800      	bhi.n	2294 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    2292:	6081      	str	r1, [r0, #8]
		}
	}
}
    2294:	bd30      	pop	{r4, r5, pc}
    2296:	46c0      	nop			; (mov r8, r8)
    2298:	fffbffff 	.word	0xfffbffff

0000229c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    229c:	b510      	push	{r4, lr}
    229e:	0003      	movs	r3, r0
    22a0:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    22a2:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    22a4:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    22a6:	2900      	cmp	r1, #0
    22a8:	d104      	bne.n	22b4 <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
    22aa:	0958      	lsrs	r0, r3, #5
    22ac:	01c0      	lsls	r0, r0, #7
    22ae:	4905      	ldr	r1, [pc, #20]	; (22c4 <system_pinmux_pin_set_config+0x28>)
    22b0:	468c      	mov	ip, r1
    22b2:	4460      	add	r0, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));

	_system_pinmux_config(port, pin_mask, config);
    22b4:	211f      	movs	r1, #31
    22b6:	400b      	ands	r3, r1
    22b8:	391e      	subs	r1, #30
    22ba:	4099      	lsls	r1, r3
    22bc:	4b02      	ldr	r3, [pc, #8]	; (22c8 <system_pinmux_pin_set_config+0x2c>)
    22be:	4798      	blx	r3
}
    22c0:	bd10      	pop	{r4, pc}
    22c2:	46c0      	nop			; (mov r8, r8)
    22c4:	41004400 	.word	0x41004400
    22c8:	000021f5 	.word	0x000021f5

000022cc <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    22cc:	4770      	bx	lr
    22ce:	46c0      	nop			; (mov r8, r8)

000022d0 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    22d0:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    22d2:	4b05      	ldr	r3, [pc, #20]	; (22e8 <system_init+0x18>)
    22d4:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    22d6:	4b05      	ldr	r3, [pc, #20]	; (22ec <system_init+0x1c>)
    22d8:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    22da:	4b05      	ldr	r3, [pc, #20]	; (22f0 <system_init+0x20>)
    22dc:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    22de:	4b05      	ldr	r3, [pc, #20]	; (22f4 <system_init+0x24>)
    22e0:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    22e2:	4b05      	ldr	r3, [pc, #20]	; (22f8 <system_init+0x28>)
    22e4:	4798      	blx	r3
}
    22e6:	bd10      	pop	{r4, pc}
    22e8:	00001d95 	.word	0x00001d95
    22ec:	000001f1 	.word	0x000001f1
    22f0:	000022cd 	.word	0x000022cd
    22f4:	000003ad 	.word	0x000003ad
    22f8:	000022cd 	.word	0x000022cd

000022fc <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    22fc:	1c93      	adds	r3, r2, #2
    22fe:	009b      	lsls	r3, r3, #2
    2300:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    2302:	2a02      	cmp	r2, #2
    2304:	d104      	bne.n	2310 <tc_register_callback+0x14>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    2306:	7e02      	ldrb	r2, [r0, #24]
    2308:	2310      	movs	r3, #16
    230a:	4313      	orrs	r3, r2
    230c:	7603      	strb	r3, [r0, #24]
    230e:	e00b      	b.n	2328 <tc_register_callback+0x2c>
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    2310:	2a03      	cmp	r2, #3
    2312:	d104      	bne.n	231e <tc_register_callback+0x22>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    2314:	7e02      	ldrb	r2, [r0, #24]
    2316:	2320      	movs	r3, #32
    2318:	4313      	orrs	r3, r2
    231a:	7603      	strb	r3, [r0, #24]
    231c:	e004      	b.n	2328 <tc_register_callback+0x2c>
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    231e:	2301      	movs	r3, #1
    2320:	4093      	lsls	r3, r2
    2322:	7e02      	ldrb	r2, [r0, #24]
    2324:	4313      	orrs	r3, r2
    2326:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    2328:	2000      	movs	r0, #0
    232a:	4770      	bx	lr

0000232c <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    232c:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    232e:	0080      	lsls	r0, r0, #2
    2330:	4b14      	ldr	r3, [pc, #80]	; (2384 <_tc_interrupt_handler+0x58>)
    2332:	58c5      	ldr	r5, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    2334:	682b      	ldr	r3, [r5, #0]
    2336:	7b9c      	ldrb	r4, [r3, #14]
    2338:	7e2b      	ldrb	r3, [r5, #24]
    233a:	401c      	ands	r4, r3
    233c:	7e6b      	ldrb	r3, [r5, #25]
    233e:	401c      	ands	r4, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    2340:	07e3      	lsls	r3, r4, #31
    2342:	d505      	bpl.n	2350 <_tc_interrupt_handler+0x24>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    2344:	0028      	movs	r0, r5
    2346:	68ab      	ldr	r3, [r5, #8]
    2348:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    234a:	2301      	movs	r3, #1
    234c:	682a      	ldr	r2, [r5, #0]
    234e:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    2350:	07a3      	lsls	r3, r4, #30
    2352:	d505      	bpl.n	2360 <_tc_interrupt_handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    2354:	0028      	movs	r0, r5
    2356:	68eb      	ldr	r3, [r5, #12]
    2358:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    235a:	2302      	movs	r3, #2
    235c:	682a      	ldr	r2, [r5, #0]
    235e:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    2360:	06e3      	lsls	r3, r4, #27
    2362:	d505      	bpl.n	2370 <_tc_interrupt_handler+0x44>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    2364:	0028      	movs	r0, r5
    2366:	692b      	ldr	r3, [r5, #16]
    2368:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    236a:	2310      	movs	r3, #16
    236c:	682a      	ldr	r2, [r5, #0]
    236e:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    2370:	06a3      	lsls	r3, r4, #26
    2372:	d505      	bpl.n	2380 <_tc_interrupt_handler+0x54>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    2374:	0028      	movs	r0, r5
    2376:	696b      	ldr	r3, [r5, #20]
    2378:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    237a:	682b      	ldr	r3, [r5, #0]
    237c:	2220      	movs	r2, #32
    237e:	739a      	strb	r2, [r3, #14]
	}
}
    2380:	bd70      	pop	{r4, r5, r6, pc}
    2382:	46c0      	nop			; (mov r8, r8)
    2384:	20000844 	.word	0x20000844

00002388 <TC3_Handler>:
#if (SAML21E) || (SAML21G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    2388:	b510      	push	{r4, lr}
    238a:	2000      	movs	r0, #0
    238c:	4b01      	ldr	r3, [pc, #4]	; (2394 <TC3_Handler+0xc>)
    238e:	4798      	blx	r3
    2390:	bd10      	pop	{r4, pc}
    2392:	46c0      	nop			; (mov r8, r8)
    2394:	0000232d 	.word	0x0000232d

00002398 <TC4_Handler>:
    2398:	b510      	push	{r4, lr}
    239a:	2001      	movs	r0, #1
    239c:	4b01      	ldr	r3, [pc, #4]	; (23a4 <TC4_Handler+0xc>)
    239e:	4798      	blx	r3
    23a0:	bd10      	pop	{r4, pc}
    23a2:	46c0      	nop			; (mov r8, r8)
    23a4:	0000232d 	.word	0x0000232d

000023a8 <TC5_Handler>:
    23a8:	b510      	push	{r4, lr}
    23aa:	2002      	movs	r0, #2
    23ac:	4b01      	ldr	r3, [pc, #4]	; (23b4 <TC5_Handler+0xc>)
    23ae:	4798      	blx	r3
    23b0:	bd10      	pop	{r4, pc}
    23b2:	46c0      	nop			; (mov r8, r8)
    23b4:	0000232d 	.word	0x0000232d

000023b8 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    23b8:	b530      	push	{r4, r5, lr}
    23ba:	b085      	sub	sp, #20
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    23bc:	aa01      	add	r2, sp, #4
    23be:	4b0b      	ldr	r3, [pc, #44]	; (23ec <_tc_get_inst_index+0x34>)
    23c0:	cb32      	ldmia	r3!, {r1, r4, r5}
    23c2:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    23c4:	9b01      	ldr	r3, [sp, #4]
    23c6:	4298      	cmp	r0, r3
    23c8:	d00a      	beq.n	23e0 <_tc_get_inst_index+0x28>
    23ca:	9b02      	ldr	r3, [sp, #8]
    23cc:	4298      	cmp	r0, r3
    23ce:	d005      	beq.n	23dc <_tc_get_inst_index+0x24>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    23d0:	2300      	movs	r3, #0
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    23d2:	9a03      	ldr	r2, [sp, #12]
    23d4:	4282      	cmp	r2, r0
    23d6:	d105      	bne.n	23e4 <_tc_get_inst_index+0x2c>
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    23d8:	3302      	adds	r3, #2
    23da:	e002      	b.n	23e2 <_tc_get_inst_index+0x2a>
    23dc:	2301      	movs	r3, #1
    23de:	e000      	b.n	23e2 <_tc_get_inst_index+0x2a>
    23e0:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
			return i;
    23e2:	b2db      	uxtb	r3, r3
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
    23e4:	0018      	movs	r0, r3
    23e6:	b005      	add	sp, #20
    23e8:	bd30      	pop	{r4, r5, pc}
    23ea:	46c0      	nop			; (mov r8, r8)
    23ec:	00007e30 	.word	0x00007e30

000023f0 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    23f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    23f2:	464f      	mov	r7, r9
    23f4:	4646      	mov	r6, r8
    23f6:	b4c0      	push	{r6, r7}
    23f8:	b087      	sub	sp, #28
    23fa:	0004      	movs	r4, r0
    23fc:	000e      	movs	r6, r1
    23fe:	4690      	mov	r8, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    2400:	0008      	movs	r0, r1
    2402:	4b92      	ldr	r3, [pc, #584]	; (264c <tc_init+0x25c>)
    2404:	4798      	blx	r3
    2406:	4681      	mov	r9, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    2408:	4d91      	ldr	r5, [pc, #580]	; (2650 <tc_init+0x260>)
    240a:	0029      	movs	r1, r5
    240c:	310c      	adds	r1, #12
    240e:	2203      	movs	r2, #3
    2410:	a805      	add	r0, sp, #20
    2412:	4f90      	ldr	r7, [pc, #576]	; (2654 <tc_init+0x264>)
    2414:	47b8      	blx	r7
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    2416:	0029      	movs	r1, r5
    2418:	3110      	adds	r1, #16
    241a:	2206      	movs	r2, #6
    241c:	a803      	add	r0, sp, #12
    241e:	47b8      	blx	r7
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    2420:	2300      	movs	r3, #0
    2422:	60a3      	str	r3, [r4, #8]
    2424:	60e3      	str	r3, [r4, #12]
    2426:	6123      	str	r3, [r4, #16]
    2428:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    242a:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    242c:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    242e:	464b      	mov	r3, r9
    2430:	009a      	lsls	r2, r3, #2
    2432:	4b89      	ldr	r3, [pc, #548]	; (2658 <tc_init+0x268>)
    2434:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    2436:	6026      	str	r6, [r4, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    2438:	4643      	mov	r3, r8
    243a:	789b      	ldrb	r3, [r3, #2]
    243c:	2b08      	cmp	r3, #8
    243e:	d104      	bne.n	244a <tc_init+0x5a>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2440:	2017      	movs	r0, #23
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    2442:	464a      	mov	r2, r9
    2444:	07d2      	lsls	r2, r2, #31
    2446:	d400      	bmi.n	244a <tc_init+0x5a>
    2448:	e0fb      	b.n	2642 <tc_init+0x252>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    244a:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    244c:	8833      	ldrh	r3, [r6, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    244e:	2005      	movs	r0, #5
	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    2450:	07db      	lsls	r3, r3, #31
    2452:	d500      	bpl.n	2456 <tc_init+0x66>
    2454:	e0f5      	b.n	2642 <tc_init+0x252>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    2456:	7bf3      	ldrb	r3, [r6, #15]
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
    2458:	3017      	adds	r0, #23
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    245a:	06db      	lsls	r3, r3, #27
    245c:	d500      	bpl.n	2460 <tc_init+0x70>
    245e:	e0f0      	b.n	2642 <tc_init+0x252>
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    2460:	8833      	ldrh	r3, [r6, #0]
    2462:	079b      	lsls	r3, r3, #30
    2464:	d500      	bpl.n	2468 <tc_init+0x78>
    2466:	e0ec      	b.n	2642 <tc_init+0x252>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
    2468:	4643      	mov	r3, r8
    246a:	7c1b      	ldrb	r3, [r3, #16]
    246c:	2b00      	cmp	r3, #0
    246e:	d00c      	beq.n	248a <tc_init+0x9a>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2470:	a902      	add	r1, sp, #8
    2472:	2301      	movs	r3, #1
    2474:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    2476:	2200      	movs	r2, #0
    2478:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    247a:	4642      	mov	r2, r8
    247c:	7e12      	ldrb	r2, [r2, #24]
    247e:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    2480:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    2482:	4643      	mov	r3, r8
    2484:	7d18      	ldrb	r0, [r3, #20]
    2486:	4b75      	ldr	r3, [pc, #468]	; (265c <tc_init+0x26c>)
    2488:	4798      	blx	r3
				config->pwm_channel[0].pin_out, &pin_config);
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
    248a:	4643      	mov	r3, r8
    248c:	7f1b      	ldrb	r3, [r3, #28]
    248e:	2b00      	cmp	r3, #0
    2490:	d00d      	beq.n	24ae <tc_init+0xbe>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2492:	a902      	add	r1, sp, #8
    2494:	2301      	movs	r3, #1
    2496:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    2498:	2200      	movs	r2, #0
    249a:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    249c:	4642      	mov	r2, r8
    249e:	6a52      	ldr	r2, [r2, #36]	; 0x24
    24a0:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    24a2:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    24a4:	4643      	mov	r3, r8
    24a6:	6a1b      	ldr	r3, [r3, #32]
    24a8:	b2d8      	uxtb	r0, r3
    24aa:	4b6c      	ldr	r3, [pc, #432]	; (265c <tc_init+0x26c>)
    24ac:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    24ae:	496c      	ldr	r1, [pc, #432]	; (2660 <tc_init+0x270>)
    24b0:	6a0b      	ldr	r3, [r1, #32]
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			inst_pm_apbmask[instance]);
    24b2:	464a      	mov	r2, r9
    24b4:	0052      	lsls	r2, r2, #1
    24b6:	a803      	add	r0, sp, #12
    24b8:	5a12      	ldrh	r2, [r2, r0]
    24ba:	4313      	orrs	r3, r2
    24bc:	620b      	str	r3, [r1, #32]

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    24be:	4643      	mov	r3, r8
    24c0:	789b      	ldrb	r3, [r3, #2]
    24c2:	2b08      	cmp	r3, #8
    24c4:	d106      	bne.n	24d4 <tc_init+0xe4>
    24c6:	6a0b      	ldr	r3, [r1, #32]
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
				inst_pm_apbmask[instance + 1]);
    24c8:	464a      	mov	r2, r9
    24ca:	3201      	adds	r2, #1
    24cc:	0052      	lsls	r2, r2, #1
    24ce:	5a12      	ldrh	r2, [r2, r0]
    24d0:	4313      	orrs	r3, r2
    24d2:	620b      	str	r3, [r1, #32]
	}

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = config->clock_source;
    24d4:	a901      	add	r1, sp, #4
    24d6:	4643      	mov	r3, r8
    24d8:	781b      	ldrb	r3, [r3, #0]
    24da:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    24dc:	ab05      	add	r3, sp, #20
    24de:	464a      	mov	r2, r9
    24e0:	5c9d      	ldrb	r5, [r3, r2]
    24e2:	0028      	movs	r0, r5
    24e4:	4b5f      	ldr	r3, [pc, #380]	; (2664 <tc_init+0x274>)
    24e6:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    24e8:	0028      	movs	r0, r5
    24ea:	4b5f      	ldr	r3, [pc, #380]	; (2668 <tc_init+0x278>)
    24ec:	4798      	blx	r3

	/* Set ctrla register */
	ctrla_tmp =
    24ee:	4643      	mov	r3, r8
    24f0:	7898      	ldrb	r0, [r3, #2]
    24f2:	799b      	ldrb	r3, [r3, #6]
    24f4:	0002      	movs	r2, r0
    24f6:	431a      	orrs	r2, r3
    24f8:	4643      	mov	r3, r8
    24fa:	8918      	ldrh	r0, [r3, #8]
    24fc:	889b      	ldrh	r3, [r3, #4]
    24fe:	4303      	orrs	r3, r0
    2500:	431a      	orrs	r2, r3
    2502:	0010      	movs	r0, r2
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;

	if (config->run_in_standby) {
    2504:	4643      	mov	r3, r8
    2506:	785b      	ldrb	r3, [r3, #1]
    2508:	2b00      	cmp	r3, #0
    250a:	d002      	beq.n	2512 <tc_init+0x122>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    250c:	2380      	movs	r3, #128	; 0x80
    250e:	011b      	lsls	r3, r3, #4
    2510:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2512:	6821      	ldr	r1, [r4, #0]
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    2514:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2516:	7bcb      	ldrb	r3, [r1, #15]
    2518:	4393      	bics	r3, r2
    251a:	d1fc      	bne.n	2516 <tc_init+0x126>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    251c:	8030      	strh	r0, [r6, #0]

	/* Set ctrlb register */
	if (config->oneshot) {
    251e:	4643      	mov	r3, r8
    2520:	7b58      	ldrb	r0, [r3, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    2522:	1e43      	subs	r3, r0, #1
    2524:	4198      	sbcs	r0, r3
    2526:	0080      	lsls	r0, r0, #2
	}

	if (config->count_direction) {
    2528:	4643      	mov	r3, r8
    252a:	7b9b      	ldrb	r3, [r3, #14]
    252c:	2b00      	cmp	r3, #0
    252e:	d001      	beq.n	2534 <tc_init+0x144>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    2530:	2301      	movs	r3, #1
    2532:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2534:	6821      	ldr	r1, [r4, #0]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
    2536:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2538:	7bcb      	ldrb	r3, [r1, #15]
    253a:	4393      	bics	r3, r2
    253c:	d1fc      	bne.n	2538 <tc_init+0x148>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    253e:	33ff      	adds	r3, #255	; 0xff
    2540:	7133      	strb	r3, [r6, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
    2542:	2800      	cmp	r0, #0
    2544:	d005      	beq.n	2552 <tc_init+0x162>
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2546:	6821      	ldr	r1, [r4, #0]
		while (tc_is_syncing(module_inst)) {
    2548:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    254a:	7bcb      	ldrb	r3, [r1, #15]
    254c:	4393      	bics	r3, r2
    254e:	d1fc      	bne.n	254a <tc_init+0x15a>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    2550:	7170      	strb	r0, [r6, #5]
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
    2552:	4643      	mov	r3, r8
    2554:	7a98      	ldrb	r0, [r3, #10]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
    2556:	7adb      	ldrb	r3, [r3, #11]
    2558:	2b00      	cmp	r3, #0
    255a:	d001      	beq.n	2560 <tc_init+0x170>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    255c:	2310      	movs	r3, #16
    255e:	4318      	orrs	r0, r3
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
    2560:	4643      	mov	r3, r8
    2562:	7b1b      	ldrb	r3, [r3, #12]
    2564:	2b00      	cmp	r3, #0
    2566:	d001      	beq.n	256c <tc_init+0x17c>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    2568:	2320      	movs	r3, #32
    256a:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    256c:	6821      	ldr	r1, [r4, #0]
		}
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    256e:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2570:	7bcb      	ldrb	r3, [r1, #15]
    2572:	4393      	bics	r3, r2
    2574:	d1fc      	bne.n	2570 <tc_init+0x180>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    2576:	71b0      	strb	r0, [r6, #6]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2578:	6822      	ldr	r2, [r4, #0]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    257a:	217f      	movs	r1, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    257c:	7bd3      	ldrb	r3, [r2, #15]
    257e:	438b      	bics	r3, r1
    2580:	d1fc      	bne.n	257c <tc_init+0x18c>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    2582:	7923      	ldrb	r3, [r4, #4]
    2584:	2b04      	cmp	r3, #4
    2586:	d005      	beq.n	2594 <tc_init+0x1a4>
    2588:	2b08      	cmp	r3, #8
    258a:	d041      	beq.n	2610 <tc_init+0x220>

			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
    258c:	2017      	movs	r0, #23
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    258e:	2b00      	cmp	r3, #0
    2590:	d157      	bne.n	2642 <tc_init+0x252>
    2592:	e024      	b.n	25de <tc_init+0x1ee>
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
    2594:	217f      	movs	r1, #127	; 0x7f
    2596:	7bd3      	ldrb	r3, [r2, #15]
    2598:	438b      	bics	r3, r1
    259a:	d1fc      	bne.n	2596 <tc_init+0x1a6>
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
					config->counter_8_bit.value;
    259c:	3328      	adds	r3, #40	; 0x28
    259e:	4642      	mov	r2, r8
    25a0:	5cd3      	ldrb	r3, [r2, r3]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
    25a2:	7433      	strb	r3, [r6, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    25a4:	6821      	ldr	r1, [r4, #0]
					config->counter_8_bit.value;


			while (tc_is_syncing(module_inst)) {
    25a6:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    25a8:	7bcb      	ldrb	r3, [r1, #15]
    25aa:	4393      	bics	r3, r2
    25ac:	d1fc      	bne.n	25a8 <tc_init+0x1b8>
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
					config->counter_8_bit.period;
    25ae:	3329      	adds	r3, #41	; 0x29
    25b0:	4642      	mov	r2, r8
    25b2:	5cd3      	ldrb	r3, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
    25b4:	7533      	strb	r3, [r6, #20]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    25b6:	6821      	ldr	r1, [r4, #0]
					config->counter_8_bit.period;

			while (tc_is_syncing(module_inst)) {
    25b8:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    25ba:	7bcb      	ldrb	r3, [r1, #15]
    25bc:	4393      	bics	r3, r2
    25be:	d1fc      	bne.n	25ba <tc_init+0x1ca>
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
					config->counter_8_bit.compare_capture_channel[0];
    25c0:	332a      	adds	r3, #42	; 0x2a
    25c2:	4642      	mov	r2, r8
    25c4:	5cd3      	ldrb	r3, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
    25c6:	7633      	strb	r3, [r6, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    25c8:	6821      	ldr	r1, [r4, #0]
					config->counter_8_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    25ca:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    25cc:	7bcb      	ldrb	r3, [r1, #15]
    25ce:	4393      	bics	r3, r2
    25d0:	d1fc      	bne.n	25cc <tc_init+0x1dc>
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
					config->counter_8_bit.compare_capture_channel[1];
    25d2:	332b      	adds	r3, #43	; 0x2b
    25d4:	4642      	mov	r2, r8
    25d6:	5cd3      	ldrb	r3, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
    25d8:	7673      	strb	r3, [r6, #25]
					config->counter_8_bit.compare_capture_channel[1];

			return STATUS_OK;
    25da:	2000      	movs	r0, #0
    25dc:	e031      	b.n	2642 <tc_init+0x252>

		case TC_COUNTER_SIZE_16BIT:
			while (tc_is_syncing(module_inst)) {
    25de:	217f      	movs	r1, #127	; 0x7f
    25e0:	7bd3      	ldrb	r3, [r2, #15]
    25e2:	438b      	bics	r3, r1
    25e4:	d1fc      	bne.n	25e0 <tc_init+0x1f0>
				/* Wait for sync */
			}

			hw->COUNT16.COUNT.reg
				= config->counter_16_bit.value;
    25e6:	4643      	mov	r3, r8
    25e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    25ea:	8233      	strh	r3, [r6, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    25ec:	6821      	ldr	r1, [r4, #0]

			while (tc_is_syncing(module_inst)) {
    25ee:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    25f0:	7bcb      	ldrb	r3, [r1, #15]
    25f2:	4393      	bics	r3, r2
    25f4:	d1fc      	bne.n	25f0 <tc_init+0x200>
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
					config->counter_16_bit.compare_capture_channel[0];
    25f6:	4643      	mov	r3, r8
    25f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
    25fa:	8333      	strh	r3, [r6, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    25fc:	6821      	ldr	r1, [r4, #0]
					config->counter_16_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    25fe:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2600:	7bcb      	ldrb	r3, [r1, #15]
    2602:	4393      	bics	r3, r2
    2604:	d1fc      	bne.n	2600 <tc_init+0x210>
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
					config->counter_16_bit.compare_capture_channel[1];
    2606:	4643      	mov	r3, r8
    2608:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
    260a:	8373      	strh	r3, [r6, #26]
					config->counter_16_bit.compare_capture_channel[1];

			return STATUS_OK;
    260c:	2000      	movs	r0, #0
    260e:	e018      	b.n	2642 <tc_init+0x252>

		case TC_COUNTER_SIZE_32BIT:
			while (tc_is_syncing(module_inst)) {
    2610:	217f      	movs	r1, #127	; 0x7f
    2612:	7bd3      	ldrb	r3, [r2, #15]
    2614:	438b      	bics	r3, r1
    2616:	d1fc      	bne.n	2612 <tc_init+0x222>
				/* Wait for sync */
			}

			hw->COUNT32.COUNT.reg
				= config->counter_32_bit.value;
    2618:	4643      	mov	r3, r8
    261a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    261c:	6133      	str	r3, [r6, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    261e:	6821      	ldr	r1, [r4, #0]

			while (tc_is_syncing(module_inst)) {
    2620:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2622:	7bcb      	ldrb	r3, [r1, #15]
    2624:	4393      	bics	r3, r2
    2626:	d1fc      	bne.n	2622 <tc_init+0x232>
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
    2628:	4643      	mov	r3, r8
    262a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    262c:	61b3      	str	r3, [r6, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    262e:	6821      	ldr	r1, [r4, #0]
					config->counter_32_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    2630:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2632:	7bcb      	ldrb	r3, [r1, #15]
    2634:	4393      	bics	r3, r2
    2636:	d1fc      	bne.n	2632 <tc_init+0x242>
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
					config->counter_32_bit.compare_capture_channel[1];
    2638:	4643      	mov	r3, r8
    263a:	6b1b      	ldr	r3, [r3, #48]	; 0x30

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
    263c:	61f3      	str	r3, [r6, #28]
					config->counter_32_bit.compare_capture_channel[1];

			return STATUS_OK;
    263e:	2000      	movs	r0, #0
    2640:	e7ff      	b.n	2642 <tc_init+0x252>
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    2642:	b007      	add	sp, #28
    2644:	bc0c      	pop	{r2, r3}
    2646:	4690      	mov	r8, r2
    2648:	4699      	mov	r9, r3
    264a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    264c:	000023b9 	.word	0x000023b9
    2650:	00007e30 	.word	0x00007e30
    2654:	00006c8d 	.word	0x00006c8d
    2658:	20000844 	.word	0x20000844
    265c:	0000229d 	.word	0x0000229d
    2660:	40000400 	.word	0x40000400
    2664:	000021a5 	.word	0x000021a5
    2668:	00002119 	.word	0x00002119

0000266c <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    266c:	6802      	ldr	r2, [r0, #0]

	while (tc_is_syncing(module_inst)) {
    266e:	217f      	movs	r1, #127	; 0x7f
    2670:	7bd3      	ldrb	r3, [r2, #15]
    2672:	438b      	bics	r3, r1
    2674:	d1fc      	bne.n	2670 <tc_get_count_value+0x4>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    2676:	7903      	ldrb	r3, [r0, #4]
    2678:	2b04      	cmp	r3, #4
    267a:	d005      	beq.n	2688 <tc_get_count_value+0x1c>
    267c:	2b08      	cmp	r3, #8
    267e:	d009      	beq.n	2694 <tc_get_count_value+0x28>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
    2680:	2000      	movs	r0, #0
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    2682:	2b00      	cmp	r3, #0
    2684:	d108      	bne.n	2698 <tc_get_count_value+0x2c>
    2686:	e002      	b.n	268e <tc_get_count_value+0x22>
		case TC_COUNTER_SIZE_8BIT:
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    2688:	7c10      	ldrb	r0, [r2, #16]
    268a:	b2c0      	uxtb	r0, r0
    268c:	e004      	b.n	2698 <tc_get_count_value+0x2c>

		case TC_COUNTER_SIZE_16BIT:
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    268e:	8a10      	ldrh	r0, [r2, #16]
    2690:	b280      	uxth	r0, r0
    2692:	e001      	b.n	2698 <tc_get_count_value+0x2c>

		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
    2694:	6910      	ldr	r0, [r2, #16]
    2696:	e7ff      	b.n	2698 <tc_get_count_value+0x2c>
	}

	Assert(false);
	return 0;
}
    2698:	4770      	bx	lr
    269a:	46c0      	nop			; (mov r8, r8)

0000269c <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    269c:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    269e:	6804      	ldr	r4, [r0, #0]

	while (tc_is_syncing(module_inst)) {
    26a0:	257f      	movs	r5, #127	; 0x7f
    26a2:	7be3      	ldrb	r3, [r4, #15]
    26a4:	43ab      	bics	r3, r5
    26a6:	d1fc      	bne.n	26a2 <tc_set_compare_value+0x6>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    26a8:	7903      	ldrb	r3, [r0, #4]
    26aa:	2b04      	cmp	r3, #4
    26ac:	d005      	beq.n	26ba <tc_set_compare_value+0x1e>
    26ae:	2b08      	cmp	r3, #8
    26b0:	d014      	beq.n	26dc <tc_set_compare_value+0x40>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    26b2:	2017      	movs	r0, #23
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    26b4:	2b00      	cmp	r3, #0
    26b6:	d119      	bne.n	26ec <tc_set_compare_value+0x50>
    26b8:	e007      	b.n	26ca <tc_set_compare_value+0x2e>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    26ba:	2017      	movs	r0, #23
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
		case TC_COUNTER_SIZE_8BIT:
			if (channel_index <
    26bc:	2901      	cmp	r1, #1
    26be:	d815      	bhi.n	26ec <tc_set_compare_value+0x50>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT8.CC[channel_index].reg  =
						(uint8_t)compare;
    26c0:	b2d2      	uxtb	r2, r2
	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
		case TC_COUNTER_SIZE_8BIT:
			if (channel_index <
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT8.CC[channel_index].reg  =
    26c2:	1861      	adds	r1, r4, r1
    26c4:	760a      	strb	r2, [r1, #24]
						(uint8_t)compare;
				return STATUS_OK;
    26c6:	2000      	movs	r0, #0
    26c8:	e010      	b.n	26ec <tc_set_compare_value+0x50>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    26ca:	2017      	movs	r0, #23
						(uint8_t)compare;
				return STATUS_OK;
			}

		case TC_COUNTER_SIZE_16BIT:
			if (channel_index <
    26cc:	2901      	cmp	r1, #1
    26ce:	d80d      	bhi.n	26ec <tc_set_compare_value+0x50>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT16.CC[channel_index].reg =
						(uint16_t)compare;
    26d0:	b292      	uxth	r2, r2
			}

		case TC_COUNTER_SIZE_16BIT:
			if (channel_index <
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT16.CC[channel_index].reg =
    26d2:	310c      	adds	r1, #12
    26d4:	0049      	lsls	r1, r1, #1
    26d6:	530a      	strh	r2, [r1, r4]
						(uint16_t)compare;
				return STATUS_OK;
    26d8:	2000      	movs	r0, #0
    26da:	e007      	b.n	26ec <tc_set_compare_value+0x50>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    26dc:	2017      	movs	r0, #23
						(uint16_t)compare;
				return STATUS_OK;
			}

		case TC_COUNTER_SIZE_32BIT:
			if (channel_index <
    26de:	2901      	cmp	r1, #1
    26e0:	d804      	bhi.n	26ec <tc_set_compare_value+0x50>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT32.CC[channel_index].reg =
    26e2:	3106      	adds	r1, #6
    26e4:	0089      	lsls	r1, r1, #2
    26e6:	510a      	str	r2, [r1, r4]
						(uint32_t)compare;
				return STATUS_OK;
    26e8:	2000      	movs	r0, #0
    26ea:	e7ff      	b.n	26ec <tc_set_compare_value+0x50>
			}
	}

	return STATUS_ERR_INVALID_ARG;
}
    26ec:	bd30      	pop	{r4, r5, pc}
    26ee:	46c0      	nop			; (mov r8, r8)

000026f0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    26f0:	e7fe      	b.n	26f0 <Dummy_Handler>
    26f2:	46c0      	nop			; (mov r8, r8)

000026f4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    26f4:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    26f6:	4b2e      	ldr	r3, [pc, #184]	; (27b0 <Reset_Handler+0xbc>)
    26f8:	4a2e      	ldr	r2, [pc, #184]	; (27b4 <Reset_Handler+0xc0>)
    26fa:	429a      	cmp	r2, r3
    26fc:	d003      	beq.n	2706 <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    26fe:	4b2e      	ldr	r3, [pc, #184]	; (27b8 <Reset_Handler+0xc4>)
    2700:	4a2b      	ldr	r2, [pc, #172]	; (27b0 <Reset_Handler+0xbc>)
    2702:	429a      	cmp	r2, r3
    2704:	d304      	bcc.n	2710 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    2706:	4b2d      	ldr	r3, [pc, #180]	; (27bc <Reset_Handler+0xc8>)
    2708:	4a2d      	ldr	r2, [pc, #180]	; (27c0 <Reset_Handler+0xcc>)
    270a:	429a      	cmp	r2, r3
    270c:	d310      	bcc.n	2730 <Reset_Handler+0x3c>
    270e:	e01e      	b.n	274e <Reset_Handler+0x5a>
    2710:	4a2c      	ldr	r2, [pc, #176]	; (27c4 <Reset_Handler+0xd0>)
    2712:	4b29      	ldr	r3, [pc, #164]	; (27b8 <Reset_Handler+0xc4>)
    2714:	3303      	adds	r3, #3
    2716:	1a9b      	subs	r3, r3, r2
    2718:	089b      	lsrs	r3, r3, #2
    271a:	3301      	adds	r3, #1
    271c:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    271e:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    2720:	4823      	ldr	r0, [pc, #140]	; (27b0 <Reset_Handler+0xbc>)
    2722:	4924      	ldr	r1, [pc, #144]	; (27b4 <Reset_Handler+0xc0>)
    2724:	588c      	ldr	r4, [r1, r2]
    2726:	5084      	str	r4, [r0, r2]
    2728:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    272a:	429a      	cmp	r2, r3
    272c:	d1fa      	bne.n	2724 <Reset_Handler+0x30>
    272e:	e7ea      	b.n	2706 <Reset_Handler+0x12>
    2730:	4a25      	ldr	r2, [pc, #148]	; (27c8 <Reset_Handler+0xd4>)
    2732:	4b22      	ldr	r3, [pc, #136]	; (27bc <Reset_Handler+0xc8>)
    2734:	3303      	adds	r3, #3
    2736:	1a9b      	subs	r3, r3, r2
    2738:	089b      	lsrs	r3, r3, #2
    273a:	3301      	adds	r3, #1
    273c:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    273e:	2200      	movs	r2, #0
                *pDest++ = 0;
    2740:	481f      	ldr	r0, [pc, #124]	; (27c0 <Reset_Handler+0xcc>)
    2742:	2100      	movs	r1, #0
    2744:	1814      	adds	r4, r2, r0
    2746:	6021      	str	r1, [r4, #0]
    2748:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    274a:	429a      	cmp	r2, r3
    274c:	d1fa      	bne.n	2744 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    274e:	4a1f      	ldr	r2, [pc, #124]	; (27cc <Reset_Handler+0xd8>)
    2750:	21ff      	movs	r1, #255	; 0xff
    2752:	4b1f      	ldr	r3, [pc, #124]	; (27d0 <Reset_Handler+0xdc>)
    2754:	438b      	bics	r3, r1
    2756:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    2758:	39fd      	subs	r1, #253	; 0xfd
    275a:	2390      	movs	r3, #144	; 0x90
    275c:	005b      	lsls	r3, r3, #1
    275e:	4a1d      	ldr	r2, [pc, #116]	; (27d4 <Reset_Handler+0xe0>)
    2760:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    2762:	481d      	ldr	r0, [pc, #116]	; (27d8 <Reset_Handler+0xe4>)
    2764:	78c3      	ldrb	r3, [r0, #3]
    2766:	2403      	movs	r4, #3
    2768:	43a3      	bics	r3, r4
    276a:	2202      	movs	r2, #2
    276c:	4313      	orrs	r3, r2
    276e:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    2770:	78c3      	ldrb	r3, [r0, #3]
    2772:	260c      	movs	r6, #12
    2774:	43b3      	bics	r3, r6
    2776:	2108      	movs	r1, #8
    2778:	430b      	orrs	r3, r1
    277a:	70c3      	strb	r3, [r0, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    277c:	4b17      	ldr	r3, [pc, #92]	; (27dc <Reset_Handler+0xe8>)
    277e:	7b98      	ldrb	r0, [r3, #14]
    2780:	2530      	movs	r5, #48	; 0x30
    2782:	43a8      	bics	r0, r5
    2784:	0005      	movs	r5, r0
    2786:	2020      	movs	r0, #32
    2788:	4328      	orrs	r0, r5
    278a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    278c:	7b98      	ldrb	r0, [r3, #14]
    278e:	43b0      	bics	r0, r6
    2790:	4301      	orrs	r1, r0
    2792:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    2794:	7b99      	ldrb	r1, [r3, #14]
    2796:	43a1      	bics	r1, r4
    2798:	430a      	orrs	r2, r1
    279a:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    279c:	4a10      	ldr	r2, [pc, #64]	; (27e0 <Reset_Handler+0xec>)
    279e:	6851      	ldr	r1, [r2, #4]
    27a0:	2380      	movs	r3, #128	; 0x80
    27a2:	430b      	orrs	r3, r1
    27a4:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    27a6:	4b0f      	ldr	r3, [pc, #60]	; (27e4 <Reset_Handler+0xf0>)
    27a8:	4798      	blx	r3

        /* Branch to main function */
        main();
    27aa:	4b0f      	ldr	r3, [pc, #60]	; (27e8 <Reset_Handler+0xf4>)
    27ac:	4798      	blx	r3
    27ae:	e7fe      	b.n	27ae <Reset_Handler+0xba>
    27b0:	20000000 	.word	0x20000000
    27b4:	00008000 	.word	0x00008000
    27b8:	20000070 	.word	0x20000070
    27bc:	2000098c 	.word	0x2000098c
    27c0:	20000070 	.word	0x20000070
    27c4:	20000004 	.word	0x20000004
    27c8:	20000074 	.word	0x20000074
    27cc:	e000ed00 	.word	0xe000ed00
    27d0:	00000000 	.word	0x00000000
    27d4:	41007000 	.word	0x41007000
    27d8:	41005000 	.word	0x41005000
    27dc:	41004800 	.word	0x41004800
    27e0:	41004000 	.word	0x41004000
    27e4:	00006c41 	.word	0x00006c41
    27e8:	0000500d 	.word	0x0000500d

000027ec <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    27ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    27ee:	4647      	mov	r7, r8
    27f0:	b480      	push	{r7}
    27f2:	000c      	movs	r4, r1
    27f4:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    27f6:	2800      	cmp	r0, #0
    27f8:	d10d      	bne.n	2816 <_read+0x2a>
		return -1;
	}

	for (; len > 0; --len) {
    27fa:	2a00      	cmp	r2, #0
    27fc:	dd0e      	ble.n	281c <_read+0x30>
    27fe:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    2800:	4e08      	ldr	r6, [pc, #32]	; (2824 <_read+0x38>)
    2802:	4d09      	ldr	r5, [pc, #36]	; (2828 <_read+0x3c>)
    2804:	6830      	ldr	r0, [r6, #0]
    2806:	0021      	movs	r1, r4
    2808:	682b      	ldr	r3, [r5, #0]
    280a:	4798      	blx	r3
		ptr++;
    280c:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
    280e:	42a7      	cmp	r7, r4
    2810:	d1f8      	bne.n	2804 <_read+0x18>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
    2812:	4640      	mov	r0, r8
    2814:	e003      	b.n	281e <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
    2816:	2001      	movs	r0, #1
    2818:	4240      	negs	r0, r0
    281a:	e000      	b.n	281e <_read+0x32>
	}

	for (; len > 0; --len) {
    281c:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
    281e:	bc04      	pop	{r2}
    2820:	4690      	mov	r8, r2
    2822:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2824:	20000858 	.word	0x20000858
    2828:	20000850 	.word	0x20000850

0000282c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    282c:	b5f0      	push	{r4, r5, r6, r7, lr}
    282e:	4647      	mov	r7, r8
    2830:	b480      	push	{r7}
    2832:	000e      	movs	r6, r1
    2834:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    2836:	3801      	subs	r0, #1
    2838:	2802      	cmp	r0, #2
    283a:	d811      	bhi.n	2860 <_write+0x34>
		return -1;
	}

	for (; len != 0; --len) {
    283c:	2a00      	cmp	r2, #0
    283e:	d012      	beq.n	2866 <_write+0x3a>
    2840:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    2842:	4b0c      	ldr	r3, [pc, #48]	; (2874 <_write+0x48>)
    2844:	4698      	mov	r8, r3
    2846:	4f0c      	ldr	r7, [pc, #48]	; (2878 <_write+0x4c>)
    2848:	4643      	mov	r3, r8
    284a:	6818      	ldr	r0, [r3, #0]
    284c:	5d31      	ldrb	r1, [r6, r4]
    284e:	683b      	ldr	r3, [r7, #0]
    2850:	4798      	blx	r3
    2852:	2800      	cmp	r0, #0
    2854:	db09      	blt.n	286a <_write+0x3e>
			return -1;
		}
		++nChars;
    2856:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
    2858:	42a5      	cmp	r5, r4
    285a:	d1f5      	bne.n	2848 <_write+0x1c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
    285c:	0020      	movs	r0, r4
    285e:	e006      	b.n	286e <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
    2860:	2001      	movs	r0, #1
    2862:	4240      	negs	r0, r0
    2864:	e003      	b.n	286e <_write+0x42>
	}

	for (; len != 0; --len) {
    2866:	2000      	movs	r0, #0
    2868:	e001      	b.n	286e <_write+0x42>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
    286a:	2001      	movs	r0, #1
    286c:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
    286e:	bc04      	pop	{r2}
    2870:	4690      	mov	r8, r2
    2872:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2874:	20000858 	.word	0x20000858
    2878:	20000854 	.word	0x20000854

0000287c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    287c:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    287e:	4a06      	ldr	r2, [pc, #24]	; (2898 <_sbrk+0x1c>)
    2880:	6812      	ldr	r2, [r2, #0]
    2882:	2a00      	cmp	r2, #0
    2884:	d102      	bne.n	288c <_sbrk+0x10>
		heap = (unsigned char *)&_end;
    2886:	4905      	ldr	r1, [pc, #20]	; (289c <_sbrk+0x20>)
    2888:	4a03      	ldr	r2, [pc, #12]	; (2898 <_sbrk+0x1c>)
    288a:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
    288c:	4a02      	ldr	r2, [pc, #8]	; (2898 <_sbrk+0x1c>)
    288e:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    2890:	18c3      	adds	r3, r0, r3
    2892:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    2894:	4770      	bx	lr
    2896:	46c0      	nop			; (mov r8, r8)
    2898:	200000c8 	.word	0x200000c8
    289c:	20002990 	.word	0x20002990

000028a0 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    28a0:	2001      	movs	r0, #1
    28a2:	4240      	negs	r0, r0
    28a4:	4770      	bx	lr
    28a6:	46c0      	nop			; (mov r8, r8)

000028a8 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    28a8:	2380      	movs	r3, #128	; 0x80
    28aa:	019b      	lsls	r3, r3, #6
    28ac:	604b      	str	r3, [r1, #4]

	return 0;
}
    28ae:	2000      	movs	r0, #0
    28b0:	4770      	bx	lr
    28b2:	46c0      	nop			; (mov r8, r8)

000028b4 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    28b4:	2001      	movs	r0, #1
    28b6:	4770      	bx	lr

000028b8 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    28b8:	2000      	movs	r0, #0
    28ba:	4770      	bx	lr

000028bc <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    28bc:	b570      	push	{r4, r5, r6, lr}
    28be:	b082      	sub	sp, #8
    28c0:	0005      	movs	r5, r0
    28c2:	000e      	movs	r6, r1
	uint16_t temp = 0;
    28c4:	2200      	movs	r2, #0
    28c6:	466b      	mov	r3, sp
    28c8:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    28ca:	4c06      	ldr	r4, [pc, #24]	; (28e4 <usart_serial_getchar+0x28>)
    28cc:	466b      	mov	r3, sp
    28ce:	1d99      	adds	r1, r3, #6
    28d0:	0028      	movs	r0, r5
    28d2:	47a0      	blx	r4
    28d4:	2800      	cmp	r0, #0
    28d6:	d1f9      	bne.n	28cc <usart_serial_getchar+0x10>

	*c = temp;
    28d8:	466b      	mov	r3, sp
    28da:	3306      	adds	r3, #6
    28dc:	881b      	ldrh	r3, [r3, #0]
    28de:	7033      	strb	r3, [r6, #0]
}
    28e0:	b002      	add	sp, #8
    28e2:	bd70      	pop	{r4, r5, r6, pc}
    28e4:	000017ad 	.word	0x000017ad

000028e8 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    28e8:	b570      	push	{r4, r5, r6, lr}
    28ea:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    28ec:	b28c      	uxth	r4, r1
    28ee:	4e03      	ldr	r6, [pc, #12]	; (28fc <usart_serial_putchar+0x14>)
    28f0:	0021      	movs	r1, r4
    28f2:	0028      	movs	r0, r5
    28f4:	47b0      	blx	r6
    28f6:	2800      	cmp	r0, #0
    28f8:	d1fa      	bne.n	28f0 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
    28fa:	bd70      	pop	{r4, r5, r6, pc}
    28fc:	00001781 	.word	0x00001781

00002900 <USART_HOST_ISR_VECT>:
#if SAMD || SAMR21 || SAML21
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
    2900:	b510      	push	{r4, lr}
    2902:	b082      	sub	sp, #8
static inline enum status_code usart_serial_read_packet(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
	return usart_read_buffer_wait(module, rx_data, length);
    2904:	466b      	mov	r3, sp
    2906:	1ddc      	adds	r4, r3, #7
    2908:	2201      	movs	r2, #1
    290a:	0021      	movs	r1, r4
    290c:	480f      	ldr	r0, [pc, #60]	; (294c <USART_HOST_ISR_VECT+0x4c>)
    290e:	4b10      	ldr	r3, [pc, #64]	; (2950 <USART_HOST_ISR_VECT+0x50>)
    2910:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    2912:	b672      	cpsid	i
    2914:	f3bf 8f5f 	dmb	sy
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
    2918:	2200      	movs	r2, #0
    291a:	4b0e      	ldr	r3, [pc, #56]	; (2954 <USART_HOST_ISR_VECT+0x54>)
    291c:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
    291e:	4b0e      	ldr	r3, [pc, #56]	; (2958 <USART_HOST_ISR_VECT+0x58>)
    2920:	781b      	ldrb	r3, [r3, #0]
    2922:	7821      	ldrb	r1, [r4, #0]
    2924:	4a0d      	ldr	r2, [pc, #52]	; (295c <USART_HOST_ISR_VECT+0x5c>)
    2926:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
    2928:	2b9b      	cmp	r3, #155	; 0x9b
    292a:	d103      	bne.n	2934 <USART_HOST_ISR_VECT+0x34>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
    292c:	2200      	movs	r2, #0
    292e:	4b0a      	ldr	r3, [pc, #40]	; (2958 <USART_HOST_ISR_VECT+0x58>)
    2930:	701a      	strb	r2, [r3, #0]
    2932:	e002      	b.n	293a <USART_HOST_ISR_VECT+0x3a>
	} else {
		serial_rx_buf_tail++;
    2934:	3301      	adds	r3, #1
    2936:	4a08      	ldr	r2, [pc, #32]	; (2958 <USART_HOST_ISR_VECT+0x58>)
    2938:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
    293a:	2201      	movs	r2, #1
    293c:	4b05      	ldr	r3, [pc, #20]	; (2954 <USART_HOST_ISR_VECT+0x54>)
    293e:	701a      	strb	r2, [r3, #0]
    2940:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    2944:	b662      	cpsie	i
}
    2946:	b002      	add	sp, #8
    2948:	bd10      	pop	{r4, pc}
    294a:	46c0      	nop			; (mov r8, r8)
    294c:	20000168 	.word	0x20000168
    2950:	0000181d 	.word	0x0000181d
    2954:	20000008 	.word	0x20000008
    2958:	2000019c 	.word	0x2000019c
    295c:	200000cc 	.word	0x200000cc

00002960 <sio2host_init>:
static uint8_t serial_rx_count;

/* === IMPLEMENTATION ====================================================== */

void sio2host_init(void)
{
    2960:	b5f0      	push	{r4, r5, r6, r7, lr}
    2962:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    2964:	2380      	movs	r3, #128	; 0x80
    2966:	05db      	lsls	r3, r3, #23
    2968:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    296a:	2300      	movs	r3, #0
    296c:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    296e:	22ff      	movs	r2, #255	; 0xff
    2970:	4669      	mov	r1, sp
    2972:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    2974:	2200      	movs	r2, #0
    2976:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    2978:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
    297a:	2196      	movs	r1, #150	; 0x96
    297c:	0189      	lsls	r1, r1, #6
    297e:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
    2980:	2401      	movs	r4, #1
    2982:	2124      	movs	r1, #36	; 0x24
    2984:	4668      	mov	r0, sp
    2986:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    2988:	3101      	adds	r1, #1
    298a:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    298c:	3101      	adds	r1, #1
    298e:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    2990:	3101      	adds	r1, #1
    2992:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    2994:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    2996:	3105      	adds	r1, #5
    2998:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    299a:	3101      	adds	r1, #1
    299c:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    299e:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    29a0:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    29a2:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    29a4:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    29a6:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    29a8:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    29aa:	2313      	movs	r3, #19
    29ac:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    29ae:	7742      	strb	r2, [r0, #29]
#if SAMD || SAMR21 || SAML21
	struct usart_config host_uart_config;
	/* Configure USART for unit test output */
	usart_get_config_defaults(&host_uart_config);
	host_uart_config.mux_setting = HOST_SERCOM_MUX_SETTING;
    29b0:	2380      	movs	r3, #128	; 0x80
    29b2:	035b      	lsls	r3, r3, #13
    29b4:	9303      	str	r3, [sp, #12]

	host_uart_config.pinmux_pad0 = HOST_SERCOM_PINMUX_PAD0;
    29b6:	4b2e      	ldr	r3, [pc, #184]	; (2a70 <sio2host_init+0x110>)
    29b8:	930c      	str	r3, [sp, #48]	; 0x30
	host_uart_config.pinmux_pad1 = HOST_SERCOM_PINMUX_PAD1;
    29ba:	4b2e      	ldr	r3, [pc, #184]	; (2a74 <sio2host_init+0x114>)
    29bc:	930d      	str	r3, [sp, #52]	; 0x34
	host_uart_config.pinmux_pad2 = HOST_SERCOM_PINMUX_PAD2;
    29be:	2301      	movs	r3, #1
    29c0:	425b      	negs	r3, r3
    29c2:	930e      	str	r3, [sp, #56]	; 0x38
	host_uart_config.pinmux_pad3 = HOST_SERCOM_PINMUX_PAD3;
    29c4:	930f      	str	r3, [sp, #60]	; 0x3c
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    29c6:	4d2c      	ldr	r5, [pc, #176]	; (2a78 <sio2host_init+0x118>)
    29c8:	4b2c      	ldr	r3, [pc, #176]	; (2a7c <sio2host_init+0x11c>)
    29ca:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    29cc:	4a2c      	ldr	r2, [pc, #176]	; (2a80 <sio2host_init+0x120>)
    29ce:	4b2d      	ldr	r3, [pc, #180]	; (2a84 <sio2host_init+0x124>)
    29d0:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    29d2:	4a2d      	ldr	r2, [pc, #180]	; (2a88 <sio2host_init+0x128>)
    29d4:	4b2d      	ldr	r3, [pc, #180]	; (2a8c <sio2host_init+0x12c>)
    29d6:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
    29d8:	466a      	mov	r2, sp
    29da:	492d      	ldr	r1, [pc, #180]	; (2a90 <sio2host_init+0x130>)
    29dc:	0028      	movs	r0, r5
    29de:	4b2d      	ldr	r3, [pc, #180]	; (2a94 <sio2host_init+0x134>)
    29e0:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    29e2:	4f2d      	ldr	r7, [pc, #180]	; (2a98 <sio2host_init+0x138>)
    29e4:	683b      	ldr	r3, [r7, #0]
    29e6:	6898      	ldr	r0, [r3, #8]
    29e8:	2100      	movs	r1, #0
    29ea:	4e2c      	ldr	r6, [pc, #176]	; (2a9c <sio2host_init+0x13c>)
    29ec:	47b0      	blx	r6
	setbuf(stdin, NULL);
    29ee:	683b      	ldr	r3, [r7, #0]
    29f0:	6858      	ldr	r0, [r3, #4]
    29f2:	2100      	movs	r1, #0
    29f4:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    29f6:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    29f8:	0030      	movs	r0, r6
    29fa:	4b29      	ldr	r3, [pc, #164]	; (2aa0 <sio2host_init+0x140>)
    29fc:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    29fe:	231f      	movs	r3, #31
    2a00:	4018      	ands	r0, r3
    2a02:	4084      	lsls	r4, r0
    2a04:	4b27      	ldr	r3, [pc, #156]	; (2aa4 <sio2host_init+0x144>)
    2a06:	601c      	str	r4, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    2a08:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    2a0a:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    2a0c:	2b00      	cmp	r3, #0
    2a0e:	d1fc      	bne.n	2a0a <sio2host_init+0xaa>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    2a10:	6832      	ldr	r2, [r6, #0]
    2a12:	3302      	adds	r3, #2
    2a14:	4313      	orrs	r3, r2
    2a16:	6033      	str	r3, [r6, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2a18:	4b17      	ldr	r3, [pc, #92]	; (2a78 <sio2host_init+0x118>)
    2a1a:	681b      	ldr	r3, [r3, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    2a1c:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    2a1e:	2a00      	cmp	r2, #0
    2a20:	d1fc      	bne.n	2a1c <sio2host_init+0xbc>
			module->receiver_enabled = true;
			break;

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    2a22:	685a      	ldr	r2, [r3, #4]
    2a24:	2180      	movs	r1, #128	; 0x80
    2a26:	0249      	lsls	r1, r1, #9
    2a28:	430a      	orrs	r2, r1
    2a2a:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
    2a2c:	2101      	movs	r1, #1
    2a2e:	4a12      	ldr	r2, [pc, #72]	; (2a78 <sio2host_init+0x118>)
    2a30:	71d1      	strb	r1, [r2, #7]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    2a32:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    2a34:	2a00      	cmp	r2, #0
    2a36:	d1fc      	bne.n	2a32 <sio2host_init+0xd2>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    2a38:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    2a3a:	2a00      	cmp	r2, #0
    2a3c:	d1fc      	bne.n	2a38 <sio2host_init+0xd8>
	_usart_wait_for_sync(module);

	switch (transceiver_type) {
		case USART_TRANSCEIVER_RX:
			/* Enable RX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
    2a3e:	685a      	ldr	r2, [r3, #4]
    2a40:	2180      	movs	r1, #128	; 0x80
    2a42:	0289      	lsls	r1, r1, #10
    2a44:	430a      	orrs	r2, r1
    2a46:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
    2a48:	2101      	movs	r1, #1
    2a4a:	4a0b      	ldr	r2, [pc, #44]	; (2a78 <sio2host_init+0x118>)
    2a4c:	7191      	strb	r1, [r2, #6]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    2a4e:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    2a50:	2a00      	cmp	r2, #0
    2a52:	d1fc      	bne.n	2a4e <sio2host_init+0xee>
	usart_enable_transceiver(&host_uart_module, USART_TRANSCEIVER_TX);
	usart_enable_transceiver(&host_uart_module, USART_TRANSCEIVER_RX);
#else
	stdio_serial_init(USART_HOST, &usart_serial_options);
#endif
	USART_HOST_RX_ISR_ENABLE();
    2a54:	4914      	ldr	r1, [pc, #80]	; (2aa8 <sio2host_init+0x148>)
    2a56:	2000      	movs	r0, #0
    2a58:	4b14      	ldr	r3, [pc, #80]	; (2aac <sio2host_init+0x14c>)
    2a5a:	4798      	blx	r3
    2a5c:	2204      	movs	r2, #4
    2a5e:	4b0c      	ldr	r3, [pc, #48]	; (2a90 <sio2host_init+0x130>)
    2a60:	759a      	strb	r2, [r3, #22]
    2a62:	32fd      	adds	r2, #253	; 0xfd
    2a64:	32ff      	adds	r2, #255	; 0xff
    2a66:	4b0f      	ldr	r3, [pc, #60]	; (2aa4 <sio2host_init+0x144>)
    2a68:	601a      	str	r2, [r3, #0]
}
    2a6a:	b011      	add	sp, #68	; 0x44
    2a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a6e:	46c0      	nop			; (mov r8, r8)
    2a70:	00040003 	.word	0x00040003
    2a74:	00050003 	.word	0x00050003
    2a78:	20000168 	.word	0x20000168
    2a7c:	20000858 	.word	0x20000858
    2a80:	000028e9 	.word	0x000028e9
    2a84:	20000854 	.word	0x20000854
    2a88:	000028bd 	.word	0x000028bd
    2a8c:	20000850 	.word	0x20000850
    2a90:	42000800 	.word	0x42000800
    2a94:	00001449 	.word	0x00001449
    2a98:	2000006c 	.word	0x2000006c
    2a9c:	00006e35 	.word	0x00006e35
    2aa0:	00001021 	.word	0x00001021
    2aa4:	e000e100 	.word	0xe000e100
    2aa8:	00002901 	.word	0x00002901
    2aac:	00000fe5 	.word	0x00000fe5

00002ab0 <NWK_Init>:

/*************************************************************************//**
*  @brief Initializes all network layer modules
*****************************************************************************/
void NWK_Init(void)
{
    2ab0:	b510      	push	{r4, lr}
	nwkIb.nwkSeqNum = 0;
    2ab2:	4a0d      	ldr	r2, [pc, #52]	; (2ae8 <NWK_Init+0x38>)
    2ab4:	2300      	movs	r3, #0
    2ab6:	7113      	strb	r3, [r2, #4]
	nwkIb.macSeqNum = 0;
    2ab8:	7153      	strb	r3, [r2, #5]
	nwkIb.addr = 0;
    2aba:	8013      	strh	r3, [r2, #0]
	nwkIb.lock = 0;
    2abc:	2158      	movs	r1, #88	; 0x58
    2abe:	5253      	strh	r3, [r2, r1]
    2ac0:	0013      	movs	r3, r2
    2ac2:	3240      	adds	r2, #64	; 0x40

	for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++) {
		nwkIb.endpoint[i] = NULL;
    2ac4:	2100      	movs	r1, #0
    2ac6:	6099      	str	r1, [r3, #8]
    2ac8:	3304      	adds	r3, #4
	nwkIb.nwkSeqNum = 0;
	nwkIb.macSeqNum = 0;
	nwkIb.addr = 0;
	nwkIb.lock = 0;

	for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++) {
    2aca:	4293      	cmp	r3, r2
    2acc:	d1fb      	bne.n	2ac6 <NWK_Init+0x16>
		nwkIb.endpoint[i] = NULL;
	}

	nwkTxInit();
    2ace:	4b07      	ldr	r3, [pc, #28]	; (2aec <NWK_Init+0x3c>)
    2ad0:	4798      	blx	r3
	nwkRxInit();
    2ad2:	4b07      	ldr	r3, [pc, #28]	; (2af0 <NWK_Init+0x40>)
    2ad4:	4798      	blx	r3
	nwkFrameInit();
    2ad6:	4b07      	ldr	r3, [pc, #28]	; (2af4 <NWK_Init+0x44>)
    2ad8:	4798      	blx	r3
	nwkDataReqInit();
    2ada:	4b07      	ldr	r3, [pc, #28]	; (2af8 <NWK_Init+0x48>)
    2adc:	4798      	blx	r3

#ifdef NWK_ENABLE_ROUTING
	nwkRouteInit();
    2ade:	4b07      	ldr	r3, [pc, #28]	; (2afc <NWK_Init+0x4c>)
    2ae0:	4798      	blx	r3
#endif

#ifdef NWK_ENABLE_SECURITY
	nwkSecurityInit();
    2ae2:	4b07      	ldr	r3, [pc, #28]	; (2b00 <NWK_Init+0x50>)
    2ae4:	4798      	blx	r3
#endif

#ifdef NWK_ENABLE_ROUTE_DISCOVERY
	nwkRouteDiscoveryInit();
#endif
}
    2ae6:	bd10      	pop	{r4, pc}
    2ae8:	2000085c 	.word	0x2000085c
    2aec:	00003985 	.word	0x00003985
    2af0:	000031cd 	.word	0x000031cd
    2af4:	00002cf1 	.word	0x00002cf1
    2af8:	00002ba1 	.word	0x00002ba1
    2afc:	00002de5 	.word	0x00002de5
    2b00:	00003661 	.word	0x00003661

00002b04 <NWK_SetAddr>:
/*************************************************************************//**
*  @brief Sets network address of the node
*  @param[in] addr Adddress to set
*****************************************************************************/
void NWK_SetAddr(uint16_t addr)
{
    2b04:	b510      	push	{r4, lr}
	nwkIb.addr = addr;
    2b06:	4b02      	ldr	r3, [pc, #8]	; (2b10 <NWK_SetAddr+0xc>)
    2b08:	8018      	strh	r0, [r3, #0]
	PHY_SetShortAddr(addr);
    2b0a:	4b02      	ldr	r3, [pc, #8]	; (2b14 <NWK_SetAddr+0x10>)
    2b0c:	4798      	blx	r3
}
    2b0e:	bd10      	pop	{r4, pc}
    2b10:	2000085c 	.word	0x2000085c
    2b14:	00003db1 	.word	0x00003db1

00002b18 <NWK_SetPanId>:
/*************************************************************************//**
*  @brief Sets network identifier (PAN) of the node
*  @param[in] panId PAN ID to set
*****************************************************************************/
void NWK_SetPanId(uint16_t panId)
{
    2b18:	b510      	push	{r4, lr}
	nwkIb.panId = panId;
    2b1a:	4b02      	ldr	r3, [pc, #8]	; (2b24 <NWK_SetPanId+0xc>)
    2b1c:	8058      	strh	r0, [r3, #2]
	PHY_SetPanId(panId);
    2b1e:	4b02      	ldr	r3, [pc, #8]	; (2b28 <NWK_SetPanId+0x10>)
    2b20:	4798      	blx	r3
}
    2b22:	bd10      	pop	{r4, pc}
    2b24:	2000085c 	.word	0x2000085c
    2b28:	00003d91 	.word	0x00003d91

00002b2c <NWK_OpenEndpoint>:
*  @param[in] id Endpoint index (1-15)
*  @param[in] handler Pointer to the callback function
*****************************************************************************/
void NWK_OpenEndpoint(uint8_t id, bool (*handler)(NWK_DataInd_t *ind))
{
	nwkIb.endpoint[id] = handler;
    2b2c:	3002      	adds	r0, #2
    2b2e:	0080      	lsls	r0, r0, #2
    2b30:	4b01      	ldr	r3, [pc, #4]	; (2b38 <NWK_OpenEndpoint+0xc>)
    2b32:	50c1      	str	r1, [r0, r3]
}
    2b34:	4770      	bx	lr
    2b36:	46c0      	nop			; (mov r8, r8)
    2b38:	2000085c 	.word	0x2000085c

00002b3c <NWK_TaskHandler>:

/*************************************************************************//**
*  @brief Network layer task handler
*****************************************************************************/
void NWK_TaskHandler(void)
{
    2b3c:	b510      	push	{r4, lr}
	nwkRxTaskHandler();
    2b3e:	4b04      	ldr	r3, [pc, #16]	; (2b50 <NWK_TaskHandler+0x14>)
    2b40:	4798      	blx	r3
	nwkTxTaskHandler();
    2b42:	4b04      	ldr	r3, [pc, #16]	; (2b54 <NWK_TaskHandler+0x18>)
    2b44:	4798      	blx	r3
	nwkDataReqTaskHandler();
    2b46:	4b04      	ldr	r3, [pc, #16]	; (2b58 <NWK_TaskHandler+0x1c>)
    2b48:	4798      	blx	r3
#ifdef NWK_ENABLE_SECURITY
	nwkSecurityTaskHandler();
    2b4a:	4b04      	ldr	r3, [pc, #16]	; (2b5c <NWK_TaskHandler+0x20>)
    2b4c:	4798      	blx	r3
#endif
}
    2b4e:	bd10      	pop	{r4, pc}
    2b50:	0000326d 	.word	0x0000326d
    2b54:	00003b85 	.word	0x00003b85
    2b58:	00002bad 	.word	0x00002bad
    2b5c:	00003741 	.word	0x00003741

00002b60 <nwkDataReqTxConf>:
/*************************************************************************//**
*  @brief Frame transmission confirmation handler
*  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
    2b60:	b510      	push	{r4, lr}
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    2b62:	4b0d      	ldr	r3, [pc, #52]	; (2b98 <nwkDataReqTxConf+0x38>)
    2b64:	681b      	ldr	r3, [r3, #0]
    2b66:	2b00      	cmp	r3, #0
    2b68:	d012      	beq.n	2b90 <nwkDataReqTxConf+0x30>
		if (req->frame == frame) {
    2b6a:	685a      	ldr	r2, [r3, #4]
    2b6c:	4290      	cmp	r0, r2
    2b6e:	d10c      	bne.n	2b8a <nwkDataReqTxConf+0x2a>
    2b70:	e002      	b.n	2b78 <nwkDataReqTxConf+0x18>
    2b72:	685a      	ldr	r2, [r3, #4]
    2b74:	4282      	cmp	r2, r0
    2b76:	d108      	bne.n	2b8a <nwkDataReqTxConf+0x2a>
			req->status = frame->tx.status;
    2b78:	2285      	movs	r2, #133	; 0x85
    2b7a:	5c82      	ldrb	r2, [r0, r2]
    2b7c:	771a      	strb	r2, [r3, #28]
			req->control = frame->tx.control;
    2b7e:	2288      	movs	r2, #136	; 0x88
    2b80:	5c82      	ldrb	r2, [r0, r2]
    2b82:	775a      	strb	r2, [r3, #29]
			req->state = NWK_DATA_REQ_STATE_CONFIRM;
    2b84:	2202      	movs	r2, #2
    2b86:	721a      	strb	r2, [r3, #8]
			break;
    2b88:	e002      	b.n	2b90 <nwkDataReqTxConf+0x30>
*  @brief Frame transmission confirmation handler
*  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    2b8a:	681b      	ldr	r3, [r3, #0]
    2b8c:	2b00      	cmp	r3, #0
    2b8e:	d1f0      	bne.n	2b72 <nwkDataReqTxConf+0x12>
			req->state = NWK_DATA_REQ_STATE_CONFIRM;
			break;
		}
	}

	nwkFrameFree(frame);
    2b90:	4b02      	ldr	r3, [pc, #8]	; (2b9c <nwkDataReqTxConf+0x3c>)
    2b92:	4798      	blx	r3
}
    2b94:	bd10      	pop	{r4, pc}
    2b96:	46c0      	nop			; (mov r8, r8)
    2b98:	200001a0 	.word	0x200001a0
    2b9c:	00002d75 	.word	0x00002d75

00002ba0 <nwkDataReqInit>:
/*************************************************************************//**
*  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
	nwkDataReqQueue = NULL;
    2ba0:	2200      	movs	r2, #0
    2ba2:	4b01      	ldr	r3, [pc, #4]	; (2ba8 <nwkDataReqInit+0x8>)
    2ba4:	601a      	str	r2, [r3, #0]
}
    2ba6:	4770      	bx	lr
    2ba8:	200001a0 	.word	0x200001a0

00002bac <nwkDataReqTaskHandler>:

/*************************************************************************//**
*  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
    2bac:	b570      	push	{r4, r5, r6, lr}
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    2bae:	4b4a      	ldr	r3, [pc, #296]	; (2cd8 <nwkDataReqTaskHandler+0x12c>)
    2bb0:	681a      	ldr	r2, [r3, #0]
    2bb2:	2a00      	cmp	r2, #0
    2bb4:	d100      	bne.n	2bb8 <nwkDataReqTaskHandler+0xc>
    2bb6:	e08e      	b.n	2cd6 <nwkDataReqTaskHandler+0x12a>
    2bb8:	0014      	movs	r4, r2
		switch (req->state) {
    2bba:	7a23      	ldrb	r3, [r4, #8]
    2bbc:	2b00      	cmp	r3, #0
    2bbe:	d002      	beq.n	2bc6 <nwkDataReqTaskHandler+0x1a>
    2bc0:	2b02      	cmp	r3, #2
    2bc2:	d06f      	beq.n	2ca4 <nwkDataReqTaskHandler+0xf8>
    2bc4:	e083      	b.n	2cce <nwkDataReqTaskHandler+0x122>
*****************************************************************************/
static void nwkDataReqSendFrame(NWK_DataReq_t *req)
{
	NwkFrame_t *frame;

	if (NULL == (frame = nwkFrameAlloc())) {
    2bc6:	4b45      	ldr	r3, [pc, #276]	; (2cdc <nwkDataReqTaskHandler+0x130>)
    2bc8:	4798      	blx	r3
    2bca:	1e05      	subs	r5, r0, #0
    2bcc:	d103      	bne.n	2bd6 <nwkDataReqTaskHandler+0x2a>
		req->state = NWK_DATA_REQ_STATE_CONFIRM;
    2bce:	2302      	movs	r3, #2
    2bd0:	7223      	strb	r3, [r4, #8]
		req->status = NWK_OUT_OF_MEMORY_STATUS;
    2bd2:	7723      	strb	r3, [r4, #28]
    2bd4:	e07f      	b.n	2cd6 <nwkDataReqTaskHandler+0x12a>
		return;
	}

	req->frame = frame;
    2bd6:	6060      	str	r0, [r4, #4]
	req->state = NWK_DATA_REQ_STATE_WAIT_CONF;
    2bd8:	2601      	movs	r6, #1
    2bda:	7226      	strb	r6, [r4, #8]

	frame->tx.confirm = nwkDataReqTxConf;
    2bdc:	4b40      	ldr	r3, [pc, #256]	; (2ce0 <nwkDataReqTaskHandler+0x134>)
    2bde:	2289      	movs	r2, #137	; 0x89
    2be0:	5483      	strb	r3, [r0, r2]
    2be2:	0a19      	lsrs	r1, r3, #8
    2be4:	0002      	movs	r2, r0
    2be6:	3289      	adds	r2, #137	; 0x89
    2be8:	7051      	strb	r1, [r2, #1]
    2bea:	0c19      	lsrs	r1, r3, #16
    2bec:	7091      	strb	r1, [r2, #2]
    2bee:	0e1b      	lsrs	r3, r3, #24
    2bf0:	70d3      	strb	r3, [r2, #3]
	frame->tx.control = req->options &
    2bf2:	7ba3      	ldrb	r3, [r4, #14]
    2bf4:	089b      	lsrs	r3, r3, #2
    2bf6:	2201      	movs	r2, #1
    2bf8:	4013      	ands	r3, r2
    2bfa:	2188      	movs	r1, #136	; 0x88
    2bfc:	5443      	strb	r3, [r0, r1]
			NWK_OPT_BROADCAST_PAN_ID ?
			NWK_TX_CONTROL_BROADCAST_PAN_ID
			: 0;

	frame->header.nwkFcf.ackRequest = req->options &
    2bfe:	7ba1      	ldrb	r1, [r4, #14]
    2c00:	4011      	ands	r1, r2
    2c02:	0008      	movs	r0, r1
    2c04:	7ae9      	ldrb	r1, [r5, #11]
    2c06:	43b1      	bics	r1, r6
    2c08:	4301      	orrs	r1, r0
    2c0a:	72e9      	strb	r1, [r5, #11]
			NWK_OPT_ACK_REQUEST ? 1 : 0;
	frame->header.nwkFcf.linkLocal = req->options &
    2c0c:	7ba1      	ldrb	r1, [r4, #14]
    2c0e:	08c9      	lsrs	r1, r1, #3
    2c10:	4011      	ands	r1, r2
    2c12:	0088      	lsls	r0, r1, #2
    2c14:	7ae9      	ldrb	r1, [r5, #11]
    2c16:	2304      	movs	r3, #4
    2c18:	4399      	bics	r1, r3
    2c1a:	4301      	orrs	r1, r0
    2c1c:	72e9      	strb	r1, [r5, #11]
			NWK_OPT_LINK_LOCAL ? 1 : 0;

#ifdef NWK_ENABLE_SECURITY
	frame->header.nwkFcf.security = req->options &
    2c1e:	7ba3      	ldrb	r3, [r4, #14]
    2c20:	085b      	lsrs	r3, r3, #1
    2c22:	4013      	ands	r3, r2
    2c24:	005a      	lsls	r2, r3, #1
    2c26:	b2cb      	uxtb	r3, r1
    2c28:	2102      	movs	r1, #2
    2c2a:	438b      	bics	r3, r1
    2c2c:	4313      	orrs	r3, r2
    2c2e:	72eb      	strb	r3, [r5, #11]
		frame->payload += sizeof(NwkFrameMulticastHeader_t);
		frame->size += sizeof(NwkFrameMulticastHeader_t);
	}
#endif

	frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    2c30:	4a2c      	ldr	r2, [pc, #176]	; (2ce4 <nwkDataReqTaskHandler+0x138>)
    2c32:	7913      	ldrb	r3, [r2, #4]
    2c34:	3301      	adds	r3, #1
    2c36:	b2db      	uxtb	r3, r3
    2c38:	7113      	strb	r3, [r2, #4]
    2c3a:	732b      	strb	r3, [r5, #12]
	frame->header.nwkSrcAddr = nwkIb.addr;
    2c3c:	7813      	ldrb	r3, [r2, #0]
    2c3e:	736b      	strb	r3, [r5, #13]
    2c40:	7853      	ldrb	r3, [r2, #1]
    2c42:	73ab      	strb	r3, [r5, #14]
	frame->header.nwkDstAddr = req->dstAddr;
    2c44:	8963      	ldrh	r3, [r4, #10]
    2c46:	7aa2      	ldrb	r2, [r4, #10]
    2c48:	73ea      	strb	r2, [r5, #15]
    2c4a:	0a1b      	lsrs	r3, r3, #8
    2c4c:	742b      	strb	r3, [r5, #16]
	frame->header.nwkSrcEndpoint = req->srcEndpoint;
    2c4e:	7b62      	ldrb	r2, [r4, #13]
    2c50:	200f      	movs	r0, #15
    2c52:	4002      	ands	r2, r0
    2c54:	0011      	movs	r1, r2
    2c56:	7c6a      	ldrb	r2, [r5, #17]
    2c58:	230f      	movs	r3, #15
    2c5a:	439a      	bics	r2, r3
    2c5c:	430a      	orrs	r2, r1
    2c5e:	746a      	strb	r2, [r5, #17]
	frame->header.nwkDstEndpoint = req->dstEndpoint;
    2c60:	7b22      	ldrb	r2, [r4, #12]
    2c62:	0112      	lsls	r2, r2, #4
    2c64:	7c6b      	ldrb	r3, [r5, #17]
    2c66:	4003      	ands	r3, r0
    2c68:	4313      	orrs	r3, r2
    2c6a:	746b      	strb	r3, [r5, #17]

	memcpy(frame->payload, req->data, req->size);
    2c6c:	2381      	movs	r3, #129	; 0x81
    2c6e:	5ce9      	ldrb	r1, [r5, r3]
    2c70:	3301      	adds	r3, #1
    2c72:	5ceb      	ldrb	r3, [r5, r3]
    2c74:	021b      	lsls	r3, r3, #8
    2c76:	430b      	orrs	r3, r1
    2c78:	001a      	movs	r2, r3
    2c7a:	2383      	movs	r3, #131	; 0x83
    2c7c:	5ce8      	ldrb	r0, [r5, r3]
    2c7e:	0400      	lsls	r0, r0, #16
    2c80:	0003      	movs	r3, r0
    2c82:	4313      	orrs	r3, r2
    2c84:	2284      	movs	r2, #132	; 0x84
    2c86:	5ca8      	ldrb	r0, [r5, r2]
    2c88:	0600      	lsls	r0, r0, #24
    2c8a:	4318      	orrs	r0, r3
    2c8c:	7d22      	ldrb	r2, [r4, #20]
    2c8e:	6921      	ldr	r1, [r4, #16]
    2c90:	4b15      	ldr	r3, [pc, #84]	; (2ce8 <nwkDataReqTaskHandler+0x13c>)
    2c92:	4798      	blx	r3
	frame->size += req->size;
    2c94:	786a      	ldrb	r2, [r5, #1]
    2c96:	7d23      	ldrb	r3, [r4, #20]
    2c98:	18d3      	adds	r3, r2, r3
    2c9a:	706b      	strb	r3, [r5, #1]

	nwkTxFrame(frame);
    2c9c:	0028      	movs	r0, r5
    2c9e:	4b13      	ldr	r3, [pc, #76]	; (2cec <nwkDataReqTaskHandler+0x140>)
    2ca0:	4798      	blx	r3
    2ca2:	e018      	b.n	2cd6 <nwkDataReqTaskHandler+0x12a>
*  @brief Confirms request @req to the application and remove it from the queue
*  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqConfirm(NWK_DataReq_t *req)
{
	if (nwkDataReqQueue == req) {
    2ca4:	42a2      	cmp	r2, r4
    2ca6:	d104      	bne.n	2cb2 <nwkDataReqTaskHandler+0x106>
		nwkDataReqQueue = nwkDataReqQueue->next;
    2ca8:	6812      	ldr	r2, [r2, #0]
    2caa:	4b0b      	ldr	r3, [pc, #44]	; (2cd8 <nwkDataReqTaskHandler+0x12c>)
    2cac:	601a      	str	r2, [r3, #0]
    2cae:	e005      	b.n	2cbc <nwkDataReqTaskHandler+0x110>
	} else {
		NWK_DataReq_t *prev = nwkDataReqQueue;
		while (prev->next != req) {
			prev = prev->next;
    2cb0:	001a      	movs	r2, r3
{
	if (nwkDataReqQueue == req) {
		nwkDataReqQueue = nwkDataReqQueue->next;
	} else {
		NWK_DataReq_t *prev = nwkDataReqQueue;
		while (prev->next != req) {
    2cb2:	6813      	ldr	r3, [r2, #0]
    2cb4:	42a3      	cmp	r3, r4
    2cb6:	d1fb      	bne.n	2cb0 <nwkDataReqTaskHandler+0x104>
			prev = prev->next;
		}
		prev->next = ((NWK_DataReq_t *)prev->next)->next;
    2cb8:	6823      	ldr	r3, [r4, #0]
    2cba:	6013      	str	r3, [r2, #0]
	}

	nwkIb.lock--;
    2cbc:	4909      	ldr	r1, [pc, #36]	; (2ce4 <nwkDataReqTaskHandler+0x138>)
    2cbe:	2258      	movs	r2, #88	; 0x58
    2cc0:	5a8b      	ldrh	r3, [r1, r2]
    2cc2:	3b01      	subs	r3, #1
    2cc4:	528b      	strh	r3, [r1, r2]
	req->confirm(req);
    2cc6:	69a3      	ldr	r3, [r4, #24]
    2cc8:	0020      	movs	r0, r4
    2cca:	4798      	blx	r3
    2ccc:	e003      	b.n	2cd6 <nwkDataReqTaskHandler+0x12a>
/*************************************************************************//**
*  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    2cce:	6824      	ldr	r4, [r4, #0]
    2cd0:	2c00      	cmp	r4, #0
    2cd2:	d000      	beq.n	2cd6 <nwkDataReqTaskHandler+0x12a>
    2cd4:	e771      	b.n	2bba <nwkDataReqTaskHandler+0xe>

		default:
			break;
		}
	}
}
    2cd6:	bd70      	pop	{r4, r5, r6, pc}
    2cd8:	200001a0 	.word	0x200001a0
    2cdc:	00002d05 	.word	0x00002d05
    2ce0:	00002b61 	.word	0x00002b61
    2ce4:	2000085c 	.word	0x2000085c
    2ce8:	00006c8d 	.word	0x00006c8d
    2cec:	000039b9 	.word	0x000039b9

00002cf0 <nwkFrameInit>:
*  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
		nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
    2cf0:	4b03      	ldr	r3, [pc, #12]	; (2d00 <nwkFrameInit+0x10>)
    2cf2:	2200      	movs	r2, #0
    2cf4:	701a      	strb	r2, [r3, #0]
    2cf6:	218d      	movs	r1, #141	; 0x8d
    2cf8:	545a      	strb	r2, [r3, r1]
    2cfa:	318d      	adds	r1, #141	; 0x8d
    2cfc:	545a      	strb	r2, [r3, r1]
	}
}
    2cfe:	4770      	bx	lr
    2d00:	200001a4 	.word	0x200001a4

00002d04 <nwkFrameAlloc>:
/*************************************************************************//**
*  @brief Allocates an empty frame from the buffer pool
*  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
    2d04:	b510      	push	{r4, lr}
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
		if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state) {
    2d06:	4b18      	ldr	r3, [pc, #96]	; (2d68 <nwkFrameAlloc+0x64>)
    2d08:	781b      	ldrb	r3, [r3, #0]
    2d0a:	2b00      	cmp	r3, #0
    2d0c:	d00e      	beq.n	2d2c <nwkFrameAlloc+0x28>
    2d0e:	238d      	movs	r3, #141	; 0x8d
    2d10:	4a15      	ldr	r2, [pc, #84]	; (2d68 <nwkFrameAlloc+0x64>)
    2d12:	5cd3      	ldrb	r3, [r2, r3]
    2d14:	2b00      	cmp	r3, #0
    2d16:	d007      	beq.n	2d28 <nwkFrameAlloc+0x24>
    2d18:	238d      	movs	r3, #141	; 0x8d
    2d1a:	005b      	lsls	r3, r3, #1
    2d1c:	5cd3      	ldrb	r3, [r2, r3]
					sizeof(NwkFrameHeader_t);
			nwkIb.lock++;
			return &nwkFrameFrames[i];
		}
	}
	return NULL;
    2d1e:	2400      	movs	r4, #0
*  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
		if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state) {
    2d20:	2b00      	cmp	r3, #0
    2d22:	d11f      	bne.n	2d64 <nwkFrameAlloc+0x60>
    2d24:	3402      	adds	r4, #2
    2d26:	e002      	b.n	2d2e <nwkFrameAlloc+0x2a>
    2d28:	2401      	movs	r4, #1
    2d2a:	e000      	b.n	2d2e <nwkFrameAlloc+0x2a>
    2d2c:	2400      	movs	r4, #0
			memset(&nwkFrameFrames[i], 0, sizeof(NwkFrame_t));
    2d2e:	238d      	movs	r3, #141	; 0x8d
    2d30:	435c      	muls	r4, r3
    2d32:	4b0d      	ldr	r3, [pc, #52]	; (2d68 <nwkFrameAlloc+0x64>)
    2d34:	191c      	adds	r4, r3, r4
    2d36:	228d      	movs	r2, #141	; 0x8d
    2d38:	2100      	movs	r1, #0
    2d3a:	0020      	movs	r0, r4
    2d3c:	4b0b      	ldr	r3, [pc, #44]	; (2d6c <nwkFrameAlloc+0x68>)
    2d3e:	4798      	blx	r3
			nwkFrameFrames[i].size = sizeof(NwkFrameHeader_t);
    2d40:	2310      	movs	r3, #16
    2d42:	7063      	strb	r3, [r4, #1]
			nwkFrameFrames[i].payload = nwkFrameFrames[i].data +
    2d44:	0023      	movs	r3, r4
    2d46:	3312      	adds	r3, #18
    2d48:	0022      	movs	r2, r4
    2d4a:	3281      	adds	r2, #129	; 0x81
    2d4c:	7013      	strb	r3, [r2, #0]
    2d4e:	0a19      	lsrs	r1, r3, #8
    2d50:	7051      	strb	r1, [r2, #1]
    2d52:	0c19      	lsrs	r1, r3, #16
    2d54:	7091      	strb	r1, [r2, #2]
    2d56:	0e1b      	lsrs	r3, r3, #24
    2d58:	70d3      	strb	r3, [r2, #3]
					sizeof(NwkFrameHeader_t);
			nwkIb.lock++;
    2d5a:	4905      	ldr	r1, [pc, #20]	; (2d70 <nwkFrameAlloc+0x6c>)
    2d5c:	2258      	movs	r2, #88	; 0x58
    2d5e:	5a8b      	ldrh	r3, [r1, r2]
    2d60:	3301      	adds	r3, #1
    2d62:	528b      	strh	r3, [r1, r2]
			return &nwkFrameFrames[i];
		}
	}
	return NULL;
}
    2d64:	0020      	movs	r0, r4
    2d66:	bd10      	pop	{r4, pc}
    2d68:	200001a4 	.word	0x200001a4
    2d6c:	00006c9f 	.word	0x00006c9f
    2d70:	2000085c 	.word	0x2000085c

00002d74 <nwkFrameFree>:
*  @brief Frees a @a frame and returns it to the buffer pool
*  @param[in] frame Pointer to the frame to be freed
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
	frame->state = NWK_FRAME_STATE_FREE;
    2d74:	2300      	movs	r3, #0
    2d76:	7003      	strb	r3, [r0, #0]
	nwkIb.lock--;
    2d78:	4902      	ldr	r1, [pc, #8]	; (2d84 <nwkFrameFree+0x10>)
    2d7a:	2258      	movs	r2, #88	; 0x58
    2d7c:	5a8b      	ldrh	r3, [r1, r2]
    2d7e:	3b01      	subs	r3, #1
    2d80:	528b      	strh	r3, [r1, r2]
}
    2d82:	4770      	bx	lr
    2d84:	2000085c 	.word	0x2000085c

00002d88 <nwkFrameNext>:
*  @param[in] frame Pointer to the current frame or @c NULL for the first frame
*  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
	if (NULL == frame) {
    2d88:	2800      	cmp	r0, #0
    2d8a:	d006      	beq.n	2d9a <nwkFrameNext+0x12>
		frame = nwkFrameFrames;
	} else {
		frame++;
    2d8c:	308d      	adds	r0, #141	; 0x8d
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    2d8e:	4b0c      	ldr	r3, [pc, #48]	; (2dc0 <nwkFrameNext+0x38>)
    2d90:	33a8      	adds	r3, #168	; 0xa8
    2d92:	33ff      	adds	r3, #255	; 0xff
    2d94:	4298      	cmp	r0, r3
    2d96:	d301      	bcc.n	2d9c <nwkFrameNext+0x14>
    2d98:	e00f      	b.n	2dba <nwkFrameNext+0x32>
*  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
	if (NULL == frame) {
		frame = nwkFrameFrames;
    2d9a:	4809      	ldr	r0, [pc, #36]	; (2dc0 <nwkFrameNext+0x38>)
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
		if (NWK_FRAME_STATE_FREE != frame->state) {
    2d9c:	7803      	ldrb	r3, [r0, #0]
    2d9e:	2b00      	cmp	r3, #0
    2da0:	d10c      	bne.n	2dbc <nwkFrameNext+0x34>
		frame = nwkFrameFrames;
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    2da2:	4a07      	ldr	r2, [pc, #28]	; (2dc0 <nwkFrameNext+0x38>)
    2da4:	32a8      	adds	r2, #168	; 0xa8
    2da6:	32ff      	adds	r2, #255	; 0xff
    2da8:	e002      	b.n	2db0 <nwkFrameNext+0x28>
		if (NWK_FRAME_STATE_FREE != frame->state) {
    2daa:	7803      	ldrb	r3, [r0, #0]
    2dac:	2b00      	cmp	r3, #0
    2dae:	d105      	bne.n	2dbc <nwkFrameNext+0x34>
		frame = nwkFrameFrames;
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    2db0:	308d      	adds	r0, #141	; 0x8d
    2db2:	4290      	cmp	r0, r2
    2db4:	d3f9      	bcc.n	2daa <nwkFrameNext+0x22>
		if (NWK_FRAME_STATE_FREE != frame->state) {
			return frame;
		}
	}

	return NULL;
    2db6:	2000      	movs	r0, #0
    2db8:	e000      	b.n	2dbc <nwkFrameNext+0x34>
    2dba:	2000      	movs	r0, #0
}
    2dbc:	4770      	bx	lr
    2dbe:	46c0      	nop			; (mov r8, r8)
    2dc0:	200001a4 	.word	0x200001a4

00002dc4 <nwkFrameCommandInit>:
*  @brief Sets default parameters for the the command @a frame
*  @param[in] frame Pointer to the command frame
*****************************************************************************/
void nwkFrameCommandInit(NwkFrame_t *frame)
{
	frame->tx.status = NWK_SUCCESS_STATUS;
    2dc4:	2200      	movs	r2, #0
    2dc6:	2385      	movs	r3, #133	; 0x85
    2dc8:	54c2      	strb	r2, [r0, r3]
	frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    2dca:	4a05      	ldr	r2, [pc, #20]	; (2de0 <nwkFrameCommandInit+0x1c>)
    2dcc:	7913      	ldrb	r3, [r2, #4]
    2dce:	3301      	adds	r3, #1
    2dd0:	b2db      	uxtb	r3, r3
    2dd2:	7113      	strb	r3, [r2, #4]
    2dd4:	7303      	strb	r3, [r0, #12]
	frame->header.nwkSrcAddr = nwkIb.addr;
    2dd6:	7813      	ldrb	r3, [r2, #0]
    2dd8:	7343      	strb	r3, [r0, #13]
    2dda:	7853      	ldrb	r3, [r2, #1]
    2ddc:	7383      	strb	r3, [r0, #14]
#ifdef NWK_ENABLE_SECURE_COMMANDS
	frame->header.nwkFcf.security = 1;
#endif
}
    2dde:	4770      	bx	lr
    2de0:	2000085c 	.word	0x2000085c

00002de4 <nwkRouteInit>:

/*************************************************************************//**
*  @brief Initializes the Routing module
*****************************************************************************/
void nwkRouteInit(void)
{
    2de4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2de6:	4b09      	ldr	r3, [pc, #36]	; (2e0c <nwkRouteInit+0x28>)
    2de8:	3302      	adds	r3, #2
    2dea:	2200      	movs	r2, #0
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
    2dec:	2701      	movs	r7, #1
    2dee:	427f      	negs	r7, r7
		nwkRouteTable[i].fixed = 0;
    2df0:	4c06      	ldr	r4, [pc, #24]	; (2e0c <nwkRouteInit+0x28>)
    2df2:	2601      	movs	r6, #1
		nwkRouteTable[i].rank = 0;
    2df4:	2500      	movs	r5, #0
*  @brief Initializes the Routing module
*****************************************************************************/
void nwkRouteInit(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
    2df6:	801f      	strh	r7, [r3, #0]
		nwkRouteTable[i].fixed = 0;
    2df8:	00d0      	lsls	r0, r2, #3
    2dfa:	5d01      	ldrb	r1, [r0, r4]
    2dfc:	43b1      	bics	r1, r6
    2dfe:	5501      	strb	r1, [r0, r4]
		nwkRouteTable[i].rank = 0;
    2e00:	711d      	strb	r5, [r3, #4]
    2e02:	3201      	adds	r2, #1
    2e04:	3308      	adds	r3, #8
/*************************************************************************//**
*  @brief Initializes the Routing module
*****************************************************************************/
void nwkRouteInit(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    2e06:	2a64      	cmp	r2, #100	; 0x64
    2e08:	d1f5      	bne.n	2df6 <nwkRouteInit+0x12>
		nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
		nwkRouteTable[i].fixed = 0;
		nwkRouteTable[i].rank = 0;
	}
}
    2e0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2e0c:	2000034c 	.word	0x2000034c

00002e10 <NWK_RouteFindEntry>:

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
    2e10:	b570      	push	{r4, r5, r6, lr}
    2e12:	4a0b      	ldr	r2, [pc, #44]	; (2e40 <NWK_RouteFindEntry+0x30>)
    2e14:	3202      	adds	r2, #2
    2e16:	2300      	movs	r3, #0
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		if (nwkRouteTable[i].dstAddr == dst &&
				nwkRouteTable[i].multicast == multicast) {
    2e18:	4e09      	ldr	r6, [pc, #36]	; (2e40 <NWK_RouteFindEntry+0x30>)
/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		if (nwkRouteTable[i].dstAddr == dst &&
    2e1a:	8814      	ldrh	r4, [r2, #0]
    2e1c:	4284      	cmp	r4, r0
    2e1e:	d109      	bne.n	2e34 <NWK_RouteFindEntry+0x24>
				nwkRouteTable[i].multicast == multicast) {
    2e20:	00dc      	lsls	r4, r3, #3
    2e22:	5da4      	ldrb	r4, [r4, r6]
    2e24:	07a4      	lsls	r4, r4, #30
/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		if (nwkRouteTable[i].dstAddr == dst &&
    2e26:	0fe4      	lsrs	r4, r4, #31
    2e28:	428c      	cmp	r4, r1
    2e2a:	d103      	bne.n	2e34 <NWK_RouteFindEntry+0x24>
				nwkRouteTable[i].multicast == multicast) {
			return &nwkRouteTable[i];
    2e2c:	00dd      	lsls	r5, r3, #3
    2e2e:	4804      	ldr	r0, [pc, #16]	; (2e40 <NWK_RouteFindEntry+0x30>)
    2e30:	1940      	adds	r0, r0, r5
    2e32:	e004      	b.n	2e3e <NWK_RouteFindEntry+0x2e>
    2e34:	3301      	adds	r3, #1
    2e36:	3208      	adds	r2, #8

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    2e38:	2b64      	cmp	r3, #100	; 0x64
    2e3a:	d1ee      	bne.n	2e1a <NWK_RouteFindEntry+0xa>
				nwkRouteTable[i].multicast == multicast) {
			return &nwkRouteTable[i];
		}
	}

	return NULL;
    2e3c:	2000      	movs	r0, #0
}
    2e3e:	bd70      	pop	{r4, r5, r6, pc}
    2e40:	2000034c 	.word	0x2000034c

00002e44 <NWK_RouteNewEntry>:

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteNewEntry(void)
{
    2e44:	b530      	push	{r4, r5, lr}
	NWK_RouteTableEntry_t *iter = nwkRouteTable;
	NWK_RouteTableEntry_t *entry = NULL;
    2e46:	2200      	movs	r2, #0

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteNewEntry(void)
{
	NWK_RouteTableEntry_t *iter = nwkRouteTable;
    2e48:	4812      	ldr	r0, [pc, #72]	; (2e94 <NWK_RouteNewEntry+0x50>)
	NWK_RouteTableEntry_t *entry = NULL;

	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++, iter++) {
		if (iter->fixed) {
    2e4a:	2401      	movs	r4, #1
NWK_RouteTableEntry_t *NWK_RouteNewEntry(void)
{
	NWK_RouteTableEntry_t *iter = nwkRouteTable;
	NWK_RouteTableEntry_t *entry = NULL;

	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++, iter++) {
    2e4c:	0003      	movs	r3, r0
    2e4e:	25c8      	movs	r5, #200	; 0xc8
    2e50:	00ad      	lsls	r5, r5, #2
    2e52:	46ac      	mov	ip, r5
    2e54:	4463      	add	r3, ip
    2e56:	0019      	movs	r1, r3
		if (iter->fixed) {
    2e58:	7803      	ldrb	r3, [r0, #0]
    2e5a:	421c      	tst	r4, r3
    2e5c:	d10a      	bne.n	2e74 <NWK_RouteNewEntry+0x30>
			continue;
		}

		if (0 == iter->rank) {
    2e5e:	7983      	ldrb	r3, [r0, #6]
    2e60:	2b00      	cmp	r3, #0
    2e62:	d00b      	beq.n	2e7c <NWK_RouteNewEntry+0x38>
			entry = iter;
			break;
		}

		if (NULL == entry || iter->rank < entry->rank) {
    2e64:	2a00      	cmp	r2, #0
    2e66:	d004      	beq.n	2e72 <NWK_RouteNewEntry+0x2e>
    2e68:	7995      	ldrb	r5, [r2, #6]
    2e6a:	429d      	cmp	r5, r3
    2e6c:	d902      	bls.n	2e74 <NWK_RouteNewEntry+0x30>
    2e6e:	0002      	movs	r2, r0
    2e70:	e000      	b.n	2e74 <NWK_RouteNewEntry+0x30>
    2e72:	0002      	movs	r2, r0
NWK_RouteTableEntry_t *NWK_RouteNewEntry(void)
{
	NWK_RouteTableEntry_t *iter = nwkRouteTable;
	NWK_RouteTableEntry_t *entry = NULL;

	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++, iter++) {
    2e74:	3008      	adds	r0, #8
    2e76:	4288      	cmp	r0, r1
    2e78:	d1ee      	bne.n	2e58 <NWK_RouteNewEntry+0x14>
    2e7a:	0010      	movs	r0, r2
		if (NULL == entry || iter->rank < entry->rank) {
			entry = iter;
		}
	}

	entry->multicast = 0;
    2e7c:	7803      	ldrb	r3, [r0, #0]
	entry->score = NWK_ROUTE_DEFAULT_SCORE;
    2e7e:	2202      	movs	r2, #2
    2e80:	4393      	bics	r3, r2
    2e82:	320d      	adds	r2, #13
    2e84:	4013      	ands	r3, r2
    2e86:	2230      	movs	r2, #48	; 0x30
    2e88:	4313      	orrs	r3, r2
    2e8a:	7003      	strb	r3, [r0, #0]
	entry->rank = NWK_ROUTE_DEFAULT_RANK;
    2e8c:	2380      	movs	r3, #128	; 0x80
    2e8e:	7183      	strb	r3, [r0, #6]

	return entry;
}
    2e90:	bd30      	pop	{r4, r5, pc}
    2e92:	46c0      	nop			; (mov r8, r8)
    2e94:	2000034c 	.word	0x2000034c

00002e98 <NWK_RouteFreeEntry>:

/*************************************************************************//**
*****************************************************************************/
void NWK_RouteFreeEntry(NWK_RouteTableEntry_t *entry)
{
	if (entry->fixed) {
    2e98:	7803      	ldrb	r3, [r0, #0]
    2e9a:	07db      	lsls	r3, r3, #31
    2e9c:	d404      	bmi.n	2ea8 <NWK_RouteFreeEntry+0x10>
		return;
	}

	entry->dstAddr = NWK_ROUTE_UNKNOWN;
    2e9e:	2301      	movs	r3, #1
    2ea0:	425b      	negs	r3, r3
    2ea2:	8043      	strh	r3, [r0, #2]
	entry->rank = 0;
    2ea4:	2300      	movs	r3, #0
    2ea6:	7183      	strb	r3, [r0, #6]
}
    2ea8:	4770      	bx	lr
    2eaa:	46c0      	nop			; (mov r8, r8)

00002eac <NWK_RouteNextHop>:

/*************************************************************************//**
*****************************************************************************/
uint16_t NWK_RouteNextHop(uint16_t dst, uint8_t multicast)
{
    2eac:	b510      	push	{r4, lr}
	NWK_RouteTableEntry_t *entry;

	entry = NWK_RouteFindEntry(dst, multicast);
    2eae:	4b04      	ldr	r3, [pc, #16]	; (2ec0 <NWK_RouteNextHop+0x14>)
    2eb0:	4798      	blx	r3
	if (entry) {
    2eb2:	2800      	cmp	r0, #0
    2eb4:	d001      	beq.n	2eba <NWK_RouteNextHop+0xe>
		return entry->nextHopAddr;
    2eb6:	8880      	ldrh	r0, [r0, #4]
    2eb8:	e000      	b.n	2ebc <NWK_RouteNextHop+0x10>
	}

	return NWK_ROUTE_UNKNOWN;
    2eba:	4802      	ldr	r0, [pc, #8]	; (2ec4 <NWK_RouteNextHop+0x18>)
}
    2ebc:	bd10      	pop	{r4, pc}
    2ebe:	46c0      	nop			; (mov r8, r8)
    2ec0:	00002e11 	.word	0x00002e11
    2ec4:	0000ffff 	.word	0x0000ffff

00002ec8 <nwkRouteRemove>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkRouteRemove(uint16_t dst, uint8_t multicast)
{
    2ec8:	b510      	push	{r4, lr}
	NWK_RouteTableEntry_t *entry;

	entry = NWK_RouteFindEntry(dst, multicast);
    2eca:	4b03      	ldr	r3, [pc, #12]	; (2ed8 <nwkRouteRemove+0x10>)
    2ecc:	4798      	blx	r3
	if (entry) {
    2ece:	2800      	cmp	r0, #0
    2ed0:	d001      	beq.n	2ed6 <nwkRouteRemove+0xe>
		NWK_RouteFreeEntry(entry);
    2ed2:	4b02      	ldr	r3, [pc, #8]	; (2edc <nwkRouteRemove+0x14>)
    2ed4:	4798      	blx	r3
	}
}
    2ed6:	bd10      	pop	{r4, pc}
    2ed8:	00002e11 	.word	0x00002e11
    2edc:	00002e99 	.word	0x00002e99

00002ee0 <nwkRouteFrameReceived>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameReceived(NwkFrame_t *frame)
{
    2ee0:	b570      	push	{r4, r5, r6, lr}
    2ee2:	0004      	movs	r4, r0
#ifndef NWK_ENABLE_ROUTE_DISCOVERY
	NwkFrameHeader_t *header = &frame->header;
	NWK_RouteTableEntry_t *entry;

	if ((header->macSrcAddr & NWK_ROUTE_NON_ROUTING) &&
    2ee4:	7a42      	ldrb	r2, [r0, #9]
    2ee6:	7a85      	ldrb	r5, [r0, #10]
    2ee8:	022d      	lsls	r5, r5, #8
    2eea:	4315      	orrs	r5, r2
    2eec:	b22b      	sxth	r3, r5
    2eee:	2b00      	cmp	r3, #0
    2ef0:	da05      	bge.n	2efe <nwkRouteFrameReceived+0x1e>
			(header->macSrcAddr != header->nwkSrcAddr)) {
    2ef2:	7b42      	ldrb	r2, [r0, #13]
    2ef4:	7b83      	ldrb	r3, [r0, #14]
    2ef6:	021b      	lsls	r3, r3, #8
{
#ifndef NWK_ENABLE_ROUTE_DISCOVERY
	NwkFrameHeader_t *header = &frame->header;
	NWK_RouteTableEntry_t *entry;

	if ((header->macSrcAddr & NWK_ROUTE_NON_ROUTING) &&
    2ef8:	4313      	orrs	r3, r2
    2efa:	429d      	cmp	r5, r3
    2efc:	d13f      	bne.n	2f7e <nwkRouteFrameReceived+0x9e>
			(header->macSrcAddr != header->nwkSrcAddr)) {
		return;
	}

	if (NWK_BROADCAST_PANID == header->macDstPanId) {
    2efe:	7962      	ldrb	r2, [r4, #5]
    2f00:	79a3      	ldrb	r3, [r4, #6]
    2f02:	021b      	lsls	r3, r3, #8
    2f04:	4313      	orrs	r3, r2
    2f06:	4a1e      	ldr	r2, [pc, #120]	; (2f80 <nwkRouteFrameReceived+0xa0>)
    2f08:	4293      	cmp	r3, r2
    2f0a:	d038      	beq.n	2f7e <nwkRouteFrameReceived+0x9e>
		return;
	}

	entry = NWK_RouteFindEntry(header->nwkSrcAddr, false);
    2f0c:	7b63      	ldrb	r3, [r4, #13]
    2f0e:	7ba0      	ldrb	r0, [r4, #14]
    2f10:	0200      	lsls	r0, r0, #8
    2f12:	4318      	orrs	r0, r3
    2f14:	2100      	movs	r1, #0
    2f16:	4b1b      	ldr	r3, [pc, #108]	; (2f84 <nwkRouteFrameReceived+0xa4>)
    2f18:	4798      	blx	r3

	if (entry) {
    2f1a:	2800      	cmp	r0, #0
    2f1c:	d016      	beq.n	2f4c <nwkRouteFrameReceived+0x6c>
		bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
    2f1e:	79e2      	ldrb	r2, [r4, #7]
    2f20:	7a23      	ldrb	r3, [r4, #8]
    2f22:	021b      	lsls	r3, r3, #8
    2f24:	4313      	orrs	r3, r2
    2f26:	4a16      	ldr	r2, [pc, #88]	; (2f80 <nwkRouteFrameReceived+0xa0>)
    2f28:	4293      	cmp	r3, r2
    2f2a:	d11f      	bne.n	2f6c <nwkRouteFrameReceived+0x8c>
				nwkIb.addr == header->nwkDstAddr);
    2f2c:	7be2      	ldrb	r2, [r4, #15]
    2f2e:	7c23      	ldrb	r3, [r4, #16]
    2f30:	021b      	lsls	r3, r3, #8
	}

	entry = NWK_RouteFindEntry(header->nwkSrcAddr, false);

	if (entry) {
		bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
    2f32:	4915      	ldr	r1, [pc, #84]	; (2f88 <nwkRouteFrameReceived+0xa8>)
    2f34:	8809      	ldrh	r1, [r1, #0]
    2f36:	4313      	orrs	r3, r2
    2f38:	4299      	cmp	r1, r3
    2f3a:	d117      	bne.n	2f6c <nwkRouteFrameReceived+0x8c>
				nwkIb.addr == header->nwkDstAddr);

		if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi >
				entry->lqi) || discovery) {
			entry->nextHopAddr = header->macSrcAddr;
    2f3c:	8085      	strh	r5, [r0, #4]
			entry->score = NWK_ROUTE_DEFAULT_SCORE;
    2f3e:	7803      	ldrb	r3, [r0, #0]
    2f40:	220f      	movs	r2, #15
    2f42:	4013      	ands	r3, r2
    2f44:	2230      	movs	r2, #48	; 0x30
    2f46:	4313      	orrs	r3, r2
    2f48:	7003      	strb	r3, [r0, #0]
    2f4a:	e00b      	b.n	2f64 <nwkRouteFrameReceived+0x84>
		}
	} else {
		entry = NWK_RouteNewEntry();
    2f4c:	4b0f      	ldr	r3, [pc, #60]	; (2f8c <nwkRouteFrameReceived+0xac>)
    2f4e:	4798      	blx	r3

		entry->dstAddr = header->nwkSrcAddr;
    2f50:	7b61      	ldrb	r1, [r4, #13]
    2f52:	7ba2      	ldrb	r2, [r4, #14]
    2f54:	0212      	lsls	r2, r2, #8
    2f56:	430a      	orrs	r2, r1
    2f58:	8042      	strh	r2, [r0, #2]
		entry->nextHopAddr = header->macSrcAddr;
    2f5a:	7a62      	ldrb	r2, [r4, #9]
    2f5c:	7aa3      	ldrb	r3, [r4, #10]
    2f5e:	021b      	lsls	r3, r3, #8
    2f60:	4313      	orrs	r3, r2
    2f62:	8083      	strh	r3, [r0, #4]
	}

	entry->lqi = frame->rx.lqi;
    2f64:	2385      	movs	r3, #133	; 0x85
    2f66:	5ce3      	ldrb	r3, [r4, r3]
    2f68:	71c3      	strb	r3, [r0, #7]
    2f6a:	e008      	b.n	2f7e <nwkRouteFrameReceived+0x9e>

	if (entry) {
		bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
				nwkIb.addr == header->nwkDstAddr);

		if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi >
    2f6c:	8883      	ldrh	r3, [r0, #4]
    2f6e:	42ab      	cmp	r3, r5
    2f70:	d0f8      	beq.n	2f64 <nwkRouteFrameReceived+0x84>
    2f72:	79c2      	ldrb	r2, [r0, #7]
    2f74:	2385      	movs	r3, #133	; 0x85
    2f76:	5ce3      	ldrb	r3, [r4, r3]
    2f78:	429a      	cmp	r2, r3
    2f7a:	d3df      	bcc.n	2f3c <nwkRouteFrameReceived+0x5c>
    2f7c:	e7f2      	b.n	2f64 <nwkRouteFrameReceived+0x84>

	entry->lqi = frame->rx.lqi;
#else
	(void)frame;
#endif
}
    2f7e:	bd70      	pop	{r4, r5, r6, pc}
    2f80:	0000ffff 	.word	0x0000ffff
    2f84:	00002e11 	.word	0x00002e11
    2f88:	2000085c 	.word	0x2000085c
    2f8c:	00002e45 	.word	0x00002e45

00002f90 <nwkRouteFrameSent>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameSent(NwkFrame_t *frame)
{
    2f90:	b510      	push	{r4, lr}
    2f92:	0004      	movs	r4, r0
	NWK_RouteTableEntry_t *entry;

	if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr) {
    2f94:	7bc3      	ldrb	r3, [r0, #15]
    2f96:	7c00      	ldrb	r0, [r0, #16]
    2f98:	0200      	lsls	r0, r0, #8
    2f9a:	4318      	orrs	r0, r3
    2f9c:	4b1b      	ldr	r3, [pc, #108]	; (300c <nwkRouteFrameSent+0x7c>)
    2f9e:	4298      	cmp	r0, r3
    2fa0:	d033      	beq.n	300a <nwkRouteFrameSent+0x7a>
		return;
	}

	entry = NWK_RouteFindEntry(frame->header.nwkDstAddr,
			frame->header.nwkFcf.multicast);
    2fa2:	7ae1      	ldrb	r1, [r4, #11]
    2fa4:	0709      	lsls	r1, r1, #28

	if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr) {
		return;
	}

	entry = NWK_RouteFindEntry(frame->header.nwkDstAddr,
    2fa6:	0fc9      	lsrs	r1, r1, #31
    2fa8:	4b19      	ldr	r3, [pc, #100]	; (3010 <nwkRouteFrameSent+0x80>)
    2faa:	4798      	blx	r3
			frame->header.nwkFcf.multicast);

	if (NULL == entry || entry->fixed) {
    2fac:	2800      	cmp	r0, #0
    2fae:	d02c      	beq.n	300a <nwkRouteFrameSent+0x7a>
    2fb0:	7803      	ldrb	r3, [r0, #0]
    2fb2:	07db      	lsls	r3, r3, #31
    2fb4:	d429      	bmi.n	300a <nwkRouteFrameSent+0x7a>
		return;
	}

	if (NWK_SUCCESS_STATUS == frame->tx.status) {
    2fb6:	2385      	movs	r3, #133	; 0x85
    2fb8:	5ce3      	ldrb	r3, [r4, r3]
    2fba:	2b00      	cmp	r3, #0
    2fbc:	d118      	bne.n	2ff0 <nwkRouteFrameSent+0x60>
		entry->score = NWK_ROUTE_DEFAULT_SCORE;
    2fbe:	7803      	ldrb	r3, [r0, #0]
    2fc0:	220f      	movs	r2, #15
    2fc2:	4013      	ands	r3, r2
    2fc4:	2230      	movs	r2, #48	; 0x30
    2fc6:	4313      	orrs	r3, r2
    2fc8:	7003      	strb	r3, [r0, #0]

		if (NWK_ROUTE_MAX_RANK == ++entry->rank) {
    2fca:	7983      	ldrb	r3, [r0, #6]
    2fcc:	3301      	adds	r3, #1
    2fce:	b2db      	uxtb	r3, r3
    2fd0:	7183      	strb	r3, [r0, #6]
    2fd2:	2bff      	cmp	r3, #255	; 0xff
    2fd4:	d119      	bne.n	300a <nwkRouteFrameSent+0x7a>
    2fd6:	490f      	ldr	r1, [pc, #60]	; (3014 <nwkRouteFrameSent+0x84>)
    2fd8:	1d8a      	adds	r2, r1, #6
    2fda:	4b0f      	ldr	r3, [pc, #60]	; (3018 <nwkRouteFrameSent+0x88>)
    2fdc:	469c      	mov	ip, r3
    2fde:	4461      	add	r1, ip
/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		nwkRouteTable[i].rank = (nwkRouteTable[i].rank >> 1) + 1;
    2fe0:	7813      	ldrb	r3, [r2, #0]
    2fe2:	085b      	lsrs	r3, r3, #1
    2fe4:	3301      	adds	r3, #1
    2fe6:	7013      	strb	r3, [r2, #0]
    2fe8:	3208      	adds	r2, #8

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    2fea:	428a      	cmp	r2, r1
    2fec:	d1f8      	bne.n	2fe0 <nwkRouteFrameSent+0x50>
    2fee:	e00c      	b.n	300a <nwkRouteFrameSent+0x7a>

		if (NWK_ROUTE_MAX_RANK == ++entry->rank) {
			nwkRouteNormalizeRanks();
		}
	} else {
		if (0 == --entry->score) {
    2ff0:	7802      	ldrb	r2, [r0, #0]
    2ff2:	0913      	lsrs	r3, r2, #4
    2ff4:	330f      	adds	r3, #15
    2ff6:	240f      	movs	r4, #15
    2ff8:	4023      	ands	r3, r4
    2ffa:	0119      	lsls	r1, r3, #4
    2ffc:	4022      	ands	r2, r4
    2ffe:	430a      	orrs	r2, r1
    3000:	7002      	strb	r2, [r0, #0]
    3002:	2b00      	cmp	r3, #0
    3004:	d101      	bne.n	300a <nwkRouteFrameSent+0x7a>
			NWK_RouteFreeEntry(entry);
    3006:	4b05      	ldr	r3, [pc, #20]	; (301c <nwkRouteFrameSent+0x8c>)
    3008:	4798      	blx	r3
		}
	}
}
    300a:	bd10      	pop	{r4, pc}
    300c:	0000ffff 	.word	0x0000ffff
    3010:	00002e11 	.word	0x00002e11
    3014:	2000034c 	.word	0x2000034c
    3018:	00000326 	.word	0x00000326
    301c:	00002e99 	.word	0x00002e99

00003020 <nwkRoutePrepareTx>:

/*************************************************************************//**
*****************************************************************************/
void nwkRoutePrepareTx(NwkFrame_t *frame)
{
    3020:	b510      	push	{r4, lr}
    3022:	0004      	movs	r4, r0
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_BROADCAST_ADDR == header->nwkDstAddr) {
    3024:	7bc3      	ldrb	r3, [r0, #15]
    3026:	7c00      	ldrb	r0, [r0, #16]
    3028:	0200      	lsls	r0, r0, #8
    302a:	4318      	orrs	r0, r3
    302c:	4b0b      	ldr	r3, [pc, #44]	; (305c <nwkRoutePrepareTx+0x3c>)
    302e:	4298      	cmp	r0, r3
    3030:	d104      	bne.n	303c <nwkRoutePrepareTx+0x1c>
		header->macDstAddr = NWK_BROADCAST_ADDR;
    3032:	2301      	movs	r3, #1
    3034:	425b      	negs	r3, r3
    3036:	71e3      	strb	r3, [r4, #7]
    3038:	7223      	strb	r3, [r4, #8]
    303a:	e00e      	b.n	305a <nwkRoutePrepareTx+0x3a>
	} else if (header->nwkFcf.linkLocal) {
    303c:	7ae3      	ldrb	r3, [r4, #11]
    303e:	075b      	lsls	r3, r3, #29
    3040:	d503      	bpl.n	304a <nwkRoutePrepareTx+0x2a>
		header->macDstAddr = header->nwkDstAddr;
    3042:	71e0      	strb	r0, [r4, #7]
    3044:	0a00      	lsrs	r0, r0, #8
    3046:	7220      	strb	r0, [r4, #8]
    3048:	e007      	b.n	305a <nwkRoutePrepareTx+0x3a>
	}
#endif

	else {
		header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr,
				header->nwkFcf.multicast);
    304a:	7ae1      	ldrb	r1, [r4, #11]
    304c:	0709      	lsls	r1, r1, #28
		header->nwkFcf.linkLocal = 1;
	}
#endif

	else {
		header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr,
    304e:	0fc9      	lsrs	r1, r1, #31
    3050:	4b03      	ldr	r3, [pc, #12]	; (3060 <nwkRoutePrepareTx+0x40>)
    3052:	4798      	blx	r3
    3054:	71e0      	strb	r0, [r4, #7]
    3056:	0a00      	lsrs	r0, r0, #8
    3058:	7220      	strb	r0, [r4, #8]
		if (NWK_ROUTE_UNKNOWN == header->macDstAddr) {
			nwkRouteDiscoveryRequest(frame);
		}
  #endif
	}
}
    305a:	bd10      	pop	{r4, pc}
    305c:	0000ffff 	.word	0x0000ffff
    3060:	00002ead 	.word	0x00002ead

00003064 <nwkRouteFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
    3064:	b5f0      	push	{r4, r5, r6, r7, lr}
    3066:	4647      	mov	r7, r8
    3068:	b480      	push	{r7}
    306a:	0006      	movs	r6, r0
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_ROUTE_UNKNOWN !=
			NWK_RouteNextHop(header->nwkDstAddr,
    306c:	7bc2      	ldrb	r2, [r0, #15]
    306e:	7c07      	ldrb	r7, [r0, #16]
    3070:	023f      	lsls	r7, r7, #8
    3072:	4317      	orrs	r7, r2
			header->nwkFcf.multicast)) {
    3074:	7ac4      	ldrb	r4, [r0, #11]
    3076:	0724      	lsls	r4, r4, #28
    3078:	0fe4      	lsrs	r4, r4, #31
void nwkRouteFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_ROUTE_UNKNOWN !=
			NWK_RouteNextHop(header->nwkDstAddr,
    307a:	b2e1      	uxtb	r1, r4
    307c:	0038      	movs	r0, r7
    307e:	4b2a      	ldr	r3, [pc, #168]	; (3128 <nwkRouteFrame+0xc4>)
    3080:	4798      	blx	r3
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_ROUTE_UNKNOWN !=
    3082:	4b2a      	ldr	r3, [pc, #168]	; (312c <nwkRouteFrame+0xc8>)
    3084:	4298      	cmp	r0, r3
    3086:	d00e      	beq.n	30a6 <nwkRouteFrame+0x42>
			NWK_RouteNextHop(header->nwkDstAddr,
			header->nwkFcf.multicast)) {
		frame->tx.confirm = NULL;
    3088:	2200      	movs	r2, #0
    308a:	2389      	movs	r3, #137	; 0x89
    308c:	54f2      	strb	r2, [r6, r3]
    308e:	0033      	movs	r3, r6
    3090:	3389      	adds	r3, #137	; 0x89
    3092:	705a      	strb	r2, [r3, #1]
    3094:	709a      	strb	r2, [r3, #2]
    3096:	70da      	strb	r2, [r3, #3]
		frame->tx.control = NWK_TX_CONTROL_ROUTING;
    3098:	3202      	adds	r2, #2
    309a:	2388      	movs	r3, #136	; 0x88
    309c:	54f2      	strb	r2, [r6, r3]
		nwkTxFrame(frame);
    309e:	0030      	movs	r0, r6
    30a0:	4b23      	ldr	r3, [pc, #140]	; (3130 <nwkRouteFrame+0xcc>)
    30a2:	4798      	blx	r3
    30a4:	e03d      	b.n	3122 <nwkRouteFrame+0xbe>
	} else {
		nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr,
    30a6:	7b72      	ldrb	r2, [r6, #13]
    30a8:	7bb3      	ldrb	r3, [r6, #14]
    30aa:	021b      	lsls	r3, r3, #8
    30ac:	4313      	orrs	r3, r2
    30ae:	4698      	mov	r8, r3
		uint8_t multicast)
{
	NwkFrame_t *frame;
	NwkCommandRouteError_t *command;

	if (NULL == (frame = nwkFrameAlloc())) {
    30b0:	4b20      	ldr	r3, [pc, #128]	; (3134 <nwkRouteFrame+0xd0>)
    30b2:	4798      	blx	r3
    30b4:	1e05      	subs	r5, r0, #0
    30b6:	d031      	beq.n	311c <nwkRouteFrame+0xb8>
		return;
	}

	nwkFrameCommandInit(frame);
    30b8:	4b1f      	ldr	r3, [pc, #124]	; (3138 <nwkRouteFrame+0xd4>)
    30ba:	4798      	blx	r3

	frame->size += sizeof(NwkCommandRouteError_t);
    30bc:	786b      	ldrb	r3, [r5, #1]
    30be:	3306      	adds	r3, #6
    30c0:	706b      	strb	r3, [r5, #1]
	frame->tx.confirm = NULL;
    30c2:	2200      	movs	r2, #0
    30c4:	2389      	movs	r3, #137	; 0x89
    30c6:	54ea      	strb	r2, [r5, r3]
    30c8:	002b      	movs	r3, r5
    30ca:	3389      	adds	r3, #137	; 0x89
    30cc:	705a      	strb	r2, [r3, #1]
    30ce:	709a      	strb	r2, [r3, #2]
    30d0:	70da      	strb	r2, [r3, #3]

	frame->header.nwkDstAddr = src;
    30d2:	23ff      	movs	r3, #255	; 0xff
    30d4:	4642      	mov	r2, r8
    30d6:	401a      	ands	r2, r3
    30d8:	4694      	mov	ip, r2
    30da:	73ea      	strb	r2, [r5, #15]
    30dc:	4643      	mov	r3, r8
    30de:	0a1b      	lsrs	r3, r3, #8
    30e0:	4698      	mov	r8, r3
    30e2:	742b      	strb	r3, [r5, #16]

	command = (NwkCommandRouteError_t *)frame->payload;
    30e4:	2381      	movs	r3, #129	; 0x81
    30e6:	5ce8      	ldrb	r0, [r5, r3]
    30e8:	3301      	adds	r3, #1
    30ea:	5cea      	ldrb	r2, [r5, r3]
    30ec:	0212      	lsls	r2, r2, #8
    30ee:	4302      	orrs	r2, r0
    30f0:	3301      	adds	r3, #1
    30f2:	5ceb      	ldrb	r3, [r5, r3]
    30f4:	041b      	lsls	r3, r3, #16
    30f6:	4313      	orrs	r3, r2
    30f8:	001a      	movs	r2, r3
    30fa:	2384      	movs	r3, #132	; 0x84
    30fc:	5ceb      	ldrb	r3, [r5, r3]
    30fe:	061b      	lsls	r3, r3, #24
    3100:	4313      	orrs	r3, r2
	command->id = NWK_COMMAND_ROUTE_ERROR;
    3102:	2201      	movs	r2, #1
    3104:	701a      	strb	r2, [r3, #0]
	command->srcAddr = src;
    3106:	4662      	mov	r2, ip
    3108:	705a      	strb	r2, [r3, #1]
    310a:	4642      	mov	r2, r8
    310c:	709a      	strb	r2, [r3, #2]
	command->dstAddr = dst;
    310e:	70df      	strb	r7, [r3, #3]
    3110:	0a3f      	lsrs	r7, r7, #8
    3112:	711f      	strb	r7, [r3, #4]
	command->multicast = multicast;
    3114:	715c      	strb	r4, [r3, #5]

	nwkTxFrame(frame);
    3116:	0028      	movs	r0, r5
    3118:	4b05      	ldr	r3, [pc, #20]	; (3130 <nwkRouteFrame+0xcc>)
    311a:	4798      	blx	r3
		frame->tx.control = NWK_TX_CONTROL_ROUTING;
		nwkTxFrame(frame);
	} else {
		nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr,
				header->nwkFcf.multicast);
		nwkFrameFree(frame);
    311c:	0030      	movs	r0, r6
    311e:	4b07      	ldr	r3, [pc, #28]	; (313c <nwkRouteFrame+0xd8>)
    3120:	4798      	blx	r3
	}
}
    3122:	bc04      	pop	{r2}
    3124:	4690      	mov	r8, r2
    3126:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3128:	00002ead 	.word	0x00002ead
    312c:	0000ffff 	.word	0x0000ffff
    3130:	000039b9 	.word	0x000039b9
    3134:	00002d05 	.word	0x00002d05
    3138:	00002dc5 	.word	0x00002dc5
    313c:	00002d75 	.word	0x00002d75

00003140 <nwkRouteErrorReceived>:
}

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
    3140:	b510      	push	{r4, lr}
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

	if (sizeof(NwkCommandRouteError_t) != ind->size) {
    3142:	7b02      	ldrb	r2, [r0, #12]
		return false;
    3144:	2300      	movs	r3, #0
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

	if (sizeof(NwkCommandRouteError_t) != ind->size) {
    3146:	2a06      	cmp	r2, #6
    3148:	d108      	bne.n	315c <nwkRouteErrorReceived+0x1c>

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;
    314a:	6882      	ldr	r2, [r0, #8]

	if (sizeof(NwkCommandRouteError_t) != ind->size) {
		return false;
	}

	nwkRouteRemove(command->dstAddr, command->multicast);
    314c:	7951      	ldrb	r1, [r2, #5]
    314e:	78d3      	ldrb	r3, [r2, #3]
    3150:	7910      	ldrb	r0, [r2, #4]
    3152:	0200      	lsls	r0, r0, #8
    3154:	4318      	orrs	r0, r3
    3156:	4b02      	ldr	r3, [pc, #8]	; (3160 <nwkRouteErrorReceived+0x20>)
    3158:	4798      	blx	r3

	return true;
    315a:	2301      	movs	r3, #1
}
    315c:	0018      	movs	r0, r3
    315e:	bd10      	pop	{r4, pc}
    3160:	00002ec9 	.word	0x00002ec9

00003164 <nwkRxSeriveDataInd>:
}

/*************************************************************************//**
*****************************************************************************/
static bool nwkRxSeriveDataInd(NWK_DataInd_t *ind)
{
    3164:	b510      	push	{r4, lr}
	if (0 == (ind->options & NWK_IND_OPT_SECURED)) {
		return false;
	}
#endif

	if (ind->size < 1) {
    3166:	7b02      	ldrb	r2, [r0, #12]
		return false;
    3168:	2300      	movs	r3, #0
	if (0 == (ind->options & NWK_IND_OPT_SECURED)) {
		return false;
	}
#endif

	if (ind->size < 1) {
    316a:	2a00      	cmp	r2, #0
    316c:	d00f      	beq.n	318e <nwkRxSeriveDataInd+0x2a>
		return false;
	}

	switch (ind->data[0]) {
    316e:	6883      	ldr	r3, [r0, #8]
    3170:	781b      	ldrb	r3, [r3, #0]
    3172:	2b00      	cmp	r3, #0
    3174:	d002      	beq.n	317c <nwkRxSeriveDataInd+0x18>
    3176:	2b01      	cmp	r3, #1
    3178:	d004      	beq.n	3184 <nwkRxSeriveDataInd+0x20>
    317a:	e007      	b.n	318c <nwkRxSeriveDataInd+0x28>
	case NWK_COMMAND_ACK:
		return nwkTxAckReceived(ind);
    317c:	4b05      	ldr	r3, [pc, #20]	; (3194 <nwkRxSeriveDataInd+0x30>)
    317e:	4798      	blx	r3
    3180:	0003      	movs	r3, r0
    3182:	e004      	b.n	318e <nwkRxSeriveDataInd+0x2a>

#ifdef NWK_ENABLE_ROUTING
	case NWK_COMMAND_ROUTE_ERROR:
		return nwkRouteErrorReceived(ind);
    3184:	4b04      	ldr	r3, [pc, #16]	; (3198 <nwkRxSeriveDataInd+0x34>)
    3186:	4798      	blx	r3
    3188:	0003      	movs	r3, r0
    318a:	e000      	b.n	318e <nwkRxSeriveDataInd+0x2a>
	case NWK_COMMAND_ROUTE_REPLY:
		return nwkRouteDiscoveryReplyReceived(ind);
#endif

	default:
		return false;
    318c:	2300      	movs	r3, #0
	}
}
    318e:	0018      	movs	r0, r3
    3190:	bd10      	pop	{r4, pc}
    3192:	46c0      	nop			; (mov r8, r8)
    3194:	00003afd 	.word	0x00003afd
    3198:	00003141 	.word	0x00003141

0000319c <nwkRxDuplicateRejectionTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
    319c:	b570      	push	{r4, r5, r6, lr}
    319e:	4909      	ldr	r1, [pc, #36]	; (31c4 <nwkRxDuplicateRejectionTimerHandler+0x28>)
    31a0:	1d0b      	adds	r3, r1, #4
    31a2:	3140      	adds	r1, #64	; 0x40
	bool restart = false;
    31a4:	2400      	movs	r4, #0

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		if (nwkRxDuplicateRejectionTable[i].ttl) {
			nwkRxDuplicateRejectionTable[i].ttl--;
			restart = true;
    31a6:	2501      	movs	r5, #1
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
	bool restart = false;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		if (nwkRxDuplicateRejectionTable[i].ttl) {
    31a8:	781a      	ldrb	r2, [r3, #0]
    31aa:	2a00      	cmp	r2, #0
    31ac:	d002      	beq.n	31b4 <nwkRxDuplicateRejectionTimerHandler+0x18>
			nwkRxDuplicateRejectionTable[i].ttl--;
    31ae:	3a01      	subs	r2, #1
    31b0:	701a      	strb	r2, [r3, #0]
			restart = true;
    31b2:	002c      	movs	r4, r5
    31b4:	3306      	adds	r3, #6
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
	bool restart = false;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    31b6:	428b      	cmp	r3, r1
    31b8:	d1f6      	bne.n	31a8 <nwkRxDuplicateRejectionTimerHandler+0xc>
			nwkRxDuplicateRejectionTable[i].ttl--;
			restart = true;
		}
	}

	if (restart) {
    31ba:	2c00      	cmp	r4, #0
    31bc:	d001      	beq.n	31c2 <nwkRxDuplicateRejectionTimerHandler+0x26>
		SYS_TimerStart(timer);
    31be:	4b02      	ldr	r3, [pc, #8]	; (31c8 <nwkRxDuplicateRejectionTimerHandler+0x2c>)
    31c0:	4798      	blx	r3
	}
}
    31c2:	bd70      	pop	{r4, r5, r6, pc}
    31c4:	2000066c 	.word	0x2000066c
    31c8:	00004049 	.word	0x00004049

000031cc <nwkRxInit>:

/*************************************************************************//**
*  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
    31cc:	b510      	push	{r4, lr}
    31ce:	4a0a      	ldr	r2, [pc, #40]	; (31f8 <nwkRxInit+0x2c>)
    31d0:	1d13      	adds	r3, r2, #4
    31d2:	3240      	adds	r2, #64	; 0x40
	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		nwkRxDuplicateRejectionTable[i].ttl = 0;
    31d4:	2100      	movs	r1, #0
    31d6:	7019      	strb	r1, [r3, #0]
    31d8:	3306      	adds	r3, #6
/*************************************************************************//**
*  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    31da:	4293      	cmp	r3, r2
    31dc:	d1fb      	bne.n	31d6 <nwkRxInit+0xa>
		nwkRxDuplicateRejectionTable[i].ttl = 0;
	}

	nwkRxDuplicateRejectionTimer.interval
		= NWK_RX_DUPLICATE_REJECTION_TIMER_INTERVAL;
    31de:	4b07      	ldr	r3, [pc, #28]	; (31fc <nwkRxInit+0x30>)
    31e0:	2264      	movs	r2, #100	; 0x64
    31e2:	609a      	str	r2, [r3, #8]
	nwkRxDuplicateRejectionTimer.mode = SYS_TIMER_INTERVAL_MODE;
    31e4:	2200      	movs	r2, #0
    31e6:	731a      	strb	r2, [r3, #12]
	nwkRxDuplicateRejectionTimer.handler
		= nwkRxDuplicateRejectionTimerHandler;
    31e8:	4a05      	ldr	r2, [pc, #20]	; (3200 <nwkRxInit+0x34>)
    31ea:	611a      	str	r2, [r3, #16]

	NWK_OpenEndpoint(NWK_SERVICE_ENDPOINT_ID, nwkRxSeriveDataInd);
    31ec:	4905      	ldr	r1, [pc, #20]	; (3204 <nwkRxInit+0x38>)
    31ee:	2000      	movs	r0, #0
    31f0:	4b05      	ldr	r3, [pc, #20]	; (3208 <nwkRxInit+0x3c>)
    31f2:	4798      	blx	r3
}
    31f4:	bd10      	pop	{r4, pc}
    31f6:	46c0      	nop			; (mov r8, r8)
    31f8:	2000066c 	.word	0x2000066c
    31fc:	200006ac 	.word	0x200006ac
    3200:	0000319d 	.word	0x0000319d
    3204:	00003165 	.word	0x00003165
    3208:	00002b2d 	.word	0x00002b2d

0000320c <PHY_DataInd>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataInd(PHY_DataInd_t *ind)
{
    320c:	b510      	push	{r4, lr}
    320e:	0004      	movs	r4, r0
	NwkFrame_t *frame;

	if (0x88 != ind->data[1] ||
    3210:	6803      	ldr	r3, [r0, #0]
    3212:	785a      	ldrb	r2, [r3, #1]
    3214:	2a88      	cmp	r2, #136	; 0x88
    3216:	d11b      	bne.n	3250 <PHY_DataInd+0x44>
			(0x61 != ind->data[0] && 0x41 != ind->data[0]) ||
    3218:	781b      	ldrb	r3, [r3, #0]
    321a:	3a68      	subs	r2, #104	; 0x68
    321c:	4393      	bics	r3, r2
    321e:	2b41      	cmp	r3, #65	; 0x41
    3220:	d116      	bne.n	3250 <PHY_DataInd+0x44>
    3222:	7903      	ldrb	r3, [r0, #4]
    3224:	2b0f      	cmp	r3, #15
    3226:	d913      	bls.n	3250 <PHY_DataInd+0x44>
			ind->size < sizeof(NwkFrameHeader_t)) {
		return;
	}

	if (NULL == (frame = nwkFrameAlloc())) {
    3228:	4b0a      	ldr	r3, [pc, #40]	; (3254 <PHY_DataInd+0x48>)
    322a:	4798      	blx	r3
    322c:	2800      	cmp	r0, #0
    322e:	d00f      	beq.n	3250 <PHY_DataInd+0x44>
		return;
	}

	frame->state = NWK_RX_STATE_RECEIVED;
    3230:	2320      	movs	r3, #32
    3232:	7003      	strb	r3, [r0, #0]
	frame->size = ind->size;
    3234:	7923      	ldrb	r3, [r4, #4]
    3236:	7043      	strb	r3, [r0, #1]
	frame->rx.lqi = ind->lqi;
    3238:	7962      	ldrb	r2, [r4, #5]
    323a:	2385      	movs	r3, #133	; 0x85
    323c:	54c2      	strb	r2, [r0, r3]
	frame->rx.rssi = ind->rssi;
    323e:	2206      	movs	r2, #6
    3240:	56a2      	ldrsb	r2, [r4, r2]
    3242:	3301      	adds	r3, #1
    3244:	54c2      	strb	r2, [r0, r3]
	memcpy(frame->data, ind->data, ind->size);
    3246:	3002      	adds	r0, #2
    3248:	7922      	ldrb	r2, [r4, #4]
    324a:	6821      	ldr	r1, [r4, #0]
    324c:	4b02      	ldr	r3, [pc, #8]	; (3258 <PHY_DataInd+0x4c>)
    324e:	4798      	blx	r3
}
    3250:	bd10      	pop	{r4, pc}
    3252:	46c0      	nop			; (mov r8, r8)
    3254:	00002d05 	.word	0x00002d05
    3258:	00006c8d 	.word	0x00006c8d

0000325c <nwkRxDecryptConf>:

/*************************************************************************//**
*****************************************************************************/
void nwkRxDecryptConf(NwkFrame_t *frame, bool status)
{
	if (status) {
    325c:	2900      	cmp	r1, #0
    325e:	d002      	beq.n	3266 <nwkRxDecryptConf+0xa>
		frame->state = NWK_RX_STATE_INDICATE;
    3260:	2322      	movs	r3, #34	; 0x22
    3262:	7003      	strb	r3, [r0, #0]
    3264:	e001      	b.n	326a <nwkRxDecryptConf+0xe>
	} else {
		frame->state = NWK_RX_STATE_FINISH;
    3266:	2324      	movs	r3, #36	; 0x24
    3268:	7003      	strb	r3, [r0, #0]
	}
}
    326a:	4770      	bx	lr

0000326c <nwkRxTaskHandler>:

/*************************************************************************//**
*  @brief Rx Module task handler
*****************************************************************************/
void nwkRxTaskHandler(void)
{
    326c:	b5f0      	push	{r4, r5, r6, r7, lr}
    326e:	464f      	mov	r7, r9
    3270:	4646      	mov	r6, r8
    3272:	b4c0      	push	{r6, r7}
    3274:	b087      	sub	sp, #28
	NwkFrame_t *frame = NULL;
    3276:	2400      	movs	r4, #0

	while (NULL != (frame = nwkFrameNext(frame))) {
    3278:	4dd8      	ldr	r5, [pc, #864]	; (35dc <nwkRxTaskHandler+0x370>)
		switch (frame->state) {
    327a:	4ed9      	ldr	r6, [pc, #868]	; (35e0 <nwkRxTaskHandler+0x374>)
*****************************************************************************/
void nwkRxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    327c:	e1d5      	b.n	362a <nwkRxTaskHandler+0x3be>
		switch (frame->state) {
    327e:	7823      	ldrb	r3, [r4, #0]
    3280:	3b20      	subs	r3, #32
    3282:	b2da      	uxtb	r2, r3
    3284:	2a04      	cmp	r2, #4
    3286:	d900      	bls.n	328a <nwkRxTaskHandler+0x1e>
    3288:	e1cf      	b.n	362a <nwkRxTaskHandler+0x3be>
    328a:	0093      	lsls	r3, r2, #2
    328c:	58f3      	ldr	r3, [r6, r3]
    328e:	469f      	mov	pc, r3
*****************************************************************************/
static void nwkRxHandleReceivedFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;

	frame->state = NWK_RX_STATE_FINISH;
    3290:	2324      	movs	r3, #36	; 0x24
    3292:	7023      	strb	r3, [r4, #0]
	if (header->nwkFcf.multicast && header->nwkFcf.ackRequest) {
		return;
	}

#else
	if (header->nwkFcf.multicast) {
    3294:	7ae1      	ldrb	r1, [r4, #11]
    3296:	070b      	lsls	r3, r1, #28
    3298:	d500      	bpl.n	329c <nwkRxTaskHandler+0x30>
    329a:	e1c6      	b.n	362a <nwkRxTaskHandler+0x3be>
		return;
	}
#endif

	if (NWK_BROADCAST_PANID == header->macDstPanId) {
    329c:	7962      	ldrb	r2, [r4, #5]
    329e:	79a3      	ldrb	r3, [r4, #6]
    32a0:	021b      	lsls	r3, r3, #8
    32a2:	4313      	orrs	r3, r2
    32a4:	4acf      	ldr	r2, [pc, #828]	; (35e4 <nwkRxTaskHandler+0x378>)
    32a6:	4293      	cmp	r3, r2
    32a8:	d113      	bne.n	32d2 <nwkRxTaskHandler+0x66>
		if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR ==
    32aa:	7be2      	ldrb	r2, [r4, #15]
    32ac:	7c23      	ldrb	r3, [r4, #16]
    32ae:	021b      	lsls	r3, r3, #8
    32b0:	4313      	orrs	r3, r2
    32b2:	4acd      	ldr	r2, [pc, #820]	; (35e8 <nwkRxTaskHandler+0x37c>)
    32b4:	8812      	ldrh	r2, [r2, #0]
    32b6:	429a      	cmp	r2, r3
    32b8:	d003      	beq.n	32c2 <nwkRxTaskHandler+0x56>
    32ba:	4aca      	ldr	r2, [pc, #808]	; (35e4 <nwkRxTaskHandler+0x378>)
    32bc:	4293      	cmp	r3, r2
    32be:	d000      	beq.n	32c2 <nwkRxTaskHandler+0x56>
    32c0:	e1b3      	b.n	362a <nwkRxTaskHandler+0x3be>
				header->nwkDstAddr) {
    #ifdef NWK_ENABLE_SECURITY
			if (header->nwkFcf.security) {
    32c2:	078b      	lsls	r3, r1, #30
    32c4:	d502      	bpl.n	32cc <nwkRxTaskHandler+0x60>
				frame->state = NWK_RX_STATE_DECRYPT;
    32c6:	2321      	movs	r3, #33	; 0x21
    32c8:	7023      	strb	r3, [r4, #0]
    32ca:	e1ae      	b.n	362a <nwkRxTaskHandler+0x3be>
			} else
    #endif
			frame->state = NWK_RX_STATE_INDICATE;
    32cc:	2322      	movs	r3, #34	; 0x22
    32ce:	7023      	strb	r3, [r4, #0]
    32d0:	e1ab      	b.n	362a <nwkRxTaskHandler+0x3be>
	if (!NWK_FilterAddress(header->macSrcAddr, &frame->rx.lqi)) {
		return;
	}
#endif

	if (NWK_BROADCAST_ADDR == header->nwkDstAddr &&
    32d2:	7be2      	ldrb	r2, [r4, #15]
    32d4:	7c23      	ldrb	r3, [r4, #16]
    32d6:	021b      	lsls	r3, r3, #8
    32d8:	4313      	orrs	r3, r2
    32da:	4ac2      	ldr	r2, [pc, #776]	; (35e4 <nwkRxTaskHandler+0x378>)
    32dc:	4293      	cmp	r3, r2
    32de:	d102      	bne.n	32e6 <nwkRxTaskHandler+0x7a>
    32e0:	07cb      	lsls	r3, r1, #31
    32e2:	d500      	bpl.n	32e6 <nwkRxTaskHandler+0x7a>
    32e4:	e1a1      	b.n	362a <nwkRxTaskHandler+0x3be>
			header->nwkFcf.ackRequest) {
		return;
	}

	if (nwkIb.addr == header->nwkSrcAddr) {
    32e6:	7b62      	ldrb	r2, [r4, #13]
    32e8:	7ba3      	ldrb	r3, [r4, #14]
    32ea:	021b      	lsls	r3, r3, #8
    32ec:	49be      	ldr	r1, [pc, #760]	; (35e8 <nwkRxTaskHandler+0x37c>)
    32ee:	8809      	ldrh	r1, [r1, #0]
    32f0:	4313      	orrs	r3, r2
    32f2:	4299      	cmp	r1, r3
    32f4:	d100      	bne.n	32f8 <nwkRxTaskHandler+0x8c>
    32f6:	e198      	b.n	362a <nwkRxTaskHandler+0x3be>
		return;
	}

#ifdef NWK_ENABLE_ROUTING
	nwkRouteFrameReceived(frame);
    32f8:	0020      	movs	r0, r4
    32fa:	4bbc      	ldr	r3, [pc, #752]	; (35ec <nwkRxTaskHandler+0x380>)
    32fc:	4798      	blx	r3
    32fe:	4bbc      	ldr	r3, [pc, #752]	; (35f0 <nwkRxTaskHandler+0x384>)
    3300:	2200      	movs	r2, #0
/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;
    3302:	2100      	movs	r1, #0
    3304:	468c      	mov	ip, r1

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		entry = &nwkRxDuplicateRejectionTable[i];

		if (entry->ttl && header->nwkSrcAddr == entry->src) {
    3306:	1ca0      	adds	r0, r4, #2
{
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		entry = &nwkRxDuplicateRejectionTable[i];
    3308:	9201      	str	r2, [sp, #4]

		if (entry->ttl && header->nwkSrcAddr == entry->src) {
    330a:	7919      	ldrb	r1, [r3, #4]
    330c:	2900      	cmp	r1, #0
    330e:	d054      	beq.n	33ba <nwkRxTaskHandler+0x14e>
    3310:	7ac7      	ldrb	r7, [r0, #11]
    3312:	7b01      	ldrb	r1, [r0, #12]
    3314:	0209      	lsls	r1, r1, #8
    3316:	4688      	mov	r8, r1
    3318:	8819      	ldrh	r1, [r3, #0]
    331a:	4689      	mov	r9, r1
    331c:	4641      	mov	r1, r8
    331e:	4339      	orrs	r1, r7
    3320:	4589      	cmp	r9, r1
    3322:	d14b      	bne.n	33bc <nwkRxTaskHandler+0x150>
			uint8_t diff = (int8_t)entry->seq - header->nwkSeq;
    3324:	7b27      	ldrb	r7, [r4, #12]
    3326:	0011      	movs	r1, r2
    3328:	0053      	lsls	r3, r2, #1
    332a:	4694      	mov	ip, r2
    332c:	4463      	add	r3, ip
    332e:	005b      	lsls	r3, r3, #1
    3330:	4aaf      	ldr	r2, [pc, #700]	; (35f0 <nwkRxTaskHandler+0x384>)
    3332:	18d3      	adds	r3, r2, r3
    3334:	789a      	ldrb	r2, [r3, #2]
    3336:	1bd2      	subs	r2, r2, r7
    3338:	b2d2      	uxtb	r2, r2

			if (diff < 8) {
    333a:	2a07      	cmp	r2, #7
    333c:	d827      	bhi.n	338e <nwkRxTaskHandler+0x122>
				if (entry->mask & (1 << diff)) {
    333e:	004b      	lsls	r3, r1, #1
    3340:	4463      	add	r3, ip
    3342:	005b      	lsls	r3, r3, #1
    3344:	49aa      	ldr	r1, [pc, #680]	; (35f0 <nwkRxTaskHandler+0x384>)
    3346:	18cb      	adds	r3, r1, r3
    3348:	78db      	ldrb	r3, [r3, #3]
    334a:	0019      	movs	r1, r3
    334c:	4111      	asrs	r1, r2
    334e:	07c9      	lsls	r1, r1, #31
    3350:	d512      	bpl.n	3378 <nwkRxTaskHandler+0x10c>
	#ifdef NWK_ENABLE_ROUTING
					if (nwkIb.addr == header->macDstAddr) {
    3352:	79e2      	ldrb	r2, [r4, #7]
    3354:	7a23      	ldrb	r3, [r4, #8]
    3356:	021b      	lsls	r3, r3, #8
    3358:	49a3      	ldr	r1, [pc, #652]	; (35e8 <nwkRxTaskHandler+0x37c>)
    335a:	8809      	ldrh	r1, [r1, #0]
    335c:	4313      	orrs	r3, r2
    335e:	4299      	cmp	r1, r3
    3360:	d000      	beq.n	3364 <nwkRxTaskHandler+0xf8>
    3362:	e162      	b.n	362a <nwkRxTaskHandler+0x3be>
						nwkRouteRemove(
								header->nwkDstAddr,
								header->nwkFcf.multicast);
    3364:	7ae1      	ldrb	r1, [r4, #11]
    3366:	0709      	lsls	r1, r1, #28

			if (diff < 8) {
				if (entry->mask & (1 << diff)) {
	#ifdef NWK_ENABLE_ROUTING
					if (nwkIb.addr == header->macDstAddr) {
						nwkRouteRemove(
    3368:	0fc9      	lsrs	r1, r1, #31
    336a:	7be3      	ldrb	r3, [r4, #15]
    336c:	7c20      	ldrb	r0, [r4, #16]
    336e:	0200      	lsls	r0, r0, #8
    3370:	4318      	orrs	r0, r3
    3372:	4ba0      	ldr	r3, [pc, #640]	; (35f4 <nwkRxTaskHandler+0x388>)
    3374:	4798      	blx	r3
    3376:	e158      	b.n	362a <nwkRxTaskHandler+0x3be>
					}
	#endif
					return true;
				}

				entry->mask |= (1 << diff);
    3378:	9801      	ldr	r0, [sp, #4]
    337a:	0041      	lsls	r1, r0, #1
    337c:	1808      	adds	r0, r1, r0
    337e:	0040      	lsls	r0, r0, #1
    3380:	499b      	ldr	r1, [pc, #620]	; (35f0 <nwkRxTaskHandler+0x384>)
    3382:	1809      	adds	r1, r1, r0
    3384:	2001      	movs	r0, #1
    3386:	4090      	lsls	r0, r2
    3388:	4303      	orrs	r3, r0
    338a:	70cb      	strb	r3, [r1, #3]
    338c:	e153      	b.n	3636 <nwkRxTaskHandler+0x3ca>
				return false;
			} else {
				uint8_t shift = -(int8_t)diff;

				entry->seq = header->nwkSeq;
    338e:	4b98      	ldr	r3, [pc, #608]	; (35f0 <nwkRxTaskHandler+0x384>)
    3390:	9901      	ldr	r1, [sp, #4]
    3392:	0048      	lsls	r0, r1, #1
    3394:	1841      	adds	r1, r0, r1
    3396:	0049      	lsls	r1, r1, #1
    3398:	1859      	adds	r1, r3, r1
    339a:	708f      	strb	r7, [r1, #2]
				entry->mask = (entry->mask << shift) | 1;
    339c:	78cf      	ldrb	r7, [r1, #3]
    339e:	4252      	negs	r2, r2
    33a0:	b2d2      	uxtb	r2, r2
    33a2:	4097      	lsls	r7, r2
    33a4:	2201      	movs	r2, #1
    33a6:	433a      	orrs	r2, r7
    33a8:	70ca      	strb	r2, [r1, #3]
				entry->ttl = DUPLICATE_REJECTION_TTL;
    33aa:	9901      	ldr	r1, [sp, #4]
    33ac:	468c      	mov	ip, r1
    33ae:	4460      	add	r0, ip
    33b0:	0040      	lsls	r0, r0, #1
    33b2:	181b      	adds	r3, r3, r0
    33b4:	221f      	movs	r2, #31
    33b6:	711a      	strb	r2, [r3, #4]
    33b8:	e13d      	b.n	3636 <nwkRxTaskHandler+0x3ca>
				return false;
			}
		}

		if (0 == entry->ttl) {
			freeEntry = entry;
    33ba:	469c      	mov	ip, r3
    33bc:	3201      	adds	r2, #1
    33be:	3306      	adds	r3, #6
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    33c0:	2a0a      	cmp	r2, #10
    33c2:	d1a1      	bne.n	3308 <nwkRxTaskHandler+0x9c>
		if (0 == entry->ttl) {
			freeEntry = entry;
		}
	}

	if (NULL == freeEntry) {
    33c4:	4663      	mov	r3, ip
    33c6:	2b00      	cmp	r3, #0
    33c8:	d100      	bne.n	33cc <nwkRxTaskHandler+0x160>
    33ca:	e12e      	b.n	362a <nwkRxTaskHandler+0x3be>
		return true;
	}

	freeEntry->src = header->nwkSrcAddr;
    33cc:	7b61      	ldrb	r1, [r4, #13]
    33ce:	7ba2      	ldrb	r2, [r4, #14]
    33d0:	0212      	lsls	r2, r2, #8
    33d2:	430a      	orrs	r2, r1
    33d4:	4661      	mov	r1, ip
    33d6:	800a      	strh	r2, [r1, #0]
	freeEntry->seq = header->nwkSeq;
    33d8:	7b23      	ldrb	r3, [r4, #12]
    33da:	708b      	strb	r3, [r1, #2]
	freeEntry->mask = 1;
    33dc:	2301      	movs	r3, #1
    33de:	70cb      	strb	r3, [r1, #3]
	freeEntry->ttl = DUPLICATE_REJECTION_TTL;
    33e0:	331e      	adds	r3, #30
    33e2:	710b      	strb	r3, [r1, #4]

	SYS_TimerStart(&nwkRxDuplicateRejectionTimer);
    33e4:	4884      	ldr	r0, [pc, #528]	; (35f8 <nwkRxTaskHandler+0x38c>)
    33e6:	4b85      	ldr	r3, [pc, #532]	; (35fc <nwkRxTaskHandler+0x390>)
    33e8:	4798      	blx	r3
    33ea:	e124      	b.n	3636 <nwkRxTaskHandler+0x3ca>
			frame->state = NWK_RX_STATE_INDICATE;
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
    33ec:	4b7e      	ldr	r3, [pc, #504]	; (35e8 <nwkRxTaskHandler+0x37c>)
    33ee:	8819      	ldrh	r1, [r3, #0]
				header->nwkDstAddr &&
    33f0:	7be2      	ldrb	r2, [r4, #15]
    33f2:	7c23      	ldrb	r3, [r4, #16]
    33f4:	021b      	lsls	r3, r3, #8
    33f6:	4313      	orrs	r3, r2
			frame->state = NWK_RX_STATE_INDICATE;
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
    33f8:	4299      	cmp	r1, r3
    33fa:	d010      	beq.n	341e <nwkRxTaskHandler+0x1b2>
				header->nwkDstAddr &&
    33fc:	7ae2      	ldrb	r2, [r4, #11]
    33fe:	0752      	lsls	r2, r2, #29
    3400:	d40a      	bmi.n	3418 <nwkRxTaskHandler+0x1ac>
				0 == header->nwkFcf.linkLocal) {
			nwkTxBroadcastFrame(frame);
    3402:	0020      	movs	r0, r4
    3404:	4b7e      	ldr	r3, [pc, #504]	; (3600 <nwkRxTaskHandler+0x394>)
    3406:	4798      	blx	r3
		}

		if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR ==
    3408:	4b77      	ldr	r3, [pc, #476]	; (35e8 <nwkRxTaskHandler+0x37c>)
    340a:	8819      	ldrh	r1, [r3, #0]
    340c:	7be2      	ldrb	r2, [r4, #15]
    340e:	7c23      	ldrb	r3, [r4, #16]
    3410:	021b      	lsls	r3, r3, #8
    3412:	4313      	orrs	r3, r2
    3414:	4299      	cmp	r1, r3
    3416:	d002      	beq.n	341e <nwkRxTaskHandler+0x1b2>
    3418:	4a72      	ldr	r2, [pc, #456]	; (35e4 <nwkRxTaskHandler+0x378>)
    341a:	4293      	cmp	r3, r2
    341c:	d108      	bne.n	3430 <nwkRxTaskHandler+0x1c4>
				header->nwkDstAddr) {
    #ifdef NWK_ENABLE_SECURITY
			if (header->nwkFcf.security) {
    341e:	7ae3      	ldrb	r3, [r4, #11]
    3420:	079b      	lsls	r3, r3, #30
    3422:	d502      	bpl.n	342a <nwkRxTaskHandler+0x1be>
				frame->state = NWK_RX_STATE_DECRYPT;
    3424:	2321      	movs	r3, #33	; 0x21
    3426:	7023      	strb	r3, [r4, #0]
    3428:	e0ff      	b.n	362a <nwkRxTaskHandler+0x3be>
			} else
    #endif
			frame->state = NWK_RX_STATE_INDICATE;
    342a:	2322      	movs	r3, #34	; 0x22
    342c:	7023      	strb	r3, [r4, #0]
    342e:	e0fc      	b.n	362a <nwkRxTaskHandler+0x3be>
		}

  #ifdef NWK_ENABLE_ROUTING
		else if (nwkIb.addr == header->macDstAddr) {
    3430:	79e2      	ldrb	r2, [r4, #7]
    3432:	7a23      	ldrb	r3, [r4, #8]
    3434:	021b      	lsls	r3, r3, #8
    3436:	4313      	orrs	r3, r2
    3438:	428b      	cmp	r3, r1
    343a:	d000      	beq.n	343e <nwkRxTaskHandler+0x1d2>
    343c:	e0f5      	b.n	362a <nwkRxTaskHandler+0x3be>
			frame->state = NWK_RX_STATE_ROUTE;
    343e:	2323      	movs	r3, #35	; 0x23
    3440:	7023      	strb	r3, [r4, #0]
    3442:	e0f2      	b.n	362a <nwkRxTaskHandler+0x3be>
		break;

#ifdef NWK_ENABLE_SECURITY
		case NWK_RX_STATE_DECRYPT:
		{
			nwkSecurityProcess(frame, false);
    3444:	2100      	movs	r1, #0
    3446:	0020      	movs	r0, r4
    3448:	4b6e      	ldr	r3, [pc, #440]	; (3604 <nwkRxTaskHandler+0x398>)
    344a:	4798      	blx	r3
		}
		break;
    344c:	e0ed      	b.n	362a <nwkRxTaskHandler+0x3be>
*****************************************************************************/
static void nwkRxHandleIndication(NwkFrame_t *frame)
{
	bool ack;

	nwkRxAckControl = 0;
    344e:	2200      	movs	r2, #0
    3450:	4b6d      	ldr	r3, [pc, #436]	; (3608 <nwkRxTaskHandler+0x39c>)
    3452:	701a      	strb	r2, [r3, #0]
static bool nwkRxIndicateFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;
	NWK_DataInd_t ind;

	if (NULL == nwkIb.endpoint[header->nwkDstEndpoint]) {
    3454:	7c60      	ldrb	r0, [r4, #17]
    3456:	0900      	lsrs	r0, r0, #4
    3458:	b2c3      	uxtb	r3, r0
    345a:	3302      	adds	r3, #2
    345c:	009b      	lsls	r3, r3, #2
    345e:	4a62      	ldr	r2, [pc, #392]	; (35e8 <nwkRxTaskHandler+0x37c>)
    3460:	589b      	ldr	r3, [r3, r2]
    3462:	4698      	mov	r8, r3
    3464:	2b00      	cmp	r3, #0
    3466:	d05a      	beq.n	351e <nwkRxTaskHandler+0x2b2>
		return false;
	}

	ind.srcAddr = header->nwkSrcAddr;
    3468:	1ca7      	adds	r7, r4, #2
    346a:	7b63      	ldrb	r3, [r4, #13]
    346c:	7ba2      	ldrb	r2, [r4, #14]
    346e:	0212      	lsls	r2, r2, #8
    3470:	431a      	orrs	r2, r3
    3472:	4691      	mov	r9, r2
    3474:	ab02      	add	r3, sp, #8
    3476:	801a      	strh	r2, [r3, #0]
	ind.dstAddr = header->nwkDstAddr;
    3478:	7be3      	ldrb	r3, [r4, #15]
    347a:	7c21      	ldrb	r1, [r4, #16]
    347c:	0209      	lsls	r1, r1, #8
    347e:	4319      	orrs	r1, r3
    3480:	ab02      	add	r3, sp, #8
    3482:	8059      	strh	r1, [r3, #2]
	ind.srcEndpoint = header->nwkSrcEndpoint;
    3484:	7c63      	ldrb	r3, [r4, #17]
    3486:	071b      	lsls	r3, r3, #28
    3488:	0f1b      	lsrs	r3, r3, #28
    348a:	aa02      	add	r2, sp, #8
    348c:	7113      	strb	r3, [r2, #4]
	ind.dstEndpoint = header->nwkDstEndpoint;
    348e:	7150      	strb	r0, [r2, #5]
	ind.data = frame->payload;
    3490:	2381      	movs	r3, #129	; 0x81
    3492:	5ce3      	ldrb	r3, [r4, r3]
    3494:	2082      	movs	r0, #130	; 0x82
    3496:	5c20      	ldrb	r0, [r4, r0]
    3498:	0200      	lsls	r0, r0, #8
    349a:	4318      	orrs	r0, r3
    349c:	2383      	movs	r3, #131	; 0x83
    349e:	5ce3      	ldrb	r3, [r4, r3]
    34a0:	041b      	lsls	r3, r3, #16
    34a2:	4318      	orrs	r0, r3
    34a4:	2384      	movs	r3, #132	; 0x84
    34a6:	5ce3      	ldrb	r3, [r4, r3]
    34a8:	061b      	lsls	r3, r3, #24
    34aa:	4303      	orrs	r3, r0
    34ac:	9304      	str	r3, [sp, #16]
	ind.size = nwkFramePayloadSize(frame);
    34ae:	1bdb      	subs	r3, r3, r7
    34b0:	7860      	ldrb	r0, [r4, #1]
    34b2:	1ac3      	subs	r3, r0, r3
    34b4:	7313      	strb	r3, [r2, #12]
	ind.lqi = frame->rx.lqi;
    34b6:	2385      	movs	r3, #133	; 0x85
    34b8:	5ce3      	ldrb	r3, [r4, r3]
    34ba:	7353      	strb	r3, [r2, #13]
	ind.rssi = frame->rx.rssi;
    34bc:	2386      	movs	r3, #134	; 0x86
    34be:	5ce3      	ldrb	r3, [r4, r3]
    34c0:	7393      	strb	r3, [r2, #14]

	ind.options
		= (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
    34c2:	7ae0      	ldrb	r0, [r4, #11]
	ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
    34c4:	2303      	movs	r3, #3
    34c6:	4003      	ands	r3, r0
    34c8:	469c      	mov	ip, r3
	ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
    34ca:	0743      	lsls	r3, r0, #29
    34cc:	0fdb      	lsrs	r3, r3, #31
    34ce:	015b      	lsls	r3, r3, #5
    34d0:	4662      	mov	r2, ip
    34d2:	4313      	orrs	r3, r2
	ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
    34d4:	0700      	lsls	r0, r0, #28
    34d6:	0fc0      	lsrs	r0, r0, #31
    34d8:	0180      	lsls	r0, r0, #6
    34da:	4318      	orrs	r0, r3
	ind.options
		|= (NWK_BROADCAST_ADDR ==
    34dc:	4b4b      	ldr	r3, [pc, #300]	; (360c <nwkRxTaskHandler+0x3a0>)
    34de:	469c      	mov	ip, r3
    34e0:	4461      	add	r1, ip
    34e2:	424b      	negs	r3, r1
    34e4:	414b      	adcs	r3, r1
    34e6:	009b      	lsls	r3, r3, #2
    34e8:	4303      	orrs	r3, r0
			header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
	ind.options
		|= (header->nwkSrcAddr ==
			header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
    34ea:	79f8      	ldrb	r0, [r7, #7]
    34ec:	7a39      	ldrb	r1, [r7, #8]
    34ee:	0209      	lsls	r1, r1, #8
	ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
	ind.options
		|= (NWK_BROADCAST_ADDR ==
			header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
	ind.options
		|= (header->nwkSrcAddr ==
    34f0:	4301      	orrs	r1, r0
    34f2:	464a      	mov	r2, r9
    34f4:	1a52      	subs	r2, r2, r1
    34f6:	4251      	negs	r1, r2
    34f8:	414a      	adcs	r2, r1
    34fa:	00d2      	lsls	r2, r2, #3
    34fc:	4313      	orrs	r3, r2
    34fe:	aa02      	add	r2, sp, #8
    3500:	7193      	strb	r3, [r2, #6]
			header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
	ind.options
		|= (NWK_BROADCAST_PANID ==
			header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
    3502:	78f9      	ldrb	r1, [r7, #3]
    3504:	793a      	ldrb	r2, [r7, #4]
    3506:	0212      	lsls	r2, r2, #8
			header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
	ind.options
		|= (header->nwkSrcAddr ==
			header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
	ind.options
		|= (NWK_BROADCAST_PANID ==
    3508:	430a      	orrs	r2, r1
    350a:	4462      	add	r2, ip
    350c:	4251      	negs	r1, r2
    350e:	414a      	adcs	r2, r1
    3510:	0112      	lsls	r2, r2, #4
    3512:	4313      	orrs	r3, r2
    3514:	aa02      	add	r2, sp, #8
    3516:	7193      	strb	r3, [r2, #6]
			header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;

	return nwkIb.endpoint[header->nwkDstEndpoint](&ind);
    3518:	0010      	movs	r0, r2
    351a:	47c0      	blx	r8
    351c:	e000      	b.n	3520 <nwkRxTaskHandler+0x2b4>
{
	NwkFrameHeader_t *header = &frame->header;
	NWK_DataInd_t ind;

	if (NULL == nwkIb.endpoint[header->nwkDstEndpoint]) {
		return false;
    351e:	2000      	movs	r0, #0
	bool ack;

	nwkRxAckControl = 0;
	ack = nwkRxIndicateFrame(frame);

	if (0 == frame->header.nwkFcf.ackRequest) {
    3520:	7ae1      	ldrb	r1, [r4, #11]
		ack = false;
    3522:	07cb      	lsls	r3, r1, #31
    3524:	17db      	asrs	r3, r3, #31
    3526:	4018      	ands	r0, r3
	}

	if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    3528:	79e2      	ldrb	r2, [r4, #7]
    352a:	7a23      	ldrb	r3, [r4, #8]
    352c:	021b      	lsls	r3, r3, #8
    352e:	4313      	orrs	r3, r2
    3530:	4a2c      	ldr	r2, [pc, #176]	; (35e4 <nwkRxTaskHandler+0x378>)
    3532:	4293      	cmp	r3, r2
    3534:	d10a      	bne.n	354c <nwkRxTaskHandler+0x2e0>
			nwkIb.addr == frame->header.nwkDstAddr &&
    3536:	7be2      	ldrb	r2, [r4, #15]
    3538:	7c23      	ldrb	r3, [r4, #16]
    353a:	021b      	lsls	r3, r3, #8

	if (0 == frame->header.nwkFcf.ackRequest) {
		ack = false;
	}

	if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    353c:	4f2a      	ldr	r7, [pc, #168]	; (35e8 <nwkRxTaskHandler+0x37c>)
    353e:	883f      	ldrh	r7, [r7, #0]
    3540:	4313      	orrs	r3, r2
    3542:	429f      	cmp	r7, r3
    3544:	d102      	bne.n	354c <nwkRxTaskHandler+0x2e0>
			nwkIb.addr == frame->header.nwkDstAddr &&
    3546:	070b      	lsls	r3, r1, #28
    3548:	d400      	bmi.n	354c <nwkRxTaskHandler+0x2e0>
			0 == frame->header.nwkFcf.multicast) {
		ack = true;
    354a:	2001      	movs	r0, #1
	}

	if (NWK_BROADCAST_PANID == frame->header.macDstPanId) {
    354c:	7962      	ldrb	r2, [r4, #5]
    354e:	79a3      	ldrb	r3, [r4, #6]
    3550:	021b      	lsls	r3, r3, #8
    3552:	4313      	orrs	r3, r2
    3554:	4a23      	ldr	r2, [pc, #140]	; (35e4 <nwkRxTaskHandler+0x378>)
    3556:	4293      	cmp	r3, r2
    3558:	d03c      	beq.n	35d4 <nwkRxTaskHandler+0x368>
		ack = false;
	}

	if (NWK_BROADCAST_ADDR == nwkIb.addr) {
    355a:	4b23      	ldr	r3, [pc, #140]	; (35e8 <nwkRxTaskHandler+0x37c>)
    355c:	881a      	ldrh	r2, [r3, #0]
    355e:	4b21      	ldr	r3, [pc, #132]	; (35e4 <nwkRxTaskHandler+0x378>)
    3560:	429a      	cmp	r2, r3
    3562:	d037      	beq.n	35d4 <nwkRxTaskHandler+0x368>
		ack = false;
	}

	if (ack) {
    3564:	2800      	cmp	r0, #0
    3566:	d035      	beq.n	35d4 <nwkRxTaskHandler+0x368>
static void nwkRxSendAck(NwkFrame_t *frame)
{
	NwkFrame_t *ack;
	NwkCommandAck_t *command;

	if (NULL == (ack = nwkFrameAlloc())) {
    3568:	4b29      	ldr	r3, [pc, #164]	; (3610 <nwkRxTaskHandler+0x3a4>)
    356a:	4798      	blx	r3
    356c:	1e07      	subs	r7, r0, #0
    356e:	d031      	beq.n	35d4 <nwkRxTaskHandler+0x368>
		return;
	}

	nwkFrameCommandInit(ack);
    3570:	4b28      	ldr	r3, [pc, #160]	; (3614 <nwkRxTaskHandler+0x3a8>)
    3572:	4798      	blx	r3

	ack->size += sizeof(NwkCommandAck_t);
    3574:	787b      	ldrb	r3, [r7, #1]
    3576:	3303      	adds	r3, #3
    3578:	707b      	strb	r3, [r7, #1]
	ack->tx.confirm = NULL;
    357a:	2200      	movs	r2, #0
    357c:	2389      	movs	r3, #137	; 0x89
    357e:	54fa      	strb	r2, [r7, r3]
    3580:	003b      	movs	r3, r7
    3582:	3389      	adds	r3, #137	; 0x89
    3584:	705a      	strb	r2, [r3, #1]
    3586:	709a      	strb	r2, [r3, #2]
    3588:	70da      	strb	r2, [r3, #3]

	ack->header.nwkFcf.security = frame->header.nwkFcf.security;
    358a:	7ae2      	ldrb	r2, [r4, #11]
    358c:	2302      	movs	r3, #2
    358e:	401a      	ands	r2, r3
    3590:	7afb      	ldrb	r3, [r7, #11]
    3592:	2102      	movs	r1, #2
    3594:	438b      	bics	r3, r1
    3596:	4313      	orrs	r3, r2
    3598:	72fb      	strb	r3, [r7, #11]
	ack->header.nwkDstAddr = frame->header.nwkSrcAddr;
    359a:	7b62      	ldrb	r2, [r4, #13]
    359c:	7ba3      	ldrb	r3, [r4, #14]
    359e:	73fa      	strb	r2, [r7, #15]
    35a0:	743b      	strb	r3, [r7, #16]

	command = (NwkCommandAck_t *)ack->payload;
    35a2:	2381      	movs	r3, #129	; 0x81
    35a4:	5cf8      	ldrb	r0, [r7, r3]
    35a6:	3301      	adds	r3, #1
    35a8:	5cfa      	ldrb	r2, [r7, r3]
    35aa:	0212      	lsls	r2, r2, #8
    35ac:	4302      	orrs	r2, r0
    35ae:	3301      	adds	r3, #1
    35b0:	5cfb      	ldrb	r3, [r7, r3]
    35b2:	041b      	lsls	r3, r3, #16
    35b4:	4313      	orrs	r3, r2
    35b6:	001a      	movs	r2, r3
    35b8:	2384      	movs	r3, #132	; 0x84
    35ba:	5cfb      	ldrb	r3, [r7, r3]
    35bc:	061b      	lsls	r3, r3, #24
    35be:	4313      	orrs	r3, r2
	command->id = NWK_COMMAND_ACK;
    35c0:	2200      	movs	r2, #0
    35c2:	701a      	strb	r2, [r3, #0]
	command->control = nwkRxAckControl;
    35c4:	4a10      	ldr	r2, [pc, #64]	; (3608 <nwkRxTaskHandler+0x39c>)
    35c6:	7812      	ldrb	r2, [r2, #0]
    35c8:	709a      	strb	r2, [r3, #2]
	command->seq = frame->header.nwkSeq;
    35ca:	7b22      	ldrb	r2, [r4, #12]
    35cc:	705a      	strb	r2, [r3, #1]

	nwkTxFrame(ack);
    35ce:	0038      	movs	r0, r7
    35d0:	4b11      	ldr	r3, [pc, #68]	; (3618 <nwkRxTaskHandler+0x3ac>)
    35d2:	4798      	blx	r3

	if (ack) {
		nwkRxSendAck(frame);
	}

	frame->state = NWK_RX_STATE_FINISH;
    35d4:	2324      	movs	r3, #36	; 0x24
    35d6:	7023      	strb	r3, [r4, #0]
    35d8:	e027      	b.n	362a <nwkRxTaskHandler+0x3be>
    35da:	46c0      	nop			; (mov r8, r8)
    35dc:	00002d89 	.word	0x00002d89
    35e0:	00007e48 	.word	0x00007e48
    35e4:	0000ffff 	.word	0x0000ffff
    35e8:	2000085c 	.word	0x2000085c
    35ec:	00002ee1 	.word	0x00002ee1
    35f0:	2000066c 	.word	0x2000066c
    35f4:	00002ec9 	.word	0x00002ec9
    35f8:	200006ac 	.word	0x200006ac
    35fc:	00004049 	.word	0x00004049
    3600:	00003a75 	.word	0x00003a75
    3604:	00003675 	.word	0x00003675
    3608:	200006a8 	.word	0x200006a8
    360c:	ffff0001 	.word	0xffff0001
    3610:	00002d05 	.word	0x00002d05
    3614:	00002dc5 	.word	0x00002dc5
    3618:	000039b9 	.word	0x000039b9
		break;

#ifdef NWK_ENABLE_ROUTING
		case NWK_RX_STATE_ROUTE:
		{
			nwkRouteFrame(frame);
    361c:	0020      	movs	r0, r4
    361e:	4b0d      	ldr	r3, [pc, #52]	; (3654 <nwkRxTaskHandler+0x3e8>)
    3620:	4798      	blx	r3
		}
		break;
    3622:	e002      	b.n	362a <nwkRxTaskHandler+0x3be>
#endif

		case NWK_RX_STATE_FINISH:
		{
			nwkFrameFree(frame);
    3624:	0020      	movs	r0, r4
    3626:	4b0c      	ldr	r3, [pc, #48]	; (3658 <nwkRxTaskHandler+0x3ec>)
    3628:	4798      	blx	r3
*****************************************************************************/
void nwkRxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    362a:	0020      	movs	r0, r4
    362c:	47a8      	blx	r5
    362e:	1e04      	subs	r4, r0, #0
    3630:	d000      	beq.n	3634 <nwkRxTaskHandler+0x3c8>
    3632:	e624      	b.n	327e <nwkRxTaskHandler+0x12>
    3634:	e008      	b.n	3648 <nwkRxTaskHandler+0x3dc>
			frame->state = NWK_RX_STATE_INDICATE;
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
    3636:	79e2      	ldrb	r2, [r4, #7]
    3638:	7a23      	ldrb	r3, [r4, #8]
    363a:	021b      	lsls	r3, r3, #8
    363c:	4313      	orrs	r3, r2
    363e:	4a07      	ldr	r2, [pc, #28]	; (365c <nwkRxTaskHandler+0x3f0>)
    3640:	4293      	cmp	r3, r2
    3642:	d000      	beq.n	3646 <nwkRxTaskHandler+0x3da>
    3644:	e6e0      	b.n	3408 <nwkRxTaskHandler+0x19c>
    3646:	e6d1      	b.n	33ec <nwkRxTaskHandler+0x180>
			nwkFrameFree(frame);
		}
		break;
		}
	}
}
    3648:	b007      	add	sp, #28
    364a:	bc0c      	pop	{r2, r3}
    364c:	4690      	mov	r8, r2
    364e:	4699      	mov	r9, r3
    3650:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3652:	46c0      	nop			; (mov r8, r8)
    3654:	00003065 	.word	0x00003065
    3658:	00002d75 	.word	0x00002d75
    365c:	0000ffff 	.word	0x0000ffff

00003660 <nwkSecurityInit>:
/*************************************************************************//**
*  @brief Initializes the Security module
*****************************************************************************/
void nwkSecurityInit(void)
{
	nwkSecurityActiveFrames = 0;
    3660:	2300      	movs	r3, #0
    3662:	4a02      	ldr	r2, [pc, #8]	; (366c <nwkSecurityInit+0xc>)
    3664:	7013      	strb	r3, [r2, #0]
	nwkSecurityActiveFrame = NULL;
    3666:	4a02      	ldr	r2, [pc, #8]	; (3670 <nwkSecurityInit+0x10>)
    3668:	6013      	str	r3, [r2, #0]
}
    366a:	4770      	bx	lr
    366c:	200006c0 	.word	0x200006c0
    3670:	200006c4 	.word	0x200006c4

00003674 <nwkSecurityProcess>:

/*************************************************************************//**
*****************************************************************************/
void nwkSecurityProcess(NwkFrame_t *frame, bool encrypt)
{
	if (encrypt) {
    3674:	2900      	cmp	r1, #0
    3676:	d002      	beq.n	367e <nwkSecurityProcess+0xa>
		frame->state = NWK_SECURITY_STATE_ENCRYPT_PENDING;
    3678:	2330      	movs	r3, #48	; 0x30
    367a:	7003      	strb	r3, [r0, #0]
    367c:	e001      	b.n	3682 <nwkSecurityProcess+0xe>
	} else {
		frame->state = NWK_SECURITY_STATE_DECRYPT_PENDING;
    367e:	2331      	movs	r3, #49	; 0x31
    3680:	7003      	strb	r3, [r0, #0]
	}

	++nwkSecurityActiveFrames;
    3682:	4a02      	ldr	r2, [pc, #8]	; (368c <nwkSecurityProcess+0x18>)
    3684:	7813      	ldrb	r3, [r2, #0]
    3686:	3301      	adds	r3, #1
    3688:	7013      	strb	r3, [r2, #0]
}
    368a:	4770      	bx	lr
    368c:	200006c0 	.word	0x200006c0

00003690 <SYS_EncryptConf>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_EncryptConf(void)
{
    3690:	b5f0      	push	{r4, r5, r6, r7, lr}
    3692:	4647      	mov	r7, r8
    3694:	b480      	push	{r7}
	uint8_t *vector = (uint8_t *)nwkSecurityVector;
	uint8_t *text = &nwkSecurityActiveFrame->payload[nwkSecurityOffset];
    3696:	4b25      	ldr	r3, [pc, #148]	; (372c <SYS_EncryptConf+0x9c>)
    3698:	681b      	ldr	r3, [r3, #0]
    369a:	469c      	mov	ip, r3
    369c:	2381      	movs	r3, #129	; 0x81
    369e:	4662      	mov	r2, ip
    36a0:	5cd0      	ldrb	r0, [r2, r3]
    36a2:	3301      	adds	r3, #1
    36a4:	5cd3      	ldrb	r3, [r2, r3]
    36a6:	021b      	lsls	r3, r3, #8
    36a8:	4303      	orrs	r3, r0
    36aa:	001a      	movs	r2, r3
    36ac:	2383      	movs	r3, #131	; 0x83
    36ae:	4661      	mov	r1, ip
    36b0:	5ccb      	ldrb	r3, [r1, r3]
    36b2:	041b      	lsls	r3, r3, #16
    36b4:	4313      	orrs	r3, r2
    36b6:	2284      	movs	r2, #132	; 0x84
    36b8:	5c89      	ldrb	r1, [r1, r2]
    36ba:	0609      	lsls	r1, r1, #24
    36bc:	4319      	orrs	r1, r3
    36be:	4b1c      	ldr	r3, [pc, #112]	; (3730 <SYS_EncryptConf+0xa0>)
    36c0:	781b      	ldrb	r3, [r3, #0]
    36c2:	4698      	mov	r8, r3
	uint8_t block;

	block
		= (nwkSecuritySize <
    36c4:	4b1b      	ldr	r3, [pc, #108]	; (3734 <SYS_EncryptConf+0xa4>)
    36c6:	781e      	ldrb	r6, [r3, #0]
    36c8:	1c37      	adds	r7, r6, #0
    36ca:	2e10      	cmp	r6, #16
    36cc:	d900      	bls.n	36d0 <SYS_EncryptConf+0x40>
    36ce:	2710      	movs	r7, #16
    36d0:	b2ff      	uxtb	r7, r7
			NWK_SECURITY_BLOCK_SIZE) ? nwkSecuritySize :
			NWK_SECURITY_BLOCK_SIZE;

	for (uint8_t i = 0; i < block; i++) {
    36d2:	2f00      	cmp	r7, #0
    36d4:	d016      	beq.n	3704 <SYS_EncryptConf+0x74>
		text[i] ^= vector[i];

		if (nwkSecurityEncrypt) {
    36d6:	4b18      	ldr	r3, [pc, #96]	; (3738 <SYS_EncryptConf+0xa8>)
    36d8:	781d      	ldrb	r5, [r3, #0]
    36da:	4441      	add	r1, r8
    36dc:	4b17      	ldr	r3, [pc, #92]	; (373c <SYS_EncryptConf+0xac>)
    36de:	1e7c      	subs	r4, r7, #1
    36e0:	b2e4      	uxtb	r4, r4
    36e2:	3401      	adds	r4, #1
    36e4:	191c      	adds	r4, r3, r4
		= (nwkSecuritySize <
			NWK_SECURITY_BLOCK_SIZE) ? nwkSecuritySize :
			NWK_SECURITY_BLOCK_SIZE;

	for (uint8_t i = 0; i < block; i++) {
		text[i] ^= vector[i];
    36e6:	7808      	ldrb	r0, [r1, #0]
    36e8:	781a      	ldrb	r2, [r3, #0]
    36ea:	4042      	eors	r2, r0
    36ec:	700a      	strb	r2, [r1, #0]

		if (nwkSecurityEncrypt) {
    36ee:	2d00      	cmp	r5, #0
    36f0:	d001      	beq.n	36f6 <SYS_EncryptConf+0x66>
			vector[i] = text[i];
    36f2:	701a      	strb	r2, [r3, #0]
    36f4:	e002      	b.n	36fc <SYS_EncryptConf+0x6c>
		} else {
			vector[i] ^= text[i];
    36f6:	7818      	ldrb	r0, [r3, #0]
    36f8:	4042      	eors	r2, r0
    36fa:	701a      	strb	r2, [r3, #0]
    36fc:	3101      	adds	r1, #1
    36fe:	3301      	adds	r3, #1
	block
		= (nwkSecuritySize <
			NWK_SECURITY_BLOCK_SIZE) ? nwkSecuritySize :
			NWK_SECURITY_BLOCK_SIZE;

	for (uint8_t i = 0; i < block; i++) {
    3700:	42a3      	cmp	r3, r4
    3702:	d1f0      	bne.n	36e6 <SYS_EncryptConf+0x56>
		} else {
			vector[i] ^= text[i];
		}
	}

	nwkSecurityOffset += block;
    3704:	4643      	mov	r3, r8
    3706:	19db      	adds	r3, r3, r7
    3708:	4a09      	ldr	r2, [pc, #36]	; (3730 <SYS_EncryptConf+0xa0>)
    370a:	7013      	strb	r3, [r2, #0]
	nwkSecuritySize -= block;
    370c:	1bf6      	subs	r6, r6, r7
    370e:	b2f6      	uxtb	r6, r6
    3710:	4b08      	ldr	r3, [pc, #32]	; (3734 <SYS_EncryptConf+0xa4>)
    3712:	701e      	strb	r6, [r3, #0]

	if (nwkSecuritySize > 0) {
    3714:	2e00      	cmp	r6, #0
    3716:	d003      	beq.n	3720 <SYS_EncryptConf+0x90>
		nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_PROCESS;
    3718:	2332      	movs	r3, #50	; 0x32
    371a:	4662      	mov	r2, ip
    371c:	7013      	strb	r3, [r2, #0]
    371e:	e002      	b.n	3726 <SYS_EncryptConf+0x96>
	} else {
		nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_CONFIRM;
    3720:	2334      	movs	r3, #52	; 0x34
    3722:	4662      	mov	r2, ip
    3724:	7013      	strb	r3, [r2, #0]
	}
}
    3726:	bc04      	pop	{r2}
    3728:	4690      	mov	r8, r2
    372a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    372c:	200006c4 	.word	0x200006c4
    3730:	200006c8 	.word	0x200006c8
    3734:	200006c9 	.word	0x200006c9
    3738:	200006ca 	.word	0x200006ca
    373c:	200006cc 	.word	0x200006cc

00003740 <nwkSecurityTaskHandler>:

/*************************************************************************//**
*  @brief Security Module task handler
*****************************************************************************/
void nwkSecurityTaskHandler(void)
{
    3740:	b570      	push	{r4, r5, r6, lr}
    3742:	b082      	sub	sp, #8
	NwkFrame_t *frame = NULL;

	if (0 == nwkSecurityActiveFrames) {
    3744:	4b57      	ldr	r3, [pc, #348]	; (38a4 <nwkSecurityTaskHandler+0x164>)
    3746:	781b      	ldrb	r3, [r3, #0]
    3748:	2b00      	cmp	r3, #0
    374a:	d100      	bne.n	374e <nwkSecurityTaskHandler+0xe>
    374c:	e0a8      	b.n	38a0 <nwkSecurityTaskHandler+0x160>
		return;
	}

	if (nwkSecurityActiveFrame) {
    374e:	4b56      	ldr	r3, [pc, #344]	; (38a8 <nwkSecurityTaskHandler+0x168>)
    3750:	681c      	ldr	r4, [r3, #0]
    3752:	2c00      	cmp	r4, #0
    3754:	d100      	bne.n	3758 <nwkSecurityTaskHandler+0x18>
    3756:	e09e      	b.n	3896 <nwkSecurityTaskHandler+0x156>
		if (NWK_SECURITY_STATE_CONFIRM ==
				nwkSecurityActiveFrame->state) {
    3758:	7823      	ldrb	r3, [r4, #0]
	if (0 == nwkSecurityActiveFrames) {
		return;
	}

	if (nwkSecurityActiveFrame) {
		if (NWK_SECURITY_STATE_CONFIRM ==
    375a:	2b34      	cmp	r3, #52	; 0x34
    375c:	d147      	bne.n	37ee <nwkSecurityTaskHandler+0xae>

/*************************************************************************//**
*****************************************************************************/
static bool nwkSecurityProcessMic(void)
{
	uint8_t *mic = &nwkSecurityActiveFrame->payload[nwkSecurityOffset];
    375e:	334d      	adds	r3, #77	; 0x4d
    3760:	5ce1      	ldrb	r1, [r4, r3]
    3762:	3301      	adds	r3, #1
    3764:	5ce3      	ldrb	r3, [r4, r3]
    3766:	021b      	lsls	r3, r3, #8
    3768:	430b      	orrs	r3, r1
    376a:	001a      	movs	r2, r3
    376c:	2383      	movs	r3, #131	; 0x83
    376e:	5ce0      	ldrb	r0, [r4, r3]
    3770:	0400      	lsls	r0, r0, #16
    3772:	0003      	movs	r3, r0
    3774:	4313      	orrs	r3, r2
    3776:	2284      	movs	r2, #132	; 0x84
    3778:	5ca0      	ldrb	r0, [r4, r2]
    377a:	0600      	lsls	r0, r0, #24
    377c:	4318      	orrs	r0, r3
    377e:	4b4b      	ldr	r3, [pc, #300]	; (38ac <nwkSecurityTaskHandler+0x16c>)
    3780:	7819      	ldrb	r1, [r3, #0]
    3782:	1840      	adds	r0, r0, r1
	uint32_t vmic = nwkSecurityVector[0] ^ nwkSecurityVector[1] ^
    3784:	4b4a      	ldr	r3, [pc, #296]	; (38b0 <nwkSecurityTaskHandler+0x170>)
			nwkSecurityVector[2] ^ nwkSecurityVector[3];
    3786:	681e      	ldr	r6, [r3, #0]
    3788:	685a      	ldr	r2, [r3, #4]
    378a:	4056      	eors	r6, r2
    378c:	689a      	ldr	r2, [r3, #8]
    378e:	4056      	eors	r6, r2
    3790:	68db      	ldr	r3, [r3, #12]
    3792:	405e      	eors	r6, r3
/*************************************************************************//**
*****************************************************************************/
static bool nwkSecurityProcessMic(void)
{
	uint8_t *mic = &nwkSecurityActiveFrame->payload[nwkSecurityOffset];
	uint32_t vmic = nwkSecurityVector[0] ^ nwkSecurityVector[1] ^
    3794:	9600      	str	r6, [sp, #0]
			nwkSecurityVector[2] ^ nwkSecurityVector[3];
	uint32_t tmic;

	if (nwkSecurityEncrypt) {
    3796:	4b47      	ldr	r3, [pc, #284]	; (38b4 <nwkSecurityTaskHandler+0x174>)
    3798:	781d      	ldrb	r5, [r3, #0]
    379a:	2d00      	cmp	r5, #0
    379c:	d007      	beq.n	37ae <nwkSecurityTaskHandler+0x6e>
		memcpy(mic, (uint8_t *)&vmic, NWK_SECURITY_MIC_SIZE);
    379e:	2204      	movs	r2, #4
    37a0:	4669      	mov	r1, sp
    37a2:	4b45      	ldr	r3, [pc, #276]	; (38b8 <nwkSecurityTaskHandler+0x178>)
    37a4:	4798      	blx	r3
		nwkSecurityActiveFrame->size += NWK_SECURITY_MIC_SIZE;
    37a6:	7863      	ldrb	r3, [r4, #1]
    37a8:	3304      	adds	r3, #4
    37aa:	7063      	strb	r3, [r4, #1]
    37ac:	e009      	b.n	37c2 <nwkSecurityTaskHandler+0x82>
		return true;
	} else {
		memcpy((uint8_t *)&tmic, mic, NWK_SECURITY_MIC_SIZE);
    37ae:	2204      	movs	r2, #4
    37b0:	0001      	movs	r1, r0
    37b2:	a801      	add	r0, sp, #4
    37b4:	4b40      	ldr	r3, [pc, #256]	; (38b8 <nwkSecurityTaskHandler+0x178>)
    37b6:	4798      	blx	r3
		return vmic == tmic;
    37b8:	9b01      	ldr	r3, [sp, #4]
    37ba:	1b9d      	subs	r5, r3, r6
    37bc:	426b      	negs	r3, r5
    37be:	416b      	adcs	r3, r5
    37c0:	b2dd      	uxtb	r5, r3
	if (nwkSecurityActiveFrame) {
		if (NWK_SECURITY_STATE_CONFIRM ==
				nwkSecurityActiveFrame->state) {
			bool micStatus = nwkSecurityProcessMic();

			if (nwkSecurityEncrypt) {
    37c2:	4b3c      	ldr	r3, [pc, #240]	; (38b4 <nwkSecurityTaskHandler+0x174>)
    37c4:	781b      	ldrb	r3, [r3, #0]
    37c6:	2b00      	cmp	r3, #0
    37c8:	d004      	beq.n	37d4 <nwkSecurityTaskHandler+0x94>
				nwkTxEncryptConf(nwkSecurityActiveFrame);
    37ca:	4b37      	ldr	r3, [pc, #220]	; (38a8 <nwkSecurityTaskHandler+0x168>)
    37cc:	6818      	ldr	r0, [r3, #0]
    37ce:	4b3b      	ldr	r3, [pc, #236]	; (38bc <nwkSecurityTaskHandler+0x17c>)
    37d0:	4798      	blx	r3
    37d2:	e004      	b.n	37de <nwkSecurityTaskHandler+0x9e>
			} else {
				nwkRxDecryptConf(nwkSecurityActiveFrame,
    37d4:	4b34      	ldr	r3, [pc, #208]	; (38a8 <nwkSecurityTaskHandler+0x168>)
    37d6:	6818      	ldr	r0, [r3, #0]
    37d8:	0029      	movs	r1, r5
    37da:	4b39      	ldr	r3, [pc, #228]	; (38c0 <nwkSecurityTaskHandler+0x180>)
    37dc:	4798      	blx	r3
						micStatus);
			}

			nwkSecurityActiveFrame = NULL;
    37de:	2200      	movs	r2, #0
    37e0:	4b31      	ldr	r3, [pc, #196]	; (38a8 <nwkSecurityTaskHandler+0x168>)
    37e2:	601a      	str	r2, [r3, #0]
			--nwkSecurityActiveFrames;
    37e4:	4a2f      	ldr	r2, [pc, #188]	; (38a4 <nwkSecurityTaskHandler+0x164>)
    37e6:	7813      	ldrb	r3, [r2, #0]
    37e8:	3b01      	subs	r3, #1
    37ea:	7013      	strb	r3, [r2, #0]
    37ec:	e058      	b.n	38a0 <nwkSecurityTaskHandler+0x160>
		} else if (NWK_SECURITY_STATE_PROCESS ==
    37ee:	2b32      	cmp	r3, #50	; 0x32
    37f0:	d156      	bne.n	38a0 <nwkSecurityTaskHandler+0x160>
				nwkSecurityActiveFrame->state) {
			nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_WAIT;
    37f2:	3301      	adds	r3, #1
    37f4:	7023      	strb	r3, [r4, #0]
			SYS_EncryptReq((uint32_t *)nwkSecurityVector,
    37f6:	4933      	ldr	r1, [pc, #204]	; (38c4 <nwkSecurityTaskHandler+0x184>)
    37f8:	482d      	ldr	r0, [pc, #180]	; (38b0 <nwkSecurityTaskHandler+0x170>)
    37fa:	4b33      	ldr	r3, [pc, #204]	; (38c8 <nwkSecurityTaskHandler+0x188>)
    37fc:	4798      	blx	r3
    37fe:	e04f      	b.n	38a0 <nwkSecurityTaskHandler+0x160>

		return;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_SECURITY_STATE_ENCRYPT_PENDING == frame->state ||
    3800:	7803      	ldrb	r3, [r0, #0]
    3802:	3b30      	subs	r3, #48	; 0x30
    3804:	2b01      	cmp	r3, #1
    3806:	d848      	bhi.n	389a <nwkSecurityTaskHandler+0x15a>
				NWK_SECURITY_STATE_DECRYPT_PENDING ==
				frame->state) {
			nwkSecurityActiveFrame = frame;
    3808:	4b27      	ldr	r3, [pc, #156]	; (38a8 <nwkSecurityTaskHandler+0x168>)
    380a:	6018      	str	r0, [r3, #0]
*****************************************************************************/
static void nwkSecurityStart(void)
{
	NwkFrameHeader_t *header = &nwkSecurityActiveFrame->header;

	nwkSecurityVector[0] = header->nwkSeq;
    380c:	4d28      	ldr	r5, [pc, #160]	; (38b0 <nwkSecurityTaskHandler+0x170>)
    380e:	7b02      	ldrb	r2, [r0, #12]
    3810:	602a      	str	r2, [r5, #0]
	nwkSecurityVector[1]
		= ((uint32_t)header->nwkDstAddr <<
    3812:	7bc4      	ldrb	r4, [r0, #15]
    3814:	7c02      	ldrb	r2, [r0, #16]
    3816:	0212      	lsls	r2, r2, #8
    3818:	4322      	orrs	r2, r4
    381a:	0411      	lsls	r1, r2, #16
			16) | header->nwkDstEndpoint;
    381c:	7c42      	ldrb	r2, [r0, #17]
{
	NwkFrameHeader_t *header = &nwkSecurityActiveFrame->header;

	nwkSecurityVector[0] = header->nwkSeq;
	nwkSecurityVector[1]
		= ((uint32_t)header->nwkDstAddr <<
    381e:	0912      	lsrs	r2, r2, #4
    3820:	430a      	orrs	r2, r1
    3822:	606a      	str	r2, [r5, #4]
			16) | header->nwkDstEndpoint;
	nwkSecurityVector[2]
		= ((uint32_t)header->nwkSrcAddr <<
    3824:	7b44      	ldrb	r4, [r0, #13]
    3826:	7b82      	ldrb	r2, [r0, #14]
    3828:	0212      	lsls	r2, r2, #8
    382a:	4322      	orrs	r2, r4
    382c:	0411      	lsls	r1, r2, #16
			16) | header->nwkSrcEndpoint;
    382e:	7c42      	ldrb	r2, [r0, #17]
    3830:	0712      	lsls	r2, r2, #28
	nwkSecurityVector[0] = header->nwkSeq;
	nwkSecurityVector[1]
		= ((uint32_t)header->nwkDstAddr <<
			16) | header->nwkDstEndpoint;
	nwkSecurityVector[2]
		= ((uint32_t)header->nwkSrcAddr <<
    3832:	0f12      	lsrs	r2, r2, #28
    3834:	430a      	orrs	r2, r1
    3836:	60aa      	str	r2, [r5, #8]
			16) | header->nwkSrcEndpoint;
	nwkSecurityVector[3]
		= ((uint32_t)header->macDstPanId <<
    3838:	7942      	ldrb	r2, [r0, #5]
    383a:	7983      	ldrb	r3, [r0, #6]
    383c:	021b      	lsls	r3, r3, #8
    383e:	4313      	orrs	r3, r2
    3840:	041b      	lsls	r3, r3, #16
    3842:	7ac2      	ldrb	r2, [r0, #11]
    3844:	4313      	orrs	r3, r2
    3846:	60eb      	str	r3, [r5, #12]
			16) | *(uint8_t *)&header->nwkFcf;

	if (NWK_SECURITY_STATE_DECRYPT_PENDING ==
			nwkSecurityActiveFrame->state) {
    3848:	7805      	ldrb	r5, [r0, #0]
			16) | header->nwkSrcEndpoint;
	nwkSecurityVector[3]
		= ((uint32_t)header->macDstPanId <<
			16) | *(uint8_t *)&header->nwkFcf;

	if (NWK_SECURITY_STATE_DECRYPT_PENDING ==
    384a:	2d31      	cmp	r5, #49	; 0x31
    384c:	d102      	bne.n	3854 <nwkSecurityTaskHandler+0x114>
			nwkSecurityActiveFrame->state) {
		nwkSecurityActiveFrame->size -= NWK_SECURITY_MIC_SIZE;
    384e:	7843      	ldrb	r3, [r0, #1]
    3850:	3b04      	subs	r3, #4
    3852:	7043      	strb	r3, [r0, #1]

/*************************************************************************//**
*****************************************************************************/
static inline uint8_t nwkFramePayloadSize(NwkFrame_t *frame)
{
	return frame->size - (frame->payload - frame->data);
    3854:	2381      	movs	r3, #129	; 0x81
    3856:	5cc4      	ldrb	r4, [r0, r3]
    3858:	3301      	adds	r3, #1
    385a:	5cc2      	ldrb	r2, [r0, r3]
    385c:	0212      	lsls	r2, r2, #8
    385e:	4322      	orrs	r2, r4
    3860:	3301      	adds	r3, #1
    3862:	5cc3      	ldrb	r3, [r0, r3]
    3864:	041b      	lsls	r3, r3, #16
    3866:	4313      	orrs	r3, r2
    3868:	001a      	movs	r2, r3
    386a:	2384      	movs	r3, #132	; 0x84
    386c:	5cc3      	ldrb	r3, [r0, r3]
    386e:	061b      	lsls	r3, r3, #24
    3870:	4313      	orrs	r3, r2
    3872:	1c82      	adds	r2, r0, #2
	}

	nwkSecuritySize = nwkFramePayloadSize(nwkSecurityActiveFrame);
    3874:	1a9b      	subs	r3, r3, r2
    3876:	7842      	ldrb	r2, [r0, #1]
    3878:	1ad3      	subs	r3, r2, r3
    387a:	4a14      	ldr	r2, [pc, #80]	; (38cc <nwkSecurityTaskHandler+0x18c>)
    387c:	7013      	strb	r3, [r2, #0]
	nwkSecurityOffset = 0;
    387e:	2200      	movs	r2, #0
    3880:	4b0a      	ldr	r3, [pc, #40]	; (38ac <nwkSecurityTaskHandler+0x16c>)
    3882:	701a      	strb	r2, [r3, #0]
	nwkSecurityEncrypt
		= (NWK_SECURITY_STATE_ENCRYPT_PENDING ==
    3884:	002b      	movs	r3, r5
    3886:	3b30      	subs	r3, #48	; 0x30
    3888:	4259      	negs	r1, r3
    388a:	4159      	adcs	r1, r3
    388c:	4a09      	ldr	r2, [pc, #36]	; (38b4 <nwkSecurityTaskHandler+0x174>)
    388e:	7011      	strb	r1, [r2, #0]
			nwkSecurityActiveFrame->state);

	nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_PROCESS;
    3890:	2332      	movs	r3, #50	; 0x32
    3892:	7003      	strb	r3, [r0, #0]
    3894:	e004      	b.n	38a0 <nwkSecurityTaskHandler+0x160>
    3896:	2000      	movs	r0, #0
		}

		return;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
    3898:	4c0d      	ldr	r4, [pc, #52]	; (38d0 <nwkSecurityTaskHandler+0x190>)
    389a:	47a0      	blx	r4
    389c:	2800      	cmp	r0, #0
    389e:	d1af      	bne.n	3800 <nwkSecurityTaskHandler+0xc0>
			nwkSecurityActiveFrame = frame;
			nwkSecurityStart();
			return;
		}
	}
}
    38a0:	b002      	add	sp, #8
    38a2:	bd70      	pop	{r4, r5, r6, pc}
    38a4:	200006c0 	.word	0x200006c0
    38a8:	200006c4 	.word	0x200006c4
    38ac:	200006c8 	.word	0x200006c8
    38b0:	200006cc 	.word	0x200006cc
    38b4:	200006ca 	.word	0x200006ca
    38b8:	00006c8d 	.word	0x00006c8d
    38bc:	00003b3d 	.word	0x00003b3d
    38c0:	0000325d 	.word	0x0000325d
    38c4:	200008a4 	.word	0x200008a4
    38c8:	00003f51 	.word	0x00003f51
    38cc:	200006c9 	.word	0x200006c9
    38d0:	00002d89 	.word	0x00002d89

000038d4 <nwkTxDelayTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
    38d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    38d6:	b083      	sub	sp, #12
    38d8:	9001      	str	r0, [sp, #4]
	NwkFrame_t *frame = NULL;
	bool restart = false;
    38da:	2400      	movs	r4, #0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
    38dc:	2000      	movs	r0, #0
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    38de:	4d10      	ldr	r5, [pc, #64]	; (3920 <nwkTxDelayTimerHandler+0x4c>)
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
			restart = true;

			if (0 == --frame->tx.timeout) {
    38e0:	2686      	movs	r6, #134	; 0x86
    38e2:	2787      	movs	r7, #135	; 0x87
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    38e4:	e012      	b.n	390c <nwkTxDelayTimerHandler+0x38>
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
    38e6:	7803      	ldrb	r3, [r0, #0]
    38e8:	2b11      	cmp	r3, #17
    38ea:	d10f      	bne.n	390c <nwkTxDelayTimerHandler+0x38>
			restart = true;

			if (0 == --frame->tx.timeout) {
    38ec:	5d82      	ldrb	r2, [r0, r6]
    38ee:	5dc3      	ldrb	r3, [r0, r7]
    38f0:	021b      	lsls	r3, r3, #8
    38f2:	4313      	orrs	r3, r2
    38f4:	3b01      	subs	r3, #1
    38f6:	b29b      	uxth	r3, r3
    38f8:	5583      	strb	r3, [r0, r6]
    38fa:	0a19      	lsrs	r1, r3, #8
    38fc:	0002      	movs	r2, r0
    38fe:	3286      	adds	r2, #134	; 0x86
    3900:	7051      	strb	r1, [r2, #1]
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
			restart = true;
    3902:	2401      	movs	r4, #1

			if (0 == --frame->tx.timeout) {
    3904:	2b00      	cmp	r3, #0
    3906:	d101      	bne.n	390c <nwkTxDelayTimerHandler+0x38>
				frame->state = NWK_TX_STATE_SEND;
    3908:	3313      	adds	r3, #19
    390a:	7003      	strb	r3, [r0, #0]
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    390c:	47a8      	blx	r5
    390e:	2800      	cmp	r0, #0
    3910:	d1e9      	bne.n	38e6 <nwkTxDelayTimerHandler+0x12>
				frame->state = NWK_TX_STATE_SEND;
			}
		}
	}

	if (restart) {
    3912:	2c00      	cmp	r4, #0
    3914:	d002      	beq.n	391c <nwkTxDelayTimerHandler+0x48>
		SYS_TimerStart(timer);
    3916:	9801      	ldr	r0, [sp, #4]
    3918:	4b02      	ldr	r3, [pc, #8]	; (3924 <nwkTxDelayTimerHandler+0x50>)
    391a:	4798      	blx	r3
	}
}
    391c:	b003      	add	sp, #12
    391e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3920:	00002d89 	.word	0x00002d89
    3924:	00004049 	.word	0x00004049

00003928 <nwkTxAckWaitTimerHandler>:
}

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
    3928:	b5f0      	push	{r4, r5, r6, r7, lr}
    392a:	b083      	sub	sp, #12
    392c:	9001      	str	r0, [sp, #4]
	NwkFrame_t *frame = NULL;
	bool restart = false;
    392e:	2400      	movs	r4, #0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
    3930:	2000      	movs	r0, #0
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    3932:	4d12      	ldr	r5, [pc, #72]	; (397c <nwkTxAckWaitTimerHandler+0x54>)
		if (NWK_TX_STATE_WAIT_ACK == frame->state) {
			restart = true;

			if (0 == --frame->tx.timeout) {
    3934:	2686      	movs	r6, #134	; 0x86
    3936:	2787      	movs	r7, #135	; 0x87
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    3938:	e015      	b.n	3966 <nwkTxAckWaitTimerHandler+0x3e>
		if (NWK_TX_STATE_WAIT_ACK == frame->state) {
    393a:	7803      	ldrb	r3, [r0, #0]
    393c:	2b16      	cmp	r3, #22
    393e:	d112      	bne.n	3966 <nwkTxAckWaitTimerHandler+0x3e>
			restart = true;

			if (0 == --frame->tx.timeout) {
    3940:	5d82      	ldrb	r2, [r0, r6]
    3942:	5dc3      	ldrb	r3, [r0, r7]
    3944:	021b      	lsls	r3, r3, #8
    3946:	4313      	orrs	r3, r2
    3948:	3b01      	subs	r3, #1
    394a:	b29b      	uxth	r3, r3
    394c:	5583      	strb	r3, [r0, r6]
    394e:	0a19      	lsrs	r1, r3, #8
    3950:	0002      	movs	r2, r0
    3952:	3286      	adds	r2, #134	; 0x86
    3954:	7051      	strb	r1, [r2, #1]
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_TX_STATE_WAIT_ACK == frame->state) {
			restart = true;
    3956:	2401      	movs	r4, #1

			if (0 == --frame->tx.timeout) {
    3958:	2b00      	cmp	r3, #0
    395a:	d104      	bne.n	3966 <nwkTxAckWaitTimerHandler+0x3e>

/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
	frame->state = NWK_TX_STATE_CONFIRM;
    395c:	3317      	adds	r3, #23
    395e:	7003      	strb	r3, [r0, #0]
	frame->tx.status = status;
    3960:	2210      	movs	r2, #16
    3962:	336e      	adds	r3, #110	; 0x6e
    3964:	54c2      	strb	r2, [r0, r3]
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    3966:	47a8      	blx	r5
    3968:	2800      	cmp	r0, #0
    396a:	d1e6      	bne.n	393a <nwkTxAckWaitTimerHandler+0x12>
				nwkTxConfirm(frame, NWK_NO_ACK_STATUS);
			}
		}
	}

	if (restart) {
    396c:	2c00      	cmp	r4, #0
    396e:	d002      	beq.n	3976 <nwkTxAckWaitTimerHandler+0x4e>
		SYS_TimerStart(timer);
    3970:	9801      	ldr	r0, [sp, #4]
    3972:	4b03      	ldr	r3, [pc, #12]	; (3980 <nwkTxAckWaitTimerHandler+0x58>)
    3974:	4798      	blx	r3
	}
}
    3976:	b003      	add	sp, #12
    3978:	bdf0      	pop	{r4, r5, r6, r7, pc}
    397a:	46c0      	nop			; (mov r8, r8)
    397c:	00002d89 	.word	0x00002d89
    3980:	00004049 	.word	0x00004049

00003984 <nwkTxInit>:
/*************************************************************************//**
*  @brief Initializes the Tx module
*****************************************************************************/
void nwkTxInit(void)
{
	nwkTxPhyActiveFrame = NULL;
    3984:	2200      	movs	r2, #0
    3986:	4b07      	ldr	r3, [pc, #28]	; (39a4 <nwkTxInit+0x20>)
    3988:	601a      	str	r2, [r3, #0]

	nwkTxAckWaitTimer.interval = NWK_TX_ACK_WAIT_TIMER_INTERVAL;
    398a:	4b07      	ldr	r3, [pc, #28]	; (39a8 <nwkTxInit+0x24>)
    398c:	2132      	movs	r1, #50	; 0x32
    398e:	6099      	str	r1, [r3, #8]
	nwkTxAckWaitTimer.mode = SYS_TIMER_INTERVAL_MODE;
    3990:	731a      	strb	r2, [r3, #12]
	nwkTxAckWaitTimer.handler = nwkTxAckWaitTimerHandler;
    3992:	4906      	ldr	r1, [pc, #24]	; (39ac <nwkTxInit+0x28>)
    3994:	6119      	str	r1, [r3, #16]

	nwkTxDelayTimer.interval = NWK_TX_DELAY_TIMER_INTERVAL;
    3996:	4b06      	ldr	r3, [pc, #24]	; (39b0 <nwkTxInit+0x2c>)
    3998:	210a      	movs	r1, #10
    399a:	6099      	str	r1, [r3, #8]
	nwkTxDelayTimer.mode = SYS_TIMER_INTERVAL_MODE;
    399c:	731a      	strb	r2, [r3, #12]
	nwkTxDelayTimer.handler = nwkTxDelayTimerHandler;
    399e:	4a05      	ldr	r2, [pc, #20]	; (39b4 <nwkTxInit+0x30>)
    39a0:	611a      	str	r2, [r3, #16]
}
    39a2:	4770      	bx	lr
    39a4:	200006f0 	.word	0x200006f0
    39a8:	200006dc 	.word	0x200006dc
    39ac:	00003929 	.word	0x00003929
    39b0:	200006f4 	.word	0x200006f4
    39b4:	000038d5 	.word	0x000038d5

000039b8 <nwkTxFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxFrame(NwkFrame_t *frame)
{
    39b8:	b510      	push	{r4, lr}
    39ba:	0004      	movs	r4, r0
	NwkFrameHeader_t *header = &frame->header;

	if (frame->tx.control & NWK_TX_CONTROL_ROUTING) {
    39bc:	2388      	movs	r3, #136	; 0x88
    39be:	5cc3      	ldrb	r3, [r0, r3]
    39c0:	079a      	lsls	r2, r3, #30
    39c2:	d502      	bpl.n	39ca <nwkTxFrame+0x12>
		frame->state = NWK_TX_STATE_DELAY;
    39c4:	2212      	movs	r2, #18
    39c6:	7002      	strb	r2, [r0, #0]
    39c8:	e007      	b.n	39da <nwkTxFrame+0x22>
	} else {
  #ifdef NWK_ENABLE_SECURITY
		if (header->nwkFcf.security) {
    39ca:	7ac2      	ldrb	r2, [r0, #11]
    39cc:	0792      	lsls	r2, r2, #30
    39ce:	d502      	bpl.n	39d6 <nwkTxFrame+0x1e>
			frame->state = NWK_TX_STATE_ENCRYPT;
    39d0:	2210      	movs	r2, #16
    39d2:	7002      	strb	r2, [r0, #0]
    39d4:	e001      	b.n	39da <nwkTxFrame+0x22>
		} else
  #endif
		frame->state = NWK_TX_STATE_DELAY;
    39d6:	2212      	movs	r2, #18
    39d8:	7002      	strb	r2, [r0, #0]
	}

	frame->tx.status = NWK_SUCCESS_STATUS;
    39da:	2100      	movs	r1, #0
    39dc:	2285      	movs	r2, #133	; 0x85
    39de:	54a1      	strb	r1, [r4, r2]

	if (frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID) {
    39e0:	07da      	lsls	r2, r3, #31
    39e2:	d504      	bpl.n	39ee <nwkTxFrame+0x36>
		header->macDstPanId = NWK_BROADCAST_PANID;
    39e4:	2201      	movs	r2, #1
    39e6:	4252      	negs	r2, r2
    39e8:	7162      	strb	r2, [r4, #5]
    39ea:	71a2      	strb	r2, [r4, #6]
    39ec:	e004      	b.n	39f8 <nwkTxFrame+0x40>
	} else {
		header->macDstPanId = nwkIb.panId;
    39ee:	4a1d      	ldr	r2, [pc, #116]	; (3a64 <nwkTxFrame+0xac>)
    39f0:	7891      	ldrb	r1, [r2, #2]
    39f2:	7161      	strb	r1, [r4, #5]
    39f4:	78d2      	ldrb	r2, [r2, #3]
    39f6:	71a2      	strb	r2, [r4, #6]
	}

#ifdef NWK_ENABLE_ROUTING
	if (0 == (frame->tx.control & NWK_TX_CONTROL_DIRECT_LINK) &&
    39f8:	2205      	movs	r2, #5
    39fa:	421a      	tst	r2, r3
    39fc:	d103      	bne.n	3a06 <nwkTxFrame+0x4e>
			0 ==
			(frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID)) {
		nwkRoutePrepareTx(frame);
    39fe:	0020      	movs	r0, r4
    3a00:	4b19      	ldr	r3, [pc, #100]	; (3a68 <nwkTxFrame+0xb0>)
    3a02:	4798      	blx	r3
    3a04:	e003      	b.n	3a0e <nwkTxFrame+0x56>
	} else
#endif
	header->macDstAddr = header->nwkDstAddr;
    3a06:	7be2      	ldrb	r2, [r4, #15]
    3a08:	7c23      	ldrb	r3, [r4, #16]
    3a0a:	71e2      	strb	r2, [r4, #7]
    3a0c:	7223      	strb	r3, [r4, #8]

	header->macSrcAddr = nwkIb.addr;
    3a0e:	4915      	ldr	r1, [pc, #84]	; (3a64 <nwkTxFrame+0xac>)
    3a10:	780b      	ldrb	r3, [r1, #0]
    3a12:	7263      	strb	r3, [r4, #9]
    3a14:	784b      	ldrb	r3, [r1, #1]
    3a16:	72a3      	strb	r3, [r4, #10]
	header->macSeq = ++nwkIb.macSeqNum;
    3a18:	794b      	ldrb	r3, [r1, #5]
    3a1a:	3301      	adds	r3, #1
    3a1c:	b2db      	uxtb	r3, r3
    3a1e:	714b      	strb	r3, [r1, #5]
    3a20:	7123      	strb	r3, [r4, #4]

	if (NWK_BROADCAST_ADDR == header->macDstAddr) {
    3a22:	79e1      	ldrb	r1, [r4, #7]
    3a24:	7a23      	ldrb	r3, [r4, #8]
    3a26:	021b      	lsls	r3, r3, #8
    3a28:	430b      	orrs	r3, r1
    3a2a:	4a10      	ldr	r2, [pc, #64]	; (3a6c <nwkTxFrame+0xb4>)
    3a2c:	4293      	cmp	r3, r2
    3a2e:	d10e      	bne.n	3a4e <nwkTxFrame+0x96>
		header->macFcf = 0x8841;
    3a30:	2341      	movs	r3, #65	; 0x41
    3a32:	70a3      	strb	r3, [r4, #2]
    3a34:	3bb9      	subs	r3, #185	; 0xb9
    3a36:	70e3      	strb	r3, [r4, #3]
		frame->tx.timeout = (rand() & NWK_TX_DELAY_JITTER_MASK) + 1;
    3a38:	4b0d      	ldr	r3, [pc, #52]	; (3a70 <nwkTxFrame+0xb8>)
    3a3a:	4798      	blx	r3
    3a3c:	2307      	movs	r3, #7
    3a3e:	4018      	ands	r0, r3
    3a40:	3001      	adds	r0, #1
    3a42:	337f      	adds	r3, #127	; 0x7f
    3a44:	54e0      	strb	r0, [r4, r3]
    3a46:	3486      	adds	r4, #134	; 0x86
    3a48:	2300      	movs	r3, #0
    3a4a:	7063      	strb	r3, [r4, #1]
    3a4c:	e009      	b.n	3a62 <nwkTxFrame+0xaa>
	} else {
		header->macFcf = 0x8861;
    3a4e:	2361      	movs	r3, #97	; 0x61
    3a50:	70a3      	strb	r3, [r4, #2]
    3a52:	3bd9      	subs	r3, #217	; 0xd9
    3a54:	70e3      	strb	r3, [r4, #3]
		frame->tx.timeout = 0;
    3a56:	2200      	movs	r2, #0
    3a58:	33fe      	adds	r3, #254	; 0xfe
    3a5a:	54e2      	strb	r2, [r4, r3]
    3a5c:	3486      	adds	r4, #134	; 0x86
    3a5e:	2300      	movs	r3, #0
    3a60:	7063      	strb	r3, [r4, #1]
	}
}
    3a62:	bd10      	pop	{r4, pc}
    3a64:	2000085c 	.word	0x2000085c
    3a68:	00003021 	.word	0x00003021
    3a6c:	0000ffff 	.word	0x0000ffff
    3a70:	00006dbd 	.word	0x00006dbd

00003a74 <nwkTxBroadcastFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxBroadcastFrame(NwkFrame_t *frame)
{
    3a74:	b570      	push	{r4, r5, r6, lr}
    3a76:	0005      	movs	r5, r0
	NwkFrame_t *newFrame;

	if (NULL == (newFrame = nwkFrameAlloc())) {
    3a78:	4b1c      	ldr	r3, [pc, #112]	; (3aec <nwkTxBroadcastFrame+0x78>)
    3a7a:	4798      	blx	r3
    3a7c:	1e04      	subs	r4, r0, #0
    3a7e:	d033      	beq.n	3ae8 <nwkTxBroadcastFrame+0x74>
		return;
	}

	newFrame->state = NWK_TX_STATE_DELAY;
    3a80:	2312      	movs	r3, #18
    3a82:	7003      	strb	r3, [r0, #0]
	newFrame->size = frame->size;
    3a84:	786b      	ldrb	r3, [r5, #1]
    3a86:	7043      	strb	r3, [r0, #1]
	newFrame->tx.status = NWK_SUCCESS_STATUS;
    3a88:	2200      	movs	r2, #0
    3a8a:	2385      	movs	r3, #133	; 0x85
    3a8c:	54c2      	strb	r2, [r0, r3]
	newFrame->tx.timeout = (rand() & NWK_TX_DELAY_JITTER_MASK) + 1;
    3a8e:	4b18      	ldr	r3, [pc, #96]	; (3af0 <nwkTxBroadcastFrame+0x7c>)
    3a90:	4798      	blx	r3
    3a92:	2307      	movs	r3, #7
    3a94:	4018      	ands	r0, r3
    3a96:	3001      	adds	r0, #1
    3a98:	337f      	adds	r3, #127	; 0x7f
    3a9a:	54e0      	strb	r0, [r4, r3]
    3a9c:	0c00      	lsrs	r0, r0, #16
    3a9e:	0023      	movs	r3, r4
    3aa0:	3386      	adds	r3, #134	; 0x86
    3aa2:	7058      	strb	r0, [r3, #1]
	newFrame->tx.confirm = NULL;
    3aa4:	2200      	movs	r2, #0
    3aa6:	2389      	movs	r3, #137	; 0x89
    3aa8:	54e2      	strb	r2, [r4, r3]
    3aaa:	0023      	movs	r3, r4
    3aac:	3389      	adds	r3, #137	; 0x89
    3aae:	705a      	strb	r2, [r3, #1]
    3ab0:	709a      	strb	r2, [r3, #2]
    3ab2:	70da      	strb	r2, [r3, #3]
	memcpy(newFrame->data, frame->data, frame->size);
    3ab4:	1ca0      	adds	r0, r4, #2
    3ab6:	786a      	ldrb	r2, [r5, #1]
    3ab8:	1ca9      	adds	r1, r5, #2
    3aba:	4b0e      	ldr	r3, [pc, #56]	; (3af4 <nwkTxBroadcastFrame+0x80>)
    3abc:	4798      	blx	r3

	newFrame->header.macFcf = 0x8841;
    3abe:	2341      	movs	r3, #65	; 0x41
    3ac0:	70a3      	strb	r3, [r4, #2]
    3ac2:	3bb9      	subs	r3, #185	; 0xb9
    3ac4:	70e3      	strb	r3, [r4, #3]
	newFrame->header.macDstAddr = NWK_BROADCAST_ADDR;
    3ac6:	3377      	adds	r3, #119	; 0x77
    3ac8:	71e3      	strb	r3, [r4, #7]
    3aca:	7223      	strb	r3, [r4, #8]
	newFrame->header.macDstPanId = frame->header.macDstPanId;
    3acc:	796a      	ldrb	r2, [r5, #5]
    3ace:	79ab      	ldrb	r3, [r5, #6]
    3ad0:	7162      	strb	r2, [r4, #5]
    3ad2:	71a3      	strb	r3, [r4, #6]
	newFrame->header.macSrcAddr = nwkIb.addr;
    3ad4:	4a08      	ldr	r2, [pc, #32]	; (3af8 <nwkTxBroadcastFrame+0x84>)
    3ad6:	7813      	ldrb	r3, [r2, #0]
    3ad8:	7263      	strb	r3, [r4, #9]
    3ada:	7853      	ldrb	r3, [r2, #1]
    3adc:	72a3      	strb	r3, [r4, #10]
	newFrame->header.macSeq = ++nwkIb.macSeqNum;
    3ade:	7953      	ldrb	r3, [r2, #5]
    3ae0:	3301      	adds	r3, #1
    3ae2:	b2db      	uxtb	r3, r3
    3ae4:	7153      	strb	r3, [r2, #5]
    3ae6:	7123      	strb	r3, [r4, #4]
}
    3ae8:	bd70      	pop	{r4, r5, r6, pc}
    3aea:	46c0      	nop			; (mov r8, r8)
    3aec:	00002d05 	.word	0x00002d05
    3af0:	00006dbd 	.word	0x00006dbd
    3af4:	00006c8d 	.word	0x00006c8d
    3af8:	2000085c 	.word	0x2000085c

00003afc <nwkTxAckReceived>:

/*************************************************************************//**
*****************************************************************************/
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
    3afc:	b570      	push	{r4, r5, r6, lr}
	NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
	NwkFrame_t *frame = NULL;

	if (sizeof(NwkCommandAck_t) != ind->size) {
    3afe:	7b02      	ldrb	r2, [r0, #12]
		return false;
    3b00:	2300      	movs	r3, #0
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
	NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
	NwkFrame_t *frame = NULL;

	if (sizeof(NwkCommandAck_t) != ind->size) {
    3b02:	2a03      	cmp	r2, #3
    3b04:	d115      	bne.n	3b32 <nwkTxAckReceived+0x36>
    3b06:	e00d      	b.n	3b24 <nwkTxAckReceived+0x28>
		return false;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_TX_STATE_WAIT_ACK == frame->state &&
    3b08:	7803      	ldrb	r3, [r0, #0]
    3b0a:	2b16      	cmp	r3, #22
    3b0c:	d10d      	bne.n	3b2a <nwkTxAckReceived+0x2e>
    3b0e:	7b02      	ldrb	r2, [r0, #12]
    3b10:	786b      	ldrb	r3, [r5, #1]
    3b12:	429a      	cmp	r2, r3
    3b14:	d109      	bne.n	3b2a <nwkTxAckReceived+0x2e>
				frame->header.nwkSeq == command->seq) {
			frame->state = NWK_TX_STATE_CONFIRM;
    3b16:	2317      	movs	r3, #23
    3b18:	7003      	strb	r3, [r0, #0]
			frame->tx.control = command->control;
    3b1a:	78aa      	ldrb	r2, [r5, #2]
    3b1c:	3371      	adds	r3, #113	; 0x71
    3b1e:	54c2      	strb	r2, [r0, r3]
			return true;
    3b20:	3b87      	subs	r3, #135	; 0x87
    3b22:	e006      	b.n	3b32 <nwkTxAckReceived+0x36>

/*************************************************************************//**
*****************************************************************************/
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
	NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
    3b24:	6885      	ldr	r5, [r0, #8]
    3b26:	2000      	movs	r0, #0

	if (sizeof(NwkCommandAck_t) != ind->size) {
		return false;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
    3b28:	4c03      	ldr	r4, [pc, #12]	; (3b38 <nwkTxAckReceived+0x3c>)
    3b2a:	47a0      	blx	r4
    3b2c:	2800      	cmp	r0, #0
    3b2e:	d1eb      	bne.n	3b08 <nwkTxAckReceived+0xc>
			frame->tx.control = command->control;
			return true;
		}
	}

	return false;
    3b30:	2300      	movs	r3, #0
}
    3b32:	0018      	movs	r0, r3
    3b34:	bd70      	pop	{r4, r5, r6, pc}
    3b36:	46c0      	nop			; (mov r8, r8)
    3b38:	00002d89 	.word	0x00002d89

00003b3c <nwkTxEncryptConf>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxEncryptConf(NwkFrame_t *frame)
{
	frame->state = NWK_TX_STATE_DELAY;
    3b3c:	2312      	movs	r3, #18
    3b3e:	7003      	strb	r3, [r0, #0]
}
    3b40:	4770      	bx	lr
    3b42:	46c0      	nop			; (mov r8, r8)

00003b44 <PHY_DataConf>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
	nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    3b44:	4b0d      	ldr	r3, [pc, #52]	; (3b7c <PHY_DataConf+0x38>)
    3b46:	681b      	ldr	r3, [r3, #0]

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
	switch (status) {
    3b48:	2801      	cmp	r0, #1
    3b4a:	d005      	beq.n	3b58 <PHY_DataConf+0x14>
    3b4c:	2800      	cmp	r0, #0
    3b4e:	d007      	beq.n	3b60 <PHY_DataConf+0x1c>

	case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
		return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;

	case PHY_STATUS_NO_ACK:
		return NWK_PHY_NO_ACK_STATUS;
    3b50:	2221      	movs	r2, #33	; 0x21

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
	switch (status) {
    3b52:	2802      	cmp	r0, #2
    3b54:	d005      	beq.n	3b62 <PHY_DataConf+0x1e>
    3b56:	e001      	b.n	3b5c <PHY_DataConf+0x18>
	case PHY_STATUS_SUCCESS:
		return NWK_SUCCESS_STATUS;

	case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
		return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;
    3b58:	2220      	movs	r2, #32
    3b5a:	e002      	b.n	3b62 <PHY_DataConf+0x1e>

	case PHY_STATUS_NO_ACK:
		return NWK_PHY_NO_ACK_STATUS;

	default:
		return NWK_ERROR_STATUS;
    3b5c:	2201      	movs	r2, #1
    3b5e:	e000      	b.n	3b62 <PHY_DataConf+0x1e>
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
	switch (status) {
	case PHY_STATUS_SUCCESS:
		return NWK_SUCCESS_STATUS;
    3b60:	2200      	movs	r2, #0

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
	nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    3b62:	2185      	movs	r1, #133	; 0x85
    3b64:	545a      	strb	r2, [r3, r1]
	nwkTxPhyActiveFrame->state = NWK_TX_STATE_SENT;
    3b66:	2215      	movs	r2, #21
    3b68:	701a      	strb	r2, [r3, #0]
	nwkTxPhyActiveFrame = NULL;
    3b6a:	2200      	movs	r2, #0
    3b6c:	4b03      	ldr	r3, [pc, #12]	; (3b7c <PHY_DataConf+0x38>)
    3b6e:	601a      	str	r2, [r3, #0]
	nwkIb.lock--;
    3b70:	4903      	ldr	r1, [pc, #12]	; (3b80 <PHY_DataConf+0x3c>)
    3b72:	3258      	adds	r2, #88	; 0x58
    3b74:	5a8b      	ldrh	r3, [r1, r2]
    3b76:	3b01      	subs	r3, #1
    3b78:	528b      	strh	r3, [r1, r2]
}
    3b7a:	4770      	bx	lr
    3b7c:	200006f0 	.word	0x200006f0
    3b80:	2000085c 	.word	0x2000085c

00003b84 <nwkTxTaskHandler>:

/*************************************************************************//**
*  @brief Tx Module task handler
*****************************************************************************/
void nwkTxTaskHandler(void)
{
    3b84:	b570      	push	{r4, r5, r6, lr}
	NwkFrame_t *frame = NULL;
    3b86:	2400      	movs	r4, #0

	while (NULL != (frame = nwkFrameNext(frame))) {
    3b88:	4d38      	ldr	r5, [pc, #224]	; (3c6c <nwkTxTaskHandler+0xe8>)
		switch (frame->state) {
    3b8a:	4e39      	ldr	r6, [pc, #228]	; (3c70 <nwkTxTaskHandler+0xec>)
*****************************************************************************/
void nwkTxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    3b8c:	e068      	b.n	3c60 <nwkTxTaskHandler+0xdc>
		switch (frame->state) {
    3b8e:	7823      	ldrb	r3, [r4, #0]
    3b90:	3b10      	subs	r3, #16
    3b92:	b2da      	uxtb	r2, r3
    3b94:	2a07      	cmp	r2, #7
    3b96:	d863      	bhi.n	3c60 <nwkTxTaskHandler+0xdc>
    3b98:	0093      	lsls	r3, r2, #2
    3b9a:	58f3      	ldr	r3, [r6, r3]
    3b9c:	469f      	mov	pc, r3
#ifdef NWK_ENABLE_SECURITY
		case NWK_TX_STATE_ENCRYPT:
		{
			nwkSecurityProcess(frame, true);
    3b9e:	2101      	movs	r1, #1
    3ba0:	0020      	movs	r0, r4
    3ba2:	4b34      	ldr	r3, [pc, #208]	; (3c74 <nwkTxTaskHandler+0xf0>)
    3ba4:	4798      	blx	r3
		}
		break;
    3ba6:	e05b      	b.n	3c60 <nwkTxTaskHandler+0xdc>
#endif

		case NWK_TX_STATE_DELAY:
		{
			if (frame->tx.timeout > 0) {
    3ba8:	2386      	movs	r3, #134	; 0x86
    3baa:	5ce2      	ldrb	r2, [r4, r3]
    3bac:	3301      	adds	r3, #1
    3bae:	5ce3      	ldrb	r3, [r4, r3]
    3bb0:	021b      	lsls	r3, r3, #8
    3bb2:	4313      	orrs	r3, r2
    3bb4:	d005      	beq.n	3bc2 <nwkTxTaskHandler+0x3e>
				frame->state = NWK_TX_STATE_WAIT_DELAY;
    3bb6:	2311      	movs	r3, #17
    3bb8:	7023      	strb	r3, [r4, #0]
				SYS_TimerStart(&nwkTxDelayTimer);
    3bba:	482f      	ldr	r0, [pc, #188]	; (3c78 <nwkTxTaskHandler+0xf4>)
    3bbc:	4b2f      	ldr	r3, [pc, #188]	; (3c7c <nwkTxTaskHandler+0xf8>)
    3bbe:	4798      	blx	r3
    3bc0:	e04e      	b.n	3c60 <nwkTxTaskHandler+0xdc>
			} else {
				frame->state = NWK_TX_STATE_SEND;
    3bc2:	2313      	movs	r3, #19
    3bc4:	7023      	strb	r3, [r4, #0]
    3bc6:	e04b      	b.n	3c60 <nwkTxTaskHandler+0xdc>
		}
		break;

		case NWK_TX_STATE_SEND:
		{
			if (NULL == nwkTxPhyActiveFrame) {
    3bc8:	4b2d      	ldr	r3, [pc, #180]	; (3c80 <nwkTxTaskHandler+0xfc>)
    3bca:	681b      	ldr	r3, [r3, #0]
    3bcc:	2b00      	cmp	r3, #0
    3bce:	d147      	bne.n	3c60 <nwkTxTaskHandler+0xdc>
				nwkTxPhyActiveFrame = frame;
    3bd0:	4b2b      	ldr	r3, [pc, #172]	; (3c80 <nwkTxTaskHandler+0xfc>)
    3bd2:	601c      	str	r4, [r3, #0]
				frame->state = NWK_TX_STATE_WAIT_CONF;
    3bd4:	2314      	movs	r3, #20
    3bd6:	7023      	strb	r3, [r4, #0]
				PHY_DataReq(&(frame->size));
    3bd8:	1c60      	adds	r0, r4, #1
    3bda:	4b2a      	ldr	r3, [pc, #168]	; (3c84 <nwkTxTaskHandler+0x100>)
    3bdc:	4798      	blx	r3
				nwkIb.lock++;
    3bde:	492a      	ldr	r1, [pc, #168]	; (3c88 <nwkTxTaskHandler+0x104>)
    3be0:	2258      	movs	r2, #88	; 0x58
    3be2:	5a8b      	ldrh	r3, [r1, r2]
    3be4:	3301      	adds	r3, #1
    3be6:	528b      	strh	r3, [r1, r2]
    3be8:	e03a      	b.n	3c60 <nwkTxTaskHandler+0xdc>
		case NWK_TX_STATE_WAIT_CONF:
			break;

		case NWK_TX_STATE_SENT:
		{
			if (NWK_SUCCESS_STATUS == frame->tx.status) {
    3bea:	2385      	movs	r3, #133	; 0x85
    3bec:	5ce3      	ldrb	r3, [r4, r3]
    3bee:	2b00      	cmp	r3, #0
    3bf0:	d11a      	bne.n	3c28 <nwkTxTaskHandler+0xa4>
				if (frame->header.nwkSrcAddr == nwkIb.addr &&
    3bf2:	7b62      	ldrb	r2, [r4, #13]
    3bf4:	7ba3      	ldrb	r3, [r4, #14]
    3bf6:	021b      	lsls	r3, r3, #8
    3bf8:	4923      	ldr	r1, [pc, #140]	; (3c88 <nwkTxTaskHandler+0x104>)
    3bfa:	8809      	ldrh	r1, [r1, #0]
    3bfc:	4313      	orrs	r3, r2
    3bfe:	4299      	cmp	r1, r3
    3c00:	d10f      	bne.n	3c22 <nwkTxTaskHandler+0x9e>
    3c02:	7ae3      	ldrb	r3, [r4, #11]
    3c04:	07db      	lsls	r3, r3, #31
    3c06:	d50c      	bpl.n	3c22 <nwkTxTaskHandler+0x9e>
						frame->header.nwkFcf.
						ackRequest) {
					frame->state = NWK_TX_STATE_WAIT_ACK;
    3c08:	2316      	movs	r3, #22
    3c0a:	7023      	strb	r3, [r4, #0]
					frame->tx.timeout = NWK_ACK_WAIT_TIME /
    3c0c:	2215      	movs	r2, #21
    3c0e:	3370      	adds	r3, #112	; 0x70
    3c10:	54e2      	strb	r2, [r4, r3]
    3c12:	2200      	movs	r2, #0
    3c14:	0023      	movs	r3, r4
    3c16:	3386      	adds	r3, #134	; 0x86
    3c18:	705a      	strb	r2, [r3, #1]
							NWK_TX_ACK_WAIT_TIMER_INTERVAL
							+ 1;
					SYS_TimerStart(&nwkTxAckWaitTimer);
    3c1a:	481c      	ldr	r0, [pc, #112]	; (3c8c <nwkTxTaskHandler+0x108>)
    3c1c:	4b17      	ldr	r3, [pc, #92]	; (3c7c <nwkTxTaskHandler+0xf8>)
    3c1e:	4798      	blx	r3
    3c20:	e01e      	b.n	3c60 <nwkTxTaskHandler+0xdc>
				} else {
					frame->state = NWK_TX_STATE_CONFIRM;
    3c22:	2317      	movs	r3, #23
    3c24:	7023      	strb	r3, [r4, #0]
    3c26:	e01b      	b.n	3c60 <nwkTxTaskHandler+0xdc>
				}
			} else {
				frame->state = NWK_TX_STATE_CONFIRM;
    3c28:	2317      	movs	r3, #23
    3c2a:	7023      	strb	r3, [r4, #0]
    3c2c:	e018      	b.n	3c60 <nwkTxTaskHandler+0xdc>
			break;

		case NWK_TX_STATE_CONFIRM:
		{
#ifdef NWK_ENABLE_ROUTING
			nwkRouteFrameSent(frame);
    3c2e:	0020      	movs	r0, r4
    3c30:	4b17      	ldr	r3, [pc, #92]	; (3c90 <nwkTxTaskHandler+0x10c>)
    3c32:	4798      	blx	r3
#endif
			if (NULL == frame->tx.confirm) {
    3c34:	2389      	movs	r3, #137	; 0x89
    3c36:	5ce0      	ldrb	r0, [r4, r3]
    3c38:	3301      	adds	r3, #1
    3c3a:	5ce2      	ldrb	r2, [r4, r3]
    3c3c:	0212      	lsls	r2, r2, #8
    3c3e:	4302      	orrs	r2, r0
    3c40:	3301      	adds	r3, #1
    3c42:	5ce3      	ldrb	r3, [r4, r3]
    3c44:	041b      	lsls	r3, r3, #16
    3c46:	4313      	orrs	r3, r2
    3c48:	001a      	movs	r2, r3
    3c4a:	238c      	movs	r3, #140	; 0x8c
    3c4c:	5ce3      	ldrb	r3, [r4, r3]
    3c4e:	061b      	lsls	r3, r3, #24
    3c50:	4313      	orrs	r3, r2
    3c52:	d103      	bne.n	3c5c <nwkTxTaskHandler+0xd8>
				nwkFrameFree(frame);
    3c54:	0020      	movs	r0, r4
    3c56:	4b0f      	ldr	r3, [pc, #60]	; (3c94 <nwkTxTaskHandler+0x110>)
    3c58:	4798      	blx	r3
    3c5a:	e001      	b.n	3c60 <nwkTxTaskHandler+0xdc>
			} else {
				frame->tx.confirm(frame);
    3c5c:	0020      	movs	r0, r4
    3c5e:	4798      	blx	r3
*****************************************************************************/
void nwkTxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    3c60:	0020      	movs	r0, r4
    3c62:	47a8      	blx	r5
    3c64:	1e04      	subs	r4, r0, #0
    3c66:	d192      	bne.n	3b8e <nwkTxTaskHandler+0xa>

		default:
			break;
		}
	}
}
    3c68:	bd70      	pop	{r4, r5, r6, pc}
    3c6a:	46c0      	nop			; (mov r8, r8)
    3c6c:	00002d89 	.word	0x00002d89
    3c70:	00007e5c 	.word	0x00007e5c
    3c74:	00003675 	.word	0x00003675
    3c78:	200006f4 	.word	0x200006f4
    3c7c:	00004049 	.word	0x00004049
    3c80:	200006f0 	.word	0x200006f0
    3c84:	00003ddd 	.word	0x00003ddd
    3c88:	2000085c 	.word	0x2000085c
    3c8c:	200006dc 	.word	0x200006dc
    3c90:	00002f91 	.word	0x00002f91
    3c94:	00002d75 	.word	0x00002d75

00003c98 <phyTrxSetState>:
}

/*************************************************************************//**
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
    3c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c9a:	0004      	movs	r4, r0

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    3c9c:	4f0b      	ldr	r7, [pc, #44]	; (3ccc <phyTrxSetState+0x34>)
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    3c9e:	4e0c      	ldr	r6, [pc, #48]	; (3cd0 <phyTrxSetState+0x38>)
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
	do { phyWriteRegister(TRX_STATE_REG, TRX_CMD_FORCE_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    3ca0:	251f      	movs	r5, #31

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    3ca2:	2103      	movs	r1, #3
    3ca4:	2002      	movs	r0, #2
    3ca6:	47b8      	blx	r7
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    3ca8:	2001      	movs	r0, #1
    3caa:	47b0      	blx	r6
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
	do { phyWriteRegister(TRX_STATE_REG, TRX_CMD_FORCE_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    3cac:	4028      	ands	r0, r5
    3cae:	2808      	cmp	r0, #8
    3cb0:	d1f7      	bne.n	3ca2 <phyTrxSetState+0xa>

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    3cb2:	4f06      	ldr	r7, [pc, #24]	; (3ccc <phyTrxSetState+0x34>)
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    3cb4:	4e06      	ldr	r6, [pc, #24]	; (3cd0 <phyTrxSetState+0x38>)
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));

	do { phyWriteRegister(TRX_STATE_REG,
			     state); } while (state !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    3cb6:	251f      	movs	r5, #31

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    3cb8:	0021      	movs	r1, r4
    3cba:	2002      	movs	r0, #2
    3cbc:	47b8      	blx	r7
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    3cbe:	2001      	movs	r0, #1
    3cc0:	47b0      	blx	r6
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));

	do { phyWriteRegister(TRX_STATE_REG,
			     state); } while (state !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    3cc2:	4028      	ands	r0, r5
    3cc4:	4284      	cmp	r4, r0
    3cc6:	d1f7      	bne.n	3cb8 <phyTrxSetState+0x20>
}
    3cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3cca:	46c0      	nop			; (mov r8, r8)
    3ccc:	00004695 	.word	0x00004695
    3cd0:	00004599 	.word	0x00004599

00003cd4 <phySetRxState>:
}

/*************************************************************************//**
*****************************************************************************/
static void phySetRxState(void)
{
    3cd4:	b510      	push	{r4, lr}
	phyTrxSetState(TRX_CMD_TRX_OFF);
    3cd6:	2008      	movs	r0, #8
    3cd8:	4b06      	ldr	r3, [pc, #24]	; (3cf4 <phySetRxState+0x20>)
    3cda:	4798      	blx	r3
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    3cdc:	200f      	movs	r0, #15
    3cde:	4b06      	ldr	r3, [pc, #24]	; (3cf8 <phySetRxState+0x24>)
    3ce0:	4798      	blx	r3
{
	phyTrxSetState(TRX_CMD_TRX_OFF);

	phyReadRegister(IRQ_STATUS_REG);

	if (phyRxState) {
    3ce2:	4b06      	ldr	r3, [pc, #24]	; (3cfc <phySetRxState+0x28>)
    3ce4:	781b      	ldrb	r3, [r3, #0]
    3ce6:	2b00      	cmp	r3, #0
    3ce8:	d002      	beq.n	3cf0 <phySetRxState+0x1c>
		phyTrxSetState(TRX_CMD_RX_AACK_ON);
    3cea:	2016      	movs	r0, #22
    3cec:	4b01      	ldr	r3, [pc, #4]	; (3cf4 <phySetRxState+0x20>)
    3cee:	4798      	blx	r3
	}
}
    3cf0:	bd10      	pop	{r4, pc}
    3cf2:	46c0      	nop			; (mov r8, r8)
    3cf4:	00003c99 	.word	0x00003c99
    3cf8:	00004599 	.word	0x00004599
    3cfc:	20000789 	.word	0x20000789

00003d00 <PHY_Init>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void PHY_Init(void)
{
    3d00:	b570      	push	{r4, r5, r6, lr}
	trx_spi_init();
    3d02:	4b0e      	ldr	r3, [pc, #56]	; (3d3c <PHY_Init+0x3c>)
    3d04:	4798      	blx	r3
	PhyReset();
    3d06:	4b0e      	ldr	r3, [pc, #56]	; (3d40 <PHY_Init+0x40>)
    3d08:	4798      	blx	r3
	phyRxState = false;
    3d0a:	2200      	movs	r2, #0
    3d0c:	4b0d      	ldr	r3, [pc, #52]	; (3d44 <PHY_Init+0x44>)
    3d0e:	701a      	strb	r2, [r3, #0]
	phyState = PHY_STATE_IDLE;
    3d10:	3201      	adds	r2, #1
    3d12:	4b0d      	ldr	r3, [pc, #52]	; (3d48 <PHY_Init+0x48>)
    3d14:	701a      	strb	r2, [r3, #0]

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    3d16:	4e0d      	ldr	r6, [pc, #52]	; (3d4c <PHY_Init+0x4c>)
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    3d18:	4d0d      	ldr	r5, [pc, #52]	; (3d50 <PHY_Init+0x50>)
	phyRxState = false;
	phyState = PHY_STATE_IDLE;

	do {phyWriteRegister(TRX_STATE_REG, TRX_CMD_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    3d1a:	241f      	movs	r4, #31

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    3d1c:	2108      	movs	r1, #8
    3d1e:	2002      	movs	r0, #2
    3d20:	47b0      	blx	r6
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    3d22:	2001      	movs	r0, #1
    3d24:	47a8      	blx	r5
	phyRxState = false;
	phyState = PHY_STATE_IDLE;

	do {phyWriteRegister(TRX_STATE_REG, TRX_CMD_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    3d26:	4020      	ands	r0, r4
    3d28:	2808      	cmp	r0, #8
    3d2a:	d1f7      	bne.n	3d1c <PHY_Init+0x1c>

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    3d2c:	212e      	movs	r1, #46	; 0x2e
    3d2e:	3804      	subs	r0, #4
    3d30:	4c06      	ldr	r4, [pc, #24]	; (3d4c <PHY_Init+0x4c>)
    3d32:	47a0      	blx	r4
    3d34:	21a0      	movs	r1, #160	; 0xa0
    3d36:	200c      	movs	r0, #12
    3d38:	47a0      	blx	r4
			(1 << TX_AUTO_CRC_ON) | (3 << SPI_CMD_MODE) |
			(1 << IRQ_MASK_MODE));

	phyWriteRegister(TRX_CTRL_2_REG,
			(1 << RX_SAFE_MODE) | (1 << OQPSK_SCRAM_EN));
}
    3d3a:	bd70      	pop	{r4, r5, r6, pc}
    3d3c:	0000444d 	.word	0x0000444d
    3d40:	00004569 	.word	0x00004569
    3d44:	20000789 	.word	0x20000789
    3d48:	20000788 	.word	0x20000788
    3d4c:	00004695 	.word	0x00004695
    3d50:	00004599 	.word	0x00004599

00003d54 <PHY_SetRxState>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetRxState(bool rx)
{
    3d54:	b510      	push	{r4, lr}
	phyRxState = rx;
    3d56:	4b02      	ldr	r3, [pc, #8]	; (3d60 <PHY_SetRxState+0xc>)
    3d58:	7018      	strb	r0, [r3, #0]
	phySetRxState();
    3d5a:	4b02      	ldr	r3, [pc, #8]	; (3d64 <PHY_SetRxState+0x10>)
    3d5c:	4798      	blx	r3
}
    3d5e:	bd10      	pop	{r4, pc}
    3d60:	20000789 	.word	0x20000789
    3d64:	00003cd5 	.word	0x00003cd5

00003d68 <PHY_SetChannel>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetChannel(uint8_t channel)
{
    3d68:	b510      	push	{r4, lr}
    3d6a:	0004      	movs	r4, r0
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    3d6c:	2008      	movs	r0, #8
    3d6e:	4b06      	ldr	r3, [pc, #24]	; (3d88 <PHY_SetChannel+0x20>)
    3d70:	4798      	blx	r3

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    3d72:	231f      	movs	r3, #31
    3d74:	0001      	movs	r1, r0
    3d76:	4399      	bics	r1, r3
    3d78:	0020      	movs	r0, r4
    3d7a:	4308      	orrs	r0, r1
    3d7c:	b2c1      	uxtb	r1, r0
    3d7e:	2008      	movs	r0, #8
    3d80:	4b02      	ldr	r3, [pc, #8]	; (3d8c <PHY_SetChannel+0x24>)
    3d82:	4798      	blx	r3
{
	uint8_t reg;

	reg = phyReadRegister(PHY_CC_CCA_REG) & ~0x1f;
	phyWriteRegister(PHY_CC_CCA_REG, reg | channel);
}
    3d84:	bd10      	pop	{r4, pc}
    3d86:	46c0      	nop			; (mov r8, r8)
    3d88:	00004599 	.word	0x00004599
    3d8c:	00004695 	.word	0x00004695

00003d90 <PHY_SetPanId>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetPanId(uint16_t panId)
{
    3d90:	b530      	push	{r4, r5, lr}
    3d92:	b083      	sub	sp, #12
    3d94:	466b      	mov	r3, sp
    3d96:	1d9d      	adds	r5, r3, #6
    3d98:	80d8      	strh	r0, [r3, #6]

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    3d9a:	b2c1      	uxtb	r1, r0
    3d9c:	2022      	movs	r0, #34	; 0x22
    3d9e:	4c03      	ldr	r4, [pc, #12]	; (3dac <PHY_SetPanId+0x1c>)
    3da0:	47a0      	blx	r4
    3da2:	7869      	ldrb	r1, [r5, #1]
    3da4:	2023      	movs	r0, #35	; 0x23
    3da6:	47a0      	blx	r4
{
	uint8_t *d = (uint8_t *)&panId;

	phyWriteRegister(PAN_ID_0_REG, d[0]);
	phyWriteRegister(PAN_ID_1_REG, d[1]);
}
    3da8:	b003      	add	sp, #12
    3daa:	bd30      	pop	{r4, r5, pc}
    3dac:	00004695 	.word	0x00004695

00003db0 <PHY_SetShortAddr>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetShortAddr(uint16_t addr)
{
    3db0:	b570      	push	{r4, r5, r6, lr}
    3db2:	b082      	sub	sp, #8
    3db4:	466b      	mov	r3, sp
    3db6:	1d9c      	adds	r4, r3, #6
    3db8:	80d8      	strh	r0, [r3, #6]
	uint8_t *d = (uint8_t *)&addr;

	phyWriteRegister(SHORT_ADDR_0_REG, d[0]);
    3dba:	b2c5      	uxtb	r5, r0

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    3dbc:	0029      	movs	r1, r5
    3dbe:	2020      	movs	r0, #32
    3dc0:	4e05      	ldr	r6, [pc, #20]	; (3dd8 <PHY_SetShortAddr+0x28>)
    3dc2:	47b0      	blx	r6
void PHY_SetShortAddr(uint16_t addr)
{
	uint8_t *d = (uint8_t *)&addr;

	phyWriteRegister(SHORT_ADDR_0_REG, d[0]);
	phyWriteRegister(SHORT_ADDR_1_REG, d[1]);
    3dc4:	7864      	ldrb	r4, [r4, #1]

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    3dc6:	0021      	movs	r1, r4
    3dc8:	2021      	movs	r0, #33	; 0x21
    3dca:	47b0      	blx	r6
    3dcc:	192c      	adds	r4, r5, r4
    3dce:	b2e1      	uxtb	r1, r4
    3dd0:	202d      	movs	r0, #45	; 0x2d
    3dd2:	47b0      	blx	r6
	uint8_t *d = (uint8_t *)&addr;

	phyWriteRegister(SHORT_ADDR_0_REG, d[0]);
	phyWriteRegister(SHORT_ADDR_1_REG, d[1]);
	phyWriteRegister(CSMA_SEED_0_REG, d[0] + d[1]);
}
    3dd4:	b002      	add	sp, #8
    3dd6:	bd70      	pop	{r4, r5, r6, pc}
    3dd8:	00004695 	.word	0x00004695

00003ddc <PHY_DataReq>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_DataReq(uint8_t *data)
{
    3ddc:	b510      	push	{r4, lr}
    3dde:	0004      	movs	r4, r0
	phyTrxSetState(TRX_CMD_TX_ARET_ON);
    3de0:	2019      	movs	r0, #25
    3de2:	4b0c      	ldr	r3, [pc, #48]	; (3e14 <PHY_DataReq+0x38>)
    3de4:	4798      	blx	r3
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    3de6:	200f      	movs	r0, #15
    3de8:	4b0b      	ldr	r3, [pc, #44]	; (3e18 <PHY_DataReq+0x3c>)
    3dea:	4798      	blx	r3
	phyReadRegister(IRQ_STATUS_REG);

	/* size of the buffer is sent as first byte of the data
	 * and data starts from second byte.
	 */
	data[0] += 2;
    3dec:	7821      	ldrb	r1, [r4, #0]
    3dee:	1c8b      	adds	r3, r1, #2
    3df0:	7023      	strb	r3, [r4, #0]
	trx_frame_write(data, (data[0] - 1) /* length value*/);
    3df2:	3101      	adds	r1, #1
    3df4:	b2c9      	uxtb	r1, r1
    3df6:	0020      	movs	r0, r4
    3df8:	4b08      	ldr	r3, [pc, #32]	; (3e1c <PHY_DataReq+0x40>)
    3dfa:	4798      	blx	r3

	phyState = PHY_STATE_TX_WAIT_END;
    3dfc:	2203      	movs	r2, #3
    3dfe:	4b08      	ldr	r3, [pc, #32]	; (3e20 <PHY_DataReq+0x44>)
    3e00:	701a      	strb	r2, [r3, #0]
    3e02:	4b08      	ldr	r3, [pc, #32]	; (3e24 <PHY_DataReq+0x48>)
    3e04:	2280      	movs	r2, #128	; 0x80
    3e06:	0352      	lsls	r2, r2, #13
    3e08:	619a      	str	r2, [r3, #24]

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
    3e0a:	46c0      	nop			; (mov r8, r8)
    3e0c:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    3e0e:	615a      	str	r2, [r3, #20]

	TRX_SLP_TR_HIGH();
	TRX_TRIG_DELAY();
	TRX_SLP_TR_LOW();
}
    3e10:	bd10      	pop	{r4, pc}
    3e12:	46c0      	nop			; (mov r8, r8)
    3e14:	00003c99 	.word	0x00003c99
    3e18:	00004599 	.word	0x00004599
    3e1c:	000048c5 	.word	0x000048c5
    3e20:	20000788 	.word	0x20000788
    3e24:	41004400 	.word	0x41004400

00003e28 <PHY_EncryptReq>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_EncryptReq(uint8_t *text, uint8_t *key)
{
    3e28:	b510      	push	{r4, lr}
    3e2a:	0004      	movs	r4, r0
    3e2c:	0008      	movs	r0, r1
	sal_aes_setup(key, AES_MODE_ECB, AES_DIR_ENCRYPT);
    3e2e:	2200      	movs	r2, #0
    3e30:	2100      	movs	r1, #0
    3e32:	4b05      	ldr	r3, [pc, #20]	; (3e48 <PHY_EncryptReq+0x20>)
    3e34:	4798      	blx	r3
#if (SAL_TYPE == AT86RF2xx)
	sal_aes_wrrd(text, NULL);
    3e36:	2100      	movs	r1, #0
    3e38:	0020      	movs	r0, r4
    3e3a:	4b04      	ldr	r3, [pc, #16]	; (3e4c <PHY_EncryptReq+0x24>)
    3e3c:	4798      	blx	r3
#else
	sal_aes_exec(text);
#endif
	sal_aes_read(text);
    3e3e:	0020      	movs	r0, r4
    3e40:	4b03      	ldr	r3, [pc, #12]	; (3e50 <PHY_EncryptReq+0x28>)
    3e42:	4798      	blx	r3
}
    3e44:	bd10      	pop	{r4, pc}
    3e46:	46c0      	nop			; (mov r8, r8)
    3e48:	000042e5 	.word	0x000042e5
    3e4c:	00004279 	.word	0x00004279
    3e50:	0000441d 	.word	0x0000441d

00003e54 <PHY_TaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_TaskHandler(void)
{
    3e54:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e56:	b085      	sub	sp, #20
	if (PHY_STATE_SLEEP == phyState) {
    3e58:	4b26      	ldr	r3, [pc, #152]	; (3ef4 <PHY_TaskHandler+0xa0>)
    3e5a:	781b      	ldrb	r3, [r3, #0]
    3e5c:	2b02      	cmp	r3, #2
    3e5e:	d047      	beq.n	3ef0 <PHY_TaskHandler+0x9c>
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    3e60:	200f      	movs	r0, #15
    3e62:	4b25      	ldr	r3, [pc, #148]	; (3ef8 <PHY_TaskHandler+0xa4>)
    3e64:	4798      	blx	r3
{
	if (PHY_STATE_SLEEP == phyState) {
		return;
	}

	if (phyReadRegister(IRQ_STATUS_REG) & (1 << TRX_END)) {
    3e66:	0703      	lsls	r3, r0, #28
    3e68:	d542      	bpl.n	3ef0 <PHY_TaskHandler+0x9c>
		if (PHY_STATE_IDLE == phyState) {
    3e6a:	4b22      	ldr	r3, [pc, #136]	; (3ef4 <PHY_TaskHandler+0xa0>)
    3e6c:	781b      	ldrb	r3, [r3, #0]
    3e6e:	2b01      	cmp	r3, #1
    3e70:	d124      	bne.n	3ebc <PHY_TaskHandler+0x68>
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    3e72:	2007      	movs	r0, #7
    3e74:	4b20      	ldr	r3, [pc, #128]	; (3ef8 <PHY_TaskHandler+0xa4>)
    3e76:	4798      	blx	r3
    3e78:	0005      	movs	r5, r0
			uint8_t size;
			int8_t rssi;

			rssi = (int8_t)phyReadRegister(PHY_ED_LEVEL_REG);

			trx_frame_read(&size, 1);
    3e7a:	466b      	mov	r3, sp
    3e7c:	1ddc      	adds	r4, r3, #7
    3e7e:	2101      	movs	r1, #1
    3e80:	0020      	movs	r0, r4
    3e82:	4f1e      	ldr	r7, [pc, #120]	; (3efc <PHY_TaskHandler+0xa8>)
    3e84:	47b8      	blx	r7

			trx_frame_read(phyRxBuffer, size + 2);
    3e86:	7821      	ldrb	r1, [r4, #0]
    3e88:	3102      	adds	r1, #2
    3e8a:	b2c9      	uxtb	r1, r1
    3e8c:	4e1c      	ldr	r6, [pc, #112]	; (3f00 <PHY_TaskHandler+0xac>)
    3e8e:	0030      	movs	r0, r6
    3e90:	47b8      	blx	r7

			ind.data = phyRxBuffer + 1;
    3e92:	a802      	add	r0, sp, #8
    3e94:	1c73      	adds	r3, r6, #1
    3e96:	9302      	str	r3, [sp, #8]

			ind.size = size - PHY_CRC_SIZE;
    3e98:	7823      	ldrb	r3, [r4, #0]
    3e9a:	1e9a      	subs	r2, r3, #2
    3e9c:	7102      	strb	r2, [r0, #4]
			ind.lqi  = phyRxBuffer[size + 1];
    3e9e:	18f3      	adds	r3, r6, r3
    3ea0:	785b      	ldrb	r3, [r3, #1]
    3ea2:	7143      	strb	r3, [r0, #5]
			ind.rssi = rssi + PHY_RSSI_BASE_VAL;
    3ea4:	3d5b      	subs	r5, #91	; 0x5b
    3ea6:	7185      	strb	r5, [r0, #6]
			PHY_DataInd(&ind);
    3ea8:	4b16      	ldr	r3, [pc, #88]	; (3f04 <PHY_TaskHandler+0xb0>)
    3eaa:	4798      	blx	r3
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    3eac:	4d12      	ldr	r5, [pc, #72]	; (3ef8 <PHY_TaskHandler+0xa4>)

/*************************************************************************//**
*****************************************************************************/
static void phyWaitState(uint8_t state)
{
	while (state != (phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK)) {
    3eae:	241f      	movs	r4, #31
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    3eb0:	2001      	movs	r0, #1
    3eb2:	47a8      	blx	r5

/*************************************************************************//**
*****************************************************************************/
static void phyWaitState(uint8_t state)
{
	while (state != (phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK)) {
    3eb4:	4020      	ands	r0, r4
    3eb6:	2816      	cmp	r0, #22
    3eb8:	d1fa      	bne.n	3eb0 <PHY_TaskHandler+0x5c>
    3eba:	e019      	b.n	3ef0 <PHY_TaskHandler+0x9c>
			ind.lqi  = phyRxBuffer[size + 1];
			ind.rssi = rssi + PHY_RSSI_BASE_VAL;
			PHY_DataInd(&ind);

			phyWaitState(TRX_STATUS_RX_AACK_ON);
		} else if (PHY_STATE_TX_WAIT_END == phyState) {
    3ebc:	2b03      	cmp	r3, #3
    3ebe:	d117      	bne.n	3ef0 <PHY_TaskHandler+0x9c>
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    3ec0:	2002      	movs	r0, #2
    3ec2:	4b0d      	ldr	r3, [pc, #52]	; (3ef8 <PHY_TaskHandler+0xa4>)
    3ec4:	4798      	blx	r3
			ind.rssi = rssi + PHY_RSSI_BASE_VAL;
			PHY_DataInd(&ind);

			phyWaitState(TRX_STATUS_RX_AACK_ON);
		} else if (PHY_STATE_TX_WAIT_END == phyState) {
			uint8_t status
    3ec6:	0940      	lsrs	r0, r0, #5
    3ec8:	b2c4      	uxtb	r4, r0
				= (phyReadRegister(TRX_STATE_REG) >>
					TRAC_STATUS) & 7;

			if (TRAC_STATUS_SUCCESS == status) {
    3eca:	2c00      	cmp	r4, #0
    3ecc:	d008      	beq.n	3ee0 <PHY_TaskHandler+0x8c>
				status = PHY_STATUS_SUCCESS;
			} else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE ==
    3ece:	2c03      	cmp	r4, #3
    3ed0:	d005      	beq.n	3ede <PHY_TaskHandler+0x8a>
					status) {
				status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
			} else if (TRAC_STATUS_NO_ACK == status) {
				status = PHY_STATUS_NO_ACK;
			} else {
				status = PHY_STATUS_ERROR;
    3ed2:	3c05      	subs	r4, #5
    3ed4:	4263      	negs	r3, r4
    3ed6:	4163      	adcs	r3, r4
    3ed8:	2403      	movs	r4, #3
    3eda:	1ae4      	subs	r4, r4, r3
    3edc:	e000      	b.n	3ee0 <PHY_TaskHandler+0x8c>

			if (TRAC_STATUS_SUCCESS == status) {
				status = PHY_STATUS_SUCCESS;
			} else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE ==
					status) {
				status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    3ede:	2401      	movs	r4, #1
				status = PHY_STATUS_NO_ACK;
			} else {
				status = PHY_STATUS_ERROR;
			}

			phySetRxState();
    3ee0:	4b09      	ldr	r3, [pc, #36]	; (3f08 <PHY_TaskHandler+0xb4>)
    3ee2:	4798      	blx	r3
			phyState = PHY_STATE_IDLE;
    3ee4:	2201      	movs	r2, #1
    3ee6:	4b03      	ldr	r3, [pc, #12]	; (3ef4 <PHY_TaskHandler+0xa0>)
    3ee8:	701a      	strb	r2, [r3, #0]

			PHY_DataConf(status);
    3eea:	0020      	movs	r0, r4
    3eec:	4b07      	ldr	r3, [pc, #28]	; (3f0c <PHY_TaskHandler+0xb8>)
    3eee:	4798      	blx	r3
		}
	}
}
    3ef0:	b005      	add	sp, #20
    3ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3ef4:	20000788 	.word	0x20000788
    3ef8:	00004599 	.word	0x00004599
    3efc:	00004795 	.word	0x00004795
    3f00:	20000708 	.word	0x20000708
    3f04:	0000320d 	.word	0x0000320d
    3f08:	00003cd5 	.word	0x00003cd5
    3f0c:	00003b45 	.word	0x00003b45

00003f10 <SYS_Init>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
    3f10:	b510      	push	{r4, lr}
	SYS_TimerInit();
    3f12:	4b04      	ldr	r3, [pc, #16]	; (3f24 <SYS_Init+0x14>)
    3f14:	4798      	blx	r3
#if SYS_SECURITY_MODE == 0
	sal_init();
    3f16:	4b04      	ldr	r3, [pc, #16]	; (3f28 <SYS_Init+0x18>)
    3f18:	4798      	blx	r3
#endif
	PHY_Init();
    3f1a:	4b04      	ldr	r3, [pc, #16]	; (3f2c <SYS_Init+0x1c>)
    3f1c:	4798      	blx	r3
	NWK_Init();
    3f1e:	4b04      	ldr	r3, [pc, #16]	; (3f30 <SYS_Init+0x20>)
    3f20:	4798      	blx	r3
}
    3f22:	bd10      	pop	{r4, pc}
    3f24:	00003fe1 	.word	0x00003fe1
    3f28:	00004275 	.word	0x00004275
    3f2c:	00003d01 	.word	0x00003d01
    3f30:	00002ab1 	.word	0x00002ab1

00003f34 <SYS_TaskHandler>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TaskHandler(void)
{
    3f34:	b510      	push	{r4, lr}
	PHY_TaskHandler();
    3f36:	4b03      	ldr	r3, [pc, #12]	; (3f44 <SYS_TaskHandler+0x10>)
    3f38:	4798      	blx	r3
	NWK_TaskHandler();
    3f3a:	4b03      	ldr	r3, [pc, #12]	; (3f48 <SYS_TaskHandler+0x14>)
    3f3c:	4798      	blx	r3
	SYS_TimerTaskHandler();
    3f3e:	4b03      	ldr	r3, [pc, #12]	; (3f4c <SYS_TaskHandler+0x18>)
    3f40:	4798      	blx	r3
}
    3f42:	bd10      	pop	{r4, pc}
    3f44:	00003e55 	.word	0x00003e55
    3f48:	00002b3d 	.word	0x00002b3d
    3f4c:	00004065 	.word	0x00004065

00003f50 <SYS_EncryptReq>:
#endif

/*************************************************************************//**
*****************************************************************************/
void SYS_EncryptReq(uint32_t *text, uint32_t *key)
{
    3f50:	b510      	push	{r4, lr}
#if SYS_SECURITY_MODE == 0
	PHY_EncryptReq((uint8_t *)text, (uint8_t *)key);
    3f52:	4b02      	ldr	r3, [pc, #8]	; (3f5c <SYS_EncryptReq+0xc>)
    3f54:	4798      	blx	r3
	text[2] ^= text[0];
	text[3] ^= text[1];
	xtea(&text[2], key);
#endif

	SYS_EncryptConf();
    3f56:	4b02      	ldr	r3, [pc, #8]	; (3f60 <SYS_EncryptReq+0x10>)
    3f58:	4798      	blx	r3
}
    3f5a:	bd10      	pop	{r4, pc}
    3f5c:	00003e29 	.word	0x00003e29
    3f60:	00003691 	.word	0x00003691

00003f64 <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    3f64:	b530      	push	{r4, r5, lr}
	if (timers) {
    3f66:	4b15      	ldr	r3, [pc, #84]	; (3fbc <placeTimer+0x58>)
    3f68:	681d      	ldr	r5, [r3, #0]
    3f6a:	2d00      	cmp	r5, #0
    3f6c:	d01e      	beq.n	3fac <placeTimer+0x48>
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;
    3f6e:	6882      	ldr	r2, [r0, #8]

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
    3f70:	6869      	ldr	r1, [r5, #4]
    3f72:	428a      	cmp	r2, r1
    3f74:	d305      	bcc.n	3f82 <placeTimer+0x1e>
    3f76:	002c      	movs	r4, r5
    3f78:	e009      	b.n	3f8e <placeTimer+0x2a>
    3f7a:	6859      	ldr	r1, [r3, #4]
    3f7c:	4291      	cmp	r1, r2
    3f7e:	d905      	bls.n	3f8c <placeTimer+0x28>
    3f80:	e001      	b.n	3f86 <placeTimer+0x22>
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
    3f82:	002b      	movs	r3, r5
/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
    3f84:	2400      	movs	r4, #0
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
				t->timeout -= timeout;
    3f86:	1a89      	subs	r1, r1, r2
    3f88:	6059      	str	r1, [r3, #4]
				break;
    3f8a:	e004      	b.n	3f96 <placeTimer+0x32>
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
    3f8c:	001c      	movs	r4, r3
			if (timeout < t->timeout) {
				t->timeout -= timeout;
				break;
			} else {
				timeout -= t->timeout;
    3f8e:	1a52      	subs	r2, r2, r1
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
    3f90:	6823      	ldr	r3, [r4, #0]
    3f92:	2b00      	cmp	r3, #0
    3f94:	d1f1      	bne.n	3f7a <placeTimer+0x16>
			}

			prev = t;
		}

		timer->timeout = timeout;
    3f96:	6042      	str	r2, [r0, #4]

		if (prev) {
    3f98:	2c00      	cmp	r4, #0
    3f9a:	d003      	beq.n	3fa4 <placeTimer+0x40>
			timer->next = prev->next;
    3f9c:	6823      	ldr	r3, [r4, #0]
    3f9e:	6003      	str	r3, [r0, #0]
			prev->next = timer;
    3fa0:	6020      	str	r0, [r4, #0]
    3fa2:	e009      	b.n	3fb8 <placeTimer+0x54>
		} else {
			timer->next = timers;
    3fa4:	6005      	str	r5, [r0, #0]
			timers = timer;
    3fa6:	4b05      	ldr	r3, [pc, #20]	; (3fbc <placeTimer+0x58>)
    3fa8:	6018      	str	r0, [r3, #0]
    3faa:	e005      	b.n	3fb8 <placeTimer+0x54>
		}
	} else {
		timer->next = NULL;
    3fac:	2300      	movs	r3, #0
    3fae:	6003      	str	r3, [r0, #0]
		timer->timeout = timer->interval;
    3fb0:	6883      	ldr	r3, [r0, #8]
    3fb2:	6043      	str	r3, [r0, #4]
		timers = timer;
    3fb4:	4b01      	ldr	r3, [pc, #4]	; (3fbc <placeTimer+0x58>)
    3fb6:	6018      	str	r0, [r3, #0]
	}
}
    3fb8:	bd30      	pop	{r4, r5, pc}
    3fba:	46c0      	nop			; (mov r8, r8)
    3fbc:	2000078c 	.word	0x2000078c

00003fc0 <SYS_HwExpiry_Cb>:

/*****************************************************************************
*****************************************************************************/
void SYS_HwExpiry_Cb(void)
{
    3fc0:	b510      	push	{r4, lr}
	SysTimerIrqCount++;
    3fc2:	4a04      	ldr	r2, [pc, #16]	; (3fd4 <SYS_HwExpiry_Cb+0x14>)
    3fc4:	7813      	ldrb	r3, [r2, #0]
    3fc6:	3301      	adds	r3, #1
    3fc8:	b2db      	uxtb	r3, r3
    3fca:	7013      	strb	r3, [r2, #0]
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    3fcc:	4802      	ldr	r0, [pc, #8]	; (3fd8 <SYS_HwExpiry_Cb+0x18>)
    3fce:	4b03      	ldr	r3, [pc, #12]	; (3fdc <SYS_HwExpiry_Cb+0x1c>)
    3fd0:	4798      	blx	r3
}
    3fd2:	bd10      	pop	{r4, pc}
    3fd4:	200008b8 	.word	0x200008b8
    3fd8:	00002710 	.word	0x00002710
    3fdc:	0000509d 	.word	0x0000509d

00003fe0 <SYS_TimerInit>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerInit(void)
{
    3fe0:	b510      	push	{r4, lr}
	SysTimerIrqCount = 0;
    3fe2:	2400      	movs	r4, #0
    3fe4:	4b06      	ldr	r3, [pc, #24]	; (4000 <SYS_TimerInit+0x20>)
    3fe6:	701c      	strb	r4, [r3, #0]
	set_common_tc_expiry_callback(SYS_HwExpiry_Cb);
    3fe8:	4806      	ldr	r0, [pc, #24]	; (4004 <SYS_TimerInit+0x24>)
    3fea:	4b07      	ldr	r3, [pc, #28]	; (4008 <SYS_TimerInit+0x28>)
    3fec:	4798      	blx	r3
	common_tc_init();
    3fee:	4b07      	ldr	r3, [pc, #28]	; (400c <SYS_TimerInit+0x2c>)
    3ff0:	4798      	blx	r3
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    3ff2:	4807      	ldr	r0, [pc, #28]	; (4010 <SYS_TimerInit+0x30>)
    3ff4:	4b07      	ldr	r3, [pc, #28]	; (4014 <SYS_TimerInit+0x34>)
    3ff6:	4798      	blx	r3
	timers = NULL;
    3ff8:	4b07      	ldr	r3, [pc, #28]	; (4018 <SYS_TimerInit+0x38>)
    3ffa:	601c      	str	r4, [r3, #0]
}
    3ffc:	bd10      	pop	{r4, pc}
    3ffe:	46c0      	nop			; (mov r8, r8)
    4000:	200008b8 	.word	0x200008b8
    4004:	00003fc1 	.word	0x00003fc1
    4008:	0000518d 	.word	0x0000518d
    400c:	00005109 	.word	0x00005109
    4010:	00002710 	.word	0x00002710
    4014:	0000509d 	.word	0x0000509d
    4018:	2000078c 	.word	0x2000078c

0000401c <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    401c:	4b09      	ldr	r3, [pc, #36]	; (4044 <SYS_TimerStarted+0x28>)
    401e:	681b      	ldr	r3, [r3, #0]
    4020:	2b00      	cmp	r3, #0
    4022:	d009      	beq.n	4038 <SYS_TimerStarted+0x1c>
		if (t == timer) {
    4024:	4283      	cmp	r3, r0
    4026:	d102      	bne.n	402e <SYS_TimerStarted+0x12>
    4028:	e008      	b.n	403c <SYS_TimerStarted+0x20>
    402a:	4298      	cmp	r0, r3
    402c:	d008      	beq.n	4040 <SYS_TimerStarted+0x24>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    402e:	681b      	ldr	r3, [r3, #0]
    4030:	2b00      	cmp	r3, #0
    4032:	d1fa      	bne.n	402a <SYS_TimerStarted+0xe>
		if (t == timer) {
			return true;
		}
	}
	return false;
    4034:	2000      	movs	r0, #0
    4036:	e004      	b.n	4042 <SYS_TimerStarted+0x26>
    4038:	2000      	movs	r0, #0
    403a:	e002      	b.n	4042 <SYS_TimerStarted+0x26>
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
		if (t == timer) {
			return true;
    403c:	2001      	movs	r0, #1
    403e:	e000      	b.n	4042 <SYS_TimerStarted+0x26>
    4040:	2001      	movs	r0, #1
		}
	}
	return false;
}
    4042:	4770      	bx	lr
    4044:	2000078c 	.word	0x2000078c

00004048 <SYS_TimerStart>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    4048:	b510      	push	{r4, lr}
    404a:	0004      	movs	r4, r0
	if (!SYS_TimerStarted(timer)) {
    404c:	4b03      	ldr	r3, [pc, #12]	; (405c <SYS_TimerStart+0x14>)
    404e:	4798      	blx	r3
    4050:	2800      	cmp	r0, #0
    4052:	d102      	bne.n	405a <SYS_TimerStart+0x12>
		placeTimer(timer);
    4054:	0020      	movs	r0, r4
    4056:	4b02      	ldr	r3, [pc, #8]	; (4060 <SYS_TimerStart+0x18>)
    4058:	4798      	blx	r3
	}
}
    405a:	bd10      	pop	{r4, pc}
    405c:	0000401d 	.word	0x0000401d
    4060:	00003f65 	.word	0x00003f65

00004064 <SYS_TimerTaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerTaskHandler(void)
{
    4064:	b5f0      	push	{r4, r5, r6, r7, lr}
    4066:	b083      	sub	sp, #12
	uint32_t elapsed;
	uint8_t cnt;
	irqflags_t flags;

	if (0 == SysTimerIrqCount) {
    4068:	4b1c      	ldr	r3, [pc, #112]	; (40dc <SYS_TimerTaskHandler+0x78>)
    406a:	781b      	ldrb	r3, [r3, #0]
    406c:	2b00      	cmp	r3, #0
    406e:	d033      	beq.n	40d8 <SYS_TimerTaskHandler+0x74>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4070:	f3ef 8210 	mrs	r2, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    4074:	4253      	negs	r3, r2
    4076:	4153      	adcs	r3, r2
    4078:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    407a:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    407c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    4080:	2200      	movs	r2, #0
    4082:	4b17      	ldr	r3, [pc, #92]	; (40e0 <SYS_TimerTaskHandler+0x7c>)
    4084:	701a      	strb	r2, [r3, #0]
	return flags;
    4086:	9901      	ldr	r1, [sp, #4]
		return;
	}

	/* Enter a critical section */
	flags = cpu_irq_save();
	cnt = SysTimerIrqCount;
    4088:	4b14      	ldr	r3, [pc, #80]	; (40dc <SYS_TimerTaskHandler+0x78>)
    408a:	781d      	ldrb	r5, [r3, #0]
    408c:	b2ed      	uxtb	r5, r5
	SysTimerIrqCount = 0;
    408e:	701a      	strb	r2, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    4090:	2900      	cmp	r1, #0
    4092:	d005      	beq.n	40a0 <SYS_TimerTaskHandler+0x3c>
		cpu_irq_enable();
    4094:	3201      	adds	r2, #1
    4096:	4b12      	ldr	r3, [pc, #72]	; (40e0 <SYS_TimerTaskHandler+0x7c>)
    4098:	701a      	strb	r2, [r3, #0]
    409a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    409e:	b662      	cpsie	i
	/* Leave the critical section */
	cpu_irq_restore(flags);

	elapsed = cnt * SYS_TIMER_INTERVAL;
    40a0:	00ab      	lsls	r3, r5, #2
    40a2:	195d      	adds	r5, r3, r5
    40a4:	006d      	lsls	r5, r5, #1

	while (timers && (timers->timeout <= elapsed)) {
    40a6:	4e0f      	ldr	r6, [pc, #60]	; (40e4 <SYS_TimerTaskHandler+0x80>)
		SYS_Timer_t *timer = timers;

		elapsed -= timers->timeout;
		timers = timers->next;
    40a8:	0037      	movs	r7, r6
	/* Leave the critical section */
	cpu_irq_restore(flags);

	elapsed = cnt * SYS_TIMER_INTERVAL;

	while (timers && (timers->timeout <= elapsed)) {
    40aa:	e00d      	b.n	40c8 <SYS_TimerTaskHandler+0x64>
		SYS_Timer_t *timer = timers;

		elapsed -= timers->timeout;
    40ac:	1aed      	subs	r5, r5, r3
		timers = timers->next;
    40ae:	6823      	ldr	r3, [r4, #0]
    40b0:	603b      	str	r3, [r7, #0]
		if (SYS_TIMER_PERIODIC_MODE == timer->mode) {
    40b2:	7b23      	ldrb	r3, [r4, #12]
    40b4:	2b01      	cmp	r3, #1
    40b6:	d102      	bne.n	40be <SYS_TimerTaskHandler+0x5a>
			placeTimer(timer);
    40b8:	0020      	movs	r0, r4
    40ba:	4b0b      	ldr	r3, [pc, #44]	; (40e8 <SYS_TimerTaskHandler+0x84>)
    40bc:	4798      	blx	r3
		}

		if (timer->handler) {
    40be:	6923      	ldr	r3, [r4, #16]
    40c0:	2b00      	cmp	r3, #0
    40c2:	d001      	beq.n	40c8 <SYS_TimerTaskHandler+0x64>
			timer->handler(timer);
    40c4:	0020      	movs	r0, r4
    40c6:	4798      	blx	r3
	/* Leave the critical section */
	cpu_irq_restore(flags);

	elapsed = cnt * SYS_TIMER_INTERVAL;

	while (timers && (timers->timeout <= elapsed)) {
    40c8:	6834      	ldr	r4, [r6, #0]
    40ca:	2c00      	cmp	r4, #0
    40cc:	d004      	beq.n	40d8 <SYS_TimerTaskHandler+0x74>
    40ce:	6863      	ldr	r3, [r4, #4]
    40d0:	429d      	cmp	r5, r3
    40d2:	d2eb      	bcs.n	40ac <SYS_TimerTaskHandler+0x48>
			timer->handler(timer);
		}
	}

	if (timers) {
		timers->timeout -= elapsed;
    40d4:	1b5d      	subs	r5, r3, r5
    40d6:	6065      	str	r5, [r4, #4]
	}
}
    40d8:	b003      	add	sp, #12
    40da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    40dc:	200008b8 	.word	0x200008b8
    40e0:	20000008 	.word	0x20000008
    40e4:	2000078c 	.word	0x2000078c
    40e8:	00003f65 	.word	0x00003f65

000040ec <tc_cca_callback>:
}

/*! \brief  hw timer compare callback
 */
static void tc_cca_callback(struct tc_module *const module_instance)
{
    40ec:	b510      	push	{r4, lr}
	tmr_cca_callback();
    40ee:	4b01      	ldr	r3, [pc, #4]	; (40f4 <tc_cca_callback+0x8>)
    40f0:	4798      	blx	r3
}
    40f2:	bd10      	pop	{r4, pc}
    40f4:	00005171 	.word	0x00005171

000040f8 <tc_ovf_callback>:
{
	cpu_irq_restore((uint32_t)flags);
}

static void tc_ovf_callback(struct tc_module *const module_instance)
{
    40f8:	b510      	push	{r4, lr}
	tmr_ovf_callback();
    40fa:	4b01      	ldr	r3, [pc, #4]	; (4100 <tc_ovf_callback+0x8>)
    40fc:	4798      	blx	r3
}
    40fe:	bd10      	pop	{r4, pc}
    4100:	00005129 	.word	0x00005129

00004104 <tmr_read_count>:
#endif

/*! \brief  read the actual timer count from register
 */
uint16_t tmr_read_count(void)
{
    4104:	b510      	push	{r4, lr}
	return ((uint16_t)tc_get_count_value(&module_inst));
    4106:	4802      	ldr	r0, [pc, #8]	; (4110 <tmr_read_count+0xc>)
    4108:	4b02      	ldr	r3, [pc, #8]	; (4114 <tmr_read_count+0x10>)
    410a:	4798      	blx	r3
    410c:	b280      	uxth	r0, r0
}
    410e:	bd10      	pop	{r4, pc}
    4110:	200008f0 	.word	0x200008f0
    4114:	0000266d 	.word	0x0000266d

00004118 <tmr_disable_cc_interrupt>:
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    4118:	4b03      	ldr	r3, [pc, #12]	; (4128 <tmr_disable_cc_interrupt+0x10>)
    411a:	2110      	movs	r1, #16
    411c:	681a      	ldr	r2, [r3, #0]
    411e:	7311      	strb	r1, [r2, #12]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    4120:	7e5a      	ldrb	r2, [r3, #25]
    4122:	438a      	bics	r2, r1
    4124:	765a      	strb	r2, [r3, #25]
/*! \brief  to disable compare interrupt
 */
void tmr_disable_cc_interrupt(void)
{
	tc_disable_callback(&module_inst, TC_CALLBACK_CC_CHANNEL0);
}
    4126:	4770      	bx	lr
    4128:	200008f0 	.word	0x200008f0

0000412c <tmr_enable_cc_interrupt>:

/*! \brief  to enable compare interrupt
 */
void tmr_enable_cc_interrupt(void)
{
    412c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    412e:	4c0a      	ldr	r4, [pc, #40]	; (4158 <tmr_enable_cc_interrupt+0x2c>)
    4130:	6820      	ldr	r0, [r4, #0]
    4132:	4b0a      	ldr	r3, [pc, #40]	; (415c <tmr_enable_cc_interrupt+0x30>)
    4134:	4798      	blx	r3
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    4136:	4b0a      	ldr	r3, [pc, #40]	; (4160 <tmr_enable_cc_interrupt+0x34>)
    4138:	5c1b      	ldrb	r3, [r3, r0]
    413a:	221f      	movs	r2, #31
    413c:	401a      	ands	r2, r3
    413e:	2301      	movs	r3, #1
    4140:	4093      	lsls	r3, r2
    4142:	4a08      	ldr	r2, [pc, #32]	; (4164 <tmr_enable_cc_interrupt+0x38>)
    4144:	6013      	str	r3, [r2, #0]
	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    4146:	7e62      	ldrb	r2, [r4, #25]
    4148:	2310      	movs	r3, #16
    414a:	4313      	orrs	r3, r2
    414c:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    414e:	6823      	ldr	r3, [r4, #0]
    4150:	2210      	movs	r2, #16
    4152:	735a      	strb	r2, [r3, #13]
	tc_enable_callback(&module_inst, TC_CALLBACK_CC_CHANNEL0);
}
    4154:	bd10      	pop	{r4, pc}
    4156:	46c0      	nop			; (mov r8, r8)
    4158:	200008f0 	.word	0x200008f0
    415c:	000023b9 	.word	0x000023b9
    4160:	00007e7c 	.word	0x00007e7c
    4164:	e000e100 	.word	0xe000e100

00004168 <tmr_write_cmpreg>:
}

/*! \brief  to load compare value in channel compare register
 */
void tmr_write_cmpreg(uint16_t compare_value)
{
    4168:	b510      	push	{r4, lr}
    416a:	0002      	movs	r2, r0
	tc_set_compare_value(&module_inst, TC_COMPARE_CAPTURE_CHANNEL_0,
    416c:	2100      	movs	r1, #0
    416e:	4802      	ldr	r0, [pc, #8]	; (4178 <tmr_write_cmpreg+0x10>)
    4170:	4b02      	ldr	r3, [pc, #8]	; (417c <tmr_write_cmpreg+0x14>)
    4172:	4798      	blx	r3
			(uint32_t)compare_value);
}
    4174:	bd10      	pop	{r4, pc}
    4176:	46c0      	nop			; (mov r8, r8)
    4178:	200008f0 	.word	0x200008f0
    417c:	0000269d 	.word	0x0000269d

00004180 <tmr_init>:
}

/*! \brief  to initialize hw timer
 */
uint8_t tmr_init(void)
{
    4180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4182:	464f      	mov	r7, r9
    4184:	4646      	mov	r6, r8
    4186:	b4c0      	push	{r6, r7}
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    4188:	4a2d      	ldr	r2, [pc, #180]	; (4240 <tmr_init+0xc0>)
    418a:	2300      	movs	r3, #0
    418c:	7013      	strb	r3, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    418e:	7093      	strb	r3, [r2, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    4190:	2100      	movs	r1, #0
    4192:	8093      	strh	r3, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    4194:	7191      	strb	r1, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    4196:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    4198:	7051      	strb	r1, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    419a:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    419c:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    419e:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    41a0:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    41a2:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    41a4:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    41a6:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    41a8:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    41aa:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    41ac:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    41ae:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    41b0:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    41b2:	8593      	strh	r3, [r2, #44]	; 0x2c
		timer_config.clock_source = GCLK_GENERATOR_1;
		timer_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV2;
		timer_config.run_in_standby = true;
	}
	#endif
	timer_config.counter_16_bit.compare_capture_channel[0] = TIMER_PERIOD;
    41b4:	3b01      	subs	r3, #1
    41b6:	8553      	strh	r3, [r2, #42]	; 0x2a
	tc_init(&module_inst, TIMER, &timer_config);
    41b8:	4c22      	ldr	r4, [pc, #136]	; (4244 <tmr_init+0xc4>)
    41ba:	4923      	ldr	r1, [pc, #140]	; (4248 <tmr_init+0xc8>)
    41bc:	0020      	movs	r0, r4
    41be:	4b23      	ldr	r3, [pc, #140]	; (424c <tmr_init+0xcc>)
    41c0:	4798      	blx	r3
	tc_register_callback(&module_inst, tc_ovf_callback,
    41c2:	2200      	movs	r2, #0
    41c4:	4922      	ldr	r1, [pc, #136]	; (4250 <tmr_init+0xd0>)
    41c6:	0020      	movs	r0, r4
    41c8:	4d22      	ldr	r5, [pc, #136]	; (4254 <tmr_init+0xd4>)
    41ca:	47a8      	blx	r5
			TC_CALLBACK_OVERFLOW);
	tc_register_callback(&module_inst, tc_cca_callback,
    41cc:	2202      	movs	r2, #2
    41ce:	4922      	ldr	r1, [pc, #136]	; (4258 <tmr_init+0xd8>)
    41d0:	0020      	movs	r0, r4
    41d2:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    41d4:	6820      	ldr	r0, [r4, #0]
    41d6:	4b21      	ldr	r3, [pc, #132]	; (425c <tmr_init+0xdc>)
    41d8:	4699      	mov	r9, r3
    41da:	4798      	blx	r3
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    41dc:	4b20      	ldr	r3, [pc, #128]	; (4260 <tmr_init+0xe0>)
    41de:	4698      	mov	r8, r3
    41e0:	5c1b      	ldrb	r3, [r3, r0]
    41e2:	271f      	movs	r7, #31
    41e4:	403b      	ands	r3, r7
    41e6:	2501      	movs	r5, #1
    41e8:	002a      	movs	r2, r5
    41ea:	409a      	lsls	r2, r3
    41ec:	4e1d      	ldr	r6, [pc, #116]	; (4264 <tmr_init+0xe4>)
    41ee:	6032      	str	r2, [r6, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
    41f0:	7e62      	ldrb	r2, [r4, #25]
    41f2:	2301      	movs	r3, #1
    41f4:	4313      	orrs	r3, r2
    41f6:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    41f8:	6823      	ldr	r3, [r4, #0]
    41fa:	735d      	strb	r5, [r3, #13]
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    41fc:	0018      	movs	r0, r3
    41fe:	47c8      	blx	r9
    4200:	4643      	mov	r3, r8
    4202:	5c1b      	ldrb	r3, [r3, r0]
    4204:	403b      	ands	r3, r7
    4206:	409d      	lsls	r5, r3
    4208:	6035      	str	r5, [r6, #0]

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    420a:	7e62      	ldrb	r2, [r4, #25]
    420c:	2310      	movs	r3, #16
    420e:	4313      	orrs	r3, r2
    4210:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    4212:	6822      	ldr	r2, [r4, #0]
    4214:	2310      	movs	r3, #16
    4216:	7353      	strb	r3, [r2, #13]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    4218:	217f      	movs	r1, #127	; 0x7f
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    421a:	7bd3      	ldrb	r3, [r2, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    421c:	438b      	bics	r3, r1
    421e:	d1fc      	bne.n	421a <tmr_init+0x9a>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    4220:	8811      	ldrh	r1, [r2, #0]
    4222:	3302      	adds	r3, #2
    4224:	430b      	orrs	r3, r1
    4226:	8013      	strh	r3, [r2, #0]
	} else {
		timer_multiplier = system_gclk_gen_get_hz(0) / DEF_1MHZ;
	}

    #else
	timer_multiplier = system_gclk_gen_get_hz(0) / DEF_1MHZ;
    4228:	2000      	movs	r0, #0
    422a:	4b0f      	ldr	r3, [pc, #60]	; (4268 <tmr_init+0xe8>)
    422c:	4798      	blx	r3
	#endif
	return timer_multiplier;
    422e:	490f      	ldr	r1, [pc, #60]	; (426c <tmr_init+0xec>)
    4230:	4b0f      	ldr	r3, [pc, #60]	; (4270 <tmr_init+0xf0>)
    4232:	4798      	blx	r3
    4234:	b2c0      	uxtb	r0, r0
}
    4236:	bc0c      	pop	{r2, r3}
    4238:	4690      	mov	r8, r2
    423a:	4699      	mov	r9, r3
    423c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    423e:	46c0      	nop			; (mov r8, r8)
    4240:	200008bc 	.word	0x200008bc
    4244:	200008f0 	.word	0x200008f0
    4248:	42002c00 	.word	0x42002c00
    424c:	000023f1 	.word	0x000023f1
    4250:	000040f9 	.word	0x000040f9
    4254:	000022fd 	.word	0x000022fd
    4258:	000040ed 	.word	0x000040ed
    425c:	000023b9 	.word	0x000023b9
    4260:	00007e7c 	.word	0x00007e7c
    4264:	e000e100 	.word	0xe000e100
    4268:	0000208d 	.word	0x0000208d
    426c:	000f4240 	.word	0x000f4240
    4270:	00005199 	.word	0x00005199

00004274 <sal_init>:
 *
 * This functions initializes the SAL.
 */
void sal_init(void)
{
}
    4274:	4770      	bx	lr
    4276:	46c0      	nop			; (mov r8, r8)

00004278 <sal_aes_wrrd>:
 * @param[in]  idata  AES block to be en/decrypted
 * @param[out] odata  Result of previous operation
 *                    (odata may be NULL or equal to idata)
 */
void sal_aes_wrrd(uint8_t *idata, uint8_t *odata)
{
    4278:	b570      	push	{r4, r5, r6, lr}
    427a:	0003      	movs	r3, r0
    427c:	000d      	movs	r5, r1
	 * Write data and start the operation.
	 * AES_MODE in aes_buf[0] and aes_buf[AES_BLOCKSIZE+1] as well as
	 * AES_REQUEST in aes_buf[AES_BLOCKSIZE+1]
	 * were set before in sal_aes_setup()
	 */
	memcpy(aes_buf + 1, idata, AES_BLOCKSIZE);
    427e:	4c14      	ldr	r4, [pc, #80]	; (42d0 <sal_aes_wrrd+0x58>)
    4280:	1c60      	adds	r0, r4, #1
    4282:	2210      	movs	r2, #16
    4284:	0019      	movs	r1, r3
    4286:	4b13      	ldr	r3, [pc, #76]	; (42d4 <sal_aes_wrrd+0x5c>)
    4288:	4798      	blx	r3

	/* trx_aes_wrrd() overwrites aes_buf, the last byte must be saved.
	**/
	save_cmd = aes_buf[AES_BLOCKSIZE + 1];
    428a:	7c64      	ldrb	r4, [r4, #17]

	if (setup_flag) {
    428c:	4b12      	ldr	r3, [pc, #72]	; (42d8 <sal_aes_wrrd+0x60>)
    428e:	781b      	ldrb	r3, [r3, #0]
    4290:	2b00      	cmp	r3, #0
    4292:	d008      	beq.n	42a6 <sal_aes_wrrd+0x2e>
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_CTRL), aes_buf,
    4294:	2212      	movs	r2, #18
    4296:	490e      	ldr	r1, [pc, #56]	; (42d0 <sal_aes_wrrd+0x58>)
    4298:	2083      	movs	r0, #131	; 0x83
    429a:	4b10      	ldr	r3, [pc, #64]	; (42dc <sal_aes_wrrd+0x64>)
    429c:	4798      	blx	r3
				AES_BLOCKSIZE + 2);

		setup_flag = false;
    429e:	2200      	movs	r2, #0
    42a0:	4b0d      	ldr	r3, [pc, #52]	; (42d8 <sal_aes_wrrd+0x60>)
    42a2:	701a      	strb	r2, [r3, #0]
    42a4:	e005      	b.n	42b2 <sal_aes_wrrd+0x3a>
	} else {
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_STATE_KEY_0),
    42a6:	2211      	movs	r2, #17
    42a8:	4909      	ldr	r1, [pc, #36]	; (42d0 <sal_aes_wrrd+0x58>)
    42aa:	3101      	adds	r1, #1
    42ac:	2084      	movs	r0, #132	; 0x84
    42ae:	4b0b      	ldr	r3, [pc, #44]	; (42dc <sal_aes_wrrd+0x64>)
    42b0:	4798      	blx	r3
				aes_buf + 1, AES_BLOCKSIZE + 1);
	}

	/* Restore the result. */
	if (odata != NULL) {
    42b2:	2d00      	cmp	r5, #0
    42b4:	d005      	beq.n	42c2 <sal_aes_wrrd+0x4a>
		memcpy(odata, aes_buf + 1, AES_BLOCKSIZE);
    42b6:	2210      	movs	r2, #16
    42b8:	4905      	ldr	r1, [pc, #20]	; (42d0 <sal_aes_wrrd+0x58>)
    42ba:	3101      	adds	r1, #1
    42bc:	0028      	movs	r0, r5
    42be:	4b05      	ldr	r3, [pc, #20]	; (42d4 <sal_aes_wrrd+0x5c>)
    42c0:	4798      	blx	r3
	}

	aes_buf[AES_BLOCKSIZE + 1] = save_cmd;
    42c2:	4b03      	ldr	r3, [pc, #12]	; (42d0 <sal_aes_wrrd+0x58>)
    42c4:	745c      	strb	r4, [r3, #17]

	/* Wait for the operation to finish for 24 us. */
	delay_us(24);
    42c6:	2018      	movs	r0, #24
    42c8:	4b05      	ldr	r3, [pc, #20]	; (42e0 <sal_aes_wrrd+0x68>)
    42ca:	4798      	blx	r3
}
    42cc:	bd70      	pop	{r4, r5, r6, pc}
    42ce:	46c0      	nop			; (mov r8, r8)
    42d0:	200007b4 	.word	0x200007b4
    42d4:	00006c8d 	.word	0x00006c8d
    42d8:	200007c6 	.word	0x200007c6
    42dc:	00004cd1 	.word	0x00004cd1
    42e0:	00000155 	.word	0x00000155

000042e4 <sal_aes_setup>:
 * @return  False if some parameter was illegal, true else
 */
bool sal_aes_setup(uint8_t *key,
		uint8_t enc_mode,
		uint8_t dir)
{
    42e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    42e6:	4647      	mov	r7, r8
    42e8:	b480      	push	{r7}
    42ea:	b084      	sub	sp, #16
    42ec:	0006      	movs	r6, r0
    42ee:	000d      	movs	r5, r1
    42f0:	0014      	movs	r4, r2
	if (key != NULL) {
    42f2:	2800      	cmp	r0, #0
    42f4:	d017      	beq.n	4326 <sal_aes_setup+0x42>
		/* Setup key. */
		dec_initialized = false;
    42f6:	2200      	movs	r2, #0
    42f8:	4b3e      	ldr	r3, [pc, #248]	; (43f4 <sal_aes_setup+0x110>)
    42fa:	701a      	strb	r2, [r3, #0]

		last_dir = AES_DIR_VOID;
    42fc:	3202      	adds	r2, #2
    42fe:	4b3e      	ldr	r3, [pc, #248]	; (43f8 <sal_aes_setup+0x114>)
    4300:	701a      	strb	r2, [r3, #0]

		/* Save key for later use after decryption or sleep. */
		memcpy(enc_key, key, AES_KEYSIZE);
    4302:	320e      	adds	r2, #14
    4304:	0001      	movs	r1, r0
    4306:	483d      	ldr	r0, [pc, #244]	; (43fc <sal_aes_setup+0x118>)
    4308:	4b3d      	ldr	r3, [pc, #244]	; (4400 <sal_aes_setup+0x11c>)
    430a:	4698      	mov	r8, r3
    430c:	4798      	blx	r3

		/* Set subregister AES_MODE (Bits 4:6 in AES_CON) to 1: KEY
		 * SETUP. */
		aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    430e:	4f3d      	ldr	r7, [pc, #244]	; (4404 <sal_aes_setup+0x120>)
    4310:	2310      	movs	r3, #16
    4312:	703b      	strb	r3, [r7, #0]

		/* Fill in key. */
		memcpy(aes_buf + 1, key, AES_KEYSIZE);
    4314:	1c78      	adds	r0, r7, #1
    4316:	2210      	movs	r2, #16
    4318:	0031      	movs	r1, r6
    431a:	47c0      	blx	r8

		/* Write to SRAM in one step. */
		trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL), aes_buf,
    431c:	2211      	movs	r2, #17
    431e:	0039      	movs	r1, r7
    4320:	2083      	movs	r0, #131	; 0x83
    4322:	4b39      	ldr	r3, [pc, #228]	; (4408 <sal_aes_setup+0x124>)
    4324:	4798      	blx	r3
				AES_BLOCKSIZE + 1);
	}

	/* Set encryption direction. */
	switch (dir) {
    4326:	2c00      	cmp	r4, #0
    4328:	d002      	beq.n	4330 <sal_aes_setup+0x4c>
    432a:	2c01      	cmp	r4, #1
    432c:	d012      	beq.n	4354 <sal_aes_setup+0x70>
    432e:	e05a      	b.n	43e6 <sal_aes_setup+0x102>
	case AES_DIR_ENCRYPT:
		if (last_dir == AES_DIR_DECRYPT) {
    4330:	4b31      	ldr	r3, [pc, #196]	; (43f8 <sal_aes_setup+0x114>)
    4332:	781b      	ldrb	r3, [r3, #0]
    4334:	2b01      	cmp	r3, #1
    4336:	d13d      	bne.n	43b4 <sal_aes_setup+0xd0>
			/*
			 * If the last operation was decryption, the encryption
			 * key must be stored in enc_key, so re-initialize it.
			 */
			aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    4338:	4e32      	ldr	r6, [pc, #200]	; (4404 <sal_aes_setup+0x120>)
    433a:	330f      	adds	r3, #15
    433c:	7033      	strb	r3, [r6, #0]

			/* Fill in key. */
			memcpy(aes_buf + 1, enc_key, AES_KEYSIZE);
    433e:	1c70      	adds	r0, r6, #1
    4340:	2210      	movs	r2, #16
    4342:	492e      	ldr	r1, [pc, #184]	; (43fc <sal_aes_setup+0x118>)
    4344:	4b2e      	ldr	r3, [pc, #184]	; (4400 <sal_aes_setup+0x11c>)
    4346:	4798      	blx	r3

			/* Write to SRAM in one step. */
			trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL),
    4348:	2211      	movs	r2, #17
    434a:	0031      	movs	r1, r6
    434c:	2083      	movs	r0, #131	; 0x83
    434e:	4b2e      	ldr	r3, [pc, #184]	; (4408 <sal_aes_setup+0x124>)
    4350:	4798      	blx	r3
    4352:	e02f      	b.n	43b4 <sal_aes_setup+0xd0>
		}

		break;

	case AES_DIR_DECRYPT:
		if (last_dir != AES_DIR_DECRYPT) {
    4354:	4b28      	ldr	r3, [pc, #160]	; (43f8 <sal_aes_setup+0x114>)
    4356:	781b      	ldrb	r3, [r3, #0]
    4358:	2b01      	cmp	r3, #1
    435a:	d02b      	beq.n	43b4 <sal_aes_setup+0xd0>
			aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    435c:	2210      	movs	r2, #16
    435e:	4b29      	ldr	r3, [pc, #164]	; (4404 <sal_aes_setup+0x120>)
    4360:	701a      	strb	r2, [r3, #0]

			if (!dec_initialized) {
    4362:	4b24      	ldr	r3, [pc, #144]	; (43f4 <sal_aes_setup+0x110>)
    4364:	781b      	ldrb	r3, [r3, #0]
    4366:	2b00      	cmp	r3, #0
    4368:	d116      	bne.n	4398 <sal_aes_setup+0xb4>

				/* Compute decryption key and initialize unit
				 * with it. */

				/* Dummy ECB encryption. */
				aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_ECB);
    436a:	4e26      	ldr	r6, [pc, #152]	; (4404 <sal_aes_setup+0x120>)
    436c:	7033      	strb	r3, [r6, #0]
				aes_buf[AES_BLOCKSIZE + 1] = SR_MASK(
    436e:	3380      	adds	r3, #128	; 0x80
    4370:	7473      	strb	r3, [r6, #17]
						SR_AES_MODE, AES_MODE_ECB) |
						SR_MASK(SR_AES_REQUEST,
						AES_REQUEST);

				setup_flag = true; /* Needed in sal_aes_wrrd().
    4372:	3a0f      	subs	r2, #15
    4374:	4b25      	ldr	r3, [pc, #148]	; (440c <sal_aes_setup+0x128>)
    4376:	701a      	strb	r2, [r3, #0]
				                   **/
				sal_aes_wrrd(dummy, NULL);
    4378:	2100      	movs	r1, #0
    437a:	4668      	mov	r0, sp
    437c:	4b24      	ldr	r3, [pc, #144]	; (4410 <sal_aes_setup+0x12c>)
    437e:	4798      	blx	r3

				/* Read last round key: */

				/* Set to key mode. */
				aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    4380:	2310      	movs	r3, #16
    4382:	7033      	strb	r3, [r6, #0]
				trx_sram_write(
    4384:	2201      	movs	r2, #1
    4386:	0031      	movs	r1, r6
    4388:	2083      	movs	r0, #131	; 0x83
    438a:	4b1f      	ldr	r3, [pc, #124]	; (4408 <sal_aes_setup+0x124>)
    438c:	4798      	blx	r3
						(AES_BASE_ADDR + RG_AES_CTRL),
						aes_buf, 1);

				/* Read the key. */
				trx_sram_read((AES_BASE_ADDR +
    438e:	2210      	movs	r2, #16
    4390:	4920      	ldr	r1, [pc, #128]	; (4414 <sal_aes_setup+0x130>)
    4392:	2084      	movs	r0, #132	; 0x84
    4394:	4b20      	ldr	r3, [pc, #128]	; (4418 <sal_aes_setup+0x134>)
    4396:	4798      	blx	r3
			 * simply re-initialize the unit;
			 * aes_buf[0] is AES_MODE_KEY
			 */

			/* Fill in key. */
			memcpy(aes_buf + 1, dec_key, AES_KEYSIZE);
    4398:	4e1a      	ldr	r6, [pc, #104]	; (4404 <sal_aes_setup+0x120>)
    439a:	1c70      	adds	r0, r6, #1
    439c:	2210      	movs	r2, #16
    439e:	491d      	ldr	r1, [pc, #116]	; (4414 <sal_aes_setup+0x130>)
    43a0:	4b17      	ldr	r3, [pc, #92]	; (4400 <sal_aes_setup+0x11c>)
    43a2:	4798      	blx	r3

			/* Write to SRAM in one step. */
			trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL),
    43a4:	2211      	movs	r2, #17
    43a6:	0031      	movs	r1, r6
    43a8:	2083      	movs	r0, #131	; 0x83
    43aa:	4b17      	ldr	r3, [pc, #92]	; (4408 <sal_aes_setup+0x124>)
    43ac:	4798      	blx	r3
					aes_buf, AES_BLOCKSIZE + 1);

			dec_initialized = true;
    43ae:	4b11      	ldr	r3, [pc, #68]	; (43f4 <sal_aes_setup+0x110>)
    43b0:	2201      	movs	r2, #1
    43b2:	701a      	strb	r2, [r3, #0]

	default:
		return false;
	}

	last_dir = dir;
    43b4:	4b10      	ldr	r3, [pc, #64]	; (43f8 <sal_aes_setup+0x114>)
    43b6:	701c      	strb	r4, [r3, #0]

	/* Set encryption mode. */
	switch (enc_mode) {
    43b8:	2d00      	cmp	r5, #0
    43ba:	d002      	beq.n	43c2 <sal_aes_setup+0xde>
				SR_MASK(SR_AES_REQUEST, AES_REQUEST);
	}
	break;

	default:
		return (false);
    43bc:	2000      	movs	r0, #0
	}

	last_dir = dir;

	/* Set encryption mode. */
	switch (enc_mode) {
    43be:	2d02      	cmp	r5, #2
    43c0:	d113      	bne.n	43ea <sal_aes_setup+0x106>
	case AES_MODE_ECB:
	case AES_MODE_CBC:
	{
		aes_buf[0] = SR_MASK(SR_AES_MODE, enc_mode) |
    43c2:	012d      	lsls	r5, r5, #4
    43c4:	2370      	movs	r3, #112	; 0x70
    43c6:	401d      	ands	r5, r3
    43c8:	00e3      	lsls	r3, r4, #3
    43ca:	2408      	movs	r4, #8
    43cc:	401c      	ands	r4, r3
    43ce:	432c      	orrs	r4, r5
    43d0:	4b0c      	ldr	r3, [pc, #48]	; (4404 <sal_aes_setup+0x120>)
    43d2:	701c      	strb	r4, [r3, #0]
				SR_MASK(SR_AES_DIR, dir);
		aes_buf[AES_BLOCKSIZE + 1] = SR_MASK(SR_AES_MODE, enc_mode) |
    43d4:	2280      	movs	r2, #128	; 0x80
    43d6:	4252      	negs	r2, r2
    43d8:	4314      	orrs	r4, r2
    43da:	745c      	strb	r4, [r3, #17]

	default:
		return (false);
	}

	setup_flag = true;
    43dc:	3281      	adds	r2, #129	; 0x81
    43de:	4b0b      	ldr	r3, [pc, #44]	; (440c <sal_aes_setup+0x128>)
    43e0:	701a      	strb	r2, [r3, #0]

	return (true);
    43e2:	2001      	movs	r0, #1
    43e4:	e001      	b.n	43ea <sal_aes_setup+0x106>
		}

		break;

	default:
		return false;
    43e6:	2000      	movs	r0, #0
    43e8:	e7ff      	b.n	43ea <sal_aes_setup+0x106>
	}

	setup_flag = true;

	return (true);
}
    43ea:	b004      	add	sp, #16
    43ec:	bc04      	pop	{r2}
    43ee:	4690      	mov	r8, r2
    43f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    43f2:	46c0      	nop			; (mov r8, r8)
    43f4:	20000790 	.word	0x20000790
    43f8:	20000009 	.word	0x20000009
    43fc:	200007a4 	.word	0x200007a4
    4400:	00006c8d 	.word	0x00006c8d
    4404:	200007b4 	.word	0x200007b4
    4408:	000049e1 	.word	0x000049e1
    440c:	200007c6 	.word	0x200007c6
    4410:	00004279 	.word	0x00004279
    4414:	20000794 	.word	0x20000794
    4418:	00004b49 	.word	0x00004b49

0000441c <sal_aes_read>:
 * of a series of sal_aes_wrrd() calls.
 *
 * @param[out] data     - result of previous operation
 */
void sal_aes_read(uint8_t *data)
{
    441c:	b510      	push	{r4, lr}
    441e:	0001      	movs	r1, r0
	trx_sram_read((AES_BASE_ADDR + RG_AES_STATE_KEY_0), data,
    4420:	2210      	movs	r2, #16
    4422:	2084      	movs	r0, #132	; 0x84
    4424:	4b01      	ldr	r3, [pc, #4]	; (442c <sal_aes_read+0x10>)
    4426:	4798      	blx	r3
			AES_BLOCKSIZE);
}
    4428:	bd10      	pop	{r4, pc}
    442a:	46c0      	nop			; (mov r8, r8)
    442c:	00004b49 	.word	0x00004b49

00004430 <AT86RFX_ISR>:
void AT86RFX_ISR(void)
#else
AT86RFX_ISR()
#endif

{
    4430:	b510      	push	{r4, lr}
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    4432:	2201      	movs	r2, #1
    4434:	4b03      	ldr	r3, [pc, #12]	; (4444 <AT86RFX_ISR+0x14>)
    4436:	611a      	str	r2, [r3, #16]
	/*Clearing the RF interrupt*/
	trx_irq_flag_clr();
  	/*Calling the interrupt routines*/
	if (irq_hdl_trx) {
    4438:	4b03      	ldr	r3, [pc, #12]	; (4448 <AT86RFX_ISR+0x18>)
    443a:	681b      	ldr	r3, [r3, #0]
    443c:	2b00      	cmp	r3, #0
    443e:	d000      	beq.n	4442 <AT86RFX_ISR+0x12>
		irq_hdl_trx();
    4440:	4798      	blx	r3
	}
}
    4442:	bd10      	pop	{r4, pc}
    4444:	40001800 	.word	0x40001800
    4448:	200007c8 	.word	0x200007c8

0000444c <trx_spi_init>:

void trx_spi_init(void)
{
    444c:	b530      	push	{r4, r5, lr}
    444e:	b085      	sub	sp, #20
		struct spi_slave_inst_config *const config)
{
	Assert(config);

	config->ss_pin          = 10;
	config->address_enabled = false;
    4450:	4a34      	ldr	r2, [pc, #208]	; (4524 <trx_spi_init+0xd8>)
    4452:	2300      	movs	r3, #0
    4454:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    4456:	7093      	strb	r3, [r2, #2]
	/* Initialize SPI in master mode to access the transceiver */
#if SAMD || SAMR21 || SAML21
	spi_slave_inst_get_config_defaults(&slave_dev_config);
	slave_dev_config.ss_pin = AT86RFX_SPI_CS;
    4458:	213f      	movs	r1, #63	; 0x3f
    445a:	7011      	strb	r1, [r2, #0]
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    445c:	4c32      	ldr	r4, [pc, #200]	; (4528 <trx_spi_init+0xdc>)
    445e:	7021      	strb	r1, [r4, #0]
	slave->address_enabled = config->address_enabled;
    4460:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    4462:	70a3      	strb	r3, [r4, #2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    4464:	2201      	movs	r2, #1
    4466:	4669      	mov	r1, sp
    4468:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    446a:	708b      	strb	r3, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    446c:	700a      	strb	r2, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    446e:	203f      	movs	r0, #63	; 0x3f
    4470:	4b2e      	ldr	r3, [pc, #184]	; (452c <trx_spi_init+0xe0>)
    4472:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    4474:	7823      	ldrb	r3, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    4476:	09da      	lsrs	r2, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    4478:	2100      	movs	r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    447a:	2a00      	cmp	r2, #0
    447c:	d104      	bne.n	4488 <trx_spi_init+0x3c>
		return &(ports[port_index]->Group[group_index]);
    447e:	0959      	lsrs	r1, r3, #5
    4480:	01c9      	lsls	r1, r1, #7
    4482:	4a2b      	ldr	r2, [pc, #172]	; (4530 <trx_spi_init+0xe4>)
    4484:	4694      	mov	ip, r2
    4486:	4461      	add	r1, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    4488:	221f      	movs	r2, #31
    448a:	4013      	ands	r3, r2
    448c:	3a1e      	subs	r2, #30
    448e:	0010      	movs	r0, r2
    4490:	4098      	lsls	r0, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    4492:	6188      	str	r0, [r1, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    4494:	4c27      	ldr	r4, [pc, #156]	; (4534 <trx_spi_init+0xe8>)
    4496:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    4498:	2300      	movs	r3, #0
    449a:	6063      	str	r3, [r4, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    449c:	60a3      	str	r3, [r4, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    449e:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    44a0:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    44a2:	74a2      	strb	r2, [r4, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    44a4:	74e2      	strb	r2, [r4, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    44a6:	7523      	strb	r3, [r4, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    44a8:	3223      	adds	r2, #35	; 0x23
    44aa:	54a3      	strb	r3, [r4, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    44ac:	0020      	movs	r0, r4
    44ae:	3018      	adds	r0, #24
    44b0:	3a18      	subs	r2, #24
    44b2:	2100      	movs	r1, #0
    44b4:	4b20      	ldr	r3, [pc, #128]	; (4538 <trx_spi_init+0xec>)
    44b6:	4798      	blx	r3
	spi_attach_slave(&slave, &slave_dev_config);
	spi_get_config_defaults(&config);
	config.mux_setting = AT86RFX_SPI_SERCOM_MUX_SETTING;
    44b8:	2380      	movs	r3, #128	; 0x80
    44ba:	025b      	lsls	r3, r3, #9
    44bc:	60e3      	str	r3, [r4, #12]
	config.mode_specific.master.baudrate = AT86RFX_SPI_BAUDRATE;
    44be:	4b1f      	ldr	r3, [pc, #124]	; (453c <trx_spi_init+0xf0>)
    44c0:	61a3      	str	r3, [r4, #24]
	config.pinmux_pad0 = AT86RFX_SPI_SERCOM_PINMUX_PAD0;
    44c2:	4b1f      	ldr	r3, [pc, #124]	; (4540 <trx_spi_init+0xf4>)
    44c4:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = AT86RFX_SPI_SERCOM_PINMUX_PAD1;
    44c6:	2301      	movs	r3, #1
    44c8:	425b      	negs	r3, r3
    44ca:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = AT86RFX_SPI_SERCOM_PINMUX_PAD2;
    44cc:	4b1d      	ldr	r3, [pc, #116]	; (4544 <trx_spi_init+0xf8>)
    44ce:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = AT86RFX_SPI_SERCOM_PINMUX_PAD3;
    44d0:	4b1d      	ldr	r3, [pc, #116]	; (4548 <trx_spi_init+0xfc>)
    44d2:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&master, AT86RFX_SPI, &config);
    44d4:	4d1d      	ldr	r5, [pc, #116]	; (454c <trx_spi_init+0x100>)
    44d6:	0022      	movs	r2, r4
    44d8:	491d      	ldr	r1, [pc, #116]	; (4550 <trx_spi_init+0x104>)
    44da:	0028      	movs	r0, r5
    44dc:	4b1d      	ldr	r3, [pc, #116]	; (4554 <trx_spi_init+0x108>)
    44de:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    44e0:	682a      	ldr	r2, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    44e2:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    44e4:	2b00      	cmp	r3, #0
    44e6:	d1fc      	bne.n	44e2 <trx_spi_init+0x96>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    44e8:	6813      	ldr	r3, [r2, #0]
    44ea:	2502      	movs	r5, #2
    44ec:	432b      	orrs	r3, r5
    44ee:	6013      	str	r3, [r2, #0]
	spi_enable(&master);

	struct extint_chan_conf eint_chan_conf;
	extint_chan_get_config_defaults(&eint_chan_conf);
    44f0:	ac01      	add	r4, sp, #4
    44f2:	0020      	movs	r0, r4
    44f4:	4b18      	ldr	r3, [pc, #96]	; (4558 <trx_spi_init+0x10c>)
    44f6:	4798      	blx	r3
	eint_chan_conf.gpio_pin = AT86RFX_IRQ_PIN;
    44f8:	2320      	movs	r3, #32
    44fa:	9301      	str	r3, [sp, #4]
	eint_chan_conf.gpio_pin_mux = AT86RFX_IRQ_PINMUX;
    44fc:	2380      	movs	r3, #128	; 0x80
    44fe:	039b      	lsls	r3, r3, #14
    4500:	6063      	str	r3, [r4, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_DOWN;
    4502:	7225      	strb	r5, [r4, #8]
	#if (SAML21)
	eint_chan_conf.enable_async_edge_detection = false;
	#else
	eint_chan_conf.wake_if_sleeping    = true;
    4504:	2301      	movs	r3, #1
    4506:	7263      	strb	r3, [r4, #9]
	#endif
	eint_chan_conf.filter_input_signal = false;
    4508:	2200      	movs	r2, #0
    450a:	72a2      	strb	r2, [r4, #10]
	eint_chan_conf.detection_criteria  = EXTINT_DETECT_RISING;
    450c:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(AT86RFX_IRQ_CHAN, &eint_chan_conf);
    450e:	0021      	movs	r1, r4
    4510:	2000      	movs	r0, #0
    4512:	4b12      	ldr	r3, [pc, #72]	; (455c <trx_spi_init+0x110>)
    4514:	4798      	blx	r3
	extint_register_callback(AT86RFX_ISR, AT86RFX_IRQ_CHAN,
    4516:	2200      	movs	r2, #0
    4518:	2100      	movs	r1, #0
    451a:	4811      	ldr	r0, [pc, #68]	; (4560 <trx_spi_init+0x114>)
    451c:	4b11      	ldr	r3, [pc, #68]	; (4564 <trx_spi_init+0x118>)
    451e:	4798      	blx	r3
	spi_master_setup_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE, SPI_MODE_0,
			AT86RFX_SPI_BAUDRATE, 0);
	spi_enable(AT86RFX_SPI);
	AT86RFX_INTC_INIT();
#endif
}
    4520:	b005      	add	sp, #20
    4522:	bd30      	pop	{r4, r5, pc}
    4524:	20000910 	.word	0x20000910
    4528:	20000914 	.word	0x20000914
    452c:	000004a1 	.word	0x000004a1
    4530:	41004400 	.word	0x41004400
    4534:	20000918 	.word	0x20000918
    4538:	00006c9f 	.word	0x00006c9f
    453c:	004c4b40 	.word	0x004c4b40
    4540:	00530005 	.word	0x00530005
    4544:	003e0005 	.word	0x003e0005
    4548:	00520005 	.word	0x00520005
    454c:	20000950 	.word	0x20000950
    4550:	42001800 	.word	0x42001800
    4554:	000010ad 	.word	0x000010ad
    4558:	00000419 	.word	0x00000419
    455c:	0000042d 	.word	0x0000042d
    4560:	00004431 	.word	0x00004431
    4564:	000002c1 	.word	0x000002c1

00004568 <PhyReset>:

void PhyReset(void)
{
    4568:	b570      	push	{r4, r5, r6, lr}
    456a:	4b09      	ldr	r3, [pc, #36]	; (4590 <PhyReset+0x28>)
    456c:	001c      	movs	r4, r3
    456e:	3480      	adds	r4, #128	; 0x80
    4570:	2580      	movs	r5, #128	; 0x80
    4572:	022d      	lsls	r5, r5, #8
    4574:	61a5      	str	r5, [r4, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
    4576:	2280      	movs	r2, #128	; 0x80
    4578:	0352      	lsls	r2, r2, #13
    457a:	615a      	str	r2, [r3, #20]
	/* Ensure control lines have correct levels. */
	RST_HIGH();
	SLP_TR_LOW();

	/* Wait typical time of timer TR1. */
	delay_us(330);
    457c:	20a5      	movs	r0, #165	; 0xa5
    457e:	0040      	lsls	r0, r0, #1
    4580:	4e04      	ldr	r6, [pc, #16]	; (4594 <PhyReset+0x2c>)
    4582:	47b0      	blx	r6
    4584:	6165      	str	r5, [r4, #20]

	RST_LOW();
	delay_us(10);
    4586:	200a      	movs	r0, #10
    4588:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    458a:	61a5      	str	r5, [r4, #24]
	RST_HIGH();
}
    458c:	bd70      	pop	{r4, r5, r6, pc}
    458e:	46c0      	nop			; (mov r8, r8)
    4590:	41004400 	.word	0x41004400
    4594:	00000155 	.word	0x00000155

00004598 <trx_reg_read>:

uint8_t trx_reg_read(uint8_t addr)
{
    4598:	b570      	push	{r4, r5, r6, lr}
    459a:	b082      	sub	sp, #8
    459c:	0005      	movs	r5, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    459e:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    45a2:	425a      	negs	r2, r3
    45a4:	4153      	adcs	r3, r2
    45a6:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    45a8:	b672      	cpsid	i
    45aa:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    45ae:	2200      	movs	r2, #0
    45b0:	4b33      	ldr	r3, [pc, #204]	; (4680 <trx_reg_read+0xe8>)
    45b2:	701a      	strb	r2, [r3, #0]
	return flags;
    45b4:	9c01      	ldr	r4, [sp, #4]
	/* Prepare the command byte */
	addr |= READ_ACCESS_COMMAND;

#if SAMD || SAMR21 || SAML21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    45b6:	4e33      	ldr	r6, [pc, #204]	; (4684 <trx_reg_read+0xec>)
    45b8:	3201      	adds	r2, #1
    45ba:	4933      	ldr	r1, [pc, #204]	; (4688 <trx_reg_read+0xf0>)
    45bc:	0030      	movs	r0, r6
    45be:	4b33      	ldr	r3, [pc, #204]	; (468c <trx_reg_read+0xf4>)
    45c0:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    45c2:	6833      	ldr	r3, [r6, #0]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    45c4:	2101      	movs	r1, #1

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    45c6:	7e1a      	ldrb	r2, [r3, #24]
    45c8:	420a      	tst	r2, r1
    45ca:	d0fc      	beq.n	45c6 <trx_reg_read+0x2e>
    45cc:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    45ce:	07d2      	lsls	r2, r2, #31
    45d0:	d502      	bpl.n	45d8 <trx_reg_read+0x40>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    45d2:	2280      	movs	r2, #128	; 0x80
    45d4:	4315      	orrs	r5, r2
    45d6:	629d      	str	r5, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    45d8:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    45da:	7e1a      	ldrb	r2, [r3, #24]
    45dc:	420a      	tst	r2, r1
    45de:	d0fc      	beq.n	45da <trx_reg_read+0x42>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    45e0:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    45e2:	7e1a      	ldrb	r2, [r3, #24]
    45e4:	420a      	tst	r2, r1
    45e6:	d0fc      	beq.n	45e2 <trx_reg_read+0x4a>
    45e8:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    45ea:	0752      	lsls	r2, r2, #29
    45ec:	d512      	bpl.n	4614 <trx_reg_read+0x7c>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    45ee:	8b5a      	ldrh	r2, [r3, #26]
    45f0:	0752      	lsls	r2, r2, #29
    45f2:	d501      	bpl.n	45f8 <trx_reg_read+0x60>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    45f4:	2204      	movs	r2, #4
    45f6:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    45f8:	4a22      	ldr	r2, [pc, #136]	; (4684 <trx_reg_read+0xec>)
    45fa:	7992      	ldrb	r2, [r2, #6]
    45fc:	2a01      	cmp	r2, #1
    45fe:	d105      	bne.n	460c <trx_reg_read+0x74>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4600:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4602:	05d2      	lsls	r2, r2, #23
    4604:	0dd2      	lsrs	r2, r2, #23
    4606:	4922      	ldr	r1, [pc, #136]	; (4690 <trx_reg_read+0xf8>)
    4608:	800a      	strh	r2, [r1, #0]
    460a:	e003      	b.n	4614 <trx_reg_read+0x7c>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    460c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    460e:	b2d2      	uxtb	r2, r2
    4610:	491f      	ldr	r1, [pc, #124]	; (4690 <trx_reg_read+0xf8>)
    4612:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	while (!spi_is_ready_to_write(&master)) {
    4614:	2101      	movs	r1, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4616:	7e1a      	ldrb	r2, [r3, #24]
    4618:	420a      	tst	r2, r1
    461a:	d0fc      	beq.n	4616 <trx_reg_read+0x7e>
    461c:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    461e:	07d2      	lsls	r2, r2, #31
    4620:	d501      	bpl.n	4626 <trx_reg_read+0x8e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4622:	2200      	movs	r2, #0
    4624:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    4626:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4628:	7e1a      	ldrb	r2, [r3, #24]
    462a:	420a      	tst	r2, r1
    462c:	d0fc      	beq.n	4628 <trx_reg_read+0x90>
	}
	while (!spi_is_ready_to_read(&master)) {
    462e:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4630:	7e1a      	ldrb	r2, [r3, #24]
    4632:	420a      	tst	r2, r1
    4634:	d0fc      	beq.n	4630 <trx_reg_read+0x98>
    4636:	7e1a      	ldrb	r2, [r3, #24]
}

uint8_t trx_reg_read(uint8_t addr)
{
#if SAMD || SAMR21 || SAML21
	uint16_t register_value = 0;
    4638:	2500      	movs	r5, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    463a:	0752      	lsls	r2, r2, #29
    463c:	d50e      	bpl.n	465c <trx_reg_read+0xc4>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    463e:	8b5a      	ldrh	r2, [r3, #26]
    4640:	0752      	lsls	r2, r2, #29
    4642:	d501      	bpl.n	4648 <trx_reg_read+0xb0>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4644:	2204      	movs	r2, #4
    4646:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4648:	4a0e      	ldr	r2, [pc, #56]	; (4684 <trx_reg_read+0xec>)
    464a:	7992      	ldrb	r2, [r2, #6]
    464c:	2a01      	cmp	r2, #1
    464e:	d103      	bne.n	4658 <trx_reg_read+0xc0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4650:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    4652:	05ed      	lsls	r5, r5, #23
    4654:	0ded      	lsrs	r5, r5, #23
    4656:	e001      	b.n	465c <trx_reg_read+0xc4>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4658:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    465a:	b2ed      	uxtb	r5, r5
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &register_value);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    465c:	2200      	movs	r2, #0
    465e:	490a      	ldr	r1, [pc, #40]	; (4688 <trx_reg_read+0xf0>)
    4660:	4808      	ldr	r0, [pc, #32]	; (4684 <trx_reg_read+0xec>)
    4662:	4b0a      	ldr	r3, [pc, #40]	; (468c <trx_reg_read+0xf4>)
    4664:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    4666:	23ff      	movs	r3, #255	; 0xff
    4668:	4223      	tst	r3, r4
    466a:	d005      	beq.n	4678 <trx_reg_read+0xe0>
		cpu_irq_enable();
    466c:	2201      	movs	r2, #1
    466e:	4b04      	ldr	r3, [pc, #16]	; (4680 <trx_reg_read+0xe8>)
    4670:	701a      	strb	r2, [r3, #0]
    4672:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    4676:	b662      	cpsie	i

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();

	return register_value;
    4678:	b2e8      	uxtb	r0, r5
}
    467a:	b002      	add	sp, #8
    467c:	bd70      	pop	{r4, r5, r6, pc}
    467e:	46c0      	nop			; (mov r8, r8)
    4680:	20000008 	.word	0x20000008
    4684:	20000950 	.word	0x20000950
    4688:	20000914 	.word	0x20000914
    468c:	00001359 	.word	0x00001359
    4690:	2000090c 	.word	0x2000090c

00004694 <trx_reg_write>:

void trx_reg_write(uint8_t addr, uint8_t data)
{
    4694:	b5f0      	push	{r4, r5, r6, r7, lr}
    4696:	b083      	sub	sp, #12
    4698:	0006      	movs	r6, r0
    469a:	000c      	movs	r4, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    469c:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    46a0:	425a      	negs	r2, r3
    46a2:	4153      	adcs	r3, r2
    46a4:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    46a6:	b672      	cpsid	i
    46a8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    46ac:	2200      	movs	r2, #0
    46ae:	4b34      	ldr	r3, [pc, #208]	; (4780 <trx_reg_write+0xec>)
    46b0:	701a      	strb	r2, [r3, #0]
	return flags;
    46b2:	9d01      	ldr	r5, [sp, #4]
	/* Prepare the command byte */
	addr |= WRITE_ACCESS_COMMAND;

#if SAMD || SAMR21 || SAML21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    46b4:	4f33      	ldr	r7, [pc, #204]	; (4784 <trx_reg_write+0xf0>)
    46b6:	3201      	adds	r2, #1
    46b8:	4933      	ldr	r1, [pc, #204]	; (4788 <trx_reg_write+0xf4>)
    46ba:	0038      	movs	r0, r7
    46bc:	4b33      	ldr	r3, [pc, #204]	; (478c <trx_reg_write+0xf8>)
    46be:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    46c0:	683b      	ldr	r3, [r7, #0]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    46c2:	2101      	movs	r1, #1

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    46c4:	7e1a      	ldrb	r2, [r3, #24]
    46c6:	420a      	tst	r2, r1
    46c8:	d0fc      	beq.n	46c4 <trx_reg_write+0x30>
    46ca:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    46cc:	07d2      	lsls	r2, r2, #31
    46ce:	d502      	bpl.n	46d6 <trx_reg_write+0x42>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    46d0:	22c0      	movs	r2, #192	; 0xc0
    46d2:	4316      	orrs	r6, r2
    46d4:	629e      	str	r6, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    46d6:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    46d8:	7e1a      	ldrb	r2, [r3, #24]
    46da:	420a      	tst	r2, r1
    46dc:	d0fc      	beq.n	46d8 <trx_reg_write+0x44>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    46de:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    46e0:	7e1a      	ldrb	r2, [r3, #24]
    46e2:	420a      	tst	r2, r1
    46e4:	d0fc      	beq.n	46e0 <trx_reg_write+0x4c>
    46e6:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    46e8:	0752      	lsls	r2, r2, #29
    46ea:	d512      	bpl.n	4712 <trx_reg_write+0x7e>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    46ec:	8b5a      	ldrh	r2, [r3, #26]
    46ee:	0752      	lsls	r2, r2, #29
    46f0:	d501      	bpl.n	46f6 <trx_reg_write+0x62>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    46f2:	2204      	movs	r2, #4
    46f4:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    46f6:	4a23      	ldr	r2, [pc, #140]	; (4784 <trx_reg_write+0xf0>)
    46f8:	7992      	ldrb	r2, [r2, #6]
    46fa:	2a01      	cmp	r2, #1
    46fc:	d105      	bne.n	470a <trx_reg_write+0x76>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    46fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4700:	05d2      	lsls	r2, r2, #23
    4702:	0dd2      	lsrs	r2, r2, #23
    4704:	4922      	ldr	r1, [pc, #136]	; (4790 <trx_reg_write+0xfc>)
    4706:	800a      	strh	r2, [r1, #0]
    4708:	e003      	b.n	4712 <trx_reg_write+0x7e>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    470a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    470c:	b2d2      	uxtb	r2, r2
    470e:	4920      	ldr	r1, [pc, #128]	; (4790 <trx_reg_write+0xfc>)
    4710:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master)) {
    4712:	2101      	movs	r1, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4714:	7e1a      	ldrb	r2, [r3, #24]
    4716:	420a      	tst	r2, r1
    4718:	d0fc      	beq.n	4714 <trx_reg_write+0x80>
    471a:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    471c:	07d2      	lsls	r2, r2, #31
    471e:	d500      	bpl.n	4722 <trx_reg_write+0x8e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4720:	629c      	str	r4, [r3, #40]	; 0x28
	}
	spi_write(&master, data);
	while (!spi_is_write_complete(&master)) {
    4722:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4724:	7e1a      	ldrb	r2, [r3, #24]
    4726:	420a      	tst	r2, r1
    4728:	d0fc      	beq.n	4724 <trx_reg_write+0x90>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    472a:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    472c:	7e1a      	ldrb	r2, [r3, #24]
    472e:	420a      	tst	r2, r1
    4730:	d0fc      	beq.n	472c <trx_reg_write+0x98>
    4732:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4734:	0752      	lsls	r2, r2, #29
    4736:	d512      	bpl.n	475e <trx_reg_write+0xca>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4738:	8b5a      	ldrh	r2, [r3, #26]
    473a:	0752      	lsls	r2, r2, #29
    473c:	d501      	bpl.n	4742 <trx_reg_write+0xae>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    473e:	2204      	movs	r2, #4
    4740:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4742:	4a10      	ldr	r2, [pc, #64]	; (4784 <trx_reg_write+0xf0>)
    4744:	7992      	ldrb	r2, [r2, #6]
    4746:	2a01      	cmp	r2, #1
    4748:	d105      	bne.n	4756 <trx_reg_write+0xc2>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    474a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    474c:	05db      	lsls	r3, r3, #23
    474e:	0ddb      	lsrs	r3, r3, #23
    4750:	4a0f      	ldr	r2, [pc, #60]	; (4790 <trx_reg_write+0xfc>)
    4752:	8013      	strh	r3, [r2, #0]
    4754:	e003      	b.n	475e <trx_reg_write+0xca>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4758:	b2db      	uxtb	r3, r3
    475a:	4a0d      	ldr	r2, [pc, #52]	; (4790 <trx_reg_write+0xfc>)
    475c:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    475e:	2200      	movs	r2, #0
    4760:	4909      	ldr	r1, [pc, #36]	; (4788 <trx_reg_write+0xf4>)
    4762:	4808      	ldr	r0, [pc, #32]	; (4784 <trx_reg_write+0xf0>)
    4764:	4b09      	ldr	r3, [pc, #36]	; (478c <trx_reg_write+0xf8>)
    4766:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    4768:	23ff      	movs	r3, #255	; 0xff
    476a:	422b      	tst	r3, r5
    476c:	d005      	beq.n	477a <trx_reg_write+0xe6>
		cpu_irq_enable();
    476e:	2201      	movs	r2, #1
    4770:	4b03      	ldr	r3, [pc, #12]	; (4780 <trx_reg_write+0xec>)
    4772:	701a      	strb	r2, [r3, #0]
    4774:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    4778:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    477a:	b003      	add	sp, #12
    477c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    477e:	46c0      	nop			; (mov r8, r8)
    4780:	20000008 	.word	0x20000008
    4784:	20000950 	.word	0x20000950
    4788:	20000914 	.word	0x20000914
    478c:	00001359 	.word	0x00001359
    4790:	2000090c 	.word	0x2000090c

00004794 <trx_frame_read>:
	new_value |= current_reg_value;
	trx_reg_write(reg_addr, new_value);
}

void trx_frame_read(uint8_t *data, uint8_t length)
{
    4794:	b5f0      	push	{r4, r5, r6, r7, lr}
    4796:	4657      	mov	r7, sl
    4798:	464e      	mov	r6, r9
    479a:	4645      	mov	r5, r8
    479c:	b4e0      	push	{r5, r6, r7}
    479e:	b082      	sub	sp, #8
    47a0:	0005      	movs	r5, r0
    47a2:	000c      	movs	r4, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    47a4:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    47a8:	425a      	negs	r2, r3
    47aa:	4153      	adcs	r3, r2
    47ac:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    47ae:	b672      	cpsid	i
    47b0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    47b4:	2200      	movs	r2, #0
    47b6:	4b3e      	ldr	r3, [pc, #248]	; (48b0 <trx_frame_read+0x11c>)
    47b8:	701a      	strb	r2, [r3, #0]
	return flags;
    47ba:	9b01      	ldr	r3, [sp, #4]
    47bc:	4698      	mov	r8, r3
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21 || SAML21
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    47be:	4f3d      	ldr	r7, [pc, #244]	; (48b4 <trx_frame_read+0x120>)
    47c0:	3201      	adds	r2, #1
    47c2:	493d      	ldr	r1, [pc, #244]	; (48b8 <trx_frame_read+0x124>)
    47c4:	0038      	movs	r0, r7
    47c6:	4b3d      	ldr	r3, [pc, #244]	; (48bc <trx_frame_read+0x128>)
    47c8:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    47ca:	683b      	ldr	r3, [r7, #0]

	temp = TRX_CMD_FR;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    47cc:	2101      	movs	r1, #1

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    47ce:	7e1a      	ldrb	r2, [r3, #24]
    47d0:	420a      	tst	r2, r1
    47d2:	d0fc      	beq.n	47ce <trx_frame_read+0x3a>
    47d4:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    47d6:	07d2      	lsls	r2, r2, #31
    47d8:	d501      	bpl.n	47de <trx_frame_read+0x4a>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    47da:	2220      	movs	r2, #32
    47dc:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    47de:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    47e0:	7e1a      	ldrb	r2, [r3, #24]
    47e2:	420a      	tst	r2, r1
    47e4:	d0fc      	beq.n	47e0 <trx_frame_read+0x4c>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    47e6:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    47e8:	7e1a      	ldrb	r2, [r3, #24]
    47ea:	420a      	tst	r2, r1
    47ec:	d0fc      	beq.n	47e8 <trx_frame_read+0x54>
    47ee:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    47f0:	0752      	lsls	r2, r2, #29
    47f2:	d512      	bpl.n	481a <trx_frame_read+0x86>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    47f4:	8b5a      	ldrh	r2, [r3, #26]
    47f6:	0752      	lsls	r2, r2, #29
    47f8:	d501      	bpl.n	47fe <trx_frame_read+0x6a>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    47fa:	2204      	movs	r2, #4
    47fc:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    47fe:	4a2d      	ldr	r2, [pc, #180]	; (48b4 <trx_frame_read+0x120>)
    4800:	7992      	ldrb	r2, [r2, #6]
    4802:	2a01      	cmp	r2, #1
    4804:	d105      	bne.n	4812 <trx_frame_read+0x7e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4808:	05db      	lsls	r3, r3, #23
    480a:	0ddb      	lsrs	r3, r3, #23
    480c:	4a2c      	ldr	r2, [pc, #176]	; (48c0 <trx_frame_read+0x12c>)
    480e:	8013      	strh	r3, [r2, #0]
    4810:	e003      	b.n	481a <trx_frame_read+0x86>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4814:	b2db      	uxtb	r3, r3
    4816:	4a2a      	ldr	r2, [pc, #168]	; (48c0 <trx_frame_read+0x12c>)
    4818:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	while (length--) {
    481a:	1e63      	subs	r3, r4, #1
    481c:	b2db      	uxtb	r3, r3
    481e:	2c00      	cmp	r4, #0
    4820:	d030      	beq.n	4884 <trx_frame_read+0xf0>
    4822:	3301      	adds	r3, #1
    4824:	469c      	mov	ip, r3
    4826:	44ac      	add	ip, r5
    4828:	2720      	movs	r7, #32
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    482a:	4e22      	ldr	r6, [pc, #136]	; (48b4 <trx_frame_read+0x120>)
		while (!spi_is_ready_to_write(&master)) {
    482c:	2001      	movs	r0, #1
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    482e:	2300      	movs	r3, #0
    4830:	469a      	mov	sl, r3
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    4832:	2402      	movs	r4, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    4834:	2104      	movs	r1, #4
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4836:	46b1      	mov	r9, r6
    4838:	e022      	b.n	4880 <trx_frame_read+0xec>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    483a:	7e1a      	ldrb	r2, [r3, #24]
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    483c:	4202      	tst	r2, r0
    483e:	d0fc      	beq.n	483a <trx_frame_read+0xa6>
    4840:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4842:	4202      	tst	r2, r0
    4844:	d001      	beq.n	484a <trx_frame_read+0xb6>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4846:	4652      	mov	r2, sl
    4848:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    484a:	7e1a      	ldrb	r2, [r3, #24]
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    484c:	4222      	tst	r2, r4
    484e:	d0fc      	beq.n	484a <trx_frame_read+0xb6>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4850:	7e1a      	ldrb	r2, [r3, #24]
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    4852:	420a      	tst	r2, r1
    4854:	d0fc      	beq.n	4850 <trx_frame_read+0xbc>
    4856:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4858:	420a      	tst	r2, r1
    485a:	d00d      	beq.n	4878 <trx_frame_read+0xe4>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    485c:	8b5a      	ldrh	r2, [r3, #26]
    485e:	420a      	tst	r2, r1
    4860:	d000      	beq.n	4864 <trx_frame_read+0xd0>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4862:	8359      	strh	r1, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4864:	464a      	mov	r2, r9
    4866:	7992      	ldrb	r2, [r2, #6]
    4868:	2a01      	cmp	r2, #1
    486a:	d103      	bne.n	4874 <trx_frame_read+0xe0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    486c:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    486e:	05ff      	lsls	r7, r7, #23
    4870:	0dff      	lsrs	r7, r7, #23
    4872:	e001      	b.n	4878 <trx_frame_read+0xe4>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4874:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    4876:	b2ff      	uxtb	r7, r7
		}
		spi_read(&master, &temp);
		*data = temp;
    4878:	702f      	strb	r7, [r5, #0]
		data++;
    487a:	3501      	adds	r5, #1
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	while (length--) {
    487c:	45ac      	cmp	ip, r5
    487e:	d001      	beq.n	4884 <trx_frame_read+0xf0>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4880:	6833      	ldr	r3, [r6, #0]
    4882:	e7da      	b.n	483a <trx_frame_read+0xa6>
		*data = temp;
		data++;
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    4884:	2200      	movs	r2, #0
    4886:	490c      	ldr	r1, [pc, #48]	; (48b8 <trx_frame_read+0x124>)
    4888:	480a      	ldr	r0, [pc, #40]	; (48b4 <trx_frame_read+0x120>)
    488a:	4b0c      	ldr	r3, [pc, #48]	; (48bc <trx_frame_read+0x128>)
    488c:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    488e:	23ff      	movs	r3, #255	; 0xff
    4890:	4642      	mov	r2, r8
    4892:	4213      	tst	r3, r2
    4894:	d005      	beq.n	48a2 <trx_frame_read+0x10e>
		cpu_irq_enable();
    4896:	2201      	movs	r2, #1
    4898:	4b05      	ldr	r3, [pc, #20]	; (48b0 <trx_frame_read+0x11c>)
    489a:	701a      	strb	r2, [r3, #0]
    489c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    48a0:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    48a2:	b002      	add	sp, #8
    48a4:	bc1c      	pop	{r2, r3, r4}
    48a6:	4690      	mov	r8, r2
    48a8:	4699      	mov	r9, r3
    48aa:	46a2      	mov	sl, r4
    48ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    48ae:	46c0      	nop			; (mov r8, r8)
    48b0:	20000008 	.word	0x20000008
    48b4:	20000950 	.word	0x20000950
    48b8:	20000914 	.word	0x20000914
    48bc:	00001359 	.word	0x00001359
    48c0:	2000090c 	.word	0x2000090c

000048c4 <trx_frame_write>:

void trx_frame_write(uint8_t *data, uint8_t length)
{
    48c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    48c6:	4647      	mov	r7, r8
    48c8:	b480      	push	{r7}
    48ca:	b082      	sub	sp, #8
    48cc:	0004      	movs	r4, r0
    48ce:	000d      	movs	r5, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    48d0:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    48d4:	425a      	negs	r2, r3
    48d6:	4153      	adcs	r3, r2
    48d8:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    48da:	b672      	cpsid	i
    48dc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    48e0:	2200      	movs	r2, #0
    48e2:	4b3a      	ldr	r3, [pc, #232]	; (49cc <trx_frame_write+0x108>)
    48e4:	701a      	strb	r2, [r3, #0]
	return flags;
    48e6:	9b01      	ldr	r3, [sp, #4]
    48e8:	4698      	mov	r8, r3
	**/
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21 || SAML21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    48ea:	4f39      	ldr	r7, [pc, #228]	; (49d0 <trx_frame_write+0x10c>)
    48ec:	3201      	adds	r2, #1
    48ee:	4939      	ldr	r1, [pc, #228]	; (49d4 <trx_frame_write+0x110>)
    48f0:	0038      	movs	r0, r7
    48f2:	4b39      	ldr	r3, [pc, #228]	; (49d8 <trx_frame_write+0x114>)
    48f4:	4798      	blx	r3
    48f6:	683b      	ldr	r3, [r7, #0]

	temp = TRX_CMD_FW;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    48f8:	2101      	movs	r1, #1

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    48fa:	7e1a      	ldrb	r2, [r3, #24]
    48fc:	420a      	tst	r2, r1
    48fe:	d0fc      	beq.n	48fa <trx_frame_write+0x36>
    4900:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4902:	07d2      	lsls	r2, r2, #31
    4904:	d501      	bpl.n	490a <trx_frame_write+0x46>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4906:	2260      	movs	r2, #96	; 0x60
    4908:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    490a:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    490c:	7e1a      	ldrb	r2, [r3, #24]
    490e:	420a      	tst	r2, r1
    4910:	d0fc      	beq.n	490c <trx_frame_write+0x48>
	} 
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4912:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4914:	7e1a      	ldrb	r2, [r3, #24]
    4916:	420a      	tst	r2, r1
    4918:	d0fc      	beq.n	4914 <trx_frame_write+0x50>
    491a:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    491c:	0752      	lsls	r2, r2, #29
    491e:	d512      	bpl.n	4946 <trx_frame_write+0x82>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4920:	8b5a      	ldrh	r2, [r3, #26]
    4922:	0752      	lsls	r2, r2, #29
    4924:	d501      	bpl.n	492a <trx_frame_write+0x66>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4926:	2204      	movs	r2, #4
    4928:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    492a:	4a29      	ldr	r2, [pc, #164]	; (49d0 <trx_frame_write+0x10c>)
    492c:	7992      	ldrb	r2, [r2, #6]
    492e:	2a01      	cmp	r2, #1
    4930:	d105      	bne.n	493e <trx_frame_write+0x7a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4932:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4934:	05d2      	lsls	r2, r2, #23
    4936:	0dd2      	lsrs	r2, r2, #23
    4938:	4928      	ldr	r1, [pc, #160]	; (49dc <trx_frame_write+0x118>)
    493a:	800a      	strh	r2, [r1, #0]
    493c:	e003      	b.n	4946 <trx_frame_write+0x82>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    493e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4940:	b2d2      	uxtb	r2, r2
    4942:	4926      	ldr	r1, [pc, #152]	; (49dc <trx_frame_write+0x118>)
    4944:	800a      	strh	r2, [r1, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4946:	4a22      	ldr	r2, [pc, #136]	; (49d0 <trx_frame_write+0x10c>)
    4948:	7992      	ldrb	r2, [r2, #6]
    494a:	4694      	mov	ip, r2
    494c:	0021      	movs	r1, r4
	}
	spi_read(&master, &dummy_read);
	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    494e:	2701      	movs	r7, #1
		}
		spi_write(&master, *data++);
		while (!spi_is_write_complete(&master)) {
    4950:	2002      	movs	r0, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    4952:	2404      	movs	r4, #4
    4954:	e022      	b.n	499c <trx_frame_write+0xd8>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4956:	7e1a      	ldrb	r2, [r3, #24]
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);
	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    4958:	423a      	tst	r2, r7
    495a:	d0fc      	beq.n	4956 <trx_frame_write+0x92>
    495c:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    495e:	423a      	tst	r2, r7
    4960:	d001      	beq.n	4966 <trx_frame_write+0xa2>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4962:	780a      	ldrb	r2, [r1, #0]
    4964:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4966:	7e1a      	ldrb	r2, [r3, #24]
		}
		spi_write(&master, *data++);
		while (!spi_is_write_complete(&master)) {
    4968:	4202      	tst	r2, r0
    496a:	d0fc      	beq.n	4966 <trx_frame_write+0xa2>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    496c:	7e1a      	ldrb	r2, [r3, #24]
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    496e:	4222      	tst	r2, r4
    4970:	d0fc      	beq.n	496c <trx_frame_write+0xa8>
    4972:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4974:	4222      	tst	r2, r4
    4976:	d010      	beq.n	499a <trx_frame_write+0xd6>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4978:	8b5a      	ldrh	r2, [r3, #26]
    497a:	4222      	tst	r2, r4
    497c:	d000      	beq.n	4980 <trx_frame_write+0xbc>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    497e:	835c      	strh	r4, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4980:	4662      	mov	r2, ip
    4982:	2a01      	cmp	r2, #1
    4984:	d105      	bne.n	4992 <trx_frame_write+0xce>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4986:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4988:	05d2      	lsls	r2, r2, #23
    498a:	0dd2      	lsrs	r2, r2, #23
    498c:	4e13      	ldr	r6, [pc, #76]	; (49dc <trx_frame_write+0x118>)
    498e:	8032      	strh	r2, [r6, #0]
    4990:	e003      	b.n	499a <trx_frame_write+0xd6>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4992:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4994:	b2d2      	uxtb	r2, r2
    4996:	4e11      	ldr	r6, [pc, #68]	; (49dc <trx_frame_write+0x118>)
    4998:	8032      	strh	r2, [r6, #0]
    499a:	3101      	adds	r1, #1
	} 
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);
	while (length--) {
    499c:	3d01      	subs	r5, #1
    499e:	b2ed      	uxtb	r5, r5
    49a0:	2dff      	cmp	r5, #255	; 0xff
    49a2:	d1d8      	bne.n	4956 <trx_frame_write+0x92>
		}
		spi_read(&master, &dummy_read);
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    49a4:	2200      	movs	r2, #0
    49a6:	490b      	ldr	r1, [pc, #44]	; (49d4 <trx_frame_write+0x110>)
    49a8:	4809      	ldr	r0, [pc, #36]	; (49d0 <trx_frame_write+0x10c>)
    49aa:	4b0b      	ldr	r3, [pc, #44]	; (49d8 <trx_frame_write+0x114>)
    49ac:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    49ae:	23ff      	movs	r3, #255	; 0xff
    49b0:	4642      	mov	r2, r8
    49b2:	4213      	tst	r3, r2
    49b4:	d005      	beq.n	49c2 <trx_frame_write+0xfe>
		cpu_irq_enable();
    49b6:	2201      	movs	r2, #1
    49b8:	4b04      	ldr	r3, [pc, #16]	; (49cc <trx_frame_write+0x108>)
    49ba:	701a      	strb	r2, [r3, #0]
    49bc:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    49c0:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    49c2:	b002      	add	sp, #8
    49c4:	bc04      	pop	{r2}
    49c6:	4690      	mov	r8, r2
    49c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    49ca:	46c0      	nop			; (mov r8, r8)
    49cc:	20000008 	.word	0x20000008
    49d0:	20000950 	.word	0x20000950
    49d4:	20000914 	.word	0x20000914
    49d8:	00001359 	.word	0x00001359
    49dc:	2000090c 	.word	0x2000090c

000049e0 <trx_sram_write>:
 * @param addr Start address in the SRAM for the write operation
 * @param data Pointer to the data to be written into SRAM
 * @param length Number of bytes to be written into SRAM
 */
void trx_sram_write(uint8_t addr, uint8_t *data, uint8_t length)
{
    49e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    49e2:	4647      	mov	r7, r8
    49e4:	b480      	push	{r7}
    49e6:	b082      	sub	sp, #8
    49e8:	0006      	movs	r6, r0
    49ea:	000d      	movs	r5, r1
    49ec:	0014      	movs	r4, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    49ee:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    49f2:	425a      	negs	r2, r3
    49f4:	4153      	adcs	r3, r2
    49f6:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    49f8:	b672      	cpsid	i
    49fa:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    49fe:	2200      	movs	r2, #0
    4a00:	4b4c      	ldr	r3, [pc, #304]	; (4b34 <trx_sram_write+0x154>)
    4a02:	701a      	strb	r2, [r3, #0]
	return flags;
    4a04:	9b01      	ldr	r3, [sp, #4]
    4a06:	4698      	mov	r8, r3
	**/
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21 || SAML21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    4a08:	4f4b      	ldr	r7, [pc, #300]	; (4b38 <trx_sram_write+0x158>)
    4a0a:	3201      	adds	r2, #1
    4a0c:	494b      	ldr	r1, [pc, #300]	; (4b3c <trx_sram_write+0x15c>)
    4a0e:	0038      	movs	r0, r7
    4a10:	4b4b      	ldr	r3, [pc, #300]	; (4b40 <trx_sram_write+0x160>)
    4a12:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4a14:	683b      	ldr	r3, [r7, #0]

	/* Send the command byte */
	temp = TRX_CMD_SW;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    4a16:	2101      	movs	r1, #1

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4a18:	7e1a      	ldrb	r2, [r3, #24]
    4a1a:	420a      	tst	r2, r1
    4a1c:	d0fc      	beq.n	4a18 <trx_sram_write+0x38>
    4a1e:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4a20:	07d2      	lsls	r2, r2, #31
    4a22:	d501      	bpl.n	4a28 <trx_sram_write+0x48>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4a24:	2240      	movs	r2, #64	; 0x40
    4a26:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    4a28:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4a2a:	7e1a      	ldrb	r2, [r3, #24]
    4a2c:	420a      	tst	r2, r1
    4a2e:	d0fc      	beq.n	4a2a <trx_sram_write+0x4a>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4a30:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4a32:	7e1a      	ldrb	r2, [r3, #24]
    4a34:	420a      	tst	r2, r1
    4a36:	d0fc      	beq.n	4a32 <trx_sram_write+0x52>
    4a38:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4a3a:	0752      	lsls	r2, r2, #29
    4a3c:	d512      	bpl.n	4a64 <trx_sram_write+0x84>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4a3e:	8b5a      	ldrh	r2, [r3, #26]
    4a40:	0752      	lsls	r2, r2, #29
    4a42:	d501      	bpl.n	4a48 <trx_sram_write+0x68>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4a44:	2204      	movs	r2, #4
    4a46:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4a48:	4a3b      	ldr	r2, [pc, #236]	; (4b38 <trx_sram_write+0x158>)
    4a4a:	7992      	ldrb	r2, [r2, #6]
    4a4c:	2a01      	cmp	r2, #1
    4a4e:	d105      	bne.n	4a5c <trx_sram_write+0x7c>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4a50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4a52:	05d2      	lsls	r2, r2, #23
    4a54:	0dd2      	lsrs	r2, r2, #23
    4a56:	493b      	ldr	r1, [pc, #236]	; (4b44 <trx_sram_write+0x164>)
    4a58:	800a      	strh	r2, [r1, #0]
    4a5a:	e003      	b.n	4a64 <trx_sram_write+0x84>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4a5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4a5e:	b2d2      	uxtb	r2, r2
    4a60:	4938      	ldr	r1, [pc, #224]	; (4b44 <trx_sram_write+0x164>)
    4a62:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Send the address from which the write operation should start */
	while (!spi_is_ready_to_write(&master)) {
    4a64:	2101      	movs	r1, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4a66:	7e1a      	ldrb	r2, [r3, #24]
    4a68:	420a      	tst	r2, r1
    4a6a:	d0fc      	beq.n	4a66 <trx_sram_write+0x86>
    4a6c:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4a6e:	07d2      	lsls	r2, r2, #31
    4a70:	d500      	bpl.n	4a74 <trx_sram_write+0x94>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4a72:	629e      	str	r6, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    4a74:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4a76:	7e1a      	ldrb	r2, [r3, #24]
    4a78:	420a      	tst	r2, r1
    4a7a:	d0fc      	beq.n	4a76 <trx_sram_write+0x96>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4a7c:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4a7e:	7e1a      	ldrb	r2, [r3, #24]
    4a80:	420a      	tst	r2, r1
    4a82:	d0fc      	beq.n	4a7e <trx_sram_write+0x9e>
    4a84:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4a86:	0752      	lsls	r2, r2, #29
    4a88:	d512      	bpl.n	4ab0 <trx_sram_write+0xd0>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4a8a:	8b5a      	ldrh	r2, [r3, #26]
    4a8c:	0752      	lsls	r2, r2, #29
    4a8e:	d501      	bpl.n	4a94 <trx_sram_write+0xb4>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4a90:	2204      	movs	r2, #4
    4a92:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4a94:	4a28      	ldr	r2, [pc, #160]	; (4b38 <trx_sram_write+0x158>)
    4a96:	7992      	ldrb	r2, [r2, #6]
    4a98:	2a01      	cmp	r2, #1
    4a9a:	d105      	bne.n	4aa8 <trx_sram_write+0xc8>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4a9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4a9e:	05d2      	lsls	r2, r2, #23
    4aa0:	0dd2      	lsrs	r2, r2, #23
    4aa2:	4928      	ldr	r1, [pc, #160]	; (4b44 <trx_sram_write+0x164>)
    4aa4:	800a      	strh	r2, [r1, #0]
    4aa6:	e003      	b.n	4ab0 <trx_sram_write+0xd0>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4aa8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4aaa:	b2d2      	uxtb	r2, r2
    4aac:	4925      	ldr	r1, [pc, #148]	; (4b44 <trx_sram_write+0x164>)
    4aae:	800a      	strh	r2, [r1, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4ab0:	4a21      	ldr	r2, [pc, #132]	; (4b38 <trx_sram_write+0x158>)
    4ab2:	7992      	ldrb	r2, [r2, #6]
    4ab4:	4694      	mov	ip, r2
    4ab6:	0028      	movs	r0, r5
	}
	spi_read(&master, &dummy_read);

	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    4ab8:	2601      	movs	r6, #1
		}
		spi_write(&master, *data++);
		while (!spi_is_write_complete(&master)) {
    4aba:	2502      	movs	r5, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    4abc:	2104      	movs	r1, #4
    4abe:	e022      	b.n	4b06 <trx_sram_write+0x126>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4ac0:	7e1a      	ldrb	r2, [r3, #24]
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    4ac2:	4232      	tst	r2, r6
    4ac4:	d0fc      	beq.n	4ac0 <trx_sram_write+0xe0>
    4ac6:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4ac8:	4232      	tst	r2, r6
    4aca:	d001      	beq.n	4ad0 <trx_sram_write+0xf0>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4acc:	7802      	ldrb	r2, [r0, #0]
    4ace:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4ad0:	7e1a      	ldrb	r2, [r3, #24]
		}
		spi_write(&master, *data++);
		while (!spi_is_write_complete(&master)) {
    4ad2:	422a      	tst	r2, r5
    4ad4:	d0fc      	beq.n	4ad0 <trx_sram_write+0xf0>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4ad6:	7e1a      	ldrb	r2, [r3, #24]
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    4ad8:	420a      	tst	r2, r1
    4ada:	d0fc      	beq.n	4ad6 <trx_sram_write+0xf6>
    4adc:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4ade:	420a      	tst	r2, r1
    4ae0:	d010      	beq.n	4b04 <trx_sram_write+0x124>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4ae2:	8b5a      	ldrh	r2, [r3, #26]
    4ae4:	420a      	tst	r2, r1
    4ae6:	d000      	beq.n	4aea <trx_sram_write+0x10a>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4ae8:	8359      	strh	r1, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4aea:	4662      	mov	r2, ip
    4aec:	2a01      	cmp	r2, #1
    4aee:	d105      	bne.n	4afc <trx_sram_write+0x11c>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4af0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4af2:	05d2      	lsls	r2, r2, #23
    4af4:	0dd2      	lsrs	r2, r2, #23
    4af6:	4f13      	ldr	r7, [pc, #76]	; (4b44 <trx_sram_write+0x164>)
    4af8:	803a      	strh	r2, [r7, #0]
    4afa:	e003      	b.n	4b04 <trx_sram_write+0x124>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4afc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4afe:	b2d2      	uxtb	r2, r2
    4b00:	4f10      	ldr	r7, [pc, #64]	; (4b44 <trx_sram_write+0x164>)
    4b02:	803a      	strh	r2, [r7, #0]
    4b04:	3001      	adds	r0, #1
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	while (length--) {
    4b06:	3c01      	subs	r4, #1
    4b08:	b2e4      	uxtb	r4, r4
    4b0a:	2cff      	cmp	r4, #255	; 0xff
    4b0c:	d1d8      	bne.n	4ac0 <trx_sram_write+0xe0>
		}
		spi_read(&master, &dummy_read);
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    4b0e:	2200      	movs	r2, #0
    4b10:	490a      	ldr	r1, [pc, #40]	; (4b3c <trx_sram_write+0x15c>)
    4b12:	4809      	ldr	r0, [pc, #36]	; (4b38 <trx_sram_write+0x158>)
    4b14:	4b0a      	ldr	r3, [pc, #40]	; (4b40 <trx_sram_write+0x160>)
    4b16:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    4b18:	23ff      	movs	r3, #255	; 0xff
    4b1a:	4642      	mov	r2, r8
    4b1c:	4213      	tst	r3, r2
    4b1e:	d005      	beq.n	4b2c <trx_sram_write+0x14c>
		cpu_irq_enable();
    4b20:	2201      	movs	r2, #1
    4b22:	4b04      	ldr	r3, [pc, #16]	; (4b34 <trx_sram_write+0x154>)
    4b24:	701a      	strb	r2, [r3, #0]
    4b26:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    4b2a:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    4b2c:	b002      	add	sp, #8
    4b2e:	bc04      	pop	{r2}
    4b30:	4690      	mov	r8, r2
    4b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4b34:	20000008 	.word	0x20000008
    4b38:	20000950 	.word	0x20000950
    4b3c:	20000914 	.word	0x20000914
    4b40:	00001359 	.word	0x00001359
    4b44:	2000090c 	.word	0x2000090c

00004b48 <trx_sram_read>:
 * @param[in] addr Start address in SRAM for read operation
 * @param[out] data Pointer to the location where data stored
 * @param[in] length Number of bytes to be read from SRAM
 */
void trx_sram_read(uint8_t addr, uint8_t *data, uint8_t length)
{
    4b48:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b4a:	4657      	mov	r7, sl
    4b4c:	464e      	mov	r6, r9
    4b4e:	4645      	mov	r5, r8
    4b50:	b4e0      	push	{r5, r6, r7}
    4b52:	b082      	sub	sp, #8
    4b54:	0004      	movs	r4, r0
    4b56:	000d      	movs	r5, r1
    4b58:	0017      	movs	r7, r2
	delay_us(1); /* wap_rf4ce */
    4b5a:	2001      	movs	r0, #1
    4b5c:	4b56      	ldr	r3, [pc, #344]	; (4cb8 <trx_sram_read+0x170>)
    4b5e:	4798      	blx	r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4b60:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    4b64:	425a      	negs	r2, r3
    4b66:	4153      	adcs	r3, r2
    4b68:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    4b6a:	b672      	cpsid	i
    4b6c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    4b70:	2200      	movs	r2, #0
    4b72:	4b52      	ldr	r3, [pc, #328]	; (4cbc <trx_sram_read+0x174>)
    4b74:	701a      	strb	r2, [r3, #0]
	return flags;
    4b76:	9b01      	ldr	r3, [sp, #4]
    4b78:	4698      	mov	r8, r3
	**/
	ENTER_TRX_CRITICAL_REGION();
#if SAMD || SAMR21 || SAML21
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    4b7a:	4e51      	ldr	r6, [pc, #324]	; (4cc0 <trx_sram_read+0x178>)
    4b7c:	3201      	adds	r2, #1
    4b7e:	4951      	ldr	r1, [pc, #324]	; (4cc4 <trx_sram_read+0x17c>)
    4b80:	0030      	movs	r0, r6
    4b82:	4b51      	ldr	r3, [pc, #324]	; (4cc8 <trx_sram_read+0x180>)
    4b84:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4b86:	6833      	ldr	r3, [r6, #0]

	temp = TRX_CMD_SR;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    4b88:	2101      	movs	r1, #1

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4b8a:	7e1a      	ldrb	r2, [r3, #24]
    4b8c:	420a      	tst	r2, r1
    4b8e:	d0fc      	beq.n	4b8a <trx_sram_read+0x42>
    4b90:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4b92:	07d2      	lsls	r2, r2, #31
    4b94:	d501      	bpl.n	4b9a <trx_sram_read+0x52>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4b96:	2200      	movs	r2, #0
    4b98:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    4b9a:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4b9c:	7e1a      	ldrb	r2, [r3, #24]
    4b9e:	420a      	tst	r2, r1
    4ba0:	d0fc      	beq.n	4b9c <trx_sram_read+0x54>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4ba2:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4ba4:	7e1a      	ldrb	r2, [r3, #24]
    4ba6:	420a      	tst	r2, r1
    4ba8:	d0fc      	beq.n	4ba4 <trx_sram_read+0x5c>
    4baa:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4bac:	0752      	lsls	r2, r2, #29
    4bae:	d512      	bpl.n	4bd6 <trx_sram_read+0x8e>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4bb0:	8b5a      	ldrh	r2, [r3, #26]
    4bb2:	0752      	lsls	r2, r2, #29
    4bb4:	d501      	bpl.n	4bba <trx_sram_read+0x72>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4bb6:	2204      	movs	r2, #4
    4bb8:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4bba:	4a41      	ldr	r2, [pc, #260]	; (4cc0 <trx_sram_read+0x178>)
    4bbc:	7992      	ldrb	r2, [r2, #6]
    4bbe:	2a01      	cmp	r2, #1
    4bc0:	d105      	bne.n	4bce <trx_sram_read+0x86>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4bc2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4bc4:	05d2      	lsls	r2, r2, #23
    4bc6:	0dd2      	lsrs	r2, r2, #23
    4bc8:	4940      	ldr	r1, [pc, #256]	; (4ccc <trx_sram_read+0x184>)
    4bca:	800a      	strh	r2, [r1, #0]
    4bcc:	e003      	b.n	4bd6 <trx_sram_read+0x8e>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4bce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4bd0:	b2d2      	uxtb	r2, r2
    4bd2:	493e      	ldr	r1, [pc, #248]	; (4ccc <trx_sram_read+0x184>)
    4bd4:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Send the address from which the read operation should start */
	while (!spi_is_ready_to_write(&master)) {
    4bd6:	2101      	movs	r1, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4bd8:	7e1a      	ldrb	r2, [r3, #24]
    4bda:	420a      	tst	r2, r1
    4bdc:	d0fc      	beq.n	4bd8 <trx_sram_read+0x90>
    4bde:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4be0:	07d2      	lsls	r2, r2, #31
    4be2:	d500      	bpl.n	4be6 <trx_sram_read+0x9e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4be4:	629c      	str	r4, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    4be6:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4be8:	7e1a      	ldrb	r2, [r3, #24]
    4bea:	420a      	tst	r2, r1
    4bec:	d0fc      	beq.n	4be8 <trx_sram_read+0xa0>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4bee:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4bf0:	7e1a      	ldrb	r2, [r3, #24]
    4bf2:	420a      	tst	r2, r1
    4bf4:	d0fc      	beq.n	4bf0 <trx_sram_read+0xa8>
    4bf6:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4bf8:	0752      	lsls	r2, r2, #29
    4bfa:	d512      	bpl.n	4c22 <trx_sram_read+0xda>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4bfc:	8b5a      	ldrh	r2, [r3, #26]
    4bfe:	0752      	lsls	r2, r2, #29
    4c00:	d501      	bpl.n	4c06 <trx_sram_read+0xbe>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4c02:	2204      	movs	r2, #4
    4c04:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4c06:	4a2e      	ldr	r2, [pc, #184]	; (4cc0 <trx_sram_read+0x178>)
    4c08:	7992      	ldrb	r2, [r2, #6]
    4c0a:	2a01      	cmp	r2, #1
    4c0c:	d105      	bne.n	4c1a <trx_sram_read+0xd2>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4c10:	05db      	lsls	r3, r3, #23
    4c12:	0ddb      	lsrs	r3, r3, #23
    4c14:	4a2d      	ldr	r2, [pc, #180]	; (4ccc <trx_sram_read+0x184>)
    4c16:	8013      	strh	r3, [r2, #0]
    4c18:	e003      	b.n	4c22 <trx_sram_read+0xda>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4c1c:	b2db      	uxtb	r3, r3
    4c1e:	4a2b      	ldr	r2, [pc, #172]	; (4ccc <trx_sram_read+0x184>)
    4c20:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Upload the received byte in the user provided location */
	while (length--) {
    4c22:	1e7b      	subs	r3, r7, #1
    4c24:	b2db      	uxtb	r3, r3
    4c26:	2f00      	cmp	r7, #0
    4c28:	d030      	beq.n	4c8c <trx_sram_read+0x144>
    4c2a:	3301      	adds	r3, #1
    4c2c:	469c      	mov	ip, r3
    4c2e:	44ac      	add	ip, r5
    4c30:	2700      	movs	r7, #0
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4c32:	4e23      	ldr	r6, [pc, #140]	; (4cc0 <trx_sram_read+0x178>)
		while (!spi_is_ready_to_write(&master)) {
    4c34:	2001      	movs	r0, #1
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4c36:	2300      	movs	r3, #0
    4c38:	469a      	mov	sl, r3
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    4c3a:	2402      	movs	r4, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    4c3c:	2104      	movs	r1, #4
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4c3e:	46b1      	mov	r9, r6
    4c40:	e022      	b.n	4c88 <trx_sram_read+0x140>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4c42:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	/* Upload the received byte in the user provided location */
	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    4c44:	4202      	tst	r2, r0
    4c46:	d0fc      	beq.n	4c42 <trx_sram_read+0xfa>
    4c48:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4c4a:	4202      	tst	r2, r0
    4c4c:	d001      	beq.n	4c52 <trx_sram_read+0x10a>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4c4e:	4652      	mov	r2, sl
    4c50:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4c52:	7e1a      	ldrb	r2, [r3, #24]
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    4c54:	4222      	tst	r2, r4
    4c56:	d0fc      	beq.n	4c52 <trx_sram_read+0x10a>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4c58:	7e1a      	ldrb	r2, [r3, #24]
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    4c5a:	420a      	tst	r2, r1
    4c5c:	d0fc      	beq.n	4c58 <trx_sram_read+0x110>
    4c5e:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4c60:	420a      	tst	r2, r1
    4c62:	d00d      	beq.n	4c80 <trx_sram_read+0x138>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4c64:	8b5a      	ldrh	r2, [r3, #26]
    4c66:	420a      	tst	r2, r1
    4c68:	d000      	beq.n	4c6c <trx_sram_read+0x124>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4c6a:	8359      	strh	r1, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4c6c:	464a      	mov	r2, r9
    4c6e:	7992      	ldrb	r2, [r2, #6]
    4c70:	2a01      	cmp	r2, #1
    4c72:	d103      	bne.n	4c7c <trx_sram_read+0x134>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4c74:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    4c76:	05ff      	lsls	r7, r7, #23
    4c78:	0dff      	lsrs	r7, r7, #23
    4c7a:	e001      	b.n	4c80 <trx_sram_read+0x138>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4c7c:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    4c7e:	b2ff      	uxtb	r7, r7
		}
		spi_read(&master, &temp);
		*data = temp;
    4c80:	702f      	strb	r7, [r5, #0]
		data++;
    4c82:	3501      	adds	r5, #1
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	/* Upload the received byte in the user provided location */
	while (length--) {
    4c84:	45ac      	cmp	ip, r5
    4c86:	d001      	beq.n	4c8c <trx_sram_read+0x144>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4c88:	6833      	ldr	r3, [r6, #0]
    4c8a:	e7da      	b.n	4c42 <trx_sram_read+0xfa>
		*data = temp;
		data++;
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    4c8c:	2200      	movs	r2, #0
    4c8e:	490d      	ldr	r1, [pc, #52]	; (4cc4 <trx_sram_read+0x17c>)
    4c90:	480b      	ldr	r0, [pc, #44]	; (4cc0 <trx_sram_read+0x178>)
    4c92:	4b0d      	ldr	r3, [pc, #52]	; (4cc8 <trx_sram_read+0x180>)
    4c94:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    4c96:	23ff      	movs	r3, #255	; 0xff
    4c98:	4642      	mov	r2, r8
    4c9a:	4213      	tst	r3, r2
    4c9c:	d005      	beq.n	4caa <trx_sram_read+0x162>
		cpu_irq_enable();
    4c9e:	2201      	movs	r2, #1
    4ca0:	4b06      	ldr	r3, [pc, #24]	; (4cbc <trx_sram_read+0x174>)
    4ca2:	701a      	strb	r2, [r3, #0]
    4ca4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    4ca8:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    4caa:	b002      	add	sp, #8
    4cac:	bc1c      	pop	{r2, r3, r4}
    4cae:	4690      	mov	r8, r2
    4cb0:	4699      	mov	r9, r3
    4cb2:	46a2      	mov	sl, r4
    4cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4cb6:	46c0      	nop			; (mov r8, r8)
    4cb8:	00000155 	.word	0x00000155
    4cbc:	20000008 	.word	0x20000008
    4cc0:	20000950 	.word	0x20000950
    4cc4:	20000914 	.word	0x20000914
    4cc8:	00001359 	.word	0x00001359
    4ccc:	2000090c 	.word	0x2000090c

00004cd0 <trx_aes_wrrd>:
 * @param addr Start address in the SRAM for the write operation
 * @param idata Pointer to the data written/read into/from SRAM
 * @param length Number of bytes written/read into/from SRAM
 */
void trx_aes_wrrd(uint8_t addr, uint8_t *idata, uint8_t length)
{
    4cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    4cd2:	4657      	mov	r7, sl
    4cd4:	464e      	mov	r6, r9
    4cd6:	4645      	mov	r5, r8
    4cd8:	b4e0      	push	{r5, r6, r7}
    4cda:	0006      	movs	r6, r0
    4cdc:	468a      	mov	sl, r1
    4cde:	0014      	movs	r4, r2
#if SAMD || SAMR21 || SAML21
	uint16_t odata_var = 0;
#endif
	uint8_t temp;

	delay_us(1); /* wap_rf4ce */
    4ce0:	2001      	movs	r0, #1
    4ce2:	4b76      	ldr	r3, [pc, #472]	; (4ebc <trx_aes_wrrd+0x1ec>)
    4ce4:	4798      	blx	r3

	ENTER_TRX_REGION();
    4ce6:	2100      	movs	r1, #0
    4ce8:	2000      	movs	r0, #0
    4cea:	4b75      	ldr	r3, [pc, #468]	; (4ec0 <trx_aes_wrrd+0x1f0>)
    4cec:	4798      	blx	r3
		/* wait until SPI gets available */
	}
#endif
#if SAMD || SAMR21 || SAML21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    4cee:	4f75      	ldr	r7, [pc, #468]	; (4ec4 <trx_aes_wrrd+0x1f4>)
    4cf0:	2201      	movs	r2, #1
    4cf2:	4975      	ldr	r1, [pc, #468]	; (4ec8 <trx_aes_wrrd+0x1f8>)
    4cf4:	0038      	movs	r0, r7
    4cf6:	4b75      	ldr	r3, [pc, #468]	; (4ecc <trx_aes_wrrd+0x1fc>)
    4cf8:	4798      	blx	r3
    4cfa:	683b      	ldr	r3, [r7, #0]

	/* Send the command byte */
	temp = TRX_CMD_SW;

	while (!spi_is_ready_to_write(&master)) {
    4cfc:	2101      	movs	r1, #1

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4cfe:	7e1a      	ldrb	r2, [r3, #24]
    4d00:	420a      	tst	r2, r1
    4d02:	d0fc      	beq.n	4cfe <trx_aes_wrrd+0x2e>
    4d04:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4d06:	07d2      	lsls	r2, r2, #31
    4d08:	d501      	bpl.n	4d0e <trx_aes_wrrd+0x3e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4d0a:	2240      	movs	r2, #64	; 0x40
    4d0c:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    4d0e:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4d10:	7e1a      	ldrb	r2, [r3, #24]
    4d12:	420a      	tst	r2, r1
    4d14:	d0fc      	beq.n	4d10 <trx_aes_wrrd+0x40>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4d16:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4d18:	7e1a      	ldrb	r2, [r3, #24]
    4d1a:	420a      	tst	r2, r1
    4d1c:	d0fc      	beq.n	4d18 <trx_aes_wrrd+0x48>
    4d1e:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4d20:	0752      	lsls	r2, r2, #29
    4d22:	d512      	bpl.n	4d4a <trx_aes_wrrd+0x7a>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4d24:	8b5a      	ldrh	r2, [r3, #26]
    4d26:	0752      	lsls	r2, r2, #29
    4d28:	d501      	bpl.n	4d2e <trx_aes_wrrd+0x5e>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4d2a:	2204      	movs	r2, #4
    4d2c:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4d2e:	4a65      	ldr	r2, [pc, #404]	; (4ec4 <trx_aes_wrrd+0x1f4>)
    4d30:	7992      	ldrb	r2, [r2, #6]
    4d32:	2a01      	cmp	r2, #1
    4d34:	d105      	bne.n	4d42 <trx_aes_wrrd+0x72>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4d36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4d38:	05d2      	lsls	r2, r2, #23
    4d3a:	0dd2      	lsrs	r2, r2, #23
    4d3c:	4964      	ldr	r1, [pc, #400]	; (4ed0 <trx_aes_wrrd+0x200>)
    4d3e:	800a      	strh	r2, [r1, #0]
    4d40:	e003      	b.n	4d4a <trx_aes_wrrd+0x7a>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4d42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4d44:	b2d2      	uxtb	r2, r2
    4d46:	4962      	ldr	r1, [pc, #392]	; (4ed0 <trx_aes_wrrd+0x200>)
    4d48:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* write SRAM start address */
	while (!spi_is_ready_to_write(&master)) {
    4d4a:	2101      	movs	r1, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4d4c:	7e1a      	ldrb	r2, [r3, #24]
    4d4e:	420a      	tst	r2, r1
    4d50:	d0fc      	beq.n	4d4c <trx_aes_wrrd+0x7c>
    4d52:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4d54:	07d2      	lsls	r2, r2, #31
    4d56:	d500      	bpl.n	4d5a <trx_aes_wrrd+0x8a>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4d58:	629e      	str	r6, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    4d5a:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4d5c:	7e1a      	ldrb	r2, [r3, #24]
    4d5e:	420a      	tst	r2, r1
    4d60:	d0fc      	beq.n	4d5c <trx_aes_wrrd+0x8c>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4d62:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4d64:	7e1a      	ldrb	r2, [r3, #24]
    4d66:	420a      	tst	r2, r1
    4d68:	d0fc      	beq.n	4d64 <trx_aes_wrrd+0x94>
    4d6a:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4d6c:	0752      	lsls	r2, r2, #29
    4d6e:	d512      	bpl.n	4d96 <trx_aes_wrrd+0xc6>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4d70:	8b5a      	ldrh	r2, [r3, #26]
    4d72:	0752      	lsls	r2, r2, #29
    4d74:	d501      	bpl.n	4d7a <trx_aes_wrrd+0xaa>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4d76:	2204      	movs	r2, #4
    4d78:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4d7a:	4a52      	ldr	r2, [pc, #328]	; (4ec4 <trx_aes_wrrd+0x1f4>)
    4d7c:	7992      	ldrb	r2, [r2, #6]
    4d7e:	2a01      	cmp	r2, #1
    4d80:	d105      	bne.n	4d8e <trx_aes_wrrd+0xbe>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4d82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4d84:	05d2      	lsls	r2, r2, #23
    4d86:	0dd2      	lsrs	r2, r2, #23
    4d88:	4951      	ldr	r1, [pc, #324]	; (4ed0 <trx_aes_wrrd+0x200>)
    4d8a:	800a      	strh	r2, [r1, #0]
    4d8c:	e003      	b.n	4d96 <trx_aes_wrrd+0xc6>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4d8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4d90:	b2d2      	uxtb	r2, r2
    4d92:	494f      	ldr	r1, [pc, #316]	; (4ed0 <trx_aes_wrrd+0x200>)
    4d94:	800a      	strh	r2, [r1, #0]

	/* now transfer data */
	odata = idata;

	/* write data byte 0 - the obtained value in SPDR is meaningless */
	while (!spi_is_ready_to_write(&master)) {
    4d96:	2101      	movs	r1, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4d98:	7e1a      	ldrb	r2, [r3, #24]
    4d9a:	420a      	tst	r2, r1
    4d9c:	d0fc      	beq.n	4d98 <trx_aes_wrrd+0xc8>
    4d9e:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4da0:	07d2      	lsls	r2, r2, #31
    4da2:	d502      	bpl.n	4daa <trx_aes_wrrd+0xda>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4da4:	4652      	mov	r2, sl
    4da6:	7812      	ldrb	r2, [r2, #0]
    4da8:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, *idata++);
	while (!spi_is_write_complete(&master)) {
    4daa:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4dac:	7e1a      	ldrb	r2, [r3, #24]
    4dae:	420a      	tst	r2, r1
    4db0:	d0fc      	beq.n	4dac <trx_aes_wrrd+0xdc>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4db2:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4db4:	7e1a      	ldrb	r2, [r3, #24]
    4db6:	420a      	tst	r2, r1
    4db8:	d0fc      	beq.n	4db4 <trx_aes_wrrd+0xe4>
    4dba:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4dbc:	0752      	lsls	r2, r2, #29
    4dbe:	d512      	bpl.n	4de6 <trx_aes_wrrd+0x116>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4dc0:	8b5a      	ldrh	r2, [r3, #26]
    4dc2:	0752      	lsls	r2, r2, #29
    4dc4:	d501      	bpl.n	4dca <trx_aes_wrrd+0xfa>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4dc6:	2204      	movs	r2, #4
    4dc8:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4dca:	4a3e      	ldr	r2, [pc, #248]	; (4ec4 <trx_aes_wrrd+0x1f4>)
    4dcc:	7992      	ldrb	r2, [r2, #6]
    4dce:	2a01      	cmp	r2, #1
    4dd0:	d105      	bne.n	4dde <trx_aes_wrrd+0x10e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4dd4:	05db      	lsls	r3, r3, #23
    4dd6:	0ddb      	lsrs	r3, r3, #23
    4dd8:	4a3d      	ldr	r2, [pc, #244]	; (4ed0 <trx_aes_wrrd+0x200>)
    4dda:	8013      	strh	r3, [r2, #0]
    4ddc:	e003      	b.n	4de6 <trx_aes_wrrd+0x116>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4de0:	b2db      	uxtb	r3, r3
    4de2:	4a3b      	ldr	r2, [pc, #236]	; (4ed0 <trx_aes_wrrd+0x200>)
    4de4:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Reading Spi Data for the length specified */
	while (length > 0) {
    4de6:	2c00      	cmp	r4, #0
    4de8:	d031      	beq.n	4e4e <trx_aes_wrrd+0x17e>
    4dea:	4656      	mov	r6, sl
    4dec:	3c01      	subs	r4, #1
    4dee:	b2e4      	uxtb	r4, r4
    4df0:	3401      	adds	r4, #1
    4df2:	44a2      	add	sl, r4
    4df4:	46d0      	mov	r8, sl
    4df6:	2700      	movs	r7, #0
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4df8:	4d32      	ldr	r5, [pc, #200]	; (4ec4 <trx_aes_wrrd+0x1f4>)
		while (!spi_is_ready_to_write(&master)) {
    4dfa:	2001      	movs	r0, #1
		}
		spi_write(&master, *idata++);
		while (!spi_is_write_complete(&master)) {
    4dfc:	2402      	movs	r4, #2
		}
		while (!spi_is_ready_to_read(&master)) {
    4dfe:	2104      	movs	r1, #4
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4e00:	46a9      	mov	r9, r5
    4e02:	e022      	b.n	4e4a <trx_aes_wrrd+0x17a>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4e04:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	/* Reading Spi Data for the length specified */
	while (length > 0) {
		while (!spi_is_ready_to_write(&master)) {
    4e06:	4202      	tst	r2, r0
    4e08:	d0fc      	beq.n	4e04 <trx_aes_wrrd+0x134>
    4e0a:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4e0c:	4202      	tst	r2, r0
    4e0e:	d001      	beq.n	4e14 <trx_aes_wrrd+0x144>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4e10:	7872      	ldrb	r2, [r6, #1]
    4e12:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4e14:	7e1a      	ldrb	r2, [r3, #24]
		}
		spi_write(&master, *idata++);
		while (!spi_is_write_complete(&master)) {
    4e16:	4222      	tst	r2, r4
    4e18:	d0fc      	beq.n	4e14 <trx_aes_wrrd+0x144>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4e1a:	7e1a      	ldrb	r2, [r3, #24]
		}
		while (!spi_is_ready_to_read(&master)) {
    4e1c:	420a      	tst	r2, r1
    4e1e:	d0fc      	beq.n	4e1a <trx_aes_wrrd+0x14a>
    4e20:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4e22:	420a      	tst	r2, r1
    4e24:	d00d      	beq.n	4e42 <trx_aes_wrrd+0x172>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4e26:	8b5a      	ldrh	r2, [r3, #26]
    4e28:	420a      	tst	r2, r1
    4e2a:	d000      	beq.n	4e2e <trx_aes_wrrd+0x15e>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4e2c:	8359      	strh	r1, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4e2e:	464a      	mov	r2, r9
    4e30:	7992      	ldrb	r2, [r2, #6]
    4e32:	2a01      	cmp	r2, #1
    4e34:	d103      	bne.n	4e3e <trx_aes_wrrd+0x16e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4e36:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    4e38:	05ff      	lsls	r7, r7, #23
    4e3a:	0dff      	lsrs	r7, r7, #23
    4e3c:	e001      	b.n	4e42 <trx_aes_wrrd+0x172>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4e3e:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    4e40:	b2ff      	uxtb	r7, r7
		}

#if SAMD || SAMR21 || SAML21
		spi_read(&master, &odata_var);
		*odata++ = (uint8_t)odata_var;
    4e42:	7037      	strb	r7, [r6, #0]
    4e44:	3601      	adds	r6, #1
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	/* Reading Spi Data for the length specified */
	while (length > 0) {
    4e46:	4546      	cmp	r6, r8
    4e48:	d002      	beq.n	4e50 <trx_aes_wrrd+0x180>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4e4a:	682b      	ldr	r3, [r5, #0]
    4e4c:	e7da      	b.n	4e04 <trx_aes_wrrd+0x134>
    4e4e:	2700      	movs	r7, #0
    4e50:	4b1c      	ldr	r3, [pc, #112]	; (4ec4 <trx_aes_wrrd+0x1f4>)
    4e52:	681b      	ldr	r3, [r3, #0]
#endif
		length--;
	}

	/* To get the last data byte, write some dummy byte */
	while (!spi_is_ready_to_write(&master)) {
    4e54:	2101      	movs	r1, #1

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4e56:	7e1a      	ldrb	r2, [r3, #24]
    4e58:	420a      	tst	r2, r1
    4e5a:	d0fc      	beq.n	4e56 <trx_aes_wrrd+0x186>
    4e5c:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4e5e:	07d2      	lsls	r2, r2, #31
    4e60:	d501      	bpl.n	4e66 <trx_aes_wrrd+0x196>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4e62:	2200      	movs	r2, #0
    4e64:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    4e66:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4e68:	7e1a      	ldrb	r2, [r3, #24]
    4e6a:	420a      	tst	r2, r1
    4e6c:	d0fc      	beq.n	4e68 <trx_aes_wrrd+0x198>
	}
	while (!spi_is_ready_to_read(&master)) {
    4e6e:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4e70:	7e1a      	ldrb	r2, [r3, #24]
    4e72:	420a      	tst	r2, r1
    4e74:	d0fc      	beq.n	4e70 <trx_aes_wrrd+0x1a0>
    4e76:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4e78:	0752      	lsls	r2, r2, #29
    4e7a:	d50e      	bpl.n	4e9a <trx_aes_wrrd+0x1ca>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4e7c:	8b5a      	ldrh	r2, [r3, #26]
    4e7e:	0752      	lsls	r2, r2, #29
    4e80:	d501      	bpl.n	4e86 <trx_aes_wrrd+0x1b6>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4e82:	2204      	movs	r2, #4
    4e84:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4e86:	4a0f      	ldr	r2, [pc, #60]	; (4ec4 <trx_aes_wrrd+0x1f4>)
    4e88:	7992      	ldrb	r2, [r2, #6]
    4e8a:	2a01      	cmp	r2, #1
    4e8c:	d103      	bne.n	4e96 <trx_aes_wrrd+0x1c6>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4e8e:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    4e90:	05ff      	lsls	r7, r7, #23
    4e92:	0dff      	lsrs	r7, r7, #23
    4e94:	e001      	b.n	4e9a <trx_aes_wrrd+0x1ca>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4e96:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    4e98:	b2ff      	uxtb	r7, r7
	}
#if SAMD || SAMR21 || SAML21
	spi_read(&master, &odata_var);
	*odata = (uint8_t)odata_var;
    4e9a:	4653      	mov	r3, sl
    4e9c:	701f      	strb	r7, [r3, #0]
#else
	spi_read(&master, (uint16_t *)odata);
#endif

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    4e9e:	2200      	movs	r2, #0
    4ea0:	4909      	ldr	r1, [pc, #36]	; (4ec8 <trx_aes_wrrd+0x1f8>)
    4ea2:	4808      	ldr	r0, [pc, #32]	; (4ec4 <trx_aes_wrrd+0x1f4>)
    4ea4:	4b09      	ldr	r3, [pc, #36]	; (4ecc <trx_aes_wrrd+0x1fc>)
    4ea6:	4798      	blx	r3
	spi_read_packet(AT86RFX_SPI, odata, 1);

	/* Stop the SPI transaction by setting SEL high */
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	LEAVE_TRX_REGION();
    4ea8:	2100      	movs	r1, #0
    4eaa:	2000      	movs	r0, #0
    4eac:	4b09      	ldr	r3, [pc, #36]	; (4ed4 <trx_aes_wrrd+0x204>)
    4eae:	4798      	blx	r3
}
    4eb0:	bc1c      	pop	{r2, r3, r4}
    4eb2:	4690      	mov	r8, r2
    4eb4:	4699      	mov	r9, r3
    4eb6:	46a2      	mov	sl, r4
    4eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4eba:	46c0      	nop			; (mov r8, r8)
    4ebc:	00000155 	.word	0x00000155
    4ec0:	0000030d 	.word	0x0000030d
    4ec4:	20000950 	.word	0x20000950
    4ec8:	20000914 	.word	0x20000914
    4ecc:	00001359 	.word	0x00001359
    4ed0:	2000090c 	.word	0x2000090c
    4ed4:	000002ed 	.word	0x000002ed

00004ed8 <configure_i2c_master>:

#include <asf.h>
#include "master_i2c.h"

void configure_i2c_master(void)
{
    4ed8:	b530      	push	{r4, r5, lr}
    4eda:	b08f      	sub	sp, #60	; 0x3c
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    4edc:	aa01      	add	r2, sp, #4
    4ede:	2364      	movs	r3, #100	; 0x64
    4ee0:	9301      	str	r3, [sp, #4]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    4ee2:	4b22      	ldr	r3, [pc, #136]	; (4f6c <configure_i2c_master+0x94>)
    4ee4:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    4ee6:	2300      	movs	r3, #0
    4ee8:	6093      	str	r3, [r2, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    4eea:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
    4eec:	7613      	strb	r3, [r2, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    4eee:	2180      	movs	r1, #128	; 0x80
    4ef0:	0389      	lsls	r1, r1, #14
    4ef2:	6111      	str	r1, [r2, #16]
	config->buffer_timeout   = 65535;
	config->unknown_bus_state_timeout = 65535;
    4ef4:	2101      	movs	r1, #1
    4ef6:	4249      	negs	r1, r1
    4ef8:	8291      	strh	r1, [r2, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
    4efa:	3125      	adds	r1, #37	; 0x25
    4efc:	5453      	strb	r3, [r2, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    4efe:	6293      	str	r3, [r2, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    4f00:	3108      	adds	r1, #8
    4f02:	5453      	strb	r3, [r2, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    4f04:	3101      	adds	r1, #1
    4f06:	5453      	strb	r3, [r2, r1]
	config->master_scl_low_extend_timeout  = false;
    4f08:	3101      	adds	r1, #1
    4f0a:	5453      	strb	r3, [r2, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    4f0c:	33d7      	adds	r3, #215	; 0xd7
    4f0e:	8613      	strh	r3, [r2, #48]	; 0x30
	struct i2c_master_config config_i2c_master;
	i2c_master_get_config_defaults(&config_i2c_master);

	config_i2c_master.pinmux_pad0    = EDBG_I2C_SERCOM_PINMUX_PAD0 ;
    4f10:	4b17      	ldr	r3, [pc, #92]	; (4f70 <configure_i2c_master+0x98>)
    4f12:	61d3      	str	r3, [r2, #28]
	config_i2c_master.pinmux_pad1    = EDBG_I2C_SERCOM_PINMUX_PAD1;
    4f14:	4b17      	ldr	r3, [pc, #92]	; (4f74 <configure_i2c_master+0x9c>)
    4f16:	6213      	str	r3, [r2, #32]

	config_i2c_master.buffer_timeout = 10000;
    4f18:	4b17      	ldr	r3, [pc, #92]	; (4f78 <configure_i2c_master+0xa0>)
    4f1a:	82d3      	strh	r3, [r2, #22]

	
	i2c_master_init(&i2c_master_instance, CONF_I2C_MASTER_MODULE, &config_i2c_master);
    4f1c:	4c17      	ldr	r4, [pc, #92]	; (4f7c <configure_i2c_master+0xa4>)
    4f1e:	4918      	ldr	r1, [pc, #96]	; (4f80 <configure_i2c_master+0xa8>)
    4f20:	0020      	movs	r0, r4
    4f22:	4b18      	ldr	r3, [pc, #96]	; (4f84 <configure_i2c_master+0xac>)
    4f24:	4798      	blx	r3
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    4f26:	6824      	ldr	r4, [r4, #0]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    4f28:	2207      	movs	r2, #7
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    4f2a:	69e3      	ldr	r3, [r4, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    4f2c:	421a      	tst	r2, r3
    4f2e:	d1fc      	bne.n	4f2a <configure_i2c_master+0x52>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    4f30:	6822      	ldr	r2, [r4, #0]
    4f32:	2302      	movs	r3, #2
    4f34:	4313      	orrs	r3, r2
    4f36:	6023      	str	r3, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    4f38:	4d10      	ldr	r5, [pc, #64]	; (4f7c <configure_i2c_master+0xa4>)
    4f3a:	6828      	ldr	r0, [r5, #0]
    4f3c:	4b12      	ldr	r3, [pc, #72]	; (4f88 <configure_i2c_master+0xb0>)
    4f3e:	4798      	blx	r3
    4f40:	231f      	movs	r3, #31
    4f42:	4018      	ands	r0, r3
    4f44:	3b1e      	subs	r3, #30
    4f46:	4083      	lsls	r3, r0
    4f48:	4a10      	ldr	r2, [pc, #64]	; (4f8c <configure_i2c_master+0xb4>)
    4f4a:	6013      	str	r3, [r2, #0]
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    4f4c:	88e8      	ldrh	r0, [r5, #6]
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
    4f4e:	2300      	movs	r3, #0
#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    4f50:	2110      	movs	r1, #16
    4f52:	e005      	b.n	4f60 <configure_i2c_master+0x88>
		timeout_counter++;
    4f54:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    4f56:	4283      	cmp	r3, r0
    4f58:	d302      	bcc.n	4f60 <configure_i2c_master+0x88>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    4f5a:	2310      	movs	r3, #16
    4f5c:	8363      	strh	r3, [r4, #26]
    4f5e:	e002      	b.n	4f66 <configure_i2c_master+0x8e>
#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    4f60:	8b62      	ldrh	r2, [r4, #26]
    4f62:	420a      	tst	r2, r1
    4f64:	d0f6      	beq.n	4f54 <configure_i2c_master+0x7c>
	i2c_master_enable(&i2c_master_instance);
    4f66:	b00f      	add	sp, #60	; 0x3c
    4f68:	bd30      	pop	{r4, r5, pc}
    4f6a:	46c0      	nop			; (mov r8, r8)
    4f6c:	00000d48 	.word	0x00000d48
    4f70:	00100002 	.word	0x00100002
    4f74:	00110002 	.word	0x00110002
    4f78:	00002710 	.word	0x00002710
    4f7c:	2000095c 	.word	0x2000095c
    4f80:	42000c00 	.word	0x42000c00
    4f84:	000004d1 	.word	0x000004d1
    4f88:	00001021 	.word	0x00001021
    4f8c:	e000e100 	.word	0xe000e100

00004f90 <receivePKT>:
	//sendT.handler = sendPKT;
	
}

static bool receivePKT(NWK_DataInd_t *ind)
{
    4f90:	b510      	push	{r4, lr}
    4f92:	b084      	sub	sp, #16
	uint16_t sfd = 0;
	uint16_t addr = 0;
	uint8_t act = 0;
    4f94:	240f      	movs	r4, #15
    4f96:	446c      	add	r4, sp
    4f98:	2300      	movs	r3, #0
    4f9a:	7023      	strb	r3, [r4, #0]
	
	uint16_t timeout = 0;
	
	struct i2c_master_packet packet = {
    4f9c:	2212      	movs	r2, #18
    4f9e:	4669      	mov	r1, sp
    4fa0:	800a      	strh	r2, [r1, #0]
    4fa2:	3a0f      	subs	r2, #15
    4fa4:	804a      	strh	r2, [r1, #2]
    4fa6:	9401      	str	r4, [sp, #4]
    4fa8:	720b      	strb	r3, [r1, #8]
    4faa:	724b      	strb	r3, [r1, #9]
    4fac:	728b      	strb	r3, [r1, #10]
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};
	
	sfd = ((uint16_t)ind->data[0] << 8) + ind->data[1];
    4fae:	6883      	ldr	r3, [r0, #8]
    4fb0:	7819      	ldrb	r1, [r3, #0]
    4fb2:	0209      	lsls	r1, r1, #8
    4fb4:	785a      	ldrb	r2, [r3, #1]
    4fb6:	1851      	adds	r1, r2, r1
    4fb8:	b289      	uxth	r1, r1
	addr = ((uint16_t)ind->data[2] << 8) + ind->data[3];
    4fba:	789a      	ldrb	r2, [r3, #2]
    4fbc:	0212      	lsls	r2, r2, #8
    4fbe:	78d8      	ldrb	r0, [r3, #3]
    4fc0:	1882      	adds	r2, r0, r2
    4fc2:	b292      	uxth	r2, r2
	act = ind->data[4];
    4fc4:	791b      	ldrb	r3, [r3, #4]
    4fc6:	7023      	strb	r3, [r4, #0]
	printf("sfd: %.2x, addr: %.2x, act: %x\n", sfd, addr, act);
    4fc8:	480a      	ldr	r0, [pc, #40]	; (4ff4 <receivePKT+0x64>)
    4fca:	4c0b      	ldr	r4, [pc, #44]	; (4ff8 <receivePKT+0x68>)
    4fcc:	47a0      	blx	r4
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    4fce:	2280      	movs	r2, #128	; 0x80
    4fd0:	0312      	lsls	r2, r2, #12
    4fd2:	4b0a      	ldr	r3, [pc, #40]	; (4ffc <receivePKT+0x6c>)
    4fd4:	61da      	str	r2, [r3, #28]
	LED_Toggle(LED0);
	
	if(i2c_master_write_packet_wait(&i2c_master_instance, &packet) != STATUS_OK) {
    4fd6:	4669      	mov	r1, sp
    4fd8:	4809      	ldr	r0, [pc, #36]	; (5000 <receivePKT+0x70>)
    4fda:	4b0a      	ldr	r3, [pc, #40]	; (5004 <receivePKT+0x74>)
    4fdc:	4798      	blx	r3
    4fde:	2800      	cmp	r0, #0
    4fe0:	d004      	beq.n	4fec <receivePKT+0x5c>
		printf("data: %x\n", packet.data[0]);
    4fe2:	9b01      	ldr	r3, [sp, #4]
    4fe4:	7819      	ldrb	r1, [r3, #0]
    4fe6:	4808      	ldr	r0, [pc, #32]	; (5008 <receivePKT+0x78>)
    4fe8:	4b03      	ldr	r3, [pc, #12]	; (4ff8 <receivePKT+0x68>)
    4fea:	4798      	blx	r3
			//break;
		//}
	}
	
	return true;
}
    4fec:	2001      	movs	r0, #1
    4fee:	b004      	add	sp, #16
    4ff0:	bd10      	pop	{r4, pc}
    4ff2:	46c0      	nop			; (mov r8, r8)
    4ff4:	00007e80 	.word	0x00007e80
    4ff8:	00006cb1 	.word	0x00006cb1
    4ffc:	41004400 	.word	0x41004400
    5000:	2000095c 	.word	0x2000095c
    5004:	00000921 	.word	0x00000921
    5008:	00007ea0 	.word	0x00007ea0

0000500c <main>:
static void radioInit(void);
static bool receivePKT(NWK_DataInd_t *ind);
static void sendDonePKT(NWK_DataReq_t *req);

int main(void)
{
    500c:	b510      	push	{r4, lr}
	irq_initialize_vectors();
	system_init();
    500e:	4b13      	ldr	r3, [pc, #76]	; (505c <main+0x50>)
    5010:	4798      	blx	r3
	delay_init();
    5012:	4b13      	ldr	r3, [pc, #76]	; (5060 <main+0x54>)
    5014:	4798      	blx	r3
	SYS_Init();
    5016:	4b13      	ldr	r3, [pc, #76]	; (5064 <main+0x58>)
    5018:	4798      	blx	r3
	sio2host_init();
    501a:	4b13      	ldr	r3, [pc, #76]	; (5068 <main+0x5c>)
    501c:	4798      	blx	r3
	cpu_irq_enable();
    501e:	2201      	movs	r2, #1
    5020:	4b12      	ldr	r3, [pc, #72]	; (506c <main+0x60>)
    5022:	701a      	strb	r2, [r3, #0]
    5024:	f3bf 8f5f 	dmb	sy
    5028:	b662      	cpsie	i
	
	printf("Hi this is a station\n");
    502a:	4811      	ldr	r0, [pc, #68]	; (5070 <main+0x64>)
    502c:	4b11      	ldr	r3, [pc, #68]	; (5074 <main+0x68>)
    502e:	4798      	blx	r3
	}
}

static void radioInit(void)
{
	NWK_SetAddr(13);
    5030:	200d      	movs	r0, #13
    5032:	4b11      	ldr	r3, [pc, #68]	; (5078 <main+0x6c>)
    5034:	4798      	blx	r3
	NWK_SetPanId(APP_PANID);
    5036:	4811      	ldr	r0, [pc, #68]	; (507c <main+0x70>)
    5038:	4b11      	ldr	r3, [pc, #68]	; (5080 <main+0x74>)
    503a:	4798      	blx	r3
	PHY_SetChannel(0x1234);
    503c:	2034      	movs	r0, #52	; 0x34
    503e:	4b11      	ldr	r3, [pc, #68]	; (5084 <main+0x78>)
    5040:	4798      	blx	r3
	PHY_SetRxState(true);
    5042:	2001      	movs	r0, #1
    5044:	4b10      	ldr	r3, [pc, #64]	; (5088 <main+0x7c>)
    5046:	4798      	blx	r3
	NWK_OpenEndpoint(1, receivePKT);
    5048:	4910      	ldr	r1, [pc, #64]	; (508c <main+0x80>)
    504a:	2001      	movs	r0, #1
    504c:	4b10      	ldr	r3, [pc, #64]	; (5090 <main+0x84>)
    504e:	4798      	blx	r3
	printf("Hi this is a station\n");
	
	radioInit();
//	sendPKT();
	
	configure_i2c_master();
    5050:	4b10      	ldr	r3, [pc, #64]	; (5094 <main+0x88>)
    5052:	4798      	blx	r3
	
	while(1)
	{
		SYS_TaskHandler();
    5054:	4c10      	ldr	r4, [pc, #64]	; (5098 <main+0x8c>)
    5056:	47a0      	blx	r4
    5058:	e7fd      	b.n	5056 <main+0x4a>
    505a:	46c0      	nop			; (mov r8, r8)
    505c:	000022d1 	.word	0x000022d1
    5060:	00000115 	.word	0x00000115
    5064:	00003f11 	.word	0x00003f11
    5068:	00002961 	.word	0x00002961
    506c:	20000008 	.word	0x20000008
    5070:	00007eac 	.word	0x00007eac
    5074:	00006da9 	.word	0x00006da9
    5078:	00002b05 	.word	0x00002b05
    507c:	00001234 	.word	0x00001234
    5080:	00002b19 	.word	0x00002b19
    5084:	00003d69 	.word	0x00003d69
    5088:	00003d55 	.word	0x00003d55
    508c:	00004f91 	.word	0x00004f91
    5090:	00002b2d 	.word	0x00002b2d
    5094:	00004ed9 	.word	0x00004ed9
    5098:	00003f35 	.word	0x00003f35

0000509c <common_tc_delay>:
    509c:	b510      	push	{r4, lr}
    509e:	1c04      	adds	r4, r0, #0
    50a0:	4b13      	ldr	r3, [pc, #76]	; (50f0 <common_tc_delay+0x54>)
    50a2:	4798      	blx	r3
    50a4:	4b13      	ldr	r3, [pc, #76]	; (50f4 <common_tc_delay+0x58>)
    50a6:	781a      	ldrb	r2, [r3, #0]
    50a8:	4362      	muls	r2, r4
    50aa:	1881      	adds	r1, r0, r2
    50ac:	4b12      	ldr	r3, [pc, #72]	; (50f8 <common_tc_delay+0x5c>)
    50ae:	6059      	str	r1, [r3, #4]
    50b0:	6859      	ldr	r1, [r3, #4]
    50b2:	0c09      	lsrs	r1, r1, #16
    50b4:	6059      	str	r1, [r3, #4]
    50b6:	685b      	ldr	r3, [r3, #4]
    50b8:	2b00      	cmp	r3, #0
    50ba:	d007      	beq.n	50cc <common_tc_delay+0x30>
    50bc:	4b0e      	ldr	r3, [pc, #56]	; (50f8 <common_tc_delay+0x5c>)
    50be:	6859      	ldr	r1, [r3, #4]
    50c0:	3201      	adds	r2, #1
    50c2:	1880      	adds	r0, r0, r2
    50c4:	8118      	strh	r0, [r3, #8]
    50c6:	4b0d      	ldr	r3, [pc, #52]	; (50fc <common_tc_delay+0x60>)
    50c8:	4798      	blx	r3
    50ca:	e004      	b.n	50d6 <common_tc_delay+0x3a>
    50cc:	1882      	adds	r2, r0, r2
    50ce:	4b0a      	ldr	r3, [pc, #40]	; (50f8 <common_tc_delay+0x5c>)
    50d0:	811a      	strh	r2, [r3, #8]
    50d2:	4b0b      	ldr	r3, [pc, #44]	; (5100 <common_tc_delay+0x64>)
    50d4:	4798      	blx	r3
    50d6:	4b08      	ldr	r3, [pc, #32]	; (50f8 <common_tc_delay+0x5c>)
    50d8:	891b      	ldrh	r3, [r3, #8]
    50da:	2b63      	cmp	r3, #99	; 0x63
    50dc:	d802      	bhi.n	50e4 <common_tc_delay+0x48>
    50de:	3364      	adds	r3, #100	; 0x64
    50e0:	4a05      	ldr	r2, [pc, #20]	; (50f8 <common_tc_delay+0x5c>)
    50e2:	8113      	strh	r3, [r2, #8]
    50e4:	4b04      	ldr	r3, [pc, #16]	; (50f8 <common_tc_delay+0x5c>)
    50e6:	8918      	ldrh	r0, [r3, #8]
    50e8:	4b06      	ldr	r3, [pc, #24]	; (5104 <common_tc_delay+0x68>)
    50ea:	4798      	blx	r3
    50ec:	bd10      	pop	{r4, pc}
    50ee:	46c0      	nop			; (mov r8, r8)
    50f0:	00004105 	.word	0x00004105
    50f4:	20000984 	.word	0x20000984
    50f8:	200007cc 	.word	0x200007cc
    50fc:	00004119 	.word	0x00004119
    5100:	0000412d 	.word	0x0000412d
    5104:	00004169 	.word	0x00004169

00005108 <common_tc_init>:
    5108:	b508      	push	{r3, lr}
    510a:	2200      	movs	r2, #0
    510c:	4b03      	ldr	r3, [pc, #12]	; (511c <common_tc_init+0x14>)
    510e:	701a      	strb	r2, [r3, #0]
    5110:	4b03      	ldr	r3, [pc, #12]	; (5120 <common_tc_init+0x18>)
    5112:	4798      	blx	r3
    5114:	4b03      	ldr	r3, [pc, #12]	; (5124 <common_tc_init+0x1c>)
    5116:	7018      	strb	r0, [r3, #0]
    5118:	bd08      	pop	{r3, pc}
    511a:	46c0      	nop			; (mov r8, r8)
    511c:	200007cc 	.word	0x200007cc
    5120:	00004181 	.word	0x00004181
    5124:	20000984 	.word	0x20000984

00005128 <tmr_ovf_callback>:
    5128:	b508      	push	{r3, lr}
    512a:	4b0e      	ldr	r3, [pc, #56]	; (5164 <tmr_ovf_callback+0x3c>)
    512c:	685b      	ldr	r3, [r3, #4]
    512e:	2b00      	cmp	r3, #0
    5130:	d007      	beq.n	5142 <tmr_ovf_callback+0x1a>
    5132:	4a0c      	ldr	r2, [pc, #48]	; (5164 <tmr_ovf_callback+0x3c>)
    5134:	6853      	ldr	r3, [r2, #4]
    5136:	3b01      	subs	r3, #1
    5138:	6053      	str	r3, [r2, #4]
    513a:	2b00      	cmp	r3, #0
    513c:	d101      	bne.n	5142 <tmr_ovf_callback+0x1a>
    513e:	4b0a      	ldr	r3, [pc, #40]	; (5168 <tmr_ovf_callback+0x40>)
    5140:	4798      	blx	r3
    5142:	4a08      	ldr	r2, [pc, #32]	; (5164 <tmr_ovf_callback+0x3c>)
    5144:	7813      	ldrb	r3, [r2, #0]
    5146:	3301      	adds	r3, #1
    5148:	b2db      	uxtb	r3, r3
    514a:	7013      	strb	r3, [r2, #0]
    514c:	4a07      	ldr	r2, [pc, #28]	; (516c <tmr_ovf_callback+0x44>)
    514e:	7812      	ldrb	r2, [r2, #0]
    5150:	429a      	cmp	r2, r3
    5152:	d806      	bhi.n	5162 <tmr_ovf_callback+0x3a>
    5154:	4b03      	ldr	r3, [pc, #12]	; (5164 <tmr_ovf_callback+0x3c>)
    5156:	2200      	movs	r2, #0
    5158:	701a      	strb	r2, [r3, #0]
    515a:	68db      	ldr	r3, [r3, #12]
    515c:	2b00      	cmp	r3, #0
    515e:	d000      	beq.n	5162 <tmr_ovf_callback+0x3a>
    5160:	4798      	blx	r3
    5162:	bd08      	pop	{r3, pc}
    5164:	200007cc 	.word	0x200007cc
    5168:	0000412d 	.word	0x0000412d
    516c:	20000984 	.word	0x20000984

00005170 <tmr_cca_callback>:
    5170:	b508      	push	{r3, lr}
    5172:	4b04      	ldr	r3, [pc, #16]	; (5184 <tmr_cca_callback+0x14>)
    5174:	4798      	blx	r3
    5176:	4b04      	ldr	r3, [pc, #16]	; (5188 <tmr_cca_callback+0x18>)
    5178:	691b      	ldr	r3, [r3, #16]
    517a:	2b00      	cmp	r3, #0
    517c:	d000      	beq.n	5180 <tmr_cca_callback+0x10>
    517e:	4798      	blx	r3
    5180:	bd08      	pop	{r3, pc}
    5182:	46c0      	nop			; (mov r8, r8)
    5184:	00004119 	.word	0x00004119
    5188:	200007cc 	.word	0x200007cc

0000518c <set_common_tc_expiry_callback>:
    518c:	4b01      	ldr	r3, [pc, #4]	; (5194 <set_common_tc_expiry_callback+0x8>)
    518e:	6118      	str	r0, [r3, #16]
    5190:	4770      	bx	lr
    5192:	46c0      	nop			; (mov r8, r8)
    5194:	200007cc 	.word	0x200007cc

00005198 <__aeabi_uidiv>:
    5198:	2200      	movs	r2, #0
    519a:	0843      	lsrs	r3, r0, #1
    519c:	428b      	cmp	r3, r1
    519e:	d374      	bcc.n	528a <__aeabi_uidiv+0xf2>
    51a0:	0903      	lsrs	r3, r0, #4
    51a2:	428b      	cmp	r3, r1
    51a4:	d35f      	bcc.n	5266 <__aeabi_uidiv+0xce>
    51a6:	0a03      	lsrs	r3, r0, #8
    51a8:	428b      	cmp	r3, r1
    51aa:	d344      	bcc.n	5236 <__aeabi_uidiv+0x9e>
    51ac:	0b03      	lsrs	r3, r0, #12
    51ae:	428b      	cmp	r3, r1
    51b0:	d328      	bcc.n	5204 <__aeabi_uidiv+0x6c>
    51b2:	0c03      	lsrs	r3, r0, #16
    51b4:	428b      	cmp	r3, r1
    51b6:	d30d      	bcc.n	51d4 <__aeabi_uidiv+0x3c>
    51b8:	22ff      	movs	r2, #255	; 0xff
    51ba:	0209      	lsls	r1, r1, #8
    51bc:	ba12      	rev	r2, r2
    51be:	0c03      	lsrs	r3, r0, #16
    51c0:	428b      	cmp	r3, r1
    51c2:	d302      	bcc.n	51ca <__aeabi_uidiv+0x32>
    51c4:	1212      	asrs	r2, r2, #8
    51c6:	0209      	lsls	r1, r1, #8
    51c8:	d065      	beq.n	5296 <__aeabi_uidiv+0xfe>
    51ca:	0b03      	lsrs	r3, r0, #12
    51cc:	428b      	cmp	r3, r1
    51ce:	d319      	bcc.n	5204 <__aeabi_uidiv+0x6c>
    51d0:	e000      	b.n	51d4 <__aeabi_uidiv+0x3c>
    51d2:	0a09      	lsrs	r1, r1, #8
    51d4:	0bc3      	lsrs	r3, r0, #15
    51d6:	428b      	cmp	r3, r1
    51d8:	d301      	bcc.n	51de <__aeabi_uidiv+0x46>
    51da:	03cb      	lsls	r3, r1, #15
    51dc:	1ac0      	subs	r0, r0, r3
    51de:	4152      	adcs	r2, r2
    51e0:	0b83      	lsrs	r3, r0, #14
    51e2:	428b      	cmp	r3, r1
    51e4:	d301      	bcc.n	51ea <__aeabi_uidiv+0x52>
    51e6:	038b      	lsls	r3, r1, #14
    51e8:	1ac0      	subs	r0, r0, r3
    51ea:	4152      	adcs	r2, r2
    51ec:	0b43      	lsrs	r3, r0, #13
    51ee:	428b      	cmp	r3, r1
    51f0:	d301      	bcc.n	51f6 <__aeabi_uidiv+0x5e>
    51f2:	034b      	lsls	r3, r1, #13
    51f4:	1ac0      	subs	r0, r0, r3
    51f6:	4152      	adcs	r2, r2
    51f8:	0b03      	lsrs	r3, r0, #12
    51fa:	428b      	cmp	r3, r1
    51fc:	d301      	bcc.n	5202 <__aeabi_uidiv+0x6a>
    51fe:	030b      	lsls	r3, r1, #12
    5200:	1ac0      	subs	r0, r0, r3
    5202:	4152      	adcs	r2, r2
    5204:	0ac3      	lsrs	r3, r0, #11
    5206:	428b      	cmp	r3, r1
    5208:	d301      	bcc.n	520e <__aeabi_uidiv+0x76>
    520a:	02cb      	lsls	r3, r1, #11
    520c:	1ac0      	subs	r0, r0, r3
    520e:	4152      	adcs	r2, r2
    5210:	0a83      	lsrs	r3, r0, #10
    5212:	428b      	cmp	r3, r1
    5214:	d301      	bcc.n	521a <__aeabi_uidiv+0x82>
    5216:	028b      	lsls	r3, r1, #10
    5218:	1ac0      	subs	r0, r0, r3
    521a:	4152      	adcs	r2, r2
    521c:	0a43      	lsrs	r3, r0, #9
    521e:	428b      	cmp	r3, r1
    5220:	d301      	bcc.n	5226 <__aeabi_uidiv+0x8e>
    5222:	024b      	lsls	r3, r1, #9
    5224:	1ac0      	subs	r0, r0, r3
    5226:	4152      	adcs	r2, r2
    5228:	0a03      	lsrs	r3, r0, #8
    522a:	428b      	cmp	r3, r1
    522c:	d301      	bcc.n	5232 <__aeabi_uidiv+0x9a>
    522e:	020b      	lsls	r3, r1, #8
    5230:	1ac0      	subs	r0, r0, r3
    5232:	4152      	adcs	r2, r2
    5234:	d2cd      	bcs.n	51d2 <__aeabi_uidiv+0x3a>
    5236:	09c3      	lsrs	r3, r0, #7
    5238:	428b      	cmp	r3, r1
    523a:	d301      	bcc.n	5240 <__aeabi_uidiv+0xa8>
    523c:	01cb      	lsls	r3, r1, #7
    523e:	1ac0      	subs	r0, r0, r3
    5240:	4152      	adcs	r2, r2
    5242:	0983      	lsrs	r3, r0, #6
    5244:	428b      	cmp	r3, r1
    5246:	d301      	bcc.n	524c <__aeabi_uidiv+0xb4>
    5248:	018b      	lsls	r3, r1, #6
    524a:	1ac0      	subs	r0, r0, r3
    524c:	4152      	adcs	r2, r2
    524e:	0943      	lsrs	r3, r0, #5
    5250:	428b      	cmp	r3, r1
    5252:	d301      	bcc.n	5258 <__aeabi_uidiv+0xc0>
    5254:	014b      	lsls	r3, r1, #5
    5256:	1ac0      	subs	r0, r0, r3
    5258:	4152      	adcs	r2, r2
    525a:	0903      	lsrs	r3, r0, #4
    525c:	428b      	cmp	r3, r1
    525e:	d301      	bcc.n	5264 <__aeabi_uidiv+0xcc>
    5260:	010b      	lsls	r3, r1, #4
    5262:	1ac0      	subs	r0, r0, r3
    5264:	4152      	adcs	r2, r2
    5266:	08c3      	lsrs	r3, r0, #3
    5268:	428b      	cmp	r3, r1
    526a:	d301      	bcc.n	5270 <__aeabi_uidiv+0xd8>
    526c:	00cb      	lsls	r3, r1, #3
    526e:	1ac0      	subs	r0, r0, r3
    5270:	4152      	adcs	r2, r2
    5272:	0883      	lsrs	r3, r0, #2
    5274:	428b      	cmp	r3, r1
    5276:	d301      	bcc.n	527c <__aeabi_uidiv+0xe4>
    5278:	008b      	lsls	r3, r1, #2
    527a:	1ac0      	subs	r0, r0, r3
    527c:	4152      	adcs	r2, r2
    527e:	0843      	lsrs	r3, r0, #1
    5280:	428b      	cmp	r3, r1
    5282:	d301      	bcc.n	5288 <__aeabi_uidiv+0xf0>
    5284:	004b      	lsls	r3, r1, #1
    5286:	1ac0      	subs	r0, r0, r3
    5288:	4152      	adcs	r2, r2
    528a:	1a41      	subs	r1, r0, r1
    528c:	d200      	bcs.n	5290 <__aeabi_uidiv+0xf8>
    528e:	4601      	mov	r1, r0
    5290:	4152      	adcs	r2, r2
    5292:	4610      	mov	r0, r2
    5294:	4770      	bx	lr
    5296:	e7ff      	b.n	5298 <__aeabi_uidiv+0x100>
    5298:	b501      	push	{r0, lr}
    529a:	2000      	movs	r0, #0
    529c:	f000 f806 	bl	52ac <__aeabi_idiv0>
    52a0:	bd02      	pop	{r1, pc}
    52a2:	46c0      	nop			; (mov r8, r8)

000052a4 <__aeabi_uidivmod>:
    52a4:	2900      	cmp	r1, #0
    52a6:	d0f7      	beq.n	5298 <__aeabi_uidiv+0x100>
    52a8:	e776      	b.n	5198 <__aeabi_uidiv>
    52aa:	4770      	bx	lr

000052ac <__aeabi_idiv0>:
    52ac:	4770      	bx	lr
    52ae:	46c0      	nop			; (mov r8, r8)

000052b0 <__aeabi_lmul>:
    52b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    52b2:	464f      	mov	r7, r9
    52b4:	4646      	mov	r6, r8
    52b6:	b4c0      	push	{r6, r7}
    52b8:	0416      	lsls	r6, r2, #16
    52ba:	0c36      	lsrs	r6, r6, #16
    52bc:	4699      	mov	r9, r3
    52be:	0033      	movs	r3, r6
    52c0:	0405      	lsls	r5, r0, #16
    52c2:	0c2c      	lsrs	r4, r5, #16
    52c4:	0c07      	lsrs	r7, r0, #16
    52c6:	0c15      	lsrs	r5, r2, #16
    52c8:	4363      	muls	r3, r4
    52ca:	437e      	muls	r6, r7
    52cc:	436f      	muls	r7, r5
    52ce:	4365      	muls	r5, r4
    52d0:	0c1c      	lsrs	r4, r3, #16
    52d2:	19ad      	adds	r5, r5, r6
    52d4:	1964      	adds	r4, r4, r5
    52d6:	469c      	mov	ip, r3
    52d8:	42a6      	cmp	r6, r4
    52da:	d903      	bls.n	52e4 <__aeabi_lmul+0x34>
    52dc:	2380      	movs	r3, #128	; 0x80
    52de:	025b      	lsls	r3, r3, #9
    52e0:	4698      	mov	r8, r3
    52e2:	4447      	add	r7, r8
    52e4:	4663      	mov	r3, ip
    52e6:	0c25      	lsrs	r5, r4, #16
    52e8:	19ef      	adds	r7, r5, r7
    52ea:	041d      	lsls	r5, r3, #16
    52ec:	464b      	mov	r3, r9
    52ee:	434a      	muls	r2, r1
    52f0:	4343      	muls	r3, r0
    52f2:	0c2d      	lsrs	r5, r5, #16
    52f4:	0424      	lsls	r4, r4, #16
    52f6:	1964      	adds	r4, r4, r5
    52f8:	1899      	adds	r1, r3, r2
    52fa:	19c9      	adds	r1, r1, r7
    52fc:	0020      	movs	r0, r4
    52fe:	bc0c      	pop	{r2, r3}
    5300:	4690      	mov	r8, r2
    5302:	4699      	mov	r9, r3
    5304:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5306:	46c0      	nop			; (mov r8, r8)

00005308 <__aeabi_dadd>:
    5308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    530a:	4656      	mov	r6, sl
    530c:	465f      	mov	r7, fp
    530e:	464d      	mov	r5, r9
    5310:	4644      	mov	r4, r8
    5312:	b4f0      	push	{r4, r5, r6, r7}
    5314:	000f      	movs	r7, r1
    5316:	0ffd      	lsrs	r5, r7, #31
    5318:	46aa      	mov	sl, r5
    531a:	0309      	lsls	r1, r1, #12
    531c:	007c      	lsls	r4, r7, #1
    531e:	002e      	movs	r6, r5
    5320:	005f      	lsls	r7, r3, #1
    5322:	0f45      	lsrs	r5, r0, #29
    5324:	0a49      	lsrs	r1, r1, #9
    5326:	0d7f      	lsrs	r7, r7, #21
    5328:	4329      	orrs	r1, r5
    532a:	00c5      	lsls	r5, r0, #3
    532c:	0318      	lsls	r0, r3, #12
    532e:	46bc      	mov	ip, r7
    5330:	0a40      	lsrs	r0, r0, #9
    5332:	0f57      	lsrs	r7, r2, #29
    5334:	0d64      	lsrs	r4, r4, #21
    5336:	0fdb      	lsrs	r3, r3, #31
    5338:	4338      	orrs	r0, r7
    533a:	00d2      	lsls	r2, r2, #3
    533c:	459a      	cmp	sl, r3
    533e:	d100      	bne.n	5342 <__aeabi_dadd+0x3a>
    5340:	e0aa      	b.n	5498 <__aeabi_dadd+0x190>
    5342:	4666      	mov	r6, ip
    5344:	1ba6      	subs	r6, r4, r6
    5346:	2e00      	cmp	r6, #0
    5348:	dc00      	bgt.n	534c <__aeabi_dadd+0x44>
    534a:	e0ff      	b.n	554c <__aeabi_dadd+0x244>
    534c:	4663      	mov	r3, ip
    534e:	2b00      	cmp	r3, #0
    5350:	d139      	bne.n	53c6 <__aeabi_dadd+0xbe>
    5352:	0003      	movs	r3, r0
    5354:	4313      	orrs	r3, r2
    5356:	d000      	beq.n	535a <__aeabi_dadd+0x52>
    5358:	e0d9      	b.n	550e <__aeabi_dadd+0x206>
    535a:	076b      	lsls	r3, r5, #29
    535c:	d009      	beq.n	5372 <__aeabi_dadd+0x6a>
    535e:	230f      	movs	r3, #15
    5360:	402b      	ands	r3, r5
    5362:	2b04      	cmp	r3, #4
    5364:	d005      	beq.n	5372 <__aeabi_dadd+0x6a>
    5366:	1d2b      	adds	r3, r5, #4
    5368:	42ab      	cmp	r3, r5
    536a:	41ad      	sbcs	r5, r5
    536c:	426d      	negs	r5, r5
    536e:	1949      	adds	r1, r1, r5
    5370:	001d      	movs	r5, r3
    5372:	020b      	lsls	r3, r1, #8
    5374:	d400      	bmi.n	5378 <__aeabi_dadd+0x70>
    5376:	e082      	b.n	547e <__aeabi_dadd+0x176>
    5378:	4bca      	ldr	r3, [pc, #808]	; (56a4 <__aeabi_dadd+0x39c>)
    537a:	3401      	adds	r4, #1
    537c:	429c      	cmp	r4, r3
    537e:	d100      	bne.n	5382 <__aeabi_dadd+0x7a>
    5380:	e0fe      	b.n	5580 <__aeabi_dadd+0x278>
    5382:	000a      	movs	r2, r1
    5384:	4656      	mov	r6, sl
    5386:	4bc8      	ldr	r3, [pc, #800]	; (56a8 <__aeabi_dadd+0x3a0>)
    5388:	08ed      	lsrs	r5, r5, #3
    538a:	401a      	ands	r2, r3
    538c:	0750      	lsls	r0, r2, #29
    538e:	0564      	lsls	r4, r4, #21
    5390:	0252      	lsls	r2, r2, #9
    5392:	4305      	orrs	r5, r0
    5394:	0b12      	lsrs	r2, r2, #12
    5396:	0d64      	lsrs	r4, r4, #21
    5398:	2100      	movs	r1, #0
    539a:	0312      	lsls	r2, r2, #12
    539c:	0d0b      	lsrs	r3, r1, #20
    539e:	051b      	lsls	r3, r3, #20
    53a0:	0564      	lsls	r4, r4, #21
    53a2:	0b12      	lsrs	r2, r2, #12
    53a4:	431a      	orrs	r2, r3
    53a6:	0863      	lsrs	r3, r4, #1
    53a8:	4cc0      	ldr	r4, [pc, #768]	; (56ac <__aeabi_dadd+0x3a4>)
    53aa:	07f6      	lsls	r6, r6, #31
    53ac:	4014      	ands	r4, r2
    53ae:	431c      	orrs	r4, r3
    53b0:	0064      	lsls	r4, r4, #1
    53b2:	0864      	lsrs	r4, r4, #1
    53b4:	4334      	orrs	r4, r6
    53b6:	0028      	movs	r0, r5
    53b8:	0021      	movs	r1, r4
    53ba:	bc3c      	pop	{r2, r3, r4, r5}
    53bc:	4690      	mov	r8, r2
    53be:	4699      	mov	r9, r3
    53c0:	46a2      	mov	sl, r4
    53c2:	46ab      	mov	fp, r5
    53c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    53c6:	4bb7      	ldr	r3, [pc, #732]	; (56a4 <__aeabi_dadd+0x39c>)
    53c8:	429c      	cmp	r4, r3
    53ca:	d0c6      	beq.n	535a <__aeabi_dadd+0x52>
    53cc:	2380      	movs	r3, #128	; 0x80
    53ce:	041b      	lsls	r3, r3, #16
    53d0:	4318      	orrs	r0, r3
    53d2:	2e38      	cmp	r6, #56	; 0x38
    53d4:	dd00      	ble.n	53d8 <__aeabi_dadd+0xd0>
    53d6:	e0eb      	b.n	55b0 <__aeabi_dadd+0x2a8>
    53d8:	2e1f      	cmp	r6, #31
    53da:	dd00      	ble.n	53de <__aeabi_dadd+0xd6>
    53dc:	e11e      	b.n	561c <__aeabi_dadd+0x314>
    53de:	2320      	movs	r3, #32
    53e0:	1b9b      	subs	r3, r3, r6
    53e2:	469c      	mov	ip, r3
    53e4:	0003      	movs	r3, r0
    53e6:	4667      	mov	r7, ip
    53e8:	40bb      	lsls	r3, r7
    53ea:	4698      	mov	r8, r3
    53ec:	0013      	movs	r3, r2
    53ee:	4647      	mov	r7, r8
    53f0:	40f3      	lsrs	r3, r6
    53f2:	433b      	orrs	r3, r7
    53f4:	4667      	mov	r7, ip
    53f6:	40ba      	lsls	r2, r7
    53f8:	1e57      	subs	r7, r2, #1
    53fa:	41ba      	sbcs	r2, r7
    53fc:	4313      	orrs	r3, r2
    53fe:	0002      	movs	r2, r0
    5400:	40f2      	lsrs	r2, r6
    5402:	1aeb      	subs	r3, r5, r3
    5404:	429d      	cmp	r5, r3
    5406:	41b6      	sbcs	r6, r6
    5408:	001d      	movs	r5, r3
    540a:	1a8a      	subs	r2, r1, r2
    540c:	4276      	negs	r6, r6
    540e:	1b91      	subs	r1, r2, r6
    5410:	020b      	lsls	r3, r1, #8
    5412:	d531      	bpl.n	5478 <__aeabi_dadd+0x170>
    5414:	024a      	lsls	r2, r1, #9
    5416:	0a56      	lsrs	r6, r2, #9
    5418:	2e00      	cmp	r6, #0
    541a:	d100      	bne.n	541e <__aeabi_dadd+0x116>
    541c:	e0b4      	b.n	5588 <__aeabi_dadd+0x280>
    541e:	0030      	movs	r0, r6
    5420:	f001 fbf0 	bl	6c04 <__clzsi2>
    5424:	0003      	movs	r3, r0
    5426:	3b08      	subs	r3, #8
    5428:	2b1f      	cmp	r3, #31
    542a:	dd00      	ble.n	542e <__aeabi_dadd+0x126>
    542c:	e0b5      	b.n	559a <__aeabi_dadd+0x292>
    542e:	2220      	movs	r2, #32
    5430:	0029      	movs	r1, r5
    5432:	1ad2      	subs	r2, r2, r3
    5434:	40d1      	lsrs	r1, r2
    5436:	409e      	lsls	r6, r3
    5438:	000a      	movs	r2, r1
    543a:	409d      	lsls	r5, r3
    543c:	4332      	orrs	r2, r6
    543e:	429c      	cmp	r4, r3
    5440:	dd00      	ble.n	5444 <__aeabi_dadd+0x13c>
    5442:	e0b1      	b.n	55a8 <__aeabi_dadd+0x2a0>
    5444:	1b1c      	subs	r4, r3, r4
    5446:	1c63      	adds	r3, r4, #1
    5448:	2b1f      	cmp	r3, #31
    544a:	dd00      	ble.n	544e <__aeabi_dadd+0x146>
    544c:	e0d5      	b.n	55fa <__aeabi_dadd+0x2f2>
    544e:	2120      	movs	r1, #32
    5450:	0014      	movs	r4, r2
    5452:	0028      	movs	r0, r5
    5454:	1ac9      	subs	r1, r1, r3
    5456:	408c      	lsls	r4, r1
    5458:	40d8      	lsrs	r0, r3
    545a:	408d      	lsls	r5, r1
    545c:	4304      	orrs	r4, r0
    545e:	40da      	lsrs	r2, r3
    5460:	1e68      	subs	r0, r5, #1
    5462:	4185      	sbcs	r5, r0
    5464:	0011      	movs	r1, r2
    5466:	4325      	orrs	r5, r4
    5468:	2400      	movs	r4, #0
    546a:	e776      	b.n	535a <__aeabi_dadd+0x52>
    546c:	4641      	mov	r1, r8
    546e:	4331      	orrs	r1, r6
    5470:	d100      	bne.n	5474 <__aeabi_dadd+0x16c>
    5472:	e234      	b.n	58de <__aeabi_dadd+0x5d6>
    5474:	0031      	movs	r1, r6
    5476:	4645      	mov	r5, r8
    5478:	076b      	lsls	r3, r5, #29
    547a:	d000      	beq.n	547e <__aeabi_dadd+0x176>
    547c:	e76f      	b.n	535e <__aeabi_dadd+0x56>
    547e:	4656      	mov	r6, sl
    5480:	0748      	lsls	r0, r1, #29
    5482:	08ed      	lsrs	r5, r5, #3
    5484:	08c9      	lsrs	r1, r1, #3
    5486:	4305      	orrs	r5, r0
    5488:	4b86      	ldr	r3, [pc, #536]	; (56a4 <__aeabi_dadd+0x39c>)
    548a:	429c      	cmp	r4, r3
    548c:	d035      	beq.n	54fa <__aeabi_dadd+0x1f2>
    548e:	030a      	lsls	r2, r1, #12
    5490:	0564      	lsls	r4, r4, #21
    5492:	0b12      	lsrs	r2, r2, #12
    5494:	0d64      	lsrs	r4, r4, #21
    5496:	e77f      	b.n	5398 <__aeabi_dadd+0x90>
    5498:	4663      	mov	r3, ip
    549a:	1ae3      	subs	r3, r4, r3
    549c:	469b      	mov	fp, r3
    549e:	2b00      	cmp	r3, #0
    54a0:	dc00      	bgt.n	54a4 <__aeabi_dadd+0x19c>
    54a2:	e08b      	b.n	55bc <__aeabi_dadd+0x2b4>
    54a4:	4667      	mov	r7, ip
    54a6:	2f00      	cmp	r7, #0
    54a8:	d03c      	beq.n	5524 <__aeabi_dadd+0x21c>
    54aa:	4f7e      	ldr	r7, [pc, #504]	; (56a4 <__aeabi_dadd+0x39c>)
    54ac:	42bc      	cmp	r4, r7
    54ae:	d100      	bne.n	54b2 <__aeabi_dadd+0x1aa>
    54b0:	e753      	b.n	535a <__aeabi_dadd+0x52>
    54b2:	2780      	movs	r7, #128	; 0x80
    54b4:	043f      	lsls	r7, r7, #16
    54b6:	4338      	orrs	r0, r7
    54b8:	465b      	mov	r3, fp
    54ba:	2b38      	cmp	r3, #56	; 0x38
    54bc:	dc00      	bgt.n	54c0 <__aeabi_dadd+0x1b8>
    54be:	e0f7      	b.n	56b0 <__aeabi_dadd+0x3a8>
    54c0:	4302      	orrs	r2, r0
    54c2:	1e50      	subs	r0, r2, #1
    54c4:	4182      	sbcs	r2, r0
    54c6:	2000      	movs	r0, #0
    54c8:	b2d2      	uxtb	r2, r2
    54ca:	1953      	adds	r3, r2, r5
    54cc:	1842      	adds	r2, r0, r1
    54ce:	42ab      	cmp	r3, r5
    54d0:	4189      	sbcs	r1, r1
    54d2:	001d      	movs	r5, r3
    54d4:	4249      	negs	r1, r1
    54d6:	1889      	adds	r1, r1, r2
    54d8:	020b      	lsls	r3, r1, #8
    54da:	d5cd      	bpl.n	5478 <__aeabi_dadd+0x170>
    54dc:	4b71      	ldr	r3, [pc, #452]	; (56a4 <__aeabi_dadd+0x39c>)
    54de:	3401      	adds	r4, #1
    54e0:	429c      	cmp	r4, r3
    54e2:	d100      	bne.n	54e6 <__aeabi_dadd+0x1de>
    54e4:	e13d      	b.n	5762 <__aeabi_dadd+0x45a>
    54e6:	2001      	movs	r0, #1
    54e8:	4a6f      	ldr	r2, [pc, #444]	; (56a8 <__aeabi_dadd+0x3a0>)
    54ea:	086b      	lsrs	r3, r5, #1
    54ec:	400a      	ands	r2, r1
    54ee:	4028      	ands	r0, r5
    54f0:	4318      	orrs	r0, r3
    54f2:	07d5      	lsls	r5, r2, #31
    54f4:	4305      	orrs	r5, r0
    54f6:	0851      	lsrs	r1, r2, #1
    54f8:	e72f      	b.n	535a <__aeabi_dadd+0x52>
    54fa:	002b      	movs	r3, r5
    54fc:	430b      	orrs	r3, r1
    54fe:	d100      	bne.n	5502 <__aeabi_dadd+0x1fa>
    5500:	e1cb      	b.n	589a <__aeabi_dadd+0x592>
    5502:	2380      	movs	r3, #128	; 0x80
    5504:	031b      	lsls	r3, r3, #12
    5506:	430b      	orrs	r3, r1
    5508:	031a      	lsls	r2, r3, #12
    550a:	0b12      	lsrs	r2, r2, #12
    550c:	e744      	b.n	5398 <__aeabi_dadd+0x90>
    550e:	3e01      	subs	r6, #1
    5510:	2e00      	cmp	r6, #0
    5512:	d16d      	bne.n	55f0 <__aeabi_dadd+0x2e8>
    5514:	1aae      	subs	r6, r5, r2
    5516:	42b5      	cmp	r5, r6
    5518:	419b      	sbcs	r3, r3
    551a:	1a09      	subs	r1, r1, r0
    551c:	425b      	negs	r3, r3
    551e:	1ac9      	subs	r1, r1, r3
    5520:	0035      	movs	r5, r6
    5522:	e775      	b.n	5410 <__aeabi_dadd+0x108>
    5524:	0007      	movs	r7, r0
    5526:	4317      	orrs	r7, r2
    5528:	d100      	bne.n	552c <__aeabi_dadd+0x224>
    552a:	e716      	b.n	535a <__aeabi_dadd+0x52>
    552c:	2301      	movs	r3, #1
    552e:	425b      	negs	r3, r3
    5530:	469c      	mov	ip, r3
    5532:	44e3      	add	fp, ip
    5534:	465b      	mov	r3, fp
    5536:	2b00      	cmp	r3, #0
    5538:	d000      	beq.n	553c <__aeabi_dadd+0x234>
    553a:	e0e0      	b.n	56fe <__aeabi_dadd+0x3f6>
    553c:	18aa      	adds	r2, r5, r2
    553e:	42aa      	cmp	r2, r5
    5540:	419b      	sbcs	r3, r3
    5542:	1809      	adds	r1, r1, r0
    5544:	425b      	negs	r3, r3
    5546:	1859      	adds	r1, r3, r1
    5548:	0015      	movs	r5, r2
    554a:	e7c5      	b.n	54d8 <__aeabi_dadd+0x1d0>
    554c:	2e00      	cmp	r6, #0
    554e:	d175      	bne.n	563c <__aeabi_dadd+0x334>
    5550:	1c66      	adds	r6, r4, #1
    5552:	0576      	lsls	r6, r6, #21
    5554:	0d76      	lsrs	r6, r6, #21
    5556:	2e01      	cmp	r6, #1
    5558:	dc00      	bgt.n	555c <__aeabi_dadd+0x254>
    555a:	e0f3      	b.n	5744 <__aeabi_dadd+0x43c>
    555c:	1aae      	subs	r6, r5, r2
    555e:	46b0      	mov	r8, r6
    5560:	4545      	cmp	r5, r8
    5562:	41bf      	sbcs	r7, r7
    5564:	1a0e      	subs	r6, r1, r0
    5566:	427f      	negs	r7, r7
    5568:	1bf6      	subs	r6, r6, r7
    556a:	0237      	lsls	r7, r6, #8
    556c:	d400      	bmi.n	5570 <__aeabi_dadd+0x268>
    556e:	e08f      	b.n	5690 <__aeabi_dadd+0x388>
    5570:	1b55      	subs	r5, r2, r5
    5572:	42aa      	cmp	r2, r5
    5574:	41b6      	sbcs	r6, r6
    5576:	1a41      	subs	r1, r0, r1
    5578:	4276      	negs	r6, r6
    557a:	1b8e      	subs	r6, r1, r6
    557c:	469a      	mov	sl, r3
    557e:	e74b      	b.n	5418 <__aeabi_dadd+0x110>
    5580:	4656      	mov	r6, sl
    5582:	2200      	movs	r2, #0
    5584:	2500      	movs	r5, #0
    5586:	e707      	b.n	5398 <__aeabi_dadd+0x90>
    5588:	0028      	movs	r0, r5
    558a:	f001 fb3b 	bl	6c04 <__clzsi2>
    558e:	3020      	adds	r0, #32
    5590:	0003      	movs	r3, r0
    5592:	3b08      	subs	r3, #8
    5594:	2b1f      	cmp	r3, #31
    5596:	dc00      	bgt.n	559a <__aeabi_dadd+0x292>
    5598:	e749      	b.n	542e <__aeabi_dadd+0x126>
    559a:	002a      	movs	r2, r5
    559c:	3828      	subs	r0, #40	; 0x28
    559e:	4082      	lsls	r2, r0
    55a0:	2500      	movs	r5, #0
    55a2:	429c      	cmp	r4, r3
    55a4:	dc00      	bgt.n	55a8 <__aeabi_dadd+0x2a0>
    55a6:	e74d      	b.n	5444 <__aeabi_dadd+0x13c>
    55a8:	493f      	ldr	r1, [pc, #252]	; (56a8 <__aeabi_dadd+0x3a0>)
    55aa:	1ae4      	subs	r4, r4, r3
    55ac:	4011      	ands	r1, r2
    55ae:	e6d4      	b.n	535a <__aeabi_dadd+0x52>
    55b0:	4302      	orrs	r2, r0
    55b2:	1e50      	subs	r0, r2, #1
    55b4:	4182      	sbcs	r2, r0
    55b6:	b2d3      	uxtb	r3, r2
    55b8:	2200      	movs	r2, #0
    55ba:	e722      	b.n	5402 <__aeabi_dadd+0xfa>
    55bc:	2b00      	cmp	r3, #0
    55be:	d000      	beq.n	55c2 <__aeabi_dadd+0x2ba>
    55c0:	e0f3      	b.n	57aa <__aeabi_dadd+0x4a2>
    55c2:	1c63      	adds	r3, r4, #1
    55c4:	469c      	mov	ip, r3
    55c6:	055b      	lsls	r3, r3, #21
    55c8:	0d5b      	lsrs	r3, r3, #21
    55ca:	2b01      	cmp	r3, #1
    55cc:	dc00      	bgt.n	55d0 <__aeabi_dadd+0x2c8>
    55ce:	e09f      	b.n	5710 <__aeabi_dadd+0x408>
    55d0:	4b34      	ldr	r3, [pc, #208]	; (56a4 <__aeabi_dadd+0x39c>)
    55d2:	459c      	cmp	ip, r3
    55d4:	d100      	bne.n	55d8 <__aeabi_dadd+0x2d0>
    55d6:	e0c3      	b.n	5760 <__aeabi_dadd+0x458>
    55d8:	18aa      	adds	r2, r5, r2
    55da:	1809      	adds	r1, r1, r0
    55dc:	42aa      	cmp	r2, r5
    55de:	4180      	sbcs	r0, r0
    55e0:	4240      	negs	r0, r0
    55e2:	1841      	adds	r1, r0, r1
    55e4:	07cd      	lsls	r5, r1, #31
    55e6:	0852      	lsrs	r2, r2, #1
    55e8:	4315      	orrs	r5, r2
    55ea:	0849      	lsrs	r1, r1, #1
    55ec:	4664      	mov	r4, ip
    55ee:	e6b4      	b.n	535a <__aeabi_dadd+0x52>
    55f0:	4b2c      	ldr	r3, [pc, #176]	; (56a4 <__aeabi_dadd+0x39c>)
    55f2:	429c      	cmp	r4, r3
    55f4:	d000      	beq.n	55f8 <__aeabi_dadd+0x2f0>
    55f6:	e6ec      	b.n	53d2 <__aeabi_dadd+0xca>
    55f8:	e6af      	b.n	535a <__aeabi_dadd+0x52>
    55fa:	0011      	movs	r1, r2
    55fc:	3c1f      	subs	r4, #31
    55fe:	40e1      	lsrs	r1, r4
    5600:	000c      	movs	r4, r1
    5602:	2b20      	cmp	r3, #32
    5604:	d100      	bne.n	5608 <__aeabi_dadd+0x300>
    5606:	e07f      	b.n	5708 <__aeabi_dadd+0x400>
    5608:	2140      	movs	r1, #64	; 0x40
    560a:	1acb      	subs	r3, r1, r3
    560c:	409a      	lsls	r2, r3
    560e:	4315      	orrs	r5, r2
    5610:	1e6a      	subs	r2, r5, #1
    5612:	4195      	sbcs	r5, r2
    5614:	2100      	movs	r1, #0
    5616:	4325      	orrs	r5, r4
    5618:	2400      	movs	r4, #0
    561a:	e72d      	b.n	5478 <__aeabi_dadd+0x170>
    561c:	0033      	movs	r3, r6
    561e:	0007      	movs	r7, r0
    5620:	3b20      	subs	r3, #32
    5622:	40df      	lsrs	r7, r3
    5624:	003b      	movs	r3, r7
    5626:	2e20      	cmp	r6, #32
    5628:	d070      	beq.n	570c <__aeabi_dadd+0x404>
    562a:	2740      	movs	r7, #64	; 0x40
    562c:	1bbe      	subs	r6, r7, r6
    562e:	40b0      	lsls	r0, r6
    5630:	4302      	orrs	r2, r0
    5632:	1e50      	subs	r0, r2, #1
    5634:	4182      	sbcs	r2, r0
    5636:	4313      	orrs	r3, r2
    5638:	2200      	movs	r2, #0
    563a:	e6e2      	b.n	5402 <__aeabi_dadd+0xfa>
    563c:	2c00      	cmp	r4, #0
    563e:	d04f      	beq.n	56e0 <__aeabi_dadd+0x3d8>
    5640:	4c18      	ldr	r4, [pc, #96]	; (56a4 <__aeabi_dadd+0x39c>)
    5642:	45a4      	cmp	ip, r4
    5644:	d100      	bne.n	5648 <__aeabi_dadd+0x340>
    5646:	e0ab      	b.n	57a0 <__aeabi_dadd+0x498>
    5648:	2480      	movs	r4, #128	; 0x80
    564a:	0424      	lsls	r4, r4, #16
    564c:	4276      	negs	r6, r6
    564e:	4321      	orrs	r1, r4
    5650:	2e38      	cmp	r6, #56	; 0x38
    5652:	dd00      	ble.n	5656 <__aeabi_dadd+0x34e>
    5654:	e0df      	b.n	5816 <__aeabi_dadd+0x50e>
    5656:	2e1f      	cmp	r6, #31
    5658:	dd00      	ble.n	565c <__aeabi_dadd+0x354>
    565a:	e143      	b.n	58e4 <__aeabi_dadd+0x5dc>
    565c:	2720      	movs	r7, #32
    565e:	1bbc      	subs	r4, r7, r6
    5660:	46a1      	mov	r9, r4
    5662:	000c      	movs	r4, r1
    5664:	464f      	mov	r7, r9
    5666:	40bc      	lsls	r4, r7
    5668:	46a0      	mov	r8, r4
    566a:	002c      	movs	r4, r5
    566c:	4647      	mov	r7, r8
    566e:	40f4      	lsrs	r4, r6
    5670:	433c      	orrs	r4, r7
    5672:	464f      	mov	r7, r9
    5674:	40bd      	lsls	r5, r7
    5676:	1e6f      	subs	r7, r5, #1
    5678:	41bd      	sbcs	r5, r7
    567a:	40f1      	lsrs	r1, r6
    567c:	432c      	orrs	r4, r5
    567e:	1b15      	subs	r5, r2, r4
    5680:	42aa      	cmp	r2, r5
    5682:	4192      	sbcs	r2, r2
    5684:	1a41      	subs	r1, r0, r1
    5686:	4252      	negs	r2, r2
    5688:	1a89      	subs	r1, r1, r2
    568a:	4664      	mov	r4, ip
    568c:	469a      	mov	sl, r3
    568e:	e6bf      	b.n	5410 <__aeabi_dadd+0x108>
    5690:	4641      	mov	r1, r8
    5692:	4645      	mov	r5, r8
    5694:	4331      	orrs	r1, r6
    5696:	d000      	beq.n	569a <__aeabi_dadd+0x392>
    5698:	e6be      	b.n	5418 <__aeabi_dadd+0x110>
    569a:	2600      	movs	r6, #0
    569c:	2400      	movs	r4, #0
    569e:	2500      	movs	r5, #0
    56a0:	e6f2      	b.n	5488 <__aeabi_dadd+0x180>
    56a2:	46c0      	nop			; (mov r8, r8)
    56a4:	000007ff 	.word	0x000007ff
    56a8:	ff7fffff 	.word	0xff7fffff
    56ac:	800fffff 	.word	0x800fffff
    56b0:	2b1f      	cmp	r3, #31
    56b2:	dc59      	bgt.n	5768 <__aeabi_dadd+0x460>
    56b4:	2720      	movs	r7, #32
    56b6:	1aff      	subs	r7, r7, r3
    56b8:	46bc      	mov	ip, r7
    56ba:	0007      	movs	r7, r0
    56bc:	4663      	mov	r3, ip
    56be:	409f      	lsls	r7, r3
    56c0:	465b      	mov	r3, fp
    56c2:	46b9      	mov	r9, r7
    56c4:	0017      	movs	r7, r2
    56c6:	40df      	lsrs	r7, r3
    56c8:	46b8      	mov	r8, r7
    56ca:	464f      	mov	r7, r9
    56cc:	4643      	mov	r3, r8
    56ce:	431f      	orrs	r7, r3
    56d0:	4663      	mov	r3, ip
    56d2:	409a      	lsls	r2, r3
    56d4:	1e53      	subs	r3, r2, #1
    56d6:	419a      	sbcs	r2, r3
    56d8:	465b      	mov	r3, fp
    56da:	433a      	orrs	r2, r7
    56dc:	40d8      	lsrs	r0, r3
    56de:	e6f4      	b.n	54ca <__aeabi_dadd+0x1c2>
    56e0:	000c      	movs	r4, r1
    56e2:	432c      	orrs	r4, r5
    56e4:	d05c      	beq.n	57a0 <__aeabi_dadd+0x498>
    56e6:	43f6      	mvns	r6, r6
    56e8:	2e00      	cmp	r6, #0
    56ea:	d155      	bne.n	5798 <__aeabi_dadd+0x490>
    56ec:	1b55      	subs	r5, r2, r5
    56ee:	42aa      	cmp	r2, r5
    56f0:	41a4      	sbcs	r4, r4
    56f2:	1a41      	subs	r1, r0, r1
    56f4:	4264      	negs	r4, r4
    56f6:	1b09      	subs	r1, r1, r4
    56f8:	469a      	mov	sl, r3
    56fa:	4664      	mov	r4, ip
    56fc:	e688      	b.n	5410 <__aeabi_dadd+0x108>
    56fe:	4f96      	ldr	r7, [pc, #600]	; (5958 <__aeabi_dadd+0x650>)
    5700:	42bc      	cmp	r4, r7
    5702:	d000      	beq.n	5706 <__aeabi_dadd+0x3fe>
    5704:	e6d8      	b.n	54b8 <__aeabi_dadd+0x1b0>
    5706:	e628      	b.n	535a <__aeabi_dadd+0x52>
    5708:	2200      	movs	r2, #0
    570a:	e780      	b.n	560e <__aeabi_dadd+0x306>
    570c:	2000      	movs	r0, #0
    570e:	e78f      	b.n	5630 <__aeabi_dadd+0x328>
    5710:	000b      	movs	r3, r1
    5712:	432b      	orrs	r3, r5
    5714:	2c00      	cmp	r4, #0
    5716:	d000      	beq.n	571a <__aeabi_dadd+0x412>
    5718:	e0c2      	b.n	58a0 <__aeabi_dadd+0x598>
    571a:	2b00      	cmp	r3, #0
    571c:	d100      	bne.n	5720 <__aeabi_dadd+0x418>
    571e:	e101      	b.n	5924 <__aeabi_dadd+0x61c>
    5720:	0003      	movs	r3, r0
    5722:	4313      	orrs	r3, r2
    5724:	d100      	bne.n	5728 <__aeabi_dadd+0x420>
    5726:	e618      	b.n	535a <__aeabi_dadd+0x52>
    5728:	18ab      	adds	r3, r5, r2
    572a:	42ab      	cmp	r3, r5
    572c:	41b6      	sbcs	r6, r6
    572e:	1809      	adds	r1, r1, r0
    5730:	4276      	negs	r6, r6
    5732:	1871      	adds	r1, r6, r1
    5734:	020a      	lsls	r2, r1, #8
    5736:	d400      	bmi.n	573a <__aeabi_dadd+0x432>
    5738:	e109      	b.n	594e <__aeabi_dadd+0x646>
    573a:	4a88      	ldr	r2, [pc, #544]	; (595c <__aeabi_dadd+0x654>)
    573c:	001d      	movs	r5, r3
    573e:	4011      	ands	r1, r2
    5740:	4664      	mov	r4, ip
    5742:	e60a      	b.n	535a <__aeabi_dadd+0x52>
    5744:	2c00      	cmp	r4, #0
    5746:	d15b      	bne.n	5800 <__aeabi_dadd+0x4f8>
    5748:	000e      	movs	r6, r1
    574a:	432e      	orrs	r6, r5
    574c:	d000      	beq.n	5750 <__aeabi_dadd+0x448>
    574e:	e08a      	b.n	5866 <__aeabi_dadd+0x55e>
    5750:	0001      	movs	r1, r0
    5752:	4311      	orrs	r1, r2
    5754:	d100      	bne.n	5758 <__aeabi_dadd+0x450>
    5756:	e0c2      	b.n	58de <__aeabi_dadd+0x5d6>
    5758:	0001      	movs	r1, r0
    575a:	0015      	movs	r5, r2
    575c:	469a      	mov	sl, r3
    575e:	e5fc      	b.n	535a <__aeabi_dadd+0x52>
    5760:	4664      	mov	r4, ip
    5762:	2100      	movs	r1, #0
    5764:	2500      	movs	r5, #0
    5766:	e68f      	b.n	5488 <__aeabi_dadd+0x180>
    5768:	2320      	movs	r3, #32
    576a:	425b      	negs	r3, r3
    576c:	469c      	mov	ip, r3
    576e:	44dc      	add	ip, fp
    5770:	4663      	mov	r3, ip
    5772:	0007      	movs	r7, r0
    5774:	40df      	lsrs	r7, r3
    5776:	465b      	mov	r3, fp
    5778:	46bc      	mov	ip, r7
    577a:	2b20      	cmp	r3, #32
    577c:	d100      	bne.n	5780 <__aeabi_dadd+0x478>
    577e:	e0ac      	b.n	58da <__aeabi_dadd+0x5d2>
    5780:	2340      	movs	r3, #64	; 0x40
    5782:	465f      	mov	r7, fp
    5784:	1bdb      	subs	r3, r3, r7
    5786:	4098      	lsls	r0, r3
    5788:	4302      	orrs	r2, r0
    578a:	1e50      	subs	r0, r2, #1
    578c:	4182      	sbcs	r2, r0
    578e:	4663      	mov	r3, ip
    5790:	4313      	orrs	r3, r2
    5792:	001a      	movs	r2, r3
    5794:	2000      	movs	r0, #0
    5796:	e698      	b.n	54ca <__aeabi_dadd+0x1c2>
    5798:	4c6f      	ldr	r4, [pc, #444]	; (5958 <__aeabi_dadd+0x650>)
    579a:	45a4      	cmp	ip, r4
    579c:	d000      	beq.n	57a0 <__aeabi_dadd+0x498>
    579e:	e757      	b.n	5650 <__aeabi_dadd+0x348>
    57a0:	0001      	movs	r1, r0
    57a2:	0015      	movs	r5, r2
    57a4:	4664      	mov	r4, ip
    57a6:	469a      	mov	sl, r3
    57a8:	e5d7      	b.n	535a <__aeabi_dadd+0x52>
    57aa:	2c00      	cmp	r4, #0
    57ac:	d139      	bne.n	5822 <__aeabi_dadd+0x51a>
    57ae:	000c      	movs	r4, r1
    57b0:	432c      	orrs	r4, r5
    57b2:	d06e      	beq.n	5892 <__aeabi_dadd+0x58a>
    57b4:	43db      	mvns	r3, r3
    57b6:	2b00      	cmp	r3, #0
    57b8:	d01a      	beq.n	57f0 <__aeabi_dadd+0x4e8>
    57ba:	4c67      	ldr	r4, [pc, #412]	; (5958 <__aeabi_dadd+0x650>)
    57bc:	45a4      	cmp	ip, r4
    57be:	d068      	beq.n	5892 <__aeabi_dadd+0x58a>
    57c0:	2b38      	cmp	r3, #56	; 0x38
    57c2:	dd00      	ble.n	57c6 <__aeabi_dadd+0x4be>
    57c4:	e0a4      	b.n	5910 <__aeabi_dadd+0x608>
    57c6:	2b1f      	cmp	r3, #31
    57c8:	dd00      	ble.n	57cc <__aeabi_dadd+0x4c4>
    57ca:	e0ae      	b.n	592a <__aeabi_dadd+0x622>
    57cc:	2420      	movs	r4, #32
    57ce:	000f      	movs	r7, r1
    57d0:	1ae4      	subs	r4, r4, r3
    57d2:	40a7      	lsls	r7, r4
    57d4:	46b9      	mov	r9, r7
    57d6:	002f      	movs	r7, r5
    57d8:	40df      	lsrs	r7, r3
    57da:	46b8      	mov	r8, r7
    57dc:	46a3      	mov	fp, r4
    57de:	464f      	mov	r7, r9
    57e0:	4644      	mov	r4, r8
    57e2:	4327      	orrs	r7, r4
    57e4:	465c      	mov	r4, fp
    57e6:	40a5      	lsls	r5, r4
    57e8:	1e6c      	subs	r4, r5, #1
    57ea:	41a5      	sbcs	r5, r4
    57ec:	40d9      	lsrs	r1, r3
    57ee:	433d      	orrs	r5, r7
    57f0:	18ad      	adds	r5, r5, r2
    57f2:	4295      	cmp	r5, r2
    57f4:	419b      	sbcs	r3, r3
    57f6:	1809      	adds	r1, r1, r0
    57f8:	425b      	negs	r3, r3
    57fa:	1859      	adds	r1, r3, r1
    57fc:	4664      	mov	r4, ip
    57fe:	e66b      	b.n	54d8 <__aeabi_dadd+0x1d0>
    5800:	000c      	movs	r4, r1
    5802:	432c      	orrs	r4, r5
    5804:	d115      	bne.n	5832 <__aeabi_dadd+0x52a>
    5806:	0001      	movs	r1, r0
    5808:	4311      	orrs	r1, r2
    580a:	d07b      	beq.n	5904 <__aeabi_dadd+0x5fc>
    580c:	0001      	movs	r1, r0
    580e:	0015      	movs	r5, r2
    5810:	469a      	mov	sl, r3
    5812:	4c51      	ldr	r4, [pc, #324]	; (5958 <__aeabi_dadd+0x650>)
    5814:	e5a1      	b.n	535a <__aeabi_dadd+0x52>
    5816:	430d      	orrs	r5, r1
    5818:	1e69      	subs	r1, r5, #1
    581a:	418d      	sbcs	r5, r1
    581c:	2100      	movs	r1, #0
    581e:	b2ec      	uxtb	r4, r5
    5820:	e72d      	b.n	567e <__aeabi_dadd+0x376>
    5822:	4c4d      	ldr	r4, [pc, #308]	; (5958 <__aeabi_dadd+0x650>)
    5824:	45a4      	cmp	ip, r4
    5826:	d034      	beq.n	5892 <__aeabi_dadd+0x58a>
    5828:	2480      	movs	r4, #128	; 0x80
    582a:	0424      	lsls	r4, r4, #16
    582c:	425b      	negs	r3, r3
    582e:	4321      	orrs	r1, r4
    5830:	e7c6      	b.n	57c0 <__aeabi_dadd+0x4b8>
    5832:	0004      	movs	r4, r0
    5834:	4314      	orrs	r4, r2
    5836:	d04e      	beq.n	58d6 <__aeabi_dadd+0x5ce>
    5838:	08ed      	lsrs	r5, r5, #3
    583a:	074c      	lsls	r4, r1, #29
    583c:	432c      	orrs	r4, r5
    583e:	2580      	movs	r5, #128	; 0x80
    5840:	08c9      	lsrs	r1, r1, #3
    5842:	032d      	lsls	r5, r5, #12
    5844:	4229      	tst	r1, r5
    5846:	d008      	beq.n	585a <__aeabi_dadd+0x552>
    5848:	08c6      	lsrs	r6, r0, #3
    584a:	422e      	tst	r6, r5
    584c:	d105      	bne.n	585a <__aeabi_dadd+0x552>
    584e:	08d2      	lsrs	r2, r2, #3
    5850:	0741      	lsls	r1, r0, #29
    5852:	4311      	orrs	r1, r2
    5854:	000c      	movs	r4, r1
    5856:	469a      	mov	sl, r3
    5858:	0031      	movs	r1, r6
    585a:	0f62      	lsrs	r2, r4, #29
    585c:	00c9      	lsls	r1, r1, #3
    585e:	00e5      	lsls	r5, r4, #3
    5860:	4311      	orrs	r1, r2
    5862:	4c3d      	ldr	r4, [pc, #244]	; (5958 <__aeabi_dadd+0x650>)
    5864:	e579      	b.n	535a <__aeabi_dadd+0x52>
    5866:	0006      	movs	r6, r0
    5868:	4316      	orrs	r6, r2
    586a:	d100      	bne.n	586e <__aeabi_dadd+0x566>
    586c:	e575      	b.n	535a <__aeabi_dadd+0x52>
    586e:	1aae      	subs	r6, r5, r2
    5870:	46b0      	mov	r8, r6
    5872:	4545      	cmp	r5, r8
    5874:	41bf      	sbcs	r7, r7
    5876:	1a0e      	subs	r6, r1, r0
    5878:	427f      	negs	r7, r7
    587a:	1bf6      	subs	r6, r6, r7
    587c:	0237      	lsls	r7, r6, #8
    587e:	d400      	bmi.n	5882 <__aeabi_dadd+0x57a>
    5880:	e5f4      	b.n	546c <__aeabi_dadd+0x164>
    5882:	1b55      	subs	r5, r2, r5
    5884:	42aa      	cmp	r2, r5
    5886:	41b6      	sbcs	r6, r6
    5888:	1a41      	subs	r1, r0, r1
    588a:	4276      	negs	r6, r6
    588c:	1b89      	subs	r1, r1, r6
    588e:	469a      	mov	sl, r3
    5890:	e563      	b.n	535a <__aeabi_dadd+0x52>
    5892:	0001      	movs	r1, r0
    5894:	0015      	movs	r5, r2
    5896:	4664      	mov	r4, ip
    5898:	e55f      	b.n	535a <__aeabi_dadd+0x52>
    589a:	2200      	movs	r2, #0
    589c:	2500      	movs	r5, #0
    589e:	e57b      	b.n	5398 <__aeabi_dadd+0x90>
    58a0:	2b00      	cmp	r3, #0
    58a2:	d03b      	beq.n	591c <__aeabi_dadd+0x614>
    58a4:	0003      	movs	r3, r0
    58a6:	4313      	orrs	r3, r2
    58a8:	d015      	beq.n	58d6 <__aeabi_dadd+0x5ce>
    58aa:	08ed      	lsrs	r5, r5, #3
    58ac:	074b      	lsls	r3, r1, #29
    58ae:	432b      	orrs	r3, r5
    58b0:	2580      	movs	r5, #128	; 0x80
    58b2:	08c9      	lsrs	r1, r1, #3
    58b4:	032d      	lsls	r5, r5, #12
    58b6:	4229      	tst	r1, r5
    58b8:	d007      	beq.n	58ca <__aeabi_dadd+0x5c2>
    58ba:	08c4      	lsrs	r4, r0, #3
    58bc:	422c      	tst	r4, r5
    58be:	d104      	bne.n	58ca <__aeabi_dadd+0x5c2>
    58c0:	0741      	lsls	r1, r0, #29
    58c2:	000b      	movs	r3, r1
    58c4:	0021      	movs	r1, r4
    58c6:	08d2      	lsrs	r2, r2, #3
    58c8:	4313      	orrs	r3, r2
    58ca:	00c9      	lsls	r1, r1, #3
    58cc:	0f5a      	lsrs	r2, r3, #29
    58ce:	4311      	orrs	r1, r2
    58d0:	00dd      	lsls	r5, r3, #3
    58d2:	4c21      	ldr	r4, [pc, #132]	; (5958 <__aeabi_dadd+0x650>)
    58d4:	e541      	b.n	535a <__aeabi_dadd+0x52>
    58d6:	4c20      	ldr	r4, [pc, #128]	; (5958 <__aeabi_dadd+0x650>)
    58d8:	e53f      	b.n	535a <__aeabi_dadd+0x52>
    58da:	2000      	movs	r0, #0
    58dc:	e754      	b.n	5788 <__aeabi_dadd+0x480>
    58de:	2600      	movs	r6, #0
    58e0:	2500      	movs	r5, #0
    58e2:	e5d1      	b.n	5488 <__aeabi_dadd+0x180>
    58e4:	0034      	movs	r4, r6
    58e6:	000f      	movs	r7, r1
    58e8:	3c20      	subs	r4, #32
    58ea:	40e7      	lsrs	r7, r4
    58ec:	003c      	movs	r4, r7
    58ee:	2e20      	cmp	r6, #32
    58f0:	d02b      	beq.n	594a <__aeabi_dadd+0x642>
    58f2:	2740      	movs	r7, #64	; 0x40
    58f4:	1bbe      	subs	r6, r7, r6
    58f6:	40b1      	lsls	r1, r6
    58f8:	430d      	orrs	r5, r1
    58fa:	1e69      	subs	r1, r5, #1
    58fc:	418d      	sbcs	r5, r1
    58fe:	2100      	movs	r1, #0
    5900:	432c      	orrs	r4, r5
    5902:	e6bc      	b.n	567e <__aeabi_dadd+0x376>
    5904:	2180      	movs	r1, #128	; 0x80
    5906:	2600      	movs	r6, #0
    5908:	0309      	lsls	r1, r1, #12
    590a:	4c13      	ldr	r4, [pc, #76]	; (5958 <__aeabi_dadd+0x650>)
    590c:	2500      	movs	r5, #0
    590e:	e5bb      	b.n	5488 <__aeabi_dadd+0x180>
    5910:	430d      	orrs	r5, r1
    5912:	1e69      	subs	r1, r5, #1
    5914:	418d      	sbcs	r5, r1
    5916:	2100      	movs	r1, #0
    5918:	b2ed      	uxtb	r5, r5
    591a:	e769      	b.n	57f0 <__aeabi_dadd+0x4e8>
    591c:	0001      	movs	r1, r0
    591e:	0015      	movs	r5, r2
    5920:	4c0d      	ldr	r4, [pc, #52]	; (5958 <__aeabi_dadd+0x650>)
    5922:	e51a      	b.n	535a <__aeabi_dadd+0x52>
    5924:	0001      	movs	r1, r0
    5926:	0015      	movs	r5, r2
    5928:	e517      	b.n	535a <__aeabi_dadd+0x52>
    592a:	001c      	movs	r4, r3
    592c:	000f      	movs	r7, r1
    592e:	3c20      	subs	r4, #32
    5930:	40e7      	lsrs	r7, r4
    5932:	003c      	movs	r4, r7
    5934:	2b20      	cmp	r3, #32
    5936:	d00c      	beq.n	5952 <__aeabi_dadd+0x64a>
    5938:	2740      	movs	r7, #64	; 0x40
    593a:	1afb      	subs	r3, r7, r3
    593c:	4099      	lsls	r1, r3
    593e:	430d      	orrs	r5, r1
    5940:	1e69      	subs	r1, r5, #1
    5942:	418d      	sbcs	r5, r1
    5944:	2100      	movs	r1, #0
    5946:	4325      	orrs	r5, r4
    5948:	e752      	b.n	57f0 <__aeabi_dadd+0x4e8>
    594a:	2100      	movs	r1, #0
    594c:	e7d4      	b.n	58f8 <__aeabi_dadd+0x5f0>
    594e:	001d      	movs	r5, r3
    5950:	e592      	b.n	5478 <__aeabi_dadd+0x170>
    5952:	2100      	movs	r1, #0
    5954:	e7f3      	b.n	593e <__aeabi_dadd+0x636>
    5956:	46c0      	nop			; (mov r8, r8)
    5958:	000007ff 	.word	0x000007ff
    595c:	ff7fffff 	.word	0xff7fffff

00005960 <__aeabi_ddiv>:
    5960:	b5f0      	push	{r4, r5, r6, r7, lr}
    5962:	4656      	mov	r6, sl
    5964:	464d      	mov	r5, r9
    5966:	4644      	mov	r4, r8
    5968:	465f      	mov	r7, fp
    596a:	b4f0      	push	{r4, r5, r6, r7}
    596c:	001d      	movs	r5, r3
    596e:	030e      	lsls	r6, r1, #12
    5970:	004c      	lsls	r4, r1, #1
    5972:	0fcb      	lsrs	r3, r1, #31
    5974:	b087      	sub	sp, #28
    5976:	0007      	movs	r7, r0
    5978:	4692      	mov	sl, r2
    597a:	4681      	mov	r9, r0
    597c:	0b36      	lsrs	r6, r6, #12
    597e:	0d64      	lsrs	r4, r4, #21
    5980:	4698      	mov	r8, r3
    5982:	d06a      	beq.n	5a5a <__aeabi_ddiv+0xfa>
    5984:	4b6d      	ldr	r3, [pc, #436]	; (5b3c <__aeabi_ddiv+0x1dc>)
    5986:	429c      	cmp	r4, r3
    5988:	d035      	beq.n	59f6 <__aeabi_ddiv+0x96>
    598a:	2280      	movs	r2, #128	; 0x80
    598c:	0f43      	lsrs	r3, r0, #29
    598e:	0412      	lsls	r2, r2, #16
    5990:	4313      	orrs	r3, r2
    5992:	00f6      	lsls	r6, r6, #3
    5994:	431e      	orrs	r6, r3
    5996:	00c3      	lsls	r3, r0, #3
    5998:	4699      	mov	r9, r3
    599a:	4b69      	ldr	r3, [pc, #420]	; (5b40 <__aeabi_ddiv+0x1e0>)
    599c:	2700      	movs	r7, #0
    599e:	469c      	mov	ip, r3
    59a0:	2300      	movs	r3, #0
    59a2:	4464      	add	r4, ip
    59a4:	9302      	str	r3, [sp, #8]
    59a6:	032b      	lsls	r3, r5, #12
    59a8:	0068      	lsls	r0, r5, #1
    59aa:	0b1b      	lsrs	r3, r3, #12
    59ac:	0fed      	lsrs	r5, r5, #31
    59ae:	4651      	mov	r1, sl
    59b0:	469b      	mov	fp, r3
    59b2:	0d40      	lsrs	r0, r0, #21
    59b4:	9500      	str	r5, [sp, #0]
    59b6:	d100      	bne.n	59ba <__aeabi_ddiv+0x5a>
    59b8:	e078      	b.n	5aac <__aeabi_ddiv+0x14c>
    59ba:	4b60      	ldr	r3, [pc, #384]	; (5b3c <__aeabi_ddiv+0x1dc>)
    59bc:	4298      	cmp	r0, r3
    59be:	d06c      	beq.n	5a9a <__aeabi_ddiv+0x13a>
    59c0:	465b      	mov	r3, fp
    59c2:	00da      	lsls	r2, r3, #3
    59c4:	0f4b      	lsrs	r3, r1, #29
    59c6:	2180      	movs	r1, #128	; 0x80
    59c8:	0409      	lsls	r1, r1, #16
    59ca:	430b      	orrs	r3, r1
    59cc:	4313      	orrs	r3, r2
    59ce:	469b      	mov	fp, r3
    59d0:	4653      	mov	r3, sl
    59d2:	00d9      	lsls	r1, r3, #3
    59d4:	4b5a      	ldr	r3, [pc, #360]	; (5b40 <__aeabi_ddiv+0x1e0>)
    59d6:	469c      	mov	ip, r3
    59d8:	2300      	movs	r3, #0
    59da:	4460      	add	r0, ip
    59dc:	4642      	mov	r2, r8
    59de:	1a20      	subs	r0, r4, r0
    59e0:	406a      	eors	r2, r5
    59e2:	4692      	mov	sl, r2
    59e4:	9001      	str	r0, [sp, #4]
    59e6:	431f      	orrs	r7, r3
    59e8:	2f0f      	cmp	r7, #15
    59ea:	d900      	bls.n	59ee <__aeabi_ddiv+0x8e>
    59ec:	e0b0      	b.n	5b50 <__aeabi_ddiv+0x1f0>
    59ee:	4855      	ldr	r0, [pc, #340]	; (5b44 <__aeabi_ddiv+0x1e4>)
    59f0:	00bf      	lsls	r7, r7, #2
    59f2:	59c0      	ldr	r0, [r0, r7]
    59f4:	4687      	mov	pc, r0
    59f6:	4337      	orrs	r7, r6
    59f8:	d000      	beq.n	59fc <__aeabi_ddiv+0x9c>
    59fa:	e088      	b.n	5b0e <__aeabi_ddiv+0x1ae>
    59fc:	2300      	movs	r3, #0
    59fe:	4699      	mov	r9, r3
    5a00:	3302      	adds	r3, #2
    5a02:	2708      	movs	r7, #8
    5a04:	2600      	movs	r6, #0
    5a06:	9302      	str	r3, [sp, #8]
    5a08:	e7cd      	b.n	59a6 <__aeabi_ddiv+0x46>
    5a0a:	4643      	mov	r3, r8
    5a0c:	46b3      	mov	fp, r6
    5a0e:	4649      	mov	r1, r9
    5a10:	9300      	str	r3, [sp, #0]
    5a12:	9b02      	ldr	r3, [sp, #8]
    5a14:	9a00      	ldr	r2, [sp, #0]
    5a16:	4692      	mov	sl, r2
    5a18:	2b02      	cmp	r3, #2
    5a1a:	d000      	beq.n	5a1e <__aeabi_ddiv+0xbe>
    5a1c:	e1bf      	b.n	5d9e <__aeabi_ddiv+0x43e>
    5a1e:	2100      	movs	r1, #0
    5a20:	4653      	mov	r3, sl
    5a22:	2201      	movs	r2, #1
    5a24:	2600      	movs	r6, #0
    5a26:	4689      	mov	r9, r1
    5a28:	401a      	ands	r2, r3
    5a2a:	4b44      	ldr	r3, [pc, #272]	; (5b3c <__aeabi_ddiv+0x1dc>)
    5a2c:	2100      	movs	r1, #0
    5a2e:	0336      	lsls	r6, r6, #12
    5a30:	0d0c      	lsrs	r4, r1, #20
    5a32:	0524      	lsls	r4, r4, #20
    5a34:	0b36      	lsrs	r6, r6, #12
    5a36:	4326      	orrs	r6, r4
    5a38:	4c43      	ldr	r4, [pc, #268]	; (5b48 <__aeabi_ddiv+0x1e8>)
    5a3a:	051b      	lsls	r3, r3, #20
    5a3c:	4026      	ands	r6, r4
    5a3e:	431e      	orrs	r6, r3
    5a40:	0076      	lsls	r6, r6, #1
    5a42:	07d2      	lsls	r2, r2, #31
    5a44:	0876      	lsrs	r6, r6, #1
    5a46:	4316      	orrs	r6, r2
    5a48:	4648      	mov	r0, r9
    5a4a:	0031      	movs	r1, r6
    5a4c:	b007      	add	sp, #28
    5a4e:	bc3c      	pop	{r2, r3, r4, r5}
    5a50:	4690      	mov	r8, r2
    5a52:	4699      	mov	r9, r3
    5a54:	46a2      	mov	sl, r4
    5a56:	46ab      	mov	fp, r5
    5a58:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5a5a:	0033      	movs	r3, r6
    5a5c:	4303      	orrs	r3, r0
    5a5e:	d04f      	beq.n	5b00 <__aeabi_ddiv+0x1a0>
    5a60:	2e00      	cmp	r6, #0
    5a62:	d100      	bne.n	5a66 <__aeabi_ddiv+0x106>
    5a64:	e1bc      	b.n	5de0 <__aeabi_ddiv+0x480>
    5a66:	0030      	movs	r0, r6
    5a68:	f001 f8cc 	bl	6c04 <__clzsi2>
    5a6c:	0003      	movs	r3, r0
    5a6e:	3b0b      	subs	r3, #11
    5a70:	2b1c      	cmp	r3, #28
    5a72:	dd00      	ble.n	5a76 <__aeabi_ddiv+0x116>
    5a74:	e1ad      	b.n	5dd2 <__aeabi_ddiv+0x472>
    5a76:	221d      	movs	r2, #29
    5a78:	0001      	movs	r1, r0
    5a7a:	1ad3      	subs	r3, r2, r3
    5a7c:	3908      	subs	r1, #8
    5a7e:	003a      	movs	r2, r7
    5a80:	408f      	lsls	r7, r1
    5a82:	408e      	lsls	r6, r1
    5a84:	40da      	lsrs	r2, r3
    5a86:	46b9      	mov	r9, r7
    5a88:	4316      	orrs	r6, r2
    5a8a:	4b30      	ldr	r3, [pc, #192]	; (5b4c <__aeabi_ddiv+0x1ec>)
    5a8c:	2700      	movs	r7, #0
    5a8e:	469c      	mov	ip, r3
    5a90:	2300      	movs	r3, #0
    5a92:	4460      	add	r0, ip
    5a94:	4244      	negs	r4, r0
    5a96:	9302      	str	r3, [sp, #8]
    5a98:	e785      	b.n	59a6 <__aeabi_ddiv+0x46>
    5a9a:	4653      	mov	r3, sl
    5a9c:	465a      	mov	r2, fp
    5a9e:	4313      	orrs	r3, r2
    5aa0:	d12c      	bne.n	5afc <__aeabi_ddiv+0x19c>
    5aa2:	2300      	movs	r3, #0
    5aa4:	2100      	movs	r1, #0
    5aa6:	469b      	mov	fp, r3
    5aa8:	3302      	adds	r3, #2
    5aaa:	e797      	b.n	59dc <__aeabi_ddiv+0x7c>
    5aac:	430b      	orrs	r3, r1
    5aae:	d020      	beq.n	5af2 <__aeabi_ddiv+0x192>
    5ab0:	465b      	mov	r3, fp
    5ab2:	2b00      	cmp	r3, #0
    5ab4:	d100      	bne.n	5ab8 <__aeabi_ddiv+0x158>
    5ab6:	e19e      	b.n	5df6 <__aeabi_ddiv+0x496>
    5ab8:	4658      	mov	r0, fp
    5aba:	f001 f8a3 	bl	6c04 <__clzsi2>
    5abe:	0003      	movs	r3, r0
    5ac0:	3b0b      	subs	r3, #11
    5ac2:	2b1c      	cmp	r3, #28
    5ac4:	dd00      	ble.n	5ac8 <__aeabi_ddiv+0x168>
    5ac6:	e18f      	b.n	5de8 <__aeabi_ddiv+0x488>
    5ac8:	0002      	movs	r2, r0
    5aca:	4659      	mov	r1, fp
    5acc:	3a08      	subs	r2, #8
    5ace:	4091      	lsls	r1, r2
    5ad0:	468b      	mov	fp, r1
    5ad2:	211d      	movs	r1, #29
    5ad4:	1acb      	subs	r3, r1, r3
    5ad6:	4651      	mov	r1, sl
    5ad8:	40d9      	lsrs	r1, r3
    5ada:	000b      	movs	r3, r1
    5adc:	4659      	mov	r1, fp
    5ade:	430b      	orrs	r3, r1
    5ae0:	4651      	mov	r1, sl
    5ae2:	469b      	mov	fp, r3
    5ae4:	4091      	lsls	r1, r2
    5ae6:	4b19      	ldr	r3, [pc, #100]	; (5b4c <__aeabi_ddiv+0x1ec>)
    5ae8:	469c      	mov	ip, r3
    5aea:	4460      	add	r0, ip
    5aec:	4240      	negs	r0, r0
    5aee:	2300      	movs	r3, #0
    5af0:	e774      	b.n	59dc <__aeabi_ddiv+0x7c>
    5af2:	2300      	movs	r3, #0
    5af4:	2100      	movs	r1, #0
    5af6:	469b      	mov	fp, r3
    5af8:	3301      	adds	r3, #1
    5afa:	e76f      	b.n	59dc <__aeabi_ddiv+0x7c>
    5afc:	2303      	movs	r3, #3
    5afe:	e76d      	b.n	59dc <__aeabi_ddiv+0x7c>
    5b00:	2300      	movs	r3, #0
    5b02:	4699      	mov	r9, r3
    5b04:	3301      	adds	r3, #1
    5b06:	2704      	movs	r7, #4
    5b08:	2600      	movs	r6, #0
    5b0a:	9302      	str	r3, [sp, #8]
    5b0c:	e74b      	b.n	59a6 <__aeabi_ddiv+0x46>
    5b0e:	2303      	movs	r3, #3
    5b10:	270c      	movs	r7, #12
    5b12:	9302      	str	r3, [sp, #8]
    5b14:	e747      	b.n	59a6 <__aeabi_ddiv+0x46>
    5b16:	2201      	movs	r2, #1
    5b18:	1ad5      	subs	r5, r2, r3
    5b1a:	2d38      	cmp	r5, #56	; 0x38
    5b1c:	dc00      	bgt.n	5b20 <__aeabi_ddiv+0x1c0>
    5b1e:	e1b0      	b.n	5e82 <__aeabi_ddiv+0x522>
    5b20:	4653      	mov	r3, sl
    5b22:	401a      	ands	r2, r3
    5b24:	2100      	movs	r1, #0
    5b26:	2300      	movs	r3, #0
    5b28:	2600      	movs	r6, #0
    5b2a:	4689      	mov	r9, r1
    5b2c:	e77e      	b.n	5a2c <__aeabi_ddiv+0xcc>
    5b2e:	2300      	movs	r3, #0
    5b30:	2680      	movs	r6, #128	; 0x80
    5b32:	4699      	mov	r9, r3
    5b34:	2200      	movs	r2, #0
    5b36:	0336      	lsls	r6, r6, #12
    5b38:	4b00      	ldr	r3, [pc, #0]	; (5b3c <__aeabi_ddiv+0x1dc>)
    5b3a:	e777      	b.n	5a2c <__aeabi_ddiv+0xcc>
    5b3c:	000007ff 	.word	0x000007ff
    5b40:	fffffc01 	.word	0xfffffc01
    5b44:	00007ec4 	.word	0x00007ec4
    5b48:	800fffff 	.word	0x800fffff
    5b4c:	000003f3 	.word	0x000003f3
    5b50:	455e      	cmp	r6, fp
    5b52:	d900      	bls.n	5b56 <__aeabi_ddiv+0x1f6>
    5b54:	e172      	b.n	5e3c <__aeabi_ddiv+0x4dc>
    5b56:	d100      	bne.n	5b5a <__aeabi_ddiv+0x1fa>
    5b58:	e16d      	b.n	5e36 <__aeabi_ddiv+0x4d6>
    5b5a:	9b01      	ldr	r3, [sp, #4]
    5b5c:	464d      	mov	r5, r9
    5b5e:	3b01      	subs	r3, #1
    5b60:	9301      	str	r3, [sp, #4]
    5b62:	2300      	movs	r3, #0
    5b64:	0034      	movs	r4, r6
    5b66:	9302      	str	r3, [sp, #8]
    5b68:	465b      	mov	r3, fp
    5b6a:	021e      	lsls	r6, r3, #8
    5b6c:	0e0b      	lsrs	r3, r1, #24
    5b6e:	431e      	orrs	r6, r3
    5b70:	020b      	lsls	r3, r1, #8
    5b72:	9303      	str	r3, [sp, #12]
    5b74:	0c33      	lsrs	r3, r6, #16
    5b76:	4699      	mov	r9, r3
    5b78:	0433      	lsls	r3, r6, #16
    5b7a:	0c1b      	lsrs	r3, r3, #16
    5b7c:	4649      	mov	r1, r9
    5b7e:	0020      	movs	r0, r4
    5b80:	9300      	str	r3, [sp, #0]
    5b82:	f7ff fb09 	bl	5198 <__aeabi_uidiv>
    5b86:	9b00      	ldr	r3, [sp, #0]
    5b88:	0037      	movs	r7, r6
    5b8a:	4343      	muls	r3, r0
    5b8c:	0006      	movs	r6, r0
    5b8e:	4649      	mov	r1, r9
    5b90:	0020      	movs	r0, r4
    5b92:	4698      	mov	r8, r3
    5b94:	f7ff fb86 	bl	52a4 <__aeabi_uidivmod>
    5b98:	0c2c      	lsrs	r4, r5, #16
    5b9a:	0409      	lsls	r1, r1, #16
    5b9c:	430c      	orrs	r4, r1
    5b9e:	45a0      	cmp	r8, r4
    5ba0:	d909      	bls.n	5bb6 <__aeabi_ddiv+0x256>
    5ba2:	19e4      	adds	r4, r4, r7
    5ba4:	1e73      	subs	r3, r6, #1
    5ba6:	42a7      	cmp	r7, r4
    5ba8:	d900      	bls.n	5bac <__aeabi_ddiv+0x24c>
    5baa:	e15c      	b.n	5e66 <__aeabi_ddiv+0x506>
    5bac:	45a0      	cmp	r8, r4
    5bae:	d800      	bhi.n	5bb2 <__aeabi_ddiv+0x252>
    5bb0:	e159      	b.n	5e66 <__aeabi_ddiv+0x506>
    5bb2:	3e02      	subs	r6, #2
    5bb4:	19e4      	adds	r4, r4, r7
    5bb6:	4643      	mov	r3, r8
    5bb8:	1ae4      	subs	r4, r4, r3
    5bba:	4649      	mov	r1, r9
    5bbc:	0020      	movs	r0, r4
    5bbe:	f7ff faeb 	bl	5198 <__aeabi_uidiv>
    5bc2:	0003      	movs	r3, r0
    5bc4:	9a00      	ldr	r2, [sp, #0]
    5bc6:	4680      	mov	r8, r0
    5bc8:	4353      	muls	r3, r2
    5bca:	4649      	mov	r1, r9
    5bcc:	0020      	movs	r0, r4
    5bce:	469b      	mov	fp, r3
    5bd0:	f7ff fb68 	bl	52a4 <__aeabi_uidivmod>
    5bd4:	042a      	lsls	r2, r5, #16
    5bd6:	0409      	lsls	r1, r1, #16
    5bd8:	0c12      	lsrs	r2, r2, #16
    5bda:	430a      	orrs	r2, r1
    5bdc:	4593      	cmp	fp, r2
    5bde:	d90d      	bls.n	5bfc <__aeabi_ddiv+0x29c>
    5be0:	4643      	mov	r3, r8
    5be2:	19d2      	adds	r2, r2, r7
    5be4:	3b01      	subs	r3, #1
    5be6:	4297      	cmp	r7, r2
    5be8:	d900      	bls.n	5bec <__aeabi_ddiv+0x28c>
    5bea:	e13a      	b.n	5e62 <__aeabi_ddiv+0x502>
    5bec:	4593      	cmp	fp, r2
    5bee:	d800      	bhi.n	5bf2 <__aeabi_ddiv+0x292>
    5bf0:	e137      	b.n	5e62 <__aeabi_ddiv+0x502>
    5bf2:	2302      	movs	r3, #2
    5bf4:	425b      	negs	r3, r3
    5bf6:	469c      	mov	ip, r3
    5bf8:	19d2      	adds	r2, r2, r7
    5bfa:	44e0      	add	r8, ip
    5bfc:	465b      	mov	r3, fp
    5bfe:	1ad2      	subs	r2, r2, r3
    5c00:	4643      	mov	r3, r8
    5c02:	0436      	lsls	r6, r6, #16
    5c04:	4333      	orrs	r3, r6
    5c06:	469b      	mov	fp, r3
    5c08:	9903      	ldr	r1, [sp, #12]
    5c0a:	0c18      	lsrs	r0, r3, #16
    5c0c:	0c0b      	lsrs	r3, r1, #16
    5c0e:	001d      	movs	r5, r3
    5c10:	9305      	str	r3, [sp, #20]
    5c12:	0409      	lsls	r1, r1, #16
    5c14:	465b      	mov	r3, fp
    5c16:	0c09      	lsrs	r1, r1, #16
    5c18:	000c      	movs	r4, r1
    5c1a:	041b      	lsls	r3, r3, #16
    5c1c:	0c1b      	lsrs	r3, r3, #16
    5c1e:	4344      	muls	r4, r0
    5c20:	9104      	str	r1, [sp, #16]
    5c22:	4359      	muls	r1, r3
    5c24:	436b      	muls	r3, r5
    5c26:	4368      	muls	r0, r5
    5c28:	191b      	adds	r3, r3, r4
    5c2a:	0c0d      	lsrs	r5, r1, #16
    5c2c:	18eb      	adds	r3, r5, r3
    5c2e:	429c      	cmp	r4, r3
    5c30:	d903      	bls.n	5c3a <__aeabi_ddiv+0x2da>
    5c32:	2480      	movs	r4, #128	; 0x80
    5c34:	0264      	lsls	r4, r4, #9
    5c36:	46a4      	mov	ip, r4
    5c38:	4460      	add	r0, ip
    5c3a:	0c1c      	lsrs	r4, r3, #16
    5c3c:	0409      	lsls	r1, r1, #16
    5c3e:	041b      	lsls	r3, r3, #16
    5c40:	0c09      	lsrs	r1, r1, #16
    5c42:	1820      	adds	r0, r4, r0
    5c44:	185d      	adds	r5, r3, r1
    5c46:	4282      	cmp	r2, r0
    5c48:	d200      	bcs.n	5c4c <__aeabi_ddiv+0x2ec>
    5c4a:	e0de      	b.n	5e0a <__aeabi_ddiv+0x4aa>
    5c4c:	d100      	bne.n	5c50 <__aeabi_ddiv+0x2f0>
    5c4e:	e0d7      	b.n	5e00 <__aeabi_ddiv+0x4a0>
    5c50:	1a16      	subs	r6, r2, r0
    5c52:	9b02      	ldr	r3, [sp, #8]
    5c54:	469c      	mov	ip, r3
    5c56:	1b5d      	subs	r5, r3, r5
    5c58:	45ac      	cmp	ip, r5
    5c5a:	419b      	sbcs	r3, r3
    5c5c:	425b      	negs	r3, r3
    5c5e:	1af6      	subs	r6, r6, r3
    5c60:	42b7      	cmp	r7, r6
    5c62:	d100      	bne.n	5c66 <__aeabi_ddiv+0x306>
    5c64:	e106      	b.n	5e74 <__aeabi_ddiv+0x514>
    5c66:	4649      	mov	r1, r9
    5c68:	0030      	movs	r0, r6
    5c6a:	f7ff fa95 	bl	5198 <__aeabi_uidiv>
    5c6e:	9b00      	ldr	r3, [sp, #0]
    5c70:	0004      	movs	r4, r0
    5c72:	4343      	muls	r3, r0
    5c74:	4649      	mov	r1, r9
    5c76:	0030      	movs	r0, r6
    5c78:	4698      	mov	r8, r3
    5c7a:	f7ff fb13 	bl	52a4 <__aeabi_uidivmod>
    5c7e:	0c2e      	lsrs	r6, r5, #16
    5c80:	0409      	lsls	r1, r1, #16
    5c82:	430e      	orrs	r6, r1
    5c84:	45b0      	cmp	r8, r6
    5c86:	d909      	bls.n	5c9c <__aeabi_ddiv+0x33c>
    5c88:	19f6      	adds	r6, r6, r7
    5c8a:	1e63      	subs	r3, r4, #1
    5c8c:	42b7      	cmp	r7, r6
    5c8e:	d900      	bls.n	5c92 <__aeabi_ddiv+0x332>
    5c90:	e0f3      	b.n	5e7a <__aeabi_ddiv+0x51a>
    5c92:	45b0      	cmp	r8, r6
    5c94:	d800      	bhi.n	5c98 <__aeabi_ddiv+0x338>
    5c96:	e0f0      	b.n	5e7a <__aeabi_ddiv+0x51a>
    5c98:	3c02      	subs	r4, #2
    5c9a:	19f6      	adds	r6, r6, r7
    5c9c:	4643      	mov	r3, r8
    5c9e:	1af3      	subs	r3, r6, r3
    5ca0:	4649      	mov	r1, r9
    5ca2:	0018      	movs	r0, r3
    5ca4:	9302      	str	r3, [sp, #8]
    5ca6:	f7ff fa77 	bl	5198 <__aeabi_uidiv>
    5caa:	9b00      	ldr	r3, [sp, #0]
    5cac:	0006      	movs	r6, r0
    5cae:	4343      	muls	r3, r0
    5cb0:	4649      	mov	r1, r9
    5cb2:	9802      	ldr	r0, [sp, #8]
    5cb4:	4698      	mov	r8, r3
    5cb6:	f7ff faf5 	bl	52a4 <__aeabi_uidivmod>
    5cba:	042d      	lsls	r5, r5, #16
    5cbc:	0409      	lsls	r1, r1, #16
    5cbe:	0c2d      	lsrs	r5, r5, #16
    5cc0:	430d      	orrs	r5, r1
    5cc2:	45a8      	cmp	r8, r5
    5cc4:	d909      	bls.n	5cda <__aeabi_ddiv+0x37a>
    5cc6:	19ed      	adds	r5, r5, r7
    5cc8:	1e73      	subs	r3, r6, #1
    5cca:	42af      	cmp	r7, r5
    5ccc:	d900      	bls.n	5cd0 <__aeabi_ddiv+0x370>
    5cce:	e0d6      	b.n	5e7e <__aeabi_ddiv+0x51e>
    5cd0:	45a8      	cmp	r8, r5
    5cd2:	d800      	bhi.n	5cd6 <__aeabi_ddiv+0x376>
    5cd4:	e0d3      	b.n	5e7e <__aeabi_ddiv+0x51e>
    5cd6:	3e02      	subs	r6, #2
    5cd8:	19ed      	adds	r5, r5, r7
    5cda:	0424      	lsls	r4, r4, #16
    5cdc:	0021      	movs	r1, r4
    5cde:	4643      	mov	r3, r8
    5ce0:	4331      	orrs	r1, r6
    5ce2:	9e04      	ldr	r6, [sp, #16]
    5ce4:	9a05      	ldr	r2, [sp, #20]
    5ce6:	0030      	movs	r0, r6
    5ce8:	1aed      	subs	r5, r5, r3
    5cea:	040b      	lsls	r3, r1, #16
    5cec:	0c0c      	lsrs	r4, r1, #16
    5cee:	0c1b      	lsrs	r3, r3, #16
    5cf0:	4358      	muls	r0, r3
    5cf2:	4366      	muls	r6, r4
    5cf4:	4353      	muls	r3, r2
    5cf6:	4354      	muls	r4, r2
    5cf8:	199a      	adds	r2, r3, r6
    5cfa:	0c03      	lsrs	r3, r0, #16
    5cfc:	189b      	adds	r3, r3, r2
    5cfe:	429e      	cmp	r6, r3
    5d00:	d903      	bls.n	5d0a <__aeabi_ddiv+0x3aa>
    5d02:	2280      	movs	r2, #128	; 0x80
    5d04:	0252      	lsls	r2, r2, #9
    5d06:	4694      	mov	ip, r2
    5d08:	4464      	add	r4, ip
    5d0a:	0c1a      	lsrs	r2, r3, #16
    5d0c:	0400      	lsls	r0, r0, #16
    5d0e:	041b      	lsls	r3, r3, #16
    5d10:	0c00      	lsrs	r0, r0, #16
    5d12:	1914      	adds	r4, r2, r4
    5d14:	181b      	adds	r3, r3, r0
    5d16:	42a5      	cmp	r5, r4
    5d18:	d350      	bcc.n	5dbc <__aeabi_ddiv+0x45c>
    5d1a:	d04d      	beq.n	5db8 <__aeabi_ddiv+0x458>
    5d1c:	2301      	movs	r3, #1
    5d1e:	4319      	orrs	r1, r3
    5d20:	4a96      	ldr	r2, [pc, #600]	; (5f7c <__aeabi_ddiv+0x61c>)
    5d22:	9b01      	ldr	r3, [sp, #4]
    5d24:	4694      	mov	ip, r2
    5d26:	4463      	add	r3, ip
    5d28:	2b00      	cmp	r3, #0
    5d2a:	dc00      	bgt.n	5d2e <__aeabi_ddiv+0x3ce>
    5d2c:	e6f3      	b.n	5b16 <__aeabi_ddiv+0x1b6>
    5d2e:	074a      	lsls	r2, r1, #29
    5d30:	d009      	beq.n	5d46 <__aeabi_ddiv+0x3e6>
    5d32:	220f      	movs	r2, #15
    5d34:	400a      	ands	r2, r1
    5d36:	2a04      	cmp	r2, #4
    5d38:	d005      	beq.n	5d46 <__aeabi_ddiv+0x3e6>
    5d3a:	1d0a      	adds	r2, r1, #4
    5d3c:	428a      	cmp	r2, r1
    5d3e:	4189      	sbcs	r1, r1
    5d40:	4249      	negs	r1, r1
    5d42:	448b      	add	fp, r1
    5d44:	0011      	movs	r1, r2
    5d46:	465a      	mov	r2, fp
    5d48:	01d2      	lsls	r2, r2, #7
    5d4a:	d508      	bpl.n	5d5e <__aeabi_ddiv+0x3fe>
    5d4c:	465a      	mov	r2, fp
    5d4e:	4b8c      	ldr	r3, [pc, #560]	; (5f80 <__aeabi_ddiv+0x620>)
    5d50:	401a      	ands	r2, r3
    5d52:	4693      	mov	fp, r2
    5d54:	2280      	movs	r2, #128	; 0x80
    5d56:	00d2      	lsls	r2, r2, #3
    5d58:	4694      	mov	ip, r2
    5d5a:	9b01      	ldr	r3, [sp, #4]
    5d5c:	4463      	add	r3, ip
    5d5e:	4a89      	ldr	r2, [pc, #548]	; (5f84 <__aeabi_ddiv+0x624>)
    5d60:	4293      	cmp	r3, r2
    5d62:	dd00      	ble.n	5d66 <__aeabi_ddiv+0x406>
    5d64:	e65b      	b.n	5a1e <__aeabi_ddiv+0xbe>
    5d66:	465a      	mov	r2, fp
    5d68:	08c9      	lsrs	r1, r1, #3
    5d6a:	0750      	lsls	r0, r2, #29
    5d6c:	4308      	orrs	r0, r1
    5d6e:	0256      	lsls	r6, r2, #9
    5d70:	4651      	mov	r1, sl
    5d72:	2201      	movs	r2, #1
    5d74:	055b      	lsls	r3, r3, #21
    5d76:	4681      	mov	r9, r0
    5d78:	0b36      	lsrs	r6, r6, #12
    5d7a:	0d5b      	lsrs	r3, r3, #21
    5d7c:	400a      	ands	r2, r1
    5d7e:	e655      	b.n	5a2c <__aeabi_ddiv+0xcc>
    5d80:	2380      	movs	r3, #128	; 0x80
    5d82:	031b      	lsls	r3, r3, #12
    5d84:	421e      	tst	r6, r3
    5d86:	d011      	beq.n	5dac <__aeabi_ddiv+0x44c>
    5d88:	465a      	mov	r2, fp
    5d8a:	421a      	tst	r2, r3
    5d8c:	d10e      	bne.n	5dac <__aeabi_ddiv+0x44c>
    5d8e:	465e      	mov	r6, fp
    5d90:	431e      	orrs	r6, r3
    5d92:	0336      	lsls	r6, r6, #12
    5d94:	0b36      	lsrs	r6, r6, #12
    5d96:	002a      	movs	r2, r5
    5d98:	4689      	mov	r9, r1
    5d9a:	4b7b      	ldr	r3, [pc, #492]	; (5f88 <__aeabi_ddiv+0x628>)
    5d9c:	e646      	b.n	5a2c <__aeabi_ddiv+0xcc>
    5d9e:	2b03      	cmp	r3, #3
    5da0:	d100      	bne.n	5da4 <__aeabi_ddiv+0x444>
    5da2:	e0e1      	b.n	5f68 <__aeabi_ddiv+0x608>
    5da4:	2b01      	cmp	r3, #1
    5da6:	d1bb      	bne.n	5d20 <__aeabi_ddiv+0x3c0>
    5da8:	401a      	ands	r2, r3
    5daa:	e6bb      	b.n	5b24 <__aeabi_ddiv+0x1c4>
    5dac:	431e      	orrs	r6, r3
    5dae:	0336      	lsls	r6, r6, #12
    5db0:	0b36      	lsrs	r6, r6, #12
    5db2:	4642      	mov	r2, r8
    5db4:	4b74      	ldr	r3, [pc, #464]	; (5f88 <__aeabi_ddiv+0x628>)
    5db6:	e639      	b.n	5a2c <__aeabi_ddiv+0xcc>
    5db8:	2b00      	cmp	r3, #0
    5dba:	d0b1      	beq.n	5d20 <__aeabi_ddiv+0x3c0>
    5dbc:	197d      	adds	r5, r7, r5
    5dbe:	1e4a      	subs	r2, r1, #1
    5dc0:	42af      	cmp	r7, r5
    5dc2:	d952      	bls.n	5e6a <__aeabi_ddiv+0x50a>
    5dc4:	0011      	movs	r1, r2
    5dc6:	42a5      	cmp	r5, r4
    5dc8:	d1a8      	bne.n	5d1c <__aeabi_ddiv+0x3bc>
    5dca:	9a03      	ldr	r2, [sp, #12]
    5dcc:	429a      	cmp	r2, r3
    5dce:	d1a5      	bne.n	5d1c <__aeabi_ddiv+0x3bc>
    5dd0:	e7a6      	b.n	5d20 <__aeabi_ddiv+0x3c0>
    5dd2:	0003      	movs	r3, r0
    5dd4:	003e      	movs	r6, r7
    5dd6:	3b28      	subs	r3, #40	; 0x28
    5dd8:	409e      	lsls	r6, r3
    5dda:	2300      	movs	r3, #0
    5ddc:	4699      	mov	r9, r3
    5dde:	e654      	b.n	5a8a <__aeabi_ddiv+0x12a>
    5de0:	f000 ff10 	bl	6c04 <__clzsi2>
    5de4:	3020      	adds	r0, #32
    5de6:	e641      	b.n	5a6c <__aeabi_ddiv+0x10c>
    5de8:	0003      	movs	r3, r0
    5dea:	4652      	mov	r2, sl
    5dec:	3b28      	subs	r3, #40	; 0x28
    5dee:	409a      	lsls	r2, r3
    5df0:	2100      	movs	r1, #0
    5df2:	4693      	mov	fp, r2
    5df4:	e677      	b.n	5ae6 <__aeabi_ddiv+0x186>
    5df6:	4650      	mov	r0, sl
    5df8:	f000 ff04 	bl	6c04 <__clzsi2>
    5dfc:	3020      	adds	r0, #32
    5dfe:	e65e      	b.n	5abe <__aeabi_ddiv+0x15e>
    5e00:	9b02      	ldr	r3, [sp, #8]
    5e02:	2600      	movs	r6, #0
    5e04:	42ab      	cmp	r3, r5
    5e06:	d300      	bcc.n	5e0a <__aeabi_ddiv+0x4aa>
    5e08:	e723      	b.n	5c52 <__aeabi_ddiv+0x2f2>
    5e0a:	9e03      	ldr	r6, [sp, #12]
    5e0c:	9902      	ldr	r1, [sp, #8]
    5e0e:	46b4      	mov	ip, r6
    5e10:	4461      	add	r1, ip
    5e12:	4688      	mov	r8, r1
    5e14:	45b0      	cmp	r8, r6
    5e16:	41b6      	sbcs	r6, r6
    5e18:	465b      	mov	r3, fp
    5e1a:	4276      	negs	r6, r6
    5e1c:	19f6      	adds	r6, r6, r7
    5e1e:	18b2      	adds	r2, r6, r2
    5e20:	3b01      	subs	r3, #1
    5e22:	9102      	str	r1, [sp, #8]
    5e24:	4297      	cmp	r7, r2
    5e26:	d213      	bcs.n	5e50 <__aeabi_ddiv+0x4f0>
    5e28:	4290      	cmp	r0, r2
    5e2a:	d84f      	bhi.n	5ecc <__aeabi_ddiv+0x56c>
    5e2c:	d100      	bne.n	5e30 <__aeabi_ddiv+0x4d0>
    5e2e:	e08e      	b.n	5f4e <__aeabi_ddiv+0x5ee>
    5e30:	1a16      	subs	r6, r2, r0
    5e32:	469b      	mov	fp, r3
    5e34:	e70d      	b.n	5c52 <__aeabi_ddiv+0x2f2>
    5e36:	4589      	cmp	r9, r1
    5e38:	d200      	bcs.n	5e3c <__aeabi_ddiv+0x4dc>
    5e3a:	e68e      	b.n	5b5a <__aeabi_ddiv+0x1fa>
    5e3c:	0874      	lsrs	r4, r6, #1
    5e3e:	464b      	mov	r3, r9
    5e40:	07f6      	lsls	r6, r6, #31
    5e42:	0035      	movs	r5, r6
    5e44:	085b      	lsrs	r3, r3, #1
    5e46:	431d      	orrs	r5, r3
    5e48:	464b      	mov	r3, r9
    5e4a:	07db      	lsls	r3, r3, #31
    5e4c:	9302      	str	r3, [sp, #8]
    5e4e:	e68b      	b.n	5b68 <__aeabi_ddiv+0x208>
    5e50:	4297      	cmp	r7, r2
    5e52:	d1ed      	bne.n	5e30 <__aeabi_ddiv+0x4d0>
    5e54:	9903      	ldr	r1, [sp, #12]
    5e56:	9c02      	ldr	r4, [sp, #8]
    5e58:	42a1      	cmp	r1, r4
    5e5a:	d9e5      	bls.n	5e28 <__aeabi_ddiv+0x4c8>
    5e5c:	1a3e      	subs	r6, r7, r0
    5e5e:	469b      	mov	fp, r3
    5e60:	e6f7      	b.n	5c52 <__aeabi_ddiv+0x2f2>
    5e62:	4698      	mov	r8, r3
    5e64:	e6ca      	b.n	5bfc <__aeabi_ddiv+0x29c>
    5e66:	001e      	movs	r6, r3
    5e68:	e6a5      	b.n	5bb6 <__aeabi_ddiv+0x256>
    5e6a:	42ac      	cmp	r4, r5
    5e6c:	d83e      	bhi.n	5eec <__aeabi_ddiv+0x58c>
    5e6e:	d074      	beq.n	5f5a <__aeabi_ddiv+0x5fa>
    5e70:	0011      	movs	r1, r2
    5e72:	e753      	b.n	5d1c <__aeabi_ddiv+0x3bc>
    5e74:	2101      	movs	r1, #1
    5e76:	4249      	negs	r1, r1
    5e78:	e752      	b.n	5d20 <__aeabi_ddiv+0x3c0>
    5e7a:	001c      	movs	r4, r3
    5e7c:	e70e      	b.n	5c9c <__aeabi_ddiv+0x33c>
    5e7e:	001e      	movs	r6, r3
    5e80:	e72b      	b.n	5cda <__aeabi_ddiv+0x37a>
    5e82:	2d1f      	cmp	r5, #31
    5e84:	dc3c      	bgt.n	5f00 <__aeabi_ddiv+0x5a0>
    5e86:	2320      	movs	r3, #32
    5e88:	000a      	movs	r2, r1
    5e8a:	4658      	mov	r0, fp
    5e8c:	1b5b      	subs	r3, r3, r5
    5e8e:	4098      	lsls	r0, r3
    5e90:	40ea      	lsrs	r2, r5
    5e92:	4099      	lsls	r1, r3
    5e94:	4302      	orrs	r2, r0
    5e96:	1e48      	subs	r0, r1, #1
    5e98:	4181      	sbcs	r1, r0
    5e9a:	465e      	mov	r6, fp
    5e9c:	4311      	orrs	r1, r2
    5e9e:	40ee      	lsrs	r6, r5
    5ea0:	074b      	lsls	r3, r1, #29
    5ea2:	d009      	beq.n	5eb8 <__aeabi_ddiv+0x558>
    5ea4:	230f      	movs	r3, #15
    5ea6:	400b      	ands	r3, r1
    5ea8:	2b04      	cmp	r3, #4
    5eaa:	d005      	beq.n	5eb8 <__aeabi_ddiv+0x558>
    5eac:	000b      	movs	r3, r1
    5eae:	1d19      	adds	r1, r3, #4
    5eb0:	4299      	cmp	r1, r3
    5eb2:	419b      	sbcs	r3, r3
    5eb4:	425b      	negs	r3, r3
    5eb6:	18f6      	adds	r6, r6, r3
    5eb8:	0233      	lsls	r3, r6, #8
    5eba:	d53c      	bpl.n	5f36 <__aeabi_ddiv+0x5d6>
    5ebc:	4653      	mov	r3, sl
    5ebe:	2201      	movs	r2, #1
    5ec0:	2100      	movs	r1, #0
    5ec2:	401a      	ands	r2, r3
    5ec4:	2600      	movs	r6, #0
    5ec6:	2301      	movs	r3, #1
    5ec8:	4689      	mov	r9, r1
    5eca:	e5af      	b.n	5a2c <__aeabi_ddiv+0xcc>
    5ecc:	2302      	movs	r3, #2
    5ece:	425b      	negs	r3, r3
    5ed0:	469c      	mov	ip, r3
    5ed2:	9c03      	ldr	r4, [sp, #12]
    5ed4:	44e3      	add	fp, ip
    5ed6:	46a4      	mov	ip, r4
    5ed8:	9b02      	ldr	r3, [sp, #8]
    5eda:	4463      	add	r3, ip
    5edc:	4698      	mov	r8, r3
    5ede:	45a0      	cmp	r8, r4
    5ee0:	41b6      	sbcs	r6, r6
    5ee2:	4276      	negs	r6, r6
    5ee4:	19f6      	adds	r6, r6, r7
    5ee6:	9302      	str	r3, [sp, #8]
    5ee8:	18b2      	adds	r2, r6, r2
    5eea:	e6b1      	b.n	5c50 <__aeabi_ddiv+0x2f0>
    5eec:	9803      	ldr	r0, [sp, #12]
    5eee:	1e8a      	subs	r2, r1, #2
    5ef0:	0041      	lsls	r1, r0, #1
    5ef2:	4281      	cmp	r1, r0
    5ef4:	41b6      	sbcs	r6, r6
    5ef6:	4276      	negs	r6, r6
    5ef8:	19f6      	adds	r6, r6, r7
    5efa:	19ad      	adds	r5, r5, r6
    5efc:	9103      	str	r1, [sp, #12]
    5efe:	e761      	b.n	5dc4 <__aeabi_ddiv+0x464>
    5f00:	221f      	movs	r2, #31
    5f02:	4252      	negs	r2, r2
    5f04:	1ad3      	subs	r3, r2, r3
    5f06:	465a      	mov	r2, fp
    5f08:	40da      	lsrs	r2, r3
    5f0a:	0013      	movs	r3, r2
    5f0c:	2d20      	cmp	r5, #32
    5f0e:	d029      	beq.n	5f64 <__aeabi_ddiv+0x604>
    5f10:	2240      	movs	r2, #64	; 0x40
    5f12:	4658      	mov	r0, fp
    5f14:	1b55      	subs	r5, r2, r5
    5f16:	40a8      	lsls	r0, r5
    5f18:	4301      	orrs	r1, r0
    5f1a:	1e48      	subs	r0, r1, #1
    5f1c:	4181      	sbcs	r1, r0
    5f1e:	2007      	movs	r0, #7
    5f20:	430b      	orrs	r3, r1
    5f22:	4018      	ands	r0, r3
    5f24:	2600      	movs	r6, #0
    5f26:	2800      	cmp	r0, #0
    5f28:	d009      	beq.n	5f3e <__aeabi_ddiv+0x5de>
    5f2a:	220f      	movs	r2, #15
    5f2c:	2600      	movs	r6, #0
    5f2e:	401a      	ands	r2, r3
    5f30:	0019      	movs	r1, r3
    5f32:	2a04      	cmp	r2, #4
    5f34:	d1bb      	bne.n	5eae <__aeabi_ddiv+0x54e>
    5f36:	000b      	movs	r3, r1
    5f38:	0770      	lsls	r0, r6, #29
    5f3a:	0276      	lsls	r6, r6, #9
    5f3c:	0b36      	lsrs	r6, r6, #12
    5f3e:	08db      	lsrs	r3, r3, #3
    5f40:	4303      	orrs	r3, r0
    5f42:	4699      	mov	r9, r3
    5f44:	2201      	movs	r2, #1
    5f46:	4653      	mov	r3, sl
    5f48:	401a      	ands	r2, r3
    5f4a:	2300      	movs	r3, #0
    5f4c:	e56e      	b.n	5a2c <__aeabi_ddiv+0xcc>
    5f4e:	9902      	ldr	r1, [sp, #8]
    5f50:	428d      	cmp	r5, r1
    5f52:	d8bb      	bhi.n	5ecc <__aeabi_ddiv+0x56c>
    5f54:	469b      	mov	fp, r3
    5f56:	2600      	movs	r6, #0
    5f58:	e67b      	b.n	5c52 <__aeabi_ddiv+0x2f2>
    5f5a:	9803      	ldr	r0, [sp, #12]
    5f5c:	4298      	cmp	r0, r3
    5f5e:	d3c5      	bcc.n	5eec <__aeabi_ddiv+0x58c>
    5f60:	0011      	movs	r1, r2
    5f62:	e732      	b.n	5dca <__aeabi_ddiv+0x46a>
    5f64:	2000      	movs	r0, #0
    5f66:	e7d7      	b.n	5f18 <__aeabi_ddiv+0x5b8>
    5f68:	2680      	movs	r6, #128	; 0x80
    5f6a:	465b      	mov	r3, fp
    5f6c:	0336      	lsls	r6, r6, #12
    5f6e:	431e      	orrs	r6, r3
    5f70:	0336      	lsls	r6, r6, #12
    5f72:	0b36      	lsrs	r6, r6, #12
    5f74:	9a00      	ldr	r2, [sp, #0]
    5f76:	4689      	mov	r9, r1
    5f78:	4b03      	ldr	r3, [pc, #12]	; (5f88 <__aeabi_ddiv+0x628>)
    5f7a:	e557      	b.n	5a2c <__aeabi_ddiv+0xcc>
    5f7c:	000003ff 	.word	0x000003ff
    5f80:	feffffff 	.word	0xfeffffff
    5f84:	000007fe 	.word	0x000007fe
    5f88:	000007ff 	.word	0x000007ff

00005f8c <__aeabi_dmul>:
    5f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    5f8e:	465f      	mov	r7, fp
    5f90:	4656      	mov	r6, sl
    5f92:	464d      	mov	r5, r9
    5f94:	4644      	mov	r4, r8
    5f96:	b4f0      	push	{r4, r5, r6, r7}
    5f98:	030d      	lsls	r5, r1, #12
    5f9a:	4699      	mov	r9, r3
    5f9c:	004e      	lsls	r6, r1, #1
    5f9e:	0b2b      	lsrs	r3, r5, #12
    5fa0:	b087      	sub	sp, #28
    5fa2:	0007      	movs	r7, r0
    5fa4:	4692      	mov	sl, r2
    5fa6:	4680      	mov	r8, r0
    5fa8:	469b      	mov	fp, r3
    5faa:	0d76      	lsrs	r6, r6, #21
    5fac:	0fcc      	lsrs	r4, r1, #31
    5fae:	2e00      	cmp	r6, #0
    5fb0:	d069      	beq.n	6086 <__aeabi_dmul+0xfa>
    5fb2:	4b6d      	ldr	r3, [pc, #436]	; (6168 <__aeabi_dmul+0x1dc>)
    5fb4:	429e      	cmp	r6, r3
    5fb6:	d035      	beq.n	6024 <__aeabi_dmul+0x98>
    5fb8:	465b      	mov	r3, fp
    5fba:	2280      	movs	r2, #128	; 0x80
    5fbc:	00dd      	lsls	r5, r3, #3
    5fbe:	0412      	lsls	r2, r2, #16
    5fc0:	0f43      	lsrs	r3, r0, #29
    5fc2:	4313      	orrs	r3, r2
    5fc4:	432b      	orrs	r3, r5
    5fc6:	469b      	mov	fp, r3
    5fc8:	00c3      	lsls	r3, r0, #3
    5fca:	4698      	mov	r8, r3
    5fcc:	4b67      	ldr	r3, [pc, #412]	; (616c <__aeabi_dmul+0x1e0>)
    5fce:	2700      	movs	r7, #0
    5fd0:	469c      	mov	ip, r3
    5fd2:	2300      	movs	r3, #0
    5fd4:	4466      	add	r6, ip
    5fd6:	9301      	str	r3, [sp, #4]
    5fd8:	464a      	mov	r2, r9
    5fda:	0315      	lsls	r5, r2, #12
    5fdc:	0050      	lsls	r0, r2, #1
    5fde:	0fd2      	lsrs	r2, r2, #31
    5fe0:	4653      	mov	r3, sl
    5fe2:	0b2d      	lsrs	r5, r5, #12
    5fe4:	0d40      	lsrs	r0, r0, #21
    5fe6:	4691      	mov	r9, r2
    5fe8:	d100      	bne.n	5fec <__aeabi_dmul+0x60>
    5fea:	e076      	b.n	60da <__aeabi_dmul+0x14e>
    5fec:	4a5e      	ldr	r2, [pc, #376]	; (6168 <__aeabi_dmul+0x1dc>)
    5fee:	4290      	cmp	r0, r2
    5ff0:	d06c      	beq.n	60cc <__aeabi_dmul+0x140>
    5ff2:	2280      	movs	r2, #128	; 0x80
    5ff4:	0f5b      	lsrs	r3, r3, #29
    5ff6:	0412      	lsls	r2, r2, #16
    5ff8:	4313      	orrs	r3, r2
    5ffa:	4a5c      	ldr	r2, [pc, #368]	; (616c <__aeabi_dmul+0x1e0>)
    5ffc:	00ed      	lsls	r5, r5, #3
    5ffe:	4694      	mov	ip, r2
    6000:	431d      	orrs	r5, r3
    6002:	4653      	mov	r3, sl
    6004:	2200      	movs	r2, #0
    6006:	00db      	lsls	r3, r3, #3
    6008:	4460      	add	r0, ip
    600a:	4649      	mov	r1, r9
    600c:	1836      	adds	r6, r6, r0
    600e:	1c70      	adds	r0, r6, #1
    6010:	4061      	eors	r1, r4
    6012:	9002      	str	r0, [sp, #8]
    6014:	4317      	orrs	r7, r2
    6016:	2f0f      	cmp	r7, #15
    6018:	d900      	bls.n	601c <__aeabi_dmul+0x90>
    601a:	e0af      	b.n	617c <__aeabi_dmul+0x1f0>
    601c:	4854      	ldr	r0, [pc, #336]	; (6170 <__aeabi_dmul+0x1e4>)
    601e:	00bf      	lsls	r7, r7, #2
    6020:	59c7      	ldr	r7, [r0, r7]
    6022:	46bf      	mov	pc, r7
    6024:	465b      	mov	r3, fp
    6026:	431f      	orrs	r7, r3
    6028:	d000      	beq.n	602c <__aeabi_dmul+0xa0>
    602a:	e088      	b.n	613e <__aeabi_dmul+0x1b2>
    602c:	2300      	movs	r3, #0
    602e:	469b      	mov	fp, r3
    6030:	4698      	mov	r8, r3
    6032:	3302      	adds	r3, #2
    6034:	2708      	movs	r7, #8
    6036:	9301      	str	r3, [sp, #4]
    6038:	e7ce      	b.n	5fd8 <__aeabi_dmul+0x4c>
    603a:	4649      	mov	r1, r9
    603c:	2a02      	cmp	r2, #2
    603e:	d06a      	beq.n	6116 <__aeabi_dmul+0x18a>
    6040:	2a03      	cmp	r2, #3
    6042:	d100      	bne.n	6046 <__aeabi_dmul+0xba>
    6044:	e209      	b.n	645a <__aeabi_dmul+0x4ce>
    6046:	2a01      	cmp	r2, #1
    6048:	d000      	beq.n	604c <__aeabi_dmul+0xc0>
    604a:	e1bb      	b.n	63c4 <__aeabi_dmul+0x438>
    604c:	4011      	ands	r1, r2
    604e:	2200      	movs	r2, #0
    6050:	2300      	movs	r3, #0
    6052:	2500      	movs	r5, #0
    6054:	4690      	mov	r8, r2
    6056:	b2cc      	uxtb	r4, r1
    6058:	2100      	movs	r1, #0
    605a:	032d      	lsls	r5, r5, #12
    605c:	0d0a      	lsrs	r2, r1, #20
    605e:	0512      	lsls	r2, r2, #20
    6060:	0b2d      	lsrs	r5, r5, #12
    6062:	4315      	orrs	r5, r2
    6064:	4a43      	ldr	r2, [pc, #268]	; (6174 <__aeabi_dmul+0x1e8>)
    6066:	051b      	lsls	r3, r3, #20
    6068:	4015      	ands	r5, r2
    606a:	431d      	orrs	r5, r3
    606c:	006d      	lsls	r5, r5, #1
    606e:	07e4      	lsls	r4, r4, #31
    6070:	086d      	lsrs	r5, r5, #1
    6072:	4325      	orrs	r5, r4
    6074:	4640      	mov	r0, r8
    6076:	0029      	movs	r1, r5
    6078:	b007      	add	sp, #28
    607a:	bc3c      	pop	{r2, r3, r4, r5}
    607c:	4690      	mov	r8, r2
    607e:	4699      	mov	r9, r3
    6080:	46a2      	mov	sl, r4
    6082:	46ab      	mov	fp, r5
    6084:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6086:	4303      	orrs	r3, r0
    6088:	d052      	beq.n	6130 <__aeabi_dmul+0x1a4>
    608a:	465b      	mov	r3, fp
    608c:	2b00      	cmp	r3, #0
    608e:	d100      	bne.n	6092 <__aeabi_dmul+0x106>
    6090:	e18a      	b.n	63a8 <__aeabi_dmul+0x41c>
    6092:	4658      	mov	r0, fp
    6094:	f000 fdb6 	bl	6c04 <__clzsi2>
    6098:	0003      	movs	r3, r0
    609a:	3b0b      	subs	r3, #11
    609c:	2b1c      	cmp	r3, #28
    609e:	dd00      	ble.n	60a2 <__aeabi_dmul+0x116>
    60a0:	e17b      	b.n	639a <__aeabi_dmul+0x40e>
    60a2:	221d      	movs	r2, #29
    60a4:	1ad3      	subs	r3, r2, r3
    60a6:	003a      	movs	r2, r7
    60a8:	0001      	movs	r1, r0
    60aa:	465d      	mov	r5, fp
    60ac:	40da      	lsrs	r2, r3
    60ae:	3908      	subs	r1, #8
    60b0:	408d      	lsls	r5, r1
    60b2:	0013      	movs	r3, r2
    60b4:	408f      	lsls	r7, r1
    60b6:	432b      	orrs	r3, r5
    60b8:	469b      	mov	fp, r3
    60ba:	46b8      	mov	r8, r7
    60bc:	4b2e      	ldr	r3, [pc, #184]	; (6178 <__aeabi_dmul+0x1ec>)
    60be:	2700      	movs	r7, #0
    60c0:	469c      	mov	ip, r3
    60c2:	2300      	movs	r3, #0
    60c4:	4460      	add	r0, ip
    60c6:	4246      	negs	r6, r0
    60c8:	9301      	str	r3, [sp, #4]
    60ca:	e785      	b.n	5fd8 <__aeabi_dmul+0x4c>
    60cc:	4652      	mov	r2, sl
    60ce:	432a      	orrs	r2, r5
    60d0:	d12c      	bne.n	612c <__aeabi_dmul+0x1a0>
    60d2:	2500      	movs	r5, #0
    60d4:	2300      	movs	r3, #0
    60d6:	2202      	movs	r2, #2
    60d8:	e797      	b.n	600a <__aeabi_dmul+0x7e>
    60da:	4652      	mov	r2, sl
    60dc:	432a      	orrs	r2, r5
    60de:	d021      	beq.n	6124 <__aeabi_dmul+0x198>
    60e0:	2d00      	cmp	r5, #0
    60e2:	d100      	bne.n	60e6 <__aeabi_dmul+0x15a>
    60e4:	e154      	b.n	6390 <__aeabi_dmul+0x404>
    60e6:	0028      	movs	r0, r5
    60e8:	f000 fd8c 	bl	6c04 <__clzsi2>
    60ec:	0003      	movs	r3, r0
    60ee:	3b0b      	subs	r3, #11
    60f0:	2b1c      	cmp	r3, #28
    60f2:	dd00      	ble.n	60f6 <__aeabi_dmul+0x16a>
    60f4:	e146      	b.n	6384 <__aeabi_dmul+0x3f8>
    60f6:	211d      	movs	r1, #29
    60f8:	1acb      	subs	r3, r1, r3
    60fa:	4651      	mov	r1, sl
    60fc:	0002      	movs	r2, r0
    60fe:	40d9      	lsrs	r1, r3
    6100:	4653      	mov	r3, sl
    6102:	3a08      	subs	r2, #8
    6104:	4095      	lsls	r5, r2
    6106:	4093      	lsls	r3, r2
    6108:	430d      	orrs	r5, r1
    610a:	4a1b      	ldr	r2, [pc, #108]	; (6178 <__aeabi_dmul+0x1ec>)
    610c:	4694      	mov	ip, r2
    610e:	4460      	add	r0, ip
    6110:	4240      	negs	r0, r0
    6112:	2200      	movs	r2, #0
    6114:	e779      	b.n	600a <__aeabi_dmul+0x7e>
    6116:	2401      	movs	r4, #1
    6118:	2200      	movs	r2, #0
    611a:	400c      	ands	r4, r1
    611c:	4b12      	ldr	r3, [pc, #72]	; (6168 <__aeabi_dmul+0x1dc>)
    611e:	2500      	movs	r5, #0
    6120:	4690      	mov	r8, r2
    6122:	e799      	b.n	6058 <__aeabi_dmul+0xcc>
    6124:	2500      	movs	r5, #0
    6126:	2300      	movs	r3, #0
    6128:	2201      	movs	r2, #1
    612a:	e76e      	b.n	600a <__aeabi_dmul+0x7e>
    612c:	2203      	movs	r2, #3
    612e:	e76c      	b.n	600a <__aeabi_dmul+0x7e>
    6130:	2300      	movs	r3, #0
    6132:	469b      	mov	fp, r3
    6134:	4698      	mov	r8, r3
    6136:	3301      	adds	r3, #1
    6138:	2704      	movs	r7, #4
    613a:	9301      	str	r3, [sp, #4]
    613c:	e74c      	b.n	5fd8 <__aeabi_dmul+0x4c>
    613e:	2303      	movs	r3, #3
    6140:	270c      	movs	r7, #12
    6142:	9301      	str	r3, [sp, #4]
    6144:	e748      	b.n	5fd8 <__aeabi_dmul+0x4c>
    6146:	2300      	movs	r3, #0
    6148:	2580      	movs	r5, #128	; 0x80
    614a:	4698      	mov	r8, r3
    614c:	2400      	movs	r4, #0
    614e:	032d      	lsls	r5, r5, #12
    6150:	4b05      	ldr	r3, [pc, #20]	; (6168 <__aeabi_dmul+0x1dc>)
    6152:	e781      	b.n	6058 <__aeabi_dmul+0xcc>
    6154:	465d      	mov	r5, fp
    6156:	4643      	mov	r3, r8
    6158:	9a01      	ldr	r2, [sp, #4]
    615a:	e76f      	b.n	603c <__aeabi_dmul+0xb0>
    615c:	465d      	mov	r5, fp
    615e:	4643      	mov	r3, r8
    6160:	0021      	movs	r1, r4
    6162:	9a01      	ldr	r2, [sp, #4]
    6164:	e76a      	b.n	603c <__aeabi_dmul+0xb0>
    6166:	46c0      	nop			; (mov r8, r8)
    6168:	000007ff 	.word	0x000007ff
    616c:	fffffc01 	.word	0xfffffc01
    6170:	00007f04 	.word	0x00007f04
    6174:	800fffff 	.word	0x800fffff
    6178:	000003f3 	.word	0x000003f3
    617c:	4642      	mov	r2, r8
    617e:	0c12      	lsrs	r2, r2, #16
    6180:	4691      	mov	r9, r2
    6182:	0c1a      	lsrs	r2, r3, #16
    6184:	4694      	mov	ip, r2
    6186:	4642      	mov	r2, r8
    6188:	0417      	lsls	r7, r2, #16
    618a:	464a      	mov	r2, r9
    618c:	041b      	lsls	r3, r3, #16
    618e:	0c1b      	lsrs	r3, r3, #16
    6190:	435a      	muls	r2, r3
    6192:	4660      	mov	r0, ip
    6194:	4690      	mov	r8, r2
    6196:	464a      	mov	r2, r9
    6198:	4342      	muls	r2, r0
    619a:	0010      	movs	r0, r2
    619c:	9203      	str	r2, [sp, #12]
    619e:	4662      	mov	r2, ip
    61a0:	001c      	movs	r4, r3
    61a2:	0c3f      	lsrs	r7, r7, #16
    61a4:	437a      	muls	r2, r7
    61a6:	437c      	muls	r4, r7
    61a8:	4442      	add	r2, r8
    61aa:	9201      	str	r2, [sp, #4]
    61ac:	0c22      	lsrs	r2, r4, #16
    61ae:	4692      	mov	sl, r2
    61b0:	9a01      	ldr	r2, [sp, #4]
    61b2:	4452      	add	r2, sl
    61b4:	4590      	cmp	r8, r2
    61b6:	d906      	bls.n	61c6 <__aeabi_dmul+0x23a>
    61b8:	4682      	mov	sl, r0
    61ba:	2080      	movs	r0, #128	; 0x80
    61bc:	0240      	lsls	r0, r0, #9
    61be:	4680      	mov	r8, r0
    61c0:	44c2      	add	sl, r8
    61c2:	4650      	mov	r0, sl
    61c4:	9003      	str	r0, [sp, #12]
    61c6:	0c10      	lsrs	r0, r2, #16
    61c8:	9004      	str	r0, [sp, #16]
    61ca:	4648      	mov	r0, r9
    61cc:	0424      	lsls	r4, r4, #16
    61ce:	0c24      	lsrs	r4, r4, #16
    61d0:	0412      	lsls	r2, r2, #16
    61d2:	1912      	adds	r2, r2, r4
    61d4:	9205      	str	r2, [sp, #20]
    61d6:	0c2a      	lsrs	r2, r5, #16
    61d8:	042d      	lsls	r5, r5, #16
    61da:	0c2d      	lsrs	r5, r5, #16
    61dc:	4368      	muls	r0, r5
    61de:	002c      	movs	r4, r5
    61e0:	4682      	mov	sl, r0
    61e2:	4648      	mov	r0, r9
    61e4:	437c      	muls	r4, r7
    61e6:	4350      	muls	r0, r2
    61e8:	4681      	mov	r9, r0
    61ea:	0c20      	lsrs	r0, r4, #16
    61ec:	4680      	mov	r8, r0
    61ee:	4357      	muls	r7, r2
    61f0:	4457      	add	r7, sl
    61f2:	4447      	add	r7, r8
    61f4:	45ba      	cmp	sl, r7
    61f6:	d903      	bls.n	6200 <__aeabi_dmul+0x274>
    61f8:	2080      	movs	r0, #128	; 0x80
    61fa:	0240      	lsls	r0, r0, #9
    61fc:	4680      	mov	r8, r0
    61fe:	44c1      	add	r9, r8
    6200:	0c38      	lsrs	r0, r7, #16
    6202:	043f      	lsls	r7, r7, #16
    6204:	46b8      	mov	r8, r7
    6206:	4448      	add	r0, r9
    6208:	0424      	lsls	r4, r4, #16
    620a:	0c24      	lsrs	r4, r4, #16
    620c:	9001      	str	r0, [sp, #4]
    620e:	9804      	ldr	r0, [sp, #16]
    6210:	44a0      	add	r8, r4
    6212:	4440      	add	r0, r8
    6214:	9004      	str	r0, [sp, #16]
    6216:	4658      	mov	r0, fp
    6218:	0c00      	lsrs	r0, r0, #16
    621a:	4681      	mov	r9, r0
    621c:	4658      	mov	r0, fp
    621e:	0404      	lsls	r4, r0, #16
    6220:	0c20      	lsrs	r0, r4, #16
    6222:	4682      	mov	sl, r0
    6224:	0007      	movs	r7, r0
    6226:	4648      	mov	r0, r9
    6228:	435f      	muls	r7, r3
    622a:	464c      	mov	r4, r9
    622c:	4343      	muls	r3, r0
    622e:	4660      	mov	r0, ip
    6230:	4360      	muls	r0, r4
    6232:	4664      	mov	r4, ip
    6234:	4683      	mov	fp, r0
    6236:	4650      	mov	r0, sl
    6238:	4344      	muls	r4, r0
    623a:	0c38      	lsrs	r0, r7, #16
    623c:	4684      	mov	ip, r0
    623e:	18e4      	adds	r4, r4, r3
    6240:	4464      	add	r4, ip
    6242:	42a3      	cmp	r3, r4
    6244:	d903      	bls.n	624e <__aeabi_dmul+0x2c2>
    6246:	2380      	movs	r3, #128	; 0x80
    6248:	025b      	lsls	r3, r3, #9
    624a:	469c      	mov	ip, r3
    624c:	44e3      	add	fp, ip
    624e:	4648      	mov	r0, r9
    6250:	043f      	lsls	r7, r7, #16
    6252:	0c23      	lsrs	r3, r4, #16
    6254:	0c3f      	lsrs	r7, r7, #16
    6256:	0424      	lsls	r4, r4, #16
    6258:	19e4      	adds	r4, r4, r7
    625a:	4657      	mov	r7, sl
    625c:	4368      	muls	r0, r5
    625e:	436f      	muls	r7, r5
    6260:	4684      	mov	ip, r0
    6262:	464d      	mov	r5, r9
    6264:	4650      	mov	r0, sl
    6266:	4355      	muls	r5, r2
    6268:	4342      	muls	r2, r0
    626a:	0c38      	lsrs	r0, r7, #16
    626c:	4681      	mov	r9, r0
    626e:	4462      	add	r2, ip
    6270:	444a      	add	r2, r9
    6272:	445b      	add	r3, fp
    6274:	4594      	cmp	ip, r2
    6276:	d903      	bls.n	6280 <__aeabi_dmul+0x2f4>
    6278:	2080      	movs	r0, #128	; 0x80
    627a:	0240      	lsls	r0, r0, #9
    627c:	4684      	mov	ip, r0
    627e:	4465      	add	r5, ip
    6280:	9803      	ldr	r0, [sp, #12]
    6282:	043f      	lsls	r7, r7, #16
    6284:	4683      	mov	fp, r0
    6286:	9804      	ldr	r0, [sp, #16]
    6288:	0c3f      	lsrs	r7, r7, #16
    628a:	4684      	mov	ip, r0
    628c:	44e3      	add	fp, ip
    628e:	45c3      	cmp	fp, r8
    6290:	4180      	sbcs	r0, r0
    6292:	4240      	negs	r0, r0
    6294:	4682      	mov	sl, r0
    6296:	0410      	lsls	r0, r2, #16
    6298:	4684      	mov	ip, r0
    629a:	9801      	ldr	r0, [sp, #4]
    629c:	4467      	add	r7, ip
    629e:	4684      	mov	ip, r0
    62a0:	4467      	add	r7, ip
    62a2:	44a3      	add	fp, r4
    62a4:	46bc      	mov	ip, r7
    62a6:	45a3      	cmp	fp, r4
    62a8:	41a4      	sbcs	r4, r4
    62aa:	4699      	mov	r9, r3
    62ac:	44d4      	add	ip, sl
    62ae:	4264      	negs	r4, r4
    62b0:	4287      	cmp	r7, r0
    62b2:	41bf      	sbcs	r7, r7
    62b4:	45d4      	cmp	ip, sl
    62b6:	4180      	sbcs	r0, r0
    62b8:	44e1      	add	r9, ip
    62ba:	46a0      	mov	r8, r4
    62bc:	4599      	cmp	r9, r3
    62be:	419b      	sbcs	r3, r3
    62c0:	427f      	negs	r7, r7
    62c2:	4240      	negs	r0, r0
    62c4:	44c8      	add	r8, r9
    62c6:	4307      	orrs	r7, r0
    62c8:	0c12      	lsrs	r2, r2, #16
    62ca:	18ba      	adds	r2, r7, r2
    62cc:	45a0      	cmp	r8, r4
    62ce:	41a4      	sbcs	r4, r4
    62d0:	425f      	negs	r7, r3
    62d2:	003b      	movs	r3, r7
    62d4:	4264      	negs	r4, r4
    62d6:	4323      	orrs	r3, r4
    62d8:	18d7      	adds	r7, r2, r3
    62da:	4643      	mov	r3, r8
    62dc:	197d      	adds	r5, r7, r5
    62de:	0ddb      	lsrs	r3, r3, #23
    62e0:	026d      	lsls	r5, r5, #9
    62e2:	431d      	orrs	r5, r3
    62e4:	465b      	mov	r3, fp
    62e6:	025a      	lsls	r2, r3, #9
    62e8:	9b05      	ldr	r3, [sp, #20]
    62ea:	431a      	orrs	r2, r3
    62ec:	1e53      	subs	r3, r2, #1
    62ee:	419a      	sbcs	r2, r3
    62f0:	465b      	mov	r3, fp
    62f2:	0ddb      	lsrs	r3, r3, #23
    62f4:	431a      	orrs	r2, r3
    62f6:	4643      	mov	r3, r8
    62f8:	025b      	lsls	r3, r3, #9
    62fa:	4313      	orrs	r3, r2
    62fc:	01ea      	lsls	r2, r5, #7
    62fe:	d507      	bpl.n	6310 <__aeabi_dmul+0x384>
    6300:	2201      	movs	r2, #1
    6302:	085c      	lsrs	r4, r3, #1
    6304:	4013      	ands	r3, r2
    6306:	4323      	orrs	r3, r4
    6308:	07ea      	lsls	r2, r5, #31
    630a:	9e02      	ldr	r6, [sp, #8]
    630c:	4313      	orrs	r3, r2
    630e:	086d      	lsrs	r5, r5, #1
    6310:	4a57      	ldr	r2, [pc, #348]	; (6470 <__aeabi_dmul+0x4e4>)
    6312:	18b2      	adds	r2, r6, r2
    6314:	2a00      	cmp	r2, #0
    6316:	dd4b      	ble.n	63b0 <__aeabi_dmul+0x424>
    6318:	0758      	lsls	r0, r3, #29
    631a:	d009      	beq.n	6330 <__aeabi_dmul+0x3a4>
    631c:	200f      	movs	r0, #15
    631e:	4018      	ands	r0, r3
    6320:	2804      	cmp	r0, #4
    6322:	d005      	beq.n	6330 <__aeabi_dmul+0x3a4>
    6324:	1d18      	adds	r0, r3, #4
    6326:	4298      	cmp	r0, r3
    6328:	419b      	sbcs	r3, r3
    632a:	425b      	negs	r3, r3
    632c:	18ed      	adds	r5, r5, r3
    632e:	0003      	movs	r3, r0
    6330:	01e8      	lsls	r0, r5, #7
    6332:	d504      	bpl.n	633e <__aeabi_dmul+0x3b2>
    6334:	4a4f      	ldr	r2, [pc, #316]	; (6474 <__aeabi_dmul+0x4e8>)
    6336:	4015      	ands	r5, r2
    6338:	2280      	movs	r2, #128	; 0x80
    633a:	00d2      	lsls	r2, r2, #3
    633c:	18b2      	adds	r2, r6, r2
    633e:	484e      	ldr	r0, [pc, #312]	; (6478 <__aeabi_dmul+0x4ec>)
    6340:	4282      	cmp	r2, r0
    6342:	dd00      	ble.n	6346 <__aeabi_dmul+0x3ba>
    6344:	e6e7      	b.n	6116 <__aeabi_dmul+0x18a>
    6346:	2401      	movs	r4, #1
    6348:	08db      	lsrs	r3, r3, #3
    634a:	0768      	lsls	r0, r5, #29
    634c:	4318      	orrs	r0, r3
    634e:	026d      	lsls	r5, r5, #9
    6350:	0553      	lsls	r3, r2, #21
    6352:	4680      	mov	r8, r0
    6354:	0b2d      	lsrs	r5, r5, #12
    6356:	0d5b      	lsrs	r3, r3, #21
    6358:	400c      	ands	r4, r1
    635a:	e67d      	b.n	6058 <__aeabi_dmul+0xcc>
    635c:	2280      	movs	r2, #128	; 0x80
    635e:	4659      	mov	r1, fp
    6360:	0312      	lsls	r2, r2, #12
    6362:	4211      	tst	r1, r2
    6364:	d008      	beq.n	6378 <__aeabi_dmul+0x3ec>
    6366:	4215      	tst	r5, r2
    6368:	d106      	bne.n	6378 <__aeabi_dmul+0x3ec>
    636a:	4315      	orrs	r5, r2
    636c:	032d      	lsls	r5, r5, #12
    636e:	4698      	mov	r8, r3
    6370:	0b2d      	lsrs	r5, r5, #12
    6372:	464c      	mov	r4, r9
    6374:	4b41      	ldr	r3, [pc, #260]	; (647c <__aeabi_dmul+0x4f0>)
    6376:	e66f      	b.n	6058 <__aeabi_dmul+0xcc>
    6378:	465d      	mov	r5, fp
    637a:	4315      	orrs	r5, r2
    637c:	032d      	lsls	r5, r5, #12
    637e:	0b2d      	lsrs	r5, r5, #12
    6380:	4b3e      	ldr	r3, [pc, #248]	; (647c <__aeabi_dmul+0x4f0>)
    6382:	e669      	b.n	6058 <__aeabi_dmul+0xcc>
    6384:	0003      	movs	r3, r0
    6386:	4655      	mov	r5, sl
    6388:	3b28      	subs	r3, #40	; 0x28
    638a:	409d      	lsls	r5, r3
    638c:	2300      	movs	r3, #0
    638e:	e6bc      	b.n	610a <__aeabi_dmul+0x17e>
    6390:	4650      	mov	r0, sl
    6392:	f000 fc37 	bl	6c04 <__clzsi2>
    6396:	3020      	adds	r0, #32
    6398:	e6a8      	b.n	60ec <__aeabi_dmul+0x160>
    639a:	0003      	movs	r3, r0
    639c:	3b28      	subs	r3, #40	; 0x28
    639e:	409f      	lsls	r7, r3
    63a0:	2300      	movs	r3, #0
    63a2:	46bb      	mov	fp, r7
    63a4:	4698      	mov	r8, r3
    63a6:	e689      	b.n	60bc <__aeabi_dmul+0x130>
    63a8:	f000 fc2c 	bl	6c04 <__clzsi2>
    63ac:	3020      	adds	r0, #32
    63ae:	e673      	b.n	6098 <__aeabi_dmul+0x10c>
    63b0:	2401      	movs	r4, #1
    63b2:	1aa6      	subs	r6, r4, r2
    63b4:	2e38      	cmp	r6, #56	; 0x38
    63b6:	dd07      	ble.n	63c8 <__aeabi_dmul+0x43c>
    63b8:	2200      	movs	r2, #0
    63ba:	400c      	ands	r4, r1
    63bc:	2300      	movs	r3, #0
    63be:	2500      	movs	r5, #0
    63c0:	4690      	mov	r8, r2
    63c2:	e649      	b.n	6058 <__aeabi_dmul+0xcc>
    63c4:	9e02      	ldr	r6, [sp, #8]
    63c6:	e7a3      	b.n	6310 <__aeabi_dmul+0x384>
    63c8:	2e1f      	cmp	r6, #31
    63ca:	dc20      	bgt.n	640e <__aeabi_dmul+0x482>
    63cc:	2220      	movs	r2, #32
    63ce:	002c      	movs	r4, r5
    63d0:	0018      	movs	r0, r3
    63d2:	1b92      	subs	r2, r2, r6
    63d4:	40f0      	lsrs	r0, r6
    63d6:	4094      	lsls	r4, r2
    63d8:	4093      	lsls	r3, r2
    63da:	4304      	orrs	r4, r0
    63dc:	1e58      	subs	r0, r3, #1
    63de:	4183      	sbcs	r3, r0
    63e0:	431c      	orrs	r4, r3
    63e2:	40f5      	lsrs	r5, r6
    63e4:	0763      	lsls	r3, r4, #29
    63e6:	d009      	beq.n	63fc <__aeabi_dmul+0x470>
    63e8:	230f      	movs	r3, #15
    63ea:	4023      	ands	r3, r4
    63ec:	2b04      	cmp	r3, #4
    63ee:	d005      	beq.n	63fc <__aeabi_dmul+0x470>
    63f0:	0023      	movs	r3, r4
    63f2:	1d1c      	adds	r4, r3, #4
    63f4:	429c      	cmp	r4, r3
    63f6:	4192      	sbcs	r2, r2
    63f8:	4252      	negs	r2, r2
    63fa:	18ad      	adds	r5, r5, r2
    63fc:	022b      	lsls	r3, r5, #8
    63fe:	d51f      	bpl.n	6440 <__aeabi_dmul+0x4b4>
    6400:	2401      	movs	r4, #1
    6402:	2200      	movs	r2, #0
    6404:	400c      	ands	r4, r1
    6406:	2301      	movs	r3, #1
    6408:	2500      	movs	r5, #0
    640a:	4690      	mov	r8, r2
    640c:	e624      	b.n	6058 <__aeabi_dmul+0xcc>
    640e:	201f      	movs	r0, #31
    6410:	002c      	movs	r4, r5
    6412:	4240      	negs	r0, r0
    6414:	1a82      	subs	r2, r0, r2
    6416:	40d4      	lsrs	r4, r2
    6418:	2e20      	cmp	r6, #32
    641a:	d01c      	beq.n	6456 <__aeabi_dmul+0x4ca>
    641c:	2240      	movs	r2, #64	; 0x40
    641e:	1b96      	subs	r6, r2, r6
    6420:	40b5      	lsls	r5, r6
    6422:	432b      	orrs	r3, r5
    6424:	1e58      	subs	r0, r3, #1
    6426:	4183      	sbcs	r3, r0
    6428:	2007      	movs	r0, #7
    642a:	4323      	orrs	r3, r4
    642c:	4018      	ands	r0, r3
    642e:	2500      	movs	r5, #0
    6430:	2800      	cmp	r0, #0
    6432:	d009      	beq.n	6448 <__aeabi_dmul+0x4bc>
    6434:	220f      	movs	r2, #15
    6436:	2500      	movs	r5, #0
    6438:	401a      	ands	r2, r3
    643a:	001c      	movs	r4, r3
    643c:	2a04      	cmp	r2, #4
    643e:	d1d8      	bne.n	63f2 <__aeabi_dmul+0x466>
    6440:	0023      	movs	r3, r4
    6442:	0768      	lsls	r0, r5, #29
    6444:	026d      	lsls	r5, r5, #9
    6446:	0b2d      	lsrs	r5, r5, #12
    6448:	2401      	movs	r4, #1
    644a:	08db      	lsrs	r3, r3, #3
    644c:	4303      	orrs	r3, r0
    644e:	4698      	mov	r8, r3
    6450:	400c      	ands	r4, r1
    6452:	2300      	movs	r3, #0
    6454:	e600      	b.n	6058 <__aeabi_dmul+0xcc>
    6456:	2500      	movs	r5, #0
    6458:	e7e3      	b.n	6422 <__aeabi_dmul+0x496>
    645a:	2280      	movs	r2, #128	; 0x80
    645c:	2401      	movs	r4, #1
    645e:	0312      	lsls	r2, r2, #12
    6460:	4315      	orrs	r5, r2
    6462:	032d      	lsls	r5, r5, #12
    6464:	4698      	mov	r8, r3
    6466:	0b2d      	lsrs	r5, r5, #12
    6468:	400c      	ands	r4, r1
    646a:	4b04      	ldr	r3, [pc, #16]	; (647c <__aeabi_dmul+0x4f0>)
    646c:	e5f4      	b.n	6058 <__aeabi_dmul+0xcc>
    646e:	46c0      	nop			; (mov r8, r8)
    6470:	000003ff 	.word	0x000003ff
    6474:	feffffff 	.word	0xfeffffff
    6478:	000007fe 	.word	0x000007fe
    647c:	000007ff 	.word	0x000007ff

00006480 <__aeabi_dsub>:
    6480:	b5f0      	push	{r4, r5, r6, r7, lr}
    6482:	4657      	mov	r7, sl
    6484:	464e      	mov	r6, r9
    6486:	4645      	mov	r5, r8
    6488:	b4e0      	push	{r5, r6, r7}
    648a:	000e      	movs	r6, r1
    648c:	0011      	movs	r1, r2
    648e:	0ff2      	lsrs	r2, r6, #31
    6490:	4692      	mov	sl, r2
    6492:	00c5      	lsls	r5, r0, #3
    6494:	0f42      	lsrs	r2, r0, #29
    6496:	0318      	lsls	r0, r3, #12
    6498:	0337      	lsls	r7, r6, #12
    649a:	0074      	lsls	r4, r6, #1
    649c:	0a40      	lsrs	r0, r0, #9
    649e:	0f4e      	lsrs	r6, r1, #29
    64a0:	0a7f      	lsrs	r7, r7, #9
    64a2:	4330      	orrs	r0, r6
    64a4:	4ecf      	ldr	r6, [pc, #828]	; (67e4 <__aeabi_dsub+0x364>)
    64a6:	4317      	orrs	r7, r2
    64a8:	005a      	lsls	r2, r3, #1
    64aa:	0d64      	lsrs	r4, r4, #21
    64ac:	0d52      	lsrs	r2, r2, #21
    64ae:	0fdb      	lsrs	r3, r3, #31
    64b0:	00c9      	lsls	r1, r1, #3
    64b2:	42b2      	cmp	r2, r6
    64b4:	d100      	bne.n	64b8 <__aeabi_dsub+0x38>
    64b6:	e0e5      	b.n	6684 <__aeabi_dsub+0x204>
    64b8:	2601      	movs	r6, #1
    64ba:	4073      	eors	r3, r6
    64bc:	1aa6      	subs	r6, r4, r2
    64be:	46b4      	mov	ip, r6
    64c0:	4553      	cmp	r3, sl
    64c2:	d100      	bne.n	64c6 <__aeabi_dsub+0x46>
    64c4:	e0af      	b.n	6626 <__aeabi_dsub+0x1a6>
    64c6:	2e00      	cmp	r6, #0
    64c8:	dc00      	bgt.n	64cc <__aeabi_dsub+0x4c>
    64ca:	e10d      	b.n	66e8 <__aeabi_dsub+0x268>
    64cc:	2a00      	cmp	r2, #0
    64ce:	d13a      	bne.n	6546 <__aeabi_dsub+0xc6>
    64d0:	0003      	movs	r3, r0
    64d2:	430b      	orrs	r3, r1
    64d4:	d000      	beq.n	64d8 <__aeabi_dsub+0x58>
    64d6:	e0e4      	b.n	66a2 <__aeabi_dsub+0x222>
    64d8:	076b      	lsls	r3, r5, #29
    64da:	d009      	beq.n	64f0 <__aeabi_dsub+0x70>
    64dc:	230f      	movs	r3, #15
    64de:	402b      	ands	r3, r5
    64e0:	2b04      	cmp	r3, #4
    64e2:	d005      	beq.n	64f0 <__aeabi_dsub+0x70>
    64e4:	1d2b      	adds	r3, r5, #4
    64e6:	42ab      	cmp	r3, r5
    64e8:	41ad      	sbcs	r5, r5
    64ea:	426d      	negs	r5, r5
    64ec:	197f      	adds	r7, r7, r5
    64ee:	001d      	movs	r5, r3
    64f0:	023b      	lsls	r3, r7, #8
    64f2:	d400      	bmi.n	64f6 <__aeabi_dsub+0x76>
    64f4:	e088      	b.n	6608 <__aeabi_dsub+0x188>
    64f6:	4bbb      	ldr	r3, [pc, #748]	; (67e4 <__aeabi_dsub+0x364>)
    64f8:	3401      	adds	r4, #1
    64fa:	429c      	cmp	r4, r3
    64fc:	d100      	bne.n	6500 <__aeabi_dsub+0x80>
    64fe:	e110      	b.n	6722 <__aeabi_dsub+0x2a2>
    6500:	003a      	movs	r2, r7
    6502:	4bb9      	ldr	r3, [pc, #740]	; (67e8 <__aeabi_dsub+0x368>)
    6504:	4651      	mov	r1, sl
    6506:	401a      	ands	r2, r3
    6508:	2301      	movs	r3, #1
    650a:	0750      	lsls	r0, r2, #29
    650c:	08ed      	lsrs	r5, r5, #3
    650e:	0252      	lsls	r2, r2, #9
    6510:	0564      	lsls	r4, r4, #21
    6512:	4305      	orrs	r5, r0
    6514:	0b12      	lsrs	r2, r2, #12
    6516:	0d64      	lsrs	r4, r4, #21
    6518:	400b      	ands	r3, r1
    651a:	2100      	movs	r1, #0
    651c:	0028      	movs	r0, r5
    651e:	0312      	lsls	r2, r2, #12
    6520:	0d0d      	lsrs	r5, r1, #20
    6522:	0b12      	lsrs	r2, r2, #12
    6524:	0564      	lsls	r4, r4, #21
    6526:	052d      	lsls	r5, r5, #20
    6528:	4315      	orrs	r5, r2
    652a:	0862      	lsrs	r2, r4, #1
    652c:	4caf      	ldr	r4, [pc, #700]	; (67ec <__aeabi_dsub+0x36c>)
    652e:	07db      	lsls	r3, r3, #31
    6530:	402c      	ands	r4, r5
    6532:	4314      	orrs	r4, r2
    6534:	0064      	lsls	r4, r4, #1
    6536:	0864      	lsrs	r4, r4, #1
    6538:	431c      	orrs	r4, r3
    653a:	0021      	movs	r1, r4
    653c:	bc1c      	pop	{r2, r3, r4}
    653e:	4690      	mov	r8, r2
    6540:	4699      	mov	r9, r3
    6542:	46a2      	mov	sl, r4
    6544:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6546:	4ba7      	ldr	r3, [pc, #668]	; (67e4 <__aeabi_dsub+0x364>)
    6548:	429c      	cmp	r4, r3
    654a:	d0c5      	beq.n	64d8 <__aeabi_dsub+0x58>
    654c:	2380      	movs	r3, #128	; 0x80
    654e:	041b      	lsls	r3, r3, #16
    6550:	4318      	orrs	r0, r3
    6552:	4663      	mov	r3, ip
    6554:	2b38      	cmp	r3, #56	; 0x38
    6556:	dd00      	ble.n	655a <__aeabi_dsub+0xda>
    6558:	e0fd      	b.n	6756 <__aeabi_dsub+0x2d6>
    655a:	2b1f      	cmp	r3, #31
    655c:	dd00      	ble.n	6560 <__aeabi_dsub+0xe0>
    655e:	e130      	b.n	67c2 <__aeabi_dsub+0x342>
    6560:	4662      	mov	r2, ip
    6562:	2320      	movs	r3, #32
    6564:	1a9b      	subs	r3, r3, r2
    6566:	0002      	movs	r2, r0
    6568:	409a      	lsls	r2, r3
    656a:	4666      	mov	r6, ip
    656c:	4690      	mov	r8, r2
    656e:	000a      	movs	r2, r1
    6570:	4099      	lsls	r1, r3
    6572:	40f2      	lsrs	r2, r6
    6574:	4646      	mov	r6, r8
    6576:	1e4b      	subs	r3, r1, #1
    6578:	4199      	sbcs	r1, r3
    657a:	4332      	orrs	r2, r6
    657c:	4311      	orrs	r1, r2
    657e:	4663      	mov	r3, ip
    6580:	0002      	movs	r2, r0
    6582:	40da      	lsrs	r2, r3
    6584:	1a69      	subs	r1, r5, r1
    6586:	428d      	cmp	r5, r1
    6588:	419b      	sbcs	r3, r3
    658a:	000d      	movs	r5, r1
    658c:	1aba      	subs	r2, r7, r2
    658e:	425b      	negs	r3, r3
    6590:	1ad7      	subs	r7, r2, r3
    6592:	023b      	lsls	r3, r7, #8
    6594:	d535      	bpl.n	6602 <__aeabi_dsub+0x182>
    6596:	027a      	lsls	r2, r7, #9
    6598:	0a53      	lsrs	r3, r2, #9
    659a:	4698      	mov	r8, r3
    659c:	4643      	mov	r3, r8
    659e:	2b00      	cmp	r3, #0
    65a0:	d100      	bne.n	65a4 <__aeabi_dsub+0x124>
    65a2:	e0c4      	b.n	672e <__aeabi_dsub+0x2ae>
    65a4:	4640      	mov	r0, r8
    65a6:	f000 fb2d 	bl	6c04 <__clzsi2>
    65aa:	0003      	movs	r3, r0
    65ac:	3b08      	subs	r3, #8
    65ae:	2b1f      	cmp	r3, #31
    65b0:	dd00      	ble.n	65b4 <__aeabi_dsub+0x134>
    65b2:	e0c5      	b.n	6740 <__aeabi_dsub+0x2c0>
    65b4:	2220      	movs	r2, #32
    65b6:	0029      	movs	r1, r5
    65b8:	1ad2      	subs	r2, r2, r3
    65ba:	4647      	mov	r7, r8
    65bc:	40d1      	lsrs	r1, r2
    65be:	409f      	lsls	r7, r3
    65c0:	000a      	movs	r2, r1
    65c2:	409d      	lsls	r5, r3
    65c4:	433a      	orrs	r2, r7
    65c6:	429c      	cmp	r4, r3
    65c8:	dd00      	ble.n	65cc <__aeabi_dsub+0x14c>
    65ca:	e0c0      	b.n	674e <__aeabi_dsub+0x2ce>
    65cc:	1b1c      	subs	r4, r3, r4
    65ce:	1c63      	adds	r3, r4, #1
    65d0:	2b1f      	cmp	r3, #31
    65d2:	dd00      	ble.n	65d6 <__aeabi_dsub+0x156>
    65d4:	e0e4      	b.n	67a0 <__aeabi_dsub+0x320>
    65d6:	2120      	movs	r1, #32
    65d8:	0014      	movs	r4, r2
    65da:	0028      	movs	r0, r5
    65dc:	1ac9      	subs	r1, r1, r3
    65de:	40d8      	lsrs	r0, r3
    65e0:	408c      	lsls	r4, r1
    65e2:	408d      	lsls	r5, r1
    65e4:	4304      	orrs	r4, r0
    65e6:	40da      	lsrs	r2, r3
    65e8:	1e68      	subs	r0, r5, #1
    65ea:	4185      	sbcs	r5, r0
    65ec:	0017      	movs	r7, r2
    65ee:	4325      	orrs	r5, r4
    65f0:	2400      	movs	r4, #0
    65f2:	e771      	b.n	64d8 <__aeabi_dsub+0x58>
    65f4:	4642      	mov	r2, r8
    65f6:	4663      	mov	r3, ip
    65f8:	431a      	orrs	r2, r3
    65fa:	d100      	bne.n	65fe <__aeabi_dsub+0x17e>
    65fc:	e24c      	b.n	6a98 <__aeabi_dsub+0x618>
    65fe:	4667      	mov	r7, ip
    6600:	4645      	mov	r5, r8
    6602:	076b      	lsls	r3, r5, #29
    6604:	d000      	beq.n	6608 <__aeabi_dsub+0x188>
    6606:	e769      	b.n	64dc <__aeabi_dsub+0x5c>
    6608:	2301      	movs	r3, #1
    660a:	4651      	mov	r1, sl
    660c:	0778      	lsls	r0, r7, #29
    660e:	08ed      	lsrs	r5, r5, #3
    6610:	08fa      	lsrs	r2, r7, #3
    6612:	400b      	ands	r3, r1
    6614:	4305      	orrs	r5, r0
    6616:	4973      	ldr	r1, [pc, #460]	; (67e4 <__aeabi_dsub+0x364>)
    6618:	428c      	cmp	r4, r1
    661a:	d038      	beq.n	668e <__aeabi_dsub+0x20e>
    661c:	0312      	lsls	r2, r2, #12
    661e:	0564      	lsls	r4, r4, #21
    6620:	0b12      	lsrs	r2, r2, #12
    6622:	0d64      	lsrs	r4, r4, #21
    6624:	e779      	b.n	651a <__aeabi_dsub+0x9a>
    6626:	2e00      	cmp	r6, #0
    6628:	dc00      	bgt.n	662c <__aeabi_dsub+0x1ac>
    662a:	e09a      	b.n	6762 <__aeabi_dsub+0x2e2>
    662c:	2a00      	cmp	r2, #0
    662e:	d047      	beq.n	66c0 <__aeabi_dsub+0x240>
    6630:	4a6c      	ldr	r2, [pc, #432]	; (67e4 <__aeabi_dsub+0x364>)
    6632:	4294      	cmp	r4, r2
    6634:	d100      	bne.n	6638 <__aeabi_dsub+0x1b8>
    6636:	e74f      	b.n	64d8 <__aeabi_dsub+0x58>
    6638:	2280      	movs	r2, #128	; 0x80
    663a:	0412      	lsls	r2, r2, #16
    663c:	4310      	orrs	r0, r2
    663e:	4662      	mov	r2, ip
    6640:	2a38      	cmp	r2, #56	; 0x38
    6642:	dc00      	bgt.n	6646 <__aeabi_dsub+0x1c6>
    6644:	e108      	b.n	6858 <__aeabi_dsub+0x3d8>
    6646:	4301      	orrs	r1, r0
    6648:	1e48      	subs	r0, r1, #1
    664a:	4181      	sbcs	r1, r0
    664c:	2200      	movs	r2, #0
    664e:	b2c9      	uxtb	r1, r1
    6650:	1949      	adds	r1, r1, r5
    6652:	19d2      	adds	r2, r2, r7
    6654:	42a9      	cmp	r1, r5
    6656:	41bf      	sbcs	r7, r7
    6658:	000d      	movs	r5, r1
    665a:	427f      	negs	r7, r7
    665c:	18bf      	adds	r7, r7, r2
    665e:	023a      	lsls	r2, r7, #8
    6660:	d400      	bmi.n	6664 <__aeabi_dsub+0x1e4>
    6662:	e142      	b.n	68ea <__aeabi_dsub+0x46a>
    6664:	4a5f      	ldr	r2, [pc, #380]	; (67e4 <__aeabi_dsub+0x364>)
    6666:	3401      	adds	r4, #1
    6668:	4294      	cmp	r4, r2
    666a:	d100      	bne.n	666e <__aeabi_dsub+0x1ee>
    666c:	e14e      	b.n	690c <__aeabi_dsub+0x48c>
    666e:	2001      	movs	r0, #1
    6670:	4a5d      	ldr	r2, [pc, #372]	; (67e8 <__aeabi_dsub+0x368>)
    6672:	0869      	lsrs	r1, r5, #1
    6674:	403a      	ands	r2, r7
    6676:	4028      	ands	r0, r5
    6678:	4308      	orrs	r0, r1
    667a:	07d5      	lsls	r5, r2, #31
    667c:	4305      	orrs	r5, r0
    667e:	0857      	lsrs	r7, r2, #1
    6680:	469a      	mov	sl, r3
    6682:	e729      	b.n	64d8 <__aeabi_dsub+0x58>
    6684:	0006      	movs	r6, r0
    6686:	430e      	orrs	r6, r1
    6688:	d000      	beq.n	668c <__aeabi_dsub+0x20c>
    668a:	e717      	b.n	64bc <__aeabi_dsub+0x3c>
    668c:	e714      	b.n	64b8 <__aeabi_dsub+0x38>
    668e:	0029      	movs	r1, r5
    6690:	4311      	orrs	r1, r2
    6692:	d100      	bne.n	6696 <__aeabi_dsub+0x216>
    6694:	e1f9      	b.n	6a8a <__aeabi_dsub+0x60a>
    6696:	2180      	movs	r1, #128	; 0x80
    6698:	0309      	lsls	r1, r1, #12
    669a:	430a      	orrs	r2, r1
    669c:	0312      	lsls	r2, r2, #12
    669e:	0b12      	lsrs	r2, r2, #12
    66a0:	e73b      	b.n	651a <__aeabi_dsub+0x9a>
    66a2:	2301      	movs	r3, #1
    66a4:	425b      	negs	r3, r3
    66a6:	4698      	mov	r8, r3
    66a8:	44c4      	add	ip, r8
    66aa:	4663      	mov	r3, ip
    66ac:	2b00      	cmp	r3, #0
    66ae:	d172      	bne.n	6796 <__aeabi_dsub+0x316>
    66b0:	1a69      	subs	r1, r5, r1
    66b2:	428d      	cmp	r5, r1
    66b4:	419b      	sbcs	r3, r3
    66b6:	1a3f      	subs	r7, r7, r0
    66b8:	425b      	negs	r3, r3
    66ba:	1aff      	subs	r7, r7, r3
    66bc:	000d      	movs	r5, r1
    66be:	e768      	b.n	6592 <__aeabi_dsub+0x112>
    66c0:	0002      	movs	r2, r0
    66c2:	430a      	orrs	r2, r1
    66c4:	d100      	bne.n	66c8 <__aeabi_dsub+0x248>
    66c6:	e707      	b.n	64d8 <__aeabi_dsub+0x58>
    66c8:	2201      	movs	r2, #1
    66ca:	4252      	negs	r2, r2
    66cc:	4690      	mov	r8, r2
    66ce:	44c4      	add	ip, r8
    66d0:	4662      	mov	r2, ip
    66d2:	2a00      	cmp	r2, #0
    66d4:	d000      	beq.n	66d8 <__aeabi_dsub+0x258>
    66d6:	e0e6      	b.n	68a6 <__aeabi_dsub+0x426>
    66d8:	1869      	adds	r1, r5, r1
    66da:	42a9      	cmp	r1, r5
    66dc:	41b6      	sbcs	r6, r6
    66de:	183f      	adds	r7, r7, r0
    66e0:	4276      	negs	r6, r6
    66e2:	19f7      	adds	r7, r6, r7
    66e4:	000d      	movs	r5, r1
    66e6:	e7ba      	b.n	665e <__aeabi_dsub+0x1de>
    66e8:	2e00      	cmp	r6, #0
    66ea:	d000      	beq.n	66ee <__aeabi_dsub+0x26e>
    66ec:	e080      	b.n	67f0 <__aeabi_dsub+0x370>
    66ee:	1c62      	adds	r2, r4, #1
    66f0:	0552      	lsls	r2, r2, #21
    66f2:	0d52      	lsrs	r2, r2, #21
    66f4:	2a01      	cmp	r2, #1
    66f6:	dc00      	bgt.n	66fa <__aeabi_dsub+0x27a>
    66f8:	e0f9      	b.n	68ee <__aeabi_dsub+0x46e>
    66fa:	1a6a      	subs	r2, r5, r1
    66fc:	4691      	mov	r9, r2
    66fe:	454d      	cmp	r5, r9
    6700:	41b6      	sbcs	r6, r6
    6702:	1a3a      	subs	r2, r7, r0
    6704:	4276      	negs	r6, r6
    6706:	1b92      	subs	r2, r2, r6
    6708:	4690      	mov	r8, r2
    670a:	0212      	lsls	r2, r2, #8
    670c:	d400      	bmi.n	6710 <__aeabi_dsub+0x290>
    670e:	e099      	b.n	6844 <__aeabi_dsub+0x3c4>
    6710:	1b4d      	subs	r5, r1, r5
    6712:	42a9      	cmp	r1, r5
    6714:	4189      	sbcs	r1, r1
    6716:	1bc7      	subs	r7, r0, r7
    6718:	4249      	negs	r1, r1
    671a:	1a7a      	subs	r2, r7, r1
    671c:	4690      	mov	r8, r2
    671e:	469a      	mov	sl, r3
    6720:	e73c      	b.n	659c <__aeabi_dsub+0x11c>
    6722:	4652      	mov	r2, sl
    6724:	2301      	movs	r3, #1
    6726:	2500      	movs	r5, #0
    6728:	4013      	ands	r3, r2
    672a:	2200      	movs	r2, #0
    672c:	e6f5      	b.n	651a <__aeabi_dsub+0x9a>
    672e:	0028      	movs	r0, r5
    6730:	f000 fa68 	bl	6c04 <__clzsi2>
    6734:	3020      	adds	r0, #32
    6736:	0003      	movs	r3, r0
    6738:	3b08      	subs	r3, #8
    673a:	2b1f      	cmp	r3, #31
    673c:	dc00      	bgt.n	6740 <__aeabi_dsub+0x2c0>
    673e:	e739      	b.n	65b4 <__aeabi_dsub+0x134>
    6740:	002a      	movs	r2, r5
    6742:	3828      	subs	r0, #40	; 0x28
    6744:	4082      	lsls	r2, r0
    6746:	2500      	movs	r5, #0
    6748:	429c      	cmp	r4, r3
    674a:	dc00      	bgt.n	674e <__aeabi_dsub+0x2ce>
    674c:	e73e      	b.n	65cc <__aeabi_dsub+0x14c>
    674e:	4f26      	ldr	r7, [pc, #152]	; (67e8 <__aeabi_dsub+0x368>)
    6750:	1ae4      	subs	r4, r4, r3
    6752:	4017      	ands	r7, r2
    6754:	e6c0      	b.n	64d8 <__aeabi_dsub+0x58>
    6756:	4301      	orrs	r1, r0
    6758:	1e48      	subs	r0, r1, #1
    675a:	4181      	sbcs	r1, r0
    675c:	2200      	movs	r2, #0
    675e:	b2c9      	uxtb	r1, r1
    6760:	e710      	b.n	6584 <__aeabi_dsub+0x104>
    6762:	2e00      	cmp	r6, #0
    6764:	d000      	beq.n	6768 <__aeabi_dsub+0x2e8>
    6766:	e0f1      	b.n	694c <__aeabi_dsub+0x4cc>
    6768:	1c62      	adds	r2, r4, #1
    676a:	4694      	mov	ip, r2
    676c:	0552      	lsls	r2, r2, #21
    676e:	0d52      	lsrs	r2, r2, #21
    6770:	2a01      	cmp	r2, #1
    6772:	dc00      	bgt.n	6776 <__aeabi_dsub+0x2f6>
    6774:	e0a0      	b.n	68b8 <__aeabi_dsub+0x438>
    6776:	4a1b      	ldr	r2, [pc, #108]	; (67e4 <__aeabi_dsub+0x364>)
    6778:	4594      	cmp	ip, r2
    677a:	d100      	bne.n	677e <__aeabi_dsub+0x2fe>
    677c:	e0c5      	b.n	690a <__aeabi_dsub+0x48a>
    677e:	1869      	adds	r1, r5, r1
    6780:	42a9      	cmp	r1, r5
    6782:	4192      	sbcs	r2, r2
    6784:	183f      	adds	r7, r7, r0
    6786:	4252      	negs	r2, r2
    6788:	19d2      	adds	r2, r2, r7
    678a:	0849      	lsrs	r1, r1, #1
    678c:	07d5      	lsls	r5, r2, #31
    678e:	430d      	orrs	r5, r1
    6790:	0857      	lsrs	r7, r2, #1
    6792:	4664      	mov	r4, ip
    6794:	e6a0      	b.n	64d8 <__aeabi_dsub+0x58>
    6796:	4b13      	ldr	r3, [pc, #76]	; (67e4 <__aeabi_dsub+0x364>)
    6798:	429c      	cmp	r4, r3
    679a:	d000      	beq.n	679e <__aeabi_dsub+0x31e>
    679c:	e6d9      	b.n	6552 <__aeabi_dsub+0xd2>
    679e:	e69b      	b.n	64d8 <__aeabi_dsub+0x58>
    67a0:	0011      	movs	r1, r2
    67a2:	3c1f      	subs	r4, #31
    67a4:	40e1      	lsrs	r1, r4
    67a6:	000c      	movs	r4, r1
    67a8:	2b20      	cmp	r3, #32
    67aa:	d100      	bne.n	67ae <__aeabi_dsub+0x32e>
    67ac:	e080      	b.n	68b0 <__aeabi_dsub+0x430>
    67ae:	2140      	movs	r1, #64	; 0x40
    67b0:	1acb      	subs	r3, r1, r3
    67b2:	409a      	lsls	r2, r3
    67b4:	4315      	orrs	r5, r2
    67b6:	1e6a      	subs	r2, r5, #1
    67b8:	4195      	sbcs	r5, r2
    67ba:	2700      	movs	r7, #0
    67bc:	4325      	orrs	r5, r4
    67be:	2400      	movs	r4, #0
    67c0:	e71f      	b.n	6602 <__aeabi_dsub+0x182>
    67c2:	4663      	mov	r3, ip
    67c4:	0002      	movs	r2, r0
    67c6:	3b20      	subs	r3, #32
    67c8:	40da      	lsrs	r2, r3
    67ca:	4663      	mov	r3, ip
    67cc:	2b20      	cmp	r3, #32
    67ce:	d071      	beq.n	68b4 <__aeabi_dsub+0x434>
    67d0:	2340      	movs	r3, #64	; 0x40
    67d2:	4666      	mov	r6, ip
    67d4:	1b9b      	subs	r3, r3, r6
    67d6:	4098      	lsls	r0, r3
    67d8:	4301      	orrs	r1, r0
    67da:	1e48      	subs	r0, r1, #1
    67dc:	4181      	sbcs	r1, r0
    67de:	4311      	orrs	r1, r2
    67e0:	2200      	movs	r2, #0
    67e2:	e6cf      	b.n	6584 <__aeabi_dsub+0x104>
    67e4:	000007ff 	.word	0x000007ff
    67e8:	ff7fffff 	.word	0xff7fffff
    67ec:	800fffff 	.word	0x800fffff
    67f0:	2c00      	cmp	r4, #0
    67f2:	d048      	beq.n	6886 <__aeabi_dsub+0x406>
    67f4:	4cca      	ldr	r4, [pc, #808]	; (6b20 <__aeabi_dsub+0x6a0>)
    67f6:	42a2      	cmp	r2, r4
    67f8:	d100      	bne.n	67fc <__aeabi_dsub+0x37c>
    67fa:	e0a2      	b.n	6942 <__aeabi_dsub+0x4c2>
    67fc:	4274      	negs	r4, r6
    67fe:	46a1      	mov	r9, r4
    6800:	2480      	movs	r4, #128	; 0x80
    6802:	0424      	lsls	r4, r4, #16
    6804:	4327      	orrs	r7, r4
    6806:	464c      	mov	r4, r9
    6808:	2c38      	cmp	r4, #56	; 0x38
    680a:	dd00      	ble.n	680e <__aeabi_dsub+0x38e>
    680c:	e0db      	b.n	69c6 <__aeabi_dsub+0x546>
    680e:	2c1f      	cmp	r4, #31
    6810:	dd00      	ble.n	6814 <__aeabi_dsub+0x394>
    6812:	e144      	b.n	6a9e <__aeabi_dsub+0x61e>
    6814:	464e      	mov	r6, r9
    6816:	2420      	movs	r4, #32
    6818:	1ba4      	subs	r4, r4, r6
    681a:	003e      	movs	r6, r7
    681c:	40a6      	lsls	r6, r4
    681e:	46a2      	mov	sl, r4
    6820:	46b0      	mov	r8, r6
    6822:	464c      	mov	r4, r9
    6824:	002e      	movs	r6, r5
    6826:	40e6      	lsrs	r6, r4
    6828:	46b4      	mov	ip, r6
    682a:	4646      	mov	r6, r8
    682c:	4664      	mov	r4, ip
    682e:	4326      	orrs	r6, r4
    6830:	4654      	mov	r4, sl
    6832:	40a5      	lsls	r5, r4
    6834:	1e6c      	subs	r4, r5, #1
    6836:	41a5      	sbcs	r5, r4
    6838:	0034      	movs	r4, r6
    683a:	432c      	orrs	r4, r5
    683c:	464d      	mov	r5, r9
    683e:	40ef      	lsrs	r7, r5
    6840:	1b0d      	subs	r5, r1, r4
    6842:	e028      	b.n	6896 <__aeabi_dsub+0x416>
    6844:	464a      	mov	r2, r9
    6846:	4643      	mov	r3, r8
    6848:	464d      	mov	r5, r9
    684a:	431a      	orrs	r2, r3
    684c:	d000      	beq.n	6850 <__aeabi_dsub+0x3d0>
    684e:	e6a5      	b.n	659c <__aeabi_dsub+0x11c>
    6850:	2300      	movs	r3, #0
    6852:	2400      	movs	r4, #0
    6854:	2500      	movs	r5, #0
    6856:	e6de      	b.n	6616 <__aeabi_dsub+0x196>
    6858:	2a1f      	cmp	r2, #31
    685a:	dc5a      	bgt.n	6912 <__aeabi_dsub+0x492>
    685c:	4666      	mov	r6, ip
    685e:	2220      	movs	r2, #32
    6860:	1b92      	subs	r2, r2, r6
    6862:	0006      	movs	r6, r0
    6864:	4096      	lsls	r6, r2
    6866:	4691      	mov	r9, r2
    6868:	46b0      	mov	r8, r6
    686a:	4662      	mov	r2, ip
    686c:	000e      	movs	r6, r1
    686e:	40d6      	lsrs	r6, r2
    6870:	4642      	mov	r2, r8
    6872:	4316      	orrs	r6, r2
    6874:	464a      	mov	r2, r9
    6876:	4091      	lsls	r1, r2
    6878:	1e4a      	subs	r2, r1, #1
    687a:	4191      	sbcs	r1, r2
    687c:	0002      	movs	r2, r0
    687e:	4660      	mov	r0, ip
    6880:	4331      	orrs	r1, r6
    6882:	40c2      	lsrs	r2, r0
    6884:	e6e4      	b.n	6650 <__aeabi_dsub+0x1d0>
    6886:	003c      	movs	r4, r7
    6888:	432c      	orrs	r4, r5
    688a:	d05a      	beq.n	6942 <__aeabi_dsub+0x4c2>
    688c:	43f4      	mvns	r4, r6
    688e:	46a1      	mov	r9, r4
    6890:	2c00      	cmp	r4, #0
    6892:	d152      	bne.n	693a <__aeabi_dsub+0x4ba>
    6894:	1b4d      	subs	r5, r1, r5
    6896:	42a9      	cmp	r1, r5
    6898:	4189      	sbcs	r1, r1
    689a:	1bc7      	subs	r7, r0, r7
    689c:	4249      	negs	r1, r1
    689e:	1a7f      	subs	r7, r7, r1
    68a0:	0014      	movs	r4, r2
    68a2:	469a      	mov	sl, r3
    68a4:	e675      	b.n	6592 <__aeabi_dsub+0x112>
    68a6:	4a9e      	ldr	r2, [pc, #632]	; (6b20 <__aeabi_dsub+0x6a0>)
    68a8:	4294      	cmp	r4, r2
    68aa:	d000      	beq.n	68ae <__aeabi_dsub+0x42e>
    68ac:	e6c7      	b.n	663e <__aeabi_dsub+0x1be>
    68ae:	e613      	b.n	64d8 <__aeabi_dsub+0x58>
    68b0:	2200      	movs	r2, #0
    68b2:	e77f      	b.n	67b4 <__aeabi_dsub+0x334>
    68b4:	2000      	movs	r0, #0
    68b6:	e78f      	b.n	67d8 <__aeabi_dsub+0x358>
    68b8:	2c00      	cmp	r4, #0
    68ba:	d000      	beq.n	68be <__aeabi_dsub+0x43e>
    68bc:	e0c8      	b.n	6a50 <__aeabi_dsub+0x5d0>
    68be:	003b      	movs	r3, r7
    68c0:	432b      	orrs	r3, r5
    68c2:	d100      	bne.n	68c6 <__aeabi_dsub+0x446>
    68c4:	e10f      	b.n	6ae6 <__aeabi_dsub+0x666>
    68c6:	0003      	movs	r3, r0
    68c8:	430b      	orrs	r3, r1
    68ca:	d100      	bne.n	68ce <__aeabi_dsub+0x44e>
    68cc:	e604      	b.n	64d8 <__aeabi_dsub+0x58>
    68ce:	1869      	adds	r1, r5, r1
    68d0:	42a9      	cmp	r1, r5
    68d2:	419b      	sbcs	r3, r3
    68d4:	183f      	adds	r7, r7, r0
    68d6:	425b      	negs	r3, r3
    68d8:	19df      	adds	r7, r3, r7
    68da:	023b      	lsls	r3, r7, #8
    68dc:	d400      	bmi.n	68e0 <__aeabi_dsub+0x460>
    68de:	e11a      	b.n	6b16 <__aeabi_dsub+0x696>
    68e0:	4b90      	ldr	r3, [pc, #576]	; (6b24 <__aeabi_dsub+0x6a4>)
    68e2:	000d      	movs	r5, r1
    68e4:	401f      	ands	r7, r3
    68e6:	4664      	mov	r4, ip
    68e8:	e5f6      	b.n	64d8 <__aeabi_dsub+0x58>
    68ea:	469a      	mov	sl, r3
    68ec:	e689      	b.n	6602 <__aeabi_dsub+0x182>
    68ee:	003a      	movs	r2, r7
    68f0:	432a      	orrs	r2, r5
    68f2:	2c00      	cmp	r4, #0
    68f4:	d15c      	bne.n	69b0 <__aeabi_dsub+0x530>
    68f6:	2a00      	cmp	r2, #0
    68f8:	d175      	bne.n	69e6 <__aeabi_dsub+0x566>
    68fa:	0002      	movs	r2, r0
    68fc:	430a      	orrs	r2, r1
    68fe:	d100      	bne.n	6902 <__aeabi_dsub+0x482>
    6900:	e0ca      	b.n	6a98 <__aeabi_dsub+0x618>
    6902:	0007      	movs	r7, r0
    6904:	000d      	movs	r5, r1
    6906:	469a      	mov	sl, r3
    6908:	e5e6      	b.n	64d8 <__aeabi_dsub+0x58>
    690a:	4664      	mov	r4, ip
    690c:	2200      	movs	r2, #0
    690e:	2500      	movs	r5, #0
    6910:	e681      	b.n	6616 <__aeabi_dsub+0x196>
    6912:	4662      	mov	r2, ip
    6914:	0006      	movs	r6, r0
    6916:	3a20      	subs	r2, #32
    6918:	40d6      	lsrs	r6, r2
    691a:	4662      	mov	r2, ip
    691c:	46b0      	mov	r8, r6
    691e:	2a20      	cmp	r2, #32
    6920:	d100      	bne.n	6924 <__aeabi_dsub+0x4a4>
    6922:	e0b7      	b.n	6a94 <__aeabi_dsub+0x614>
    6924:	2240      	movs	r2, #64	; 0x40
    6926:	4666      	mov	r6, ip
    6928:	1b92      	subs	r2, r2, r6
    692a:	4090      	lsls	r0, r2
    692c:	4301      	orrs	r1, r0
    692e:	4642      	mov	r2, r8
    6930:	1e48      	subs	r0, r1, #1
    6932:	4181      	sbcs	r1, r0
    6934:	4311      	orrs	r1, r2
    6936:	2200      	movs	r2, #0
    6938:	e68a      	b.n	6650 <__aeabi_dsub+0x1d0>
    693a:	4c79      	ldr	r4, [pc, #484]	; (6b20 <__aeabi_dsub+0x6a0>)
    693c:	42a2      	cmp	r2, r4
    693e:	d000      	beq.n	6942 <__aeabi_dsub+0x4c2>
    6940:	e761      	b.n	6806 <__aeabi_dsub+0x386>
    6942:	0007      	movs	r7, r0
    6944:	000d      	movs	r5, r1
    6946:	0014      	movs	r4, r2
    6948:	469a      	mov	sl, r3
    694a:	e5c5      	b.n	64d8 <__aeabi_dsub+0x58>
    694c:	2c00      	cmp	r4, #0
    694e:	d141      	bne.n	69d4 <__aeabi_dsub+0x554>
    6950:	003c      	movs	r4, r7
    6952:	432c      	orrs	r4, r5
    6954:	d078      	beq.n	6a48 <__aeabi_dsub+0x5c8>
    6956:	43f4      	mvns	r4, r6
    6958:	46a1      	mov	r9, r4
    695a:	2c00      	cmp	r4, #0
    695c:	d020      	beq.n	69a0 <__aeabi_dsub+0x520>
    695e:	4c70      	ldr	r4, [pc, #448]	; (6b20 <__aeabi_dsub+0x6a0>)
    6960:	42a2      	cmp	r2, r4
    6962:	d071      	beq.n	6a48 <__aeabi_dsub+0x5c8>
    6964:	464c      	mov	r4, r9
    6966:	2c38      	cmp	r4, #56	; 0x38
    6968:	dd00      	ble.n	696c <__aeabi_dsub+0x4ec>
    696a:	e0b2      	b.n	6ad2 <__aeabi_dsub+0x652>
    696c:	2c1f      	cmp	r4, #31
    696e:	dd00      	ble.n	6972 <__aeabi_dsub+0x4f2>
    6970:	e0bc      	b.n	6aec <__aeabi_dsub+0x66c>
    6972:	2620      	movs	r6, #32
    6974:	1b34      	subs	r4, r6, r4
    6976:	46a2      	mov	sl, r4
    6978:	003c      	movs	r4, r7
    697a:	4656      	mov	r6, sl
    697c:	40b4      	lsls	r4, r6
    697e:	464e      	mov	r6, r9
    6980:	46a0      	mov	r8, r4
    6982:	002c      	movs	r4, r5
    6984:	40f4      	lsrs	r4, r6
    6986:	46a4      	mov	ip, r4
    6988:	4644      	mov	r4, r8
    698a:	4666      	mov	r6, ip
    698c:	4334      	orrs	r4, r6
    698e:	46a4      	mov	ip, r4
    6990:	4654      	mov	r4, sl
    6992:	40a5      	lsls	r5, r4
    6994:	4664      	mov	r4, ip
    6996:	1e6e      	subs	r6, r5, #1
    6998:	41b5      	sbcs	r5, r6
    699a:	4325      	orrs	r5, r4
    699c:	464c      	mov	r4, r9
    699e:	40e7      	lsrs	r7, r4
    69a0:	186d      	adds	r5, r5, r1
    69a2:	428d      	cmp	r5, r1
    69a4:	4189      	sbcs	r1, r1
    69a6:	183f      	adds	r7, r7, r0
    69a8:	4249      	negs	r1, r1
    69aa:	19cf      	adds	r7, r1, r7
    69ac:	0014      	movs	r4, r2
    69ae:	e656      	b.n	665e <__aeabi_dsub+0x1de>
    69b0:	2a00      	cmp	r2, #0
    69b2:	d12f      	bne.n	6a14 <__aeabi_dsub+0x594>
    69b4:	0002      	movs	r2, r0
    69b6:	430a      	orrs	r2, r1
    69b8:	d100      	bne.n	69bc <__aeabi_dsub+0x53c>
    69ba:	e084      	b.n	6ac6 <__aeabi_dsub+0x646>
    69bc:	0007      	movs	r7, r0
    69be:	000d      	movs	r5, r1
    69c0:	469a      	mov	sl, r3
    69c2:	4c57      	ldr	r4, [pc, #348]	; (6b20 <__aeabi_dsub+0x6a0>)
    69c4:	e588      	b.n	64d8 <__aeabi_dsub+0x58>
    69c6:	433d      	orrs	r5, r7
    69c8:	1e6f      	subs	r7, r5, #1
    69ca:	41bd      	sbcs	r5, r7
    69cc:	b2ec      	uxtb	r4, r5
    69ce:	2700      	movs	r7, #0
    69d0:	1b0d      	subs	r5, r1, r4
    69d2:	e760      	b.n	6896 <__aeabi_dsub+0x416>
    69d4:	4c52      	ldr	r4, [pc, #328]	; (6b20 <__aeabi_dsub+0x6a0>)
    69d6:	42a2      	cmp	r2, r4
    69d8:	d036      	beq.n	6a48 <__aeabi_dsub+0x5c8>
    69da:	4274      	negs	r4, r6
    69dc:	2680      	movs	r6, #128	; 0x80
    69de:	0436      	lsls	r6, r6, #16
    69e0:	46a1      	mov	r9, r4
    69e2:	4337      	orrs	r7, r6
    69e4:	e7be      	b.n	6964 <__aeabi_dsub+0x4e4>
    69e6:	0002      	movs	r2, r0
    69e8:	430a      	orrs	r2, r1
    69ea:	d100      	bne.n	69ee <__aeabi_dsub+0x56e>
    69ec:	e574      	b.n	64d8 <__aeabi_dsub+0x58>
    69ee:	1a6a      	subs	r2, r5, r1
    69f0:	4690      	mov	r8, r2
    69f2:	4545      	cmp	r5, r8
    69f4:	41b6      	sbcs	r6, r6
    69f6:	1a3a      	subs	r2, r7, r0
    69f8:	4276      	negs	r6, r6
    69fa:	1b92      	subs	r2, r2, r6
    69fc:	4694      	mov	ip, r2
    69fe:	0212      	lsls	r2, r2, #8
    6a00:	d400      	bmi.n	6a04 <__aeabi_dsub+0x584>
    6a02:	e5f7      	b.n	65f4 <__aeabi_dsub+0x174>
    6a04:	1b4d      	subs	r5, r1, r5
    6a06:	42a9      	cmp	r1, r5
    6a08:	4189      	sbcs	r1, r1
    6a0a:	1bc7      	subs	r7, r0, r7
    6a0c:	4249      	negs	r1, r1
    6a0e:	1a7f      	subs	r7, r7, r1
    6a10:	469a      	mov	sl, r3
    6a12:	e561      	b.n	64d8 <__aeabi_dsub+0x58>
    6a14:	0002      	movs	r2, r0
    6a16:	430a      	orrs	r2, r1
    6a18:	d03a      	beq.n	6a90 <__aeabi_dsub+0x610>
    6a1a:	08ed      	lsrs	r5, r5, #3
    6a1c:	077c      	lsls	r4, r7, #29
    6a1e:	432c      	orrs	r4, r5
    6a20:	2580      	movs	r5, #128	; 0x80
    6a22:	08fa      	lsrs	r2, r7, #3
    6a24:	032d      	lsls	r5, r5, #12
    6a26:	422a      	tst	r2, r5
    6a28:	d008      	beq.n	6a3c <__aeabi_dsub+0x5bc>
    6a2a:	08c7      	lsrs	r7, r0, #3
    6a2c:	422f      	tst	r7, r5
    6a2e:	d105      	bne.n	6a3c <__aeabi_dsub+0x5bc>
    6a30:	0745      	lsls	r5, r0, #29
    6a32:	002c      	movs	r4, r5
    6a34:	003a      	movs	r2, r7
    6a36:	469a      	mov	sl, r3
    6a38:	08c9      	lsrs	r1, r1, #3
    6a3a:	430c      	orrs	r4, r1
    6a3c:	0f67      	lsrs	r7, r4, #29
    6a3e:	00d2      	lsls	r2, r2, #3
    6a40:	00e5      	lsls	r5, r4, #3
    6a42:	4317      	orrs	r7, r2
    6a44:	4c36      	ldr	r4, [pc, #216]	; (6b20 <__aeabi_dsub+0x6a0>)
    6a46:	e547      	b.n	64d8 <__aeabi_dsub+0x58>
    6a48:	0007      	movs	r7, r0
    6a4a:	000d      	movs	r5, r1
    6a4c:	0014      	movs	r4, r2
    6a4e:	e543      	b.n	64d8 <__aeabi_dsub+0x58>
    6a50:	003a      	movs	r2, r7
    6a52:	432a      	orrs	r2, r5
    6a54:	d043      	beq.n	6ade <__aeabi_dsub+0x65e>
    6a56:	0002      	movs	r2, r0
    6a58:	430a      	orrs	r2, r1
    6a5a:	d019      	beq.n	6a90 <__aeabi_dsub+0x610>
    6a5c:	08ed      	lsrs	r5, r5, #3
    6a5e:	077c      	lsls	r4, r7, #29
    6a60:	432c      	orrs	r4, r5
    6a62:	2580      	movs	r5, #128	; 0x80
    6a64:	08fa      	lsrs	r2, r7, #3
    6a66:	032d      	lsls	r5, r5, #12
    6a68:	422a      	tst	r2, r5
    6a6a:	d007      	beq.n	6a7c <__aeabi_dsub+0x5fc>
    6a6c:	08c6      	lsrs	r6, r0, #3
    6a6e:	422e      	tst	r6, r5
    6a70:	d104      	bne.n	6a7c <__aeabi_dsub+0x5fc>
    6a72:	0747      	lsls	r7, r0, #29
    6a74:	003c      	movs	r4, r7
    6a76:	0032      	movs	r2, r6
    6a78:	08c9      	lsrs	r1, r1, #3
    6a7a:	430c      	orrs	r4, r1
    6a7c:	00d7      	lsls	r7, r2, #3
    6a7e:	0f62      	lsrs	r2, r4, #29
    6a80:	00e5      	lsls	r5, r4, #3
    6a82:	4317      	orrs	r7, r2
    6a84:	469a      	mov	sl, r3
    6a86:	4c26      	ldr	r4, [pc, #152]	; (6b20 <__aeabi_dsub+0x6a0>)
    6a88:	e526      	b.n	64d8 <__aeabi_dsub+0x58>
    6a8a:	2200      	movs	r2, #0
    6a8c:	2500      	movs	r5, #0
    6a8e:	e544      	b.n	651a <__aeabi_dsub+0x9a>
    6a90:	4c23      	ldr	r4, [pc, #140]	; (6b20 <__aeabi_dsub+0x6a0>)
    6a92:	e521      	b.n	64d8 <__aeabi_dsub+0x58>
    6a94:	2000      	movs	r0, #0
    6a96:	e749      	b.n	692c <__aeabi_dsub+0x4ac>
    6a98:	2300      	movs	r3, #0
    6a9a:	2500      	movs	r5, #0
    6a9c:	e5bb      	b.n	6616 <__aeabi_dsub+0x196>
    6a9e:	464c      	mov	r4, r9
    6aa0:	003e      	movs	r6, r7
    6aa2:	3c20      	subs	r4, #32
    6aa4:	40e6      	lsrs	r6, r4
    6aa6:	464c      	mov	r4, r9
    6aa8:	46b4      	mov	ip, r6
    6aaa:	2c20      	cmp	r4, #32
    6aac:	d031      	beq.n	6b12 <__aeabi_dsub+0x692>
    6aae:	2440      	movs	r4, #64	; 0x40
    6ab0:	464e      	mov	r6, r9
    6ab2:	1ba6      	subs	r6, r4, r6
    6ab4:	40b7      	lsls	r7, r6
    6ab6:	433d      	orrs	r5, r7
    6ab8:	1e6c      	subs	r4, r5, #1
    6aba:	41a5      	sbcs	r5, r4
    6abc:	4664      	mov	r4, ip
    6abe:	432c      	orrs	r4, r5
    6ac0:	2700      	movs	r7, #0
    6ac2:	1b0d      	subs	r5, r1, r4
    6ac4:	e6e7      	b.n	6896 <__aeabi_dsub+0x416>
    6ac6:	2280      	movs	r2, #128	; 0x80
    6ac8:	2300      	movs	r3, #0
    6aca:	0312      	lsls	r2, r2, #12
    6acc:	4c14      	ldr	r4, [pc, #80]	; (6b20 <__aeabi_dsub+0x6a0>)
    6ace:	2500      	movs	r5, #0
    6ad0:	e5a1      	b.n	6616 <__aeabi_dsub+0x196>
    6ad2:	433d      	orrs	r5, r7
    6ad4:	1e6f      	subs	r7, r5, #1
    6ad6:	41bd      	sbcs	r5, r7
    6ad8:	2700      	movs	r7, #0
    6ada:	b2ed      	uxtb	r5, r5
    6adc:	e760      	b.n	69a0 <__aeabi_dsub+0x520>
    6ade:	0007      	movs	r7, r0
    6ae0:	000d      	movs	r5, r1
    6ae2:	4c0f      	ldr	r4, [pc, #60]	; (6b20 <__aeabi_dsub+0x6a0>)
    6ae4:	e4f8      	b.n	64d8 <__aeabi_dsub+0x58>
    6ae6:	0007      	movs	r7, r0
    6ae8:	000d      	movs	r5, r1
    6aea:	e4f5      	b.n	64d8 <__aeabi_dsub+0x58>
    6aec:	464e      	mov	r6, r9
    6aee:	003c      	movs	r4, r7
    6af0:	3e20      	subs	r6, #32
    6af2:	40f4      	lsrs	r4, r6
    6af4:	46a0      	mov	r8, r4
    6af6:	464c      	mov	r4, r9
    6af8:	2c20      	cmp	r4, #32
    6afa:	d00e      	beq.n	6b1a <__aeabi_dsub+0x69a>
    6afc:	2440      	movs	r4, #64	; 0x40
    6afe:	464e      	mov	r6, r9
    6b00:	1ba4      	subs	r4, r4, r6
    6b02:	40a7      	lsls	r7, r4
    6b04:	433d      	orrs	r5, r7
    6b06:	1e6f      	subs	r7, r5, #1
    6b08:	41bd      	sbcs	r5, r7
    6b0a:	4644      	mov	r4, r8
    6b0c:	2700      	movs	r7, #0
    6b0e:	4325      	orrs	r5, r4
    6b10:	e746      	b.n	69a0 <__aeabi_dsub+0x520>
    6b12:	2700      	movs	r7, #0
    6b14:	e7cf      	b.n	6ab6 <__aeabi_dsub+0x636>
    6b16:	000d      	movs	r5, r1
    6b18:	e573      	b.n	6602 <__aeabi_dsub+0x182>
    6b1a:	2700      	movs	r7, #0
    6b1c:	e7f2      	b.n	6b04 <__aeabi_dsub+0x684>
    6b1e:	46c0      	nop			; (mov r8, r8)
    6b20:	000007ff 	.word	0x000007ff
    6b24:	ff7fffff 	.word	0xff7fffff

00006b28 <__aeabi_d2iz>:
    6b28:	030b      	lsls	r3, r1, #12
    6b2a:	b530      	push	{r4, r5, lr}
    6b2c:	4d13      	ldr	r5, [pc, #76]	; (6b7c <__aeabi_d2iz+0x54>)
    6b2e:	0b1a      	lsrs	r2, r3, #12
    6b30:	004b      	lsls	r3, r1, #1
    6b32:	0d5b      	lsrs	r3, r3, #21
    6b34:	0fc9      	lsrs	r1, r1, #31
    6b36:	2400      	movs	r4, #0
    6b38:	42ab      	cmp	r3, r5
    6b3a:	dd11      	ble.n	6b60 <__aeabi_d2iz+0x38>
    6b3c:	4c10      	ldr	r4, [pc, #64]	; (6b80 <__aeabi_d2iz+0x58>)
    6b3e:	42a3      	cmp	r3, r4
    6b40:	dc10      	bgt.n	6b64 <__aeabi_d2iz+0x3c>
    6b42:	2480      	movs	r4, #128	; 0x80
    6b44:	0364      	lsls	r4, r4, #13
    6b46:	4322      	orrs	r2, r4
    6b48:	4c0e      	ldr	r4, [pc, #56]	; (6b84 <__aeabi_d2iz+0x5c>)
    6b4a:	1ae4      	subs	r4, r4, r3
    6b4c:	2c1f      	cmp	r4, #31
    6b4e:	dd0c      	ble.n	6b6a <__aeabi_d2iz+0x42>
    6b50:	480d      	ldr	r0, [pc, #52]	; (6b88 <__aeabi_d2iz+0x60>)
    6b52:	1ac3      	subs	r3, r0, r3
    6b54:	40da      	lsrs	r2, r3
    6b56:	0013      	movs	r3, r2
    6b58:	425c      	negs	r4, r3
    6b5a:	2900      	cmp	r1, #0
    6b5c:	d100      	bne.n	6b60 <__aeabi_d2iz+0x38>
    6b5e:	001c      	movs	r4, r3
    6b60:	0020      	movs	r0, r4
    6b62:	bd30      	pop	{r4, r5, pc}
    6b64:	4b09      	ldr	r3, [pc, #36]	; (6b8c <__aeabi_d2iz+0x64>)
    6b66:	18cc      	adds	r4, r1, r3
    6b68:	e7fa      	b.n	6b60 <__aeabi_d2iz+0x38>
    6b6a:	40e0      	lsrs	r0, r4
    6b6c:	4c08      	ldr	r4, [pc, #32]	; (6b90 <__aeabi_d2iz+0x68>)
    6b6e:	46a4      	mov	ip, r4
    6b70:	4463      	add	r3, ip
    6b72:	409a      	lsls	r2, r3
    6b74:	0013      	movs	r3, r2
    6b76:	4303      	orrs	r3, r0
    6b78:	e7ee      	b.n	6b58 <__aeabi_d2iz+0x30>
    6b7a:	46c0      	nop			; (mov r8, r8)
    6b7c:	000003fe 	.word	0x000003fe
    6b80:	0000041d 	.word	0x0000041d
    6b84:	00000433 	.word	0x00000433
    6b88:	00000413 	.word	0x00000413
    6b8c:	7fffffff 	.word	0x7fffffff
    6b90:	fffffbed 	.word	0xfffffbed

00006b94 <__aeabi_ui2d>:
    6b94:	b570      	push	{r4, r5, r6, lr}
    6b96:	1e05      	subs	r5, r0, #0
    6b98:	d028      	beq.n	6bec <__aeabi_ui2d+0x58>
    6b9a:	f000 f833 	bl	6c04 <__clzsi2>
    6b9e:	4b15      	ldr	r3, [pc, #84]	; (6bf4 <__aeabi_ui2d+0x60>)
    6ba0:	4a15      	ldr	r2, [pc, #84]	; (6bf8 <__aeabi_ui2d+0x64>)
    6ba2:	1a1b      	subs	r3, r3, r0
    6ba4:	1ad2      	subs	r2, r2, r3
    6ba6:	2a1f      	cmp	r2, #31
    6ba8:	dd16      	ble.n	6bd8 <__aeabi_ui2d+0x44>
    6baa:	002c      	movs	r4, r5
    6bac:	4a13      	ldr	r2, [pc, #76]	; (6bfc <__aeabi_ui2d+0x68>)
    6bae:	2500      	movs	r5, #0
    6bb0:	1ad2      	subs	r2, r2, r3
    6bb2:	4094      	lsls	r4, r2
    6bb4:	055a      	lsls	r2, r3, #21
    6bb6:	0324      	lsls	r4, r4, #12
    6bb8:	0b24      	lsrs	r4, r4, #12
    6bba:	0d52      	lsrs	r2, r2, #21
    6bbc:	2100      	movs	r1, #0
    6bbe:	0324      	lsls	r4, r4, #12
    6bc0:	0d0b      	lsrs	r3, r1, #20
    6bc2:	0b24      	lsrs	r4, r4, #12
    6bc4:	051b      	lsls	r3, r3, #20
    6bc6:	4323      	orrs	r3, r4
    6bc8:	4c0d      	ldr	r4, [pc, #52]	; (6c00 <__aeabi_ui2d+0x6c>)
    6bca:	0512      	lsls	r2, r2, #20
    6bcc:	4023      	ands	r3, r4
    6bce:	4313      	orrs	r3, r2
    6bd0:	005b      	lsls	r3, r3, #1
    6bd2:	0028      	movs	r0, r5
    6bd4:	0859      	lsrs	r1, r3, #1
    6bd6:	bd70      	pop	{r4, r5, r6, pc}
    6bd8:	210b      	movs	r1, #11
    6bda:	002c      	movs	r4, r5
    6bdc:	1a08      	subs	r0, r1, r0
    6bde:	40c4      	lsrs	r4, r0
    6be0:	4095      	lsls	r5, r2
    6be2:	0324      	lsls	r4, r4, #12
    6be4:	055a      	lsls	r2, r3, #21
    6be6:	0b24      	lsrs	r4, r4, #12
    6be8:	0d52      	lsrs	r2, r2, #21
    6bea:	e7e7      	b.n	6bbc <__aeabi_ui2d+0x28>
    6bec:	2200      	movs	r2, #0
    6bee:	2400      	movs	r4, #0
    6bf0:	e7e4      	b.n	6bbc <__aeabi_ui2d+0x28>
    6bf2:	46c0      	nop			; (mov r8, r8)
    6bf4:	0000041e 	.word	0x0000041e
    6bf8:	00000433 	.word	0x00000433
    6bfc:	00000413 	.word	0x00000413
    6c00:	800fffff 	.word	0x800fffff

00006c04 <__clzsi2>:
    6c04:	211c      	movs	r1, #28
    6c06:	2301      	movs	r3, #1
    6c08:	041b      	lsls	r3, r3, #16
    6c0a:	4298      	cmp	r0, r3
    6c0c:	d301      	bcc.n	6c12 <__clzsi2+0xe>
    6c0e:	0c00      	lsrs	r0, r0, #16
    6c10:	3910      	subs	r1, #16
    6c12:	0a1b      	lsrs	r3, r3, #8
    6c14:	4298      	cmp	r0, r3
    6c16:	d301      	bcc.n	6c1c <__clzsi2+0x18>
    6c18:	0a00      	lsrs	r0, r0, #8
    6c1a:	3908      	subs	r1, #8
    6c1c:	091b      	lsrs	r3, r3, #4
    6c1e:	4298      	cmp	r0, r3
    6c20:	d301      	bcc.n	6c26 <__clzsi2+0x22>
    6c22:	0900      	lsrs	r0, r0, #4
    6c24:	3904      	subs	r1, #4
    6c26:	a202      	add	r2, pc, #8	; (adr r2, 6c30 <__clzsi2+0x2c>)
    6c28:	5c10      	ldrb	r0, [r2, r0]
    6c2a:	1840      	adds	r0, r0, r1
    6c2c:	4770      	bx	lr
    6c2e:	46c0      	nop			; (mov r8, r8)
    6c30:	02020304 	.word	0x02020304
    6c34:	01010101 	.word	0x01010101
	...

00006c40 <__libc_init_array>:
    6c40:	4b0e      	ldr	r3, [pc, #56]	; (6c7c <__libc_init_array+0x3c>)
    6c42:	b570      	push	{r4, r5, r6, lr}
    6c44:	2500      	movs	r5, #0
    6c46:	001e      	movs	r6, r3
    6c48:	4c0d      	ldr	r4, [pc, #52]	; (6c80 <__libc_init_array+0x40>)
    6c4a:	1ae4      	subs	r4, r4, r3
    6c4c:	10a4      	asrs	r4, r4, #2
    6c4e:	42a5      	cmp	r5, r4
    6c50:	d004      	beq.n	6c5c <__libc_init_array+0x1c>
    6c52:	00ab      	lsls	r3, r5, #2
    6c54:	58f3      	ldr	r3, [r6, r3]
    6c56:	4798      	blx	r3
    6c58:	3501      	adds	r5, #1
    6c5a:	e7f8      	b.n	6c4e <__libc_init_array+0xe>
    6c5c:	f001 f9c0 	bl	7fe0 <_init>
    6c60:	4b08      	ldr	r3, [pc, #32]	; (6c84 <__libc_init_array+0x44>)
    6c62:	2500      	movs	r5, #0
    6c64:	001e      	movs	r6, r3
    6c66:	4c08      	ldr	r4, [pc, #32]	; (6c88 <__libc_init_array+0x48>)
    6c68:	1ae4      	subs	r4, r4, r3
    6c6a:	10a4      	asrs	r4, r4, #2
    6c6c:	42a5      	cmp	r5, r4
    6c6e:	d004      	beq.n	6c7a <__libc_init_array+0x3a>
    6c70:	00ab      	lsls	r3, r5, #2
    6c72:	58f3      	ldr	r3, [r6, r3]
    6c74:	4798      	blx	r3
    6c76:	3501      	adds	r5, #1
    6c78:	e7f8      	b.n	6c6c <__libc_init_array+0x2c>
    6c7a:	bd70      	pop	{r4, r5, r6, pc}
    6c7c:	00007fec 	.word	0x00007fec
    6c80:	00007fec 	.word	0x00007fec
    6c84:	00007fec 	.word	0x00007fec
    6c88:	00007ff0 	.word	0x00007ff0

00006c8c <memcpy>:
    6c8c:	2300      	movs	r3, #0
    6c8e:	b510      	push	{r4, lr}
    6c90:	429a      	cmp	r2, r3
    6c92:	d003      	beq.n	6c9c <memcpy+0x10>
    6c94:	5ccc      	ldrb	r4, [r1, r3]
    6c96:	54c4      	strb	r4, [r0, r3]
    6c98:	3301      	adds	r3, #1
    6c9a:	e7f9      	b.n	6c90 <memcpy+0x4>
    6c9c:	bd10      	pop	{r4, pc}

00006c9e <memset>:
    6c9e:	0003      	movs	r3, r0
    6ca0:	1882      	adds	r2, r0, r2
    6ca2:	4293      	cmp	r3, r2
    6ca4:	d002      	beq.n	6cac <memset+0xe>
    6ca6:	7019      	strb	r1, [r3, #0]
    6ca8:	3301      	adds	r3, #1
    6caa:	e7fa      	b.n	6ca2 <memset+0x4>
    6cac:	4770      	bx	lr
	...

00006cb0 <iprintf>:
    6cb0:	b40f      	push	{r0, r1, r2, r3}
    6cb2:	4b0b      	ldr	r3, [pc, #44]	; (6ce0 <iprintf+0x30>)
    6cb4:	b513      	push	{r0, r1, r4, lr}
    6cb6:	681c      	ldr	r4, [r3, #0]
    6cb8:	2c00      	cmp	r4, #0
    6cba:	d005      	beq.n	6cc8 <iprintf+0x18>
    6cbc:	69a3      	ldr	r3, [r4, #24]
    6cbe:	2b00      	cmp	r3, #0
    6cc0:	d102      	bne.n	6cc8 <iprintf+0x18>
    6cc2:	0020      	movs	r0, r4
    6cc4:	f000 fb32 	bl	732c <__sinit>
    6cc8:	ab05      	add	r3, sp, #20
    6cca:	9a04      	ldr	r2, [sp, #16]
    6ccc:	68a1      	ldr	r1, [r4, #8]
    6cce:	0020      	movs	r0, r4
    6cd0:	9301      	str	r3, [sp, #4]
    6cd2:	f000 fcf1 	bl	76b8 <_vfiprintf_r>
    6cd6:	bc16      	pop	{r1, r2, r4}
    6cd8:	bc08      	pop	{r3}
    6cda:	b004      	add	sp, #16
    6cdc:	4718      	bx	r3
    6cde:	46c0      	nop			; (mov r8, r8)
    6ce0:	2000006c 	.word	0x2000006c

00006ce4 <_puts_r>:
    6ce4:	b570      	push	{r4, r5, r6, lr}
    6ce6:	0005      	movs	r5, r0
    6ce8:	000e      	movs	r6, r1
    6cea:	2800      	cmp	r0, #0
    6cec:	d004      	beq.n	6cf8 <_puts_r+0x14>
    6cee:	6983      	ldr	r3, [r0, #24]
    6cf0:	2b00      	cmp	r3, #0
    6cf2:	d101      	bne.n	6cf8 <_puts_r+0x14>
    6cf4:	f000 fb1a 	bl	732c <__sinit>
    6cf8:	69ab      	ldr	r3, [r5, #24]
    6cfa:	68ac      	ldr	r4, [r5, #8]
    6cfc:	2b00      	cmp	r3, #0
    6cfe:	d102      	bne.n	6d06 <_puts_r+0x22>
    6d00:	0028      	movs	r0, r5
    6d02:	f000 fb13 	bl	732c <__sinit>
    6d06:	4b25      	ldr	r3, [pc, #148]	; (6d9c <_puts_r+0xb8>)
    6d08:	429c      	cmp	r4, r3
    6d0a:	d101      	bne.n	6d10 <_puts_r+0x2c>
    6d0c:	686c      	ldr	r4, [r5, #4]
    6d0e:	e008      	b.n	6d22 <_puts_r+0x3e>
    6d10:	4b23      	ldr	r3, [pc, #140]	; (6da0 <_puts_r+0xbc>)
    6d12:	429c      	cmp	r4, r3
    6d14:	d101      	bne.n	6d1a <_puts_r+0x36>
    6d16:	68ac      	ldr	r4, [r5, #8]
    6d18:	e003      	b.n	6d22 <_puts_r+0x3e>
    6d1a:	4b22      	ldr	r3, [pc, #136]	; (6da4 <_puts_r+0xc0>)
    6d1c:	429c      	cmp	r4, r3
    6d1e:	d100      	bne.n	6d22 <_puts_r+0x3e>
    6d20:	68ec      	ldr	r4, [r5, #12]
    6d22:	89a3      	ldrh	r3, [r4, #12]
    6d24:	071b      	lsls	r3, r3, #28
    6d26:	d502      	bpl.n	6d2e <_puts_r+0x4a>
    6d28:	6923      	ldr	r3, [r4, #16]
    6d2a:	2b00      	cmp	r3, #0
    6d2c:	d111      	bne.n	6d52 <_puts_r+0x6e>
    6d2e:	0021      	movs	r1, r4
    6d30:	0028      	movs	r0, r5
    6d32:	f000 f991 	bl	7058 <__swsetup_r>
    6d36:	2800      	cmp	r0, #0
    6d38:	d00b      	beq.n	6d52 <_puts_r+0x6e>
    6d3a:	2001      	movs	r0, #1
    6d3c:	4240      	negs	r0, r0
    6d3e:	e02b      	b.n	6d98 <_puts_r+0xb4>
    6d40:	3b01      	subs	r3, #1
    6d42:	3601      	adds	r6, #1
    6d44:	60a3      	str	r3, [r4, #8]
    6d46:	2b00      	cmp	r3, #0
    6d48:	db08      	blt.n	6d5c <_puts_r+0x78>
    6d4a:	6823      	ldr	r3, [r4, #0]
    6d4c:	1c5a      	adds	r2, r3, #1
    6d4e:	6022      	str	r2, [r4, #0]
    6d50:	7019      	strb	r1, [r3, #0]
    6d52:	7831      	ldrb	r1, [r6, #0]
    6d54:	68a3      	ldr	r3, [r4, #8]
    6d56:	2900      	cmp	r1, #0
    6d58:	d1f2      	bne.n	6d40 <_puts_r+0x5c>
    6d5a:	e00b      	b.n	6d74 <_puts_r+0x90>
    6d5c:	69a2      	ldr	r2, [r4, #24]
    6d5e:	4293      	cmp	r3, r2
    6d60:	db01      	blt.n	6d66 <_puts_r+0x82>
    6d62:	290a      	cmp	r1, #10
    6d64:	d1f1      	bne.n	6d4a <_puts_r+0x66>
    6d66:	0022      	movs	r2, r4
    6d68:	0028      	movs	r0, r5
    6d6a:	f000 f91d 	bl	6fa8 <__swbuf_r>
    6d6e:	1c43      	adds	r3, r0, #1
    6d70:	d1ef      	bne.n	6d52 <_puts_r+0x6e>
    6d72:	e7e2      	b.n	6d3a <_puts_r+0x56>
    6d74:	3b01      	subs	r3, #1
    6d76:	60a3      	str	r3, [r4, #8]
    6d78:	2b00      	cmp	r3, #0
    6d7a:	da08      	bge.n	6d8e <_puts_r+0xaa>
    6d7c:	0022      	movs	r2, r4
    6d7e:	310a      	adds	r1, #10
    6d80:	0028      	movs	r0, r5
    6d82:	f000 f911 	bl	6fa8 <__swbuf_r>
    6d86:	1c43      	adds	r3, r0, #1
    6d88:	d0d7      	beq.n	6d3a <_puts_r+0x56>
    6d8a:	200a      	movs	r0, #10
    6d8c:	e004      	b.n	6d98 <_puts_r+0xb4>
    6d8e:	200a      	movs	r0, #10
    6d90:	6823      	ldr	r3, [r4, #0]
    6d92:	1c5a      	adds	r2, r3, #1
    6d94:	6022      	str	r2, [r4, #0]
    6d96:	7018      	strb	r0, [r3, #0]
    6d98:	bd70      	pop	{r4, r5, r6, pc}
    6d9a:	46c0      	nop			; (mov r8, r8)
    6d9c:	00007f4c 	.word	0x00007f4c
    6da0:	00007f6c 	.word	0x00007f6c
    6da4:	00007f8c 	.word	0x00007f8c

00006da8 <puts>:
    6da8:	b510      	push	{r4, lr}
    6daa:	4b03      	ldr	r3, [pc, #12]	; (6db8 <puts+0x10>)
    6dac:	0001      	movs	r1, r0
    6dae:	6818      	ldr	r0, [r3, #0]
    6db0:	f7ff ff98 	bl	6ce4 <_puts_r>
    6db4:	bd10      	pop	{r4, pc}
    6db6:	46c0      	nop			; (mov r8, r8)
    6db8:	2000006c 	.word	0x2000006c

00006dbc <rand>:
    6dbc:	4b15      	ldr	r3, [pc, #84]	; (6e14 <rand+0x58>)
    6dbe:	b510      	push	{r4, lr}
    6dc0:	681c      	ldr	r4, [r3, #0]
    6dc2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    6dc4:	2b00      	cmp	r3, #0
    6dc6:	d115      	bne.n	6df4 <rand+0x38>
    6dc8:	2018      	movs	r0, #24
    6dca:	f000 fba7 	bl	751c <malloc>
    6dce:	4b12      	ldr	r3, [pc, #72]	; (6e18 <rand+0x5c>)
    6dd0:	63a0      	str	r0, [r4, #56]	; 0x38
    6dd2:	8003      	strh	r3, [r0, #0]
    6dd4:	4b11      	ldr	r3, [pc, #68]	; (6e1c <rand+0x60>)
    6dd6:	2201      	movs	r2, #1
    6dd8:	8043      	strh	r3, [r0, #2]
    6dda:	4b11      	ldr	r3, [pc, #68]	; (6e20 <rand+0x64>)
    6ddc:	8083      	strh	r3, [r0, #4]
    6dde:	4b11      	ldr	r3, [pc, #68]	; (6e24 <rand+0x68>)
    6de0:	80c3      	strh	r3, [r0, #6]
    6de2:	4b11      	ldr	r3, [pc, #68]	; (6e28 <rand+0x6c>)
    6de4:	8103      	strh	r3, [r0, #8]
    6de6:	2305      	movs	r3, #5
    6de8:	8143      	strh	r3, [r0, #10]
    6dea:	3306      	adds	r3, #6
    6dec:	8183      	strh	r3, [r0, #12]
    6dee:	2300      	movs	r3, #0
    6df0:	6102      	str	r2, [r0, #16]
    6df2:	6143      	str	r3, [r0, #20]
    6df4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    6df6:	4a0d      	ldr	r2, [pc, #52]	; (6e2c <rand+0x70>)
    6df8:	6920      	ldr	r0, [r4, #16]
    6dfa:	6961      	ldr	r1, [r4, #20]
    6dfc:	4b0c      	ldr	r3, [pc, #48]	; (6e30 <rand+0x74>)
    6dfe:	f7fe fa57 	bl	52b0 <__aeabi_lmul>
    6e02:	2201      	movs	r2, #1
    6e04:	2300      	movs	r3, #0
    6e06:	1880      	adds	r0, r0, r2
    6e08:	4159      	adcs	r1, r3
    6e0a:	6120      	str	r0, [r4, #16]
    6e0c:	6161      	str	r1, [r4, #20]
    6e0e:	0048      	lsls	r0, r1, #1
    6e10:	0840      	lsrs	r0, r0, #1
    6e12:	bd10      	pop	{r4, pc}
    6e14:	2000006c 	.word	0x2000006c
    6e18:	0000330e 	.word	0x0000330e
    6e1c:	ffffabcd 	.word	0xffffabcd
    6e20:	00001234 	.word	0x00001234
    6e24:	ffffe66d 	.word	0xffffe66d
    6e28:	ffffdeec 	.word	0xffffdeec
    6e2c:	4c957f2d 	.word	0x4c957f2d
    6e30:	5851f42d 	.word	0x5851f42d

00006e34 <setbuf>:
    6e34:	424a      	negs	r2, r1
    6e36:	414a      	adcs	r2, r1
    6e38:	2380      	movs	r3, #128	; 0x80
    6e3a:	b510      	push	{r4, lr}
    6e3c:	0052      	lsls	r2, r2, #1
    6e3e:	00db      	lsls	r3, r3, #3
    6e40:	f000 f802 	bl	6e48 <setvbuf>
    6e44:	bd10      	pop	{r4, pc}
	...

00006e48 <setvbuf>:
    6e48:	b5f0      	push	{r4, r5, r6, r7, lr}
    6e4a:	001d      	movs	r5, r3
    6e4c:	4b51      	ldr	r3, [pc, #324]	; (6f94 <setvbuf+0x14c>)
    6e4e:	b085      	sub	sp, #20
    6e50:	681e      	ldr	r6, [r3, #0]
    6e52:	0004      	movs	r4, r0
    6e54:	000f      	movs	r7, r1
    6e56:	9200      	str	r2, [sp, #0]
    6e58:	2e00      	cmp	r6, #0
    6e5a:	d005      	beq.n	6e68 <setvbuf+0x20>
    6e5c:	69b3      	ldr	r3, [r6, #24]
    6e5e:	2b00      	cmp	r3, #0
    6e60:	d102      	bne.n	6e68 <setvbuf+0x20>
    6e62:	0030      	movs	r0, r6
    6e64:	f000 fa62 	bl	732c <__sinit>
    6e68:	4b4b      	ldr	r3, [pc, #300]	; (6f98 <setvbuf+0x150>)
    6e6a:	429c      	cmp	r4, r3
    6e6c:	d101      	bne.n	6e72 <setvbuf+0x2a>
    6e6e:	6874      	ldr	r4, [r6, #4]
    6e70:	e008      	b.n	6e84 <setvbuf+0x3c>
    6e72:	4b4a      	ldr	r3, [pc, #296]	; (6f9c <setvbuf+0x154>)
    6e74:	429c      	cmp	r4, r3
    6e76:	d101      	bne.n	6e7c <setvbuf+0x34>
    6e78:	68b4      	ldr	r4, [r6, #8]
    6e7a:	e003      	b.n	6e84 <setvbuf+0x3c>
    6e7c:	4b48      	ldr	r3, [pc, #288]	; (6fa0 <setvbuf+0x158>)
    6e7e:	429c      	cmp	r4, r3
    6e80:	d100      	bne.n	6e84 <setvbuf+0x3c>
    6e82:	68f4      	ldr	r4, [r6, #12]
    6e84:	9b00      	ldr	r3, [sp, #0]
    6e86:	2b02      	cmp	r3, #2
    6e88:	d005      	beq.n	6e96 <setvbuf+0x4e>
    6e8a:	2b01      	cmp	r3, #1
    6e8c:	d900      	bls.n	6e90 <setvbuf+0x48>
    6e8e:	e07c      	b.n	6f8a <setvbuf+0x142>
    6e90:	2d00      	cmp	r5, #0
    6e92:	da00      	bge.n	6e96 <setvbuf+0x4e>
    6e94:	e079      	b.n	6f8a <setvbuf+0x142>
    6e96:	0021      	movs	r1, r4
    6e98:	0030      	movs	r0, r6
    6e9a:	f000 f9d9 	bl	7250 <_fflush_r>
    6e9e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6ea0:	2900      	cmp	r1, #0
    6ea2:	d008      	beq.n	6eb6 <setvbuf+0x6e>
    6ea4:	0023      	movs	r3, r4
    6ea6:	3344      	adds	r3, #68	; 0x44
    6ea8:	4299      	cmp	r1, r3
    6eaa:	d002      	beq.n	6eb2 <setvbuf+0x6a>
    6eac:	0030      	movs	r0, r6
    6eae:	f000 fb3f 	bl	7530 <_free_r>
    6eb2:	2300      	movs	r3, #0
    6eb4:	6363      	str	r3, [r4, #52]	; 0x34
    6eb6:	2300      	movs	r3, #0
    6eb8:	61a3      	str	r3, [r4, #24]
    6eba:	6063      	str	r3, [r4, #4]
    6ebc:	89a3      	ldrh	r3, [r4, #12]
    6ebe:	061b      	lsls	r3, r3, #24
    6ec0:	d503      	bpl.n	6eca <setvbuf+0x82>
    6ec2:	6921      	ldr	r1, [r4, #16]
    6ec4:	0030      	movs	r0, r6
    6ec6:	f000 fb33 	bl	7530 <_free_r>
    6eca:	89a2      	ldrh	r2, [r4, #12]
    6ecc:	4b35      	ldr	r3, [pc, #212]	; (6fa4 <setvbuf+0x15c>)
    6ece:	4013      	ands	r3, r2
    6ed0:	81a3      	strh	r3, [r4, #12]
    6ed2:	9b00      	ldr	r3, [sp, #0]
    6ed4:	2b02      	cmp	r3, #2
    6ed6:	d021      	beq.n	6f1c <setvbuf+0xd4>
    6ed8:	ab03      	add	r3, sp, #12
    6eda:	aa02      	add	r2, sp, #8
    6edc:	0021      	movs	r1, r4
    6ede:	0030      	movs	r0, r6
    6ee0:	f000 fab8 	bl	7454 <__swhatbuf_r>
    6ee4:	89a3      	ldrh	r3, [r4, #12]
    6ee6:	4318      	orrs	r0, r3
    6ee8:	81a0      	strh	r0, [r4, #12]
    6eea:	2d00      	cmp	r5, #0
    6eec:	d101      	bne.n	6ef2 <setvbuf+0xaa>
    6eee:	9d02      	ldr	r5, [sp, #8]
    6ef0:	e001      	b.n	6ef6 <setvbuf+0xae>
    6ef2:	2f00      	cmp	r7, #0
    6ef4:	d125      	bne.n	6f42 <setvbuf+0xfa>
    6ef6:	0028      	movs	r0, r5
    6ef8:	f000 fb10 	bl	751c <malloc>
    6efc:	9501      	str	r5, [sp, #4]
    6efe:	1e07      	subs	r7, r0, #0
    6f00:	d11a      	bne.n	6f38 <setvbuf+0xf0>
    6f02:	9b02      	ldr	r3, [sp, #8]
    6f04:	9301      	str	r3, [sp, #4]
    6f06:	42ab      	cmp	r3, r5
    6f08:	d102      	bne.n	6f10 <setvbuf+0xc8>
    6f0a:	2001      	movs	r0, #1
    6f0c:	4240      	negs	r0, r0
    6f0e:	e006      	b.n	6f1e <setvbuf+0xd6>
    6f10:	9801      	ldr	r0, [sp, #4]
    6f12:	f000 fb03 	bl	751c <malloc>
    6f16:	1e07      	subs	r7, r0, #0
    6f18:	d10e      	bne.n	6f38 <setvbuf+0xf0>
    6f1a:	e7f6      	b.n	6f0a <setvbuf+0xc2>
    6f1c:	2000      	movs	r0, #0
    6f1e:	2202      	movs	r2, #2
    6f20:	89a3      	ldrh	r3, [r4, #12]
    6f22:	4313      	orrs	r3, r2
    6f24:	81a3      	strh	r3, [r4, #12]
    6f26:	2300      	movs	r3, #0
    6f28:	60a3      	str	r3, [r4, #8]
    6f2a:	0023      	movs	r3, r4
    6f2c:	3347      	adds	r3, #71	; 0x47
    6f2e:	6023      	str	r3, [r4, #0]
    6f30:	6123      	str	r3, [r4, #16]
    6f32:	2301      	movs	r3, #1
    6f34:	6163      	str	r3, [r4, #20]
    6f36:	e02a      	b.n	6f8e <setvbuf+0x146>
    6f38:	2280      	movs	r2, #128	; 0x80
    6f3a:	89a3      	ldrh	r3, [r4, #12]
    6f3c:	9d01      	ldr	r5, [sp, #4]
    6f3e:	4313      	orrs	r3, r2
    6f40:	81a3      	strh	r3, [r4, #12]
    6f42:	69b3      	ldr	r3, [r6, #24]
    6f44:	2b00      	cmp	r3, #0
    6f46:	d102      	bne.n	6f4e <setvbuf+0x106>
    6f48:	0030      	movs	r0, r6
    6f4a:	f000 f9ef 	bl	732c <__sinit>
    6f4e:	9b00      	ldr	r3, [sp, #0]
    6f50:	2b01      	cmp	r3, #1
    6f52:	d103      	bne.n	6f5c <setvbuf+0x114>
    6f54:	89a3      	ldrh	r3, [r4, #12]
    6f56:	9a00      	ldr	r2, [sp, #0]
    6f58:	431a      	orrs	r2, r3
    6f5a:	81a2      	strh	r2, [r4, #12]
    6f5c:	2308      	movs	r3, #8
    6f5e:	89a2      	ldrh	r2, [r4, #12]
    6f60:	6027      	str	r7, [r4, #0]
    6f62:	4013      	ands	r3, r2
    6f64:	6127      	str	r7, [r4, #16]
    6f66:	6165      	str	r5, [r4, #20]
    6f68:	1e18      	subs	r0, r3, #0
    6f6a:	d00c      	beq.n	6f86 <setvbuf+0x13e>
    6f6c:	2301      	movs	r3, #1
    6f6e:	401a      	ands	r2, r3
    6f70:	2300      	movs	r3, #0
    6f72:	1e10      	subs	r0, r2, #0
    6f74:	4298      	cmp	r0, r3
    6f76:	d004      	beq.n	6f82 <setvbuf+0x13a>
    6f78:	426d      	negs	r5, r5
    6f7a:	60a3      	str	r3, [r4, #8]
    6f7c:	61a5      	str	r5, [r4, #24]
    6f7e:	0018      	movs	r0, r3
    6f80:	e005      	b.n	6f8e <setvbuf+0x146>
    6f82:	60a5      	str	r5, [r4, #8]
    6f84:	e003      	b.n	6f8e <setvbuf+0x146>
    6f86:	60a3      	str	r3, [r4, #8]
    6f88:	e001      	b.n	6f8e <setvbuf+0x146>
    6f8a:	2001      	movs	r0, #1
    6f8c:	4240      	negs	r0, r0
    6f8e:	b005      	add	sp, #20
    6f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6f92:	46c0      	nop			; (mov r8, r8)
    6f94:	2000006c 	.word	0x2000006c
    6f98:	00007f4c 	.word	0x00007f4c
    6f9c:	00007f6c 	.word	0x00007f6c
    6fa0:	00007f8c 	.word	0x00007f8c
    6fa4:	fffff35c 	.word	0xfffff35c

00006fa8 <__swbuf_r>:
    6fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6faa:	0005      	movs	r5, r0
    6fac:	000f      	movs	r7, r1
    6fae:	0014      	movs	r4, r2
    6fb0:	2800      	cmp	r0, #0
    6fb2:	d004      	beq.n	6fbe <__swbuf_r+0x16>
    6fb4:	6983      	ldr	r3, [r0, #24]
    6fb6:	2b00      	cmp	r3, #0
    6fb8:	d101      	bne.n	6fbe <__swbuf_r+0x16>
    6fba:	f000 f9b7 	bl	732c <__sinit>
    6fbe:	4b23      	ldr	r3, [pc, #140]	; (704c <__swbuf_r+0xa4>)
    6fc0:	429c      	cmp	r4, r3
    6fc2:	d101      	bne.n	6fc8 <__swbuf_r+0x20>
    6fc4:	686c      	ldr	r4, [r5, #4]
    6fc6:	e008      	b.n	6fda <__swbuf_r+0x32>
    6fc8:	4b21      	ldr	r3, [pc, #132]	; (7050 <__swbuf_r+0xa8>)
    6fca:	429c      	cmp	r4, r3
    6fcc:	d101      	bne.n	6fd2 <__swbuf_r+0x2a>
    6fce:	68ac      	ldr	r4, [r5, #8]
    6fd0:	e003      	b.n	6fda <__swbuf_r+0x32>
    6fd2:	4b20      	ldr	r3, [pc, #128]	; (7054 <__swbuf_r+0xac>)
    6fd4:	429c      	cmp	r4, r3
    6fd6:	d100      	bne.n	6fda <__swbuf_r+0x32>
    6fd8:	68ec      	ldr	r4, [r5, #12]
    6fda:	69a3      	ldr	r3, [r4, #24]
    6fdc:	60a3      	str	r3, [r4, #8]
    6fde:	89a3      	ldrh	r3, [r4, #12]
    6fe0:	071b      	lsls	r3, r3, #28
    6fe2:	d50a      	bpl.n	6ffa <__swbuf_r+0x52>
    6fe4:	6923      	ldr	r3, [r4, #16]
    6fe6:	2b00      	cmp	r3, #0
    6fe8:	d007      	beq.n	6ffa <__swbuf_r+0x52>
    6fea:	6823      	ldr	r3, [r4, #0]
    6fec:	6922      	ldr	r2, [r4, #16]
    6fee:	b2fe      	uxtb	r6, r7
    6ff0:	1a98      	subs	r0, r3, r2
    6ff2:	6963      	ldr	r3, [r4, #20]
    6ff4:	4298      	cmp	r0, r3
    6ff6:	db0f      	blt.n	7018 <__swbuf_r+0x70>
    6ff8:	e008      	b.n	700c <__swbuf_r+0x64>
    6ffa:	0021      	movs	r1, r4
    6ffc:	0028      	movs	r0, r5
    6ffe:	f000 f82b 	bl	7058 <__swsetup_r>
    7002:	2800      	cmp	r0, #0
    7004:	d0f1      	beq.n	6fea <__swbuf_r+0x42>
    7006:	2001      	movs	r0, #1
    7008:	4240      	negs	r0, r0
    700a:	e01d      	b.n	7048 <__swbuf_r+0xa0>
    700c:	0021      	movs	r1, r4
    700e:	0028      	movs	r0, r5
    7010:	f000 f91e 	bl	7250 <_fflush_r>
    7014:	2800      	cmp	r0, #0
    7016:	d1f6      	bne.n	7006 <__swbuf_r+0x5e>
    7018:	68a3      	ldr	r3, [r4, #8]
    701a:	3001      	adds	r0, #1
    701c:	3b01      	subs	r3, #1
    701e:	60a3      	str	r3, [r4, #8]
    7020:	6823      	ldr	r3, [r4, #0]
    7022:	1c5a      	adds	r2, r3, #1
    7024:	6022      	str	r2, [r4, #0]
    7026:	701f      	strb	r7, [r3, #0]
    7028:	6963      	ldr	r3, [r4, #20]
    702a:	4298      	cmp	r0, r3
    702c:	d005      	beq.n	703a <__swbuf_r+0x92>
    702e:	89a3      	ldrh	r3, [r4, #12]
    7030:	0030      	movs	r0, r6
    7032:	07db      	lsls	r3, r3, #31
    7034:	d508      	bpl.n	7048 <__swbuf_r+0xa0>
    7036:	2e0a      	cmp	r6, #10
    7038:	d106      	bne.n	7048 <__swbuf_r+0xa0>
    703a:	0021      	movs	r1, r4
    703c:	0028      	movs	r0, r5
    703e:	f000 f907 	bl	7250 <_fflush_r>
    7042:	2800      	cmp	r0, #0
    7044:	d1df      	bne.n	7006 <__swbuf_r+0x5e>
    7046:	0030      	movs	r0, r6
    7048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    704a:	46c0      	nop			; (mov r8, r8)
    704c:	00007f4c 	.word	0x00007f4c
    7050:	00007f6c 	.word	0x00007f6c
    7054:	00007f8c 	.word	0x00007f8c

00007058 <__swsetup_r>:
    7058:	4b36      	ldr	r3, [pc, #216]	; (7134 <__swsetup_r+0xdc>)
    705a:	b570      	push	{r4, r5, r6, lr}
    705c:	681d      	ldr	r5, [r3, #0]
    705e:	0006      	movs	r6, r0
    7060:	000c      	movs	r4, r1
    7062:	2d00      	cmp	r5, #0
    7064:	d005      	beq.n	7072 <__swsetup_r+0x1a>
    7066:	69ab      	ldr	r3, [r5, #24]
    7068:	2b00      	cmp	r3, #0
    706a:	d102      	bne.n	7072 <__swsetup_r+0x1a>
    706c:	0028      	movs	r0, r5
    706e:	f000 f95d 	bl	732c <__sinit>
    7072:	4b31      	ldr	r3, [pc, #196]	; (7138 <__swsetup_r+0xe0>)
    7074:	429c      	cmp	r4, r3
    7076:	d101      	bne.n	707c <__swsetup_r+0x24>
    7078:	686c      	ldr	r4, [r5, #4]
    707a:	e008      	b.n	708e <__swsetup_r+0x36>
    707c:	4b2f      	ldr	r3, [pc, #188]	; (713c <__swsetup_r+0xe4>)
    707e:	429c      	cmp	r4, r3
    7080:	d101      	bne.n	7086 <__swsetup_r+0x2e>
    7082:	68ac      	ldr	r4, [r5, #8]
    7084:	e003      	b.n	708e <__swsetup_r+0x36>
    7086:	4b2e      	ldr	r3, [pc, #184]	; (7140 <__swsetup_r+0xe8>)
    7088:	429c      	cmp	r4, r3
    708a:	d100      	bne.n	708e <__swsetup_r+0x36>
    708c:	68ec      	ldr	r4, [r5, #12]
    708e:	220c      	movs	r2, #12
    7090:	5ea3      	ldrsh	r3, [r4, r2]
    7092:	b29a      	uxth	r2, r3
    7094:	0711      	lsls	r1, r2, #28
    7096:	d423      	bmi.n	70e0 <__swsetup_r+0x88>
    7098:	06d1      	lsls	r1, r2, #27
    709a:	d407      	bmi.n	70ac <__swsetup_r+0x54>
    709c:	2209      	movs	r2, #9
    709e:	2001      	movs	r0, #1
    70a0:	6032      	str	r2, [r6, #0]
    70a2:	3237      	adds	r2, #55	; 0x37
    70a4:	4313      	orrs	r3, r2
    70a6:	81a3      	strh	r3, [r4, #12]
    70a8:	4240      	negs	r0, r0
    70aa:	e042      	b.n	7132 <__swsetup_r+0xda>
    70ac:	0753      	lsls	r3, r2, #29
    70ae:	d513      	bpl.n	70d8 <__swsetup_r+0x80>
    70b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
    70b2:	2900      	cmp	r1, #0
    70b4:	d008      	beq.n	70c8 <__swsetup_r+0x70>
    70b6:	0023      	movs	r3, r4
    70b8:	3344      	adds	r3, #68	; 0x44
    70ba:	4299      	cmp	r1, r3
    70bc:	d002      	beq.n	70c4 <__swsetup_r+0x6c>
    70be:	0030      	movs	r0, r6
    70c0:	f000 fa36 	bl	7530 <_free_r>
    70c4:	2300      	movs	r3, #0
    70c6:	6363      	str	r3, [r4, #52]	; 0x34
    70c8:	2224      	movs	r2, #36	; 0x24
    70ca:	89a3      	ldrh	r3, [r4, #12]
    70cc:	4393      	bics	r3, r2
    70ce:	81a3      	strh	r3, [r4, #12]
    70d0:	2300      	movs	r3, #0
    70d2:	6063      	str	r3, [r4, #4]
    70d4:	6923      	ldr	r3, [r4, #16]
    70d6:	6023      	str	r3, [r4, #0]
    70d8:	2208      	movs	r2, #8
    70da:	89a3      	ldrh	r3, [r4, #12]
    70dc:	4313      	orrs	r3, r2
    70de:	81a3      	strh	r3, [r4, #12]
    70e0:	6923      	ldr	r3, [r4, #16]
    70e2:	2b00      	cmp	r3, #0
    70e4:	d10b      	bne.n	70fe <__swsetup_r+0xa6>
    70e6:	23a0      	movs	r3, #160	; 0xa0
    70e8:	89a2      	ldrh	r2, [r4, #12]
    70ea:	009b      	lsls	r3, r3, #2
    70ec:	4013      	ands	r3, r2
    70ee:	2280      	movs	r2, #128	; 0x80
    70f0:	0092      	lsls	r2, r2, #2
    70f2:	4293      	cmp	r3, r2
    70f4:	d003      	beq.n	70fe <__swsetup_r+0xa6>
    70f6:	0021      	movs	r1, r4
    70f8:	0030      	movs	r0, r6
    70fa:	f000 f9d1 	bl	74a0 <__smakebuf_r>
    70fe:	2301      	movs	r3, #1
    7100:	89a2      	ldrh	r2, [r4, #12]
    7102:	4013      	ands	r3, r2
    7104:	d005      	beq.n	7112 <__swsetup_r+0xba>
    7106:	2300      	movs	r3, #0
    7108:	60a3      	str	r3, [r4, #8]
    710a:	6963      	ldr	r3, [r4, #20]
    710c:	425b      	negs	r3, r3
    710e:	61a3      	str	r3, [r4, #24]
    7110:	e003      	b.n	711a <__swsetup_r+0xc2>
    7112:	0792      	lsls	r2, r2, #30
    7114:	d400      	bmi.n	7118 <__swsetup_r+0xc0>
    7116:	6963      	ldr	r3, [r4, #20]
    7118:	60a3      	str	r3, [r4, #8]
    711a:	2000      	movs	r0, #0
    711c:	6923      	ldr	r3, [r4, #16]
    711e:	4283      	cmp	r3, r0
    7120:	d107      	bne.n	7132 <__swsetup_r+0xda>
    7122:	220c      	movs	r2, #12
    7124:	5ea3      	ldrsh	r3, [r4, r2]
    7126:	061a      	lsls	r2, r3, #24
    7128:	d503      	bpl.n	7132 <__swsetup_r+0xda>
    712a:	2240      	movs	r2, #64	; 0x40
    712c:	4313      	orrs	r3, r2
    712e:	81a3      	strh	r3, [r4, #12]
    7130:	3801      	subs	r0, #1
    7132:	bd70      	pop	{r4, r5, r6, pc}
    7134:	2000006c 	.word	0x2000006c
    7138:	00007f4c 	.word	0x00007f4c
    713c:	00007f6c 	.word	0x00007f6c
    7140:	00007f8c 	.word	0x00007f8c

00007144 <__sflush_r>:
    7144:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7146:	898a      	ldrh	r2, [r1, #12]
    7148:	0005      	movs	r5, r0
    714a:	000c      	movs	r4, r1
    714c:	0713      	lsls	r3, r2, #28
    714e:	d45a      	bmi.n	7206 <__sflush_r+0xc2>
    7150:	684b      	ldr	r3, [r1, #4]
    7152:	2b00      	cmp	r3, #0
    7154:	dc02      	bgt.n	715c <__sflush_r+0x18>
    7156:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    7158:	2b00      	cmp	r3, #0
    715a:	dd19      	ble.n	7190 <__sflush_r+0x4c>
    715c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    715e:	2f00      	cmp	r7, #0
    7160:	d016      	beq.n	7190 <__sflush_r+0x4c>
    7162:	2300      	movs	r3, #0
    7164:	682e      	ldr	r6, [r5, #0]
    7166:	602b      	str	r3, [r5, #0]
    7168:	2380      	movs	r3, #128	; 0x80
    716a:	015b      	lsls	r3, r3, #5
    716c:	401a      	ands	r2, r3
    716e:	d001      	beq.n	7174 <__sflush_r+0x30>
    7170:	6d60      	ldr	r0, [r4, #84]	; 0x54
    7172:	e014      	b.n	719e <__sflush_r+0x5a>
    7174:	2301      	movs	r3, #1
    7176:	6a21      	ldr	r1, [r4, #32]
    7178:	0028      	movs	r0, r5
    717a:	47b8      	blx	r7
    717c:	1c43      	adds	r3, r0, #1
    717e:	d10e      	bne.n	719e <__sflush_r+0x5a>
    7180:	682b      	ldr	r3, [r5, #0]
    7182:	2b00      	cmp	r3, #0
    7184:	d00b      	beq.n	719e <__sflush_r+0x5a>
    7186:	2b1d      	cmp	r3, #29
    7188:	d001      	beq.n	718e <__sflush_r+0x4a>
    718a:	2b16      	cmp	r3, #22
    718c:	d102      	bne.n	7194 <__sflush_r+0x50>
    718e:	602e      	str	r6, [r5, #0]
    7190:	2000      	movs	r0, #0
    7192:	e05a      	b.n	724a <__sflush_r+0x106>
    7194:	2240      	movs	r2, #64	; 0x40
    7196:	89a3      	ldrh	r3, [r4, #12]
    7198:	4313      	orrs	r3, r2
    719a:	81a3      	strh	r3, [r4, #12]
    719c:	e055      	b.n	724a <__sflush_r+0x106>
    719e:	89a3      	ldrh	r3, [r4, #12]
    71a0:	075b      	lsls	r3, r3, #29
    71a2:	d506      	bpl.n	71b2 <__sflush_r+0x6e>
    71a4:	6863      	ldr	r3, [r4, #4]
    71a6:	1ac0      	subs	r0, r0, r3
    71a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    71aa:	2b00      	cmp	r3, #0
    71ac:	d001      	beq.n	71b2 <__sflush_r+0x6e>
    71ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
    71b0:	1ac0      	subs	r0, r0, r3
    71b2:	2300      	movs	r3, #0
    71b4:	0002      	movs	r2, r0
    71b6:	6a21      	ldr	r1, [r4, #32]
    71b8:	0028      	movs	r0, r5
    71ba:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    71bc:	47b8      	blx	r7
    71be:	89a3      	ldrh	r3, [r4, #12]
    71c0:	1c42      	adds	r2, r0, #1
    71c2:	d106      	bne.n	71d2 <__sflush_r+0x8e>
    71c4:	6829      	ldr	r1, [r5, #0]
    71c6:	291d      	cmp	r1, #29
    71c8:	d83a      	bhi.n	7240 <__sflush_r+0xfc>
    71ca:	4a20      	ldr	r2, [pc, #128]	; (724c <__sflush_r+0x108>)
    71cc:	40ca      	lsrs	r2, r1
    71ce:	07d2      	lsls	r2, r2, #31
    71d0:	d536      	bpl.n	7240 <__sflush_r+0xfc>
    71d2:	2200      	movs	r2, #0
    71d4:	6062      	str	r2, [r4, #4]
    71d6:	6922      	ldr	r2, [r4, #16]
    71d8:	6022      	str	r2, [r4, #0]
    71da:	04db      	lsls	r3, r3, #19
    71dc:	d505      	bpl.n	71ea <__sflush_r+0xa6>
    71de:	1c43      	adds	r3, r0, #1
    71e0:	d102      	bne.n	71e8 <__sflush_r+0xa4>
    71e2:	682b      	ldr	r3, [r5, #0]
    71e4:	2b00      	cmp	r3, #0
    71e6:	d100      	bne.n	71ea <__sflush_r+0xa6>
    71e8:	6560      	str	r0, [r4, #84]	; 0x54
    71ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
    71ec:	602e      	str	r6, [r5, #0]
    71ee:	2900      	cmp	r1, #0
    71f0:	d0ce      	beq.n	7190 <__sflush_r+0x4c>
    71f2:	0023      	movs	r3, r4
    71f4:	3344      	adds	r3, #68	; 0x44
    71f6:	4299      	cmp	r1, r3
    71f8:	d002      	beq.n	7200 <__sflush_r+0xbc>
    71fa:	0028      	movs	r0, r5
    71fc:	f000 f998 	bl	7530 <_free_r>
    7200:	2000      	movs	r0, #0
    7202:	6360      	str	r0, [r4, #52]	; 0x34
    7204:	e021      	b.n	724a <__sflush_r+0x106>
    7206:	690f      	ldr	r7, [r1, #16]
    7208:	2f00      	cmp	r7, #0
    720a:	d0c1      	beq.n	7190 <__sflush_r+0x4c>
    720c:	680b      	ldr	r3, [r1, #0]
    720e:	600f      	str	r7, [r1, #0]
    7210:	1bdb      	subs	r3, r3, r7
    7212:	9301      	str	r3, [sp, #4]
    7214:	2300      	movs	r3, #0
    7216:	0792      	lsls	r2, r2, #30
    7218:	d100      	bne.n	721c <__sflush_r+0xd8>
    721a:	694b      	ldr	r3, [r1, #20]
    721c:	60a3      	str	r3, [r4, #8]
    721e:	e003      	b.n	7228 <__sflush_r+0xe4>
    7220:	9b01      	ldr	r3, [sp, #4]
    7222:	183f      	adds	r7, r7, r0
    7224:	1a1b      	subs	r3, r3, r0
    7226:	9301      	str	r3, [sp, #4]
    7228:	9b01      	ldr	r3, [sp, #4]
    722a:	2b00      	cmp	r3, #0
    722c:	ddb0      	ble.n	7190 <__sflush_r+0x4c>
    722e:	9b01      	ldr	r3, [sp, #4]
    7230:	003a      	movs	r2, r7
    7232:	6a21      	ldr	r1, [r4, #32]
    7234:	0028      	movs	r0, r5
    7236:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    7238:	47b0      	blx	r6
    723a:	2800      	cmp	r0, #0
    723c:	dcf0      	bgt.n	7220 <__sflush_r+0xdc>
    723e:	89a3      	ldrh	r3, [r4, #12]
    7240:	2240      	movs	r2, #64	; 0x40
    7242:	2001      	movs	r0, #1
    7244:	4313      	orrs	r3, r2
    7246:	81a3      	strh	r3, [r4, #12]
    7248:	4240      	negs	r0, r0
    724a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    724c:	20400001 	.word	0x20400001

00007250 <_fflush_r>:
    7250:	690b      	ldr	r3, [r1, #16]
    7252:	b570      	push	{r4, r5, r6, lr}
    7254:	0005      	movs	r5, r0
    7256:	000c      	movs	r4, r1
    7258:	2b00      	cmp	r3, #0
    725a:	d101      	bne.n	7260 <_fflush_r+0x10>
    725c:	2000      	movs	r0, #0
    725e:	e01c      	b.n	729a <_fflush_r+0x4a>
    7260:	2800      	cmp	r0, #0
    7262:	d004      	beq.n	726e <_fflush_r+0x1e>
    7264:	6983      	ldr	r3, [r0, #24]
    7266:	2b00      	cmp	r3, #0
    7268:	d101      	bne.n	726e <_fflush_r+0x1e>
    726a:	f000 f85f 	bl	732c <__sinit>
    726e:	4b0b      	ldr	r3, [pc, #44]	; (729c <_fflush_r+0x4c>)
    7270:	429c      	cmp	r4, r3
    7272:	d101      	bne.n	7278 <_fflush_r+0x28>
    7274:	686c      	ldr	r4, [r5, #4]
    7276:	e008      	b.n	728a <_fflush_r+0x3a>
    7278:	4b09      	ldr	r3, [pc, #36]	; (72a0 <_fflush_r+0x50>)
    727a:	429c      	cmp	r4, r3
    727c:	d101      	bne.n	7282 <_fflush_r+0x32>
    727e:	68ac      	ldr	r4, [r5, #8]
    7280:	e003      	b.n	728a <_fflush_r+0x3a>
    7282:	4b08      	ldr	r3, [pc, #32]	; (72a4 <_fflush_r+0x54>)
    7284:	429c      	cmp	r4, r3
    7286:	d100      	bne.n	728a <_fflush_r+0x3a>
    7288:	68ec      	ldr	r4, [r5, #12]
    728a:	220c      	movs	r2, #12
    728c:	5ea3      	ldrsh	r3, [r4, r2]
    728e:	2b00      	cmp	r3, #0
    7290:	d0e4      	beq.n	725c <_fflush_r+0xc>
    7292:	0021      	movs	r1, r4
    7294:	0028      	movs	r0, r5
    7296:	f7ff ff55 	bl	7144 <__sflush_r>
    729a:	bd70      	pop	{r4, r5, r6, pc}
    729c:	00007f4c 	.word	0x00007f4c
    72a0:	00007f6c 	.word	0x00007f6c
    72a4:	00007f8c 	.word	0x00007f8c

000072a8 <_cleanup_r>:
    72a8:	b510      	push	{r4, lr}
    72aa:	4902      	ldr	r1, [pc, #8]	; (72b4 <_cleanup_r+0xc>)
    72ac:	f000 f8b0 	bl	7410 <_fwalk_reent>
    72b0:	bd10      	pop	{r4, pc}
    72b2:	46c0      	nop			; (mov r8, r8)
    72b4:	00007251 	.word	0x00007251

000072b8 <std.isra.0>:
    72b8:	2300      	movs	r3, #0
    72ba:	b510      	push	{r4, lr}
    72bc:	0004      	movs	r4, r0
    72be:	6003      	str	r3, [r0, #0]
    72c0:	6043      	str	r3, [r0, #4]
    72c2:	6083      	str	r3, [r0, #8]
    72c4:	8181      	strh	r1, [r0, #12]
    72c6:	6643      	str	r3, [r0, #100]	; 0x64
    72c8:	81c2      	strh	r2, [r0, #14]
    72ca:	6103      	str	r3, [r0, #16]
    72cc:	6143      	str	r3, [r0, #20]
    72ce:	6183      	str	r3, [r0, #24]
    72d0:	0019      	movs	r1, r3
    72d2:	2208      	movs	r2, #8
    72d4:	305c      	adds	r0, #92	; 0x5c
    72d6:	f7ff fce2 	bl	6c9e <memset>
    72da:	4b05      	ldr	r3, [pc, #20]	; (72f0 <std.isra.0+0x38>)
    72dc:	6224      	str	r4, [r4, #32]
    72de:	6263      	str	r3, [r4, #36]	; 0x24
    72e0:	4b04      	ldr	r3, [pc, #16]	; (72f4 <std.isra.0+0x3c>)
    72e2:	62a3      	str	r3, [r4, #40]	; 0x28
    72e4:	4b04      	ldr	r3, [pc, #16]	; (72f8 <std.isra.0+0x40>)
    72e6:	62e3      	str	r3, [r4, #44]	; 0x2c
    72e8:	4b04      	ldr	r3, [pc, #16]	; (72fc <std.isra.0+0x44>)
    72ea:	6323      	str	r3, [r4, #48]	; 0x30
    72ec:	bd10      	pop	{r4, pc}
    72ee:	46c0      	nop			; (mov r8, r8)
    72f0:	00007c35 	.word	0x00007c35
    72f4:	00007c5d 	.word	0x00007c5d
    72f8:	00007c95 	.word	0x00007c95
    72fc:	00007cc1 	.word	0x00007cc1

00007300 <__sfmoreglue>:
    7300:	b570      	push	{r4, r5, r6, lr}
    7302:	2568      	movs	r5, #104	; 0x68
    7304:	1e4b      	subs	r3, r1, #1
    7306:	435d      	muls	r5, r3
    7308:	000e      	movs	r6, r1
    730a:	0029      	movs	r1, r5
    730c:	3174      	adds	r1, #116	; 0x74
    730e:	f000 f955 	bl	75bc <_malloc_r>
    7312:	1e04      	subs	r4, r0, #0
    7314:	d008      	beq.n	7328 <__sfmoreglue+0x28>
    7316:	2100      	movs	r1, #0
    7318:	002a      	movs	r2, r5
    731a:	6001      	str	r1, [r0, #0]
    731c:	6046      	str	r6, [r0, #4]
    731e:	300c      	adds	r0, #12
    7320:	60a0      	str	r0, [r4, #8]
    7322:	3268      	adds	r2, #104	; 0x68
    7324:	f7ff fcbb 	bl	6c9e <memset>
    7328:	0020      	movs	r0, r4
    732a:	bd70      	pop	{r4, r5, r6, pc}

0000732c <__sinit>:
    732c:	6983      	ldr	r3, [r0, #24]
    732e:	b513      	push	{r0, r1, r4, lr}
    7330:	0004      	movs	r4, r0
    7332:	2b00      	cmp	r3, #0
    7334:	d128      	bne.n	7388 <__sinit+0x5c>
    7336:	6483      	str	r3, [r0, #72]	; 0x48
    7338:	64c3      	str	r3, [r0, #76]	; 0x4c
    733a:	6503      	str	r3, [r0, #80]	; 0x50
    733c:	4b13      	ldr	r3, [pc, #76]	; (738c <__sinit+0x60>)
    733e:	4a14      	ldr	r2, [pc, #80]	; (7390 <__sinit+0x64>)
    7340:	681b      	ldr	r3, [r3, #0]
    7342:	6282      	str	r2, [r0, #40]	; 0x28
    7344:	9301      	str	r3, [sp, #4]
    7346:	4298      	cmp	r0, r3
    7348:	d101      	bne.n	734e <__sinit+0x22>
    734a:	2301      	movs	r3, #1
    734c:	6183      	str	r3, [r0, #24]
    734e:	0020      	movs	r0, r4
    7350:	f000 f820 	bl	7394 <__sfp>
    7354:	6060      	str	r0, [r4, #4]
    7356:	0020      	movs	r0, r4
    7358:	f000 f81c 	bl	7394 <__sfp>
    735c:	60a0      	str	r0, [r4, #8]
    735e:	0020      	movs	r0, r4
    7360:	f000 f818 	bl	7394 <__sfp>
    7364:	2200      	movs	r2, #0
    7366:	60e0      	str	r0, [r4, #12]
    7368:	2104      	movs	r1, #4
    736a:	6860      	ldr	r0, [r4, #4]
    736c:	f7ff ffa4 	bl	72b8 <std.isra.0>
    7370:	2201      	movs	r2, #1
    7372:	2109      	movs	r1, #9
    7374:	68a0      	ldr	r0, [r4, #8]
    7376:	f7ff ff9f 	bl	72b8 <std.isra.0>
    737a:	2202      	movs	r2, #2
    737c:	2112      	movs	r1, #18
    737e:	68e0      	ldr	r0, [r4, #12]
    7380:	f7ff ff9a 	bl	72b8 <std.isra.0>
    7384:	2301      	movs	r3, #1
    7386:	61a3      	str	r3, [r4, #24]
    7388:	bd13      	pop	{r0, r1, r4, pc}
    738a:	46c0      	nop			; (mov r8, r8)
    738c:	00007f48 	.word	0x00007f48
    7390:	000072a9 	.word	0x000072a9

00007394 <__sfp>:
    7394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7396:	4b1d      	ldr	r3, [pc, #116]	; (740c <__sfp+0x78>)
    7398:	0006      	movs	r6, r0
    739a:	681d      	ldr	r5, [r3, #0]
    739c:	69ab      	ldr	r3, [r5, #24]
    739e:	2b00      	cmp	r3, #0
    73a0:	d102      	bne.n	73a8 <__sfp+0x14>
    73a2:	0028      	movs	r0, r5
    73a4:	f7ff ffc2 	bl	732c <__sinit>
    73a8:	3548      	adds	r5, #72	; 0x48
    73aa:	68ac      	ldr	r4, [r5, #8]
    73ac:	686b      	ldr	r3, [r5, #4]
    73ae:	3b01      	subs	r3, #1
    73b0:	d405      	bmi.n	73be <__sfp+0x2a>
    73b2:	220c      	movs	r2, #12
    73b4:	5ea7      	ldrsh	r7, [r4, r2]
    73b6:	2f00      	cmp	r7, #0
    73b8:	d010      	beq.n	73dc <__sfp+0x48>
    73ba:	3468      	adds	r4, #104	; 0x68
    73bc:	e7f7      	b.n	73ae <__sfp+0x1a>
    73be:	682b      	ldr	r3, [r5, #0]
    73c0:	2b00      	cmp	r3, #0
    73c2:	d001      	beq.n	73c8 <__sfp+0x34>
    73c4:	682d      	ldr	r5, [r5, #0]
    73c6:	e7f0      	b.n	73aa <__sfp+0x16>
    73c8:	2104      	movs	r1, #4
    73ca:	0030      	movs	r0, r6
    73cc:	f7ff ff98 	bl	7300 <__sfmoreglue>
    73d0:	6028      	str	r0, [r5, #0]
    73d2:	2800      	cmp	r0, #0
    73d4:	d1f6      	bne.n	73c4 <__sfp+0x30>
    73d6:	230c      	movs	r3, #12
    73d8:	6033      	str	r3, [r6, #0]
    73da:	e016      	b.n	740a <__sfp+0x76>
    73dc:	2301      	movs	r3, #1
    73de:	0020      	movs	r0, r4
    73e0:	425b      	negs	r3, r3
    73e2:	81e3      	strh	r3, [r4, #14]
    73e4:	3302      	adds	r3, #2
    73e6:	81a3      	strh	r3, [r4, #12]
    73e8:	6667      	str	r7, [r4, #100]	; 0x64
    73ea:	6027      	str	r7, [r4, #0]
    73ec:	60a7      	str	r7, [r4, #8]
    73ee:	6067      	str	r7, [r4, #4]
    73f0:	6127      	str	r7, [r4, #16]
    73f2:	6167      	str	r7, [r4, #20]
    73f4:	61a7      	str	r7, [r4, #24]
    73f6:	305c      	adds	r0, #92	; 0x5c
    73f8:	2208      	movs	r2, #8
    73fa:	0039      	movs	r1, r7
    73fc:	f7ff fc4f 	bl	6c9e <memset>
    7400:	0020      	movs	r0, r4
    7402:	6367      	str	r7, [r4, #52]	; 0x34
    7404:	63a7      	str	r7, [r4, #56]	; 0x38
    7406:	64a7      	str	r7, [r4, #72]	; 0x48
    7408:	64e7      	str	r7, [r4, #76]	; 0x4c
    740a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    740c:	00007f48 	.word	0x00007f48

00007410 <_fwalk_reent>:
    7410:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7412:	0004      	movs	r4, r0
    7414:	0007      	movs	r7, r0
    7416:	2600      	movs	r6, #0
    7418:	9101      	str	r1, [sp, #4]
    741a:	3448      	adds	r4, #72	; 0x48
    741c:	2c00      	cmp	r4, #0
    741e:	d016      	beq.n	744e <_fwalk_reent+0x3e>
    7420:	6863      	ldr	r3, [r4, #4]
    7422:	68a5      	ldr	r5, [r4, #8]
    7424:	9300      	str	r3, [sp, #0]
    7426:	9b00      	ldr	r3, [sp, #0]
    7428:	3b01      	subs	r3, #1
    742a:	9300      	str	r3, [sp, #0]
    742c:	d40d      	bmi.n	744a <_fwalk_reent+0x3a>
    742e:	89ab      	ldrh	r3, [r5, #12]
    7430:	2b01      	cmp	r3, #1
    7432:	d908      	bls.n	7446 <_fwalk_reent+0x36>
    7434:	220e      	movs	r2, #14
    7436:	5eab      	ldrsh	r3, [r5, r2]
    7438:	3301      	adds	r3, #1
    743a:	d004      	beq.n	7446 <_fwalk_reent+0x36>
    743c:	0029      	movs	r1, r5
    743e:	0038      	movs	r0, r7
    7440:	9b01      	ldr	r3, [sp, #4]
    7442:	4798      	blx	r3
    7444:	4306      	orrs	r6, r0
    7446:	3568      	adds	r5, #104	; 0x68
    7448:	e7ed      	b.n	7426 <_fwalk_reent+0x16>
    744a:	6824      	ldr	r4, [r4, #0]
    744c:	e7e6      	b.n	741c <_fwalk_reent+0xc>
    744e:	0030      	movs	r0, r6
    7450:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00007454 <__swhatbuf_r>:
    7454:	b570      	push	{r4, r5, r6, lr}
    7456:	000e      	movs	r6, r1
    7458:	001d      	movs	r5, r3
    745a:	230e      	movs	r3, #14
    745c:	5ec9      	ldrsh	r1, [r1, r3]
    745e:	b090      	sub	sp, #64	; 0x40
    7460:	0014      	movs	r4, r2
    7462:	2900      	cmp	r1, #0
    7464:	da06      	bge.n	7474 <__swhatbuf_r+0x20>
    7466:	2300      	movs	r3, #0
    7468:	602b      	str	r3, [r5, #0]
    746a:	89b3      	ldrh	r3, [r6, #12]
    746c:	061b      	lsls	r3, r3, #24
    746e:	d50f      	bpl.n	7490 <__swhatbuf_r+0x3c>
    7470:	2340      	movs	r3, #64	; 0x40
    7472:	e00f      	b.n	7494 <__swhatbuf_r+0x40>
    7474:	aa01      	add	r2, sp, #4
    7476:	f000 fc4f 	bl	7d18 <_fstat_r>
    747a:	2800      	cmp	r0, #0
    747c:	dbf3      	blt.n	7466 <__swhatbuf_r+0x12>
    747e:	23f0      	movs	r3, #240	; 0xf0
    7480:	9a02      	ldr	r2, [sp, #8]
    7482:	021b      	lsls	r3, r3, #8
    7484:	4013      	ands	r3, r2
    7486:	4a05      	ldr	r2, [pc, #20]	; (749c <__swhatbuf_r+0x48>)
    7488:	189b      	adds	r3, r3, r2
    748a:	425a      	negs	r2, r3
    748c:	4153      	adcs	r3, r2
    748e:	602b      	str	r3, [r5, #0]
    7490:	2380      	movs	r3, #128	; 0x80
    7492:	00db      	lsls	r3, r3, #3
    7494:	2000      	movs	r0, #0
    7496:	6023      	str	r3, [r4, #0]
    7498:	b010      	add	sp, #64	; 0x40
    749a:	bd70      	pop	{r4, r5, r6, pc}
    749c:	ffffe000 	.word	0xffffe000

000074a0 <__smakebuf_r>:
    74a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    74a2:	2602      	movs	r6, #2
    74a4:	898b      	ldrh	r3, [r1, #12]
    74a6:	0005      	movs	r5, r0
    74a8:	000c      	movs	r4, r1
    74aa:	4233      	tst	r3, r6
    74ac:	d110      	bne.n	74d0 <__smakebuf_r+0x30>
    74ae:	ab01      	add	r3, sp, #4
    74b0:	466a      	mov	r2, sp
    74b2:	f7ff ffcf 	bl	7454 <__swhatbuf_r>
    74b6:	9900      	ldr	r1, [sp, #0]
    74b8:	0007      	movs	r7, r0
    74ba:	0028      	movs	r0, r5
    74bc:	f000 f87e 	bl	75bc <_malloc_r>
    74c0:	2800      	cmp	r0, #0
    74c2:	d10c      	bne.n	74de <__smakebuf_r+0x3e>
    74c4:	220c      	movs	r2, #12
    74c6:	5ea3      	ldrsh	r3, [r4, r2]
    74c8:	059a      	lsls	r2, r3, #22
    74ca:	d423      	bmi.n	7514 <__smakebuf_r+0x74>
    74cc:	4333      	orrs	r3, r6
    74ce:	81a3      	strh	r3, [r4, #12]
    74d0:	0023      	movs	r3, r4
    74d2:	3347      	adds	r3, #71	; 0x47
    74d4:	6023      	str	r3, [r4, #0]
    74d6:	6123      	str	r3, [r4, #16]
    74d8:	2301      	movs	r3, #1
    74da:	6163      	str	r3, [r4, #20]
    74dc:	e01a      	b.n	7514 <__smakebuf_r+0x74>
    74de:	2280      	movs	r2, #128	; 0x80
    74e0:	4b0d      	ldr	r3, [pc, #52]	; (7518 <__smakebuf_r+0x78>)
    74e2:	62ab      	str	r3, [r5, #40]	; 0x28
    74e4:	89a3      	ldrh	r3, [r4, #12]
    74e6:	6020      	str	r0, [r4, #0]
    74e8:	4313      	orrs	r3, r2
    74ea:	81a3      	strh	r3, [r4, #12]
    74ec:	9b00      	ldr	r3, [sp, #0]
    74ee:	6120      	str	r0, [r4, #16]
    74f0:	6163      	str	r3, [r4, #20]
    74f2:	9b01      	ldr	r3, [sp, #4]
    74f4:	2b00      	cmp	r3, #0
    74f6:	d00a      	beq.n	750e <__smakebuf_r+0x6e>
    74f8:	230e      	movs	r3, #14
    74fa:	5ee1      	ldrsh	r1, [r4, r3]
    74fc:	0028      	movs	r0, r5
    74fe:	f000 fc1d 	bl	7d3c <_isatty_r>
    7502:	2800      	cmp	r0, #0
    7504:	d003      	beq.n	750e <__smakebuf_r+0x6e>
    7506:	2201      	movs	r2, #1
    7508:	89a3      	ldrh	r3, [r4, #12]
    750a:	4313      	orrs	r3, r2
    750c:	81a3      	strh	r3, [r4, #12]
    750e:	89a3      	ldrh	r3, [r4, #12]
    7510:	431f      	orrs	r7, r3
    7512:	81a7      	strh	r7, [r4, #12]
    7514:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    7516:	46c0      	nop			; (mov r8, r8)
    7518:	000072a9 	.word	0x000072a9

0000751c <malloc>:
    751c:	b510      	push	{r4, lr}
    751e:	4b03      	ldr	r3, [pc, #12]	; (752c <malloc+0x10>)
    7520:	0001      	movs	r1, r0
    7522:	6818      	ldr	r0, [r3, #0]
    7524:	f000 f84a 	bl	75bc <_malloc_r>
    7528:	bd10      	pop	{r4, pc}
    752a:	46c0      	nop			; (mov r8, r8)
    752c:	2000006c 	.word	0x2000006c

00007530 <_free_r>:
    7530:	b530      	push	{r4, r5, lr}
    7532:	2900      	cmp	r1, #0
    7534:	d03e      	beq.n	75b4 <_free_r+0x84>
    7536:	3904      	subs	r1, #4
    7538:	680b      	ldr	r3, [r1, #0]
    753a:	2b00      	cmp	r3, #0
    753c:	da00      	bge.n	7540 <_free_r+0x10>
    753e:	18c9      	adds	r1, r1, r3
    7540:	4a1d      	ldr	r2, [pc, #116]	; (75b8 <_free_r+0x88>)
    7542:	6813      	ldr	r3, [r2, #0]
    7544:	0014      	movs	r4, r2
    7546:	2b00      	cmp	r3, #0
    7548:	d102      	bne.n	7550 <_free_r+0x20>
    754a:	604b      	str	r3, [r1, #4]
    754c:	6011      	str	r1, [r2, #0]
    754e:	e031      	b.n	75b4 <_free_r+0x84>
    7550:	428b      	cmp	r3, r1
    7552:	d90d      	bls.n	7570 <_free_r+0x40>
    7554:	680a      	ldr	r2, [r1, #0]
    7556:	1888      	adds	r0, r1, r2
    7558:	4283      	cmp	r3, r0
    755a:	d103      	bne.n	7564 <_free_r+0x34>
    755c:	6818      	ldr	r0, [r3, #0]
    755e:	685b      	ldr	r3, [r3, #4]
    7560:	1882      	adds	r2, r0, r2
    7562:	600a      	str	r2, [r1, #0]
    7564:	604b      	str	r3, [r1, #4]
    7566:	6021      	str	r1, [r4, #0]
    7568:	e024      	b.n	75b4 <_free_r+0x84>
    756a:	428a      	cmp	r2, r1
    756c:	d803      	bhi.n	7576 <_free_r+0x46>
    756e:	0013      	movs	r3, r2
    7570:	685a      	ldr	r2, [r3, #4]
    7572:	2a00      	cmp	r2, #0
    7574:	d1f9      	bne.n	756a <_free_r+0x3a>
    7576:	681d      	ldr	r5, [r3, #0]
    7578:	195c      	adds	r4, r3, r5
    757a:	428c      	cmp	r4, r1
    757c:	d10b      	bne.n	7596 <_free_r+0x66>
    757e:	6809      	ldr	r1, [r1, #0]
    7580:	1869      	adds	r1, r5, r1
    7582:	1858      	adds	r0, r3, r1
    7584:	6019      	str	r1, [r3, #0]
    7586:	4282      	cmp	r2, r0
    7588:	d114      	bne.n	75b4 <_free_r+0x84>
    758a:	6810      	ldr	r0, [r2, #0]
    758c:	6852      	ldr	r2, [r2, #4]
    758e:	1841      	adds	r1, r0, r1
    7590:	6019      	str	r1, [r3, #0]
    7592:	605a      	str	r2, [r3, #4]
    7594:	e00e      	b.n	75b4 <_free_r+0x84>
    7596:	428c      	cmp	r4, r1
    7598:	d902      	bls.n	75a0 <_free_r+0x70>
    759a:	230c      	movs	r3, #12
    759c:	6003      	str	r3, [r0, #0]
    759e:	e009      	b.n	75b4 <_free_r+0x84>
    75a0:	6808      	ldr	r0, [r1, #0]
    75a2:	180c      	adds	r4, r1, r0
    75a4:	42a2      	cmp	r2, r4
    75a6:	d103      	bne.n	75b0 <_free_r+0x80>
    75a8:	6814      	ldr	r4, [r2, #0]
    75aa:	6852      	ldr	r2, [r2, #4]
    75ac:	1820      	adds	r0, r4, r0
    75ae:	6008      	str	r0, [r1, #0]
    75b0:	604a      	str	r2, [r1, #4]
    75b2:	6059      	str	r1, [r3, #4]
    75b4:	bd30      	pop	{r4, r5, pc}
    75b6:	46c0      	nop			; (mov r8, r8)
    75b8:	200007e4 	.word	0x200007e4

000075bc <_malloc_r>:
    75bc:	2303      	movs	r3, #3
    75be:	b570      	push	{r4, r5, r6, lr}
    75c0:	1ccd      	adds	r5, r1, #3
    75c2:	439d      	bics	r5, r3
    75c4:	3508      	adds	r5, #8
    75c6:	0006      	movs	r6, r0
    75c8:	2d0c      	cmp	r5, #12
    75ca:	d201      	bcs.n	75d0 <_malloc_r+0x14>
    75cc:	250c      	movs	r5, #12
    75ce:	e005      	b.n	75dc <_malloc_r+0x20>
    75d0:	2d00      	cmp	r5, #0
    75d2:	da03      	bge.n	75dc <_malloc_r+0x20>
    75d4:	230c      	movs	r3, #12
    75d6:	2000      	movs	r0, #0
    75d8:	6033      	str	r3, [r6, #0]
    75da:	e040      	b.n	765e <_malloc_r+0xa2>
    75dc:	42a9      	cmp	r1, r5
    75de:	d8f9      	bhi.n	75d4 <_malloc_r+0x18>
    75e0:	4b1f      	ldr	r3, [pc, #124]	; (7660 <_malloc_r+0xa4>)
    75e2:	681c      	ldr	r4, [r3, #0]
    75e4:	001a      	movs	r2, r3
    75e6:	0021      	movs	r1, r4
    75e8:	2900      	cmp	r1, #0
    75ea:	d013      	beq.n	7614 <_malloc_r+0x58>
    75ec:	680b      	ldr	r3, [r1, #0]
    75ee:	1b5b      	subs	r3, r3, r5
    75f0:	d40d      	bmi.n	760e <_malloc_r+0x52>
    75f2:	2b0b      	cmp	r3, #11
    75f4:	d902      	bls.n	75fc <_malloc_r+0x40>
    75f6:	600b      	str	r3, [r1, #0]
    75f8:	18cc      	adds	r4, r1, r3
    75fa:	e01e      	b.n	763a <_malloc_r+0x7e>
    75fc:	428c      	cmp	r4, r1
    75fe:	d102      	bne.n	7606 <_malloc_r+0x4a>
    7600:	6863      	ldr	r3, [r4, #4]
    7602:	6013      	str	r3, [r2, #0]
    7604:	e01a      	b.n	763c <_malloc_r+0x80>
    7606:	684b      	ldr	r3, [r1, #4]
    7608:	6063      	str	r3, [r4, #4]
    760a:	000c      	movs	r4, r1
    760c:	e016      	b.n	763c <_malloc_r+0x80>
    760e:	000c      	movs	r4, r1
    7610:	6849      	ldr	r1, [r1, #4]
    7612:	e7e9      	b.n	75e8 <_malloc_r+0x2c>
    7614:	4c13      	ldr	r4, [pc, #76]	; (7664 <_malloc_r+0xa8>)
    7616:	6823      	ldr	r3, [r4, #0]
    7618:	2b00      	cmp	r3, #0
    761a:	d103      	bne.n	7624 <_malloc_r+0x68>
    761c:	0030      	movs	r0, r6
    761e:	f000 faf7 	bl	7c10 <_sbrk_r>
    7622:	6020      	str	r0, [r4, #0]
    7624:	0029      	movs	r1, r5
    7626:	0030      	movs	r0, r6
    7628:	f000 faf2 	bl	7c10 <_sbrk_r>
    762c:	1c43      	adds	r3, r0, #1
    762e:	d0d1      	beq.n	75d4 <_malloc_r+0x18>
    7630:	2303      	movs	r3, #3
    7632:	1cc4      	adds	r4, r0, #3
    7634:	439c      	bics	r4, r3
    7636:	42a0      	cmp	r0, r4
    7638:	d10a      	bne.n	7650 <_malloc_r+0x94>
    763a:	6025      	str	r5, [r4, #0]
    763c:	0020      	movs	r0, r4
    763e:	2207      	movs	r2, #7
    7640:	300b      	adds	r0, #11
    7642:	1d23      	adds	r3, r4, #4
    7644:	4390      	bics	r0, r2
    7646:	1ac3      	subs	r3, r0, r3
    7648:	d009      	beq.n	765e <_malloc_r+0xa2>
    764a:	425a      	negs	r2, r3
    764c:	50e2      	str	r2, [r4, r3]
    764e:	e006      	b.n	765e <_malloc_r+0xa2>
    7650:	1a21      	subs	r1, r4, r0
    7652:	0030      	movs	r0, r6
    7654:	f000 fadc 	bl	7c10 <_sbrk_r>
    7658:	1c43      	adds	r3, r0, #1
    765a:	d1ee      	bne.n	763a <_malloc_r+0x7e>
    765c:	e7ba      	b.n	75d4 <_malloc_r+0x18>
    765e:	bd70      	pop	{r4, r5, r6, pc}
    7660:	200007e4 	.word	0x200007e4
    7664:	200007e0 	.word	0x200007e0

00007668 <__sfputc_r>:
    7668:	6893      	ldr	r3, [r2, #8]
    766a:	b510      	push	{r4, lr}
    766c:	3b01      	subs	r3, #1
    766e:	6093      	str	r3, [r2, #8]
    7670:	2b00      	cmp	r3, #0
    7672:	da05      	bge.n	7680 <__sfputc_r+0x18>
    7674:	6994      	ldr	r4, [r2, #24]
    7676:	42a3      	cmp	r3, r4
    7678:	db08      	blt.n	768c <__sfputc_r+0x24>
    767a:	b2cb      	uxtb	r3, r1
    767c:	2b0a      	cmp	r3, #10
    767e:	d005      	beq.n	768c <__sfputc_r+0x24>
    7680:	6813      	ldr	r3, [r2, #0]
    7682:	1c58      	adds	r0, r3, #1
    7684:	6010      	str	r0, [r2, #0]
    7686:	7019      	strb	r1, [r3, #0]
    7688:	b2c8      	uxtb	r0, r1
    768a:	e001      	b.n	7690 <__sfputc_r+0x28>
    768c:	f7ff fc8c 	bl	6fa8 <__swbuf_r>
    7690:	bd10      	pop	{r4, pc}

00007692 <__sfputs_r>:
    7692:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7694:	0006      	movs	r6, r0
    7696:	000f      	movs	r7, r1
    7698:	0014      	movs	r4, r2
    769a:	18d5      	adds	r5, r2, r3
    769c:	42ac      	cmp	r4, r5
    769e:	d008      	beq.n	76b2 <__sfputs_r+0x20>
    76a0:	7821      	ldrb	r1, [r4, #0]
    76a2:	003a      	movs	r2, r7
    76a4:	0030      	movs	r0, r6
    76a6:	f7ff ffdf 	bl	7668 <__sfputc_r>
    76aa:	3401      	adds	r4, #1
    76ac:	1c43      	adds	r3, r0, #1
    76ae:	d1f5      	bne.n	769c <__sfputs_r+0xa>
    76b0:	e000      	b.n	76b4 <__sfputs_r+0x22>
    76b2:	2000      	movs	r0, #0
    76b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000076b8 <_vfiprintf_r>:
    76b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    76ba:	b09f      	sub	sp, #124	; 0x7c
    76bc:	0006      	movs	r6, r0
    76be:	000f      	movs	r7, r1
    76c0:	9202      	str	r2, [sp, #8]
    76c2:	9305      	str	r3, [sp, #20]
    76c4:	2800      	cmp	r0, #0
    76c6:	d004      	beq.n	76d2 <_vfiprintf_r+0x1a>
    76c8:	6983      	ldr	r3, [r0, #24]
    76ca:	2b00      	cmp	r3, #0
    76cc:	d101      	bne.n	76d2 <_vfiprintf_r+0x1a>
    76ce:	f7ff fe2d 	bl	732c <__sinit>
    76d2:	4b7f      	ldr	r3, [pc, #508]	; (78d0 <_vfiprintf_r+0x218>)
    76d4:	429f      	cmp	r7, r3
    76d6:	d101      	bne.n	76dc <_vfiprintf_r+0x24>
    76d8:	6877      	ldr	r7, [r6, #4]
    76da:	e008      	b.n	76ee <_vfiprintf_r+0x36>
    76dc:	4b7d      	ldr	r3, [pc, #500]	; (78d4 <_vfiprintf_r+0x21c>)
    76de:	429f      	cmp	r7, r3
    76e0:	d101      	bne.n	76e6 <_vfiprintf_r+0x2e>
    76e2:	68b7      	ldr	r7, [r6, #8]
    76e4:	e003      	b.n	76ee <_vfiprintf_r+0x36>
    76e6:	4b7c      	ldr	r3, [pc, #496]	; (78d8 <_vfiprintf_r+0x220>)
    76e8:	429f      	cmp	r7, r3
    76ea:	d100      	bne.n	76ee <_vfiprintf_r+0x36>
    76ec:	68f7      	ldr	r7, [r6, #12]
    76ee:	89bb      	ldrh	r3, [r7, #12]
    76f0:	071b      	lsls	r3, r3, #28
    76f2:	d50a      	bpl.n	770a <_vfiprintf_r+0x52>
    76f4:	693b      	ldr	r3, [r7, #16]
    76f6:	2b00      	cmp	r3, #0
    76f8:	d007      	beq.n	770a <_vfiprintf_r+0x52>
    76fa:	2300      	movs	r3, #0
    76fc:	ad06      	add	r5, sp, #24
    76fe:	616b      	str	r3, [r5, #20]
    7700:	3320      	adds	r3, #32
    7702:	766b      	strb	r3, [r5, #25]
    7704:	3310      	adds	r3, #16
    7706:	76ab      	strb	r3, [r5, #26]
    7708:	e03d      	b.n	7786 <_vfiprintf_r+0xce>
    770a:	0039      	movs	r1, r7
    770c:	0030      	movs	r0, r6
    770e:	f7ff fca3 	bl	7058 <__swsetup_r>
    7712:	2800      	cmp	r0, #0
    7714:	d0f1      	beq.n	76fa <_vfiprintf_r+0x42>
    7716:	2001      	movs	r0, #1
    7718:	4240      	negs	r0, r0
    771a:	e0d6      	b.n	78ca <_vfiprintf_r+0x212>
    771c:	9a05      	ldr	r2, [sp, #20]
    771e:	1d11      	adds	r1, r2, #4
    7720:	6812      	ldr	r2, [r2, #0]
    7722:	9105      	str	r1, [sp, #20]
    7724:	2a00      	cmp	r2, #0
    7726:	da00      	bge.n	772a <_vfiprintf_r+0x72>
    7728:	e07f      	b.n	782a <_vfiprintf_r+0x172>
    772a:	9209      	str	r2, [sp, #36]	; 0x24
    772c:	3401      	adds	r4, #1
    772e:	7823      	ldrb	r3, [r4, #0]
    7730:	2b2e      	cmp	r3, #46	; 0x2e
    7732:	d100      	bne.n	7736 <_vfiprintf_r+0x7e>
    7734:	e08d      	b.n	7852 <_vfiprintf_r+0x19a>
    7736:	7821      	ldrb	r1, [r4, #0]
    7738:	2203      	movs	r2, #3
    773a:	4868      	ldr	r0, [pc, #416]	; (78dc <_vfiprintf_r+0x224>)
    773c:	f000 fb24 	bl	7d88 <memchr>
    7740:	2800      	cmp	r0, #0
    7742:	d007      	beq.n	7754 <_vfiprintf_r+0x9c>
    7744:	4b65      	ldr	r3, [pc, #404]	; (78dc <_vfiprintf_r+0x224>)
    7746:	682a      	ldr	r2, [r5, #0]
    7748:	1ac0      	subs	r0, r0, r3
    774a:	2340      	movs	r3, #64	; 0x40
    774c:	4083      	lsls	r3, r0
    774e:	4313      	orrs	r3, r2
    7750:	602b      	str	r3, [r5, #0]
    7752:	3401      	adds	r4, #1
    7754:	7821      	ldrb	r1, [r4, #0]
    7756:	1c63      	adds	r3, r4, #1
    7758:	2206      	movs	r2, #6
    775a:	4861      	ldr	r0, [pc, #388]	; (78e0 <_vfiprintf_r+0x228>)
    775c:	9302      	str	r3, [sp, #8]
    775e:	7629      	strb	r1, [r5, #24]
    7760:	f000 fb12 	bl	7d88 <memchr>
    7764:	2800      	cmp	r0, #0
    7766:	d100      	bne.n	776a <_vfiprintf_r+0xb2>
    7768:	e09d      	b.n	78a6 <_vfiprintf_r+0x1ee>
    776a:	4b5e      	ldr	r3, [pc, #376]	; (78e4 <_vfiprintf_r+0x22c>)
    776c:	2b00      	cmp	r3, #0
    776e:	d000      	beq.n	7772 <_vfiprintf_r+0xba>
    7770:	e090      	b.n	7894 <_vfiprintf_r+0x1dc>
    7772:	2207      	movs	r2, #7
    7774:	9b05      	ldr	r3, [sp, #20]
    7776:	3307      	adds	r3, #7
    7778:	4393      	bics	r3, r2
    777a:	3308      	adds	r3, #8
    777c:	9305      	str	r3, [sp, #20]
    777e:	696b      	ldr	r3, [r5, #20]
    7780:	9a03      	ldr	r2, [sp, #12]
    7782:	189b      	adds	r3, r3, r2
    7784:	616b      	str	r3, [r5, #20]
    7786:	9c02      	ldr	r4, [sp, #8]
    7788:	7823      	ldrb	r3, [r4, #0]
    778a:	2b00      	cmp	r3, #0
    778c:	d104      	bne.n	7798 <_vfiprintf_r+0xe0>
    778e:	9b02      	ldr	r3, [sp, #8]
    7790:	1ae3      	subs	r3, r4, r3
    7792:	9304      	str	r3, [sp, #16]
    7794:	d012      	beq.n	77bc <_vfiprintf_r+0x104>
    7796:	e003      	b.n	77a0 <_vfiprintf_r+0xe8>
    7798:	2b25      	cmp	r3, #37	; 0x25
    779a:	d0f8      	beq.n	778e <_vfiprintf_r+0xd6>
    779c:	3401      	adds	r4, #1
    779e:	e7f3      	b.n	7788 <_vfiprintf_r+0xd0>
    77a0:	9b04      	ldr	r3, [sp, #16]
    77a2:	9a02      	ldr	r2, [sp, #8]
    77a4:	0039      	movs	r1, r7
    77a6:	0030      	movs	r0, r6
    77a8:	f7ff ff73 	bl	7692 <__sfputs_r>
    77ac:	1c43      	adds	r3, r0, #1
    77ae:	d100      	bne.n	77b2 <_vfiprintf_r+0xfa>
    77b0:	e086      	b.n	78c0 <_vfiprintf_r+0x208>
    77b2:	696a      	ldr	r2, [r5, #20]
    77b4:	9b04      	ldr	r3, [sp, #16]
    77b6:	4694      	mov	ip, r2
    77b8:	4463      	add	r3, ip
    77ba:	616b      	str	r3, [r5, #20]
    77bc:	7823      	ldrb	r3, [r4, #0]
    77be:	2b00      	cmp	r3, #0
    77c0:	d07e      	beq.n	78c0 <_vfiprintf_r+0x208>
    77c2:	2201      	movs	r2, #1
    77c4:	2300      	movs	r3, #0
    77c6:	4252      	negs	r2, r2
    77c8:	606a      	str	r2, [r5, #4]
    77ca:	a902      	add	r1, sp, #8
    77cc:	3254      	adds	r2, #84	; 0x54
    77ce:	1852      	adds	r2, r2, r1
    77d0:	3401      	adds	r4, #1
    77d2:	602b      	str	r3, [r5, #0]
    77d4:	60eb      	str	r3, [r5, #12]
    77d6:	60ab      	str	r3, [r5, #8]
    77d8:	7013      	strb	r3, [r2, #0]
    77da:	65ab      	str	r3, [r5, #88]	; 0x58
    77dc:	7821      	ldrb	r1, [r4, #0]
    77de:	2205      	movs	r2, #5
    77e0:	4841      	ldr	r0, [pc, #260]	; (78e8 <_vfiprintf_r+0x230>)
    77e2:	f000 fad1 	bl	7d88 <memchr>
    77e6:	2800      	cmp	r0, #0
    77e8:	d008      	beq.n	77fc <_vfiprintf_r+0x144>
    77ea:	4b3f      	ldr	r3, [pc, #252]	; (78e8 <_vfiprintf_r+0x230>)
    77ec:	682a      	ldr	r2, [r5, #0]
    77ee:	1ac0      	subs	r0, r0, r3
    77f0:	2301      	movs	r3, #1
    77f2:	4083      	lsls	r3, r0
    77f4:	4313      	orrs	r3, r2
    77f6:	602b      	str	r3, [r5, #0]
    77f8:	3401      	adds	r4, #1
    77fa:	e7ef      	b.n	77dc <_vfiprintf_r+0x124>
    77fc:	682b      	ldr	r3, [r5, #0]
    77fe:	06da      	lsls	r2, r3, #27
    7800:	d504      	bpl.n	780c <_vfiprintf_r+0x154>
    7802:	2253      	movs	r2, #83	; 0x53
    7804:	2120      	movs	r1, #32
    7806:	a802      	add	r0, sp, #8
    7808:	1812      	adds	r2, r2, r0
    780a:	7011      	strb	r1, [r2, #0]
    780c:	071a      	lsls	r2, r3, #28
    780e:	d504      	bpl.n	781a <_vfiprintf_r+0x162>
    7810:	2253      	movs	r2, #83	; 0x53
    7812:	212b      	movs	r1, #43	; 0x2b
    7814:	a802      	add	r0, sp, #8
    7816:	1812      	adds	r2, r2, r0
    7818:	7011      	strb	r1, [r2, #0]
    781a:	7822      	ldrb	r2, [r4, #0]
    781c:	2a2a      	cmp	r2, #42	; 0x2a
    781e:	d100      	bne.n	7822 <_vfiprintf_r+0x16a>
    7820:	e77c      	b.n	771c <_vfiprintf_r+0x64>
    7822:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7824:	2000      	movs	r0, #0
    7826:	210a      	movs	r1, #10
    7828:	e005      	b.n	7836 <_vfiprintf_r+0x17e>
    782a:	4252      	negs	r2, r2
    782c:	60ea      	str	r2, [r5, #12]
    782e:	2202      	movs	r2, #2
    7830:	4313      	orrs	r3, r2
    7832:	602b      	str	r3, [r5, #0]
    7834:	e77a      	b.n	772c <_vfiprintf_r+0x74>
    7836:	7822      	ldrb	r2, [r4, #0]
    7838:	3a30      	subs	r2, #48	; 0x30
    783a:	2a09      	cmp	r2, #9
    783c:	d804      	bhi.n	7848 <_vfiprintf_r+0x190>
    783e:	434b      	muls	r3, r1
    7840:	3401      	adds	r4, #1
    7842:	189b      	adds	r3, r3, r2
    7844:	2001      	movs	r0, #1
    7846:	e7f6      	b.n	7836 <_vfiprintf_r+0x17e>
    7848:	2800      	cmp	r0, #0
    784a:	d100      	bne.n	784e <_vfiprintf_r+0x196>
    784c:	e76f      	b.n	772e <_vfiprintf_r+0x76>
    784e:	9309      	str	r3, [sp, #36]	; 0x24
    7850:	e76d      	b.n	772e <_vfiprintf_r+0x76>
    7852:	7863      	ldrb	r3, [r4, #1]
    7854:	2b2a      	cmp	r3, #42	; 0x2a
    7856:	d10a      	bne.n	786e <_vfiprintf_r+0x1b6>
    7858:	9b05      	ldr	r3, [sp, #20]
    785a:	3402      	adds	r4, #2
    785c:	1d1a      	adds	r2, r3, #4
    785e:	681b      	ldr	r3, [r3, #0]
    7860:	9205      	str	r2, [sp, #20]
    7862:	2b00      	cmp	r3, #0
    7864:	da01      	bge.n	786a <_vfiprintf_r+0x1b2>
    7866:	2301      	movs	r3, #1
    7868:	425b      	negs	r3, r3
    786a:	9307      	str	r3, [sp, #28]
    786c:	e763      	b.n	7736 <_vfiprintf_r+0x7e>
    786e:	2300      	movs	r3, #0
    7870:	200a      	movs	r0, #10
    7872:	001a      	movs	r2, r3
    7874:	3401      	adds	r4, #1
    7876:	606b      	str	r3, [r5, #4]
    7878:	7821      	ldrb	r1, [r4, #0]
    787a:	3930      	subs	r1, #48	; 0x30
    787c:	2909      	cmp	r1, #9
    787e:	d804      	bhi.n	788a <_vfiprintf_r+0x1d2>
    7880:	4342      	muls	r2, r0
    7882:	3401      	adds	r4, #1
    7884:	1852      	adds	r2, r2, r1
    7886:	2301      	movs	r3, #1
    7888:	e7f6      	b.n	7878 <_vfiprintf_r+0x1c0>
    788a:	2b00      	cmp	r3, #0
    788c:	d100      	bne.n	7890 <_vfiprintf_r+0x1d8>
    788e:	e752      	b.n	7736 <_vfiprintf_r+0x7e>
    7890:	9207      	str	r2, [sp, #28]
    7892:	e750      	b.n	7736 <_vfiprintf_r+0x7e>
    7894:	ab05      	add	r3, sp, #20
    7896:	9300      	str	r3, [sp, #0]
    7898:	003a      	movs	r2, r7
    789a:	4b14      	ldr	r3, [pc, #80]	; (78ec <_vfiprintf_r+0x234>)
    789c:	0029      	movs	r1, r5
    789e:	0030      	movs	r0, r6
    78a0:	e000      	b.n	78a4 <_vfiprintf_r+0x1ec>
    78a2:	bf00      	nop
    78a4:	e007      	b.n	78b6 <_vfiprintf_r+0x1fe>
    78a6:	ab05      	add	r3, sp, #20
    78a8:	9300      	str	r3, [sp, #0]
    78aa:	003a      	movs	r2, r7
    78ac:	4b0f      	ldr	r3, [pc, #60]	; (78ec <_vfiprintf_r+0x234>)
    78ae:	0029      	movs	r1, r5
    78b0:	0030      	movs	r0, r6
    78b2:	f000 f88b 	bl	79cc <_printf_i>
    78b6:	9003      	str	r0, [sp, #12]
    78b8:	9b03      	ldr	r3, [sp, #12]
    78ba:	3301      	adds	r3, #1
    78bc:	d000      	beq.n	78c0 <_vfiprintf_r+0x208>
    78be:	e75e      	b.n	777e <_vfiprintf_r+0xc6>
    78c0:	89bb      	ldrh	r3, [r7, #12]
    78c2:	065b      	lsls	r3, r3, #25
    78c4:	d500      	bpl.n	78c8 <_vfiprintf_r+0x210>
    78c6:	e726      	b.n	7716 <_vfiprintf_r+0x5e>
    78c8:	980b      	ldr	r0, [sp, #44]	; 0x2c
    78ca:	b01f      	add	sp, #124	; 0x7c
    78cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    78ce:	46c0      	nop			; (mov r8, r8)
    78d0:	00007f4c 	.word	0x00007f4c
    78d4:	00007f6c 	.word	0x00007f6c
    78d8:	00007f8c 	.word	0x00007f8c
    78dc:	00007fb2 	.word	0x00007fb2
    78e0:	00007fb6 	.word	0x00007fb6
    78e4:	00000000 	.word	0x00000000
    78e8:	00007fac 	.word	0x00007fac
    78ec:	00007693 	.word	0x00007693

000078f0 <_printf_common>:
    78f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    78f2:	0017      	movs	r7, r2
    78f4:	9301      	str	r3, [sp, #4]
    78f6:	688a      	ldr	r2, [r1, #8]
    78f8:	690b      	ldr	r3, [r1, #16]
    78fa:	9000      	str	r0, [sp, #0]
    78fc:	000c      	movs	r4, r1
    78fe:	4293      	cmp	r3, r2
    7900:	da00      	bge.n	7904 <_printf_common+0x14>
    7902:	0013      	movs	r3, r2
    7904:	0022      	movs	r2, r4
    7906:	603b      	str	r3, [r7, #0]
    7908:	3243      	adds	r2, #67	; 0x43
    790a:	7812      	ldrb	r2, [r2, #0]
    790c:	2a00      	cmp	r2, #0
    790e:	d001      	beq.n	7914 <_printf_common+0x24>
    7910:	3301      	adds	r3, #1
    7912:	603b      	str	r3, [r7, #0]
    7914:	6823      	ldr	r3, [r4, #0]
    7916:	069b      	lsls	r3, r3, #26
    7918:	d502      	bpl.n	7920 <_printf_common+0x30>
    791a:	683b      	ldr	r3, [r7, #0]
    791c:	3302      	adds	r3, #2
    791e:	603b      	str	r3, [r7, #0]
    7920:	2506      	movs	r5, #6
    7922:	6823      	ldr	r3, [r4, #0]
    7924:	401d      	ands	r5, r3
    7926:	d01e      	beq.n	7966 <_printf_common+0x76>
    7928:	0023      	movs	r3, r4
    792a:	3343      	adds	r3, #67	; 0x43
    792c:	781b      	ldrb	r3, [r3, #0]
    792e:	1e5a      	subs	r2, r3, #1
    7930:	4193      	sbcs	r3, r2
    7932:	6822      	ldr	r2, [r4, #0]
    7934:	0692      	lsls	r2, r2, #26
    7936:	d51c      	bpl.n	7972 <_printf_common+0x82>
    7938:	2030      	movs	r0, #48	; 0x30
    793a:	18e1      	adds	r1, r4, r3
    793c:	3143      	adds	r1, #67	; 0x43
    793e:	7008      	strb	r0, [r1, #0]
    7940:	0021      	movs	r1, r4
    7942:	1c5a      	adds	r2, r3, #1
    7944:	3145      	adds	r1, #69	; 0x45
    7946:	7809      	ldrb	r1, [r1, #0]
    7948:	18a2      	adds	r2, r4, r2
    794a:	3243      	adds	r2, #67	; 0x43
    794c:	3302      	adds	r3, #2
    794e:	7011      	strb	r1, [r2, #0]
    7950:	e00f      	b.n	7972 <_printf_common+0x82>
    7952:	0022      	movs	r2, r4
    7954:	2301      	movs	r3, #1
    7956:	3219      	adds	r2, #25
    7958:	9901      	ldr	r1, [sp, #4]
    795a:	9800      	ldr	r0, [sp, #0]
    795c:	9e08      	ldr	r6, [sp, #32]
    795e:	47b0      	blx	r6
    7960:	1c43      	adds	r3, r0, #1
    7962:	d00e      	beq.n	7982 <_printf_common+0x92>
    7964:	3501      	adds	r5, #1
    7966:	68e3      	ldr	r3, [r4, #12]
    7968:	683a      	ldr	r2, [r7, #0]
    796a:	1a9b      	subs	r3, r3, r2
    796c:	429d      	cmp	r5, r3
    796e:	dbf0      	blt.n	7952 <_printf_common+0x62>
    7970:	e7da      	b.n	7928 <_printf_common+0x38>
    7972:	0022      	movs	r2, r4
    7974:	9901      	ldr	r1, [sp, #4]
    7976:	3243      	adds	r2, #67	; 0x43
    7978:	9800      	ldr	r0, [sp, #0]
    797a:	9d08      	ldr	r5, [sp, #32]
    797c:	47a8      	blx	r5
    797e:	1c43      	adds	r3, r0, #1
    7980:	d102      	bne.n	7988 <_printf_common+0x98>
    7982:	2001      	movs	r0, #1
    7984:	4240      	negs	r0, r0
    7986:	e020      	b.n	79ca <_printf_common+0xda>
    7988:	2306      	movs	r3, #6
    798a:	6820      	ldr	r0, [r4, #0]
    798c:	68e1      	ldr	r1, [r4, #12]
    798e:	683a      	ldr	r2, [r7, #0]
    7990:	4003      	ands	r3, r0
    7992:	2500      	movs	r5, #0
    7994:	2b04      	cmp	r3, #4
    7996:	d103      	bne.n	79a0 <_printf_common+0xb0>
    7998:	1a8d      	subs	r5, r1, r2
    799a:	43eb      	mvns	r3, r5
    799c:	17db      	asrs	r3, r3, #31
    799e:	401d      	ands	r5, r3
    79a0:	68a3      	ldr	r3, [r4, #8]
    79a2:	6922      	ldr	r2, [r4, #16]
    79a4:	4293      	cmp	r3, r2
    79a6:	dd01      	ble.n	79ac <_printf_common+0xbc>
    79a8:	1a9b      	subs	r3, r3, r2
    79aa:	18ed      	adds	r5, r5, r3
    79ac:	2700      	movs	r7, #0
    79ae:	42bd      	cmp	r5, r7
    79b0:	d00a      	beq.n	79c8 <_printf_common+0xd8>
    79b2:	0022      	movs	r2, r4
    79b4:	2301      	movs	r3, #1
    79b6:	321a      	adds	r2, #26
    79b8:	9901      	ldr	r1, [sp, #4]
    79ba:	9800      	ldr	r0, [sp, #0]
    79bc:	9e08      	ldr	r6, [sp, #32]
    79be:	47b0      	blx	r6
    79c0:	1c43      	adds	r3, r0, #1
    79c2:	d0de      	beq.n	7982 <_printf_common+0x92>
    79c4:	3701      	adds	r7, #1
    79c6:	e7f2      	b.n	79ae <_printf_common+0xbe>
    79c8:	2000      	movs	r0, #0
    79ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

000079cc <_printf_i>:
    79cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    79ce:	b08b      	sub	sp, #44	; 0x2c
    79d0:	9206      	str	r2, [sp, #24]
    79d2:	000a      	movs	r2, r1
    79d4:	3243      	adds	r2, #67	; 0x43
    79d6:	9307      	str	r3, [sp, #28]
    79d8:	9005      	str	r0, [sp, #20]
    79da:	9204      	str	r2, [sp, #16]
    79dc:	7e0a      	ldrb	r2, [r1, #24]
    79de:	000c      	movs	r4, r1
    79e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    79e2:	2a6e      	cmp	r2, #110	; 0x6e
    79e4:	d100      	bne.n	79e8 <_printf_i+0x1c>
    79e6:	e0ab      	b.n	7b40 <_printf_i+0x174>
    79e8:	d811      	bhi.n	7a0e <_printf_i+0x42>
    79ea:	2a63      	cmp	r2, #99	; 0x63
    79ec:	d022      	beq.n	7a34 <_printf_i+0x68>
    79ee:	d809      	bhi.n	7a04 <_printf_i+0x38>
    79f0:	2a00      	cmp	r2, #0
    79f2:	d100      	bne.n	79f6 <_printf_i+0x2a>
    79f4:	e0b5      	b.n	7b62 <_printf_i+0x196>
    79f6:	2a58      	cmp	r2, #88	; 0x58
    79f8:	d000      	beq.n	79fc <_printf_i+0x30>
    79fa:	e0c5      	b.n	7b88 <_printf_i+0x1bc>
    79fc:	3145      	adds	r1, #69	; 0x45
    79fe:	700a      	strb	r2, [r1, #0]
    7a00:	4a81      	ldr	r2, [pc, #516]	; (7c08 <_printf_i+0x23c>)
    7a02:	e04f      	b.n	7aa4 <_printf_i+0xd8>
    7a04:	2a64      	cmp	r2, #100	; 0x64
    7a06:	d01d      	beq.n	7a44 <_printf_i+0x78>
    7a08:	2a69      	cmp	r2, #105	; 0x69
    7a0a:	d01b      	beq.n	7a44 <_printf_i+0x78>
    7a0c:	e0bc      	b.n	7b88 <_printf_i+0x1bc>
    7a0e:	2a73      	cmp	r2, #115	; 0x73
    7a10:	d100      	bne.n	7a14 <_printf_i+0x48>
    7a12:	e0aa      	b.n	7b6a <_printf_i+0x19e>
    7a14:	d809      	bhi.n	7a2a <_printf_i+0x5e>
    7a16:	2a6f      	cmp	r2, #111	; 0x6f
    7a18:	d029      	beq.n	7a6e <_printf_i+0xa2>
    7a1a:	2a70      	cmp	r2, #112	; 0x70
    7a1c:	d000      	beq.n	7a20 <_printf_i+0x54>
    7a1e:	e0b3      	b.n	7b88 <_printf_i+0x1bc>
    7a20:	2220      	movs	r2, #32
    7a22:	6809      	ldr	r1, [r1, #0]
    7a24:	430a      	orrs	r2, r1
    7a26:	6022      	str	r2, [r4, #0]
    7a28:	e037      	b.n	7a9a <_printf_i+0xce>
    7a2a:	2a75      	cmp	r2, #117	; 0x75
    7a2c:	d01f      	beq.n	7a6e <_printf_i+0xa2>
    7a2e:	2a78      	cmp	r2, #120	; 0x78
    7a30:	d033      	beq.n	7a9a <_printf_i+0xce>
    7a32:	e0a9      	b.n	7b88 <_printf_i+0x1bc>
    7a34:	000e      	movs	r6, r1
    7a36:	681a      	ldr	r2, [r3, #0]
    7a38:	3642      	adds	r6, #66	; 0x42
    7a3a:	1d11      	adds	r1, r2, #4
    7a3c:	6019      	str	r1, [r3, #0]
    7a3e:	6813      	ldr	r3, [r2, #0]
    7a40:	7033      	strb	r3, [r6, #0]
    7a42:	e0a4      	b.n	7b8e <_printf_i+0x1c2>
    7a44:	6821      	ldr	r1, [r4, #0]
    7a46:	681a      	ldr	r2, [r3, #0]
    7a48:	0608      	lsls	r0, r1, #24
    7a4a:	d406      	bmi.n	7a5a <_printf_i+0x8e>
    7a4c:	0649      	lsls	r1, r1, #25
    7a4e:	d504      	bpl.n	7a5a <_printf_i+0x8e>
    7a50:	1d11      	adds	r1, r2, #4
    7a52:	6019      	str	r1, [r3, #0]
    7a54:	2300      	movs	r3, #0
    7a56:	5ed5      	ldrsh	r5, [r2, r3]
    7a58:	e002      	b.n	7a60 <_printf_i+0x94>
    7a5a:	1d11      	adds	r1, r2, #4
    7a5c:	6019      	str	r1, [r3, #0]
    7a5e:	6815      	ldr	r5, [r2, #0]
    7a60:	2d00      	cmp	r5, #0
    7a62:	da3b      	bge.n	7adc <_printf_i+0x110>
    7a64:	232d      	movs	r3, #45	; 0x2d
    7a66:	9a04      	ldr	r2, [sp, #16]
    7a68:	426d      	negs	r5, r5
    7a6a:	7013      	strb	r3, [r2, #0]
    7a6c:	e036      	b.n	7adc <_printf_i+0x110>
    7a6e:	6821      	ldr	r1, [r4, #0]
    7a70:	681a      	ldr	r2, [r3, #0]
    7a72:	0608      	lsls	r0, r1, #24
    7a74:	d406      	bmi.n	7a84 <_printf_i+0xb8>
    7a76:	0649      	lsls	r1, r1, #25
    7a78:	d504      	bpl.n	7a84 <_printf_i+0xb8>
    7a7a:	6815      	ldr	r5, [r2, #0]
    7a7c:	1d11      	adds	r1, r2, #4
    7a7e:	6019      	str	r1, [r3, #0]
    7a80:	b2ad      	uxth	r5, r5
    7a82:	e002      	b.n	7a8a <_printf_i+0xbe>
    7a84:	1d11      	adds	r1, r2, #4
    7a86:	6019      	str	r1, [r3, #0]
    7a88:	6815      	ldr	r5, [r2, #0]
    7a8a:	4b5f      	ldr	r3, [pc, #380]	; (7c08 <_printf_i+0x23c>)
    7a8c:	7e22      	ldrb	r2, [r4, #24]
    7a8e:	9303      	str	r3, [sp, #12]
    7a90:	2708      	movs	r7, #8
    7a92:	2a6f      	cmp	r2, #111	; 0x6f
    7a94:	d01d      	beq.n	7ad2 <_printf_i+0x106>
    7a96:	270a      	movs	r7, #10
    7a98:	e01b      	b.n	7ad2 <_printf_i+0x106>
    7a9a:	0022      	movs	r2, r4
    7a9c:	2178      	movs	r1, #120	; 0x78
    7a9e:	3245      	adds	r2, #69	; 0x45
    7aa0:	7011      	strb	r1, [r2, #0]
    7aa2:	4a5a      	ldr	r2, [pc, #360]	; (7c0c <_printf_i+0x240>)
    7aa4:	6819      	ldr	r1, [r3, #0]
    7aa6:	9203      	str	r2, [sp, #12]
    7aa8:	1d08      	adds	r0, r1, #4
    7aaa:	6822      	ldr	r2, [r4, #0]
    7aac:	6018      	str	r0, [r3, #0]
    7aae:	680d      	ldr	r5, [r1, #0]
    7ab0:	0610      	lsls	r0, r2, #24
    7ab2:	d402      	bmi.n	7aba <_printf_i+0xee>
    7ab4:	0650      	lsls	r0, r2, #25
    7ab6:	d500      	bpl.n	7aba <_printf_i+0xee>
    7ab8:	b2ad      	uxth	r5, r5
    7aba:	07d3      	lsls	r3, r2, #31
    7abc:	d502      	bpl.n	7ac4 <_printf_i+0xf8>
    7abe:	2320      	movs	r3, #32
    7ac0:	431a      	orrs	r2, r3
    7ac2:	6022      	str	r2, [r4, #0]
    7ac4:	2710      	movs	r7, #16
    7ac6:	2d00      	cmp	r5, #0
    7ac8:	d103      	bne.n	7ad2 <_printf_i+0x106>
    7aca:	2320      	movs	r3, #32
    7acc:	6822      	ldr	r2, [r4, #0]
    7ace:	439a      	bics	r2, r3
    7ad0:	6022      	str	r2, [r4, #0]
    7ad2:	0023      	movs	r3, r4
    7ad4:	2200      	movs	r2, #0
    7ad6:	3343      	adds	r3, #67	; 0x43
    7ad8:	701a      	strb	r2, [r3, #0]
    7ada:	e002      	b.n	7ae2 <_printf_i+0x116>
    7adc:	270a      	movs	r7, #10
    7ade:	4b4a      	ldr	r3, [pc, #296]	; (7c08 <_printf_i+0x23c>)
    7ae0:	9303      	str	r3, [sp, #12]
    7ae2:	6863      	ldr	r3, [r4, #4]
    7ae4:	60a3      	str	r3, [r4, #8]
    7ae6:	2b00      	cmp	r3, #0
    7ae8:	db09      	blt.n	7afe <_printf_i+0x132>
    7aea:	2204      	movs	r2, #4
    7aec:	6821      	ldr	r1, [r4, #0]
    7aee:	4391      	bics	r1, r2
    7af0:	6021      	str	r1, [r4, #0]
    7af2:	2d00      	cmp	r5, #0
    7af4:	d105      	bne.n	7b02 <_printf_i+0x136>
    7af6:	9e04      	ldr	r6, [sp, #16]
    7af8:	2b00      	cmp	r3, #0
    7afa:	d011      	beq.n	7b20 <_printf_i+0x154>
    7afc:	e07b      	b.n	7bf6 <_printf_i+0x22a>
    7afe:	2d00      	cmp	r5, #0
    7b00:	d079      	beq.n	7bf6 <_printf_i+0x22a>
    7b02:	9e04      	ldr	r6, [sp, #16]
    7b04:	0028      	movs	r0, r5
    7b06:	0039      	movs	r1, r7
    7b08:	f7fd fbcc 	bl	52a4 <__aeabi_uidivmod>
    7b0c:	9b03      	ldr	r3, [sp, #12]
    7b0e:	3e01      	subs	r6, #1
    7b10:	5c5b      	ldrb	r3, [r3, r1]
    7b12:	0028      	movs	r0, r5
    7b14:	7033      	strb	r3, [r6, #0]
    7b16:	0039      	movs	r1, r7
    7b18:	f7fd fb3e 	bl	5198 <__aeabi_uidiv>
    7b1c:	1e05      	subs	r5, r0, #0
    7b1e:	d1f1      	bne.n	7b04 <_printf_i+0x138>
    7b20:	2f08      	cmp	r7, #8
    7b22:	d109      	bne.n	7b38 <_printf_i+0x16c>
    7b24:	6823      	ldr	r3, [r4, #0]
    7b26:	07db      	lsls	r3, r3, #31
    7b28:	d506      	bpl.n	7b38 <_printf_i+0x16c>
    7b2a:	6863      	ldr	r3, [r4, #4]
    7b2c:	6922      	ldr	r2, [r4, #16]
    7b2e:	4293      	cmp	r3, r2
    7b30:	dc02      	bgt.n	7b38 <_printf_i+0x16c>
    7b32:	2330      	movs	r3, #48	; 0x30
    7b34:	3e01      	subs	r6, #1
    7b36:	7033      	strb	r3, [r6, #0]
    7b38:	9b04      	ldr	r3, [sp, #16]
    7b3a:	1b9b      	subs	r3, r3, r6
    7b3c:	6123      	str	r3, [r4, #16]
    7b3e:	e02b      	b.n	7b98 <_printf_i+0x1cc>
    7b40:	6809      	ldr	r1, [r1, #0]
    7b42:	681a      	ldr	r2, [r3, #0]
    7b44:	0608      	lsls	r0, r1, #24
    7b46:	d407      	bmi.n	7b58 <_printf_i+0x18c>
    7b48:	0649      	lsls	r1, r1, #25
    7b4a:	d505      	bpl.n	7b58 <_printf_i+0x18c>
    7b4c:	1d11      	adds	r1, r2, #4
    7b4e:	6019      	str	r1, [r3, #0]
    7b50:	6813      	ldr	r3, [r2, #0]
    7b52:	8aa2      	ldrh	r2, [r4, #20]
    7b54:	801a      	strh	r2, [r3, #0]
    7b56:	e004      	b.n	7b62 <_printf_i+0x196>
    7b58:	1d11      	adds	r1, r2, #4
    7b5a:	6019      	str	r1, [r3, #0]
    7b5c:	6813      	ldr	r3, [r2, #0]
    7b5e:	6962      	ldr	r2, [r4, #20]
    7b60:	601a      	str	r2, [r3, #0]
    7b62:	2300      	movs	r3, #0
    7b64:	9e04      	ldr	r6, [sp, #16]
    7b66:	6123      	str	r3, [r4, #16]
    7b68:	e016      	b.n	7b98 <_printf_i+0x1cc>
    7b6a:	681a      	ldr	r2, [r3, #0]
    7b6c:	1d11      	adds	r1, r2, #4
    7b6e:	6019      	str	r1, [r3, #0]
    7b70:	6816      	ldr	r6, [r2, #0]
    7b72:	2100      	movs	r1, #0
    7b74:	6862      	ldr	r2, [r4, #4]
    7b76:	0030      	movs	r0, r6
    7b78:	f000 f906 	bl	7d88 <memchr>
    7b7c:	2800      	cmp	r0, #0
    7b7e:	d001      	beq.n	7b84 <_printf_i+0x1b8>
    7b80:	1b80      	subs	r0, r0, r6
    7b82:	6060      	str	r0, [r4, #4]
    7b84:	6863      	ldr	r3, [r4, #4]
    7b86:	e003      	b.n	7b90 <_printf_i+0x1c4>
    7b88:	0026      	movs	r6, r4
    7b8a:	3642      	adds	r6, #66	; 0x42
    7b8c:	7032      	strb	r2, [r6, #0]
    7b8e:	2301      	movs	r3, #1
    7b90:	6123      	str	r3, [r4, #16]
    7b92:	2300      	movs	r3, #0
    7b94:	9a04      	ldr	r2, [sp, #16]
    7b96:	7013      	strb	r3, [r2, #0]
    7b98:	9b07      	ldr	r3, [sp, #28]
    7b9a:	aa09      	add	r2, sp, #36	; 0x24
    7b9c:	9300      	str	r3, [sp, #0]
    7b9e:	0021      	movs	r1, r4
    7ba0:	9b06      	ldr	r3, [sp, #24]
    7ba2:	9805      	ldr	r0, [sp, #20]
    7ba4:	f7ff fea4 	bl	78f0 <_printf_common>
    7ba8:	1c43      	adds	r3, r0, #1
    7baa:	d102      	bne.n	7bb2 <_printf_i+0x1e6>
    7bac:	2001      	movs	r0, #1
    7bae:	4240      	negs	r0, r0
    7bb0:	e027      	b.n	7c02 <_printf_i+0x236>
    7bb2:	6923      	ldr	r3, [r4, #16]
    7bb4:	0032      	movs	r2, r6
    7bb6:	9906      	ldr	r1, [sp, #24]
    7bb8:	9805      	ldr	r0, [sp, #20]
    7bba:	9d07      	ldr	r5, [sp, #28]
    7bbc:	47a8      	blx	r5
    7bbe:	1c43      	adds	r3, r0, #1
    7bc0:	d0f4      	beq.n	7bac <_printf_i+0x1e0>
    7bc2:	6823      	ldr	r3, [r4, #0]
    7bc4:	2500      	movs	r5, #0
    7bc6:	079b      	lsls	r3, r3, #30
    7bc8:	d40f      	bmi.n	7bea <_printf_i+0x21e>
    7bca:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7bcc:	68e0      	ldr	r0, [r4, #12]
    7bce:	4298      	cmp	r0, r3
    7bd0:	da17      	bge.n	7c02 <_printf_i+0x236>
    7bd2:	0018      	movs	r0, r3
    7bd4:	e015      	b.n	7c02 <_printf_i+0x236>
    7bd6:	0022      	movs	r2, r4
    7bd8:	2301      	movs	r3, #1
    7bda:	3219      	adds	r2, #25
    7bdc:	9906      	ldr	r1, [sp, #24]
    7bde:	9805      	ldr	r0, [sp, #20]
    7be0:	9e07      	ldr	r6, [sp, #28]
    7be2:	47b0      	blx	r6
    7be4:	1c43      	adds	r3, r0, #1
    7be6:	d0e1      	beq.n	7bac <_printf_i+0x1e0>
    7be8:	3501      	adds	r5, #1
    7bea:	68e3      	ldr	r3, [r4, #12]
    7bec:	9a09      	ldr	r2, [sp, #36]	; 0x24
    7bee:	1a9b      	subs	r3, r3, r2
    7bf0:	429d      	cmp	r5, r3
    7bf2:	dbf0      	blt.n	7bd6 <_printf_i+0x20a>
    7bf4:	e7e9      	b.n	7bca <_printf_i+0x1fe>
    7bf6:	0026      	movs	r6, r4
    7bf8:	9b03      	ldr	r3, [sp, #12]
    7bfa:	3642      	adds	r6, #66	; 0x42
    7bfc:	781b      	ldrb	r3, [r3, #0]
    7bfe:	7033      	strb	r3, [r6, #0]
    7c00:	e78e      	b.n	7b20 <_printf_i+0x154>
    7c02:	b00b      	add	sp, #44	; 0x2c
    7c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7c06:	46c0      	nop			; (mov r8, r8)
    7c08:	00007fbd 	.word	0x00007fbd
    7c0c:	00007fce 	.word	0x00007fce

00007c10 <_sbrk_r>:
    7c10:	2300      	movs	r3, #0
    7c12:	b570      	push	{r4, r5, r6, lr}
    7c14:	4c06      	ldr	r4, [pc, #24]	; (7c30 <_sbrk_r+0x20>)
    7c16:	0005      	movs	r5, r0
    7c18:	0008      	movs	r0, r1
    7c1a:	6023      	str	r3, [r4, #0]
    7c1c:	f7fa fe2e 	bl	287c <_sbrk>
    7c20:	1c43      	adds	r3, r0, #1
    7c22:	d103      	bne.n	7c2c <_sbrk_r+0x1c>
    7c24:	6823      	ldr	r3, [r4, #0]
    7c26:	2b00      	cmp	r3, #0
    7c28:	d000      	beq.n	7c2c <_sbrk_r+0x1c>
    7c2a:	602b      	str	r3, [r5, #0]
    7c2c:	bd70      	pop	{r4, r5, r6, pc}
    7c2e:	46c0      	nop			; (mov r8, r8)
    7c30:	20000988 	.word	0x20000988

00007c34 <__sread>:
    7c34:	b570      	push	{r4, r5, r6, lr}
    7c36:	000c      	movs	r4, r1
    7c38:	250e      	movs	r5, #14
    7c3a:	5f49      	ldrsh	r1, [r1, r5]
    7c3c:	f000 f8b0 	bl	7da0 <_read_r>
    7c40:	2800      	cmp	r0, #0
    7c42:	db03      	blt.n	7c4c <__sread+0x18>
    7c44:	6d63      	ldr	r3, [r4, #84]	; 0x54
    7c46:	181b      	adds	r3, r3, r0
    7c48:	6563      	str	r3, [r4, #84]	; 0x54
    7c4a:	e003      	b.n	7c54 <__sread+0x20>
    7c4c:	89a2      	ldrh	r2, [r4, #12]
    7c4e:	4b02      	ldr	r3, [pc, #8]	; (7c58 <__sread+0x24>)
    7c50:	4013      	ands	r3, r2
    7c52:	81a3      	strh	r3, [r4, #12]
    7c54:	bd70      	pop	{r4, r5, r6, pc}
    7c56:	46c0      	nop			; (mov r8, r8)
    7c58:	ffffefff 	.word	0xffffefff

00007c5c <__swrite>:
    7c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7c5e:	001f      	movs	r7, r3
    7c60:	898b      	ldrh	r3, [r1, #12]
    7c62:	0005      	movs	r5, r0
    7c64:	000c      	movs	r4, r1
    7c66:	0016      	movs	r6, r2
    7c68:	05db      	lsls	r3, r3, #23
    7c6a:	d505      	bpl.n	7c78 <__swrite+0x1c>
    7c6c:	230e      	movs	r3, #14
    7c6e:	5ec9      	ldrsh	r1, [r1, r3]
    7c70:	2200      	movs	r2, #0
    7c72:	2302      	movs	r3, #2
    7c74:	f000 f874 	bl	7d60 <_lseek_r>
    7c78:	89a2      	ldrh	r2, [r4, #12]
    7c7a:	4b05      	ldr	r3, [pc, #20]	; (7c90 <__swrite+0x34>)
    7c7c:	0028      	movs	r0, r5
    7c7e:	4013      	ands	r3, r2
    7c80:	81a3      	strh	r3, [r4, #12]
    7c82:	0032      	movs	r2, r6
    7c84:	230e      	movs	r3, #14
    7c86:	5ee1      	ldrsh	r1, [r4, r3]
    7c88:	003b      	movs	r3, r7
    7c8a:	f000 f81f 	bl	7ccc <_write_r>
    7c8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7c90:	ffffefff 	.word	0xffffefff

00007c94 <__sseek>:
    7c94:	b570      	push	{r4, r5, r6, lr}
    7c96:	000c      	movs	r4, r1
    7c98:	250e      	movs	r5, #14
    7c9a:	5f49      	ldrsh	r1, [r1, r5]
    7c9c:	f000 f860 	bl	7d60 <_lseek_r>
    7ca0:	89a3      	ldrh	r3, [r4, #12]
    7ca2:	1c42      	adds	r2, r0, #1
    7ca4:	d103      	bne.n	7cae <__sseek+0x1a>
    7ca6:	4a05      	ldr	r2, [pc, #20]	; (7cbc <__sseek+0x28>)
    7ca8:	4013      	ands	r3, r2
    7caa:	81a3      	strh	r3, [r4, #12]
    7cac:	e004      	b.n	7cb8 <__sseek+0x24>
    7cae:	2280      	movs	r2, #128	; 0x80
    7cb0:	0152      	lsls	r2, r2, #5
    7cb2:	4313      	orrs	r3, r2
    7cb4:	81a3      	strh	r3, [r4, #12]
    7cb6:	6560      	str	r0, [r4, #84]	; 0x54
    7cb8:	bd70      	pop	{r4, r5, r6, pc}
    7cba:	46c0      	nop			; (mov r8, r8)
    7cbc:	ffffefff 	.word	0xffffefff

00007cc0 <__sclose>:
    7cc0:	b510      	push	{r4, lr}
    7cc2:	230e      	movs	r3, #14
    7cc4:	5ec9      	ldrsh	r1, [r1, r3]
    7cc6:	f000 f815 	bl	7cf4 <_close_r>
    7cca:	bd10      	pop	{r4, pc}

00007ccc <_write_r>:
    7ccc:	b570      	push	{r4, r5, r6, lr}
    7cce:	0005      	movs	r5, r0
    7cd0:	0008      	movs	r0, r1
    7cd2:	0011      	movs	r1, r2
    7cd4:	2200      	movs	r2, #0
    7cd6:	4c06      	ldr	r4, [pc, #24]	; (7cf0 <_write_r+0x24>)
    7cd8:	6022      	str	r2, [r4, #0]
    7cda:	001a      	movs	r2, r3
    7cdc:	f7fa fda6 	bl	282c <_write>
    7ce0:	1c43      	adds	r3, r0, #1
    7ce2:	d103      	bne.n	7cec <_write_r+0x20>
    7ce4:	6823      	ldr	r3, [r4, #0]
    7ce6:	2b00      	cmp	r3, #0
    7ce8:	d000      	beq.n	7cec <_write_r+0x20>
    7cea:	602b      	str	r3, [r5, #0]
    7cec:	bd70      	pop	{r4, r5, r6, pc}
    7cee:	46c0      	nop			; (mov r8, r8)
    7cf0:	20000988 	.word	0x20000988

00007cf4 <_close_r>:
    7cf4:	2300      	movs	r3, #0
    7cf6:	b570      	push	{r4, r5, r6, lr}
    7cf8:	4c06      	ldr	r4, [pc, #24]	; (7d14 <_close_r+0x20>)
    7cfa:	0005      	movs	r5, r0
    7cfc:	0008      	movs	r0, r1
    7cfe:	6023      	str	r3, [r4, #0]
    7d00:	f7fa fdce 	bl	28a0 <_close>
    7d04:	1c43      	adds	r3, r0, #1
    7d06:	d103      	bne.n	7d10 <_close_r+0x1c>
    7d08:	6823      	ldr	r3, [r4, #0]
    7d0a:	2b00      	cmp	r3, #0
    7d0c:	d000      	beq.n	7d10 <_close_r+0x1c>
    7d0e:	602b      	str	r3, [r5, #0]
    7d10:	bd70      	pop	{r4, r5, r6, pc}
    7d12:	46c0      	nop			; (mov r8, r8)
    7d14:	20000988 	.word	0x20000988

00007d18 <_fstat_r>:
    7d18:	2300      	movs	r3, #0
    7d1a:	b570      	push	{r4, r5, r6, lr}
    7d1c:	4c06      	ldr	r4, [pc, #24]	; (7d38 <_fstat_r+0x20>)
    7d1e:	0005      	movs	r5, r0
    7d20:	0008      	movs	r0, r1
    7d22:	0011      	movs	r1, r2
    7d24:	6023      	str	r3, [r4, #0]
    7d26:	f7fa fdbf 	bl	28a8 <_fstat>
    7d2a:	1c43      	adds	r3, r0, #1
    7d2c:	d103      	bne.n	7d36 <_fstat_r+0x1e>
    7d2e:	6823      	ldr	r3, [r4, #0]
    7d30:	2b00      	cmp	r3, #0
    7d32:	d000      	beq.n	7d36 <_fstat_r+0x1e>
    7d34:	602b      	str	r3, [r5, #0]
    7d36:	bd70      	pop	{r4, r5, r6, pc}
    7d38:	20000988 	.word	0x20000988

00007d3c <_isatty_r>:
    7d3c:	2300      	movs	r3, #0
    7d3e:	b570      	push	{r4, r5, r6, lr}
    7d40:	4c06      	ldr	r4, [pc, #24]	; (7d5c <_isatty_r+0x20>)
    7d42:	0005      	movs	r5, r0
    7d44:	0008      	movs	r0, r1
    7d46:	6023      	str	r3, [r4, #0]
    7d48:	f7fa fdb4 	bl	28b4 <_isatty>
    7d4c:	1c43      	adds	r3, r0, #1
    7d4e:	d103      	bne.n	7d58 <_isatty_r+0x1c>
    7d50:	6823      	ldr	r3, [r4, #0]
    7d52:	2b00      	cmp	r3, #0
    7d54:	d000      	beq.n	7d58 <_isatty_r+0x1c>
    7d56:	602b      	str	r3, [r5, #0]
    7d58:	bd70      	pop	{r4, r5, r6, pc}
    7d5a:	46c0      	nop			; (mov r8, r8)
    7d5c:	20000988 	.word	0x20000988

00007d60 <_lseek_r>:
    7d60:	b570      	push	{r4, r5, r6, lr}
    7d62:	0005      	movs	r5, r0
    7d64:	0008      	movs	r0, r1
    7d66:	0011      	movs	r1, r2
    7d68:	2200      	movs	r2, #0
    7d6a:	4c06      	ldr	r4, [pc, #24]	; (7d84 <_lseek_r+0x24>)
    7d6c:	6022      	str	r2, [r4, #0]
    7d6e:	001a      	movs	r2, r3
    7d70:	f7fa fda2 	bl	28b8 <_lseek>
    7d74:	1c43      	adds	r3, r0, #1
    7d76:	d103      	bne.n	7d80 <_lseek_r+0x20>
    7d78:	6823      	ldr	r3, [r4, #0]
    7d7a:	2b00      	cmp	r3, #0
    7d7c:	d000      	beq.n	7d80 <_lseek_r+0x20>
    7d7e:	602b      	str	r3, [r5, #0]
    7d80:	bd70      	pop	{r4, r5, r6, pc}
    7d82:	46c0      	nop			; (mov r8, r8)
    7d84:	20000988 	.word	0x20000988

00007d88 <memchr>:
    7d88:	b2c9      	uxtb	r1, r1
    7d8a:	1882      	adds	r2, r0, r2
    7d8c:	4290      	cmp	r0, r2
    7d8e:	d004      	beq.n	7d9a <memchr+0x12>
    7d90:	7803      	ldrb	r3, [r0, #0]
    7d92:	428b      	cmp	r3, r1
    7d94:	d002      	beq.n	7d9c <memchr+0x14>
    7d96:	3001      	adds	r0, #1
    7d98:	e7f8      	b.n	7d8c <memchr+0x4>
    7d9a:	2000      	movs	r0, #0
    7d9c:	4770      	bx	lr
	...

00007da0 <_read_r>:
    7da0:	b570      	push	{r4, r5, r6, lr}
    7da2:	0005      	movs	r5, r0
    7da4:	0008      	movs	r0, r1
    7da6:	0011      	movs	r1, r2
    7da8:	2200      	movs	r2, #0
    7daa:	4c06      	ldr	r4, [pc, #24]	; (7dc4 <_read_r+0x24>)
    7dac:	6022      	str	r2, [r4, #0]
    7dae:	001a      	movs	r2, r3
    7db0:	f7fa fd1c 	bl	27ec <_read>
    7db4:	1c43      	adds	r3, r0, #1
    7db6:	d103      	bne.n	7dc0 <_read_r+0x20>
    7db8:	6823      	ldr	r3, [r4, #0]
    7dba:	2b00      	cmp	r3, #0
    7dbc:	d000      	beq.n	7dc0 <_read_r+0x20>
    7dbe:	602b      	str	r3, [r5, #0]
    7dc0:	bd70      	pop	{r4, r5, r6, pc}
    7dc2:	46c0      	nop			; (mov r8, r8)
    7dc4:	20000988 	.word	0x20000988
    7dc8:	42000800 	.word	0x42000800
    7dcc:	42000c00 	.word	0x42000c00
    7dd0:	42001000 	.word	0x42001000
    7dd4:	42001400 	.word	0x42001400
    7dd8:	42001800 	.word	0x42001800
    7ddc:	42001c00 	.word	0x42001c00
    7de0:	0c0b0a09 	.word	0x0c0b0a09
    7de4:	00000e0d 	.word	0x00000e0d
    7de8:	00001a4e 	.word	0x00001a4e
    7dec:	00001a4a 	.word	0x00001a4a
    7df0:	00001a4a 	.word	0x00001a4a
    7df4:	00001aa8 	.word	0x00001aa8
    7df8:	00001aa8 	.word	0x00001aa8
    7dfc:	00001a62 	.word	0x00001a62
    7e00:	00001a54 	.word	0x00001a54
    7e04:	00001a68 	.word	0x00001a68
    7e08:	00001a96 	.word	0x00001a96
    7e0c:	00001d18 	.word	0x00001d18
    7e10:	00001cf8 	.word	0x00001cf8
    7e14:	00001cf8 	.word	0x00001cf8
    7e18:	00001d84 	.word	0x00001d84
    7e1c:	00001d0a 	.word	0x00001d0a
    7e20:	00001d26 	.word	0x00001d26
    7e24:	00001cfc 	.word	0x00001cfc
    7e28:	00001d34 	.word	0x00001d34
    7e2c:	00001d74 	.word	0x00001d74
    7e30:	42002c00 	.word	0x42002c00
    7e34:	42003000 	.word	0x42003000
    7e38:	42003400 	.word	0x42003400
    7e3c:	001c1c1b 	.word	0x001c1c1b
    7e40:	10000800 	.word	0x10000800
    7e44:	00002000 	.word	0x00002000
    7e48:	00003290 	.word	0x00003290
    7e4c:	00003444 	.word	0x00003444
    7e50:	0000344e 	.word	0x0000344e
    7e54:	0000361c 	.word	0x0000361c
    7e58:	00003624 	.word	0x00003624
    7e5c:	00003b9e 	.word	0x00003b9e
    7e60:	00003c60 	.word	0x00003c60
    7e64:	00003ba8 	.word	0x00003ba8
    7e68:	00003bc8 	.word	0x00003bc8
    7e6c:	00003c60 	.word	0x00003c60
    7e70:	00003bea 	.word	0x00003bea
    7e74:	00003c60 	.word	0x00003c60
    7e78:	00003c2e 	.word	0x00003c2e

00007e7c <tc_interrupt_vectors.11902>:
    7e7c:	00141312 3a646673 322e2520 61202c78     ....sfd: %.2x, a
    7e8c:	3a726464 322e2520 61202c78 203a7463     ddr: %.2x, act: 
    7e9c:	000a7825 61746164 7825203a 0000000a     %x..data: %x....
    7eac:	74206948 20736968 61207369 61747320     Hi this is a sta
    7ebc:	6e6f6974 00000000 00005b50 00005a1e     tion....P[...Z..
    7ecc:	00005b24 00005a14 00005b24 00005b2e     $[...Z..$[...[..
    7edc:	00005b24 00005a14 00005a1e 00005a1e     $[...Z...Z...Z..
    7eec:	00005b2e 00005a14 00005a0a 00005a0a     .[...Z...Z...Z..
    7efc:	00005a0a 00005d80 0000617c 0000603c     .Z...]..|a..<`..
    7f0c:	0000603c 0000603a 00006154 00006154     <`..:`..Ta..Ta..
    7f1c:	00006146 0000603a 00006154 00006146     Fa..:`..Ta..Fa..
    7f2c:	00006154 0000603a 0000615c 0000615c     Ta..:`..\a..\a..
    7f3c:	0000615c 0000635c 00000043              \a..\c..C...

00007f48 <_global_impure_ptr>:
    7f48:	2000000c                                ... 

00007f4c <__sf_fake_stdin>:
	...

00007f6c <__sf_fake_stdout>:
	...

00007f8c <__sf_fake_stderr>:
	...
    7fac:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    7fbc:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    7fcc:	31300046 35343332 39383736 64636261     F.0123456789abcd
    7fdc:	00006665                                ef..

00007fe0 <_init>:
    7fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7fe2:	46c0      	nop			; (mov r8, r8)
    7fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    7fe6:	bc08      	pop	{r3}
    7fe8:	469e      	mov	lr, r3
    7fea:	4770      	bx	lr

00007fec <__init_array_start>:
    7fec:	000000dd 	.word	0x000000dd

00007ff0 <_fini>:
    7ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7ff2:	46c0      	nop			; (mov r8, r8)
    7ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    7ff6:	bc08      	pop	{r3}
    7ff8:	469e      	mov	lr, r3
    7ffa:	4770      	bx	lr

00007ffc <__fini_array_start>:
    7ffc:	000000b5 	.word	0x000000b5
