
IT_Intensive_RadioComm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005824  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000078  20000000  00005824  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000918  20000078  0000589c  00020078  2**2
                  ALLOC
  3 .stack        00002000  20000990  000061b4  00020078  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
  5 .comment      0000008c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
  6 .debug_info   00036a64  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000062f7  00000000  00000000  00056b90  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000cbac  00000000  00000000  0005ce87  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000b70  00000000  00000000  00069a33  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000010c0  00000000  00000000  0006a5a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00020b6d  00000000  00000000  0006b663  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001a097  00000000  00000000  0008c1d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00088d19  00000000  00000000  000a6267  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002208  00000000  00000000  0012ef80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002990 	.word	0x20002990
       4:	00001fd9 	.word	0x00001fd9
       8:	00001fd5 	.word	0x00001fd5
       c:	00001fd5 	.word	0x00001fd5
	...
      2c:	00001fd5 	.word	0x00001fd5
	...
      38:	00001fd5 	.word	0x00001fd5
      3c:	00001fd5 	.word	0x00001fd5
      40:	00001fd5 	.word	0x00001fd5
      44:	00001fd5 	.word	0x00001fd5
      48:	00001fd5 	.word	0x00001fd5
      4c:	00001fd5 	.word	0x00001fd5
      50:	0000032d 	.word	0x0000032d
      54:	00001fd5 	.word	0x00001fd5
      58:	00001fd5 	.word	0x00001fd5
      5c:	00001fd5 	.word	0x00001fd5
      60:	00001fd5 	.word	0x00001fd5
      64:	00000931 	.word	0x00000931
      68:	00000941 	.word	0x00000941
      6c:	00000951 	.word	0x00000951
      70:	00000961 	.word	0x00000961
      74:	00000971 	.word	0x00000971
      78:	00000981 	.word	0x00000981
      7c:	00001fd5 	.word	0x00001fd5
      80:	00001fd5 	.word	0x00001fd5
      84:	00001fd5 	.word	0x00001fd5
      88:	00001c6d 	.word	0x00001c6d
      8c:	00001c7d 	.word	0x00001c7d
      90:	00001c8d 	.word	0x00001c8d
	...
      9c:	00001fd5 	.word	0x00001fd5
      a0:	00001fd5 	.word	0x00001fd5
      a4:	00000000 	.word	0x00000000
      a8:	00001fd5 	.word	0x00001fd5
	...

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000078 	.word	0x20000078
      d4:	00000000 	.word	0x00000000
      d8:	00005824 	.word	0x00005824

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000007c 	.word	0x2000007c
     108:	00005824 	.word	0x00005824
     10c:	00005824 	.word	0x00005824
     110:	00000000 	.word	0x00000000

00000114 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     114:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     116:	2000      	movs	r0, #0
     118:	4b08      	ldr	r3, [pc, #32]	; (13c <delay_init+0x28>)
     11a:	4798      	blx	r3
     11c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     11e:	4c08      	ldr	r4, [pc, #32]	; (140 <delay_init+0x2c>)
     120:	21fa      	movs	r1, #250	; 0xfa
     122:	0089      	lsls	r1, r1, #2
     124:	47a0      	blx	r4
     126:	4b07      	ldr	r3, [pc, #28]	; (144 <delay_init+0x30>)
     128:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     12a:	4907      	ldr	r1, [pc, #28]	; (148 <delay_init+0x34>)
     12c:	0028      	movs	r0, r5
     12e:	47a0      	blx	r4
     130:	4b06      	ldr	r3, [pc, #24]	; (14c <delay_init+0x38>)
     132:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     134:	2205      	movs	r2, #5
     136:	4b06      	ldr	r3, [pc, #24]	; (150 <delay_init+0x3c>)
     138:	601a      	str	r2, [r3, #0]
}
     13a:	bd70      	pop	{r4, r5, r6, pc}
     13c:	00001971 	.word	0x00001971
     140:	000049e1 	.word	0x000049e1
     144:	20000004 	.word	0x20000004
     148:	000f4240 	.word	0x000f4240
     14c:	20000000 	.word	0x20000000
     150:	e000e010 	.word	0xe000e010

00000154 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
     154:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
     156:	4b08      	ldr	r3, [pc, #32]	; (178 <delay_cycles_us+0x24>)
     158:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     15a:	4a08      	ldr	r2, [pc, #32]	; (17c <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
     15c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     15e:	2180      	movs	r1, #128	; 0x80
     160:	0249      	lsls	r1, r1, #9
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
	while (n--) {
     162:	e006      	b.n	172 <delay_cycles_us+0x1e>
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
     164:	2c00      	cmp	r4, #0
     166:	d004      	beq.n	172 <delay_cycles_us+0x1e>
		SysTick->LOAD = n;
     168:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     16a:	6095      	str	r5, [r2, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     16c:	6813      	ldr	r3, [r2, #0]
     16e:	420b      	tst	r3, r1
     170:	d0fc      	beq.n	16c <delay_cycles_us+0x18>
     172:	3801      	subs	r0, #1
     174:	d2f6      	bcs.n	164 <delay_cycles_us+0x10>
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
	}
}
     176:	bd30      	pop	{r4, r5, pc}
     178:	20000000 	.word	0x20000000
     17c:	e000e010 	.word	0xe000e010

00000180 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     180:	4b0c      	ldr	r3, [pc, #48]	; (1b4 <cpu_irq_enter_critical+0x34>)
     182:	681b      	ldr	r3, [r3, #0]
     184:	2b00      	cmp	r3, #0
     186:	d110      	bne.n	1aa <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     188:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     18c:	2b00      	cmp	r3, #0
     18e:	d109      	bne.n	1a4 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     190:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     192:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     196:	2200      	movs	r2, #0
     198:	4b07      	ldr	r3, [pc, #28]	; (1b8 <cpu_irq_enter_critical+0x38>)
     19a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     19c:	3201      	adds	r2, #1
     19e:	4b07      	ldr	r3, [pc, #28]	; (1bc <cpu_irq_enter_critical+0x3c>)
     1a0:	701a      	strb	r2, [r3, #0]
     1a2:	e002      	b.n	1aa <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     1a4:	2200      	movs	r2, #0
     1a6:	4b05      	ldr	r3, [pc, #20]	; (1bc <cpu_irq_enter_critical+0x3c>)
     1a8:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     1aa:	4a02      	ldr	r2, [pc, #8]	; (1b4 <cpu_irq_enter_critical+0x34>)
     1ac:	6813      	ldr	r3, [r2, #0]
     1ae:	3301      	adds	r3, #1
     1b0:	6013      	str	r3, [r2, #0]
}
     1b2:	4770      	bx	lr
     1b4:	20000094 	.word	0x20000094
     1b8:	20000008 	.word	0x20000008
     1bc:	20000098 	.word	0x20000098

000001c0 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     1c0:	4b08      	ldr	r3, [pc, #32]	; (1e4 <cpu_irq_leave_critical+0x24>)
     1c2:	681a      	ldr	r2, [r3, #0]
     1c4:	3a01      	subs	r2, #1
     1c6:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     1c8:	681b      	ldr	r3, [r3, #0]
     1ca:	2b00      	cmp	r3, #0
     1cc:	d109      	bne.n	1e2 <cpu_irq_leave_critical+0x22>
     1ce:	4b06      	ldr	r3, [pc, #24]	; (1e8 <cpu_irq_leave_critical+0x28>)
     1d0:	781b      	ldrb	r3, [r3, #0]
     1d2:	2b00      	cmp	r3, #0
     1d4:	d005      	beq.n	1e2 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     1d6:	2201      	movs	r2, #1
     1d8:	4b04      	ldr	r3, [pc, #16]	; (1ec <cpu_irq_leave_critical+0x2c>)
     1da:	701a      	strb	r2, [r3, #0]
     1dc:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     1e0:	b662      	cpsie	i
	}
}
     1e2:	4770      	bx	lr
     1e4:	20000094 	.word	0x20000094
     1e8:	20000098 	.word	0x20000098
     1ec:	20000008 	.word	0x20000008

000001f0 <system_board_init>:




void system_board_init(void)
{
     1f0:	b5f0      	push	{r4, r5, r6, r7, lr}
     1f2:	4647      	mov	r7, r8
     1f4:	b480      	push	{r7}
     1f6:	b082      	sub	sp, #8
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     1f8:	ac01      	add	r4, sp, #4
     1fa:	2601      	movs	r6, #1
     1fc:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
     1fe:	2700      	movs	r7, #0
     200:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     202:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     204:	0021      	movs	r1, r4
     206:	2013      	movs	r0, #19
     208:	4d27      	ldr	r5, [pc, #156]	; (2a8 <system_board_init+0xb8>)
     20a:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     20c:	4b27      	ldr	r3, [pc, #156]	; (2ac <system_board_init+0xbc>)
     20e:	4698      	mov	r8, r3
     210:	2380      	movs	r3, #128	; 0x80
     212:	031b      	lsls	r3, r3, #12
     214:	4642      	mov	r2, r8
     216:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     218:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     21a:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     21c:	0021      	movs	r1, r4
     21e:	201c      	movs	r0, #28
     220:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     222:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
     224:	70a7      	strb	r7, [r4, #2]
	
#ifdef CONF_BOARD_AT86RFX	

	port_get_config_defaults(&pin_conf);
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     226:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_SCK, &pin_conf);
     228:	0021      	movs	r1, r4
     22a:	2052      	movs	r0, #82	; 0x52
     22c:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_MOSI, &pin_conf);
     22e:	0021      	movs	r1, r4
     230:	203e      	movs	r0, #62	; 0x3e
     232:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_CS, &pin_conf);
     234:	0021      	movs	r1, r4
     236:	203f      	movs	r0, #63	; 0x3f
     238:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_RST_PIN, &pin_conf);
     23a:	0021      	movs	r1, r4
     23c:	202f      	movs	r0, #47	; 0x2f
     23e:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SLP_PIN, &pin_conf);
     240:	0021      	movs	r1, r4
     242:	2014      	movs	r0, #20
     244:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     246:	2280      	movs	r2, #128	; 0x80
     248:	02d2      	lsls	r2, r2, #11
     24a:	4b19      	ldr	r3, [pc, #100]	; (2b0 <system_board_init+0xc0>)
     24c:	619a      	str	r2, [r3, #24]
     24e:	3b80      	subs	r3, #128	; 0x80
     250:	2280      	movs	r2, #128	; 0x80
     252:	05d2      	lsls	r2, r2, #23
     254:	619a      	str	r2, [r3, #24]
     256:	2280      	movs	r2, #128	; 0x80
     258:	0612      	lsls	r2, r2, #24
     25a:	619a      	str	r2, [r3, #24]
     25c:	2280      	movs	r2, #128	; 0x80
     25e:	0212      	lsls	r2, r2, #8
     260:	619a      	str	r2, [r3, #24]
     262:	2380      	movs	r3, #128	; 0x80
     264:	035b      	lsls	r3, r3, #13
     266:	4642      	mov	r2, r8
     268:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(AT86RFX_SPI_MOSI, true);
	port_pin_set_output_level(AT86RFX_SPI_CS, true);
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);

	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     26a:	7027      	strb	r7, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
     26c:	0021      	movs	r1, r4
     26e:	2053      	movs	r0, #83	; 0x53
     270:	47a8      	blx	r5
	
	/* SAMR21 Antenna Diversity Configuration */

	PM->APBCMASK.reg |= (1<<PM_APBCMASK_RFCTRL_Pos);
     272:	4a10      	ldr	r2, [pc, #64]	; (2b4 <system_board_init+0xc4>)
     274:	6a13      	ldr	r3, [r2, #32]
     276:	2180      	movs	r1, #128	; 0x80
     278:	0389      	lsls	r1, r1, #14
     27a:	430b      	orrs	r3, r1
     27c:	6213      	str	r3, [r2, #32]
		
	/*Pins  PA12/RFCTRL2 and PA09/RFCTRL1 are used as DIG1 and DIG2 pins respectively in SAMR21 Xplained Pro*/	
	
	/* FECTRL register is Written with value 4 => F2CFG = 00 and F1CFG = 01 */	
	REG_RFCTRL_FECFG = RFCTRL_CFG_ANT_DIV;
     27e:	2204      	movs	r2, #4
     280:	4b0d      	ldr	r3, [pc, #52]	; (2b8 <system_board_init+0xc8>)
     282:	801a      	strh	r2, [r3, #0]
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     284:	466b      	mov	r3, sp
     286:	709e      	strb	r6, [r3, #2]
	config->powersave    = false;
     288:	70df      	strb	r7, [r3, #3]
	struct system_pinmux_config config_pinmux;
	system_pinmux_get_config_defaults(&config_pinmux);
	
	/*MUX Position is 'F' i.e 5 for FECTRL Function and is same for all  FECTRL supported pins
	 * as provided in the data sheet */
	config_pinmux.mux_position = MUX_PA09F_RFCTRL_FECTRL1 ;
     28a:	2305      	movs	r3, #5
     28c:	466a      	mov	r2, sp
     28e:	7013      	strb	r3, [r2, #0]
	
	config_pinmux.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;	
     290:	7056      	strb	r6, [r2, #1]
	system_pinmux_pin_set_config(PIN_RFCTRL1, &config_pinmux);
     292:	4669      	mov	r1, sp
     294:	2009      	movs	r0, #9
     296:	4c09      	ldr	r4, [pc, #36]	; (2bc <system_board_init+0xcc>)
     298:	47a0      	blx	r4
	system_pinmux_pin_set_config(PIN_RFCTRL2, &config_pinmux);
     29a:	4669      	mov	r1, sp
     29c:	200c      	movs	r0, #12
     29e:	47a0      	blx	r4
#endif

}
     2a0:	b002      	add	sp, #8
     2a2:	bc04      	pop	{r2}
     2a4:	4690      	mov	r8, r2
     2a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     2a8:	000004a1 	.word	0x000004a1
     2ac:	41004400 	.word	0x41004400
     2b0:	41004500 	.word	0x41004500
     2b4:	40000400 	.word	0x40000400
     2b8:	42005400 	.word	0x42005400
     2bc:	00001b81 	.word	0x00001b81

000002c0 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     2c0:	2317      	movs	r3, #23
	const enum extint_callback_type type)
{
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     2c2:	2a00      	cmp	r2, #0
     2c4:	d10d      	bne.n	2e2 <extint_register_callback+0x22>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	if (_extint_dev.callbacks[channel] == NULL) {
     2c6:	008b      	lsls	r3, r1, #2
     2c8:	4a07      	ldr	r2, [pc, #28]	; (2e8 <extint_register_callback+0x28>)
     2ca:	589b      	ldr	r3, [r3, r2]
     2cc:	2b00      	cmp	r3, #0
     2ce:	d103      	bne.n	2d8 <extint_register_callback+0x18>
		_extint_dev.callbacks[channel] = callback;
     2d0:	0089      	lsls	r1, r1, #2
     2d2:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
     2d4:	2300      	movs	r3, #0
     2d6:	e004      	b.n	2e2 <extint_register_callback+0x22>
	} else if (_extint_dev.callbacks[channel] == callback) {
     2d8:	4283      	cmp	r3, r0
     2da:	d001      	beq.n	2e0 <extint_register_callback+0x20>
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
     2dc:	231d      	movs	r3, #29
     2de:	e000      	b.n	2e2 <extint_register_callback+0x22>

	if (_extint_dev.callbacks[channel] == NULL) {
		_extint_dev.callbacks[channel] = callback;
		return STATUS_OK;
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
     2e0:	2300      	movs	r3, #0
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
     2e2:	0018      	movs	r0, r3
     2e4:	4770      	bx	lr
     2e6:	46c0      	nop			; (mov r8, r8)
     2e8:	20000818 	.word	0x20000818

000002ec <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     2ec:	2317      	movs	r3, #23
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     2ee:	2900      	cmp	r1, #0
     2f0:	d107      	bne.n	302 <extint_chan_enable_callback+0x16>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     2f2:	2200      	movs	r2, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     2f4:	281f      	cmp	r0, #31
     2f6:	d800      	bhi.n	2fa <extint_chan_enable_callback+0xe>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     2f8:	4a03      	ldr	r2, [pc, #12]	; (308 <extint_chan_enable_callback+0x1c>)
		Eic *const eic = _extint_get_eic_from_channel(channel);

		eic->INTENSET.reg = (1UL << channel);
     2fa:	2301      	movs	r3, #1
     2fc:	4083      	lsls	r3, r0
     2fe:	60d3      	str	r3, [r2, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     300:	2300      	movs	r3, #0
}
     302:	0018      	movs	r0, r3
     304:	4770      	bx	lr
     306:	46c0      	nop			; (mov r8, r8)
     308:	40001800 	.word	0x40001800

0000030c <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     30c:	2317      	movs	r3, #23
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     30e:	2900      	cmp	r1, #0
     310:	d107      	bne.n	322 <extint_chan_disable_callback+0x16>
	} else {
		Assert(false);
		return NULL;
     312:	2200      	movs	r2, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     314:	281f      	cmp	r0, #31
     316:	d800      	bhi.n	31a <extint_chan_disable_callback+0xe>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     318:	4a03      	ldr	r2, [pc, #12]	; (328 <extint_chan_disable_callback+0x1c>)
		Eic *const eic = _extint_get_eic_from_channel(channel);

		eic->INTENCLR.reg = (1UL << channel);
     31a:	2301      	movs	r3, #1
     31c:	4083      	lsls	r3, r0
     31e:	6093      	str	r3, [r2, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     320:	2300      	movs	r3, #0
}
     322:	0018      	movs	r0, r3
     324:	4770      	bx	lr
     326:	46c0      	nop			; (mov r8, r8)
     328:	40001800 	.word	0x40001800

0000032c <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     32c:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     32e:	2200      	movs	r2, #0
     330:	4b15      	ldr	r3, [pc, #84]	; (388 <EIC_Handler+0x5c>)
     332:	701a      	strb	r2, [r3, #0]
     334:	2300      	movs	r3, #0
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     336:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     338:	4e14      	ldr	r6, [pc, #80]	; (38c <EIC_Handler+0x60>)

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     33a:	4c13      	ldr	r4, [pc, #76]	; (388 <EIC_Handler+0x5c>)
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     33c:	2b1f      	cmp	r3, #31
     33e:	d919      	bls.n	374 <EIC_Handler+0x48>
     340:	e00f      	b.n	362 <EIC_Handler+0x36>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     342:	2100      	movs	r1, #0
     344:	e000      	b.n	348 <EIC_Handler+0x1c>

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     346:	4912      	ldr	r1, [pc, #72]	; (390 <EIC_Handler+0x64>)
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     348:	610a      	str	r2, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     34a:	009b      	lsls	r3, r3, #2
     34c:	599b      	ldr	r3, [r3, r6]
     34e:	2b00      	cmp	r3, #0
     350:	d000      	beq.n	354 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     352:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     354:	7823      	ldrb	r3, [r4, #0]
     356:	3301      	adds	r3, #1
     358:	b2db      	uxtb	r3, r3
     35a:	7023      	strb	r3, [r4, #0]
     35c:	2b0f      	cmp	r3, #15
     35e:	d9ed      	bls.n	33c <EIC_Handler+0x10>
     360:	e011      	b.n	386 <EIC_Handler+0x5a>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     362:	0029      	movs	r1, r5
     364:	4019      	ands	r1, r3
     366:	2201      	movs	r2, #1
     368:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
     36a:	2100      	movs	r1, #0
     36c:	6909      	ldr	r1, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     36e:	4211      	tst	r1, r2
     370:	d1e7      	bne.n	342 <EIC_Handler+0x16>
     372:	e7ef      	b.n	354 <EIC_Handler+0x28>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     374:	0029      	movs	r1, r5
     376:	4019      	ands	r1, r3
     378:	2201      	movs	r2, #1
     37a:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
     37c:	4904      	ldr	r1, [pc, #16]	; (390 <EIC_Handler+0x64>)
     37e:	6909      	ldr	r1, [r1, #16]
     380:	4211      	tst	r1, r2
     382:	d1e0      	bne.n	346 <EIC_Handler+0x1a>
     384:	e7e6      	b.n	354 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
     386:	bd70      	pop	{r4, r5, r6, pc}
     388:	20000814 	.word	0x20000814
     38c:	20000818 	.word	0x20000818
     390:	40001800 	.word	0x40001800

00000394 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     394:	4a04      	ldr	r2, [pc, #16]	; (3a8 <_extint_enable+0x14>)
     396:	7811      	ldrb	r1, [r2, #0]
     398:	2302      	movs	r3, #2
     39a:	430b      	orrs	r3, r1
     39c:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     39e:	7853      	ldrb	r3, [r2, #1]
     3a0:	b25b      	sxtb	r3, r3
     3a2:	2b00      	cmp	r3, #0
     3a4:	dbfb      	blt.n	39e <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     3a6:	4770      	bx	lr
     3a8:	40001800 	.word	0x40001800

000003ac <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
     3ac:	b500      	push	{lr}
     3ae:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     3b0:	4a12      	ldr	r2, [pc, #72]	; (3fc <_system_extint_init+0x50>)
     3b2:	6991      	ldr	r1, [r2, #24]
     3b4:	2340      	movs	r3, #64	; 0x40
     3b6:	430b      	orrs	r3, r1
     3b8:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     3ba:	a901      	add	r1, sp, #4
     3bc:	2300      	movs	r3, #0
     3be:	700b      	strb	r3, [r1, #0]

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     3c0:	2005      	movs	r0, #5
     3c2:	4b0f      	ldr	r3, [pc, #60]	; (400 <_system_extint_init+0x54>)
     3c4:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
     3c6:	2005      	movs	r0, #5
     3c8:	4b0e      	ldr	r3, [pc, #56]	; (404 <_system_extint_init+0x58>)
     3ca:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     3cc:	4a0e      	ldr	r2, [pc, #56]	; (408 <_system_extint_init+0x5c>)
     3ce:	7811      	ldrb	r1, [r2, #0]
     3d0:	2301      	movs	r3, #1
     3d2:	430b      	orrs	r3, r1
     3d4:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     3d6:	7853      	ldrb	r3, [r2, #1]
     3d8:	b25b      	sxtb	r3, r3
     3da:	2b00      	cmp	r3, #0
     3dc:	dbfb      	blt.n	3d6 <_system_extint_init+0x2a>
     3de:	4b0b      	ldr	r3, [pc, #44]	; (40c <_system_extint_init+0x60>)
     3e0:	0019      	movs	r1, r3
     3e2:	3140      	adds	r1, #64	; 0x40

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
     3e4:	2200      	movs	r2, #0
     3e6:	c304      	stmia	r3!, {r2}
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     3e8:	4299      	cmp	r1, r3
     3ea:	d1fc      	bne.n	3e6 <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     3ec:	2210      	movs	r2, #16
     3ee:	4b08      	ldr	r3, [pc, #32]	; (410 <_system_extint_init+0x64>)
     3f0:	601a      	str	r2, [r3, #0]
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
     3f2:	4b08      	ldr	r3, [pc, #32]	; (414 <_system_extint_init+0x68>)
     3f4:	4798      	blx	r3
}
     3f6:	b003      	add	sp, #12
     3f8:	bd00      	pop	{pc}
     3fa:	46c0      	nop			; (mov r8, r8)
     3fc:	40000400 	.word	0x40000400
     400:	00001a89 	.word	0x00001a89
     404:	000019fd 	.word	0x000019fd
     408:	40001800 	.word	0x40001800
     40c:	20000818 	.word	0x20000818
     410:	e000e100 	.word	0xe000e100
     414:	00000395 	.word	0x00000395

00000418 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     418:	2300      	movs	r3, #0
     41a:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     41c:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     41e:	2201      	movs	r2, #1
     420:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
     422:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
     424:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     426:	3302      	adds	r3, #2
     428:	72c3      	strb	r3, [r0, #11]
}
     42a:	4770      	bx	lr

0000042c <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     42c:	b5f0      	push	{r4, r5, r6, r7, lr}
     42e:	b083      	sub	sp, #12
     430:	0005      	movs	r5, r0
     432:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     434:	a901      	add	r1, sp, #4
     436:	2300      	movs	r3, #0
     438:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     43a:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     43c:	7923      	ldrb	r3, [r4, #4]
     43e:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     440:	7a23      	ldrb	r3, [r4, #8]
     442:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     444:	7820      	ldrb	r0, [r4, #0]
     446:	4b14      	ldr	r3, [pc, #80]	; (498 <extint_chan_set_config+0x6c>)
     448:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     44a:	2000      	movs	r0, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     44c:	2d1f      	cmp	r5, #31
     44e:	d800      	bhi.n	452 <extint_chan_set_config+0x26>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     450:	4812      	ldr	r0, [pc, #72]	; (49c <extint_chan_set_config+0x70>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     452:	2107      	movs	r1, #7
     454:	4029      	ands	r1, r5
     456:	0089      	lsls	r1, r1, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     458:	7ae2      	ldrb	r2, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     45a:	7aa3      	ldrb	r3, [r4, #10]
     45c:	2b00      	cmp	r3, #0
     45e:	d001      	beq.n	464 <extint_chan_set_config+0x38>
		new_config |= EIC_CONFIG_FILTEN0;
     460:	2308      	movs	r3, #8
     462:	431a      	orrs	r2, r3
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
     464:	08eb      	lsrs	r3, r5, #3
     466:	009b      	lsls	r3, r3, #2
     468:	18c3      	adds	r3, r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
     46a:	699e      	ldr	r6, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     46c:	270f      	movs	r7, #15
     46e:	408f      	lsls	r7, r1
     470:	43be      	bics	r6, r7
     472:	408a      	lsls	r2, r1
     474:	4332      	orrs	r2, r6
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     476:	619a      	str	r2, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     478:	7a63      	ldrb	r3, [r4, #9]
     47a:	2b00      	cmp	r3, #0
     47c:	d005      	beq.n	48a <extint_chan_set_config+0x5e>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     47e:	6942      	ldr	r2, [r0, #20]
     480:	2301      	movs	r3, #1
     482:	40ab      	lsls	r3, r5
     484:	4313      	orrs	r3, r2
     486:	6143      	str	r3, [r0, #20]
     488:	e004      	b.n	494 <extint_chan_set_config+0x68>
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     48a:	6943      	ldr	r3, [r0, #20]
     48c:	2201      	movs	r2, #1
     48e:	40aa      	lsls	r2, r5
     490:	4393      	bics	r3, r2
     492:	6143      	str	r3, [r0, #20]
	}
}
     494:	b003      	add	sp, #12
     496:	bdf0      	pop	{r4, r5, r6, r7, pc}
     498:	00001b81 	.word	0x00001b81
     49c:	40001800 	.word	0x40001800

000004a0 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     4a0:	b500      	push	{lr}
     4a2:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     4a4:	ab01      	add	r3, sp, #4
     4a6:	2280      	movs	r2, #128	; 0x80
     4a8:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     4aa:	780a      	ldrb	r2, [r1, #0]
     4ac:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     4ae:	784a      	ldrb	r2, [r1, #1]
     4b0:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     4b2:	788a      	ldrb	r2, [r1, #2]
     4b4:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     4b6:	0019      	movs	r1, r3
     4b8:	4b01      	ldr	r3, [pc, #4]	; (4c0 <port_pin_set_config+0x20>)
     4ba:	4798      	blx	r3
}
     4bc:	b003      	add	sp, #12
     4be:	bd00      	pop	{pc}
     4c0:	00001b81 	.word	0x00001b81

000004c4 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     4c4:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     4c6:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     4c8:	2340      	movs	r3, #64	; 0x40
     4ca:	2400      	movs	r4, #0
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     4cc:	4281      	cmp	r1, r0
     4ce:	d201      	bcs.n	4d4 <_sercom_get_sync_baud_val+0x10>
     4d0:	e00a      	b.n	4e8 <_sercom_get_sync_baud_val+0x24>

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
		baud_calculated++;
     4d2:	001c      	movs	r4, r3
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
     4d4:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     4d6:	1c63      	adds	r3, r4, #1
     4d8:	b29b      	uxth	r3, r3
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     4da:	4288      	cmp	r0, r1
     4dc:	d9f9      	bls.n	4d2 <_sercom_get_sync_baud_val+0xe>

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     4de:	2340      	movs	r3, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     4e0:	2cff      	cmp	r4, #255	; 0xff
     4e2:	d801      	bhi.n	4e8 <_sercom_get_sync_baud_val+0x24>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
     4e4:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     4e6:	2300      	movs	r3, #0
	}
}
     4e8:	0018      	movs	r0, r3
     4ea:	bd10      	pop	{r4, pc}

000004ec <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     4ec:	b5f0      	push	{r4, r5, r6, r7, lr}
     4ee:	465f      	mov	r7, fp
     4f0:	4656      	mov	r6, sl
     4f2:	464d      	mov	r5, r9
     4f4:	4644      	mov	r4, r8
     4f6:	b4f0      	push	{r4, r5, r6, r7}
     4f8:	b089      	sub	sp, #36	; 0x24
     4fa:	000c      	movs	r4, r1
     4fc:	9205      	str	r2, [sp, #20]
     4fe:	aa12      	add	r2, sp, #72	; 0x48
     500:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     502:	0002      	movs	r2, r0
     504:	434a      	muls	r2, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     506:	2540      	movs	r5, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     508:	42a2      	cmp	r2, r4
     50a:	d900      	bls.n	50e <_sercom_get_async_baud_val+0x22>
     50c:	e0c6      	b.n	69c <_sercom_get_async_baud_val+0x1b0>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     50e:	2b00      	cmp	r3, #0
     510:	d151      	bne.n	5b6 <_sercom_get_async_baud_val+0xca>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     512:	0002      	movs	r2, r0
     514:	0008      	movs	r0, r1
     516:	2100      	movs	r1, #0
     518:	4d64      	ldr	r5, [pc, #400]	; (6ac <_sercom_get_async_baud_val+0x1c0>)
     51a:	47a8      	blx	r5
     51c:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
     51e:	0026      	movs	r6, r4
     520:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     522:	2300      	movs	r3, #0
     524:	2400      	movs	r4, #0
     526:	9300      	str	r3, [sp, #0]
     528:	9401      	str	r4, [sp, #4]
     52a:	2200      	movs	r2, #0
     52c:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     52e:	203f      	movs	r0, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     530:	2120      	movs	r1, #32
     532:	468c      	mov	ip, r1
     534:	391f      	subs	r1, #31
     536:	9602      	str	r6, [sp, #8]
     538:	9703      	str	r7, [sp, #12]
     53a:	2420      	movs	r4, #32
     53c:	4264      	negs	r4, r4
     53e:	1904      	adds	r4, r0, r4
     540:	d403      	bmi.n	54a <_sercom_get_async_baud_val+0x5e>
     542:	000d      	movs	r5, r1
     544:	40a5      	lsls	r5, r4
     546:	46a8      	mov	r8, r5
     548:	e004      	b.n	554 <_sercom_get_async_baud_val+0x68>
     54a:	4664      	mov	r4, ip
     54c:	1a24      	subs	r4, r4, r0
     54e:	000d      	movs	r5, r1
     550:	40e5      	lsrs	r5, r4
     552:	46a8      	mov	r8, r5
     554:	000c      	movs	r4, r1
     556:	4084      	lsls	r4, r0
     558:	46a1      	mov	r9, r4

		r = r << 1;
     55a:	0014      	movs	r4, r2
     55c:	001d      	movs	r5, r3
     55e:	18a4      	adds	r4, r4, r2
     560:	415d      	adcs	r5, r3
     562:	0022      	movs	r2, r4
     564:	002b      	movs	r3, r5

		if (n & bit_shift) {
     566:	4646      	mov	r6, r8
     568:	465f      	mov	r7, fp
     56a:	423e      	tst	r6, r7
     56c:	d003      	beq.n	576 <_sercom_get_async_baud_val+0x8a>
			r |= 0x01;
     56e:	000e      	movs	r6, r1
     570:	4326      	orrs	r6, r4
     572:	0032      	movs	r2, r6
     574:	002b      	movs	r3, r5
		}

		if (r >= d) {
     576:	9c02      	ldr	r4, [sp, #8]
     578:	9d03      	ldr	r5, [sp, #12]
     57a:	429d      	cmp	r5, r3
     57c:	d80f      	bhi.n	59e <_sercom_get_async_baud_val+0xb2>
     57e:	d101      	bne.n	584 <_sercom_get_async_baud_val+0x98>
     580:	4294      	cmp	r4, r2
     582:	d80c      	bhi.n	59e <_sercom_get_async_baud_val+0xb2>
			r = r - d;
     584:	9c02      	ldr	r4, [sp, #8]
     586:	9d03      	ldr	r5, [sp, #12]
     588:	1b12      	subs	r2, r2, r4
     58a:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     58c:	464d      	mov	r5, r9
     58e:	9e00      	ldr	r6, [sp, #0]
     590:	9f01      	ldr	r7, [sp, #4]
     592:	4335      	orrs	r5, r6
     594:	003c      	movs	r4, r7
     596:	4646      	mov	r6, r8
     598:	4334      	orrs	r4, r6
     59a:	9500      	str	r5, [sp, #0]
     59c:	9401      	str	r4, [sp, #4]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     59e:	3801      	subs	r0, #1
     5a0:	d2cb      	bcs.n	53a <_sercom_get_async_baud_val+0x4e>
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
     5a2:	2200      	movs	r2, #0
     5a4:	2301      	movs	r3, #1
     5a6:	9800      	ldr	r0, [sp, #0]
     5a8:	9901      	ldr	r1, [sp, #4]
     5aa:	1a12      	subs	r2, r2, r0
     5ac:	418b      	sbcs	r3, r1
     5ae:	0c12      	lsrs	r2, r2, #16
     5b0:	041b      	lsls	r3, r3, #16
     5b2:	431a      	orrs	r2, r3
     5b4:	e06f      	b.n	696 <_sercom_get_async_baud_val+0x1aa>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
     5b6:	2200      	movs	r2, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     5b8:	2b01      	cmp	r3, #1
     5ba:	d16c      	bne.n	696 <_sercom_get_async_baud_val+0x1aa>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     5bc:	0f63      	lsrs	r3, r4, #29
     5be:	9304      	str	r3, [sp, #16]
     5c0:	00e3      	lsls	r3, r4, #3
     5c2:	4698      	mov	r8, r3
			temp2 = ((uint64_t)baudrate * sample_num);
     5c4:	000a      	movs	r2, r1
     5c6:	2300      	movs	r3, #0
     5c8:	2100      	movs	r1, #0
     5ca:	4c38      	ldr	r4, [pc, #224]	; (6ac <_sercom_get_async_baud_val+0x1c0>)
     5cc:	47a0      	blx	r4
     5ce:	0004      	movs	r4, r0
     5d0:	000d      	movs	r5, r1
     5d2:	2300      	movs	r3, #0
     5d4:	469c      	mov	ip, r3
     5d6:	9306      	str	r3, [sp, #24]
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
     5d8:	3320      	adds	r3, #32
     5da:	469b      	mov	fp, r3
     5dc:	2601      	movs	r6, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
     5de:	4663      	mov	r3, ip
     5e0:	9307      	str	r3, [sp, #28]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     5e2:	2300      	movs	r3, #0
     5e4:	9302      	str	r3, [sp, #8]
     5e6:	2200      	movs	r2, #0
     5e8:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     5ea:	213f      	movs	r1, #63	; 0x3f
     5ec:	9400      	str	r4, [sp, #0]
     5ee:	9501      	str	r5, [sp, #4]
     5f0:	000f      	movs	r7, r1
		bit_shift = (uint64_t)1 << i;
     5f2:	2120      	movs	r1, #32
     5f4:	4249      	negs	r1, r1
     5f6:	1879      	adds	r1, r7, r1
     5f8:	d403      	bmi.n	602 <_sercom_get_async_baud_val+0x116>
     5fa:	0030      	movs	r0, r6
     5fc:	4088      	lsls	r0, r1
     5fe:	4684      	mov	ip, r0
     600:	e004      	b.n	60c <_sercom_get_async_baud_val+0x120>
     602:	4659      	mov	r1, fp
     604:	1bc9      	subs	r1, r1, r7
     606:	0030      	movs	r0, r6
     608:	40c8      	lsrs	r0, r1
     60a:	4684      	mov	ip, r0
     60c:	0031      	movs	r1, r6
     60e:	40b9      	lsls	r1, r7
     610:	4689      	mov	r9, r1

		r = r << 1;
     612:	0010      	movs	r0, r2
     614:	0019      	movs	r1, r3
     616:	1880      	adds	r0, r0, r2
     618:	4159      	adcs	r1, r3
     61a:	0002      	movs	r2, r0
     61c:	000b      	movs	r3, r1

		if (n & bit_shift) {
     61e:	4644      	mov	r4, r8
     620:	464d      	mov	r5, r9
     622:	402c      	ands	r4, r5
     624:	46a2      	mov	sl, r4
     626:	4664      	mov	r4, ip
     628:	9d04      	ldr	r5, [sp, #16]
     62a:	402c      	ands	r4, r5
     62c:	46a4      	mov	ip, r4
     62e:	4654      	mov	r4, sl
     630:	4665      	mov	r5, ip
     632:	432c      	orrs	r4, r5
     634:	d003      	beq.n	63e <_sercom_get_async_baud_val+0x152>
			r |= 0x01;
     636:	0034      	movs	r4, r6
     638:	4304      	orrs	r4, r0
     63a:	0022      	movs	r2, r4
     63c:	000b      	movs	r3, r1
		}

		if (r >= d) {
     63e:	9800      	ldr	r0, [sp, #0]
     640:	9901      	ldr	r1, [sp, #4]
     642:	4299      	cmp	r1, r3
     644:	d80a      	bhi.n	65c <_sercom_get_async_baud_val+0x170>
     646:	d101      	bne.n	64c <_sercom_get_async_baud_val+0x160>
     648:	4290      	cmp	r0, r2
     64a:	d807      	bhi.n	65c <_sercom_get_async_baud_val+0x170>
			r = r - d;
     64c:	9800      	ldr	r0, [sp, #0]
     64e:	9901      	ldr	r1, [sp, #4]
     650:	1a12      	subs	r2, r2, r0
     652:	418b      	sbcs	r3, r1
			q |= bit_shift;
     654:	9902      	ldr	r1, [sp, #8]
     656:	4648      	mov	r0, r9
     658:	4301      	orrs	r1, r0
     65a:	9102      	str	r1, [sp, #8]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     65c:	3f01      	subs	r7, #1
     65e:	d2c8      	bcs.n	5f2 <_sercom_get_async_baud_val+0x106>
     660:	9c00      	ldr	r4, [sp, #0]
     662:	9d01      	ldr	r5, [sp, #4]
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
     664:	9902      	ldr	r1, [sp, #8]
     666:	9a07      	ldr	r2, [sp, #28]
     668:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
     66a:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
     66c:	4910      	ldr	r1, [pc, #64]	; (6b0 <_sercom_get_async_baud_val+0x1c4>)
     66e:	428b      	cmp	r3, r1
     670:	d90b      	bls.n	68a <_sercom_get_async_baud_val+0x19e>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     672:	9b06      	ldr	r3, [sp, #24]
     674:	3301      	adds	r3, #1
     676:	b2db      	uxtb	r3, r3
     678:	0019      	movs	r1, r3
     67a:	9306      	str	r3, [sp, #24]
     67c:	0013      	movs	r3, r2
     67e:	3301      	adds	r3, #1
     680:	9307      	str	r3, [sp, #28]
     682:	2908      	cmp	r1, #8
     684:	d1ad      	bne.n	5e2 <_sercom_get_async_baud_val+0xf6>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     686:	2540      	movs	r5, #64	; 0x40
     688:	e008      	b.n	69c <_sercom_get_async_baud_val+0x1b0>
     68a:	2540      	movs	r5, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
     68c:	9a06      	ldr	r2, [sp, #24]
     68e:	2a08      	cmp	r2, #8
     690:	d004      	beq.n	69c <_sercom_get_async_baud_val+0x1b0>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
     692:	0352      	lsls	r2, r2, #13
     694:	431a      	orrs	r2, r3
	}

	*baudval = baud_calculated;
     696:	9b05      	ldr	r3, [sp, #20]
     698:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
     69a:	2500      	movs	r5, #0
}
     69c:	0028      	movs	r0, r5
     69e:	b009      	add	sp, #36	; 0x24
     6a0:	bc3c      	pop	{r2, r3, r4, r5}
     6a2:	4690      	mov	r8, r2
     6a4:	4699      	mov	r9, r3
     6a6:	46a2      	mov	sl, r4
     6a8:	46ab      	mov	fp, r5
     6aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
     6ac:	00004af9 	.word	0x00004af9
     6b0:	00001fff 	.word	0x00001fff

000006b4 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     6b4:	b510      	push	{r4, lr}
     6b6:	b082      	sub	sp, #8
     6b8:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     6ba:	4b0e      	ldr	r3, [pc, #56]	; (6f4 <sercom_set_gclk_generator+0x40>)
     6bc:	781b      	ldrb	r3, [r3, #0]
     6be:	2b00      	cmp	r3, #0
     6c0:	d001      	beq.n	6c6 <sercom_set_gclk_generator+0x12>
     6c2:	2900      	cmp	r1, #0
     6c4:	d00d      	beq.n	6e2 <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     6c6:	a901      	add	r1, sp, #4
     6c8:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     6ca:	2013      	movs	r0, #19
     6cc:	4b0a      	ldr	r3, [pc, #40]	; (6f8 <sercom_set_gclk_generator+0x44>)
     6ce:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     6d0:	2013      	movs	r0, #19
     6d2:	4b0a      	ldr	r3, [pc, #40]	; (6fc <sercom_set_gclk_generator+0x48>)
     6d4:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
     6d6:	4b07      	ldr	r3, [pc, #28]	; (6f4 <sercom_set_gclk_generator+0x40>)
     6d8:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     6da:	2201      	movs	r2, #1
     6dc:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     6de:	2000      	movs	r0, #0
     6e0:	e006      	b.n	6f0 <sercom_set_gclk_generator+0x3c>
	} else if (generator_source == _sercom_config.generator_source) {
     6e2:	4b04      	ldr	r3, [pc, #16]	; (6f4 <sercom_set_gclk_generator+0x40>)
     6e4:	785b      	ldrb	r3, [r3, #1]
     6e6:	4283      	cmp	r3, r0
     6e8:	d001      	beq.n	6ee <sercom_set_gclk_generator+0x3a>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     6ea:	201d      	movs	r0, #29
     6ec:	e000      	b.n	6f0 <sercom_set_gclk_generator+0x3c>
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config */
		return STATUS_OK;
     6ee:	2000      	movs	r0, #0
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     6f0:	b002      	add	sp, #8
     6f2:	bd10      	pop	{r4, pc}
     6f4:	2000009c 	.word	0x2000009c
     6f8:	00001a89 	.word	0x00001a89
     6fc:	000019fd 	.word	0x000019fd

00000700 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     700:	4b44      	ldr	r3, [pc, #272]	; (814 <_sercom_get_default_pad+0x114>)
     702:	4298      	cmp	r0, r3
     704:	d033      	beq.n	76e <_sercom_get_default_pad+0x6e>
     706:	d806      	bhi.n	716 <_sercom_get_default_pad+0x16>
     708:	4b43      	ldr	r3, [pc, #268]	; (818 <_sercom_get_default_pad+0x118>)
     70a:	4298      	cmp	r0, r3
     70c:	d00d      	beq.n	72a <_sercom_get_default_pad+0x2a>
     70e:	4b43      	ldr	r3, [pc, #268]	; (81c <_sercom_get_default_pad+0x11c>)
     710:	4298      	cmp	r0, r3
     712:	d01b      	beq.n	74c <_sercom_get_default_pad+0x4c>
     714:	e06f      	b.n	7f6 <_sercom_get_default_pad+0xf6>
     716:	4b42      	ldr	r3, [pc, #264]	; (820 <_sercom_get_default_pad+0x120>)
     718:	4298      	cmp	r0, r3
     71a:	d04a      	beq.n	7b2 <_sercom_get_default_pad+0xb2>
     71c:	4b41      	ldr	r3, [pc, #260]	; (824 <_sercom_get_default_pad+0x124>)
     71e:	4298      	cmp	r0, r3
     720:	d058      	beq.n	7d4 <_sercom_get_default_pad+0xd4>
     722:	4b41      	ldr	r3, [pc, #260]	; (828 <_sercom_get_default_pad+0x128>)
     724:	4298      	cmp	r0, r3
     726:	d166      	bne.n	7f6 <_sercom_get_default_pad+0xf6>
     728:	e032      	b.n	790 <_sercom_get_default_pad+0x90>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     72a:	2901      	cmp	r1, #1
     72c:	d006      	beq.n	73c <_sercom_get_default_pad+0x3c>
     72e:	2900      	cmp	r1, #0
     730:	d063      	beq.n	7fa <_sercom_get_default_pad+0xfa>
     732:	2902      	cmp	r1, #2
     734:	d006      	beq.n	744 <_sercom_get_default_pad+0x44>
     736:	2903      	cmp	r1, #3
     738:	d006      	beq.n	748 <_sercom_get_default_pad+0x48>
     73a:	e001      	b.n	740 <_sercom_get_default_pad+0x40>
     73c:	483b      	ldr	r0, [pc, #236]	; (82c <_sercom_get_default_pad+0x12c>)
     73e:	e067      	b.n	810 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     740:	2000      	movs	r0, #0
     742:	e065      	b.n	810 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     744:	483a      	ldr	r0, [pc, #232]	; (830 <_sercom_get_default_pad+0x130>)
     746:	e063      	b.n	810 <_sercom_get_default_pad+0x110>
     748:	483a      	ldr	r0, [pc, #232]	; (834 <_sercom_get_default_pad+0x134>)
     74a:	e061      	b.n	810 <_sercom_get_default_pad+0x110>
     74c:	2901      	cmp	r1, #1
     74e:	d006      	beq.n	75e <_sercom_get_default_pad+0x5e>
     750:	2900      	cmp	r1, #0
     752:	d054      	beq.n	7fe <_sercom_get_default_pad+0xfe>
     754:	2902      	cmp	r1, #2
     756:	d006      	beq.n	766 <_sercom_get_default_pad+0x66>
     758:	2903      	cmp	r1, #3
     75a:	d006      	beq.n	76a <_sercom_get_default_pad+0x6a>
     75c:	e001      	b.n	762 <_sercom_get_default_pad+0x62>
     75e:	4836      	ldr	r0, [pc, #216]	; (838 <_sercom_get_default_pad+0x138>)
     760:	e056      	b.n	810 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     762:	2000      	movs	r0, #0
     764:	e054      	b.n	810 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     766:	4835      	ldr	r0, [pc, #212]	; (83c <_sercom_get_default_pad+0x13c>)
     768:	e052      	b.n	810 <_sercom_get_default_pad+0x110>
     76a:	4835      	ldr	r0, [pc, #212]	; (840 <_sercom_get_default_pad+0x140>)
     76c:	e050      	b.n	810 <_sercom_get_default_pad+0x110>
     76e:	2901      	cmp	r1, #1
     770:	d006      	beq.n	780 <_sercom_get_default_pad+0x80>
     772:	2900      	cmp	r1, #0
     774:	d045      	beq.n	802 <_sercom_get_default_pad+0x102>
     776:	2902      	cmp	r1, #2
     778:	d006      	beq.n	788 <_sercom_get_default_pad+0x88>
     77a:	2903      	cmp	r1, #3
     77c:	d006      	beq.n	78c <_sercom_get_default_pad+0x8c>
     77e:	e001      	b.n	784 <_sercom_get_default_pad+0x84>
     780:	4830      	ldr	r0, [pc, #192]	; (844 <_sercom_get_default_pad+0x144>)
     782:	e045      	b.n	810 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     784:	2000      	movs	r0, #0
     786:	e043      	b.n	810 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     788:	482f      	ldr	r0, [pc, #188]	; (848 <_sercom_get_default_pad+0x148>)
     78a:	e041      	b.n	810 <_sercom_get_default_pad+0x110>
     78c:	482f      	ldr	r0, [pc, #188]	; (84c <_sercom_get_default_pad+0x14c>)
     78e:	e03f      	b.n	810 <_sercom_get_default_pad+0x110>
     790:	2901      	cmp	r1, #1
     792:	d006      	beq.n	7a2 <_sercom_get_default_pad+0xa2>
     794:	2900      	cmp	r1, #0
     796:	d036      	beq.n	806 <_sercom_get_default_pad+0x106>
     798:	2902      	cmp	r1, #2
     79a:	d006      	beq.n	7aa <_sercom_get_default_pad+0xaa>
     79c:	2903      	cmp	r1, #3
     79e:	d006      	beq.n	7ae <_sercom_get_default_pad+0xae>
     7a0:	e001      	b.n	7a6 <_sercom_get_default_pad+0xa6>
     7a2:	482b      	ldr	r0, [pc, #172]	; (850 <_sercom_get_default_pad+0x150>)
     7a4:	e034      	b.n	810 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     7a6:	2000      	movs	r0, #0
     7a8:	e032      	b.n	810 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     7aa:	482a      	ldr	r0, [pc, #168]	; (854 <_sercom_get_default_pad+0x154>)
     7ac:	e030      	b.n	810 <_sercom_get_default_pad+0x110>
     7ae:	482a      	ldr	r0, [pc, #168]	; (858 <_sercom_get_default_pad+0x158>)
     7b0:	e02e      	b.n	810 <_sercom_get_default_pad+0x110>
     7b2:	2901      	cmp	r1, #1
     7b4:	d006      	beq.n	7c4 <_sercom_get_default_pad+0xc4>
     7b6:	2900      	cmp	r1, #0
     7b8:	d027      	beq.n	80a <_sercom_get_default_pad+0x10a>
     7ba:	2902      	cmp	r1, #2
     7bc:	d006      	beq.n	7cc <_sercom_get_default_pad+0xcc>
     7be:	2903      	cmp	r1, #3
     7c0:	d006      	beq.n	7d0 <_sercom_get_default_pad+0xd0>
     7c2:	e001      	b.n	7c8 <_sercom_get_default_pad+0xc8>
     7c4:	4825      	ldr	r0, [pc, #148]	; (85c <_sercom_get_default_pad+0x15c>)
     7c6:	e023      	b.n	810 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     7c8:	2000      	movs	r0, #0
     7ca:	e021      	b.n	810 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     7cc:	4824      	ldr	r0, [pc, #144]	; (860 <_sercom_get_default_pad+0x160>)
     7ce:	e01f      	b.n	810 <_sercom_get_default_pad+0x110>
     7d0:	4824      	ldr	r0, [pc, #144]	; (864 <_sercom_get_default_pad+0x164>)
     7d2:	e01d      	b.n	810 <_sercom_get_default_pad+0x110>
     7d4:	2901      	cmp	r1, #1
     7d6:	d006      	beq.n	7e6 <_sercom_get_default_pad+0xe6>
     7d8:	2900      	cmp	r1, #0
     7da:	d018      	beq.n	80e <_sercom_get_default_pad+0x10e>
     7dc:	2902      	cmp	r1, #2
     7de:	d006      	beq.n	7ee <_sercom_get_default_pad+0xee>
     7e0:	2903      	cmp	r1, #3
     7e2:	d006      	beq.n	7f2 <_sercom_get_default_pad+0xf2>
     7e4:	e001      	b.n	7ea <_sercom_get_default_pad+0xea>
     7e6:	4820      	ldr	r0, [pc, #128]	; (868 <_sercom_get_default_pad+0x168>)
     7e8:	e012      	b.n	810 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     7ea:	2000      	movs	r0, #0
     7ec:	e010      	b.n	810 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     7ee:	481f      	ldr	r0, [pc, #124]	; (86c <_sercom_get_default_pad+0x16c>)
     7f0:	e00e      	b.n	810 <_sercom_get_default_pad+0x110>
     7f2:	481f      	ldr	r0, [pc, #124]	; (870 <_sercom_get_default_pad+0x170>)
     7f4:	e00c      	b.n	810 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     7f6:	2000      	movs	r0, #0
     7f8:	e00a      	b.n	810 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     7fa:	481e      	ldr	r0, [pc, #120]	; (874 <_sercom_get_default_pad+0x174>)
     7fc:	e008      	b.n	810 <_sercom_get_default_pad+0x110>
     7fe:	2003      	movs	r0, #3
     800:	e006      	b.n	810 <_sercom_get_default_pad+0x110>
     802:	481d      	ldr	r0, [pc, #116]	; (878 <_sercom_get_default_pad+0x178>)
     804:	e004      	b.n	810 <_sercom_get_default_pad+0x110>
     806:	481d      	ldr	r0, [pc, #116]	; (87c <_sercom_get_default_pad+0x17c>)
     808:	e002      	b.n	810 <_sercom_get_default_pad+0x110>
     80a:	481d      	ldr	r0, [pc, #116]	; (880 <_sercom_get_default_pad+0x180>)
     80c:	e000      	b.n	810 <_sercom_get_default_pad+0x110>
     80e:	481d      	ldr	r0, [pc, #116]	; (884 <_sercom_get_default_pad+0x184>)
	}

	Assert(false);
	return 0;
}
     810:	4770      	bx	lr
     812:	46c0      	nop			; (mov r8, r8)
     814:	42001000 	.word	0x42001000
     818:	42000800 	.word	0x42000800
     81c:	42000c00 	.word	0x42000c00
     820:	42001800 	.word	0x42001800
     824:	42001c00 	.word	0x42001c00
     828:	42001400 	.word	0x42001400
     82c:	00050003 	.word	0x00050003
     830:	00060003 	.word	0x00060003
     834:	00070003 	.word	0x00070003
     838:	00010003 	.word	0x00010003
     83c:	001e0003 	.word	0x001e0003
     840:	001f0003 	.word	0x001f0003
     844:	000d0002 	.word	0x000d0002
     848:	000e0002 	.word	0x000e0002
     84c:	000f0002 	.word	0x000f0002
     850:	00110003 	.word	0x00110003
     854:	00120003 	.word	0x00120003
     858:	00130003 	.word	0x00130003
     85c:	003f0005 	.word	0x003f0005
     860:	003e0005 	.word	0x003e0005
     864:	00520005 	.word	0x00520005
     868:	00170003 	.word	0x00170003
     86c:	00180003 	.word	0x00180003
     870:	00190003 	.word	0x00190003
     874:	00040003 	.word	0x00040003
     878:	000c0002 	.word	0x000c0002
     87c:	00100003 	.word	0x00100003
     880:	00530005 	.word	0x00530005
     884:	00160003 	.word	0x00160003

00000888 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     888:	b530      	push	{r4, r5, lr}
     88a:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     88c:	4b0c      	ldr	r3, [pc, #48]	; (8c0 <_sercom_get_sercom_inst_index+0x38>)
     88e:	466a      	mov	r2, sp
     890:	cb32      	ldmia	r3!, {r1, r4, r5}
     892:	c232      	stmia	r2!, {r1, r4, r5}
     894:	cb32      	ldmia	r3!, {r1, r4, r5}
     896:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     898:	9b00      	ldr	r3, [sp, #0]
     89a:	4283      	cmp	r3, r0
     89c:	d006      	beq.n	8ac <_sercom_get_sercom_inst_index+0x24>
     89e:	2301      	movs	r3, #1
     8a0:	009a      	lsls	r2, r3, #2
     8a2:	4669      	mov	r1, sp
     8a4:	5852      	ldr	r2, [r2, r1]
     8a6:	4282      	cmp	r2, r0
     8a8:	d103      	bne.n	8b2 <_sercom_get_sercom_inst_index+0x2a>
     8aa:	e000      	b.n	8ae <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     8ac:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
     8ae:	b2d8      	uxtb	r0, r3
     8b0:	e003      	b.n	8ba <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     8b2:	3301      	adds	r3, #1
     8b4:	2b06      	cmp	r3, #6
     8b6:	d1f3      	bne.n	8a0 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     8b8:	2000      	movs	r0, #0
}
     8ba:	b007      	add	sp, #28
     8bc:	bd30      	pop	{r4, r5, pc}
     8be:	46c0      	nop			; (mov r8, r8)
     8c0:	000056e4 	.word	0x000056e4

000008c4 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     8c4:	4770      	bx	lr
     8c6:	46c0      	nop			; (mov r8, r8)

000008c8 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     8c8:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     8ca:	4b0a      	ldr	r3, [pc, #40]	; (8f4 <_sercom_set_handler+0x2c>)
     8cc:	781b      	ldrb	r3, [r3, #0]
     8ce:	2b00      	cmp	r3, #0
     8d0:	d10c      	bne.n	8ec <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     8d2:	4f09      	ldr	r7, [pc, #36]	; (8f8 <_sercom_set_handler+0x30>)
     8d4:	4e09      	ldr	r6, [pc, #36]	; (8fc <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     8d6:	4d0a      	ldr	r5, [pc, #40]	; (900 <_sercom_set_handler+0x38>)
     8d8:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     8da:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     8dc:	195a      	adds	r2, r3, r5
     8de:	6014      	str	r4, [r2, #0]
     8e0:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     8e2:	2b18      	cmp	r3, #24
     8e4:	d1f9      	bne.n	8da <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
     8e6:	2201      	movs	r2, #1
     8e8:	4b02      	ldr	r3, [pc, #8]	; (8f4 <_sercom_set_handler+0x2c>)
     8ea:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     8ec:	0080      	lsls	r0, r0, #2
     8ee:	4b02      	ldr	r3, [pc, #8]	; (8f8 <_sercom_set_handler+0x30>)
     8f0:	50c1      	str	r1, [r0, r3]
}
     8f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     8f4:	2000009e 	.word	0x2000009e
     8f8:	200000a0 	.word	0x200000a0
     8fc:	000008c5 	.word	0x000008c5
     900:	20000858 	.word	0x20000858

00000904 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     904:	b510      	push	{r4, lr}
     906:	b082      	sub	sp, #8
     908:	0004      	movs	r4, r0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     90a:	2206      	movs	r2, #6
     90c:	4905      	ldr	r1, [pc, #20]	; (924 <_sercom_get_interrupt_vector+0x20>)
     90e:	4668      	mov	r0, sp
     910:	4b05      	ldr	r3, [pc, #20]	; (928 <_sercom_get_interrupt_vector+0x24>)
     912:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     914:	0020      	movs	r0, r4
     916:	4b05      	ldr	r3, [pc, #20]	; (92c <_sercom_get_interrupt_vector+0x28>)
     918:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     91a:	466b      	mov	r3, sp
     91c:	5618      	ldrsb	r0, [r3, r0]
}
     91e:	b002      	add	sp, #8
     920:	bd10      	pop	{r4, pc}
     922:	46c0      	nop			; (mov r8, r8)
     924:	000056fc 	.word	0x000056fc
     928:	00004b9d 	.word	0x00004b9d
     92c:	00000889 	.word	0x00000889

00000930 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     930:	b510      	push	{r4, lr}
     932:	4b02      	ldr	r3, [pc, #8]	; (93c <SERCOM0_Handler+0xc>)
     934:	681b      	ldr	r3, [r3, #0]
     936:	2000      	movs	r0, #0
     938:	4798      	blx	r3
     93a:	bd10      	pop	{r4, pc}
     93c:	200000a0 	.word	0x200000a0

00000940 <SERCOM1_Handler>:
     940:	b510      	push	{r4, lr}
     942:	4b02      	ldr	r3, [pc, #8]	; (94c <SERCOM1_Handler+0xc>)
     944:	685b      	ldr	r3, [r3, #4]
     946:	2001      	movs	r0, #1
     948:	4798      	blx	r3
     94a:	bd10      	pop	{r4, pc}
     94c:	200000a0 	.word	0x200000a0

00000950 <SERCOM2_Handler>:
     950:	b510      	push	{r4, lr}
     952:	4b02      	ldr	r3, [pc, #8]	; (95c <SERCOM2_Handler+0xc>)
     954:	689b      	ldr	r3, [r3, #8]
     956:	2002      	movs	r0, #2
     958:	4798      	blx	r3
     95a:	bd10      	pop	{r4, pc}
     95c:	200000a0 	.word	0x200000a0

00000960 <SERCOM3_Handler>:
     960:	b510      	push	{r4, lr}
     962:	4b02      	ldr	r3, [pc, #8]	; (96c <SERCOM3_Handler+0xc>)
     964:	68db      	ldr	r3, [r3, #12]
     966:	2003      	movs	r0, #3
     968:	4798      	blx	r3
     96a:	bd10      	pop	{r4, pc}
     96c:	200000a0 	.word	0x200000a0

00000970 <SERCOM4_Handler>:
     970:	b510      	push	{r4, lr}
     972:	4b02      	ldr	r3, [pc, #8]	; (97c <SERCOM4_Handler+0xc>)
     974:	691b      	ldr	r3, [r3, #16]
     976:	2004      	movs	r0, #4
     978:	4798      	blx	r3
     97a:	bd10      	pop	{r4, pc}
     97c:	200000a0 	.word	0x200000a0

00000980 <SERCOM5_Handler>:
     980:	b510      	push	{r4, lr}
     982:	4b02      	ldr	r3, [pc, #8]	; (98c <SERCOM5_Handler+0xc>)
     984:	695b      	ldr	r3, [r3, #20]
     986:	2005      	movs	r0, #5
     988:	4798      	blx	r3
     98a:	bd10      	pop	{r4, pc}
     98c:	200000a0 	.word	0x200000a0

00000990 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     990:	b5f0      	push	{r4, r5, r6, r7, lr}
     992:	4657      	mov	r7, sl
     994:	464e      	mov	r6, r9
     996:	4645      	mov	r5, r8
     998:	b4e0      	push	{r5, r6, r7}
     99a:	b08a      	sub	sp, #40	; 0x28
     99c:	0005      	movs	r5, r0
     99e:	000e      	movs	r6, r1
     9a0:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     9a2:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     9a4:	680b      	ldr	r3, [r1, #0]
     9a6:	079b      	lsls	r3, r3, #30
     9a8:	d400      	bmi.n	9ac <spi_init+0x1c>
     9aa:	e08c      	b.n	ac6 <spi_init+0x136>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
     9ac:	6a93      	ldr	r3, [r2, #40]	; 0x28
     9ae:	9305      	str	r3, [sp, #20]
     9b0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
     9b2:	9306      	str	r3, [sp, #24]
     9b4:	6b13      	ldr	r3, [r2, #48]	; 0x30
     9b6:	9307      	str	r3, [sp, #28]
     9b8:	6b53      	ldr	r3, [r2, #52]	; 0x34
     9ba:	9308      	str	r3, [sp, #32]
     9bc:	2700      	movs	r7, #0
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);
     9be:	231f      	movs	r3, #31
     9c0:	4699      	mov	r9, r3
     9c2:	b2f9      	uxtb	r1, r7
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
     9c4:	00bb      	lsls	r3, r7, #2
     9c6:	aa05      	add	r2, sp, #20
     9c8:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
     9ca:	2800      	cmp	r0, #0
     9cc:	d102      	bne.n	9d4 <spi_init+0x44>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     9ce:	0030      	movs	r0, r6
     9d0:	4b8f      	ldr	r3, [pc, #572]	; (c10 <spi_init+0x280>)
     9d2:	4798      	blx	r3
		}

		if (current_pinmux == PINMUX_UNUSED) {
     9d4:	1c43      	adds	r3, r0, #1
     9d6:	d029      	beq.n	a2c <spi_init+0x9c>
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
     9d8:	0402      	lsls	r2, r0, #16
     9da:	0c13      	lsrs	r3, r2, #16
     9dc:	4698      	mov	r8, r3
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
     9de:	0c00      	lsrs	r0, r0, #16
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     9e0:	b2c1      	uxtb	r1, r0
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     9e2:	2300      	movs	r3, #0
     9e4:	469c      	mov	ip, r3
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     9e6:	0603      	lsls	r3, r0, #24
     9e8:	d404      	bmi.n	9f4 <spi_init+0x64>
		return &(ports[port_index]->Group[group_index]);
     9ea:	094b      	lsrs	r3, r1, #5
     9ec:	01db      	lsls	r3, r3, #7
     9ee:	4a89      	ldr	r2, [pc, #548]	; (c14 <spi_init+0x284>)
     9f0:	4694      	mov	ip, r2
     9f2:	449c      	add	ip, r3
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);
     9f4:	464b      	mov	r3, r9
     9f6:	400b      	ands	r3, r1

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
     9f8:	4660      	mov	r0, ip
     9fa:	18c0      	adds	r0, r0, r3
     9fc:	3040      	adds	r0, #64	; 0x40
     9fe:	7800      	ldrb	r0, [r0, #0]
     a00:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
     a02:	2080      	movs	r0, #128	; 0x80
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
     a04:	4652      	mov	r2, sl
     a06:	07d2      	lsls	r2, r2, #31
     a08:	d50a      	bpl.n	a20 <spi_init+0x90>
		return SYSTEM_PINMUX_GPIO;
	}

	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
     a0a:	085b      	lsrs	r3, r3, #1
     a0c:	4463      	add	r3, ip
     a0e:	3330      	adds	r3, #48	; 0x30
     a10:	7818      	ldrb	r0, [r3, #0]
     a12:	b2c0      	uxtb	r0, r0

	if (pin_index & 1) {
     a14:	07cb      	lsls	r3, r1, #31
     a16:	d501      	bpl.n	a1c <spi_init+0x8c>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
     a18:	0900      	lsrs	r0, r0, #4
     a1a:	e001      	b.n	a20 <spi_init+0x90>
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
     a1c:	230f      	movs	r3, #15
     a1e:	4018      	ands	r0, r3

		if (current_pinmux == PINMUX_UNUSED) {
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
     a20:	4580      	cmp	r8, r0
     a22:	d003      	beq.n	a2c <spi_init+0x9c>
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
			module->hw = NULL;
     a24:	2300      	movs	r3, #0
     a26:	602b      	str	r3, [r5, #0]
			return STATUS_ERR_DENIED;
     a28:	201c      	movs	r0, #28
     a2a:	e0ea      	b.n	c02 <spi_init+0x272>
     a2c:	3701      	adds	r7, #1
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     a2e:	2f04      	cmp	r7, #4
     a30:	d1c7      	bne.n	9c2 <spi_init+0x32>
	}

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
     a32:	2013      	movs	r0, #19
     a34:	4b78      	ldr	r3, [pc, #480]	; (c18 <spi_init+0x288>)
     a36:	4798      	blx	r3
	uint32_t addr = 0;
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
     a38:	7822      	ldrb	r2, [r4, #0]
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
#  endif
	/* Value to read CTRLA, CTRLB and ADDR register */
	uint32_t ctrla = 0;
     a3a:	2100      	movs	r1, #0
	uint32_t addr = 0;
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
     a3c:	2a01      	cmp	r2, #1
     a3e:	d112      	bne.n	a66 <spi_init+0xd6>
		enum status_code error_code = _sercom_get_sync_baud_val(
     a40:	aa04      	add	r2, sp, #16
     a42:	0001      	movs	r1, r0
     a44:	69a0      	ldr	r0, [r4, #24]
     a46:	4b75      	ldr	r3, [pc, #468]	; (c1c <spi_init+0x28c>)
     a48:	4798      	blx	r3
     a4a:	0003      	movs	r3, r0
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
     a4c:	2017      	movs	r0, #23
	if (config->mode == SPI_MODE_MASTER) {
		enum status_code error_code = _sercom_get_sync_baud_val(
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
     a4e:	2b00      	cmp	r3, #0
     a50:	d000      	beq.n	a54 <spi_init+0xc4>
     a52:	e0d6      	b.n	c02 <spi_init+0x272>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
     a54:	7b33      	ldrb	r3, [r6, #12]
     a56:	b2db      	uxtb	r3, r3
     a58:	aa04      	add	r2, sp, #16
     a5a:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
     a5c:	3005      	adds	r0, #5
		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
     a5e:	429a      	cmp	r2, r3
     a60:	d000      	beq.n	a64 <spi_init+0xd4>
     a62:	e0ce      	b.n	c02 <spi_init+0x272>
			return STATUS_ERR_DENIED;
		}

		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
     a64:	210c      	movs	r1, #12

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;

	/* Set MUX setting */
	ctrla |= config->mux_setting;
     a66:	6863      	ldr	r3, [r4, #4]
     a68:	68a2      	ldr	r2, [r4, #8]
     a6a:	4313      	orrs	r3, r2
     a6c:	68e2      	ldr	r2, [r4, #12]
     a6e:	4313      	orrs	r3, r2
     a70:	430b      	orrs	r3, r1

	/* Set SPI character size */
	ctrlb |= config->character_size;
     a72:	7c21      	ldrb	r1, [r4, #16]

	if (config->run_in_standby) {
     a74:	7c62      	ldrb	r2, [r4, #17]
     a76:	2a00      	cmp	r2, #0
     a78:	d001      	beq.n	a7e <spi_init+0xee>
		/* Enable in sleep mode */
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     a7a:	2280      	movs	r2, #128	; 0x80
     a7c:	4313      	orrs	r3, r2
	}

	if (config->receiver_enable) {
     a7e:	7ca2      	ldrb	r2, [r4, #18]
     a80:	2a00      	cmp	r2, #0
     a82:	d002      	beq.n	a8a <spi_init+0xfa>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     a84:	2280      	movs	r2, #128	; 0x80
     a86:	0292      	lsls	r2, r2, #10
     a88:	4311      	orrs	r1, r2
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
     a8a:	7ce2      	ldrb	r2, [r4, #19]
     a8c:	2a00      	cmp	r2, #0
     a8e:	d002      	beq.n	a96 <spi_init+0x106>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     a90:	2280      	movs	r2, #128	; 0x80
     a92:	0092      	lsls	r2, r2, #2
     a94:	4311      	orrs	r1, r2
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
     a96:	7d22      	ldrb	r2, [r4, #20]
     a98:	2a00      	cmp	r2, #0
     a9a:	d002      	beq.n	aa2 <spi_init+0x112>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     a9c:	2280      	movs	r2, #128	; 0x80
     a9e:	0192      	lsls	r2, r2, #6
     aa0:	4311      	orrs	r1, r2
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
     aa2:	6830      	ldr	r0, [r6, #0]
     aa4:	2202      	movs	r2, #2
     aa6:	4313      	orrs	r3, r2
     aa8:	4283      	cmp	r3, r0
     aaa:	d108      	bne.n	abe <spi_init+0x12e>
			spi_module->CTRLB.reg == ctrlb) {
     aac:	6873      	ldr	r3, [r6, #4]
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
     aae:	428b      	cmp	r3, r1
     ab0:	d105      	bne.n	abe <spi_init+0x12e>
			spi_module->CTRLB.reg == ctrlb) {
		module->mode           = config->mode;
     ab2:	7823      	ldrb	r3, [r4, #0]
     ab4:	716b      	strb	r3, [r5, #5]
		module->character_size = config->character_size;
     ab6:	7c23      	ldrb	r3, [r4, #16]
     ab8:	71ab      	strb	r3, [r5, #6]
		return STATUS_OK;
     aba:	2000      	movs	r0, #0
     abc:	e0a1      	b.n	c02 <spi_init+0x272>
	}

	/* Not same config, wipe module pointer and return */
	module->hw = NULL;
     abe:	2300      	movs	r3, #0
     ac0:	602b      	str	r3, [r5, #0]

	return STATUS_ERR_DENIED;
     ac2:	201c      	movs	r0, #28
     ac4:	e09d      	b.n	c02 <spi_init+0x272>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     ac6:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
     ac8:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     aca:	07db      	lsls	r3, r3, #31
     acc:	d500      	bpl.n	ad0 <spi_init+0x140>
     ace:	e098      	b.n	c02 <spi_init+0x272>
		return STATUS_BUSY;
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     ad0:	0008      	movs	r0, r1
     ad2:	4b53      	ldr	r3, [pc, #332]	; (c20 <spi_init+0x290>)
     ad4:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     ad6:	4953      	ldr	r1, [pc, #332]	; (c24 <spi_init+0x294>)
     ad8:	6a0a      	ldr	r2, [r1, #32]
     ada:	1c87      	adds	r7, r0, #2
     adc:	2301      	movs	r3, #1
     ade:	40bb      	lsls	r3, r7
     ae0:	4313      	orrs	r3, r2
     ae2:	620b      	str	r3, [r1, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     ae4:	a909      	add	r1, sp, #36	; 0x24
     ae6:	2724      	movs	r7, #36	; 0x24
     ae8:	5de3      	ldrb	r3, [r4, r7]
     aea:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     aec:	3014      	adds	r0, #20
     aee:	b2c3      	uxtb	r3, r0
     af0:	9301      	str	r3, [sp, #4]
     af2:	0018      	movs	r0, r3
     af4:	4b4c      	ldr	r3, [pc, #304]	; (c28 <spi_init+0x298>)
     af6:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     af8:	9801      	ldr	r0, [sp, #4]
     afa:	4b4c      	ldr	r3, [pc, #304]	; (c2c <spi_init+0x29c>)
     afc:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     afe:	5de0      	ldrb	r0, [r4, r7]
     b00:	2100      	movs	r1, #0
     b02:	4b4b      	ldr	r3, [pc, #300]	; (c30 <spi_init+0x2a0>)
     b04:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
     b06:	7823      	ldrb	r3, [r4, #0]
     b08:	2b01      	cmp	r3, #1
     b0a:	d103      	bne.n	b14 <spi_init+0x184>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
     b0c:	6832      	ldr	r2, [r6, #0]
     b0e:	330b      	adds	r3, #11
     b10:	4313      	orrs	r3, r2
     b12:	6033      	str	r3, [r6, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     b14:	682e      	ldr	r6, [r5, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     b16:	ab04      	add	r3, sp, #16
     b18:	2280      	movs	r2, #128	; 0x80
     b1a:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     b1c:	2200      	movs	r2, #0
     b1e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     b20:	2101      	movs	r1, #1
     b22:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
     b24:	70da      	strb	r2, [r3, #3]
	Sercom *const hw = module->hw;

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
     b26:	7823      	ldrb	r3, [r4, #0]
     b28:	2b00      	cmp	r3, #0
     b2a:	d101      	bne.n	b30 <spi_init+0x1a0>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     b2c:	ab04      	add	r3, sp, #16
     b2e:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
     b30:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     b32:	9305      	str	r3, [sp, #20]
     b34:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     b36:	9306      	str	r3, [sp, #24]
     b38:	6b23      	ldr	r3, [r4, #48]	; 0x30
     b3a:	9307      	str	r3, [sp, #28]
     b3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
     b3e:	9308      	str	r3, [sp, #32]
     b40:	2700      	movs	r7, #0
     b42:	b2f9      	uxtb	r1, r7
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
     b44:	00bb      	lsls	r3, r7, #2
     b46:	aa05      	add	r2, sp, #20
     b48:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
     b4a:	2800      	cmp	r0, #0
     b4c:	d102      	bne.n	b54 <spi_init+0x1c4>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     b4e:	0030      	movs	r0, r6
     b50:	4b2f      	ldr	r3, [pc, #188]	; (c10 <spi_init+0x280>)
     b52:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
     b54:	1c43      	adds	r3, r0, #1
     b56:	d006      	beq.n	b66 <spi_init+0x1d6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     b58:	ab02      	add	r3, sp, #8
     b5a:	7218      	strb	r0, [r3, #8]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     b5c:	0c00      	lsrs	r0, r0, #16
     b5e:	b2c0      	uxtb	r0, r0
     b60:	a904      	add	r1, sp, #16
     b62:	4b34      	ldr	r3, [pc, #208]	; (c34 <spi_init+0x2a4>)
     b64:	4798      	blx	r3
     b66:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     b68:	2f04      	cmp	r7, #4
     b6a:	d1ea      	bne.n	b42 <spi_init+0x1b2>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
     b6c:	7823      	ldrb	r3, [r4, #0]
     b6e:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
     b70:	7c23      	ldrb	r3, [r4, #16]
     b72:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
     b74:	7ca3      	ldrb	r3, [r4, #18]
     b76:	71eb      	strb	r3, [r5, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
     b78:	7d23      	ldrb	r3, [r4, #20]
     b7a:	722b      	strb	r3, [r5, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
     b7c:	2200      	movs	r2, #0
     b7e:	ab02      	add	r3, sp, #8
     b80:	80da      	strh	r2, [r3, #6]
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
     b82:	7823      	ldrb	r3, [r4, #0]
     b84:	2b01      	cmp	r3, #1
     b86:	d114      	bne.n	bb2 <spi_init+0x222>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     b88:	6828      	ldr	r0, [r5, #0]
     b8a:	4b25      	ldr	r3, [pc, #148]	; (c20 <spi_init+0x290>)
     b8c:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
     b8e:	3014      	adds	r0, #20
     b90:	b2c0      	uxtb	r0, r0
     b92:	4b21      	ldr	r3, [pc, #132]	; (c18 <spi_init+0x288>)
     b94:	4798      	blx	r3
     b96:	0001      	movs	r1, r0

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
     b98:	ab02      	add	r3, sp, #8
     b9a:	1d9a      	adds	r2, r3, #6
     b9c:	69a0      	ldr	r0, [r4, #24]
     b9e:	4b1f      	ldr	r3, [pc, #124]	; (c1c <spi_init+0x28c>)
     ba0:	4798      	blx	r3
     ba2:	0003      	movs	r3, r0
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
     ba4:	2017      	movs	r0, #23
		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
     ba6:	2b00      	cmp	r3, #0
     ba8:	d12b      	bne.n	c02 <spi_init+0x272>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		spi_module->BAUD.reg = (uint8_t)baud;
     baa:	ab02      	add	r3, sp, #8
     bac:	3306      	adds	r3, #6
     bae:	781b      	ldrb	r3, [r3, #0]
     bb0:	7333      	strb	r3, [r6, #12]
# endif
	/* Set data order */
	ctrla |= config->data_order;

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
     bb2:	6863      	ldr	r3, [r4, #4]
     bb4:	68a2      	ldr	r2, [r4, #8]
     bb6:	4313      	orrs	r3, r2

	/* Set MUX setting */
	ctrla |= config->mux_setting;
     bb8:	68e2      	ldr	r2, [r4, #12]
     bba:	4313      	orrs	r3, r2

	/* Set SPI character size */
	ctrlb |= config->character_size;
     bbc:	7c22      	ldrb	r2, [r4, #16]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     bbe:	7c61      	ldrb	r1, [r4, #17]
     bc0:	2900      	cmp	r1, #0
     bc2:	d103      	bne.n	bcc <spi_init+0x23c>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     bc4:	491c      	ldr	r1, [pc, #112]	; (c38 <spi_init+0x2a8>)
     bc6:	7889      	ldrb	r1, [r1, #2]
     bc8:	0789      	lsls	r1, r1, #30
     bca:	d501      	bpl.n	bd0 <spi_init+0x240>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     bcc:	2180      	movs	r1, #128	; 0x80
     bce:	430b      	orrs	r3, r1
	}

	if (config->receiver_enable) {
     bd0:	7ca1      	ldrb	r1, [r4, #18]
     bd2:	2900      	cmp	r1, #0
     bd4:	d002      	beq.n	bdc <spi_init+0x24c>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     bd6:	2180      	movs	r1, #128	; 0x80
     bd8:	0289      	lsls	r1, r1, #10
     bda:	430a      	orrs	r2, r1
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
     bdc:	7ce1      	ldrb	r1, [r4, #19]
     bde:	2900      	cmp	r1, #0
     be0:	d002      	beq.n	be8 <spi_init+0x258>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     be2:	2180      	movs	r1, #128	; 0x80
     be4:	0089      	lsls	r1, r1, #2
     be6:	430a      	orrs	r2, r1
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
     be8:	7d21      	ldrb	r1, [r4, #20]
     bea:	2900      	cmp	r1, #0
     bec:	d002      	beq.n	bf4 <spi_init+0x264>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     bee:	2180      	movs	r1, #128	; 0x80
     bf0:	0189      	lsls	r1, r1, #6
     bf2:	430a      	orrs	r2, r1
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
     bf4:	6831      	ldr	r1, [r6, #0]
     bf6:	430b      	orrs	r3, r1
     bf8:	6033      	str	r3, [r6, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
     bfa:	6873      	ldr	r3, [r6, #4]
     bfc:	4313      	orrs	r3, r2
     bfe:	6073      	str	r3, [r6, #4]

	return STATUS_OK;
     c00:	2000      	movs	r0, #0
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
     c02:	b00a      	add	sp, #40	; 0x28
     c04:	bc1c      	pop	{r2, r3, r4}
     c06:	4690      	mov	r8, r2
     c08:	4699      	mov	r9, r3
     c0a:	46a2      	mov	sl, r4
     c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c0e:	46c0      	nop			; (mov r8, r8)
     c10:	00000701 	.word	0x00000701
     c14:	41004400 	.word	0x41004400
     c18:	00001aa5 	.word	0x00001aa5
     c1c:	000004c5 	.word	0x000004c5
     c20:	00000889 	.word	0x00000889
     c24:	40000400 	.word	0x40000400
     c28:	00001a89 	.word	0x00001a89
     c2c:	000019fd 	.word	0x000019fd
     c30:	000006b5 	.word	0x000006b5
     c34:	00001b81 	.word	0x00001b81
     c38:	41002000 	.word	0x41002000

00000c3c <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
     c3c:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
     c3e:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
     c40:	2315      	movs	r3, #21
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
     c42:	2c01      	cmp	r4, #1
     c44:	d16e      	bne.n	d24 <spi_select_slave+0xe8>
		return STATUS_ERR_UNSUPPORTED_DEV;
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
     c46:	7a04      	ldrb	r4, [r0, #8]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
     c48:	2300      	movs	r3, #0
	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
		return STATUS_ERR_UNSUPPORTED_DEV;
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
     c4a:	2c00      	cmp	r4, #0
     c4c:	d16a      	bne.n	d24 <spi_select_slave+0xe8>
#  endif
	{
		if (select) {
     c4e:	2a00      	cmp	r2, #0
     c50:	d058      	beq.n	d04 <spi_select_slave+0xc8>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
     c52:	784b      	ldrb	r3, [r1, #1]
     c54:	2b00      	cmp	r3, #0
     c56:	d044      	beq.n	ce2 <spi_select_slave+0xa6>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     c58:	6803      	ldr	r3, [r0, #0]
     c5a:	7e1b      	ldrb	r3, [r3, #24]
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
     c5c:	07db      	lsls	r3, r3, #31
     c5e:	d410      	bmi.n	c82 <spi_select_slave+0x46>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
     c60:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     c62:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     c64:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     c66:	2900      	cmp	r1, #0
     c68:	d104      	bne.n	c74 <spi_select_slave+0x38>
		return &(ports[port_index]->Group[group_index]);
     c6a:	095a      	lsrs	r2, r3, #5
     c6c:	01d2      	lsls	r2, r2, #7
     c6e:	492e      	ldr	r1, [pc, #184]	; (d28 <spi_select_slave+0xec>)
     c70:	468c      	mov	ip, r1
     c72:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     c74:	211f      	movs	r1, #31
     c76:	400b      	ands	r3, r1
     c78:	391e      	subs	r1, #30
     c7a:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     c7c:	6191      	str	r1, [r2, #24]
					return STATUS_BUSY;
     c7e:	2305      	movs	r3, #5
     c80:	e050      	b.n	d24 <spi_select_slave+0xe8>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
     c82:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     c84:	09dc      	lsrs	r4, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     c86:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     c88:	2c00      	cmp	r4, #0
     c8a:	d104      	bne.n	c96 <spi_select_slave+0x5a>
		return &(ports[port_index]->Group[group_index]);
     c8c:	095a      	lsrs	r2, r3, #5
     c8e:	01d2      	lsls	r2, r2, #7
     c90:	4c25      	ldr	r4, [pc, #148]	; (d28 <spi_select_slave+0xec>)
     c92:	46a4      	mov	ip, r4
     c94:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     c96:	241f      	movs	r4, #31
     c98:	4023      	ands	r3, r4
     c9a:	3c1e      	subs	r4, #30
     c9c:	409c      	lsls	r4, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     c9e:	6154      	str	r4, [r2, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     ca0:	6803      	ldr	r3, [r0, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     ca2:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     ca4:	07d2      	lsls	r2, r2, #31
     ca6:	d501      	bpl.n	cac <spi_select_slave+0x70>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     ca8:	788a      	ldrb	r2, [r1, #2]
     caa:	629a      	str	r2, [r3, #40]	; 0x28

				/* Write address to slave */
				spi_write(module, slave->address);

				if (!(module->receiver_enabled)) {
     cac:	79c2      	ldrb	r2, [r0, #7]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
     cae:	2300      	movs	r3, #0
				port_pin_set_output_level(slave->ss_pin, false);

				/* Write address to slave */
				spi_write(module, slave->address);

				if (!(module->receiver_enabled)) {
     cb0:	2a00      	cmp	r2, #0
     cb2:	d137      	bne.n	d24 <spi_select_slave+0xe8>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     cb4:	6802      	ldr	r2, [r0, #0]
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
     cb6:	2104      	movs	r1, #4

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     cb8:	7e13      	ldrb	r3, [r2, #24]
     cba:	420b      	tst	r3, r1
     cbc:	d0fc      	beq.n	cb8 <spi_select_slave+0x7c>
     cbe:	7e11      	ldrb	r1, [r2, #24]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
     cc0:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     cc2:	0749      	lsls	r1, r1, #29
     cc4:	d52e      	bpl.n	d24 <spi_select_slave+0xe8>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     cc6:	8b53      	ldrh	r3, [r2, #26]
     cc8:	075b      	lsls	r3, r3, #29
     cca:	d501      	bpl.n	cd0 <spi_select_slave+0x94>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     ccc:	2304      	movs	r3, #4
     cce:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     cd0:	7983      	ldrb	r3, [r0, #6]
     cd2:	2b01      	cmp	r3, #1
     cd4:	d102      	bne.n	cdc <spi_select_slave+0xa0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     cd6:	6a93      	ldr	r3, [r2, #40]	; 0x28
     cd8:	2300      	movs	r3, #0
     cda:	e023      	b.n	d24 <spi_select_slave+0xe8>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     cdc:	6a93      	ldr	r3, [r2, #40]	; 0x28
     cde:	2300      	movs	r3, #0
     ce0:	e020      	b.n	d24 <spi_select_slave+0xe8>
					uint16_t flush = 0;
					spi_read(module, &flush);
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
     ce2:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     ce4:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     ce6:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     ce8:	2900      	cmp	r1, #0
     cea:	d104      	bne.n	cf6 <spi_select_slave+0xba>
		return &(ports[port_index]->Group[group_index]);
     cec:	095a      	lsrs	r2, r3, #5
     cee:	01d2      	lsls	r2, r2, #7
     cf0:	490d      	ldr	r1, [pc, #52]	; (d28 <spi_select_slave+0xec>)
     cf2:	468c      	mov	ip, r1
     cf4:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     cf6:	211f      	movs	r1, #31
     cf8:	400b      	ands	r3, r1
     cfa:	391e      	subs	r1, #30
     cfc:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     cfe:	6151      	str	r1, [r2, #20]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
     d00:	2300      	movs	r3, #0
     d02:	e00f      	b.n	d24 <spi_select_slave+0xe8>
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
     d04:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     d06:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     d08:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     d0a:	2900      	cmp	r1, #0
     d0c:	d104      	bne.n	d18 <spi_select_slave+0xdc>
		return &(ports[port_index]->Group[group_index]);
     d0e:	095a      	lsrs	r2, r3, #5
     d10:	01d2      	lsls	r2, r2, #7
     d12:	4905      	ldr	r1, [pc, #20]	; (d28 <spi_select_slave+0xec>)
     d14:	468c      	mov	ip, r1
     d16:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     d18:	211f      	movs	r1, #31
     d1a:	400b      	ands	r3, r1
     d1c:	391e      	subs	r1, #30
     d1e:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     d20:	6191      	str	r1, [r2, #24]
		}
	}
	return STATUS_OK;
     d22:	2300      	movs	r3, #0
}
     d24:	0018      	movs	r0, r3
     d26:	bd10      	pop	{r4, pc}
     d28:	41004400 	.word	0x41004400

00000d2c <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
     d2e:	465f      	mov	r7, fp
     d30:	4656      	mov	r6, sl
     d32:	464d      	mov	r5, r9
     d34:	4644      	mov	r4, r8
     d36:	b4f0      	push	{r4, r5, r6, r7}
     d38:	b091      	sub	sp, #68	; 0x44
     d3a:	0005      	movs	r5, r0
     d3c:	000c      	movs	r4, r1
     d3e:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     d40:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     d42:	0008      	movs	r0, r1
     d44:	4bb9      	ldr	r3, [pc, #740]	; (102c <usart_init+0x300>)
     d46:	4798      	blx	r3
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     d48:	6822      	ldr	r2, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     d4a:	2305      	movs	r3, #5
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     d4c:	07d2      	lsls	r2, r2, #31
     d4e:	d500      	bpl.n	d52 <usart_init+0x26>
     d50:	e164      	b.n	101c <usart_init+0x2f0>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     d52:	6822      	ldr	r2, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
     d54:	3317      	adds	r3, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     d56:	0792      	lsls	r2, r2, #30
     d58:	d500      	bpl.n	d5c <usart_init+0x30>
     d5a:	e15f      	b.n	101c <usart_init+0x2f0>
     d5c:	49b4      	ldr	r1, [pc, #720]	; (1030 <usart_init+0x304>)
     d5e:	6a0a      	ldr	r2, [r1, #32]
     d60:	1c87      	adds	r7, r0, #2
     d62:	3b1b      	subs	r3, #27
     d64:	40bb      	lsls	r3, r7
     d66:	4313      	orrs	r3, r2
     d68:	620b      	str	r3, [r1, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     d6a:	a90f      	add	r1, sp, #60	; 0x3c
     d6c:	272d      	movs	r7, #45	; 0x2d
     d6e:	5df3      	ldrb	r3, [r6, r7]
     d70:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     d72:	3014      	adds	r0, #20
     d74:	b2c3      	uxtb	r3, r0
     d76:	9302      	str	r3, [sp, #8]
     d78:	0018      	movs	r0, r3
     d7a:	4bae      	ldr	r3, [pc, #696]	; (1034 <usart_init+0x308>)
     d7c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     d7e:	9802      	ldr	r0, [sp, #8]
     d80:	4bad      	ldr	r3, [pc, #692]	; (1038 <usart_init+0x30c>)
     d82:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     d84:	5df0      	ldrb	r0, [r6, r7]
     d86:	2100      	movs	r1, #0
     d88:	4bac      	ldr	r3, [pc, #688]	; (103c <usart_init+0x310>)
     d8a:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
     d8c:	7af3      	ldrb	r3, [r6, #11]
     d8e:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
     d90:	2324      	movs	r3, #36	; 0x24
     d92:	5cf3      	ldrb	r3, [r6, r3]
     d94:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     d96:	2325      	movs	r3, #37	; 0x25
     d98:	5cf3      	ldrb	r3, [r6, r3]
     d9a:	71eb      	strb	r3, [r5, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
     d9c:	7ef3      	ldrb	r3, [r6, #27]
     d9e:	722b      	strb	r3, [r5, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     da0:	7f33      	ldrb	r3, [r6, #28]
     da2:	726b      	strb	r3, [r5, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     da4:	682b      	ldr	r3, [r5, #0]
     da6:	4699      	mov	r9, r3

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     da8:	0018      	movs	r0, r3
     daa:	4ba0      	ldr	r3, [pc, #640]	; (102c <usart_init+0x300>)
     dac:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     dae:	3014      	adds	r0, #20
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
     db0:	2200      	movs	r2, #0
     db2:	230e      	movs	r3, #14
     db4:	a906      	add	r1, sp, #24
     db6:	468c      	mov	ip, r1
     db8:	4463      	add	r3, ip
     dba:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
     dbc:	8a32      	ldrh	r2, [r6, #16]
     dbe:	9202      	str	r2, [sp, #8]
     dc0:	2380      	movs	r3, #128	; 0x80
     dc2:	01db      	lsls	r3, r3, #7
     dc4:	429a      	cmp	r2, r3
     dc6:	d01a      	beq.n	dfe <usart_init+0xd2>
     dc8:	d804      	bhi.n	dd4 <usart_init+0xa8>
     dca:	2380      	movs	r3, #128	; 0x80
     dcc:	019b      	lsls	r3, r3, #6
     dce:	429a      	cmp	r2, r3
     dd0:	d00b      	beq.n	dea <usart_init+0xbe>
     dd2:	e104      	b.n	fde <usart_init+0x2b2>
     dd4:	23c0      	movs	r3, #192	; 0xc0
     dd6:	01db      	lsls	r3, r3, #7
     dd8:	9a02      	ldr	r2, [sp, #8]
     dda:	429a      	cmp	r2, r3
     ddc:	d00a      	beq.n	df4 <usart_init+0xc8>
     dde:	2380      	movs	r3, #128	; 0x80
     de0:	021b      	lsls	r3, r3, #8
     de2:	429a      	cmp	r2, r3
     de4:	d100      	bne.n	de8 <usart_init+0xbc>
     de6:	e0ff      	b.n	fe8 <usart_init+0x2bc>
     de8:	e0f9      	b.n	fde <usart_init+0x2b2>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     dea:	2310      	movs	r3, #16
     dec:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     dee:	3b0f      	subs	r3, #15
     df0:	9307      	str	r3, [sp, #28]
     df2:	e0fd      	b.n	ff0 <usart_init+0x2c4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     df4:	2308      	movs	r3, #8
     df6:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     df8:	3b07      	subs	r3, #7
     dfa:	9307      	str	r3, [sp, #28]
     dfc:	e0f8      	b.n	ff0 <usart_init+0x2c4>
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     dfe:	6833      	ldr	r3, [r6, #0]
     e00:	9304      	str	r3, [sp, #16]
		(uint32_t)config->mux_setting |
     e02:	68f3      	ldr	r3, [r6, #12]
     e04:	469b      	mov	fp, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     e06:	6973      	ldr	r3, [r6, #20]
     e08:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     e0a:	7e33      	ldrb	r3, [r6, #24]
     e0c:	4698      	mov	r8, r3
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     e0e:	2326      	movs	r3, #38	; 0x26
     e10:	5cf3      	ldrb	r3, [r6, r3]
     e12:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
     e14:	6873      	ldr	r3, [r6, #4]
     e16:	469a      	mov	sl, r3
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
     e18:	2b00      	cmp	r3, #0
     e1a:	d015      	beq.n	e48 <usart_init+0x11c>
     e1c:	2380      	movs	r3, #128	; 0x80
     e1e:	055b      	lsls	r3, r3, #21
     e20:	459a      	cmp	sl, r3
     e22:	d136      	bne.n	e92 <usart_init+0x166>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
     e24:	2327      	movs	r3, #39	; 0x27
     e26:	5cf3      	ldrb	r3, [r6, r3]
     e28:	2b00      	cmp	r3, #0
     e2a:	d136      	bne.n	e9a <usart_init+0x16e>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     e2c:	6a33      	ldr	r3, [r6, #32]
     e2e:	001f      	movs	r7, r3
     e30:	b2c0      	uxtb	r0, r0
     e32:	4b83      	ldr	r3, [pc, #524]	; (1040 <usart_init+0x314>)
     e34:	4798      	blx	r3
     e36:	0001      	movs	r1, r0
     e38:	220e      	movs	r2, #14
     e3a:	ab06      	add	r3, sp, #24
     e3c:	469c      	mov	ip, r3
     e3e:	4462      	add	r2, ip
     e40:	0038      	movs	r0, r7
     e42:	4b80      	ldr	r3, [pc, #512]	; (1044 <usart_init+0x318>)
     e44:	4798      	blx	r3
     e46:	e025      	b.n	e94 <usart_init+0x168>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     e48:	2308      	movs	r3, #8
     e4a:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     e4c:	2300      	movs	r3, #0
     e4e:	9307      	str	r3, [sp, #28]
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
     e50:	2327      	movs	r3, #39	; 0x27
     e52:	5cf3      	ldrb	r3, [r6, r3]
     e54:	2b00      	cmp	r3, #0
     e56:	d00b      	beq.n	e70 <usart_init+0x144>
				status_code =
     e58:	9b06      	ldr	r3, [sp, #24]
     e5a:	9300      	str	r3, [sp, #0]
     e5c:	9b07      	ldr	r3, [sp, #28]
     e5e:	220e      	movs	r2, #14
     e60:	a906      	add	r1, sp, #24
     e62:	468c      	mov	ip, r1
     e64:	4462      	add	r2, ip
     e66:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     e68:	6a30      	ldr	r0, [r6, #32]
     e6a:	4f77      	ldr	r7, [pc, #476]	; (1048 <usart_init+0x31c>)
     e6c:	47b8      	blx	r7
     e6e:	e011      	b.n	e94 <usart_init+0x168>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
     e70:	6a33      	ldr	r3, [r6, #32]
     e72:	001f      	movs	r7, r3
     e74:	b2c0      	uxtb	r0, r0
     e76:	4b72      	ldr	r3, [pc, #456]	; (1040 <usart_init+0x314>)
     e78:	4798      	blx	r3
     e7a:	0001      	movs	r1, r0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
     e7c:	9b06      	ldr	r3, [sp, #24]
     e7e:	9300      	str	r3, [sp, #0]
     e80:	9b07      	ldr	r3, [sp, #28]
     e82:	220e      	movs	r2, #14
     e84:	a806      	add	r0, sp, #24
     e86:	4684      	mov	ip, r0
     e88:	4462      	add	r2, ip
     e8a:	0038      	movs	r0, r7
     e8c:	4f6e      	ldr	r7, [pc, #440]	; (1048 <usart_init+0x31c>)
     e8e:	47b8      	blx	r7
     e90:	e000      	b.n	e94 <usart_init+0x168>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
     e92:	2000      	movs	r0, #0
     e94:	1e03      	subs	r3, r0, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
     e96:	d000      	beq.n	e9a <usart_init+0x16e>
     e98:	e0c0      	b.n	101c <usart_init+0x2f0>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
     e9a:	7e73      	ldrb	r3, [r6, #25]
     e9c:	2b00      	cmp	r3, #0
     e9e:	d002      	beq.n	ea6 <usart_init+0x17a>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     ea0:	7eb3      	ldrb	r3, [r6, #26]
     ea2:	464a      	mov	r2, r9
     ea4:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     ea6:	682a      	ldr	r2, [r5, #0]
     ea8:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     eaa:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     eac:	2b00      	cmp	r3, #0
     eae:	d1fc      	bne.n	eaa <usart_init+0x17e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
     eb0:	330e      	adds	r3, #14
     eb2:	aa06      	add	r2, sp, #24
     eb4:	4694      	mov	ip, r2
     eb6:	4463      	add	r3, ip
     eb8:	881b      	ldrh	r3, [r3, #0]
     eba:	464a      	mov	r2, r9
     ebc:	8193      	strh	r3, [r2, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
     ebe:	9b04      	ldr	r3, [sp, #16]
     ec0:	465a      	mov	r2, fp
     ec2:	4313      	orrs	r3, r2
     ec4:	9a03      	ldr	r2, [sp, #12]
     ec6:	4313      	orrs	r3, r2
     ec8:	4652      	mov	r2, sl
     eca:	4313      	orrs	r3, r2
     ecc:	433b      	orrs	r3, r7
     ece:	4642      	mov	r2, r8
     ed0:	0212      	lsls	r2, r2, #8
     ed2:	4313      	orrs	r3, r2
     ed4:	9a05      	ldr	r2, [sp, #20]
     ed6:	0757      	lsls	r7, r2, #29
     ed8:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
     eda:	2327      	movs	r3, #39	; 0x27
     edc:	5cf3      	ldrb	r3, [r6, r3]
     ede:	2b00      	cmp	r3, #0
     ee0:	d101      	bne.n	ee6 <usart_init+0x1ba>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     ee2:	3304      	adds	r3, #4
     ee4:	431f      	orrs	r7, r3
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
     ee6:	7e71      	ldrb	r1, [r6, #25]
     ee8:	0289      	lsls	r1, r1, #10
     eea:	7f33      	ldrb	r3, [r6, #28]
     eec:	025b      	lsls	r3, r3, #9
     eee:	4319      	orrs	r1, r3
     ef0:	7f73      	ldrb	r3, [r6, #29]
     ef2:	021b      	lsls	r3, r3, #8
     ef4:	4319      	orrs	r1, r3
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     ef6:	2324      	movs	r3, #36	; 0x24
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
     ef8:	5cf3      	ldrb	r3, [r6, r3]
     efa:	045b      	lsls	r3, r3, #17
     efc:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     efe:	2325      	movs	r3, #37	; 0x25
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
     f00:	5cf2      	ldrb	r2, [r6, r3]
     f02:	0412      	lsls	r2, r2, #16
     f04:	4311      	orrs	r1, r2
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->character_size;
     f06:	7af3      	ldrb	r3, [r6, #11]
     f08:	4319      	orrs	r1, r3
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
     f0a:	8933      	ldrh	r3, [r6, #8]
     f0c:	2bff      	cmp	r3, #255	; 0xff
     f0e:	d004      	beq.n	f1a <usart_init+0x1ee>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     f10:	2280      	movs	r2, #128	; 0x80
     f12:	0452      	lsls	r2, r2, #17
     f14:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     f16:	4319      	orrs	r1, r3
     f18:	e005      	b.n	f26 <usart_init+0x1fa>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
     f1a:	7ef3      	ldrb	r3, [r6, #27]
     f1c:	2b00      	cmp	r3, #0
     f1e:	d002      	beq.n	f26 <usart_init+0x1fa>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     f20:	2380      	movs	r3, #128	; 0x80
     f22:	04db      	lsls	r3, r3, #19
     f24:	431f      	orrs	r7, r3
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     f26:	232c      	movs	r3, #44	; 0x2c
     f28:	5cf3      	ldrb	r3, [r6, r3]
     f2a:	2b00      	cmp	r3, #0
     f2c:	d103      	bne.n	f36 <usart_init+0x20a>
     f2e:	4b47      	ldr	r3, [pc, #284]	; (104c <usart_init+0x320>)
     f30:	789b      	ldrb	r3, [r3, #2]
     f32:	079b      	lsls	r3, r3, #30
     f34:	d501      	bpl.n	f3a <usart_init+0x20e>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     f36:	2380      	movs	r3, #128	; 0x80
     f38:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     f3a:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     f3c:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     f3e:	2b00      	cmp	r3, #0
     f40:	d1fc      	bne.n	f3c <usart_init+0x210>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
     f42:	464b      	mov	r3, r9
     f44:	6059      	str	r1, [r3, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     f46:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     f48:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     f4a:	2b00      	cmp	r3, #0
     f4c:	d1fc      	bne.n	f48 <usart_init+0x21c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
     f4e:	464b      	mov	r3, r9
     f50:	601f      	str	r7, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     f52:	ab0e      	add	r3, sp, #56	; 0x38
     f54:	2280      	movs	r2, #128	; 0x80
     f56:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     f58:	2200      	movs	r2, #0
     f5a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     f5c:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     f5e:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
     f60:	6b33      	ldr	r3, [r6, #48]	; 0x30
     f62:	930a      	str	r3, [sp, #40]	; 0x28
     f64:	6b73      	ldr	r3, [r6, #52]	; 0x34
     f66:	930b      	str	r3, [sp, #44]	; 0x2c
     f68:	6bb3      	ldr	r3, [r6, #56]	; 0x38
     f6a:	930c      	str	r3, [sp, #48]	; 0x30
     f6c:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     f6e:	9302      	str	r3, [sp, #8]
     f70:	930d      	str	r3, [sp, #52]	; 0x34
     f72:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     f74:	ae0e      	add	r6, sp, #56	; 0x38
     f76:	b2f9      	uxtb	r1, r7
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
     f78:	00bb      	lsls	r3, r7, #2
     f7a:	aa0a      	add	r2, sp, #40	; 0x28
     f7c:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
     f7e:	2800      	cmp	r0, #0
     f80:	d102      	bne.n	f88 <usart_init+0x25c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     f82:	0020      	movs	r0, r4
     f84:	4b32      	ldr	r3, [pc, #200]	; (1050 <usart_init+0x324>)
     f86:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
     f88:	1c43      	adds	r3, r0, #1
     f8a:	d005      	beq.n	f98 <usart_init+0x26c>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     f8c:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     f8e:	0c00      	lsrs	r0, r0, #16
     f90:	b2c0      	uxtb	r0, r0
     f92:	0031      	movs	r1, r6
     f94:	4b2f      	ldr	r3, [pc, #188]	; (1054 <usart_init+0x328>)
     f96:	4798      	blx	r3
     f98:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     f9a:	2f04      	cmp	r7, #4
     f9c:	d1eb      	bne.n	f76 <usart_init+0x24a>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
     f9e:	2300      	movs	r3, #0
     fa0:	60eb      	str	r3, [r5, #12]
     fa2:	612b      	str	r3, [r5, #16]
     fa4:	616b      	str	r3, [r5, #20]
     fa6:	61ab      	str	r3, [r5, #24]
     fa8:	61eb      	str	r3, [r5, #28]
     faa:	622b      	str	r3, [r5, #32]
	}

	module->tx_buffer_ptr              = NULL;
     fac:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     fae:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     fb0:	2200      	movs	r2, #0
     fb2:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     fb4:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     fb6:	3330      	adds	r3, #48	; 0x30
     fb8:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     fba:	3301      	adds	r3, #1
     fbc:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     fbe:	3301      	adds	r3, #1
     fc0:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     fc2:	3301      	adds	r3, #1
     fc4:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     fc6:	6828      	ldr	r0, [r5, #0]
     fc8:	4b18      	ldr	r3, [pc, #96]	; (102c <usart_init+0x300>)
     fca:	4798      	blx	r3
     fcc:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     fce:	4922      	ldr	r1, [pc, #136]	; (1058 <usart_init+0x32c>)
     fd0:	4b22      	ldr	r3, [pc, #136]	; (105c <usart_init+0x330>)
     fd2:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     fd4:	00a4      	lsls	r4, r4, #2
     fd6:	4b22      	ldr	r3, [pc, #136]	; (1060 <usart_init+0x334>)
     fd8:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
     fda:	2300      	movs	r3, #0
     fdc:	e01e      	b.n	101c <usart_init+0x2f0>
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     fde:	2310      	movs	r3, #16
     fe0:	9306      	str	r3, [sp, #24]
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     fe2:	2300      	movs	r3, #0
     fe4:	9307      	str	r3, [sp, #28]
     fe6:	e003      	b.n	ff0 <usart_init+0x2c4>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     fe8:	2303      	movs	r3, #3
     fea:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     fec:	2300      	movs	r3, #0
     fee:	9307      	str	r3, [sp, #28]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     ff0:	6833      	ldr	r3, [r6, #0]
     ff2:	9304      	str	r3, [sp, #16]
		(uint32_t)config->mux_setting |
     ff4:	68f3      	ldr	r3, [r6, #12]
     ff6:	469b      	mov	fp, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     ff8:	6973      	ldr	r3, [r6, #20]
     ffa:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     ffc:	7e33      	ldrb	r3, [r6, #24]
     ffe:	4698      	mov	r8, r3
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1000:	2326      	movs	r3, #38	; 0x26
    1002:	5cf3      	ldrb	r3, [r6, r3]
    1004:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
    1006:	6873      	ldr	r3, [r6, #4]
    1008:	469a      	mov	sl, r3
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    100a:	2b00      	cmp	r3, #0
    100c:	d100      	bne.n	1010 <usart_init+0x2e4>
    100e:	e71f      	b.n	e50 <usart_init+0x124>
    1010:	2380      	movs	r3, #128	; 0x80
    1012:	055b      	lsls	r3, r3, #21
    1014:	459a      	cmp	sl, r3
    1016:	d100      	bne.n	101a <usart_init+0x2ee>
    1018:	e704      	b.n	e24 <usart_init+0xf8>
    101a:	e73e      	b.n	e9a <usart_init+0x16e>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    101c:	0018      	movs	r0, r3
    101e:	b011      	add	sp, #68	; 0x44
    1020:	bc3c      	pop	{r2, r3, r4, r5}
    1022:	4690      	mov	r8, r2
    1024:	4699      	mov	r9, r3
    1026:	46a2      	mov	sl, r4
    1028:	46ab      	mov	fp, r5
    102a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    102c:	00000889 	.word	0x00000889
    1030:	40000400 	.word	0x40000400
    1034:	00001a89 	.word	0x00001a89
    1038:	000019fd 	.word	0x000019fd
    103c:	000006b5 	.word	0x000006b5
    1040:	00001aa5 	.word	0x00001aa5
    1044:	000004c5 	.word	0x000004c5
    1048:	000004ed 	.word	0x000004ed
    104c:	41002000 	.word	0x41002000
    1050:	00000701 	.word	0x00000701
    1054:	00001b81 	.word	0x00001b81
    1058:	00001195 	.word	0x00001195
    105c:	000008c9 	.word	0x000008c9
    1060:	20000858 	.word	0x20000858

00001064 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1064:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    1066:	231c      	movs	r3, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1068:	2a00      	cmp	r2, #0
    106a:	d00e      	beq.n	108a <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    106c:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    106e:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1070:	3b17      	subs	r3, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    1072:	2a00      	cmp	r2, #0
    1074:	d109      	bne.n	108a <usart_write_wait+0x26>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1076:	6803      	ldr	r3, [r0, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1078:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    107a:	2a00      	cmp	r2, #0
    107c:	d1fc      	bne.n	1078 <usart_write_wait+0x14>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    107e:	8519      	strh	r1, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    1080:	2102      	movs	r1, #2
    1082:	7e1a      	ldrb	r2, [r3, #24]
    1084:	420a      	tst	r2, r1
    1086:	d0fc      	beq.n	1082 <usart_write_wait+0x1e>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    1088:	2300      	movs	r3, #0
}
    108a:	0018      	movs	r0, r3
    108c:	4770      	bx	lr
    108e:	46c0      	nop			; (mov r8, r8)

00001090 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1090:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    1092:	231c      	movs	r3, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1094:	2a00      	cmp	r2, #0
    1096:	d030      	beq.n	10fa <usart_read_wait+0x6a>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    1098:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    109a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    109c:	3b17      	subs	r3, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    109e:	2a00      	cmp	r2, #0
    10a0:	d12b      	bne.n	10fa <usart_read_wait+0x6a>

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    10a2:	6802      	ldr	r2, [r0, #0]
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    10a4:	7e10      	ldrb	r0, [r2, #24]
    10a6:	0740      	lsls	r0, r0, #29
    10a8:	d527      	bpl.n	10fa <usart_read_wait+0x6a>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    10aa:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    10ac:	2b00      	cmp	r3, #0
    10ae:	d1fc      	bne.n	10aa <usart_read_wait+0x1a>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    10b0:	8b53      	ldrh	r3, [r2, #26]
    10b2:	b2db      	uxtb	r3, r3

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    10b4:	0698      	lsls	r0, r3, #26
    10b6:	d01d      	beq.n	10f4 <usart_read_wait+0x64>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    10b8:	0798      	lsls	r0, r3, #30
    10ba:	d503      	bpl.n	10c4 <usart_read_wait+0x34>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    10bc:	2302      	movs	r3, #2
    10be:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_BAD_FORMAT;
    10c0:	3318      	adds	r3, #24
    10c2:	e01a      	b.n	10fa <usart_read_wait+0x6a>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    10c4:	0758      	lsls	r0, r3, #29
    10c6:	d503      	bpl.n	10d0 <usart_read_wait+0x40>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    10c8:	2304      	movs	r3, #4
    10ca:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_OVERFLOW;
    10cc:	331a      	adds	r3, #26
    10ce:	e014      	b.n	10fa <usart_read_wait+0x6a>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    10d0:	07d8      	lsls	r0, r3, #31
    10d2:	d503      	bpl.n	10dc <usart_read_wait+0x4c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    10d4:	2301      	movs	r3, #1
    10d6:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_BAD_DATA;
    10d8:	3312      	adds	r3, #18
    10da:	e00e      	b.n	10fa <usart_read_wait+0x6a>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    10dc:	06d8      	lsls	r0, r3, #27
    10de:	d503      	bpl.n	10e8 <usart_read_wait+0x58>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    10e0:	2310      	movs	r3, #16
    10e2:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_PROTOCOL;
    10e4:	3332      	adds	r3, #50	; 0x32
    10e6:	e008      	b.n	10fa <usart_read_wait+0x6a>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    10e8:	069b      	lsls	r3, r3, #26
    10ea:	d503      	bpl.n	10f4 <usart_read_wait+0x64>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    10ec:	2320      	movs	r3, #32
    10ee:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_PACKET_COLLISION;
    10f0:	3321      	adds	r3, #33	; 0x21
    10f2:	e002      	b.n	10fa <usart_read_wait+0x6a>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    10f4:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    10f6:	800b      	strh	r3, [r1, #0]

	return STATUS_OK;
    10f8:	2300      	movs	r3, #0
}
    10fa:	0018      	movs	r0, r3
    10fc:	4770      	bx	lr
    10fe:	46c0      	nop			; (mov r8, r8)

00001100 <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    1100:	b5f0      	push	{r4, r5, r6, r7, lr}
    1102:	4657      	mov	r7, sl
    1104:	b480      	push	{r7}
    1106:	b084      	sub	sp, #16
    1108:	0004      	movs	r4, r0
    110a:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    110c:	2017      	movs	r0, #23
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
    110e:	2a00      	cmp	r2, #0
    1110:	d038      	beq.n	1184 <usart_read_buffer_wait+0x84>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1112:	79a3      	ldrb	r3, [r4, #6]
		return STATUS_ERR_DENIED;
    1114:	3005      	adds	r0, #5
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1116:	2b00      	cmp	r3, #0
    1118:	d034      	beq.n	1184 <usart_read_buffer_wait+0x84>
		return STATUS_ERR_DENIED;
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    111a:	6826      	ldr	r6, [r4, #0]
    111c:	4692      	mov	sl, r2
    111e:	2500      	movs	r5, #0
	/* Blocks while buffer is being received */
	while (length--) {
		/* Wait for the USART to have new data and abort operation if it
		 * doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    1120:	2704      	movs	r7, #4
    1122:	e02a      	b.n	117a <usart_read_buffer_wait+0x7a>
    1124:	7e32      	ldrb	r2, [r6, #24]
    1126:	423a      	tst	r2, r7
    1128:	d104      	bne.n	1134 <usart_read_buffer_wait+0x34>
				break;
			} else if (i == USART_TIMEOUT) {
    112a:	2b01      	cmp	r3, #1
    112c:	d023      	beq.n	1176 <usart_read_buffer_wait+0x76>
    112e:	3b01      	subs	r3, #1

	/* Blocks while buffer is being received */
	while (length--) {
		/* Wait for the USART to have new data and abort operation if it
		 * doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    1130:	2b00      	cmp	r3, #0
    1132:	d1f7      	bne.n	1124 <usart_read_buffer_wait+0x24>
				return STATUS_ERR_TIMEOUT;
			}
		}

		enum status_code retval;
		uint16_t received_data = 0;
    1134:	2300      	movs	r3, #0
    1136:	aa02      	add	r2, sp, #8
    1138:	80d3      	strh	r3, [r2, #6]

		retval = usart_read_wait(module, &received_data);
    113a:	1d91      	adds	r1, r2, #6
    113c:	0020      	movs	r0, r4
    113e:	4b13      	ldr	r3, [pc, #76]	; (118c <usart_read_buffer_wait+0x8c>)
    1140:	4798      	blx	r3

		if (retval != STATUS_OK) {
    1142:	2800      	cmp	r0, #0
    1144:	d11e      	bne.n	1184 <usart_read_buffer_wait+0x84>
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    1146:	1c6b      	adds	r3, r5, #1
    1148:	b29b      	uxth	r3, r3
    114a:	aa02      	add	r2, sp, #8
    114c:	88d2      	ldrh	r2, [r2, #6]
    114e:	9901      	ldr	r1, [sp, #4]
    1150:	554a      	strb	r2, [r1, r5]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1152:	7961      	ldrb	r1, [r4, #5]
    1154:	2901      	cmp	r1, #1
    1156:	d105      	bne.n	1164 <usart_read_buffer_wait+0x64>
			rx_data[rx_pos++] = (received_data >> 8);
    1158:	1ca9      	adds	r1, r5, #2
    115a:	b28d      	uxth	r5, r1
    115c:	0a12      	lsrs	r2, r2, #8
    115e:	9901      	ldr	r1, [sp, #4]
    1160:	54ca      	strb	r2, [r1, r3]
    1162:	e000      	b.n	1166 <usart_read_buffer_wait+0x66>
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    1164:	001d      	movs	r5, r3
    1166:	4652      	mov	r2, sl
    1168:	3a01      	subs	r2, #1
    116a:	b293      	uxth	r3, r2
    116c:	469a      	mov	sl, r3
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint16_t rx_pos = 0;

	/* Blocks while buffer is being received */
	while (length--) {
    116e:	2b00      	cmp	r3, #0
    1170:	d103      	bne.n	117a <usart_read_buffer_wait+0x7a>
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
    1172:	2000      	movs	r0, #0
    1174:	e006      	b.n	1184 <usart_read_buffer_wait+0x84>
		 * doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
				break;
			} else if (i == USART_TIMEOUT) {
				return STATUS_ERR_TIMEOUT;
    1176:	2012      	movs	r0, #18
    1178:	e004      	b.n	1184 <usart_read_buffer_wait+0x84>
	/* Blocks while buffer is being received */
	while (length--) {
		/* Wait for the USART to have new data and abort operation if it
		 * doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    117a:	7e33      	ldrb	r3, [r6, #24]
    117c:	423b      	tst	r3, r7
    117e:	d1d9      	bne.n	1134 <usart_read_buffer_wait+0x34>
    1180:	4b03      	ldr	r3, [pc, #12]	; (1190 <usart_read_buffer_wait+0x90>)
    1182:	e7cf      	b.n	1124 <usart_read_buffer_wait+0x24>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    1184:	b004      	add	sp, #16
    1186:	bc04      	pop	{r2}
    1188:	4692      	mov	sl, r2
    118a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    118c:	00001091 	.word	0x00001091
    1190:	0000ffff 	.word	0x0000ffff

00001194 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    1194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    1196:	0080      	lsls	r0, r0, #2
    1198:	4b60      	ldr	r3, [pc, #384]	; (131c <_usart_interrupt_handler+0x188>)
    119a:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    119c:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    119e:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    11a0:	2b00      	cmp	r3, #0
    11a2:	d1fc      	bne.n	119e <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    11a4:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    11a6:	7da6      	ldrb	r6, [r4, #22]
    11a8:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    11aa:	2330      	movs	r3, #48	; 0x30
    11ac:	5ceb      	ldrb	r3, [r5, r3]
    11ae:	2231      	movs	r2, #49	; 0x31
    11b0:	5caf      	ldrb	r7, [r5, r2]
    11b2:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    11b4:	07f3      	lsls	r3, r6, #31
    11b6:	d522      	bpl.n	11fe <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    11b8:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    11ba:	b29b      	uxth	r3, r3
    11bc:	2b00      	cmp	r3, #0
    11be:	d01c      	beq.n	11fa <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    11c0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    11c2:	7813      	ldrb	r3, [r2, #0]
    11c4:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    11c6:	1c51      	adds	r1, r2, #1
    11c8:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    11ca:	7969      	ldrb	r1, [r5, #5]
    11cc:	2901      	cmp	r1, #1
    11ce:	d001      	beq.n	11d4 <_usart_interrupt_handler+0x40>
	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
		if (module->remaining_tx_buffer_length) {
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    11d0:	b29b      	uxth	r3, r3
    11d2:	e004      	b.n	11de <_usart_interrupt_handler+0x4a>
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    11d4:	7851      	ldrb	r1, [r2, #1]
    11d6:	0209      	lsls	r1, r1, #8
    11d8:	430b      	orrs	r3, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    11da:	3202      	adds	r2, #2
    11dc:	62aa      	str	r2, [r5, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    11de:	05db      	lsls	r3, r3, #23
    11e0:	0ddb      	lsrs	r3, r3, #23
    11e2:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    11e4:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    11e6:	3b01      	subs	r3, #1
    11e8:	b29b      	uxth	r3, r3
    11ea:	85eb      	strh	r3, [r5, #46]	; 0x2e
    11ec:	2b00      	cmp	r3, #0
    11ee:	d106      	bne.n	11fe <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    11f0:	3301      	adds	r3, #1
    11f2:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    11f4:	3301      	adds	r3, #1
    11f6:	75a3      	strb	r3, [r4, #22]
    11f8:	e001      	b.n	11fe <_usart_interrupt_handler+0x6a>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    11fa:	2301      	movs	r3, #1
    11fc:	7523      	strb	r3, [r4, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    11fe:	07b3      	lsls	r3, r6, #30
    1200:	d509      	bpl.n	1216 <_usart_interrupt_handler+0x82>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    1202:	2302      	movs	r3, #2
    1204:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    1206:	2200      	movs	r2, #0
    1208:	3331      	adds	r3, #49	; 0x31
    120a:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    120c:	07fb      	lsls	r3, r7, #31
    120e:	d502      	bpl.n	1216 <_usart_interrupt_handler+0x82>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    1210:	0028      	movs	r0, r5
    1212:	68eb      	ldr	r3, [r5, #12]
    1214:	4798      	blx	r3

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    1216:	0773      	lsls	r3, r6, #29
    1218:	d560      	bpl.n	12dc <_usart_interrupt_handler+0x148>

		if (module->remaining_rx_buffer_length) {
    121a:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    121c:	b29b      	uxth	r3, r3
    121e:	2b00      	cmp	r3, #0
    1220:	d05a      	beq.n	12d8 <_usart_interrupt_handler+0x144>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1222:	8b63      	ldrh	r3, [r4, #26]
    1224:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    1226:	071a      	lsls	r2, r3, #28
    1228:	d402      	bmi.n	1230 <_usart_interrupt_handler+0x9c>

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {

		if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    122a:	223f      	movs	r2, #63	; 0x3f
    122c:	4013      	ands	r3, r2
    122e:	e001      	b.n	1234 <_usart_interrupt_handler+0xa0>
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
				error_code &= ~SERCOM_USART_STATUS_CTS;
    1230:	2237      	movs	r2, #55	; 0x37
    1232:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    1234:	2b00      	cmp	r3, #0
    1236:	d02d      	beq.n	1294 <_usart_interrupt_handler+0x100>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    1238:	079a      	lsls	r2, r3, #30
    123a:	d505      	bpl.n	1248 <_usart_interrupt_handler+0xb4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    123c:	221a      	movs	r2, #26
    123e:	2332      	movs	r3, #50	; 0x32
    1240:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1242:	3b30      	subs	r3, #48	; 0x30
    1244:	8363      	strh	r3, [r4, #26]
    1246:	e01f      	b.n	1288 <_usart_interrupt_handler+0xf4>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1248:	075a      	lsls	r2, r3, #29
    124a:	d505      	bpl.n	1258 <_usart_interrupt_handler+0xc4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    124c:	221e      	movs	r2, #30
    124e:	2332      	movs	r3, #50	; 0x32
    1250:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1252:	3b2e      	subs	r3, #46	; 0x2e
    1254:	8363      	strh	r3, [r4, #26]
    1256:	e017      	b.n	1288 <_usart_interrupt_handler+0xf4>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1258:	07da      	lsls	r2, r3, #31
    125a:	d505      	bpl.n	1268 <_usart_interrupt_handler+0xd4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    125c:	2213      	movs	r2, #19
    125e:	2332      	movs	r3, #50	; 0x32
    1260:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1262:	3b31      	subs	r3, #49	; 0x31
    1264:	8363      	strh	r3, [r4, #26]
    1266:	e00f      	b.n	1288 <_usart_interrupt_handler+0xf4>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    1268:	06da      	lsls	r2, r3, #27
    126a:	d505      	bpl.n	1278 <_usart_interrupt_handler+0xe4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    126c:	2242      	movs	r2, #66	; 0x42
    126e:	2332      	movs	r3, #50	; 0x32
    1270:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1272:	3b22      	subs	r3, #34	; 0x22
    1274:	8363      	strh	r3, [r4, #26]
    1276:	e007      	b.n	1288 <_usart_interrupt_handler+0xf4>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    1278:	2220      	movs	r2, #32
    127a:	421a      	tst	r2, r3
    127c:	d004      	beq.n	1288 <_usart_interrupt_handler+0xf4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    127e:	3221      	adds	r2, #33	; 0x21
    1280:	2332      	movs	r3, #50	; 0x32
    1282:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1284:	3b12      	subs	r3, #18
    1286:	8363      	strh	r3, [r4, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    1288:	077b      	lsls	r3, r7, #29
    128a:	d527      	bpl.n	12dc <_usart_interrupt_handler+0x148>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    128c:	0028      	movs	r0, r5
    128e:	696b      	ldr	r3, [r5, #20]
    1290:	4798      	blx	r3
    1292:	e023      	b.n	12dc <_usart_interrupt_handler+0x148>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    1294:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    1296:	05db      	lsls	r3, r3, #23
    1298:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    129a:	b2da      	uxtb	r2, r3
    129c:	6a69      	ldr	r1, [r5, #36]	; 0x24
    129e:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    12a0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    12a2:	1c51      	adds	r1, r2, #1
    12a4:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    12a6:	7969      	ldrb	r1, [r5, #5]
    12a8:	2901      	cmp	r1, #1
    12aa:	d104      	bne.n	12b6 <_usart_interrupt_handler+0x122>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    12ac:	0a1b      	lsrs	r3, r3, #8
    12ae:	7053      	strb	r3, [r2, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    12b0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    12b2:	3301      	adds	r3, #1
    12b4:	626b      	str	r3, [r5, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    12b6:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    12b8:	3b01      	subs	r3, #1
    12ba:	b29b      	uxth	r3, r3
    12bc:	85ab      	strh	r3, [r5, #44]	; 0x2c
    12be:	2b00      	cmp	r3, #0
    12c0:	d10c      	bne.n	12dc <_usart_interrupt_handler+0x148>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    12c2:	3304      	adds	r3, #4
    12c4:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    12c6:	2200      	movs	r2, #0
    12c8:	332e      	adds	r3, #46	; 0x2e
    12ca:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    12cc:	07bb      	lsls	r3, r7, #30
    12ce:	d505      	bpl.n	12dc <_usart_interrupt_handler+0x148>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    12d0:	0028      	movs	r0, r5
    12d2:	692b      	ldr	r3, [r5, #16]
    12d4:	4798      	blx	r3
    12d6:	e001      	b.n	12dc <_usart_interrupt_handler+0x148>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    12d8:	2304      	movs	r3, #4
    12da:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    12dc:	06f3      	lsls	r3, r6, #27
    12de:	d507      	bpl.n	12f0 <_usart_interrupt_handler+0x15c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    12e0:	2310      	movs	r3, #16
    12e2:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    12e4:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    12e6:	06fb      	lsls	r3, r7, #27
    12e8:	d502      	bpl.n	12f0 <_usart_interrupt_handler+0x15c>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    12ea:	0028      	movs	r0, r5
    12ec:	69eb      	ldr	r3, [r5, #28]
    12ee:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    12f0:	06b3      	lsls	r3, r6, #26
    12f2:	d507      	bpl.n	1304 <_usart_interrupt_handler+0x170>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    12f4:	2320      	movs	r3, #32
    12f6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    12f8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    12fa:	073b      	lsls	r3, r7, #28
    12fc:	d502      	bpl.n	1304 <_usart_interrupt_handler+0x170>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    12fe:	0028      	movs	r0, r5
    1300:	69ab      	ldr	r3, [r5, #24]
    1302:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    1304:	0733      	lsls	r3, r6, #28
    1306:	d507      	bpl.n	1318 <_usart_interrupt_handler+0x184>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1308:	2308      	movs	r3, #8
    130a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    130c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    130e:	06bb      	lsls	r3, r7, #26
    1310:	d502      	bpl.n	1318 <_usart_interrupt_handler+0x184>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    1312:	6a2b      	ldr	r3, [r5, #32]
    1314:	0028      	movs	r0, r5
    1316:	4798      	blx	r3
		}
	}
#endif
}
    1318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    131a:	46c0      	nop			; (mov r8, r8)
    131c:	20000858 	.word	0x20000858

00001320 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1320:	b510      	push	{r4, lr}
	switch (clock_source) {
    1322:	2808      	cmp	r0, #8
    1324:	d803      	bhi.n	132e <system_clock_source_get_hz+0xe>
    1326:	0080      	lsls	r0, r0, #2
    1328:	4b1b      	ldr	r3, [pc, #108]	; (1398 <system_clock_source_get_hz+0x78>)
    132a:	581b      	ldr	r3, [r3, r0]
    132c:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    132e:	2000      	movs	r0, #0
    1330:	e030      	b.n	1394 <system_clock_source_get_hz+0x74>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    1332:	4b1a      	ldr	r3, [pc, #104]	; (139c <system_clock_source_get_hz+0x7c>)
    1334:	6918      	ldr	r0, [r3, #16]
    1336:	e02d      	b.n	1394 <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1338:	4b19      	ldr	r3, [pc, #100]	; (13a0 <system_clock_source_get_hz+0x80>)
    133a:	6a1b      	ldr	r3, [r3, #32]
    133c:	059b      	lsls	r3, r3, #22
    133e:	0f9b      	lsrs	r3, r3, #30
    1340:	4818      	ldr	r0, [pc, #96]	; (13a4 <system_clock_source_get_hz+0x84>)
    1342:	40d8      	lsrs	r0, r3
    1344:	e026      	b.n	1394 <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    1346:	4b15      	ldr	r3, [pc, #84]	; (139c <system_clock_source_get_hz+0x7c>)
    1348:	6958      	ldr	r0, [r3, #20]
    134a:	e023      	b.n	1394 <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    134c:	4b13      	ldr	r3, [pc, #76]	; (139c <system_clock_source_get_hz+0x7c>)
    134e:	681b      	ldr	r3, [r3, #0]
    1350:	2002      	movs	r0, #2
    1352:	4018      	ands	r0, r3
    1354:	d01e      	beq.n	1394 <system_clock_source_get_hz+0x74>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1356:	4912      	ldr	r1, [pc, #72]	; (13a0 <system_clock_source_get_hz+0x80>)
    1358:	2210      	movs	r2, #16
    135a:	68cb      	ldr	r3, [r1, #12]
    135c:	421a      	tst	r2, r3
    135e:	d0fc      	beq.n	135a <system_clock_source_get_hz+0x3a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    1360:	4b0e      	ldr	r3, [pc, #56]	; (139c <system_clock_source_get_hz+0x7c>)
    1362:	681b      	ldr	r3, [r3, #0]
    1364:	075b      	lsls	r3, r3, #29
    1366:	d514      	bpl.n	1392 <system_clock_source_get_hz+0x72>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1368:	2000      	movs	r0, #0
    136a:	4b0f      	ldr	r3, [pc, #60]	; (13a8 <system_clock_source_get_hz+0x88>)
    136c:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    136e:	4b0b      	ldr	r3, [pc, #44]	; (139c <system_clock_source_get_hz+0x7c>)
    1370:	689b      	ldr	r3, [r3, #8]
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1372:	041b      	lsls	r3, r3, #16
    1374:	0c1b      	lsrs	r3, r3, #16
    1376:	4358      	muls	r0, r3
    1378:	e00c      	b.n	1394 <system_clock_source_get_hz+0x74>

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    137a:	2350      	movs	r3, #80	; 0x50
    137c:	4a08      	ldr	r2, [pc, #32]	; (13a0 <system_clock_source_get_hz+0x80>)
    137e:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1380:	2000      	movs	r0, #0

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1382:	075b      	lsls	r3, r3, #29
    1384:	d506      	bpl.n	1394 <system_clock_source_get_hz+0x74>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    1386:	4b05      	ldr	r3, [pc, #20]	; (139c <system_clock_source_get_hz+0x7c>)
    1388:	68d8      	ldr	r0, [r3, #12]
    138a:	e003      	b.n	1394 <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    138c:	2080      	movs	r0, #128	; 0x80
    138e:	0200      	lsls	r0, r0, #8
    1390:	e000      	b.n	1394 <system_clock_source_get_hz+0x74>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    1392:	4806      	ldr	r0, [pc, #24]	; (13ac <system_clock_source_get_hz+0x8c>)
#endif

	default:
		return 0;
	}
}
    1394:	bd10      	pop	{r4, pc}
    1396:	46c0      	nop			; (mov r8, r8)
    1398:	00005704 	.word	0x00005704
    139c:	200000b8 	.word	0x200000b8
    13a0:	40000800 	.word	0x40000800
    13a4:	007a1200 	.word	0x007a1200
    13a8:	00001aa5 	.word	0x00001aa5
    13ac:	02dc6c00 	.word	0x02dc6c00

000013b0 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    13b0:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    13b2:	4c0c      	ldr	r4, [pc, #48]	; (13e4 <system_clock_source_osc8m_set_config+0x34>)
    13b4:	6a23      	ldr	r3, [r4, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    13b6:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    13b8:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    13ba:	7842      	ldrb	r2, [r0, #1]
    13bc:	2001      	movs	r0, #1
    13be:	4002      	ands	r2, r0
    13c0:	0192      	lsls	r2, r2, #6
    13c2:	2640      	movs	r6, #64	; 0x40
    13c4:	43b3      	bics	r3, r6
    13c6:	4313      	orrs	r3, r2
    13c8:	0002      	movs	r2, r0
    13ca:	402a      	ands	r2, r5
    13cc:	01d2      	lsls	r2, r2, #7
    13ce:	307f      	adds	r0, #127	; 0x7f
    13d0:	4383      	bics	r3, r0
    13d2:	4313      	orrs	r3, r2
    13d4:	2203      	movs	r2, #3
    13d6:	400a      	ands	r2, r1
    13d8:	0212      	lsls	r2, r2, #8
    13da:	4903      	ldr	r1, [pc, #12]	; (13e8 <system_clock_source_osc8m_set_config+0x38>)
    13dc:	400b      	ands	r3, r1
    13de:	4313      	orrs	r3, r2
    13e0:	6223      	str	r3, [r4, #32]
}
    13e2:	bd70      	pop	{r4, r5, r6, pc}
    13e4:	40000800 	.word	0x40000800
    13e8:	fffffcff 	.word	0xfffffcff

000013ec <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    13ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    13ee:	4657      	mov	r7, sl
    13f0:	464e      	mov	r6, r9
    13f2:	4645      	mov	r5, r8
    13f4:	b4e0      	push	{r5, r6, r7}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    13f6:	4e1c      	ldr	r6, [pc, #112]	; (1468 <system_clock_source_osc32k_set_config+0x7c>)
    13f8:	69b3      	ldr	r3, [r6, #24]
    13fa:	469c      	mov	ip, r3

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    13fc:	7841      	ldrb	r1, [r0, #1]
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    13fe:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1400:	7907      	ldrb	r7, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1402:	78c3      	ldrb	r3, [r0, #3]
    1404:	4699      	mov	r9, r3
	temp.bit.WRTLOCK  = config->write_once;
    1406:	7944      	ldrb	r4, [r0, #5]

	SYSCTRL->OSC32K  = temp;
    1408:	7883      	ldrb	r3, [r0, #2]
    140a:	2001      	movs	r0, #1
    140c:	4003      	ands	r3, r0
    140e:	009b      	lsls	r3, r3, #2
    1410:	469a      	mov	sl, r3
    1412:	2204      	movs	r2, #4
    1414:	4690      	mov	r8, r2
    1416:	4662      	mov	r2, ip
    1418:	4643      	mov	r3, r8
    141a:	439a      	bics	r2, r3
    141c:	0013      	movs	r3, r2
    141e:	4652      	mov	r2, sl
    1420:	431a      	orrs	r2, r3
    1422:	0013      	movs	r3, r2
    1424:	4001      	ands	r1, r0
    1426:	00c9      	lsls	r1, r1, #3
    1428:	2208      	movs	r2, #8
    142a:	4393      	bics	r3, r2
    142c:	430b      	orrs	r3, r1
    142e:	464a      	mov	r2, r9
    1430:	4002      	ands	r2, r0
    1432:	0192      	lsls	r2, r2, #6
    1434:	2140      	movs	r1, #64	; 0x40
    1436:	438b      	bics	r3, r1
    1438:	4313      	orrs	r3, r2
    143a:	4007      	ands	r7, r0
    143c:	01ff      	lsls	r7, r7, #7
    143e:	2280      	movs	r2, #128	; 0x80
    1440:	4393      	bics	r3, r2
    1442:	433b      	orrs	r3, r7
    1444:	3a79      	subs	r2, #121	; 0x79
    1446:	4015      	ands	r5, r2
    1448:	022d      	lsls	r5, r5, #8
    144a:	4f08      	ldr	r7, [pc, #32]	; (146c <system_clock_source_osc32k_set_config+0x80>)
    144c:	403b      	ands	r3, r7
    144e:	432b      	orrs	r3, r5
    1450:	4004      	ands	r4, r0
    1452:	0320      	lsls	r0, r4, #12
    1454:	4c06      	ldr	r4, [pc, #24]	; (1470 <system_clock_source_osc32k_set_config+0x84>)
    1456:	401c      	ands	r4, r3
    1458:	4304      	orrs	r4, r0
    145a:	61b4      	str	r4, [r6, #24]
}
    145c:	bc1c      	pop	{r2, r3, r4}
    145e:	4690      	mov	r8, r2
    1460:	4699      	mov	r9, r3
    1462:	46a2      	mov	sl, r4
    1464:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1466:	46c0      	nop			; (mov r8, r8)
    1468:	40000800 	.word	0x40000800
    146c:	fffff8ff 	.word	0xfffff8ff
    1470:	ffffefff 	.word	0xffffefff

00001474 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    1474:	b5f0      	push	{r4, r5, r6, r7, lr}
    1476:	465f      	mov	r7, fp
    1478:	4656      	mov	r6, sl
    147a:	464d      	mov	r5, r9
    147c:	4644      	mov	r4, r8
    147e:	b4f0      	push	{r4, r5, r6, r7}
    1480:	b083      	sub	sp, #12
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    1482:	4e2e      	ldr	r6, [pc, #184]	; (153c <system_clock_source_xosc32k_set_config+0xc8>)
    1484:	8ab3      	ldrh	r3, [r6, #20]
    1486:	469c      	mov	ip, r3

	temp.bit.STARTUP = config->startup_time;
    1488:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    148a:	7803      	ldrb	r3, [r0, #0]
    148c:	425a      	negs	r2, r3
    148e:	415a      	adcs	r2, r3
    1490:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    1492:	7883      	ldrb	r3, [r0, #2]
    1494:	469b      	mov	fp, r3
	temp.bit.EN1K = config->enable_1khz_output;
    1496:	78c3      	ldrb	r3, [r0, #3]
	temp.bit.EN32K = config->enable_32khz_output;
    1498:	7902      	ldrb	r2, [r0, #4]
    149a:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    149c:	7b47      	ldrb	r7, [r0, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    149e:	7b02      	ldrb	r2, [r0, #12]
    14a0:	9201      	str	r2, [sp, #4]
	temp.bit.WRTLOCK  = config->write_once;
    14a2:	7b84      	ldrb	r4, [r0, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    14a4:	6882      	ldr	r2, [r0, #8]
    14a6:	4826      	ldr	r0, [pc, #152]	; (1540 <system_clock_source_xosc32k_set_config+0xcc>)
    14a8:	6142      	str	r2, [r0, #20]

	SYSCTRL->XOSC32K = temp;
    14aa:	2001      	movs	r0, #1
    14ac:	464a      	mov	r2, r9
    14ae:	0092      	lsls	r2, r2, #2
    14b0:	4691      	mov	r9, r2
    14b2:	2204      	movs	r2, #4
    14b4:	4692      	mov	sl, r2
    14b6:	4662      	mov	r2, ip
    14b8:	4651      	mov	r1, sl
    14ba:	438a      	bics	r2, r1
    14bc:	4694      	mov	ip, r2
    14be:	464a      	mov	r2, r9
    14c0:	4661      	mov	r1, ip
    14c2:	430a      	orrs	r2, r1
    14c4:	4694      	mov	ip, r2
    14c6:	4642      	mov	r2, r8
    14c8:	4002      	ands	r2, r0
    14ca:	00d2      	lsls	r2, r2, #3
    14cc:	4690      	mov	r8, r2
    14ce:	2208      	movs	r2, #8
    14d0:	4691      	mov	r9, r2
    14d2:	4662      	mov	r2, ip
    14d4:	4649      	mov	r1, r9
    14d6:	438a      	bics	r2, r1
    14d8:	4694      	mov	ip, r2
    14da:	4642      	mov	r2, r8
    14dc:	4661      	mov	r1, ip
    14de:	430a      	orrs	r2, r1
    14e0:	4694      	mov	ip, r2
    14e2:	4003      	ands	r3, r0
    14e4:	011b      	lsls	r3, r3, #4
    14e6:	2210      	movs	r2, #16
    14e8:	4690      	mov	r8, r2
    14ea:	4662      	mov	r2, ip
    14ec:	4641      	mov	r1, r8
    14ee:	438a      	bics	r2, r1
    14f0:	4313      	orrs	r3, r2
    14f2:	4659      	mov	r1, fp
    14f4:	4001      	ands	r1, r0
    14f6:	0149      	lsls	r1, r1, #5
    14f8:	2220      	movs	r2, #32
    14fa:	4393      	bics	r3, r2
    14fc:	430b      	orrs	r3, r1
    14fe:	9a01      	ldr	r2, [sp, #4]
    1500:	4002      	ands	r2, r0
    1502:	0192      	lsls	r2, r2, #6
    1504:	2140      	movs	r1, #64	; 0x40
    1506:	438b      	bics	r3, r1
    1508:	4313      	orrs	r3, r2
    150a:	4007      	ands	r7, r0
    150c:	01ff      	lsls	r7, r7, #7
    150e:	2280      	movs	r2, #128	; 0x80
    1510:	4393      	bics	r3, r2
    1512:	433b      	orrs	r3, r7
    1514:	3a79      	subs	r2, #121	; 0x79
    1516:	4015      	ands	r5, r2
    1518:	022d      	lsls	r5, r5, #8
    151a:	4f0a      	ldr	r7, [pc, #40]	; (1544 <system_clock_source_xosc32k_set_config+0xd0>)
    151c:	403b      	ands	r3, r7
    151e:	432b      	orrs	r3, r5
    1520:	4004      	ands	r4, r0
    1522:	0320      	lsls	r0, r4, #12
    1524:	4c08      	ldr	r4, [pc, #32]	; (1548 <system_clock_source_xosc32k_set_config+0xd4>)
    1526:	401c      	ands	r4, r3
    1528:	4304      	orrs	r4, r0
    152a:	82b4      	strh	r4, [r6, #20]
}
    152c:	b003      	add	sp, #12
    152e:	bc3c      	pop	{r2, r3, r4, r5}
    1530:	4690      	mov	r8, r2
    1532:	4699      	mov	r9, r3
    1534:	46a2      	mov	sl, r4
    1536:	46ab      	mov	fp, r5
    1538:	bdf0      	pop	{r4, r5, r6, r7, pc}
    153a:	46c0      	nop			; (mov r8, r8)
    153c:	40000800 	.word	0x40000800
    1540:	200000b8 	.word	0x200000b8
    1544:	fffff8ff 	.word	0xfffff8ff
    1548:	ffffefff 	.word	0xffffefff

0000154c <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    154c:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    154e:	7a03      	ldrb	r3, [r0, #8]
    1550:	069b      	lsls	r3, r3, #26
    1552:	0c1a      	lsrs	r2, r3, #16
    1554:	8943      	ldrh	r3, [r0, #10]
    1556:	059b      	lsls	r3, r3, #22
    1558:	0d9b      	lsrs	r3, r3, #22
    155a:	4313      	orrs	r3, r2
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
    155c:	4c19      	ldr	r4, [pc, #100]	; (15c4 <system_clock_source_dfll_set_config+0x78>)
    155e:	6063      	str	r3, [r4, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    1560:	7981      	ldrb	r1, [r0, #6]
    1562:	79c3      	ldrb	r3, [r0, #7]
    1564:	4319      	orrs	r1, r3
    1566:	8843      	ldrh	r3, [r0, #2]
    1568:	8882      	ldrh	r2, [r0, #4]
    156a:	4313      	orrs	r3, r2
    156c:	430b      	orrs	r3, r1
    156e:	7842      	ldrb	r2, [r0, #1]
    1570:	01d2      	lsls	r2, r2, #7
    1572:	4313      	orrs	r3, r2
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
    1574:	6023      	str	r3, [r4, #0]
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    1576:	7803      	ldrb	r3, [r0, #0]
    1578:	2b04      	cmp	r3, #4
    157a:	d10f      	bne.n	159c <system_clock_source_dfll_set_config+0x50>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    157c:	7b03      	ldrb	r3, [r0, #12]
    157e:	069b      	lsls	r3, r3, #26
    1580:	8a02      	ldrh	r2, [r0, #16]
    1582:	4313      	orrs	r3, r2
    1584:	0019      	movs	r1, r3
    1586:	89c3      	ldrh	r3, [r0, #14]
    1588:	041b      	lsls	r3, r3, #16
    158a:	4a0f      	ldr	r2, [pc, #60]	; (15c8 <system_clock_source_dfll_set_config+0x7c>)
    158c:	4013      	ands	r3, r2
    158e:	430b      	orrs	r3, r1
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
    1590:	60a3      	str	r3, [r4, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    1592:	6821      	ldr	r1, [r4, #0]
    1594:	2304      	movs	r3, #4
    1596:	430b      	orrs	r3, r1
    1598:	6023      	str	r3, [r4, #0]
    159a:	e011      	b.n	15c0 <system_clock_source_dfll_set_config+0x74>
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    159c:	2b20      	cmp	r3, #32
    159e:	d10f      	bne.n	15c0 <system_clock_source_dfll_set_config+0x74>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    15a0:	7b03      	ldrb	r3, [r0, #12]
    15a2:	069b      	lsls	r3, r3, #26
    15a4:	8a02      	ldrh	r2, [r0, #16]
    15a6:	4313      	orrs	r3, r2
    15a8:	0019      	movs	r1, r3
    15aa:	89c3      	ldrh	r3, [r0, #14]
    15ac:	041b      	lsls	r3, r3, #16
    15ae:	4a06      	ldr	r2, [pc, #24]	; (15c8 <system_clock_source_dfll_set_config+0x7c>)
    15b0:	4013      	ands	r3, r2
    15b2:	430b      	orrs	r3, r1
		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
    15b4:	4a03      	ldr	r2, [pc, #12]	; (15c4 <system_clock_source_dfll_set_config+0x78>)
    15b6:	6093      	str	r3, [r2, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    15b8:	6813      	ldr	r3, [r2, #0]
    15ba:	4904      	ldr	r1, [pc, #16]	; (15cc <system_clock_source_dfll_set_config+0x80>)
    15bc:	430b      	orrs	r3, r1
    15be:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    15c0:	bd10      	pop	{r4, pc}
    15c2:	46c0      	nop			; (mov r8, r8)
    15c4:	200000b8 	.word	0x200000b8
    15c8:	03ff0000 	.word	0x03ff0000
    15cc:	00000424 	.word	0x00000424

000015d0 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    15d0:	2808      	cmp	r0, #8
    15d2:	d803      	bhi.n	15dc <system_clock_source_enable+0xc>
    15d4:	0080      	lsls	r0, r0, #2
    15d6:	4b25      	ldr	r3, [pc, #148]	; (166c <system_clock_source_enable+0x9c>)
    15d8:	581b      	ldr	r3, [r3, r0]
    15da:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    15dc:	2017      	movs	r0, #23
    15de:	e044      	b.n	166a <system_clock_source_enable+0x9a>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    15e0:	4a23      	ldr	r2, [pc, #140]	; (1670 <system_clock_source_enable+0xa0>)
    15e2:	6a11      	ldr	r1, [r2, #32]
    15e4:	2302      	movs	r3, #2
    15e6:	430b      	orrs	r3, r1
    15e8:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    15ea:	2000      	movs	r0, #0
    15ec:	e03d      	b.n	166a <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    15ee:	4a20      	ldr	r2, [pc, #128]	; (1670 <system_clock_source_enable+0xa0>)
    15f0:	6991      	ldr	r1, [r2, #24]
    15f2:	2302      	movs	r3, #2
    15f4:	430b      	orrs	r3, r1
    15f6:	6193      	str	r3, [r2, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    15f8:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
    15fa:	e036      	b.n	166a <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    15fc:	4a1c      	ldr	r2, [pc, #112]	; (1670 <system_clock_source_enable+0xa0>)
    15fe:	8a11      	ldrh	r1, [r2, #16]
    1600:	2302      	movs	r3, #2
    1602:	430b      	orrs	r3, r1
    1604:	8213      	strh	r3, [r2, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1606:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
    1608:	e02f      	b.n	166a <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    160a:	4a19      	ldr	r2, [pc, #100]	; (1670 <system_clock_source_enable+0xa0>)
    160c:	8a91      	ldrh	r1, [r2, #20]
    160e:	2302      	movs	r3, #2
    1610:	430b      	orrs	r3, r1
    1612:	8293      	strh	r3, [r2, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1614:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
    1616:	e028      	b.n	166a <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1618:	4916      	ldr	r1, [pc, #88]	; (1674 <system_clock_source_enable+0xa4>)
    161a:	680b      	ldr	r3, [r1, #0]
    161c:	2202      	movs	r2, #2
    161e:	4313      	orrs	r3, r2
    1620:	600b      	str	r3, [r1, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1622:	4b13      	ldr	r3, [pc, #76]	; (1670 <system_clock_source_enable+0xa0>)
    1624:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1626:	0019      	movs	r1, r3
    1628:	320e      	adds	r2, #14
    162a:	68cb      	ldr	r3, [r1, #12]
    162c:	421a      	tst	r2, r3
    162e:	d0fc      	beq.n	162a <system_clock_source_enable+0x5a>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1630:	4a10      	ldr	r2, [pc, #64]	; (1674 <system_clock_source_enable+0xa4>)
    1632:	6891      	ldr	r1, [r2, #8]
    1634:	4b0e      	ldr	r3, [pc, #56]	; (1670 <system_clock_source_enable+0xa0>)
    1636:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1638:	6852      	ldr	r2, [r2, #4]
    163a:	629a      	str	r2, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    163c:	2200      	movs	r2, #0
    163e:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1640:	0019      	movs	r1, r3
    1642:	3210      	adds	r2, #16
    1644:	68cb      	ldr	r3, [r1, #12]
    1646:	421a      	tst	r2, r3
    1648:	d0fc      	beq.n	1644 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
	_system_dfll_wait_for_sync();
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    164a:	4b0a      	ldr	r3, [pc, #40]	; (1674 <system_clock_source_enable+0xa4>)
    164c:	681b      	ldr	r3, [r3, #0]
    164e:	b29b      	uxth	r3, r3
    1650:	4a07      	ldr	r2, [pc, #28]	; (1670 <system_clock_source_enable+0xa0>)
    1652:	8493      	strh	r3, [r2, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1654:	2000      	movs	r0, #0
    1656:	e008      	b.n	166a <system_clock_source_enable+0x9a>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1658:	4905      	ldr	r1, [pc, #20]	; (1670 <system_clock_source_enable+0xa0>)
    165a:	2244      	movs	r2, #68	; 0x44
    165c:	5c88      	ldrb	r0, [r1, r2]
    165e:	2302      	movs	r3, #2
    1660:	4303      	orrs	r3, r0
    1662:	548b      	strb	r3, [r1, r2]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1664:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
    1666:	e000      	b.n	166a <system_clock_source_enable+0x9a>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    1668:	2000      	movs	r0, #0
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
    166a:	4770      	bx	lr
    166c:	00005728 	.word	0x00005728
    1670:	40000800 	.word	0x40000800
    1674:	200000b8 	.word	0x200000b8

00001678 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1678:	b5f0      	push	{r4, r5, r6, r7, lr}
    167a:	4657      	mov	r7, sl
    167c:	464e      	mov	r6, r9
    167e:	4645      	mov	r5, r8
    1680:	b4e0      	push	{r5, r6, r7}
    1682:	b090      	sub	sp, #64	; 0x40
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1684:	22c2      	movs	r2, #194	; 0xc2
    1686:	00d2      	lsls	r2, r2, #3
    1688:	4b62      	ldr	r3, [pc, #392]	; (1814 <system_clock_init+0x19c>)
    168a:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    168c:	4962      	ldr	r1, [pc, #392]	; (1818 <system_clock_init+0x1a0>)
    168e:	684b      	ldr	r3, [r1, #4]
    1690:	221e      	movs	r2, #30
    1692:	4393      	bics	r3, r2
    1694:	3a1a      	subs	r2, #26
    1696:	4313      	orrs	r3, r2
    1698:	604b      	str	r3, [r1, #4]
#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
    169a:	3a01      	subs	r2, #1
    169c:	ab01      	add	r3, sp, #4
    169e:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    16a0:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    16a2:	4d5e      	ldr	r5, [pc, #376]	; (181c <system_clock_init+0x1a4>)
    16a4:	b2e0      	uxtb	r0, r4
    16a6:	a901      	add	r1, sp, #4
    16a8:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    16aa:	3401      	adds	r4, #1
    16ac:	2c25      	cmp	r4, #37	; 0x25
    16ae:	d1f9      	bne.n	16a4 <system_clock_init+0x2c>
static inline void system_clock_source_xosc32k_get_config_defaults(
		struct system_clock_source_xosc32k_config *const config)
{
	Assert(config);

	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    16b0:	a80c      	add	r0, sp, #48	; 0x30
    16b2:	2300      	movs	r3, #0
    16b4:	7003      	strb	r3, [r0, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
	config->auto_gain_control   = false;
	config->frequency           = 32768UL;
    16b6:	2280      	movs	r2, #128	; 0x80
    16b8:	0212      	lsls	r2, r2, #8
    16ba:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    16bc:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    16be:	2201      	movs	r2, #1
    16c0:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    16c2:	7303      	strb	r3, [r0, #12]
	config->on_demand           = true;
	config->write_once          = false;
    16c4:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    16c6:	2106      	movs	r1, #6
    16c8:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
    16ca:	7082      	strb	r2, [r0, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    16cc:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    16ce:	4b54      	ldr	r3, [pc, #336]	; (1820 <system_clock_init+0x1a8>)
    16d0:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    16d2:	2005      	movs	r0, #5
    16d4:	4b53      	ldr	r3, [pc, #332]	; (1824 <system_clock_init+0x1ac>)
    16d6:	4798      	blx	r3

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    16d8:	494e      	ldr	r1, [pc, #312]	; (1814 <system_clock_init+0x19c>)
	xosc32k_conf.on_demand           = false;
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    16da:	2202      	movs	r2, #2

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    16dc:	68cb      	ldr	r3, [r1, #12]
	xosc32k_conf.on_demand           = false;
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    16de:	421a      	tst	r2, r3
    16e0:	d0fc      	beq.n	16dc <system_clock_init+0x64>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    16e2:	494c      	ldr	r1, [pc, #304]	; (1814 <system_clock_init+0x19c>)
    16e4:	8a8a      	ldrh	r2, [r1, #20]
    16e6:	2380      	movs	r3, #128	; 0x80
    16e8:	4313      	orrs	r3, r2
    16ea:	828b      	strh	r3, [r1, #20]


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> 
    16ec:	4c4e      	ldr	r4, [pc, #312]	; (1828 <system_clock_init+0x1b0>)
#endif


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
    16ee:	6823      	ldr	r3, [r4, #0]
    16f0:	04da      	lsls	r2, r3, #19
    16f2:	6988      	ldr	r0, [r1, #24]
    16f4:	0e52      	lsrs	r2, r2, #25
    16f6:	0412      	lsls	r2, r2, #16
    16f8:	4b4c      	ldr	r3, [pc, #304]	; (182c <system_clock_init+0x1b4>)
    16fa:	4003      	ands	r3, r0
    16fc:	4313      	orrs	r3, r2
    16fe:	618b      	str	r3, [r1, #24]
static inline void system_clock_source_osc32k_get_config_defaults(
		struct system_clock_source_osc32k_config *const config)
{
	Assert(config);

	config->enable_1khz_output  = true;
    1700:	a80a      	add	r0, sp, #40	; 0x28
    1702:	2301      	movs	r3, #1
    1704:	7043      	strb	r3, [r0, #1]
	config->enable_32khz_output = true;
    1706:	7083      	strb	r3, [r0, #2]
	config->run_in_standby      = false;
	config->on_demand           = true;
    1708:	7103      	strb	r3, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    170a:	2207      	movs	r2, #7
    170c:	7002      	strb	r2, [r0, #0]
	config->write_once          = false;
    170e:	2500      	movs	r5, #0
    1710:	7145      	strb	r5, [r0, #5]

	osc32k_conf.startup_time        = CONF_CLOCK_OSC32K_STARTUP_TIME;
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;
    1712:	70c3      	strb	r3, [r0, #3]

	system_clock_source_osc32k_set_config(&osc32k_conf);
    1714:	4b46      	ldr	r3, [pc, #280]	; (1830 <system_clock_init+0x1b8>)
    1716:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    1718:	2004      	movs	r0, #4
    171a:	4b42      	ldr	r3, [pc, #264]	; (1824 <system_clock_init+0x1ac>)
    171c:	4798      	blx	r3
		struct system_clock_source_dfll_config *const config)
{
	Assert(config);

	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    171e:	ab05      	add	r3, sp, #20
    1720:	2200      	movs	r2, #0
    1722:	805d      	strh	r5, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    1724:	809d      	strh	r5, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    1726:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    1728:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;

	/* Open loop mode calibration value */
	config->coarse_value    = 0x1f / 4; /* Midpoint */
	config->fine_value      = 0xff / 4; /* Midpoint */
    172a:	213f      	movs	r1, #63	; 0x3f
    172c:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    172e:	393b      	subs	r1, #59	; 0x3b
    1730:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    1732:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    1734:	6823      	ldr	r3, [r4, #0]
    1736:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    1738:	2b3f      	cmp	r3, #63	; 0x3f
    173a:	d100      	bne.n	173e <system_clock_init+0xc6>
		coarse = 0x1f;
    173c:	3b20      	subs	r3, #32
	}
	dfll_conf.coarse_value = coarse;
    173e:	a805      	add	r0, sp, #20
    1740:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    1742:	23b7      	movs	r3, #183	; 0xb7
    1744:	00db      	lsls	r3, r3, #3
    1746:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    1748:	2307      	movs	r3, #7
    174a:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    174c:	3338      	adds	r3, #56	; 0x38
    174e:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    1750:	4b38      	ldr	r3, [pc, #224]	; (1834 <system_clock_init+0x1bc>)
    1752:	4798      	blx	r3
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
    1754:	a804      	add	r0, sp, #16
    1756:	2500      	movs	r5, #0
    1758:	7045      	strb	r5, [r0, #1]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    175a:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    175c:	7085      	strb	r5, [r0, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    175e:	4b36      	ldr	r3, [pc, #216]	; (1838 <system_clock_init+0x1c0>)
    1760:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1762:	2006      	movs	r0, #6
    1764:	4b2f      	ldr	r3, [pc, #188]	; (1824 <system_clock_init+0x1ac>)
    1766:	4699      	mov	r9, r3
    1768:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    176a:	4b34      	ldr	r3, [pc, #208]	; (183c <system_clock_init+0x1c4>)
    176c:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    176e:	ac01      	add	r4, sp, #4
    1770:	2601      	movs	r6, #1
    1772:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    1774:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    1776:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1778:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    177a:	2305      	movs	r3, #5
    177c:	7023      	strb	r3, [r4, #0]
    177e:	0021      	movs	r1, r4
    1780:	2001      	movs	r0, #1
    1782:	4b2f      	ldr	r3, [pc, #188]	; (1840 <system_clock_init+0x1c8>)
    1784:	4698      	mov	r8, r3
    1786:	4798      	blx	r3
    1788:	2001      	movs	r0, #1
    178a:	4f2e      	ldr	r7, [pc, #184]	; (1844 <system_clock_init+0x1cc>)
    178c:	47b8      	blx	r7
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
    178e:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
	config->output_enable      = false;
    1790:	7265      	strb	r5, [r4, #9]
    1792:	2304      	movs	r3, #4
    1794:	7023      	strb	r3, [r4, #0]
    1796:	331c      	adds	r3, #28
    1798:	469a      	mov	sl, r3
    179a:	6063      	str	r3, [r4, #4]
    179c:	7226      	strb	r6, [r4, #8]
    179e:	0021      	movs	r1, r4
    17a0:	2002      	movs	r0, #2
    17a2:	47c0      	blx	r8
    17a4:	2002      	movs	r0, #2
    17a6:	47b8      	blx	r7
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
    17a8:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    17aa:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    17ac:	7265      	strb	r5, [r4, #9]
    17ae:	2303      	movs	r3, #3
    17b0:	7023      	strb	r3, [r4, #0]
    17b2:	4653      	mov	r3, sl
    17b4:	6063      	str	r3, [r4, #4]
    17b6:	0021      	movs	r1, r4
    17b8:	2004      	movs	r0, #4
    17ba:	47c0      	blx	r8
    17bc:	2004      	movs	r0, #4
    17be:	47b8      	blx	r7
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    17c0:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    17c2:	0021      	movs	r1, r4
    17c4:	2000      	movs	r0, #0
    17c6:	4b15      	ldr	r3, [pc, #84]	; (181c <system_clock_init+0x1a4>)
    17c8:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    17ca:	2000      	movs	r0, #0
    17cc:	4b1e      	ldr	r3, [pc, #120]	; (1848 <system_clock_init+0x1d0>)
    17ce:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    17d0:	2007      	movs	r0, #7
    17d2:	47c8      	blx	r9

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    17d4:	490f      	ldr	r1, [pc, #60]	; (1814 <system_clock_init+0x19c>)


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    17d6:	22d0      	movs	r2, #208	; 0xd0

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    17d8:	68cb      	ldr	r3, [r1, #12]


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    17da:	4013      	ands	r3, r2
    17dc:	2bd0      	cmp	r3, #208	; 0xd0
    17de:	d1fb      	bne.n	17d8 <system_clock_init+0x160>
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    17e0:	4a1a      	ldr	r2, [pc, #104]	; (184c <system_clock_init+0x1d4>)
    17e2:	2300      	movs	r3, #0
    17e4:	7213      	strb	r3, [r2, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    17e6:	7253      	strb	r3, [r2, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    17e8:	7293      	strb	r3, [r2, #10]
			break;
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    17ea:	72d3      	strb	r3, [r2, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    17ec:	a901      	add	r1, sp, #4
    17ee:	2201      	movs	r2, #1
    17f0:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    17f2:	704b      	strb	r3, [r1, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    17f4:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    17f6:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    17f8:	3307      	adds	r3, #7
    17fa:	700b      	strb	r3, [r1, #0]
    17fc:	2000      	movs	r0, #0
    17fe:	4b10      	ldr	r3, [pc, #64]	; (1840 <system_clock_init+0x1c8>)
    1800:	4798      	blx	r3
    1802:	2000      	movs	r0, #0
    1804:	4b0f      	ldr	r3, [pc, #60]	; (1844 <system_clock_init+0x1cc>)
    1806:	4798      	blx	r3
#endif
}
    1808:	b010      	add	sp, #64	; 0x40
    180a:	bc1c      	pop	{r2, r3, r4}
    180c:	4690      	mov	r8, r2
    180e:	4699      	mov	r9, r3
    1810:	46a2      	mov	sl, r4
    1812:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1814:	40000800 	.word	0x40000800
    1818:	41004000 	.word	0x41004000
    181c:	00001a89 	.word	0x00001a89
    1820:	00001475 	.word	0x00001475
    1824:	000015d1 	.word	0x000015d1
    1828:	00806024 	.word	0x00806024
    182c:	ff80ffff 	.word	0xff80ffff
    1830:	000013ed 	.word	0x000013ed
    1834:	0000154d 	.word	0x0000154d
    1838:	000013b1 	.word	0x000013b1
    183c:	00001851 	.word	0x00001851
    1840:	00001875 	.word	0x00001875
    1844:	0000192d 	.word	0x0000192d
    1848:	000019fd 	.word	0x000019fd
    184c:	40000400 	.word	0x40000400

00001850 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    1850:	4a06      	ldr	r2, [pc, #24]	; (186c <system_gclk_init+0x1c>)
    1852:	6991      	ldr	r1, [r2, #24]
    1854:	2308      	movs	r3, #8
    1856:	430b      	orrs	r3, r1
    1858:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    185a:	2201      	movs	r2, #1
    185c:	4b04      	ldr	r3, [pc, #16]	; (1870 <system_gclk_init+0x20>)
    185e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1860:	0019      	movs	r1, r3
    1862:	780b      	ldrb	r3, [r1, #0]
    1864:	4213      	tst	r3, r2
    1866:	d1fc      	bne.n	1862 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1868:	4770      	bx	lr
    186a:	46c0      	nop			; (mov r8, r8)
    186c:	40000400 	.word	0x40000400
    1870:	40000c00 	.word	0x40000c00

00001874 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1874:	b570      	push	{r4, r5, r6, lr}
    1876:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1878:	0005      	movs	r5, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    187a:	780c      	ldrb	r4, [r1, #0]
    187c:	0224      	lsls	r4, r4, #8
    187e:	4304      	orrs	r4, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1880:	784b      	ldrb	r3, [r1, #1]
    1882:	2b00      	cmp	r3, #0
    1884:	d002      	beq.n	188c <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1886:	2380      	movs	r3, #128	; 0x80
    1888:	02db      	lsls	r3, r3, #11
    188a:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    188c:	7a4b      	ldrb	r3, [r1, #9]
    188e:	2b00      	cmp	r3, #0
    1890:	d002      	beq.n	1898 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1892:	2380      	movs	r3, #128	; 0x80
    1894:	031b      	lsls	r3, r3, #12
    1896:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1898:	6848      	ldr	r0, [r1, #4]
    189a:	2801      	cmp	r0, #1
    189c:	d918      	bls.n	18d0 <system_gclk_gen_set_config+0x5c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    189e:	1e43      	subs	r3, r0, #1
    18a0:	4218      	tst	r0, r3
    18a2:	d110      	bne.n	18c6 <system_gclk_gen_set_config+0x52>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    18a4:	2802      	cmp	r0, #2
    18a6:	d906      	bls.n	18b6 <system_gclk_gen_set_config+0x42>
    18a8:	2302      	movs	r3, #2
    18aa:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    18ac:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    18ae:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    18b0:	4298      	cmp	r0, r3
    18b2:	d8fb      	bhi.n	18ac <system_gclk_gen_set_config+0x38>
    18b4:	e000      	b.n	18b8 <system_gclk_gen_set_config+0x44>
    18b6:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    18b8:	0212      	lsls	r2, r2, #8
    18ba:	4332      	orrs	r2, r6
    18bc:	0015      	movs	r5, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    18be:	2380      	movs	r3, #128	; 0x80
    18c0:	035b      	lsls	r3, r3, #13
    18c2:	431c      	orrs	r4, r3
    18c4:	e004      	b.n	18d0 <system_gclk_gen_set_config+0x5c>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    18c6:	0205      	lsls	r5, r0, #8
    18c8:	4335      	orrs	r5, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    18ca:	2380      	movs	r3, #128	; 0x80
    18cc:	029b      	lsls	r3, r3, #10
    18ce:	431c      	orrs	r4, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    18d0:	7a0b      	ldrb	r3, [r1, #8]
    18d2:	2b00      	cmp	r3, #0
    18d4:	d002      	beq.n	18dc <system_gclk_gen_set_config+0x68>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    18d6:	2380      	movs	r3, #128	; 0x80
    18d8:	039b      	lsls	r3, r3, #14
    18da:	431c      	orrs	r4, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    18dc:	4a0f      	ldr	r2, [pc, #60]	; (191c <system_gclk_gen_set_config+0xa8>)
    18de:	7853      	ldrb	r3, [r2, #1]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing()) {
    18e0:	b25b      	sxtb	r3, r3
    18e2:	2b00      	cmp	r3, #0
    18e4:	dbfb      	blt.n	18de <system_gclk_gen_set_config+0x6a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    18e6:	4b0e      	ldr	r3, [pc, #56]	; (1920 <system_gclk_gen_set_config+0xac>)
    18e8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    18ea:	4b0e      	ldr	r3, [pc, #56]	; (1924 <system_gclk_gen_set_config+0xb0>)
    18ec:	701e      	strb	r6, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    18ee:	4a0b      	ldr	r2, [pc, #44]	; (191c <system_gclk_gen_set_config+0xa8>)
    18f0:	7853      	ldrb	r3, [r2, #1]

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    18f2:	b25b      	sxtb	r3, r3
    18f4:	2b00      	cmp	r3, #0
    18f6:	dbfb      	blt.n	18f0 <system_gclk_gen_set_config+0x7c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    18f8:	4b08      	ldr	r3, [pc, #32]	; (191c <system_gclk_gen_set_config+0xa8>)
    18fa:	609d      	str	r5, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    18fc:	001a      	movs	r2, r3
    18fe:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
    1900:	b25b      	sxtb	r3, r3
    1902:	2b00      	cmp	r3, #0
    1904:	dbfb      	blt.n	18fe <system_gclk_gen_set_config+0x8a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1906:	4a05      	ldr	r2, [pc, #20]	; (191c <system_gclk_gen_set_config+0xa8>)
    1908:	6851      	ldr	r1, [r2, #4]
    190a:	2380      	movs	r3, #128	; 0x80
    190c:	025b      	lsls	r3, r3, #9
    190e:	400b      	ands	r3, r1
    1910:	431c      	orrs	r4, r3
    1912:	6054      	str	r4, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1914:	4b04      	ldr	r3, [pc, #16]	; (1928 <system_gclk_gen_set_config+0xb4>)
    1916:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1918:	bd70      	pop	{r4, r5, r6, pc}
    191a:	46c0      	nop			; (mov r8, r8)
    191c:	40000c00 	.word	0x40000c00
    1920:	00000181 	.word	0x00000181
    1924:	40000c08 	.word	0x40000c08
    1928:	000001c1 	.word	0x000001c1

0000192c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    192c:	b510      	push	{r4, lr}
    192e:	0004      	movs	r4, r0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1930:	4a0b      	ldr	r2, [pc, #44]	; (1960 <system_gclk_gen_enable+0x34>)
    1932:	7853      	ldrb	r3, [r2, #1]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    1934:	b25b      	sxtb	r3, r3
    1936:	2b00      	cmp	r3, #0
    1938:	dbfb      	blt.n	1932 <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    193a:	4b0a      	ldr	r3, [pc, #40]	; (1964 <system_gclk_gen_enable+0x38>)
    193c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    193e:	4b0a      	ldr	r3, [pc, #40]	; (1968 <system_gclk_gen_enable+0x3c>)
    1940:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1942:	4a07      	ldr	r2, [pc, #28]	; (1960 <system_gclk_gen_enable+0x34>)
    1944:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    1946:	b25b      	sxtb	r3, r3
    1948:	2b00      	cmp	r3, #0
    194a:	dbfb      	blt.n	1944 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    194c:	4a04      	ldr	r2, [pc, #16]	; (1960 <system_gclk_gen_enable+0x34>)
    194e:	6853      	ldr	r3, [r2, #4]
    1950:	2180      	movs	r1, #128	; 0x80
    1952:	0249      	lsls	r1, r1, #9
    1954:	430b      	orrs	r3, r1
    1956:	6053      	str	r3, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1958:	4b04      	ldr	r3, [pc, #16]	; (196c <system_gclk_gen_enable+0x40>)
    195a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    195c:	bd10      	pop	{r4, pc}
    195e:	46c0      	nop			; (mov r8, r8)
    1960:	40000c00 	.word	0x40000c00
    1964:	00000181 	.word	0x00000181
    1968:	40000c04 	.word	0x40000c04
    196c:	000001c1 	.word	0x000001c1

00001970 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1970:	b570      	push	{r4, r5, r6, lr}
    1972:	0004      	movs	r4, r0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1974:	4a1a      	ldr	r2, [pc, #104]	; (19e0 <system_gclk_gen_get_hz+0x70>)
    1976:	7853      	ldrb	r3, [r2, #1]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    1978:	b25b      	sxtb	r3, r3
    197a:	2b00      	cmp	r3, #0
    197c:	dbfb      	blt.n	1976 <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    197e:	4b19      	ldr	r3, [pc, #100]	; (19e4 <system_gclk_gen_get_hz+0x74>)
    1980:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1982:	4b19      	ldr	r3, [pc, #100]	; (19e8 <system_gclk_gen_get_hz+0x78>)
    1984:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1986:	4a16      	ldr	r2, [pc, #88]	; (19e0 <system_gclk_gen_get_hz+0x70>)
    1988:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    198a:	b25b      	sxtb	r3, r3
    198c:	2b00      	cmp	r3, #0
    198e:	dbfb      	blt.n	1988 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1990:	4e13      	ldr	r6, [pc, #76]	; (19e0 <system_gclk_gen_get_hz+0x70>)
    1992:	6870      	ldr	r0, [r6, #4]
    1994:	04c0      	lsls	r0, r0, #19
    1996:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1998:	4b14      	ldr	r3, [pc, #80]	; (19ec <system_gclk_gen_get_hz+0x7c>)
    199a:	4798      	blx	r3
    199c:	0005      	movs	r5, r0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    199e:	4b12      	ldr	r3, [pc, #72]	; (19e8 <system_gclk_gen_get_hz+0x78>)
    19a0:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    19a2:	6876      	ldr	r6, [r6, #4]
    19a4:	02f6      	lsls	r6, r6, #11
    19a6:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    19a8:	4b11      	ldr	r3, [pc, #68]	; (19f0 <system_gclk_gen_get_hz+0x80>)
    19aa:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    19ac:	4a0c      	ldr	r2, [pc, #48]	; (19e0 <system_gclk_gen_get_hz+0x70>)
    19ae:	7853      	ldrb	r3, [r2, #1]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
	while (system_gclk_is_syncing()) {
    19b0:	b25b      	sxtb	r3, r3
    19b2:	2b00      	cmp	r3, #0
    19b4:	dbfb      	blt.n	19ae <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    19b6:	4b0a      	ldr	r3, [pc, #40]	; (19e0 <system_gclk_gen_get_hz+0x70>)
    19b8:	689c      	ldr	r4, [r3, #8]
    19ba:	0224      	lsls	r4, r4, #8
    19bc:	0c24      	lsrs	r4, r4, #16
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    19be:	4b0d      	ldr	r3, [pc, #52]	; (19f4 <system_gclk_gen_get_hz+0x84>)
    19c0:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    19c2:	2e00      	cmp	r6, #0
    19c4:	d107      	bne.n	19d6 <system_gclk_gen_get_hz+0x66>
    19c6:	2c01      	cmp	r4, #1
    19c8:	d907      	bls.n	19da <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    19ca:	0021      	movs	r1, r4
    19cc:	0028      	movs	r0, r5
    19ce:	4b0a      	ldr	r3, [pc, #40]	; (19f8 <system_gclk_gen_get_hz+0x88>)
    19d0:	4798      	blx	r3
    19d2:	0005      	movs	r5, r0
    19d4:	e001      	b.n	19da <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    19d6:	3401      	adds	r4, #1
    19d8:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    19da:	0028      	movs	r0, r5
    19dc:	bd70      	pop	{r4, r5, r6, pc}
    19de:	46c0      	nop			; (mov r8, r8)
    19e0:	40000c00 	.word	0x40000c00
    19e4:	00000181 	.word	0x00000181
    19e8:	40000c04 	.word	0x40000c04
    19ec:	00001321 	.word	0x00001321
    19f0:	40000c08 	.word	0x40000c08
    19f4:	000001c1 	.word	0x000001c1
    19f8:	000049e1 	.word	0x000049e1

000019fc <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    19fc:	b510      	push	{r4, lr}
    19fe:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1a00:	4b06      	ldr	r3, [pc, #24]	; (1a1c <system_gclk_chan_enable+0x20>)
    1a02:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1a04:	4b06      	ldr	r3, [pc, #24]	; (1a20 <system_gclk_chan_enable+0x24>)
    1a06:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1a08:	4a06      	ldr	r2, [pc, #24]	; (1a24 <system_gclk_chan_enable+0x28>)
    1a0a:	8851      	ldrh	r1, [r2, #2]
    1a0c:	2380      	movs	r3, #128	; 0x80
    1a0e:	01db      	lsls	r3, r3, #7
    1a10:	430b      	orrs	r3, r1
    1a12:	8053      	strh	r3, [r2, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1a14:	4b04      	ldr	r3, [pc, #16]	; (1a28 <system_gclk_chan_enable+0x2c>)
    1a16:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1a18:	bd10      	pop	{r4, pc}
    1a1a:	46c0      	nop			; (mov r8, r8)
    1a1c:	00000181 	.word	0x00000181
    1a20:	40000c02 	.word	0x40000c02
    1a24:	40000c00 	.word	0x40000c00
    1a28:	000001c1 	.word	0x000001c1

00001a2c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1a2c:	b510      	push	{r4, lr}
    1a2e:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1a30:	4b0f      	ldr	r3, [pc, #60]	; (1a70 <system_gclk_chan_disable+0x44>)
    1a32:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1a34:	4b0f      	ldr	r3, [pc, #60]	; (1a74 <system_gclk_chan_disable+0x48>)
    1a36:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1a38:	4b0f      	ldr	r3, [pc, #60]	; (1a78 <system_gclk_chan_disable+0x4c>)
    1a3a:	885a      	ldrh	r2, [r3, #2]
    1a3c:	0512      	lsls	r2, r2, #20
    1a3e:	0f10      	lsrs	r0, r2, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1a40:	8859      	ldrh	r1, [r3, #2]
    1a42:	4a0e      	ldr	r2, [pc, #56]	; (1a7c <system_gclk_chan_disable+0x50>)
    1a44:	400a      	ands	r2, r1
    1a46:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1a48:	8859      	ldrh	r1, [r3, #2]
    1a4a:	4a0d      	ldr	r2, [pc, #52]	; (1a80 <system_gclk_chan_disable+0x54>)
    1a4c:	400a      	ands	r2, r1
    1a4e:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1a50:	0019      	movs	r1, r3
    1a52:	2280      	movs	r2, #128	; 0x80
    1a54:	01d2      	lsls	r2, r2, #7
    1a56:	884b      	ldrh	r3, [r1, #2]
    1a58:	4213      	tst	r3, r2
    1a5a:	d1fc      	bne.n	1a56 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1a5c:	4906      	ldr	r1, [pc, #24]	; (1a78 <system_gclk_chan_disable+0x4c>)
    1a5e:	884c      	ldrh	r4, [r1, #2]
    1a60:	0202      	lsls	r2, r0, #8
    1a62:	4b06      	ldr	r3, [pc, #24]	; (1a7c <system_gclk_chan_disable+0x50>)
    1a64:	4023      	ands	r3, r4
    1a66:	4313      	orrs	r3, r2
    1a68:	804b      	strh	r3, [r1, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1a6a:	4b06      	ldr	r3, [pc, #24]	; (1a84 <system_gclk_chan_disable+0x58>)
    1a6c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1a6e:	bd10      	pop	{r4, pc}
    1a70:	00000181 	.word	0x00000181
    1a74:	40000c02 	.word	0x40000c02
    1a78:	40000c00 	.word	0x40000c00
    1a7c:	fffff0ff 	.word	0xfffff0ff
    1a80:	ffffbfff 	.word	0xffffbfff
    1a84:	000001c1 	.word	0x000001c1

00001a88 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    1a88:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1a8a:	780c      	ldrb	r4, [r1, #0]
    1a8c:	0224      	lsls	r4, r4, #8
    1a8e:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    1a90:	4b02      	ldr	r3, [pc, #8]	; (1a9c <system_gclk_chan_set_config+0x14>)
    1a92:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1a94:	b2a4      	uxth	r4, r4
    1a96:	4b02      	ldr	r3, [pc, #8]	; (1aa0 <system_gclk_chan_set_config+0x18>)
    1a98:	805c      	strh	r4, [r3, #2]
}
    1a9a:	bd10      	pop	{r4, pc}
    1a9c:	00001a2d 	.word	0x00001a2d
    1aa0:	40000c00 	.word	0x40000c00

00001aa4 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1aa4:	b510      	push	{r4, lr}
    1aa6:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1aa8:	4b06      	ldr	r3, [pc, #24]	; (1ac4 <system_gclk_chan_get_hz+0x20>)
    1aaa:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1aac:	4b06      	ldr	r3, [pc, #24]	; (1ac8 <system_gclk_chan_get_hz+0x24>)
    1aae:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1ab0:	4b06      	ldr	r3, [pc, #24]	; (1acc <system_gclk_chan_get_hz+0x28>)
    1ab2:	885c      	ldrh	r4, [r3, #2]
    1ab4:	0524      	lsls	r4, r4, #20
    1ab6:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1ab8:	4b05      	ldr	r3, [pc, #20]	; (1ad0 <system_gclk_chan_get_hz+0x2c>)
    1aba:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1abc:	0020      	movs	r0, r4
    1abe:	4b05      	ldr	r3, [pc, #20]	; (1ad4 <system_gclk_chan_get_hz+0x30>)
    1ac0:	4798      	blx	r3
}
    1ac2:	bd10      	pop	{r4, pc}
    1ac4:	00000181 	.word	0x00000181
    1ac8:	40000c02 	.word	0x40000c02
    1acc:	40000c00 	.word	0x40000c00
    1ad0:	000001c1 	.word	0x000001c1
    1ad4:	00001971 	.word	0x00001971

00001ad8 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1ad8:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1ada:	78d3      	ldrb	r3, [r2, #3]
    1adc:	2b00      	cmp	r3, #0
    1ade:	d11e      	bne.n	1b1e <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1ae0:	7813      	ldrb	r3, [r2, #0]
    1ae2:	2b80      	cmp	r3, #128	; 0x80
    1ae4:	d004      	beq.n	1af0 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1ae6:	061b      	lsls	r3, r3, #24
    1ae8:	2480      	movs	r4, #128	; 0x80
    1aea:	0264      	lsls	r4, r4, #9
    1aec:	4323      	orrs	r3, r4
    1aee:	e000      	b.n	1af2 <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    1af0:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1af2:	7854      	ldrb	r4, [r2, #1]
    1af4:	2502      	movs	r5, #2
    1af6:	43ac      	bics	r4, r5
    1af8:	d10a      	bne.n	1b10 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1afa:	7894      	ldrb	r4, [r2, #2]
    1afc:	2c00      	cmp	r4, #0
    1afe:	d103      	bne.n	1b08 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    1b00:	2480      	movs	r4, #128	; 0x80
    1b02:	02a4      	lsls	r4, r4, #10
    1b04:	4323      	orrs	r3, r4
    1b06:	e002      	b.n	1b0e <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1b08:	24c0      	movs	r4, #192	; 0xc0
    1b0a:	02e4      	lsls	r4, r4, #11
    1b0c:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1b0e:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1b10:	7854      	ldrb	r4, [r2, #1]
    1b12:	3c01      	subs	r4, #1
    1b14:	2c01      	cmp	r4, #1
    1b16:	d812      	bhi.n	1b3e <_system_pinmux_config+0x66>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1b18:	4c18      	ldr	r4, [pc, #96]	; (1b7c <_system_pinmux_config+0xa4>)
    1b1a:	4023      	ands	r3, r4
    1b1c:	e00f      	b.n	1b3e <_system_pinmux_config+0x66>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    1b1e:	6041      	str	r1, [r0, #4]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1b20:	040b      	lsls	r3, r1, #16
    1b22:	0c1b      	lsrs	r3, r3, #16
    1b24:	24a0      	movs	r4, #160	; 0xa0
    1b26:	05e4      	lsls	r4, r4, #23
    1b28:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1b2a:	6283      	str	r3, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1b2c:	0c0b      	lsrs	r3, r1, #16
    1b2e:	24d0      	movs	r4, #208	; 0xd0
    1b30:	0624      	lsls	r4, r4, #24
    1b32:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1b34:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1b36:	78d3      	ldrb	r3, [r2, #3]
    1b38:	2b00      	cmp	r3, #0
    1b3a:	d018      	beq.n	1b6e <_system_pinmux_config+0x96>
    1b3c:	e01c      	b.n	1b78 <_system_pinmux_config+0xa0>

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1b3e:	040c      	lsls	r4, r1, #16
    1b40:	0c24      	lsrs	r4, r4, #16
    1b42:	25a0      	movs	r5, #160	; 0xa0
    1b44:	05ed      	lsls	r5, r5, #23
    1b46:	432c      	orrs	r4, r5
    1b48:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1b4a:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1b4c:	0c0c      	lsrs	r4, r1, #16
    1b4e:	25d0      	movs	r5, #208	; 0xd0
    1b50:	062d      	lsls	r5, r5, #24
    1b52:	432c      	orrs	r4, r5
    1b54:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1b56:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1b58:	78d4      	ldrb	r4, [r2, #3]
    1b5a:	2c00      	cmp	r4, #0
    1b5c:	d10c      	bne.n	1b78 <_system_pinmux_config+0xa0>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1b5e:	035b      	lsls	r3, r3, #13
    1b60:	d505      	bpl.n	1b6e <_system_pinmux_config+0x96>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1b62:	7893      	ldrb	r3, [r2, #2]
    1b64:	2b01      	cmp	r3, #1
    1b66:	d101      	bne.n	1b6c <_system_pinmux_config+0x94>
				port->OUTSET.reg = pin_mask;
    1b68:	6181      	str	r1, [r0, #24]
    1b6a:	e000      	b.n	1b6e <_system_pinmux_config+0x96>
			} else {
				port->OUTCLR.reg = pin_mask;
    1b6c:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1b6e:	7853      	ldrb	r3, [r2, #1]
    1b70:	3b01      	subs	r3, #1
    1b72:	2b01      	cmp	r3, #1
    1b74:	d800      	bhi.n	1b78 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    1b76:	6081      	str	r1, [r0, #8]
		}
	}
}
    1b78:	bd30      	pop	{r4, r5, pc}
    1b7a:	46c0      	nop			; (mov r8, r8)
    1b7c:	fffbffff 	.word	0xfffbffff

00001b80 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1b80:	b510      	push	{r4, lr}
    1b82:	0003      	movs	r3, r0
    1b84:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1b86:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1b88:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1b8a:	2900      	cmp	r1, #0
    1b8c:	d104      	bne.n	1b98 <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
    1b8e:	0958      	lsrs	r0, r3, #5
    1b90:	01c0      	lsls	r0, r0, #7
    1b92:	4905      	ldr	r1, [pc, #20]	; (1ba8 <system_pinmux_pin_set_config+0x28>)
    1b94:	468c      	mov	ip, r1
    1b96:	4460      	add	r0, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));

	_system_pinmux_config(port, pin_mask, config);
    1b98:	211f      	movs	r1, #31
    1b9a:	400b      	ands	r3, r1
    1b9c:	391e      	subs	r1, #30
    1b9e:	4099      	lsls	r1, r3
    1ba0:	4b02      	ldr	r3, [pc, #8]	; (1bac <system_pinmux_pin_set_config+0x2c>)
    1ba2:	4798      	blx	r3
}
    1ba4:	bd10      	pop	{r4, pc}
    1ba6:	46c0      	nop			; (mov r8, r8)
    1ba8:	41004400 	.word	0x41004400
    1bac:	00001ad9 	.word	0x00001ad9

00001bb0 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1bb0:	4770      	bx	lr
    1bb2:	46c0      	nop			; (mov r8, r8)

00001bb4 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1bb4:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1bb6:	4b05      	ldr	r3, [pc, #20]	; (1bcc <system_init+0x18>)
    1bb8:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1bba:	4b05      	ldr	r3, [pc, #20]	; (1bd0 <system_init+0x1c>)
    1bbc:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1bbe:	4b05      	ldr	r3, [pc, #20]	; (1bd4 <system_init+0x20>)
    1bc0:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1bc2:	4b05      	ldr	r3, [pc, #20]	; (1bd8 <system_init+0x24>)
    1bc4:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1bc6:	4b05      	ldr	r3, [pc, #20]	; (1bdc <system_init+0x28>)
    1bc8:	4798      	blx	r3
}
    1bca:	bd10      	pop	{r4, pc}
    1bcc:	00001679 	.word	0x00001679
    1bd0:	000001f1 	.word	0x000001f1
    1bd4:	00001bb1 	.word	0x00001bb1
    1bd8:	000003ad 	.word	0x000003ad
    1bdc:	00001bb1 	.word	0x00001bb1

00001be0 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    1be0:	1c93      	adds	r3, r2, #2
    1be2:	009b      	lsls	r3, r3, #2
    1be4:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    1be6:	2a02      	cmp	r2, #2
    1be8:	d104      	bne.n	1bf4 <tc_register_callback+0x14>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    1bea:	7e02      	ldrb	r2, [r0, #24]
    1bec:	2310      	movs	r3, #16
    1bee:	4313      	orrs	r3, r2
    1bf0:	7603      	strb	r3, [r0, #24]
    1bf2:	e00b      	b.n	1c0c <tc_register_callback+0x2c>
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    1bf4:	2a03      	cmp	r2, #3
    1bf6:	d104      	bne.n	1c02 <tc_register_callback+0x22>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    1bf8:	7e02      	ldrb	r2, [r0, #24]
    1bfa:	2320      	movs	r3, #32
    1bfc:	4313      	orrs	r3, r2
    1bfe:	7603      	strb	r3, [r0, #24]
    1c00:	e004      	b.n	1c0c <tc_register_callback+0x2c>
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    1c02:	2301      	movs	r3, #1
    1c04:	4093      	lsls	r3, r2
    1c06:	7e02      	ldrb	r2, [r0, #24]
    1c08:	4313      	orrs	r3, r2
    1c0a:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    1c0c:	2000      	movs	r0, #0
    1c0e:	4770      	bx	lr

00001c10 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    1c10:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    1c12:	0080      	lsls	r0, r0, #2
    1c14:	4b14      	ldr	r3, [pc, #80]	; (1c68 <_tc_interrupt_handler+0x58>)
    1c16:	58c5      	ldr	r5, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    1c18:	682b      	ldr	r3, [r5, #0]
    1c1a:	7b9c      	ldrb	r4, [r3, #14]
    1c1c:	7e2b      	ldrb	r3, [r5, #24]
    1c1e:	401c      	ands	r4, r3
    1c20:	7e6b      	ldrb	r3, [r5, #25]
    1c22:	401c      	ands	r4, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    1c24:	07e3      	lsls	r3, r4, #31
    1c26:	d505      	bpl.n	1c34 <_tc_interrupt_handler+0x24>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    1c28:	0028      	movs	r0, r5
    1c2a:	68ab      	ldr	r3, [r5, #8]
    1c2c:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    1c2e:	2301      	movs	r3, #1
    1c30:	682a      	ldr	r2, [r5, #0]
    1c32:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    1c34:	07a3      	lsls	r3, r4, #30
    1c36:	d505      	bpl.n	1c44 <_tc_interrupt_handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    1c38:	0028      	movs	r0, r5
    1c3a:	68eb      	ldr	r3, [r5, #12]
    1c3c:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    1c3e:	2302      	movs	r3, #2
    1c40:	682a      	ldr	r2, [r5, #0]
    1c42:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    1c44:	06e3      	lsls	r3, r4, #27
    1c46:	d505      	bpl.n	1c54 <_tc_interrupt_handler+0x44>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    1c48:	0028      	movs	r0, r5
    1c4a:	692b      	ldr	r3, [r5, #16]
    1c4c:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    1c4e:	2310      	movs	r3, #16
    1c50:	682a      	ldr	r2, [r5, #0]
    1c52:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    1c54:	06a3      	lsls	r3, r4, #26
    1c56:	d505      	bpl.n	1c64 <_tc_interrupt_handler+0x54>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    1c58:	0028      	movs	r0, r5
    1c5a:	696b      	ldr	r3, [r5, #20]
    1c5c:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    1c5e:	682b      	ldr	r3, [r5, #0]
    1c60:	2220      	movs	r2, #32
    1c62:	739a      	strb	r2, [r3, #14]
	}
}
    1c64:	bd70      	pop	{r4, r5, r6, pc}
    1c66:	46c0      	nop			; (mov r8, r8)
    1c68:	20000870 	.word	0x20000870

00001c6c <TC3_Handler>:
#if (SAML21E) || (SAML21G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    1c6c:	b510      	push	{r4, lr}
    1c6e:	2000      	movs	r0, #0
    1c70:	4b01      	ldr	r3, [pc, #4]	; (1c78 <TC3_Handler+0xc>)
    1c72:	4798      	blx	r3
    1c74:	bd10      	pop	{r4, pc}
    1c76:	46c0      	nop			; (mov r8, r8)
    1c78:	00001c11 	.word	0x00001c11

00001c7c <TC4_Handler>:
    1c7c:	b510      	push	{r4, lr}
    1c7e:	2001      	movs	r0, #1
    1c80:	4b01      	ldr	r3, [pc, #4]	; (1c88 <TC4_Handler+0xc>)
    1c82:	4798      	blx	r3
    1c84:	bd10      	pop	{r4, pc}
    1c86:	46c0      	nop			; (mov r8, r8)
    1c88:	00001c11 	.word	0x00001c11

00001c8c <TC5_Handler>:
    1c8c:	b510      	push	{r4, lr}
    1c8e:	2002      	movs	r0, #2
    1c90:	4b01      	ldr	r3, [pc, #4]	; (1c98 <TC5_Handler+0xc>)
    1c92:	4798      	blx	r3
    1c94:	bd10      	pop	{r4, pc}
    1c96:	46c0      	nop			; (mov r8, r8)
    1c98:	00001c11 	.word	0x00001c11

00001c9c <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    1c9c:	b530      	push	{r4, r5, lr}
    1c9e:	b085      	sub	sp, #20
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    1ca0:	aa01      	add	r2, sp, #4
    1ca2:	4b0b      	ldr	r3, [pc, #44]	; (1cd0 <_tc_get_inst_index+0x34>)
    1ca4:	cb32      	ldmia	r3!, {r1, r4, r5}
    1ca6:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    1ca8:	9b01      	ldr	r3, [sp, #4]
    1caa:	4298      	cmp	r0, r3
    1cac:	d00a      	beq.n	1cc4 <_tc_get_inst_index+0x28>
    1cae:	9b02      	ldr	r3, [sp, #8]
    1cb0:	4298      	cmp	r0, r3
    1cb2:	d005      	beq.n	1cc0 <_tc_get_inst_index+0x24>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    1cb4:	2300      	movs	r3, #0
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    1cb6:	9a03      	ldr	r2, [sp, #12]
    1cb8:	4282      	cmp	r2, r0
    1cba:	d105      	bne.n	1cc8 <_tc_get_inst_index+0x2c>
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1cbc:	3302      	adds	r3, #2
    1cbe:	e002      	b.n	1cc6 <_tc_get_inst_index+0x2a>
    1cc0:	2301      	movs	r3, #1
    1cc2:	e000      	b.n	1cc6 <_tc_get_inst_index+0x2a>
    1cc4:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
			return i;
    1cc6:	b2db      	uxtb	r3, r3
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
    1cc8:	0018      	movs	r0, r3
    1cca:	b005      	add	sp, #20
    1ccc:	bd30      	pop	{r4, r5, pc}
    1cce:	46c0      	nop			; (mov r8, r8)
    1cd0:	0000574c 	.word	0x0000574c

00001cd4 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    1cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1cd6:	464f      	mov	r7, r9
    1cd8:	4646      	mov	r6, r8
    1cda:	b4c0      	push	{r6, r7}
    1cdc:	b087      	sub	sp, #28
    1cde:	0004      	movs	r4, r0
    1ce0:	000e      	movs	r6, r1
    1ce2:	4690      	mov	r8, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    1ce4:	0008      	movs	r0, r1
    1ce6:	4b92      	ldr	r3, [pc, #584]	; (1f30 <tc_init+0x25c>)
    1ce8:	4798      	blx	r3
    1cea:	4681      	mov	r9, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    1cec:	4d91      	ldr	r5, [pc, #580]	; (1f34 <tc_init+0x260>)
    1cee:	0029      	movs	r1, r5
    1cf0:	310c      	adds	r1, #12
    1cf2:	2203      	movs	r2, #3
    1cf4:	a805      	add	r0, sp, #20
    1cf6:	4f90      	ldr	r7, [pc, #576]	; (1f38 <tc_init+0x264>)
    1cf8:	47b8      	blx	r7
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    1cfa:	0029      	movs	r1, r5
    1cfc:	3110      	adds	r1, #16
    1cfe:	2206      	movs	r2, #6
    1d00:	a803      	add	r0, sp, #12
    1d02:	47b8      	blx	r7
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    1d04:	2300      	movs	r3, #0
    1d06:	60a3      	str	r3, [r4, #8]
    1d08:	60e3      	str	r3, [r4, #12]
    1d0a:	6123      	str	r3, [r4, #16]
    1d0c:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    1d0e:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    1d10:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    1d12:	464b      	mov	r3, r9
    1d14:	009a      	lsls	r2, r3, #2
    1d16:	4b89      	ldr	r3, [pc, #548]	; (1f3c <tc_init+0x268>)
    1d18:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    1d1a:	6026      	str	r6, [r4, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    1d1c:	4643      	mov	r3, r8
    1d1e:	789b      	ldrb	r3, [r3, #2]
    1d20:	2b08      	cmp	r3, #8
    1d22:	d104      	bne.n	1d2e <tc_init+0x5a>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1d24:	2017      	movs	r0, #23
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    1d26:	464a      	mov	r2, r9
    1d28:	07d2      	lsls	r2, r2, #31
    1d2a:	d400      	bmi.n	1d2e <tc_init+0x5a>
    1d2c:	e0fb      	b.n	1f26 <tc_init+0x252>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    1d2e:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    1d30:	8833      	ldrh	r3, [r6, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    1d32:	2005      	movs	r0, #5
	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    1d34:	07db      	lsls	r3, r3, #31
    1d36:	d500      	bpl.n	1d3a <tc_init+0x66>
    1d38:	e0f5      	b.n	1f26 <tc_init+0x252>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    1d3a:	7bf3      	ldrb	r3, [r6, #15]
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
    1d3c:	3017      	adds	r0, #23
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    1d3e:	06db      	lsls	r3, r3, #27
    1d40:	d500      	bpl.n	1d44 <tc_init+0x70>
    1d42:	e0f0      	b.n	1f26 <tc_init+0x252>
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    1d44:	8833      	ldrh	r3, [r6, #0]
    1d46:	079b      	lsls	r3, r3, #30
    1d48:	d500      	bpl.n	1d4c <tc_init+0x78>
    1d4a:	e0ec      	b.n	1f26 <tc_init+0x252>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
    1d4c:	4643      	mov	r3, r8
    1d4e:	7c1b      	ldrb	r3, [r3, #16]
    1d50:	2b00      	cmp	r3, #0
    1d52:	d00c      	beq.n	1d6e <tc_init+0x9a>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1d54:	a902      	add	r1, sp, #8
    1d56:	2301      	movs	r3, #1
    1d58:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    1d5a:	2200      	movs	r2, #0
    1d5c:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    1d5e:	4642      	mov	r2, r8
    1d60:	7e12      	ldrb	r2, [r2, #24]
    1d62:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1d64:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    1d66:	4643      	mov	r3, r8
    1d68:	7d18      	ldrb	r0, [r3, #20]
    1d6a:	4b75      	ldr	r3, [pc, #468]	; (1f40 <tc_init+0x26c>)
    1d6c:	4798      	blx	r3
				config->pwm_channel[0].pin_out, &pin_config);
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
    1d6e:	4643      	mov	r3, r8
    1d70:	7f1b      	ldrb	r3, [r3, #28]
    1d72:	2b00      	cmp	r3, #0
    1d74:	d00d      	beq.n	1d92 <tc_init+0xbe>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1d76:	a902      	add	r1, sp, #8
    1d78:	2301      	movs	r3, #1
    1d7a:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    1d7c:	2200      	movs	r2, #0
    1d7e:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    1d80:	4642      	mov	r2, r8
    1d82:	6a52      	ldr	r2, [r2, #36]	; 0x24
    1d84:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1d86:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    1d88:	4643      	mov	r3, r8
    1d8a:	6a1b      	ldr	r3, [r3, #32]
    1d8c:	b2d8      	uxtb	r0, r3
    1d8e:	4b6c      	ldr	r3, [pc, #432]	; (1f40 <tc_init+0x26c>)
    1d90:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    1d92:	496c      	ldr	r1, [pc, #432]	; (1f44 <tc_init+0x270>)
    1d94:	6a0b      	ldr	r3, [r1, #32]
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			inst_pm_apbmask[instance]);
    1d96:	464a      	mov	r2, r9
    1d98:	0052      	lsls	r2, r2, #1
    1d9a:	a803      	add	r0, sp, #12
    1d9c:	5a12      	ldrh	r2, [r2, r0]
    1d9e:	4313      	orrs	r3, r2
    1da0:	620b      	str	r3, [r1, #32]

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    1da2:	4643      	mov	r3, r8
    1da4:	789b      	ldrb	r3, [r3, #2]
    1da6:	2b08      	cmp	r3, #8
    1da8:	d106      	bne.n	1db8 <tc_init+0xe4>
    1daa:	6a0b      	ldr	r3, [r1, #32]
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
				inst_pm_apbmask[instance + 1]);
    1dac:	464a      	mov	r2, r9
    1dae:	3201      	adds	r2, #1
    1db0:	0052      	lsls	r2, r2, #1
    1db2:	5a12      	ldrh	r2, [r2, r0]
    1db4:	4313      	orrs	r3, r2
    1db6:	620b      	str	r3, [r1, #32]
	}

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = config->clock_source;
    1db8:	a901      	add	r1, sp, #4
    1dba:	4643      	mov	r3, r8
    1dbc:	781b      	ldrb	r3, [r3, #0]
    1dbe:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    1dc0:	ab05      	add	r3, sp, #20
    1dc2:	464a      	mov	r2, r9
    1dc4:	5c9d      	ldrb	r5, [r3, r2]
    1dc6:	0028      	movs	r0, r5
    1dc8:	4b5f      	ldr	r3, [pc, #380]	; (1f48 <tc_init+0x274>)
    1dca:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    1dcc:	0028      	movs	r0, r5
    1dce:	4b5f      	ldr	r3, [pc, #380]	; (1f4c <tc_init+0x278>)
    1dd0:	4798      	blx	r3

	/* Set ctrla register */
	ctrla_tmp =
    1dd2:	4643      	mov	r3, r8
    1dd4:	7898      	ldrb	r0, [r3, #2]
    1dd6:	799b      	ldrb	r3, [r3, #6]
    1dd8:	0002      	movs	r2, r0
    1dda:	431a      	orrs	r2, r3
    1ddc:	4643      	mov	r3, r8
    1dde:	8918      	ldrh	r0, [r3, #8]
    1de0:	889b      	ldrh	r3, [r3, #4]
    1de2:	4303      	orrs	r3, r0
    1de4:	431a      	orrs	r2, r3
    1de6:	0010      	movs	r0, r2
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;

	if (config->run_in_standby) {
    1de8:	4643      	mov	r3, r8
    1dea:	785b      	ldrb	r3, [r3, #1]
    1dec:	2b00      	cmp	r3, #0
    1dee:	d002      	beq.n	1df6 <tc_init+0x122>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    1df0:	2380      	movs	r3, #128	; 0x80
    1df2:	011b      	lsls	r3, r3, #4
    1df4:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1df6:	6821      	ldr	r1, [r4, #0]
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    1df8:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1dfa:	7bcb      	ldrb	r3, [r1, #15]
    1dfc:	4393      	bics	r3, r2
    1dfe:	d1fc      	bne.n	1dfa <tc_init+0x126>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    1e00:	8030      	strh	r0, [r6, #0]

	/* Set ctrlb register */
	if (config->oneshot) {
    1e02:	4643      	mov	r3, r8
    1e04:	7b58      	ldrb	r0, [r3, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    1e06:	1e43      	subs	r3, r0, #1
    1e08:	4198      	sbcs	r0, r3
    1e0a:	0080      	lsls	r0, r0, #2
	}

	if (config->count_direction) {
    1e0c:	4643      	mov	r3, r8
    1e0e:	7b9b      	ldrb	r3, [r3, #14]
    1e10:	2b00      	cmp	r3, #0
    1e12:	d001      	beq.n	1e18 <tc_init+0x144>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    1e14:	2301      	movs	r3, #1
    1e16:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1e18:	6821      	ldr	r1, [r4, #0]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
    1e1a:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1e1c:	7bcb      	ldrb	r3, [r1, #15]
    1e1e:	4393      	bics	r3, r2
    1e20:	d1fc      	bne.n	1e1c <tc_init+0x148>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    1e22:	33ff      	adds	r3, #255	; 0xff
    1e24:	7133      	strb	r3, [r6, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
    1e26:	2800      	cmp	r0, #0
    1e28:	d005      	beq.n	1e36 <tc_init+0x162>
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1e2a:	6821      	ldr	r1, [r4, #0]
		while (tc_is_syncing(module_inst)) {
    1e2c:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1e2e:	7bcb      	ldrb	r3, [r1, #15]
    1e30:	4393      	bics	r3, r2
    1e32:	d1fc      	bne.n	1e2e <tc_init+0x15a>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    1e34:	7170      	strb	r0, [r6, #5]
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
    1e36:	4643      	mov	r3, r8
    1e38:	7a98      	ldrb	r0, [r3, #10]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
    1e3a:	7adb      	ldrb	r3, [r3, #11]
    1e3c:	2b00      	cmp	r3, #0
    1e3e:	d001      	beq.n	1e44 <tc_init+0x170>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    1e40:	2310      	movs	r3, #16
    1e42:	4318      	orrs	r0, r3
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
    1e44:	4643      	mov	r3, r8
    1e46:	7b1b      	ldrb	r3, [r3, #12]
    1e48:	2b00      	cmp	r3, #0
    1e4a:	d001      	beq.n	1e50 <tc_init+0x17c>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    1e4c:	2320      	movs	r3, #32
    1e4e:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1e50:	6821      	ldr	r1, [r4, #0]
		}
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    1e52:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1e54:	7bcb      	ldrb	r3, [r1, #15]
    1e56:	4393      	bics	r3, r2
    1e58:	d1fc      	bne.n	1e54 <tc_init+0x180>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    1e5a:	71b0      	strb	r0, [r6, #6]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1e5c:	6822      	ldr	r2, [r4, #0]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    1e5e:	217f      	movs	r1, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1e60:	7bd3      	ldrb	r3, [r2, #15]
    1e62:	438b      	bics	r3, r1
    1e64:	d1fc      	bne.n	1e60 <tc_init+0x18c>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    1e66:	7923      	ldrb	r3, [r4, #4]
    1e68:	2b04      	cmp	r3, #4
    1e6a:	d005      	beq.n	1e78 <tc_init+0x1a4>
    1e6c:	2b08      	cmp	r3, #8
    1e6e:	d041      	beq.n	1ef4 <tc_init+0x220>

			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
    1e70:	2017      	movs	r0, #23
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    1e72:	2b00      	cmp	r3, #0
    1e74:	d157      	bne.n	1f26 <tc_init+0x252>
    1e76:	e024      	b.n	1ec2 <tc_init+0x1ee>
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
    1e78:	217f      	movs	r1, #127	; 0x7f
    1e7a:	7bd3      	ldrb	r3, [r2, #15]
    1e7c:	438b      	bics	r3, r1
    1e7e:	d1fc      	bne.n	1e7a <tc_init+0x1a6>
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
					config->counter_8_bit.value;
    1e80:	3328      	adds	r3, #40	; 0x28
    1e82:	4642      	mov	r2, r8
    1e84:	5cd3      	ldrb	r3, [r2, r3]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
    1e86:	7433      	strb	r3, [r6, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1e88:	6821      	ldr	r1, [r4, #0]
					config->counter_8_bit.value;


			while (tc_is_syncing(module_inst)) {
    1e8a:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1e8c:	7bcb      	ldrb	r3, [r1, #15]
    1e8e:	4393      	bics	r3, r2
    1e90:	d1fc      	bne.n	1e8c <tc_init+0x1b8>
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
					config->counter_8_bit.period;
    1e92:	3329      	adds	r3, #41	; 0x29
    1e94:	4642      	mov	r2, r8
    1e96:	5cd3      	ldrb	r3, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
    1e98:	7533      	strb	r3, [r6, #20]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1e9a:	6821      	ldr	r1, [r4, #0]
					config->counter_8_bit.period;

			while (tc_is_syncing(module_inst)) {
    1e9c:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1e9e:	7bcb      	ldrb	r3, [r1, #15]
    1ea0:	4393      	bics	r3, r2
    1ea2:	d1fc      	bne.n	1e9e <tc_init+0x1ca>
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
					config->counter_8_bit.compare_capture_channel[0];
    1ea4:	332a      	adds	r3, #42	; 0x2a
    1ea6:	4642      	mov	r2, r8
    1ea8:	5cd3      	ldrb	r3, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
    1eaa:	7633      	strb	r3, [r6, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1eac:	6821      	ldr	r1, [r4, #0]
					config->counter_8_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    1eae:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1eb0:	7bcb      	ldrb	r3, [r1, #15]
    1eb2:	4393      	bics	r3, r2
    1eb4:	d1fc      	bne.n	1eb0 <tc_init+0x1dc>
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
					config->counter_8_bit.compare_capture_channel[1];
    1eb6:	332b      	adds	r3, #43	; 0x2b
    1eb8:	4642      	mov	r2, r8
    1eba:	5cd3      	ldrb	r3, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
    1ebc:	7673      	strb	r3, [r6, #25]
					config->counter_8_bit.compare_capture_channel[1];

			return STATUS_OK;
    1ebe:	2000      	movs	r0, #0
    1ec0:	e031      	b.n	1f26 <tc_init+0x252>

		case TC_COUNTER_SIZE_16BIT:
			while (tc_is_syncing(module_inst)) {
    1ec2:	217f      	movs	r1, #127	; 0x7f
    1ec4:	7bd3      	ldrb	r3, [r2, #15]
    1ec6:	438b      	bics	r3, r1
    1ec8:	d1fc      	bne.n	1ec4 <tc_init+0x1f0>
				/* Wait for sync */
			}

			hw->COUNT16.COUNT.reg
				= config->counter_16_bit.value;
    1eca:	4643      	mov	r3, r8
    1ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    1ece:	8233      	strh	r3, [r6, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1ed0:	6821      	ldr	r1, [r4, #0]

			while (tc_is_syncing(module_inst)) {
    1ed2:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1ed4:	7bcb      	ldrb	r3, [r1, #15]
    1ed6:	4393      	bics	r3, r2
    1ed8:	d1fc      	bne.n	1ed4 <tc_init+0x200>
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
					config->counter_16_bit.compare_capture_channel[0];
    1eda:	4643      	mov	r3, r8
    1edc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
    1ede:	8333      	strh	r3, [r6, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1ee0:	6821      	ldr	r1, [r4, #0]
					config->counter_16_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    1ee2:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1ee4:	7bcb      	ldrb	r3, [r1, #15]
    1ee6:	4393      	bics	r3, r2
    1ee8:	d1fc      	bne.n	1ee4 <tc_init+0x210>
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
					config->counter_16_bit.compare_capture_channel[1];
    1eea:	4643      	mov	r3, r8
    1eec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
    1eee:	8373      	strh	r3, [r6, #26]
					config->counter_16_bit.compare_capture_channel[1];

			return STATUS_OK;
    1ef0:	2000      	movs	r0, #0
    1ef2:	e018      	b.n	1f26 <tc_init+0x252>

		case TC_COUNTER_SIZE_32BIT:
			while (tc_is_syncing(module_inst)) {
    1ef4:	217f      	movs	r1, #127	; 0x7f
    1ef6:	7bd3      	ldrb	r3, [r2, #15]
    1ef8:	438b      	bics	r3, r1
    1efa:	d1fc      	bne.n	1ef6 <tc_init+0x222>
				/* Wait for sync */
			}

			hw->COUNT32.COUNT.reg
				= config->counter_32_bit.value;
    1efc:	4643      	mov	r3, r8
    1efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1f00:	6133      	str	r3, [r6, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1f02:	6821      	ldr	r1, [r4, #0]

			while (tc_is_syncing(module_inst)) {
    1f04:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1f06:	7bcb      	ldrb	r3, [r1, #15]
    1f08:	4393      	bics	r3, r2
    1f0a:	d1fc      	bne.n	1f06 <tc_init+0x232>
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
    1f0c:	4643      	mov	r3, r8
    1f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1f10:	61b3      	str	r3, [r6, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1f12:	6821      	ldr	r1, [r4, #0]
					config->counter_32_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    1f14:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1f16:	7bcb      	ldrb	r3, [r1, #15]
    1f18:	4393      	bics	r3, r2
    1f1a:	d1fc      	bne.n	1f16 <tc_init+0x242>
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
					config->counter_32_bit.compare_capture_channel[1];
    1f1c:	4643      	mov	r3, r8
    1f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
    1f20:	61f3      	str	r3, [r6, #28]
					config->counter_32_bit.compare_capture_channel[1];

			return STATUS_OK;
    1f22:	2000      	movs	r0, #0
    1f24:	e7ff      	b.n	1f26 <tc_init+0x252>
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    1f26:	b007      	add	sp, #28
    1f28:	bc0c      	pop	{r2, r3}
    1f2a:	4690      	mov	r8, r2
    1f2c:	4699      	mov	r9, r3
    1f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f30:	00001c9d 	.word	0x00001c9d
    1f34:	0000574c 	.word	0x0000574c
    1f38:	00004b9d 	.word	0x00004b9d
    1f3c:	20000870 	.word	0x20000870
    1f40:	00001b81 	.word	0x00001b81
    1f44:	40000400 	.word	0x40000400
    1f48:	00001a89 	.word	0x00001a89
    1f4c:	000019fd 	.word	0x000019fd

00001f50 <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    1f50:	6802      	ldr	r2, [r0, #0]

	while (tc_is_syncing(module_inst)) {
    1f52:	217f      	movs	r1, #127	; 0x7f
    1f54:	7bd3      	ldrb	r3, [r2, #15]
    1f56:	438b      	bics	r3, r1
    1f58:	d1fc      	bne.n	1f54 <tc_get_count_value+0x4>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    1f5a:	7903      	ldrb	r3, [r0, #4]
    1f5c:	2b04      	cmp	r3, #4
    1f5e:	d005      	beq.n	1f6c <tc_get_count_value+0x1c>
    1f60:	2b08      	cmp	r3, #8
    1f62:	d009      	beq.n	1f78 <tc_get_count_value+0x28>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
    1f64:	2000      	movs	r0, #0
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    1f66:	2b00      	cmp	r3, #0
    1f68:	d108      	bne.n	1f7c <tc_get_count_value+0x2c>
    1f6a:	e002      	b.n	1f72 <tc_get_count_value+0x22>
		case TC_COUNTER_SIZE_8BIT:
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    1f6c:	7c10      	ldrb	r0, [r2, #16]
    1f6e:	b2c0      	uxtb	r0, r0
    1f70:	e004      	b.n	1f7c <tc_get_count_value+0x2c>

		case TC_COUNTER_SIZE_16BIT:
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    1f72:	8a10      	ldrh	r0, [r2, #16]
    1f74:	b280      	uxth	r0, r0
    1f76:	e001      	b.n	1f7c <tc_get_count_value+0x2c>

		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
    1f78:	6910      	ldr	r0, [r2, #16]
    1f7a:	e7ff      	b.n	1f7c <tc_get_count_value+0x2c>
	}

	Assert(false);
	return 0;
}
    1f7c:	4770      	bx	lr
    1f7e:	46c0      	nop			; (mov r8, r8)

00001f80 <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    1f80:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    1f82:	6804      	ldr	r4, [r0, #0]

	while (tc_is_syncing(module_inst)) {
    1f84:	257f      	movs	r5, #127	; 0x7f
    1f86:	7be3      	ldrb	r3, [r4, #15]
    1f88:	43ab      	bics	r3, r5
    1f8a:	d1fc      	bne.n	1f86 <tc_set_compare_value+0x6>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    1f8c:	7903      	ldrb	r3, [r0, #4]
    1f8e:	2b04      	cmp	r3, #4
    1f90:	d005      	beq.n	1f9e <tc_set_compare_value+0x1e>
    1f92:	2b08      	cmp	r3, #8
    1f94:	d014      	beq.n	1fc0 <tc_set_compare_value+0x40>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    1f96:	2017      	movs	r0, #23
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    1f98:	2b00      	cmp	r3, #0
    1f9a:	d119      	bne.n	1fd0 <tc_set_compare_value+0x50>
    1f9c:	e007      	b.n	1fae <tc_set_compare_value+0x2e>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    1f9e:	2017      	movs	r0, #23
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
		case TC_COUNTER_SIZE_8BIT:
			if (channel_index <
    1fa0:	2901      	cmp	r1, #1
    1fa2:	d815      	bhi.n	1fd0 <tc_set_compare_value+0x50>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT8.CC[channel_index].reg  =
						(uint8_t)compare;
    1fa4:	b2d2      	uxtb	r2, r2
	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
		case TC_COUNTER_SIZE_8BIT:
			if (channel_index <
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT8.CC[channel_index].reg  =
    1fa6:	1861      	adds	r1, r4, r1
    1fa8:	760a      	strb	r2, [r1, #24]
						(uint8_t)compare;
				return STATUS_OK;
    1faa:	2000      	movs	r0, #0
    1fac:	e010      	b.n	1fd0 <tc_set_compare_value+0x50>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    1fae:	2017      	movs	r0, #23
						(uint8_t)compare;
				return STATUS_OK;
			}

		case TC_COUNTER_SIZE_16BIT:
			if (channel_index <
    1fb0:	2901      	cmp	r1, #1
    1fb2:	d80d      	bhi.n	1fd0 <tc_set_compare_value+0x50>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT16.CC[channel_index].reg =
						(uint16_t)compare;
    1fb4:	b292      	uxth	r2, r2
			}

		case TC_COUNTER_SIZE_16BIT:
			if (channel_index <
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT16.CC[channel_index].reg =
    1fb6:	310c      	adds	r1, #12
    1fb8:	0049      	lsls	r1, r1, #1
    1fba:	530a      	strh	r2, [r1, r4]
						(uint16_t)compare;
				return STATUS_OK;
    1fbc:	2000      	movs	r0, #0
    1fbe:	e007      	b.n	1fd0 <tc_set_compare_value+0x50>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    1fc0:	2017      	movs	r0, #23
						(uint16_t)compare;
				return STATUS_OK;
			}

		case TC_COUNTER_SIZE_32BIT:
			if (channel_index <
    1fc2:	2901      	cmp	r1, #1
    1fc4:	d804      	bhi.n	1fd0 <tc_set_compare_value+0x50>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT32.CC[channel_index].reg =
    1fc6:	3106      	adds	r1, #6
    1fc8:	0089      	lsls	r1, r1, #2
    1fca:	510a      	str	r2, [r1, r4]
						(uint32_t)compare;
				return STATUS_OK;
    1fcc:	2000      	movs	r0, #0
    1fce:	e7ff      	b.n	1fd0 <tc_set_compare_value+0x50>
			}
	}

	return STATUS_ERR_INVALID_ARG;
}
    1fd0:	bd30      	pop	{r4, r5, pc}
    1fd2:	46c0      	nop			; (mov r8, r8)

00001fd4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1fd4:	e7fe      	b.n	1fd4 <Dummy_Handler>
    1fd6:	46c0      	nop			; (mov r8, r8)

00001fd8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    1fd8:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    1fda:	4b2e      	ldr	r3, [pc, #184]	; (2094 <STACK_SIZE+0x94>)
    1fdc:	4a2e      	ldr	r2, [pc, #184]	; (2098 <STACK_SIZE+0x98>)
    1fde:	429a      	cmp	r2, r3
    1fe0:	d003      	beq.n	1fea <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    1fe2:	4b2e      	ldr	r3, [pc, #184]	; (209c <STACK_SIZE+0x9c>)
    1fe4:	4a2b      	ldr	r2, [pc, #172]	; (2094 <STACK_SIZE+0x94>)
    1fe6:	429a      	cmp	r2, r3
    1fe8:	d304      	bcc.n	1ff4 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1fea:	4b2d      	ldr	r3, [pc, #180]	; (20a0 <STACK_SIZE+0xa0>)
    1fec:	4a2d      	ldr	r2, [pc, #180]	; (20a4 <STACK_SIZE+0xa4>)
    1fee:	429a      	cmp	r2, r3
    1ff0:	d310      	bcc.n	2014 <STACK_SIZE+0x14>
    1ff2:	e01e      	b.n	2032 <STACK_SIZE+0x32>
    1ff4:	4a2c      	ldr	r2, [pc, #176]	; (20a8 <STACK_SIZE+0xa8>)
    1ff6:	4b29      	ldr	r3, [pc, #164]	; (209c <STACK_SIZE+0x9c>)
    1ff8:	3303      	adds	r3, #3
    1ffa:	1a9b      	subs	r3, r3, r2
    1ffc:	089b      	lsrs	r3, r3, #2
    1ffe:	3301      	adds	r3, #1
    2000:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    2002:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    2004:	4823      	ldr	r0, [pc, #140]	; (2094 <STACK_SIZE+0x94>)
    2006:	4924      	ldr	r1, [pc, #144]	; (2098 <STACK_SIZE+0x98>)
    2008:	588c      	ldr	r4, [r1, r2]
    200a:	5084      	str	r4, [r0, r2]
    200c:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    200e:	429a      	cmp	r2, r3
    2010:	d1fa      	bne.n	2008 <STACK_SIZE+0x8>
    2012:	e7ea      	b.n	1fea <Reset_Handler+0x12>
    2014:	4a25      	ldr	r2, [pc, #148]	; (20ac <STACK_SIZE+0xac>)
    2016:	4b22      	ldr	r3, [pc, #136]	; (20a0 <STACK_SIZE+0xa0>)
    2018:	3303      	adds	r3, #3
    201a:	1a9b      	subs	r3, r3, r2
    201c:	089b      	lsrs	r3, r3, #2
    201e:	3301      	adds	r3, #1
    2020:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    2022:	2200      	movs	r2, #0
                *pDest++ = 0;
    2024:	481f      	ldr	r0, [pc, #124]	; (20a4 <STACK_SIZE+0xa4>)
    2026:	2100      	movs	r1, #0
    2028:	1814      	adds	r4, r2, r0
    202a:	6021      	str	r1, [r4, #0]
    202c:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    202e:	429a      	cmp	r2, r3
    2030:	d1fa      	bne.n	2028 <STACK_SIZE+0x28>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2032:	4a1f      	ldr	r2, [pc, #124]	; (20b0 <STACK_SIZE+0xb0>)
    2034:	21ff      	movs	r1, #255	; 0xff
    2036:	4b1f      	ldr	r3, [pc, #124]	; (20b4 <STACK_SIZE+0xb4>)
    2038:	438b      	bics	r3, r1
    203a:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    203c:	39fd      	subs	r1, #253	; 0xfd
    203e:	2390      	movs	r3, #144	; 0x90
    2040:	005b      	lsls	r3, r3, #1
    2042:	4a1d      	ldr	r2, [pc, #116]	; (20b8 <STACK_SIZE+0xb8>)
    2044:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    2046:	481d      	ldr	r0, [pc, #116]	; (20bc <STACK_SIZE+0xbc>)
    2048:	78c3      	ldrb	r3, [r0, #3]
    204a:	2403      	movs	r4, #3
    204c:	43a3      	bics	r3, r4
    204e:	2202      	movs	r2, #2
    2050:	4313      	orrs	r3, r2
    2052:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    2054:	78c3      	ldrb	r3, [r0, #3]
    2056:	260c      	movs	r6, #12
    2058:	43b3      	bics	r3, r6
    205a:	2108      	movs	r1, #8
    205c:	430b      	orrs	r3, r1
    205e:	70c3      	strb	r3, [r0, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    2060:	4b17      	ldr	r3, [pc, #92]	; (20c0 <STACK_SIZE+0xc0>)
    2062:	7b98      	ldrb	r0, [r3, #14]
    2064:	2530      	movs	r5, #48	; 0x30
    2066:	43a8      	bics	r0, r5
    2068:	0005      	movs	r5, r0
    206a:	2020      	movs	r0, #32
    206c:	4328      	orrs	r0, r5
    206e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    2070:	7b98      	ldrb	r0, [r3, #14]
    2072:	43b0      	bics	r0, r6
    2074:	4301      	orrs	r1, r0
    2076:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    2078:	7b99      	ldrb	r1, [r3, #14]
    207a:	43a1      	bics	r1, r4
    207c:	430a      	orrs	r2, r1
    207e:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    2080:	4a10      	ldr	r2, [pc, #64]	; (20c4 <STACK_SIZE+0xc4>)
    2082:	6851      	ldr	r1, [r2, #4]
    2084:	2380      	movs	r3, #128	; 0x80
    2086:	430b      	orrs	r3, r1
    2088:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    208a:	4b0f      	ldr	r3, [pc, #60]	; (20c8 <STACK_SIZE+0xc8>)
    208c:	4798      	blx	r3

        /* Branch to main function */
        main();
    208e:	4b0f      	ldr	r3, [pc, #60]	; (20cc <STACK_SIZE+0xcc>)
    2090:	4798      	blx	r3
    2092:	e7fe      	b.n	2092 <STACK_SIZE+0x92>
    2094:	20000000 	.word	0x20000000
    2098:	00005824 	.word	0x00005824
    209c:	20000078 	.word	0x20000078
    20a0:	20000990 	.word	0x20000990
    20a4:	20000078 	.word	0x20000078
    20a8:	20000004 	.word	0x20000004
    20ac:	2000007c 	.word	0x2000007c
    20b0:	e000ed00 	.word	0xe000ed00
    20b4:	00000000 	.word	0x00000000
    20b8:	41007000 	.word	0x41007000
    20bc:	41005000 	.word	0x41005000
    20c0:	41004800 	.word	0x41004800
    20c4:	41004000 	.word	0x41004000
    20c8:	00004b51 	.word	0x00004b51
    20cc:	00004859 	.word	0x00004859

000020d0 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    20d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    20d2:	4647      	mov	r7, r8
    20d4:	b480      	push	{r7}
    20d6:	000c      	movs	r4, r1
    20d8:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    20da:	2800      	cmp	r0, #0
    20dc:	d10d      	bne.n	20fa <_read+0x2a>
		return -1;
	}

	for (; len > 0; --len) {
    20de:	2a00      	cmp	r2, #0
    20e0:	dd0e      	ble.n	2100 <_read+0x30>
    20e2:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    20e4:	4e08      	ldr	r6, [pc, #32]	; (2108 <_read+0x38>)
    20e6:	4d09      	ldr	r5, [pc, #36]	; (210c <_read+0x3c>)
    20e8:	6830      	ldr	r0, [r6, #0]
    20ea:	0021      	movs	r1, r4
    20ec:	682b      	ldr	r3, [r5, #0]
    20ee:	4798      	blx	r3
		ptr++;
    20f0:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
    20f2:	42a7      	cmp	r7, r4
    20f4:	d1f8      	bne.n	20e8 <_read+0x18>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
    20f6:	4640      	mov	r0, r8
    20f8:	e003      	b.n	2102 <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
    20fa:	2001      	movs	r0, #1
    20fc:	4240      	negs	r0, r0
    20fe:	e000      	b.n	2102 <_read+0x32>
	}

	for (; len > 0; --len) {
    2100:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
    2102:	bc04      	pop	{r2}
    2104:	4690      	mov	r8, r2
    2106:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2108:	20000884 	.word	0x20000884
    210c:	2000087c 	.word	0x2000087c

00002110 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    2110:	b5f0      	push	{r4, r5, r6, r7, lr}
    2112:	4647      	mov	r7, r8
    2114:	b480      	push	{r7}
    2116:	000e      	movs	r6, r1
    2118:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    211a:	3801      	subs	r0, #1
    211c:	2802      	cmp	r0, #2
    211e:	d811      	bhi.n	2144 <_write+0x34>
		return -1;
	}

	for (; len != 0; --len) {
    2120:	2a00      	cmp	r2, #0
    2122:	d012      	beq.n	214a <_write+0x3a>
    2124:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    2126:	4b0c      	ldr	r3, [pc, #48]	; (2158 <_write+0x48>)
    2128:	4698      	mov	r8, r3
    212a:	4f0c      	ldr	r7, [pc, #48]	; (215c <_write+0x4c>)
    212c:	4643      	mov	r3, r8
    212e:	6818      	ldr	r0, [r3, #0]
    2130:	5d31      	ldrb	r1, [r6, r4]
    2132:	683b      	ldr	r3, [r7, #0]
    2134:	4798      	blx	r3
    2136:	2800      	cmp	r0, #0
    2138:	db09      	blt.n	214e <_write+0x3e>
			return -1;
		}
		++nChars;
    213a:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
    213c:	42a5      	cmp	r5, r4
    213e:	d1f5      	bne.n	212c <_write+0x1c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
    2140:	0020      	movs	r0, r4
    2142:	e006      	b.n	2152 <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
    2144:	2001      	movs	r0, #1
    2146:	4240      	negs	r0, r0
    2148:	e003      	b.n	2152 <_write+0x42>
	}

	for (; len != 0; --len) {
    214a:	2000      	movs	r0, #0
    214c:	e001      	b.n	2152 <_write+0x42>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
    214e:	2001      	movs	r0, #1
    2150:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
    2152:	bc04      	pop	{r2}
    2154:	4690      	mov	r8, r2
    2156:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2158:	20000884 	.word	0x20000884
    215c:	20000880 	.word	0x20000880

00002160 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    2160:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    2162:	4a06      	ldr	r2, [pc, #24]	; (217c <_sbrk+0x1c>)
    2164:	6812      	ldr	r2, [r2, #0]
    2166:	2a00      	cmp	r2, #0
    2168:	d102      	bne.n	2170 <_sbrk+0x10>
		heap = (unsigned char *)&_end;
    216a:	4905      	ldr	r1, [pc, #20]	; (2180 <_sbrk+0x20>)
    216c:	4a03      	ldr	r2, [pc, #12]	; (217c <_sbrk+0x1c>)
    216e:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
    2170:	4a02      	ldr	r2, [pc, #8]	; (217c <_sbrk+0x1c>)
    2172:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    2174:	18c3      	adds	r3, r0, r3
    2176:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    2178:	4770      	bx	lr
    217a:	46c0      	nop			; (mov r8, r8)
    217c:	200000d0 	.word	0x200000d0
    2180:	20002990 	.word	0x20002990

00002184 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    2184:	2001      	movs	r0, #1
    2186:	4240      	negs	r0, r0
    2188:	4770      	bx	lr
    218a:	46c0      	nop			; (mov r8, r8)

0000218c <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    218c:	2380      	movs	r3, #128	; 0x80
    218e:	019b      	lsls	r3, r3, #6
    2190:	604b      	str	r3, [r1, #4]

	return 0;
}
    2192:	2000      	movs	r0, #0
    2194:	4770      	bx	lr
    2196:	46c0      	nop			; (mov r8, r8)

00002198 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    2198:	2001      	movs	r0, #1
    219a:	4770      	bx	lr

0000219c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    219c:	2000      	movs	r0, #0
    219e:	4770      	bx	lr

000021a0 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    21a0:	b570      	push	{r4, r5, r6, lr}
    21a2:	b082      	sub	sp, #8
    21a4:	0005      	movs	r5, r0
    21a6:	000e      	movs	r6, r1
	uint16_t temp = 0;
    21a8:	2200      	movs	r2, #0
    21aa:	466b      	mov	r3, sp
    21ac:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    21ae:	4c06      	ldr	r4, [pc, #24]	; (21c8 <usart_serial_getchar+0x28>)
    21b0:	466b      	mov	r3, sp
    21b2:	1d99      	adds	r1, r3, #6
    21b4:	0028      	movs	r0, r5
    21b6:	47a0      	blx	r4
    21b8:	2800      	cmp	r0, #0
    21ba:	d1f9      	bne.n	21b0 <usart_serial_getchar+0x10>

	*c = temp;
    21bc:	466b      	mov	r3, sp
    21be:	3306      	adds	r3, #6
    21c0:	881b      	ldrh	r3, [r3, #0]
    21c2:	7033      	strb	r3, [r6, #0]
}
    21c4:	b002      	add	sp, #8
    21c6:	bd70      	pop	{r4, r5, r6, pc}
    21c8:	00001091 	.word	0x00001091

000021cc <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    21cc:	b570      	push	{r4, r5, r6, lr}
    21ce:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    21d0:	b28c      	uxth	r4, r1
    21d2:	4e03      	ldr	r6, [pc, #12]	; (21e0 <usart_serial_putchar+0x14>)
    21d4:	0021      	movs	r1, r4
    21d6:	0028      	movs	r0, r5
    21d8:	47b0      	blx	r6
    21da:	2800      	cmp	r0, #0
    21dc:	d1fa      	bne.n	21d4 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
    21de:	bd70      	pop	{r4, r5, r6, pc}
    21e0:	00001065 	.word	0x00001065

000021e4 <USART_HOST_ISR_VECT>:
#if SAMD || SAMR21 || SAML21
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
    21e4:	b510      	push	{r4, lr}
    21e6:	b082      	sub	sp, #8
static inline enum status_code usart_serial_read_packet(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
	return usart_read_buffer_wait(module, rx_data, length);
    21e8:	466b      	mov	r3, sp
    21ea:	1ddc      	adds	r4, r3, #7
    21ec:	2201      	movs	r2, #1
    21ee:	0021      	movs	r1, r4
    21f0:	480f      	ldr	r0, [pc, #60]	; (2230 <USART_HOST_ISR_VECT+0x4c>)
    21f2:	4b10      	ldr	r3, [pc, #64]	; (2234 <USART_HOST_ISR_VECT+0x50>)
    21f4:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    21f6:	b672      	cpsid	i
    21f8:	f3bf 8f5f 	dmb	sy
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
    21fc:	2200      	movs	r2, #0
    21fe:	4b0e      	ldr	r3, [pc, #56]	; (2238 <USART_HOST_ISR_VECT+0x54>)
    2200:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
    2202:	4b0e      	ldr	r3, [pc, #56]	; (223c <USART_HOST_ISR_VECT+0x58>)
    2204:	781b      	ldrb	r3, [r3, #0]
    2206:	7821      	ldrb	r1, [r4, #0]
    2208:	4a0d      	ldr	r2, [pc, #52]	; (2240 <USART_HOST_ISR_VECT+0x5c>)
    220a:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
    220c:	2b9b      	cmp	r3, #155	; 0x9b
    220e:	d103      	bne.n	2218 <USART_HOST_ISR_VECT+0x34>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
    2210:	2200      	movs	r2, #0
    2212:	4b0a      	ldr	r3, [pc, #40]	; (223c <USART_HOST_ISR_VECT+0x58>)
    2214:	701a      	strb	r2, [r3, #0]
    2216:	e002      	b.n	221e <USART_HOST_ISR_VECT+0x3a>
	} else {
		serial_rx_buf_tail++;
    2218:	3301      	adds	r3, #1
    221a:	4a08      	ldr	r2, [pc, #32]	; (223c <USART_HOST_ISR_VECT+0x58>)
    221c:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
    221e:	2201      	movs	r2, #1
    2220:	4b05      	ldr	r3, [pc, #20]	; (2238 <USART_HOST_ISR_VECT+0x54>)
    2222:	701a      	strb	r2, [r3, #0]
    2224:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    2228:	b662      	cpsie	i
}
    222a:	b002      	add	sp, #8
    222c:	bd10      	pop	{r4, pc}
    222e:	46c0      	nop			; (mov r8, r8)
    2230:	20000170 	.word	0x20000170
    2234:	00001101 	.word	0x00001101
    2238:	20000008 	.word	0x20000008
    223c:	200001a4 	.word	0x200001a4
    2240:	200000d4 	.word	0x200000d4

00002244 <sio2host_init>:
static uint8_t serial_rx_count;

/* === IMPLEMENTATION ====================================================== */

void sio2host_init(void)
{
    2244:	b5f0      	push	{r4, r5, r6, r7, lr}
    2246:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    2248:	2380      	movs	r3, #128	; 0x80
    224a:	05db      	lsls	r3, r3, #23
    224c:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    224e:	2300      	movs	r3, #0
    2250:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    2252:	22ff      	movs	r2, #255	; 0xff
    2254:	4669      	mov	r1, sp
    2256:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    2258:	2200      	movs	r2, #0
    225a:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    225c:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
    225e:	2196      	movs	r1, #150	; 0x96
    2260:	0189      	lsls	r1, r1, #6
    2262:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
    2264:	2401      	movs	r4, #1
    2266:	2124      	movs	r1, #36	; 0x24
    2268:	4668      	mov	r0, sp
    226a:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    226c:	3101      	adds	r1, #1
    226e:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    2270:	3101      	adds	r1, #1
    2272:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    2274:	3101      	adds	r1, #1
    2276:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    2278:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    227a:	3105      	adds	r1, #5
    227c:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    227e:	3101      	adds	r1, #1
    2280:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    2282:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    2284:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    2286:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    2288:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    228a:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    228c:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    228e:	2313      	movs	r3, #19
    2290:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    2292:	7742      	strb	r2, [r0, #29]
#if SAMD || SAMR21 || SAML21
	struct usart_config host_uart_config;
	/* Configure USART for unit test output */
	usart_get_config_defaults(&host_uart_config);
	host_uart_config.mux_setting = HOST_SERCOM_MUX_SETTING;
    2294:	2380      	movs	r3, #128	; 0x80
    2296:	035b      	lsls	r3, r3, #13
    2298:	9303      	str	r3, [sp, #12]

	host_uart_config.pinmux_pad0 = HOST_SERCOM_PINMUX_PAD0;
    229a:	4b2e      	ldr	r3, [pc, #184]	; (2354 <sio2host_init+0x110>)
    229c:	930c      	str	r3, [sp, #48]	; 0x30
	host_uart_config.pinmux_pad1 = HOST_SERCOM_PINMUX_PAD1;
    229e:	4b2e      	ldr	r3, [pc, #184]	; (2358 <sio2host_init+0x114>)
    22a0:	930d      	str	r3, [sp, #52]	; 0x34
	host_uart_config.pinmux_pad2 = HOST_SERCOM_PINMUX_PAD2;
    22a2:	2301      	movs	r3, #1
    22a4:	425b      	negs	r3, r3
    22a6:	930e      	str	r3, [sp, #56]	; 0x38
	host_uart_config.pinmux_pad3 = HOST_SERCOM_PINMUX_PAD3;
    22a8:	930f      	str	r3, [sp, #60]	; 0x3c
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    22aa:	4d2c      	ldr	r5, [pc, #176]	; (235c <sio2host_init+0x118>)
    22ac:	4b2c      	ldr	r3, [pc, #176]	; (2360 <sio2host_init+0x11c>)
    22ae:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    22b0:	4a2c      	ldr	r2, [pc, #176]	; (2364 <sio2host_init+0x120>)
    22b2:	4b2d      	ldr	r3, [pc, #180]	; (2368 <sio2host_init+0x124>)
    22b4:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    22b6:	4a2d      	ldr	r2, [pc, #180]	; (236c <sio2host_init+0x128>)
    22b8:	4b2d      	ldr	r3, [pc, #180]	; (2370 <sio2host_init+0x12c>)
    22ba:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
    22bc:	466a      	mov	r2, sp
    22be:	492d      	ldr	r1, [pc, #180]	; (2374 <sio2host_init+0x130>)
    22c0:	0028      	movs	r0, r5
    22c2:	4b2d      	ldr	r3, [pc, #180]	; (2378 <sio2host_init+0x134>)
    22c4:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    22c6:	4f2d      	ldr	r7, [pc, #180]	; (237c <sio2host_init+0x138>)
    22c8:	683b      	ldr	r3, [r7, #0]
    22ca:	6898      	ldr	r0, [r3, #8]
    22cc:	2100      	movs	r1, #0
    22ce:	4e2c      	ldr	r6, [pc, #176]	; (2380 <sio2host_init+0x13c>)
    22d0:	47b0      	blx	r6
	setbuf(stdin, NULL);
    22d2:	683b      	ldr	r3, [r7, #0]
    22d4:	6858      	ldr	r0, [r3, #4]
    22d6:	2100      	movs	r1, #0
    22d8:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    22da:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    22dc:	0030      	movs	r0, r6
    22de:	4b29      	ldr	r3, [pc, #164]	; (2384 <sio2host_init+0x140>)
    22e0:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    22e2:	231f      	movs	r3, #31
    22e4:	4018      	ands	r0, r3
    22e6:	4084      	lsls	r4, r0
    22e8:	4b27      	ldr	r3, [pc, #156]	; (2388 <sio2host_init+0x144>)
    22ea:	601c      	str	r4, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    22ec:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    22ee:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    22f0:	2b00      	cmp	r3, #0
    22f2:	d1fc      	bne.n	22ee <sio2host_init+0xaa>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    22f4:	6832      	ldr	r2, [r6, #0]
    22f6:	3302      	adds	r3, #2
    22f8:	4313      	orrs	r3, r2
    22fa:	6033      	str	r3, [r6, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    22fc:	4b17      	ldr	r3, [pc, #92]	; (235c <sio2host_init+0x118>)
    22fe:	681b      	ldr	r3, [r3, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    2300:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    2302:	2a00      	cmp	r2, #0
    2304:	d1fc      	bne.n	2300 <sio2host_init+0xbc>
			module->receiver_enabled = true;
			break;

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    2306:	685a      	ldr	r2, [r3, #4]
    2308:	2180      	movs	r1, #128	; 0x80
    230a:	0249      	lsls	r1, r1, #9
    230c:	430a      	orrs	r2, r1
    230e:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
    2310:	2101      	movs	r1, #1
    2312:	4a12      	ldr	r2, [pc, #72]	; (235c <sio2host_init+0x118>)
    2314:	71d1      	strb	r1, [r2, #7]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    2316:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    2318:	2a00      	cmp	r2, #0
    231a:	d1fc      	bne.n	2316 <sio2host_init+0xd2>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    231c:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    231e:	2a00      	cmp	r2, #0
    2320:	d1fc      	bne.n	231c <sio2host_init+0xd8>
	_usart_wait_for_sync(module);

	switch (transceiver_type) {
		case USART_TRANSCEIVER_RX:
			/* Enable RX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
    2322:	685a      	ldr	r2, [r3, #4]
    2324:	2180      	movs	r1, #128	; 0x80
    2326:	0289      	lsls	r1, r1, #10
    2328:	430a      	orrs	r2, r1
    232a:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
    232c:	2101      	movs	r1, #1
    232e:	4a0b      	ldr	r2, [pc, #44]	; (235c <sio2host_init+0x118>)
    2330:	7191      	strb	r1, [r2, #6]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    2332:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    2334:	2a00      	cmp	r2, #0
    2336:	d1fc      	bne.n	2332 <sio2host_init+0xee>
	usart_enable_transceiver(&host_uart_module, USART_TRANSCEIVER_TX);
	usart_enable_transceiver(&host_uart_module, USART_TRANSCEIVER_RX);
#else
	stdio_serial_init(USART_HOST, &usart_serial_options);
#endif
	USART_HOST_RX_ISR_ENABLE();
    2338:	4914      	ldr	r1, [pc, #80]	; (238c <sio2host_init+0x148>)
    233a:	2000      	movs	r0, #0
    233c:	4b14      	ldr	r3, [pc, #80]	; (2390 <sio2host_init+0x14c>)
    233e:	4798      	blx	r3
    2340:	2204      	movs	r2, #4
    2342:	4b0c      	ldr	r3, [pc, #48]	; (2374 <sio2host_init+0x130>)
    2344:	759a      	strb	r2, [r3, #22]
    2346:	32fd      	adds	r2, #253	; 0xfd
    2348:	32ff      	adds	r2, #255	; 0xff
    234a:	4b0f      	ldr	r3, [pc, #60]	; (2388 <sio2host_init+0x144>)
    234c:	601a      	str	r2, [r3, #0]
}
    234e:	b011      	add	sp, #68	; 0x44
    2350:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2352:	46c0      	nop			; (mov r8, r8)
    2354:	00040003 	.word	0x00040003
    2358:	00050003 	.word	0x00050003
    235c:	20000170 	.word	0x20000170
    2360:	20000884 	.word	0x20000884
    2364:	000021cd 	.word	0x000021cd
    2368:	20000880 	.word	0x20000880
    236c:	000021a1 	.word	0x000021a1
    2370:	2000087c 	.word	0x2000087c
    2374:	42000800 	.word	0x42000800
    2378:	00000d2d 	.word	0x00000d2d
    237c:	20000074 	.word	0x20000074
    2380:	00004d11 	.word	0x00004d11
    2384:	00000905 	.word	0x00000905
    2388:	e000e100 	.word	0xe000e100
    238c:	000021e5 	.word	0x000021e5
    2390:	000008c9 	.word	0x000008c9

00002394 <NWK_Init>:

/*************************************************************************//**
*  @brief Initializes all network layer modules
*****************************************************************************/
void NWK_Init(void)
{
    2394:	b510      	push	{r4, lr}
	nwkIb.nwkSeqNum = 0;
    2396:	4a0d      	ldr	r2, [pc, #52]	; (23cc <NWK_Init+0x38>)
    2398:	2300      	movs	r3, #0
    239a:	7113      	strb	r3, [r2, #4]
	nwkIb.macSeqNum = 0;
    239c:	7153      	strb	r3, [r2, #5]
	nwkIb.addr = 0;
    239e:	8013      	strh	r3, [r2, #0]
	nwkIb.lock = 0;
    23a0:	2158      	movs	r1, #88	; 0x58
    23a2:	5253      	strh	r3, [r2, r1]
    23a4:	0013      	movs	r3, r2
    23a6:	3240      	adds	r2, #64	; 0x40

	for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++) {
		nwkIb.endpoint[i] = NULL;
    23a8:	2100      	movs	r1, #0
    23aa:	6099      	str	r1, [r3, #8]
    23ac:	3304      	adds	r3, #4
	nwkIb.nwkSeqNum = 0;
	nwkIb.macSeqNum = 0;
	nwkIb.addr = 0;
	nwkIb.lock = 0;

	for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++) {
    23ae:	4293      	cmp	r3, r2
    23b0:	d1fb      	bne.n	23aa <NWK_Init+0x16>
		nwkIb.endpoint[i] = NULL;
	}

	nwkTxInit();
    23b2:	4b07      	ldr	r3, [pc, #28]	; (23d0 <NWK_Init+0x3c>)
    23b4:	4798      	blx	r3
	nwkRxInit();
    23b6:	4b07      	ldr	r3, [pc, #28]	; (23d4 <NWK_Init+0x40>)
    23b8:	4798      	blx	r3
	nwkFrameInit();
    23ba:	4b07      	ldr	r3, [pc, #28]	; (23d8 <NWK_Init+0x44>)
    23bc:	4798      	blx	r3
	nwkDataReqInit();
    23be:	4b07      	ldr	r3, [pc, #28]	; (23dc <NWK_Init+0x48>)
    23c0:	4798      	blx	r3

#ifdef NWK_ENABLE_ROUTING
	nwkRouteInit();
    23c2:	4b07      	ldr	r3, [pc, #28]	; (23e0 <NWK_Init+0x4c>)
    23c4:	4798      	blx	r3
#endif

#ifdef NWK_ENABLE_SECURITY
	nwkSecurityInit();
    23c6:	4b07      	ldr	r3, [pc, #28]	; (23e4 <NWK_Init+0x50>)
    23c8:	4798      	blx	r3
#endif

#ifdef NWK_ENABLE_ROUTE_DISCOVERY
	nwkRouteDiscoveryInit();
#endif
}
    23ca:	bd10      	pop	{r4, pc}
    23cc:	20000888 	.word	0x20000888
    23d0:	0000329d 	.word	0x0000329d
    23d4:	00002ae5 	.word	0x00002ae5
    23d8:	00002609 	.word	0x00002609
    23dc:	00002485 	.word	0x00002485
    23e0:	000026fd 	.word	0x000026fd
    23e4:	00002f79 	.word	0x00002f79

000023e8 <NWK_SetAddr>:
/*************************************************************************//**
*  @brief Sets network address of the node
*  @param[in] addr Adddress to set
*****************************************************************************/
void NWK_SetAddr(uint16_t addr)
{
    23e8:	b510      	push	{r4, lr}
	nwkIb.addr = addr;
    23ea:	4b02      	ldr	r3, [pc, #8]	; (23f4 <NWK_SetAddr+0xc>)
    23ec:	8018      	strh	r0, [r3, #0]
	PHY_SetShortAddr(addr);
    23ee:	4b02      	ldr	r3, [pc, #8]	; (23f8 <NWK_SetAddr+0x10>)
    23f0:	4798      	blx	r3
}
    23f2:	bd10      	pop	{r4, pc}
    23f4:	20000888 	.word	0x20000888
    23f8:	000036c9 	.word	0x000036c9

000023fc <NWK_SetPanId>:
/*************************************************************************//**
*  @brief Sets network identifier (PAN) of the node
*  @param[in] panId PAN ID to set
*****************************************************************************/
void NWK_SetPanId(uint16_t panId)
{
    23fc:	b510      	push	{r4, lr}
	nwkIb.panId = panId;
    23fe:	4b02      	ldr	r3, [pc, #8]	; (2408 <NWK_SetPanId+0xc>)
    2400:	8058      	strh	r0, [r3, #2]
	PHY_SetPanId(panId);
    2402:	4b02      	ldr	r3, [pc, #8]	; (240c <NWK_SetPanId+0x10>)
    2404:	4798      	blx	r3
}
    2406:	bd10      	pop	{r4, pc}
    2408:	20000888 	.word	0x20000888
    240c:	000036a9 	.word	0x000036a9

00002410 <NWK_OpenEndpoint>:
*  @param[in] id Endpoint index (1-15)
*  @param[in] handler Pointer to the callback function
*****************************************************************************/
void NWK_OpenEndpoint(uint8_t id, bool (*handler)(NWK_DataInd_t *ind))
{
	nwkIb.endpoint[id] = handler;
    2410:	3002      	adds	r0, #2
    2412:	0080      	lsls	r0, r0, #2
    2414:	4b01      	ldr	r3, [pc, #4]	; (241c <NWK_OpenEndpoint+0xc>)
    2416:	50c1      	str	r1, [r0, r3]
}
    2418:	4770      	bx	lr
    241a:	46c0      	nop			; (mov r8, r8)
    241c:	20000888 	.word	0x20000888

00002420 <NWK_TaskHandler>:

/*************************************************************************//**
*  @brief Network layer task handler
*****************************************************************************/
void NWK_TaskHandler(void)
{
    2420:	b510      	push	{r4, lr}
	nwkRxTaskHandler();
    2422:	4b04      	ldr	r3, [pc, #16]	; (2434 <NWK_TaskHandler+0x14>)
    2424:	4798      	blx	r3
	nwkTxTaskHandler();
    2426:	4b04      	ldr	r3, [pc, #16]	; (2438 <NWK_TaskHandler+0x18>)
    2428:	4798      	blx	r3
	nwkDataReqTaskHandler();
    242a:	4b04      	ldr	r3, [pc, #16]	; (243c <NWK_TaskHandler+0x1c>)
    242c:	4798      	blx	r3
#ifdef NWK_ENABLE_SECURITY
	nwkSecurityTaskHandler();
    242e:	4b04      	ldr	r3, [pc, #16]	; (2440 <NWK_TaskHandler+0x20>)
    2430:	4798      	blx	r3
#endif
}
    2432:	bd10      	pop	{r4, pc}
    2434:	00002b85 	.word	0x00002b85
    2438:	0000349d 	.word	0x0000349d
    243c:	000024c5 	.word	0x000024c5
    2440:	00003059 	.word	0x00003059

00002444 <nwkDataReqTxConf>:
/*************************************************************************//**
*  @brief Frame transmission confirmation handler
*  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
    2444:	b510      	push	{r4, lr}
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    2446:	4b0d      	ldr	r3, [pc, #52]	; (247c <nwkDataReqTxConf+0x38>)
    2448:	681b      	ldr	r3, [r3, #0]
    244a:	2b00      	cmp	r3, #0
    244c:	d012      	beq.n	2474 <nwkDataReqTxConf+0x30>
		if (req->frame == frame) {
    244e:	685a      	ldr	r2, [r3, #4]
    2450:	4290      	cmp	r0, r2
    2452:	d10c      	bne.n	246e <nwkDataReqTxConf+0x2a>
    2454:	e002      	b.n	245c <nwkDataReqTxConf+0x18>
    2456:	685a      	ldr	r2, [r3, #4]
    2458:	4282      	cmp	r2, r0
    245a:	d108      	bne.n	246e <nwkDataReqTxConf+0x2a>
			req->status = frame->tx.status;
    245c:	2285      	movs	r2, #133	; 0x85
    245e:	5c82      	ldrb	r2, [r0, r2]
    2460:	771a      	strb	r2, [r3, #28]
			req->control = frame->tx.control;
    2462:	2288      	movs	r2, #136	; 0x88
    2464:	5c82      	ldrb	r2, [r0, r2]
    2466:	775a      	strb	r2, [r3, #29]
			req->state = NWK_DATA_REQ_STATE_CONFIRM;
    2468:	2202      	movs	r2, #2
    246a:	721a      	strb	r2, [r3, #8]
			break;
    246c:	e002      	b.n	2474 <nwkDataReqTxConf+0x30>
*  @brief Frame transmission confirmation handler
*  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    246e:	681b      	ldr	r3, [r3, #0]
    2470:	2b00      	cmp	r3, #0
    2472:	d1f0      	bne.n	2456 <nwkDataReqTxConf+0x12>
			req->state = NWK_DATA_REQ_STATE_CONFIRM;
			break;
		}
	}

	nwkFrameFree(frame);
    2474:	4b02      	ldr	r3, [pc, #8]	; (2480 <nwkDataReqTxConf+0x3c>)
    2476:	4798      	blx	r3
}
    2478:	bd10      	pop	{r4, pc}
    247a:	46c0      	nop			; (mov r8, r8)
    247c:	200001a8 	.word	0x200001a8
    2480:	0000268d 	.word	0x0000268d

00002484 <nwkDataReqInit>:
/*************************************************************************//**
*  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
	nwkDataReqQueue = NULL;
    2484:	2200      	movs	r2, #0
    2486:	4b01      	ldr	r3, [pc, #4]	; (248c <nwkDataReqInit+0x8>)
    2488:	601a      	str	r2, [r3, #0]
}
    248a:	4770      	bx	lr
    248c:	200001a8 	.word	0x200001a8

00002490 <NWK_DataReq>:
*  @brief Adds request @a req to the queue of outgoing requests
*  @param[in] req Pointer to the request parameters
*****************************************************************************/
void NWK_DataReq(NWK_DataReq_t *req)
{
	req->state = NWK_DATA_REQ_STATE_INITIAL;
    2490:	2300      	movs	r3, #0
    2492:	7203      	strb	r3, [r0, #8]
	req->status = NWK_SUCCESS_STATUS;
    2494:	7703      	strb	r3, [r0, #28]
	req->frame = NULL;
    2496:	6043      	str	r3, [r0, #4]

	nwkIb.lock++;
    2498:	4908      	ldr	r1, [pc, #32]	; (24bc <NWK_DataReq+0x2c>)
    249a:	2258      	movs	r2, #88	; 0x58
    249c:	5a8b      	ldrh	r3, [r1, r2]
    249e:	3301      	adds	r3, #1
    24a0:	528b      	strh	r3, [r1, r2]

	if (NULL == nwkDataReqQueue) {
    24a2:	4b07      	ldr	r3, [pc, #28]	; (24c0 <NWK_DataReq+0x30>)
    24a4:	681b      	ldr	r3, [r3, #0]
    24a6:	2b00      	cmp	r3, #0
    24a8:	d103      	bne.n	24b2 <NWK_DataReq+0x22>
		req->next = NULL;
    24aa:	6003      	str	r3, [r0, #0]
		nwkDataReqQueue = req;
    24ac:	4b04      	ldr	r3, [pc, #16]	; (24c0 <NWK_DataReq+0x30>)
    24ae:	6018      	str	r0, [r3, #0]
    24b0:	e002      	b.n	24b8 <NWK_DataReq+0x28>
	} else {
		req->next = nwkDataReqQueue;
    24b2:	6003      	str	r3, [r0, #0]
		nwkDataReqQueue = req;
    24b4:	4b02      	ldr	r3, [pc, #8]	; (24c0 <NWK_DataReq+0x30>)
    24b6:	6018      	str	r0, [r3, #0]
	}
}
    24b8:	4770      	bx	lr
    24ba:	46c0      	nop			; (mov r8, r8)
    24bc:	20000888 	.word	0x20000888
    24c0:	200001a8 	.word	0x200001a8

000024c4 <nwkDataReqTaskHandler>:

/*************************************************************************//**
*  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
    24c4:	b570      	push	{r4, r5, r6, lr}
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    24c6:	4b4a      	ldr	r3, [pc, #296]	; (25f0 <nwkDataReqTaskHandler+0x12c>)
    24c8:	681a      	ldr	r2, [r3, #0]
    24ca:	2a00      	cmp	r2, #0
    24cc:	d100      	bne.n	24d0 <nwkDataReqTaskHandler+0xc>
    24ce:	e08e      	b.n	25ee <nwkDataReqTaskHandler+0x12a>
    24d0:	0014      	movs	r4, r2
		switch (req->state) {
    24d2:	7a23      	ldrb	r3, [r4, #8]
    24d4:	2b00      	cmp	r3, #0
    24d6:	d002      	beq.n	24de <nwkDataReqTaskHandler+0x1a>
    24d8:	2b02      	cmp	r3, #2
    24da:	d06f      	beq.n	25bc <nwkDataReqTaskHandler+0xf8>
    24dc:	e083      	b.n	25e6 <nwkDataReqTaskHandler+0x122>
*****************************************************************************/
static void nwkDataReqSendFrame(NWK_DataReq_t *req)
{
	NwkFrame_t *frame;

	if (NULL == (frame = nwkFrameAlloc())) {
    24de:	4b45      	ldr	r3, [pc, #276]	; (25f4 <nwkDataReqTaskHandler+0x130>)
    24e0:	4798      	blx	r3
    24e2:	1e05      	subs	r5, r0, #0
    24e4:	d103      	bne.n	24ee <nwkDataReqTaskHandler+0x2a>
		req->state = NWK_DATA_REQ_STATE_CONFIRM;
    24e6:	2302      	movs	r3, #2
    24e8:	7223      	strb	r3, [r4, #8]
		req->status = NWK_OUT_OF_MEMORY_STATUS;
    24ea:	7723      	strb	r3, [r4, #28]
    24ec:	e07f      	b.n	25ee <nwkDataReqTaskHandler+0x12a>
		return;
	}

	req->frame = frame;
    24ee:	6060      	str	r0, [r4, #4]
	req->state = NWK_DATA_REQ_STATE_WAIT_CONF;
    24f0:	2601      	movs	r6, #1
    24f2:	7226      	strb	r6, [r4, #8]

	frame->tx.confirm = nwkDataReqTxConf;
    24f4:	4b40      	ldr	r3, [pc, #256]	; (25f8 <nwkDataReqTaskHandler+0x134>)
    24f6:	2289      	movs	r2, #137	; 0x89
    24f8:	5483      	strb	r3, [r0, r2]
    24fa:	0a19      	lsrs	r1, r3, #8
    24fc:	0002      	movs	r2, r0
    24fe:	3289      	adds	r2, #137	; 0x89
    2500:	7051      	strb	r1, [r2, #1]
    2502:	0c19      	lsrs	r1, r3, #16
    2504:	7091      	strb	r1, [r2, #2]
    2506:	0e1b      	lsrs	r3, r3, #24
    2508:	70d3      	strb	r3, [r2, #3]
	frame->tx.control = req->options &
    250a:	7ba3      	ldrb	r3, [r4, #14]
    250c:	089b      	lsrs	r3, r3, #2
    250e:	2201      	movs	r2, #1
    2510:	4013      	ands	r3, r2
    2512:	2188      	movs	r1, #136	; 0x88
    2514:	5443      	strb	r3, [r0, r1]
			NWK_OPT_BROADCAST_PAN_ID ?
			NWK_TX_CONTROL_BROADCAST_PAN_ID
			: 0;

	frame->header.nwkFcf.ackRequest = req->options &
    2516:	7ba1      	ldrb	r1, [r4, #14]
    2518:	4011      	ands	r1, r2
    251a:	0008      	movs	r0, r1
    251c:	7ae9      	ldrb	r1, [r5, #11]
    251e:	43b1      	bics	r1, r6
    2520:	4301      	orrs	r1, r0
    2522:	72e9      	strb	r1, [r5, #11]
			NWK_OPT_ACK_REQUEST ? 1 : 0;
	frame->header.nwkFcf.linkLocal = req->options &
    2524:	7ba1      	ldrb	r1, [r4, #14]
    2526:	08c9      	lsrs	r1, r1, #3
    2528:	4011      	ands	r1, r2
    252a:	0088      	lsls	r0, r1, #2
    252c:	7ae9      	ldrb	r1, [r5, #11]
    252e:	2304      	movs	r3, #4
    2530:	4399      	bics	r1, r3
    2532:	4301      	orrs	r1, r0
    2534:	72e9      	strb	r1, [r5, #11]
			NWK_OPT_LINK_LOCAL ? 1 : 0;

#ifdef NWK_ENABLE_SECURITY
	frame->header.nwkFcf.security = req->options &
    2536:	7ba3      	ldrb	r3, [r4, #14]
    2538:	085b      	lsrs	r3, r3, #1
    253a:	4013      	ands	r3, r2
    253c:	005a      	lsls	r2, r3, #1
    253e:	b2cb      	uxtb	r3, r1
    2540:	2102      	movs	r1, #2
    2542:	438b      	bics	r3, r1
    2544:	4313      	orrs	r3, r2
    2546:	72eb      	strb	r3, [r5, #11]
		frame->payload += sizeof(NwkFrameMulticastHeader_t);
		frame->size += sizeof(NwkFrameMulticastHeader_t);
	}
#endif

	frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    2548:	4a2c      	ldr	r2, [pc, #176]	; (25fc <nwkDataReqTaskHandler+0x138>)
    254a:	7913      	ldrb	r3, [r2, #4]
    254c:	3301      	adds	r3, #1
    254e:	b2db      	uxtb	r3, r3
    2550:	7113      	strb	r3, [r2, #4]
    2552:	732b      	strb	r3, [r5, #12]
	frame->header.nwkSrcAddr = nwkIb.addr;
    2554:	7813      	ldrb	r3, [r2, #0]
    2556:	736b      	strb	r3, [r5, #13]
    2558:	7853      	ldrb	r3, [r2, #1]
    255a:	73ab      	strb	r3, [r5, #14]
	frame->header.nwkDstAddr = req->dstAddr;
    255c:	8963      	ldrh	r3, [r4, #10]
    255e:	7aa2      	ldrb	r2, [r4, #10]
    2560:	73ea      	strb	r2, [r5, #15]
    2562:	0a1b      	lsrs	r3, r3, #8
    2564:	742b      	strb	r3, [r5, #16]
	frame->header.nwkSrcEndpoint = req->srcEndpoint;
    2566:	7b62      	ldrb	r2, [r4, #13]
    2568:	200f      	movs	r0, #15
    256a:	4002      	ands	r2, r0
    256c:	0011      	movs	r1, r2
    256e:	7c6a      	ldrb	r2, [r5, #17]
    2570:	230f      	movs	r3, #15
    2572:	439a      	bics	r2, r3
    2574:	430a      	orrs	r2, r1
    2576:	746a      	strb	r2, [r5, #17]
	frame->header.nwkDstEndpoint = req->dstEndpoint;
    2578:	7b22      	ldrb	r2, [r4, #12]
    257a:	0112      	lsls	r2, r2, #4
    257c:	7c6b      	ldrb	r3, [r5, #17]
    257e:	4003      	ands	r3, r0
    2580:	4313      	orrs	r3, r2
    2582:	746b      	strb	r3, [r5, #17]

	memcpy(frame->payload, req->data, req->size);
    2584:	2381      	movs	r3, #129	; 0x81
    2586:	5ce9      	ldrb	r1, [r5, r3]
    2588:	3301      	adds	r3, #1
    258a:	5ceb      	ldrb	r3, [r5, r3]
    258c:	021b      	lsls	r3, r3, #8
    258e:	430b      	orrs	r3, r1
    2590:	001a      	movs	r2, r3
    2592:	2383      	movs	r3, #131	; 0x83
    2594:	5ce8      	ldrb	r0, [r5, r3]
    2596:	0400      	lsls	r0, r0, #16
    2598:	0003      	movs	r3, r0
    259a:	4313      	orrs	r3, r2
    259c:	2284      	movs	r2, #132	; 0x84
    259e:	5ca8      	ldrb	r0, [r5, r2]
    25a0:	0600      	lsls	r0, r0, #24
    25a2:	4318      	orrs	r0, r3
    25a4:	7d22      	ldrb	r2, [r4, #20]
    25a6:	6921      	ldr	r1, [r4, #16]
    25a8:	4b15      	ldr	r3, [pc, #84]	; (2600 <nwkDataReqTaskHandler+0x13c>)
    25aa:	4798      	blx	r3
	frame->size += req->size;
    25ac:	786a      	ldrb	r2, [r5, #1]
    25ae:	7d23      	ldrb	r3, [r4, #20]
    25b0:	18d3      	adds	r3, r2, r3
    25b2:	706b      	strb	r3, [r5, #1]

	nwkTxFrame(frame);
    25b4:	0028      	movs	r0, r5
    25b6:	4b13      	ldr	r3, [pc, #76]	; (2604 <nwkDataReqTaskHandler+0x140>)
    25b8:	4798      	blx	r3
    25ba:	e018      	b.n	25ee <nwkDataReqTaskHandler+0x12a>
*  @brief Confirms request @req to the application and remove it from the queue
*  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqConfirm(NWK_DataReq_t *req)
{
	if (nwkDataReqQueue == req) {
    25bc:	42a2      	cmp	r2, r4
    25be:	d104      	bne.n	25ca <nwkDataReqTaskHandler+0x106>
		nwkDataReqQueue = nwkDataReqQueue->next;
    25c0:	6812      	ldr	r2, [r2, #0]
    25c2:	4b0b      	ldr	r3, [pc, #44]	; (25f0 <nwkDataReqTaskHandler+0x12c>)
    25c4:	601a      	str	r2, [r3, #0]
    25c6:	e005      	b.n	25d4 <nwkDataReqTaskHandler+0x110>
	} else {
		NWK_DataReq_t *prev = nwkDataReqQueue;
		while (prev->next != req) {
			prev = prev->next;
    25c8:	001a      	movs	r2, r3
{
	if (nwkDataReqQueue == req) {
		nwkDataReqQueue = nwkDataReqQueue->next;
	} else {
		NWK_DataReq_t *prev = nwkDataReqQueue;
		while (prev->next != req) {
    25ca:	6813      	ldr	r3, [r2, #0]
    25cc:	42a3      	cmp	r3, r4
    25ce:	d1fb      	bne.n	25c8 <nwkDataReqTaskHandler+0x104>
			prev = prev->next;
		}
		prev->next = ((NWK_DataReq_t *)prev->next)->next;
    25d0:	6823      	ldr	r3, [r4, #0]
    25d2:	6013      	str	r3, [r2, #0]
	}

	nwkIb.lock--;
    25d4:	4909      	ldr	r1, [pc, #36]	; (25fc <nwkDataReqTaskHandler+0x138>)
    25d6:	2258      	movs	r2, #88	; 0x58
    25d8:	5a8b      	ldrh	r3, [r1, r2]
    25da:	3b01      	subs	r3, #1
    25dc:	528b      	strh	r3, [r1, r2]
	req->confirm(req);
    25de:	69a3      	ldr	r3, [r4, #24]
    25e0:	0020      	movs	r0, r4
    25e2:	4798      	blx	r3
    25e4:	e003      	b.n	25ee <nwkDataReqTaskHandler+0x12a>
/*************************************************************************//**
*  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    25e6:	6824      	ldr	r4, [r4, #0]
    25e8:	2c00      	cmp	r4, #0
    25ea:	d000      	beq.n	25ee <nwkDataReqTaskHandler+0x12a>
    25ec:	e771      	b.n	24d2 <nwkDataReqTaskHandler+0xe>

		default:
			break;
		}
	}
}
    25ee:	bd70      	pop	{r4, r5, r6, pc}
    25f0:	200001a8 	.word	0x200001a8
    25f4:	0000261d 	.word	0x0000261d
    25f8:	00002445 	.word	0x00002445
    25fc:	20000888 	.word	0x20000888
    2600:	00004b9d 	.word	0x00004b9d
    2604:	000032d1 	.word	0x000032d1

00002608 <nwkFrameInit>:
*  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
		nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
    2608:	4b03      	ldr	r3, [pc, #12]	; (2618 <nwkFrameInit+0x10>)
    260a:	2200      	movs	r2, #0
    260c:	701a      	strb	r2, [r3, #0]
    260e:	218d      	movs	r1, #141	; 0x8d
    2610:	545a      	strb	r2, [r3, r1]
    2612:	318d      	adds	r1, #141	; 0x8d
    2614:	545a      	strb	r2, [r3, r1]
	}
}
    2616:	4770      	bx	lr
    2618:	200001ac 	.word	0x200001ac

0000261c <nwkFrameAlloc>:
/*************************************************************************//**
*  @brief Allocates an empty frame from the buffer pool
*  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
    261c:	b510      	push	{r4, lr}
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
		if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state) {
    261e:	4b18      	ldr	r3, [pc, #96]	; (2680 <nwkFrameAlloc+0x64>)
    2620:	781b      	ldrb	r3, [r3, #0]
    2622:	2b00      	cmp	r3, #0
    2624:	d00e      	beq.n	2644 <nwkFrameAlloc+0x28>
    2626:	238d      	movs	r3, #141	; 0x8d
    2628:	4a15      	ldr	r2, [pc, #84]	; (2680 <nwkFrameAlloc+0x64>)
    262a:	5cd3      	ldrb	r3, [r2, r3]
    262c:	2b00      	cmp	r3, #0
    262e:	d007      	beq.n	2640 <nwkFrameAlloc+0x24>
    2630:	238d      	movs	r3, #141	; 0x8d
    2632:	005b      	lsls	r3, r3, #1
    2634:	5cd3      	ldrb	r3, [r2, r3]
					sizeof(NwkFrameHeader_t);
			nwkIb.lock++;
			return &nwkFrameFrames[i];
		}
	}
	return NULL;
    2636:	2400      	movs	r4, #0
*  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
		if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state) {
    2638:	2b00      	cmp	r3, #0
    263a:	d11f      	bne.n	267c <nwkFrameAlloc+0x60>
    263c:	3402      	adds	r4, #2
    263e:	e002      	b.n	2646 <nwkFrameAlloc+0x2a>
    2640:	2401      	movs	r4, #1
    2642:	e000      	b.n	2646 <nwkFrameAlloc+0x2a>
    2644:	2400      	movs	r4, #0
			memset(&nwkFrameFrames[i], 0, sizeof(NwkFrame_t));
    2646:	238d      	movs	r3, #141	; 0x8d
    2648:	435c      	muls	r4, r3
    264a:	4b0d      	ldr	r3, [pc, #52]	; (2680 <nwkFrameAlloc+0x64>)
    264c:	191c      	adds	r4, r3, r4
    264e:	228d      	movs	r2, #141	; 0x8d
    2650:	2100      	movs	r1, #0
    2652:	0020      	movs	r0, r4
    2654:	4b0b      	ldr	r3, [pc, #44]	; (2684 <nwkFrameAlloc+0x68>)
    2656:	4798      	blx	r3
			nwkFrameFrames[i].size = sizeof(NwkFrameHeader_t);
    2658:	2310      	movs	r3, #16
    265a:	7063      	strb	r3, [r4, #1]
			nwkFrameFrames[i].payload = nwkFrameFrames[i].data +
    265c:	0023      	movs	r3, r4
    265e:	3312      	adds	r3, #18
    2660:	0022      	movs	r2, r4
    2662:	3281      	adds	r2, #129	; 0x81
    2664:	7013      	strb	r3, [r2, #0]
    2666:	0a19      	lsrs	r1, r3, #8
    2668:	7051      	strb	r1, [r2, #1]
    266a:	0c19      	lsrs	r1, r3, #16
    266c:	7091      	strb	r1, [r2, #2]
    266e:	0e1b      	lsrs	r3, r3, #24
    2670:	70d3      	strb	r3, [r2, #3]
					sizeof(NwkFrameHeader_t);
			nwkIb.lock++;
    2672:	4905      	ldr	r1, [pc, #20]	; (2688 <nwkFrameAlloc+0x6c>)
    2674:	2258      	movs	r2, #88	; 0x58
    2676:	5a8b      	ldrh	r3, [r1, r2]
    2678:	3301      	adds	r3, #1
    267a:	528b      	strh	r3, [r1, r2]
			return &nwkFrameFrames[i];
		}
	}
	return NULL;
}
    267c:	0020      	movs	r0, r4
    267e:	bd10      	pop	{r4, pc}
    2680:	200001ac 	.word	0x200001ac
    2684:	00004baf 	.word	0x00004baf
    2688:	20000888 	.word	0x20000888

0000268c <nwkFrameFree>:
*  @brief Frees a @a frame and returns it to the buffer pool
*  @param[in] frame Pointer to the frame to be freed
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
	frame->state = NWK_FRAME_STATE_FREE;
    268c:	2300      	movs	r3, #0
    268e:	7003      	strb	r3, [r0, #0]
	nwkIb.lock--;
    2690:	4902      	ldr	r1, [pc, #8]	; (269c <nwkFrameFree+0x10>)
    2692:	2258      	movs	r2, #88	; 0x58
    2694:	5a8b      	ldrh	r3, [r1, r2]
    2696:	3b01      	subs	r3, #1
    2698:	528b      	strh	r3, [r1, r2]
}
    269a:	4770      	bx	lr
    269c:	20000888 	.word	0x20000888

000026a0 <nwkFrameNext>:
*  @param[in] frame Pointer to the current frame or @c NULL for the first frame
*  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
	if (NULL == frame) {
    26a0:	2800      	cmp	r0, #0
    26a2:	d006      	beq.n	26b2 <nwkFrameNext+0x12>
		frame = nwkFrameFrames;
	} else {
		frame++;
    26a4:	308d      	adds	r0, #141	; 0x8d
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    26a6:	4b0c      	ldr	r3, [pc, #48]	; (26d8 <nwkFrameNext+0x38>)
    26a8:	33a8      	adds	r3, #168	; 0xa8
    26aa:	33ff      	adds	r3, #255	; 0xff
    26ac:	4298      	cmp	r0, r3
    26ae:	d301      	bcc.n	26b4 <nwkFrameNext+0x14>
    26b0:	e00f      	b.n	26d2 <nwkFrameNext+0x32>
*  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
	if (NULL == frame) {
		frame = nwkFrameFrames;
    26b2:	4809      	ldr	r0, [pc, #36]	; (26d8 <nwkFrameNext+0x38>)
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
		if (NWK_FRAME_STATE_FREE != frame->state) {
    26b4:	7803      	ldrb	r3, [r0, #0]
    26b6:	2b00      	cmp	r3, #0
    26b8:	d10c      	bne.n	26d4 <nwkFrameNext+0x34>
		frame = nwkFrameFrames;
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    26ba:	4a07      	ldr	r2, [pc, #28]	; (26d8 <nwkFrameNext+0x38>)
    26bc:	32a8      	adds	r2, #168	; 0xa8
    26be:	32ff      	adds	r2, #255	; 0xff
    26c0:	e002      	b.n	26c8 <nwkFrameNext+0x28>
		if (NWK_FRAME_STATE_FREE != frame->state) {
    26c2:	7803      	ldrb	r3, [r0, #0]
    26c4:	2b00      	cmp	r3, #0
    26c6:	d105      	bne.n	26d4 <nwkFrameNext+0x34>
		frame = nwkFrameFrames;
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    26c8:	308d      	adds	r0, #141	; 0x8d
    26ca:	4290      	cmp	r0, r2
    26cc:	d3f9      	bcc.n	26c2 <nwkFrameNext+0x22>
		if (NWK_FRAME_STATE_FREE != frame->state) {
			return frame;
		}
	}

	return NULL;
    26ce:	2000      	movs	r0, #0
    26d0:	e000      	b.n	26d4 <nwkFrameNext+0x34>
    26d2:	2000      	movs	r0, #0
}
    26d4:	4770      	bx	lr
    26d6:	46c0      	nop			; (mov r8, r8)
    26d8:	200001ac 	.word	0x200001ac

000026dc <nwkFrameCommandInit>:
*  @brief Sets default parameters for the the command @a frame
*  @param[in] frame Pointer to the command frame
*****************************************************************************/
void nwkFrameCommandInit(NwkFrame_t *frame)
{
	frame->tx.status = NWK_SUCCESS_STATUS;
    26dc:	2200      	movs	r2, #0
    26de:	2385      	movs	r3, #133	; 0x85
    26e0:	54c2      	strb	r2, [r0, r3]
	frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    26e2:	4a05      	ldr	r2, [pc, #20]	; (26f8 <nwkFrameCommandInit+0x1c>)
    26e4:	7913      	ldrb	r3, [r2, #4]
    26e6:	3301      	adds	r3, #1
    26e8:	b2db      	uxtb	r3, r3
    26ea:	7113      	strb	r3, [r2, #4]
    26ec:	7303      	strb	r3, [r0, #12]
	frame->header.nwkSrcAddr = nwkIb.addr;
    26ee:	7813      	ldrb	r3, [r2, #0]
    26f0:	7343      	strb	r3, [r0, #13]
    26f2:	7853      	ldrb	r3, [r2, #1]
    26f4:	7383      	strb	r3, [r0, #14]
#ifdef NWK_ENABLE_SECURE_COMMANDS
	frame->header.nwkFcf.security = 1;
#endif
}
    26f6:	4770      	bx	lr
    26f8:	20000888 	.word	0x20000888

000026fc <nwkRouteInit>:

/*************************************************************************//**
*  @brief Initializes the Routing module
*****************************************************************************/
void nwkRouteInit(void)
{
    26fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    26fe:	4b09      	ldr	r3, [pc, #36]	; (2724 <nwkRouteInit+0x28>)
    2700:	3302      	adds	r3, #2
    2702:	2200      	movs	r2, #0
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
    2704:	2701      	movs	r7, #1
    2706:	427f      	negs	r7, r7
		nwkRouteTable[i].fixed = 0;
    2708:	4c06      	ldr	r4, [pc, #24]	; (2724 <nwkRouteInit+0x28>)
    270a:	2601      	movs	r6, #1
		nwkRouteTable[i].rank = 0;
    270c:	2500      	movs	r5, #0
*  @brief Initializes the Routing module
*****************************************************************************/
void nwkRouteInit(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
    270e:	801f      	strh	r7, [r3, #0]
		nwkRouteTable[i].fixed = 0;
    2710:	00d0      	lsls	r0, r2, #3
    2712:	5d01      	ldrb	r1, [r0, r4]
    2714:	43b1      	bics	r1, r6
    2716:	5501      	strb	r1, [r0, r4]
		nwkRouteTable[i].rank = 0;
    2718:	711d      	strb	r5, [r3, #4]
    271a:	3201      	adds	r2, #1
    271c:	3308      	adds	r3, #8
/*************************************************************************//**
*  @brief Initializes the Routing module
*****************************************************************************/
void nwkRouteInit(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    271e:	2a64      	cmp	r2, #100	; 0x64
    2720:	d1f5      	bne.n	270e <nwkRouteInit+0x12>
		nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
		nwkRouteTable[i].fixed = 0;
		nwkRouteTable[i].rank = 0;
	}
}
    2722:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2724:	20000354 	.word	0x20000354

00002728 <NWK_RouteFindEntry>:

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
    2728:	b570      	push	{r4, r5, r6, lr}
    272a:	4a0b      	ldr	r2, [pc, #44]	; (2758 <NWK_RouteFindEntry+0x30>)
    272c:	3202      	adds	r2, #2
    272e:	2300      	movs	r3, #0
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		if (nwkRouteTable[i].dstAddr == dst &&
				nwkRouteTable[i].multicast == multicast) {
    2730:	4e09      	ldr	r6, [pc, #36]	; (2758 <NWK_RouteFindEntry+0x30>)
/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		if (nwkRouteTable[i].dstAddr == dst &&
    2732:	8814      	ldrh	r4, [r2, #0]
    2734:	4284      	cmp	r4, r0
    2736:	d109      	bne.n	274c <NWK_RouteFindEntry+0x24>
				nwkRouteTable[i].multicast == multicast) {
    2738:	00dc      	lsls	r4, r3, #3
    273a:	5da4      	ldrb	r4, [r4, r6]
    273c:	07a4      	lsls	r4, r4, #30
/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		if (nwkRouteTable[i].dstAddr == dst &&
    273e:	0fe4      	lsrs	r4, r4, #31
    2740:	428c      	cmp	r4, r1
    2742:	d103      	bne.n	274c <NWK_RouteFindEntry+0x24>
				nwkRouteTable[i].multicast == multicast) {
			return &nwkRouteTable[i];
    2744:	00dd      	lsls	r5, r3, #3
    2746:	4804      	ldr	r0, [pc, #16]	; (2758 <NWK_RouteFindEntry+0x30>)
    2748:	1940      	adds	r0, r0, r5
    274a:	e004      	b.n	2756 <NWK_RouteFindEntry+0x2e>
    274c:	3301      	adds	r3, #1
    274e:	3208      	adds	r2, #8

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    2750:	2b64      	cmp	r3, #100	; 0x64
    2752:	d1ee      	bne.n	2732 <NWK_RouteFindEntry+0xa>
				nwkRouteTable[i].multicast == multicast) {
			return &nwkRouteTable[i];
		}
	}

	return NULL;
    2754:	2000      	movs	r0, #0
}
    2756:	bd70      	pop	{r4, r5, r6, pc}
    2758:	20000354 	.word	0x20000354

0000275c <NWK_RouteNewEntry>:

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteNewEntry(void)
{
    275c:	b530      	push	{r4, r5, lr}
	NWK_RouteTableEntry_t *iter = nwkRouteTable;
	NWK_RouteTableEntry_t *entry = NULL;
    275e:	2200      	movs	r2, #0

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteNewEntry(void)
{
	NWK_RouteTableEntry_t *iter = nwkRouteTable;
    2760:	4812      	ldr	r0, [pc, #72]	; (27ac <NWK_RouteNewEntry+0x50>)
	NWK_RouteTableEntry_t *entry = NULL;

	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++, iter++) {
		if (iter->fixed) {
    2762:	2401      	movs	r4, #1
NWK_RouteTableEntry_t *NWK_RouteNewEntry(void)
{
	NWK_RouteTableEntry_t *iter = nwkRouteTable;
	NWK_RouteTableEntry_t *entry = NULL;

	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++, iter++) {
    2764:	0003      	movs	r3, r0
    2766:	25c8      	movs	r5, #200	; 0xc8
    2768:	00ad      	lsls	r5, r5, #2
    276a:	46ac      	mov	ip, r5
    276c:	4463      	add	r3, ip
    276e:	0019      	movs	r1, r3
		if (iter->fixed) {
    2770:	7803      	ldrb	r3, [r0, #0]
    2772:	421c      	tst	r4, r3
    2774:	d10a      	bne.n	278c <NWK_RouteNewEntry+0x30>
			continue;
		}

		if (0 == iter->rank) {
    2776:	7983      	ldrb	r3, [r0, #6]
    2778:	2b00      	cmp	r3, #0
    277a:	d00b      	beq.n	2794 <NWK_RouteNewEntry+0x38>
			entry = iter;
			break;
		}

		if (NULL == entry || iter->rank < entry->rank) {
    277c:	2a00      	cmp	r2, #0
    277e:	d004      	beq.n	278a <NWK_RouteNewEntry+0x2e>
    2780:	7995      	ldrb	r5, [r2, #6]
    2782:	429d      	cmp	r5, r3
    2784:	d902      	bls.n	278c <NWK_RouteNewEntry+0x30>
    2786:	0002      	movs	r2, r0
    2788:	e000      	b.n	278c <NWK_RouteNewEntry+0x30>
    278a:	0002      	movs	r2, r0
NWK_RouteTableEntry_t *NWK_RouteNewEntry(void)
{
	NWK_RouteTableEntry_t *iter = nwkRouteTable;
	NWK_RouteTableEntry_t *entry = NULL;

	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++, iter++) {
    278c:	3008      	adds	r0, #8
    278e:	4288      	cmp	r0, r1
    2790:	d1ee      	bne.n	2770 <NWK_RouteNewEntry+0x14>
    2792:	0010      	movs	r0, r2
		if (NULL == entry || iter->rank < entry->rank) {
			entry = iter;
		}
	}

	entry->multicast = 0;
    2794:	7803      	ldrb	r3, [r0, #0]
	entry->score = NWK_ROUTE_DEFAULT_SCORE;
    2796:	2202      	movs	r2, #2
    2798:	4393      	bics	r3, r2
    279a:	320d      	adds	r2, #13
    279c:	4013      	ands	r3, r2
    279e:	2230      	movs	r2, #48	; 0x30
    27a0:	4313      	orrs	r3, r2
    27a2:	7003      	strb	r3, [r0, #0]
	entry->rank = NWK_ROUTE_DEFAULT_RANK;
    27a4:	2380      	movs	r3, #128	; 0x80
    27a6:	7183      	strb	r3, [r0, #6]

	return entry;
}
    27a8:	bd30      	pop	{r4, r5, pc}
    27aa:	46c0      	nop			; (mov r8, r8)
    27ac:	20000354 	.word	0x20000354

000027b0 <NWK_RouteFreeEntry>:

/*************************************************************************//**
*****************************************************************************/
void NWK_RouteFreeEntry(NWK_RouteTableEntry_t *entry)
{
	if (entry->fixed) {
    27b0:	7803      	ldrb	r3, [r0, #0]
    27b2:	07db      	lsls	r3, r3, #31
    27b4:	d404      	bmi.n	27c0 <NWK_RouteFreeEntry+0x10>
		return;
	}

	entry->dstAddr = NWK_ROUTE_UNKNOWN;
    27b6:	2301      	movs	r3, #1
    27b8:	425b      	negs	r3, r3
    27ba:	8043      	strh	r3, [r0, #2]
	entry->rank = 0;
    27bc:	2300      	movs	r3, #0
    27be:	7183      	strb	r3, [r0, #6]
}
    27c0:	4770      	bx	lr
    27c2:	46c0      	nop			; (mov r8, r8)

000027c4 <NWK_RouteNextHop>:

/*************************************************************************//**
*****************************************************************************/
uint16_t NWK_RouteNextHop(uint16_t dst, uint8_t multicast)
{
    27c4:	b510      	push	{r4, lr}
	NWK_RouteTableEntry_t *entry;

	entry = NWK_RouteFindEntry(dst, multicast);
    27c6:	4b04      	ldr	r3, [pc, #16]	; (27d8 <NWK_RouteNextHop+0x14>)
    27c8:	4798      	blx	r3
	if (entry) {
    27ca:	2800      	cmp	r0, #0
    27cc:	d001      	beq.n	27d2 <NWK_RouteNextHop+0xe>
		return entry->nextHopAddr;
    27ce:	8880      	ldrh	r0, [r0, #4]
    27d0:	e000      	b.n	27d4 <NWK_RouteNextHop+0x10>
	}

	return NWK_ROUTE_UNKNOWN;
    27d2:	4802      	ldr	r0, [pc, #8]	; (27dc <NWK_RouteNextHop+0x18>)
}
    27d4:	bd10      	pop	{r4, pc}
    27d6:	46c0      	nop			; (mov r8, r8)
    27d8:	00002729 	.word	0x00002729
    27dc:	0000ffff 	.word	0x0000ffff

000027e0 <nwkRouteRemove>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkRouteRemove(uint16_t dst, uint8_t multicast)
{
    27e0:	b510      	push	{r4, lr}
	NWK_RouteTableEntry_t *entry;

	entry = NWK_RouteFindEntry(dst, multicast);
    27e2:	4b03      	ldr	r3, [pc, #12]	; (27f0 <nwkRouteRemove+0x10>)
    27e4:	4798      	blx	r3
	if (entry) {
    27e6:	2800      	cmp	r0, #0
    27e8:	d001      	beq.n	27ee <nwkRouteRemove+0xe>
		NWK_RouteFreeEntry(entry);
    27ea:	4b02      	ldr	r3, [pc, #8]	; (27f4 <nwkRouteRemove+0x14>)
    27ec:	4798      	blx	r3
	}
}
    27ee:	bd10      	pop	{r4, pc}
    27f0:	00002729 	.word	0x00002729
    27f4:	000027b1 	.word	0x000027b1

000027f8 <nwkRouteFrameReceived>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameReceived(NwkFrame_t *frame)
{
    27f8:	b570      	push	{r4, r5, r6, lr}
    27fa:	0004      	movs	r4, r0
#ifndef NWK_ENABLE_ROUTE_DISCOVERY
	NwkFrameHeader_t *header = &frame->header;
	NWK_RouteTableEntry_t *entry;

	if ((header->macSrcAddr & NWK_ROUTE_NON_ROUTING) &&
    27fc:	7a42      	ldrb	r2, [r0, #9]
    27fe:	7a85      	ldrb	r5, [r0, #10]
    2800:	022d      	lsls	r5, r5, #8
    2802:	4315      	orrs	r5, r2
    2804:	b22b      	sxth	r3, r5
    2806:	2b00      	cmp	r3, #0
    2808:	da05      	bge.n	2816 <nwkRouteFrameReceived+0x1e>
			(header->macSrcAddr != header->nwkSrcAddr)) {
    280a:	7b42      	ldrb	r2, [r0, #13]
    280c:	7b83      	ldrb	r3, [r0, #14]
    280e:	021b      	lsls	r3, r3, #8
{
#ifndef NWK_ENABLE_ROUTE_DISCOVERY
	NwkFrameHeader_t *header = &frame->header;
	NWK_RouteTableEntry_t *entry;

	if ((header->macSrcAddr & NWK_ROUTE_NON_ROUTING) &&
    2810:	4313      	orrs	r3, r2
    2812:	429d      	cmp	r5, r3
    2814:	d13f      	bne.n	2896 <nwkRouteFrameReceived+0x9e>
			(header->macSrcAddr != header->nwkSrcAddr)) {
		return;
	}

	if (NWK_BROADCAST_PANID == header->macDstPanId) {
    2816:	7962      	ldrb	r2, [r4, #5]
    2818:	79a3      	ldrb	r3, [r4, #6]
    281a:	021b      	lsls	r3, r3, #8
    281c:	4313      	orrs	r3, r2
    281e:	4a1e      	ldr	r2, [pc, #120]	; (2898 <nwkRouteFrameReceived+0xa0>)
    2820:	4293      	cmp	r3, r2
    2822:	d038      	beq.n	2896 <nwkRouteFrameReceived+0x9e>
		return;
	}

	entry = NWK_RouteFindEntry(header->nwkSrcAddr, false);
    2824:	7b63      	ldrb	r3, [r4, #13]
    2826:	7ba0      	ldrb	r0, [r4, #14]
    2828:	0200      	lsls	r0, r0, #8
    282a:	4318      	orrs	r0, r3
    282c:	2100      	movs	r1, #0
    282e:	4b1b      	ldr	r3, [pc, #108]	; (289c <nwkRouteFrameReceived+0xa4>)
    2830:	4798      	blx	r3

	if (entry) {
    2832:	2800      	cmp	r0, #0
    2834:	d016      	beq.n	2864 <nwkRouteFrameReceived+0x6c>
		bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
    2836:	79e2      	ldrb	r2, [r4, #7]
    2838:	7a23      	ldrb	r3, [r4, #8]
    283a:	021b      	lsls	r3, r3, #8
    283c:	4313      	orrs	r3, r2
    283e:	4a16      	ldr	r2, [pc, #88]	; (2898 <nwkRouteFrameReceived+0xa0>)
    2840:	4293      	cmp	r3, r2
    2842:	d11f      	bne.n	2884 <nwkRouteFrameReceived+0x8c>
				nwkIb.addr == header->nwkDstAddr);
    2844:	7be2      	ldrb	r2, [r4, #15]
    2846:	7c23      	ldrb	r3, [r4, #16]
    2848:	021b      	lsls	r3, r3, #8
	}

	entry = NWK_RouteFindEntry(header->nwkSrcAddr, false);

	if (entry) {
		bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
    284a:	4915      	ldr	r1, [pc, #84]	; (28a0 <nwkRouteFrameReceived+0xa8>)
    284c:	8809      	ldrh	r1, [r1, #0]
    284e:	4313      	orrs	r3, r2
    2850:	4299      	cmp	r1, r3
    2852:	d117      	bne.n	2884 <nwkRouteFrameReceived+0x8c>
				nwkIb.addr == header->nwkDstAddr);

		if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi >
				entry->lqi) || discovery) {
			entry->nextHopAddr = header->macSrcAddr;
    2854:	8085      	strh	r5, [r0, #4]
			entry->score = NWK_ROUTE_DEFAULT_SCORE;
    2856:	7803      	ldrb	r3, [r0, #0]
    2858:	220f      	movs	r2, #15
    285a:	4013      	ands	r3, r2
    285c:	2230      	movs	r2, #48	; 0x30
    285e:	4313      	orrs	r3, r2
    2860:	7003      	strb	r3, [r0, #0]
    2862:	e00b      	b.n	287c <nwkRouteFrameReceived+0x84>
		}
	} else {
		entry = NWK_RouteNewEntry();
    2864:	4b0f      	ldr	r3, [pc, #60]	; (28a4 <nwkRouteFrameReceived+0xac>)
    2866:	4798      	blx	r3

		entry->dstAddr = header->nwkSrcAddr;
    2868:	7b61      	ldrb	r1, [r4, #13]
    286a:	7ba2      	ldrb	r2, [r4, #14]
    286c:	0212      	lsls	r2, r2, #8
    286e:	430a      	orrs	r2, r1
    2870:	8042      	strh	r2, [r0, #2]
		entry->nextHopAddr = header->macSrcAddr;
    2872:	7a62      	ldrb	r2, [r4, #9]
    2874:	7aa3      	ldrb	r3, [r4, #10]
    2876:	021b      	lsls	r3, r3, #8
    2878:	4313      	orrs	r3, r2
    287a:	8083      	strh	r3, [r0, #4]
	}

	entry->lqi = frame->rx.lqi;
    287c:	2385      	movs	r3, #133	; 0x85
    287e:	5ce3      	ldrb	r3, [r4, r3]
    2880:	71c3      	strb	r3, [r0, #7]
    2882:	e008      	b.n	2896 <nwkRouteFrameReceived+0x9e>

	if (entry) {
		bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
				nwkIb.addr == header->nwkDstAddr);

		if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi >
    2884:	8883      	ldrh	r3, [r0, #4]
    2886:	42ab      	cmp	r3, r5
    2888:	d0f8      	beq.n	287c <nwkRouteFrameReceived+0x84>
    288a:	79c2      	ldrb	r2, [r0, #7]
    288c:	2385      	movs	r3, #133	; 0x85
    288e:	5ce3      	ldrb	r3, [r4, r3]
    2890:	429a      	cmp	r2, r3
    2892:	d3df      	bcc.n	2854 <nwkRouteFrameReceived+0x5c>
    2894:	e7f2      	b.n	287c <nwkRouteFrameReceived+0x84>

	entry->lqi = frame->rx.lqi;
#else
	(void)frame;
#endif
}
    2896:	bd70      	pop	{r4, r5, r6, pc}
    2898:	0000ffff 	.word	0x0000ffff
    289c:	00002729 	.word	0x00002729
    28a0:	20000888 	.word	0x20000888
    28a4:	0000275d 	.word	0x0000275d

000028a8 <nwkRouteFrameSent>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameSent(NwkFrame_t *frame)
{
    28a8:	b510      	push	{r4, lr}
    28aa:	0004      	movs	r4, r0
	NWK_RouteTableEntry_t *entry;

	if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr) {
    28ac:	7bc3      	ldrb	r3, [r0, #15]
    28ae:	7c00      	ldrb	r0, [r0, #16]
    28b0:	0200      	lsls	r0, r0, #8
    28b2:	4318      	orrs	r0, r3
    28b4:	4b1b      	ldr	r3, [pc, #108]	; (2924 <nwkRouteFrameSent+0x7c>)
    28b6:	4298      	cmp	r0, r3
    28b8:	d033      	beq.n	2922 <nwkRouteFrameSent+0x7a>
		return;
	}

	entry = NWK_RouteFindEntry(frame->header.nwkDstAddr,
			frame->header.nwkFcf.multicast);
    28ba:	7ae1      	ldrb	r1, [r4, #11]
    28bc:	0709      	lsls	r1, r1, #28

	if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr) {
		return;
	}

	entry = NWK_RouteFindEntry(frame->header.nwkDstAddr,
    28be:	0fc9      	lsrs	r1, r1, #31
    28c0:	4b19      	ldr	r3, [pc, #100]	; (2928 <nwkRouteFrameSent+0x80>)
    28c2:	4798      	blx	r3
			frame->header.nwkFcf.multicast);

	if (NULL == entry || entry->fixed) {
    28c4:	2800      	cmp	r0, #0
    28c6:	d02c      	beq.n	2922 <nwkRouteFrameSent+0x7a>
    28c8:	7803      	ldrb	r3, [r0, #0]
    28ca:	07db      	lsls	r3, r3, #31
    28cc:	d429      	bmi.n	2922 <nwkRouteFrameSent+0x7a>
		return;
	}

	if (NWK_SUCCESS_STATUS == frame->tx.status) {
    28ce:	2385      	movs	r3, #133	; 0x85
    28d0:	5ce3      	ldrb	r3, [r4, r3]
    28d2:	2b00      	cmp	r3, #0
    28d4:	d118      	bne.n	2908 <nwkRouteFrameSent+0x60>
		entry->score = NWK_ROUTE_DEFAULT_SCORE;
    28d6:	7803      	ldrb	r3, [r0, #0]
    28d8:	220f      	movs	r2, #15
    28da:	4013      	ands	r3, r2
    28dc:	2230      	movs	r2, #48	; 0x30
    28de:	4313      	orrs	r3, r2
    28e0:	7003      	strb	r3, [r0, #0]

		if (NWK_ROUTE_MAX_RANK == ++entry->rank) {
    28e2:	7983      	ldrb	r3, [r0, #6]
    28e4:	3301      	adds	r3, #1
    28e6:	b2db      	uxtb	r3, r3
    28e8:	7183      	strb	r3, [r0, #6]
    28ea:	2bff      	cmp	r3, #255	; 0xff
    28ec:	d119      	bne.n	2922 <nwkRouteFrameSent+0x7a>
    28ee:	490f      	ldr	r1, [pc, #60]	; (292c <nwkRouteFrameSent+0x84>)
    28f0:	1d8a      	adds	r2, r1, #6
    28f2:	4b0f      	ldr	r3, [pc, #60]	; (2930 <nwkRouteFrameSent+0x88>)
    28f4:	469c      	mov	ip, r3
    28f6:	4461      	add	r1, ip
/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		nwkRouteTable[i].rank = (nwkRouteTable[i].rank >> 1) + 1;
    28f8:	7813      	ldrb	r3, [r2, #0]
    28fa:	085b      	lsrs	r3, r3, #1
    28fc:	3301      	adds	r3, #1
    28fe:	7013      	strb	r3, [r2, #0]
    2900:	3208      	adds	r2, #8

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    2902:	428a      	cmp	r2, r1
    2904:	d1f8      	bne.n	28f8 <nwkRouteFrameSent+0x50>
    2906:	e00c      	b.n	2922 <nwkRouteFrameSent+0x7a>

		if (NWK_ROUTE_MAX_RANK == ++entry->rank) {
			nwkRouteNormalizeRanks();
		}
	} else {
		if (0 == --entry->score) {
    2908:	7802      	ldrb	r2, [r0, #0]
    290a:	0913      	lsrs	r3, r2, #4
    290c:	330f      	adds	r3, #15
    290e:	240f      	movs	r4, #15
    2910:	4023      	ands	r3, r4
    2912:	0119      	lsls	r1, r3, #4
    2914:	4022      	ands	r2, r4
    2916:	430a      	orrs	r2, r1
    2918:	7002      	strb	r2, [r0, #0]
    291a:	2b00      	cmp	r3, #0
    291c:	d101      	bne.n	2922 <nwkRouteFrameSent+0x7a>
			NWK_RouteFreeEntry(entry);
    291e:	4b05      	ldr	r3, [pc, #20]	; (2934 <nwkRouteFrameSent+0x8c>)
    2920:	4798      	blx	r3
		}
	}
}
    2922:	bd10      	pop	{r4, pc}
    2924:	0000ffff 	.word	0x0000ffff
    2928:	00002729 	.word	0x00002729
    292c:	20000354 	.word	0x20000354
    2930:	00000326 	.word	0x00000326
    2934:	000027b1 	.word	0x000027b1

00002938 <nwkRoutePrepareTx>:

/*************************************************************************//**
*****************************************************************************/
void nwkRoutePrepareTx(NwkFrame_t *frame)
{
    2938:	b510      	push	{r4, lr}
    293a:	0004      	movs	r4, r0
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_BROADCAST_ADDR == header->nwkDstAddr) {
    293c:	7bc3      	ldrb	r3, [r0, #15]
    293e:	7c00      	ldrb	r0, [r0, #16]
    2940:	0200      	lsls	r0, r0, #8
    2942:	4318      	orrs	r0, r3
    2944:	4b0b      	ldr	r3, [pc, #44]	; (2974 <nwkRoutePrepareTx+0x3c>)
    2946:	4298      	cmp	r0, r3
    2948:	d104      	bne.n	2954 <nwkRoutePrepareTx+0x1c>
		header->macDstAddr = NWK_BROADCAST_ADDR;
    294a:	2301      	movs	r3, #1
    294c:	425b      	negs	r3, r3
    294e:	71e3      	strb	r3, [r4, #7]
    2950:	7223      	strb	r3, [r4, #8]
    2952:	e00e      	b.n	2972 <nwkRoutePrepareTx+0x3a>
	} else if (header->nwkFcf.linkLocal) {
    2954:	7ae3      	ldrb	r3, [r4, #11]
    2956:	075b      	lsls	r3, r3, #29
    2958:	d503      	bpl.n	2962 <nwkRoutePrepareTx+0x2a>
		header->macDstAddr = header->nwkDstAddr;
    295a:	71e0      	strb	r0, [r4, #7]
    295c:	0a00      	lsrs	r0, r0, #8
    295e:	7220      	strb	r0, [r4, #8]
    2960:	e007      	b.n	2972 <nwkRoutePrepareTx+0x3a>
	}
#endif

	else {
		header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr,
				header->nwkFcf.multicast);
    2962:	7ae1      	ldrb	r1, [r4, #11]
    2964:	0709      	lsls	r1, r1, #28
		header->nwkFcf.linkLocal = 1;
	}
#endif

	else {
		header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr,
    2966:	0fc9      	lsrs	r1, r1, #31
    2968:	4b03      	ldr	r3, [pc, #12]	; (2978 <nwkRoutePrepareTx+0x40>)
    296a:	4798      	blx	r3
    296c:	71e0      	strb	r0, [r4, #7]
    296e:	0a00      	lsrs	r0, r0, #8
    2970:	7220      	strb	r0, [r4, #8]
		if (NWK_ROUTE_UNKNOWN == header->macDstAddr) {
			nwkRouteDiscoveryRequest(frame);
		}
  #endif
	}
}
    2972:	bd10      	pop	{r4, pc}
    2974:	0000ffff 	.word	0x0000ffff
    2978:	000027c5 	.word	0x000027c5

0000297c <nwkRouteFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
    297c:	b5f0      	push	{r4, r5, r6, r7, lr}
    297e:	4647      	mov	r7, r8
    2980:	b480      	push	{r7}
    2982:	0006      	movs	r6, r0
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_ROUTE_UNKNOWN !=
			NWK_RouteNextHop(header->nwkDstAddr,
    2984:	7bc2      	ldrb	r2, [r0, #15]
    2986:	7c07      	ldrb	r7, [r0, #16]
    2988:	023f      	lsls	r7, r7, #8
    298a:	4317      	orrs	r7, r2
			header->nwkFcf.multicast)) {
    298c:	7ac4      	ldrb	r4, [r0, #11]
    298e:	0724      	lsls	r4, r4, #28
    2990:	0fe4      	lsrs	r4, r4, #31
void nwkRouteFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_ROUTE_UNKNOWN !=
			NWK_RouteNextHop(header->nwkDstAddr,
    2992:	b2e1      	uxtb	r1, r4
    2994:	0038      	movs	r0, r7
    2996:	4b2a      	ldr	r3, [pc, #168]	; (2a40 <nwkRouteFrame+0xc4>)
    2998:	4798      	blx	r3
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_ROUTE_UNKNOWN !=
    299a:	4b2a      	ldr	r3, [pc, #168]	; (2a44 <nwkRouteFrame+0xc8>)
    299c:	4298      	cmp	r0, r3
    299e:	d00e      	beq.n	29be <nwkRouteFrame+0x42>
			NWK_RouteNextHop(header->nwkDstAddr,
			header->nwkFcf.multicast)) {
		frame->tx.confirm = NULL;
    29a0:	2200      	movs	r2, #0
    29a2:	2389      	movs	r3, #137	; 0x89
    29a4:	54f2      	strb	r2, [r6, r3]
    29a6:	0033      	movs	r3, r6
    29a8:	3389      	adds	r3, #137	; 0x89
    29aa:	705a      	strb	r2, [r3, #1]
    29ac:	709a      	strb	r2, [r3, #2]
    29ae:	70da      	strb	r2, [r3, #3]
		frame->tx.control = NWK_TX_CONTROL_ROUTING;
    29b0:	3202      	adds	r2, #2
    29b2:	2388      	movs	r3, #136	; 0x88
    29b4:	54f2      	strb	r2, [r6, r3]
		nwkTxFrame(frame);
    29b6:	0030      	movs	r0, r6
    29b8:	4b23      	ldr	r3, [pc, #140]	; (2a48 <nwkRouteFrame+0xcc>)
    29ba:	4798      	blx	r3
    29bc:	e03d      	b.n	2a3a <nwkRouteFrame+0xbe>
	} else {
		nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr,
    29be:	7b72      	ldrb	r2, [r6, #13]
    29c0:	7bb3      	ldrb	r3, [r6, #14]
    29c2:	021b      	lsls	r3, r3, #8
    29c4:	4313      	orrs	r3, r2
    29c6:	4698      	mov	r8, r3
		uint8_t multicast)
{
	NwkFrame_t *frame;
	NwkCommandRouteError_t *command;

	if (NULL == (frame = nwkFrameAlloc())) {
    29c8:	4b20      	ldr	r3, [pc, #128]	; (2a4c <nwkRouteFrame+0xd0>)
    29ca:	4798      	blx	r3
    29cc:	1e05      	subs	r5, r0, #0
    29ce:	d031      	beq.n	2a34 <nwkRouteFrame+0xb8>
		return;
	}

	nwkFrameCommandInit(frame);
    29d0:	4b1f      	ldr	r3, [pc, #124]	; (2a50 <nwkRouteFrame+0xd4>)
    29d2:	4798      	blx	r3

	frame->size += sizeof(NwkCommandRouteError_t);
    29d4:	786b      	ldrb	r3, [r5, #1]
    29d6:	3306      	adds	r3, #6
    29d8:	706b      	strb	r3, [r5, #1]
	frame->tx.confirm = NULL;
    29da:	2200      	movs	r2, #0
    29dc:	2389      	movs	r3, #137	; 0x89
    29de:	54ea      	strb	r2, [r5, r3]
    29e0:	002b      	movs	r3, r5
    29e2:	3389      	adds	r3, #137	; 0x89
    29e4:	705a      	strb	r2, [r3, #1]
    29e6:	709a      	strb	r2, [r3, #2]
    29e8:	70da      	strb	r2, [r3, #3]

	frame->header.nwkDstAddr = src;
    29ea:	23ff      	movs	r3, #255	; 0xff
    29ec:	4642      	mov	r2, r8
    29ee:	401a      	ands	r2, r3
    29f0:	4694      	mov	ip, r2
    29f2:	73ea      	strb	r2, [r5, #15]
    29f4:	4643      	mov	r3, r8
    29f6:	0a1b      	lsrs	r3, r3, #8
    29f8:	4698      	mov	r8, r3
    29fa:	742b      	strb	r3, [r5, #16]

	command = (NwkCommandRouteError_t *)frame->payload;
    29fc:	2381      	movs	r3, #129	; 0x81
    29fe:	5ce8      	ldrb	r0, [r5, r3]
    2a00:	3301      	adds	r3, #1
    2a02:	5cea      	ldrb	r2, [r5, r3]
    2a04:	0212      	lsls	r2, r2, #8
    2a06:	4302      	orrs	r2, r0
    2a08:	3301      	adds	r3, #1
    2a0a:	5ceb      	ldrb	r3, [r5, r3]
    2a0c:	041b      	lsls	r3, r3, #16
    2a0e:	4313      	orrs	r3, r2
    2a10:	001a      	movs	r2, r3
    2a12:	2384      	movs	r3, #132	; 0x84
    2a14:	5ceb      	ldrb	r3, [r5, r3]
    2a16:	061b      	lsls	r3, r3, #24
    2a18:	4313      	orrs	r3, r2
	command->id = NWK_COMMAND_ROUTE_ERROR;
    2a1a:	2201      	movs	r2, #1
    2a1c:	701a      	strb	r2, [r3, #0]
	command->srcAddr = src;
    2a1e:	4662      	mov	r2, ip
    2a20:	705a      	strb	r2, [r3, #1]
    2a22:	4642      	mov	r2, r8
    2a24:	709a      	strb	r2, [r3, #2]
	command->dstAddr = dst;
    2a26:	70df      	strb	r7, [r3, #3]
    2a28:	0a3f      	lsrs	r7, r7, #8
    2a2a:	711f      	strb	r7, [r3, #4]
	command->multicast = multicast;
    2a2c:	715c      	strb	r4, [r3, #5]

	nwkTxFrame(frame);
    2a2e:	0028      	movs	r0, r5
    2a30:	4b05      	ldr	r3, [pc, #20]	; (2a48 <nwkRouteFrame+0xcc>)
    2a32:	4798      	blx	r3
		frame->tx.control = NWK_TX_CONTROL_ROUTING;
		nwkTxFrame(frame);
	} else {
		nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr,
				header->nwkFcf.multicast);
		nwkFrameFree(frame);
    2a34:	0030      	movs	r0, r6
    2a36:	4b07      	ldr	r3, [pc, #28]	; (2a54 <nwkRouteFrame+0xd8>)
    2a38:	4798      	blx	r3
	}
}
    2a3a:	bc04      	pop	{r2}
    2a3c:	4690      	mov	r8, r2
    2a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a40:	000027c5 	.word	0x000027c5
    2a44:	0000ffff 	.word	0x0000ffff
    2a48:	000032d1 	.word	0x000032d1
    2a4c:	0000261d 	.word	0x0000261d
    2a50:	000026dd 	.word	0x000026dd
    2a54:	0000268d 	.word	0x0000268d

00002a58 <nwkRouteErrorReceived>:
}

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
    2a58:	b510      	push	{r4, lr}
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

	if (sizeof(NwkCommandRouteError_t) != ind->size) {
    2a5a:	7b02      	ldrb	r2, [r0, #12]
		return false;
    2a5c:	2300      	movs	r3, #0
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

	if (sizeof(NwkCommandRouteError_t) != ind->size) {
    2a5e:	2a06      	cmp	r2, #6
    2a60:	d108      	bne.n	2a74 <nwkRouteErrorReceived+0x1c>

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;
    2a62:	6882      	ldr	r2, [r0, #8]

	if (sizeof(NwkCommandRouteError_t) != ind->size) {
		return false;
	}

	nwkRouteRemove(command->dstAddr, command->multicast);
    2a64:	7951      	ldrb	r1, [r2, #5]
    2a66:	78d3      	ldrb	r3, [r2, #3]
    2a68:	7910      	ldrb	r0, [r2, #4]
    2a6a:	0200      	lsls	r0, r0, #8
    2a6c:	4318      	orrs	r0, r3
    2a6e:	4b02      	ldr	r3, [pc, #8]	; (2a78 <nwkRouteErrorReceived+0x20>)
    2a70:	4798      	blx	r3

	return true;
    2a72:	2301      	movs	r3, #1
}
    2a74:	0018      	movs	r0, r3
    2a76:	bd10      	pop	{r4, pc}
    2a78:	000027e1 	.word	0x000027e1

00002a7c <nwkRxSeriveDataInd>:
}

/*************************************************************************//**
*****************************************************************************/
static bool nwkRxSeriveDataInd(NWK_DataInd_t *ind)
{
    2a7c:	b510      	push	{r4, lr}
	if (0 == (ind->options & NWK_IND_OPT_SECURED)) {
		return false;
	}
#endif

	if (ind->size < 1) {
    2a7e:	7b02      	ldrb	r2, [r0, #12]
		return false;
    2a80:	2300      	movs	r3, #0
	if (0 == (ind->options & NWK_IND_OPT_SECURED)) {
		return false;
	}
#endif

	if (ind->size < 1) {
    2a82:	2a00      	cmp	r2, #0
    2a84:	d00f      	beq.n	2aa6 <nwkRxSeriveDataInd+0x2a>
		return false;
	}

	switch (ind->data[0]) {
    2a86:	6883      	ldr	r3, [r0, #8]
    2a88:	781b      	ldrb	r3, [r3, #0]
    2a8a:	2b00      	cmp	r3, #0
    2a8c:	d002      	beq.n	2a94 <nwkRxSeriveDataInd+0x18>
    2a8e:	2b01      	cmp	r3, #1
    2a90:	d004      	beq.n	2a9c <nwkRxSeriveDataInd+0x20>
    2a92:	e007      	b.n	2aa4 <nwkRxSeriveDataInd+0x28>
	case NWK_COMMAND_ACK:
		return nwkTxAckReceived(ind);
    2a94:	4b05      	ldr	r3, [pc, #20]	; (2aac <nwkRxSeriveDataInd+0x30>)
    2a96:	4798      	blx	r3
    2a98:	0003      	movs	r3, r0
    2a9a:	e004      	b.n	2aa6 <nwkRxSeriveDataInd+0x2a>

#ifdef NWK_ENABLE_ROUTING
	case NWK_COMMAND_ROUTE_ERROR:
		return nwkRouteErrorReceived(ind);
    2a9c:	4b04      	ldr	r3, [pc, #16]	; (2ab0 <nwkRxSeriveDataInd+0x34>)
    2a9e:	4798      	blx	r3
    2aa0:	0003      	movs	r3, r0
    2aa2:	e000      	b.n	2aa6 <nwkRxSeriveDataInd+0x2a>
	case NWK_COMMAND_ROUTE_REPLY:
		return nwkRouteDiscoveryReplyReceived(ind);
#endif

	default:
		return false;
    2aa4:	2300      	movs	r3, #0
	}
}
    2aa6:	0018      	movs	r0, r3
    2aa8:	bd10      	pop	{r4, pc}
    2aaa:	46c0      	nop			; (mov r8, r8)
    2aac:	00003415 	.word	0x00003415
    2ab0:	00002a59 	.word	0x00002a59

00002ab4 <nwkRxDuplicateRejectionTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
    2ab4:	b570      	push	{r4, r5, r6, lr}
    2ab6:	4909      	ldr	r1, [pc, #36]	; (2adc <nwkRxDuplicateRejectionTimerHandler+0x28>)
    2ab8:	1d0b      	adds	r3, r1, #4
    2aba:	3140      	adds	r1, #64	; 0x40
	bool restart = false;
    2abc:	2400      	movs	r4, #0

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		if (nwkRxDuplicateRejectionTable[i].ttl) {
			nwkRxDuplicateRejectionTable[i].ttl--;
			restart = true;
    2abe:	2501      	movs	r5, #1
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
	bool restart = false;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		if (nwkRxDuplicateRejectionTable[i].ttl) {
    2ac0:	781a      	ldrb	r2, [r3, #0]
    2ac2:	2a00      	cmp	r2, #0
    2ac4:	d002      	beq.n	2acc <nwkRxDuplicateRejectionTimerHandler+0x18>
			nwkRxDuplicateRejectionTable[i].ttl--;
    2ac6:	3a01      	subs	r2, #1
    2ac8:	701a      	strb	r2, [r3, #0]
			restart = true;
    2aca:	002c      	movs	r4, r5
    2acc:	3306      	adds	r3, #6
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
	bool restart = false;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    2ace:	428b      	cmp	r3, r1
    2ad0:	d1f6      	bne.n	2ac0 <nwkRxDuplicateRejectionTimerHandler+0xc>
			nwkRxDuplicateRejectionTable[i].ttl--;
			restart = true;
		}
	}

	if (restart) {
    2ad2:	2c00      	cmp	r4, #0
    2ad4:	d001      	beq.n	2ada <nwkRxDuplicateRejectionTimerHandler+0x26>
		SYS_TimerStart(timer);
    2ad6:	4b02      	ldr	r3, [pc, #8]	; (2ae0 <nwkRxDuplicateRejectionTimerHandler+0x2c>)
    2ad8:	4798      	blx	r3
	}
}
    2ada:	bd70      	pop	{r4, r5, r6, pc}
    2adc:	20000674 	.word	0x20000674
    2ae0:	00003961 	.word	0x00003961

00002ae4 <nwkRxInit>:

/*************************************************************************//**
*  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
    2ae4:	b510      	push	{r4, lr}
    2ae6:	4a0a      	ldr	r2, [pc, #40]	; (2b10 <nwkRxInit+0x2c>)
    2ae8:	1d13      	adds	r3, r2, #4
    2aea:	3240      	adds	r2, #64	; 0x40
	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		nwkRxDuplicateRejectionTable[i].ttl = 0;
    2aec:	2100      	movs	r1, #0
    2aee:	7019      	strb	r1, [r3, #0]
    2af0:	3306      	adds	r3, #6
/*************************************************************************//**
*  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    2af2:	4293      	cmp	r3, r2
    2af4:	d1fb      	bne.n	2aee <nwkRxInit+0xa>
		nwkRxDuplicateRejectionTable[i].ttl = 0;
	}

	nwkRxDuplicateRejectionTimer.interval
		= NWK_RX_DUPLICATE_REJECTION_TIMER_INTERVAL;
    2af6:	4b07      	ldr	r3, [pc, #28]	; (2b14 <nwkRxInit+0x30>)
    2af8:	2264      	movs	r2, #100	; 0x64
    2afa:	609a      	str	r2, [r3, #8]
	nwkRxDuplicateRejectionTimer.mode = SYS_TIMER_INTERVAL_MODE;
    2afc:	2200      	movs	r2, #0
    2afe:	731a      	strb	r2, [r3, #12]
	nwkRxDuplicateRejectionTimer.handler
		= nwkRxDuplicateRejectionTimerHandler;
    2b00:	4a05      	ldr	r2, [pc, #20]	; (2b18 <nwkRxInit+0x34>)
    2b02:	611a      	str	r2, [r3, #16]

	NWK_OpenEndpoint(NWK_SERVICE_ENDPOINT_ID, nwkRxSeriveDataInd);
    2b04:	4905      	ldr	r1, [pc, #20]	; (2b1c <nwkRxInit+0x38>)
    2b06:	2000      	movs	r0, #0
    2b08:	4b05      	ldr	r3, [pc, #20]	; (2b20 <nwkRxInit+0x3c>)
    2b0a:	4798      	blx	r3
}
    2b0c:	bd10      	pop	{r4, pc}
    2b0e:	46c0      	nop			; (mov r8, r8)
    2b10:	20000674 	.word	0x20000674
    2b14:	200006b4 	.word	0x200006b4
    2b18:	00002ab5 	.word	0x00002ab5
    2b1c:	00002a7d 	.word	0x00002a7d
    2b20:	00002411 	.word	0x00002411

00002b24 <PHY_DataInd>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataInd(PHY_DataInd_t *ind)
{
    2b24:	b510      	push	{r4, lr}
    2b26:	0004      	movs	r4, r0
	NwkFrame_t *frame;

	if (0x88 != ind->data[1] ||
    2b28:	6803      	ldr	r3, [r0, #0]
    2b2a:	785a      	ldrb	r2, [r3, #1]
    2b2c:	2a88      	cmp	r2, #136	; 0x88
    2b2e:	d11b      	bne.n	2b68 <PHY_DataInd+0x44>
			(0x61 != ind->data[0] && 0x41 != ind->data[0]) ||
    2b30:	781b      	ldrb	r3, [r3, #0]
    2b32:	3a68      	subs	r2, #104	; 0x68
    2b34:	4393      	bics	r3, r2
    2b36:	2b41      	cmp	r3, #65	; 0x41
    2b38:	d116      	bne.n	2b68 <PHY_DataInd+0x44>
    2b3a:	7903      	ldrb	r3, [r0, #4]
    2b3c:	2b0f      	cmp	r3, #15
    2b3e:	d913      	bls.n	2b68 <PHY_DataInd+0x44>
			ind->size < sizeof(NwkFrameHeader_t)) {
		return;
	}

	if (NULL == (frame = nwkFrameAlloc())) {
    2b40:	4b0a      	ldr	r3, [pc, #40]	; (2b6c <PHY_DataInd+0x48>)
    2b42:	4798      	blx	r3
    2b44:	2800      	cmp	r0, #0
    2b46:	d00f      	beq.n	2b68 <PHY_DataInd+0x44>
		return;
	}

	frame->state = NWK_RX_STATE_RECEIVED;
    2b48:	2320      	movs	r3, #32
    2b4a:	7003      	strb	r3, [r0, #0]
	frame->size = ind->size;
    2b4c:	7923      	ldrb	r3, [r4, #4]
    2b4e:	7043      	strb	r3, [r0, #1]
	frame->rx.lqi = ind->lqi;
    2b50:	7962      	ldrb	r2, [r4, #5]
    2b52:	2385      	movs	r3, #133	; 0x85
    2b54:	54c2      	strb	r2, [r0, r3]
	frame->rx.rssi = ind->rssi;
    2b56:	2206      	movs	r2, #6
    2b58:	56a2      	ldrsb	r2, [r4, r2]
    2b5a:	3301      	adds	r3, #1
    2b5c:	54c2      	strb	r2, [r0, r3]
	memcpy(frame->data, ind->data, ind->size);
    2b5e:	3002      	adds	r0, #2
    2b60:	7922      	ldrb	r2, [r4, #4]
    2b62:	6821      	ldr	r1, [r4, #0]
    2b64:	4b02      	ldr	r3, [pc, #8]	; (2b70 <PHY_DataInd+0x4c>)
    2b66:	4798      	blx	r3
}
    2b68:	bd10      	pop	{r4, pc}
    2b6a:	46c0      	nop			; (mov r8, r8)
    2b6c:	0000261d 	.word	0x0000261d
    2b70:	00004b9d 	.word	0x00004b9d

00002b74 <nwkRxDecryptConf>:

/*************************************************************************//**
*****************************************************************************/
void nwkRxDecryptConf(NwkFrame_t *frame, bool status)
{
	if (status) {
    2b74:	2900      	cmp	r1, #0
    2b76:	d002      	beq.n	2b7e <nwkRxDecryptConf+0xa>
		frame->state = NWK_RX_STATE_INDICATE;
    2b78:	2322      	movs	r3, #34	; 0x22
    2b7a:	7003      	strb	r3, [r0, #0]
    2b7c:	e001      	b.n	2b82 <nwkRxDecryptConf+0xe>
	} else {
		frame->state = NWK_RX_STATE_FINISH;
    2b7e:	2324      	movs	r3, #36	; 0x24
    2b80:	7003      	strb	r3, [r0, #0]
	}
}
    2b82:	4770      	bx	lr

00002b84 <nwkRxTaskHandler>:

/*************************************************************************//**
*  @brief Rx Module task handler
*****************************************************************************/
void nwkRxTaskHandler(void)
{
    2b84:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b86:	464f      	mov	r7, r9
    2b88:	4646      	mov	r6, r8
    2b8a:	b4c0      	push	{r6, r7}
    2b8c:	b087      	sub	sp, #28
	NwkFrame_t *frame = NULL;
    2b8e:	2400      	movs	r4, #0

	while (NULL != (frame = nwkFrameNext(frame))) {
    2b90:	4dd8      	ldr	r5, [pc, #864]	; (2ef4 <nwkRxTaskHandler+0x370>)
		switch (frame->state) {
    2b92:	4ed9      	ldr	r6, [pc, #868]	; (2ef8 <nwkRxTaskHandler+0x374>)
*****************************************************************************/
void nwkRxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    2b94:	e1d5      	b.n	2f42 <nwkRxTaskHandler+0x3be>
		switch (frame->state) {
    2b96:	7823      	ldrb	r3, [r4, #0]
    2b98:	3b20      	subs	r3, #32
    2b9a:	b2da      	uxtb	r2, r3
    2b9c:	2a04      	cmp	r2, #4
    2b9e:	d900      	bls.n	2ba2 <nwkRxTaskHandler+0x1e>
    2ba0:	e1cf      	b.n	2f42 <nwkRxTaskHandler+0x3be>
    2ba2:	0093      	lsls	r3, r2, #2
    2ba4:	58f3      	ldr	r3, [r6, r3]
    2ba6:	469f      	mov	pc, r3
*****************************************************************************/
static void nwkRxHandleReceivedFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;

	frame->state = NWK_RX_STATE_FINISH;
    2ba8:	2324      	movs	r3, #36	; 0x24
    2baa:	7023      	strb	r3, [r4, #0]
	if (header->nwkFcf.multicast && header->nwkFcf.ackRequest) {
		return;
	}

#else
	if (header->nwkFcf.multicast) {
    2bac:	7ae1      	ldrb	r1, [r4, #11]
    2bae:	070b      	lsls	r3, r1, #28
    2bb0:	d500      	bpl.n	2bb4 <nwkRxTaskHandler+0x30>
    2bb2:	e1c6      	b.n	2f42 <nwkRxTaskHandler+0x3be>
		return;
	}
#endif

	if (NWK_BROADCAST_PANID == header->macDstPanId) {
    2bb4:	7962      	ldrb	r2, [r4, #5]
    2bb6:	79a3      	ldrb	r3, [r4, #6]
    2bb8:	021b      	lsls	r3, r3, #8
    2bba:	4313      	orrs	r3, r2
    2bbc:	4acf      	ldr	r2, [pc, #828]	; (2efc <nwkRxTaskHandler+0x378>)
    2bbe:	4293      	cmp	r3, r2
    2bc0:	d113      	bne.n	2bea <nwkRxTaskHandler+0x66>
		if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR ==
    2bc2:	7be2      	ldrb	r2, [r4, #15]
    2bc4:	7c23      	ldrb	r3, [r4, #16]
    2bc6:	021b      	lsls	r3, r3, #8
    2bc8:	4313      	orrs	r3, r2
    2bca:	4acd      	ldr	r2, [pc, #820]	; (2f00 <nwkRxTaskHandler+0x37c>)
    2bcc:	8812      	ldrh	r2, [r2, #0]
    2bce:	429a      	cmp	r2, r3
    2bd0:	d003      	beq.n	2bda <nwkRxTaskHandler+0x56>
    2bd2:	4aca      	ldr	r2, [pc, #808]	; (2efc <nwkRxTaskHandler+0x378>)
    2bd4:	4293      	cmp	r3, r2
    2bd6:	d000      	beq.n	2bda <nwkRxTaskHandler+0x56>
    2bd8:	e1b3      	b.n	2f42 <nwkRxTaskHandler+0x3be>
				header->nwkDstAddr) {
    #ifdef NWK_ENABLE_SECURITY
			if (header->nwkFcf.security) {
    2bda:	078b      	lsls	r3, r1, #30
    2bdc:	d502      	bpl.n	2be4 <nwkRxTaskHandler+0x60>
				frame->state = NWK_RX_STATE_DECRYPT;
    2bde:	2321      	movs	r3, #33	; 0x21
    2be0:	7023      	strb	r3, [r4, #0]
    2be2:	e1ae      	b.n	2f42 <nwkRxTaskHandler+0x3be>
			} else
    #endif
			frame->state = NWK_RX_STATE_INDICATE;
    2be4:	2322      	movs	r3, #34	; 0x22
    2be6:	7023      	strb	r3, [r4, #0]
    2be8:	e1ab      	b.n	2f42 <nwkRxTaskHandler+0x3be>
	if (!NWK_FilterAddress(header->macSrcAddr, &frame->rx.lqi)) {
		return;
	}
#endif

	if (NWK_BROADCAST_ADDR == header->nwkDstAddr &&
    2bea:	7be2      	ldrb	r2, [r4, #15]
    2bec:	7c23      	ldrb	r3, [r4, #16]
    2bee:	021b      	lsls	r3, r3, #8
    2bf0:	4313      	orrs	r3, r2
    2bf2:	4ac2      	ldr	r2, [pc, #776]	; (2efc <nwkRxTaskHandler+0x378>)
    2bf4:	4293      	cmp	r3, r2
    2bf6:	d102      	bne.n	2bfe <nwkRxTaskHandler+0x7a>
    2bf8:	07cb      	lsls	r3, r1, #31
    2bfa:	d500      	bpl.n	2bfe <nwkRxTaskHandler+0x7a>
    2bfc:	e1a1      	b.n	2f42 <nwkRxTaskHandler+0x3be>
			header->nwkFcf.ackRequest) {
		return;
	}

	if (nwkIb.addr == header->nwkSrcAddr) {
    2bfe:	7b62      	ldrb	r2, [r4, #13]
    2c00:	7ba3      	ldrb	r3, [r4, #14]
    2c02:	021b      	lsls	r3, r3, #8
    2c04:	49be      	ldr	r1, [pc, #760]	; (2f00 <nwkRxTaskHandler+0x37c>)
    2c06:	8809      	ldrh	r1, [r1, #0]
    2c08:	4313      	orrs	r3, r2
    2c0a:	4299      	cmp	r1, r3
    2c0c:	d100      	bne.n	2c10 <nwkRxTaskHandler+0x8c>
    2c0e:	e198      	b.n	2f42 <nwkRxTaskHandler+0x3be>
		return;
	}

#ifdef NWK_ENABLE_ROUTING
	nwkRouteFrameReceived(frame);
    2c10:	0020      	movs	r0, r4
    2c12:	4bbc      	ldr	r3, [pc, #752]	; (2f04 <nwkRxTaskHandler+0x380>)
    2c14:	4798      	blx	r3
    2c16:	4bbc      	ldr	r3, [pc, #752]	; (2f08 <nwkRxTaskHandler+0x384>)
    2c18:	2200      	movs	r2, #0
/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;
    2c1a:	2100      	movs	r1, #0
    2c1c:	468c      	mov	ip, r1

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		entry = &nwkRxDuplicateRejectionTable[i];

		if (entry->ttl && header->nwkSrcAddr == entry->src) {
    2c1e:	1ca0      	adds	r0, r4, #2
{
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		entry = &nwkRxDuplicateRejectionTable[i];
    2c20:	9201      	str	r2, [sp, #4]

		if (entry->ttl && header->nwkSrcAddr == entry->src) {
    2c22:	7919      	ldrb	r1, [r3, #4]
    2c24:	2900      	cmp	r1, #0
    2c26:	d054      	beq.n	2cd2 <nwkRxTaskHandler+0x14e>
    2c28:	7ac7      	ldrb	r7, [r0, #11]
    2c2a:	7b01      	ldrb	r1, [r0, #12]
    2c2c:	0209      	lsls	r1, r1, #8
    2c2e:	4688      	mov	r8, r1
    2c30:	8819      	ldrh	r1, [r3, #0]
    2c32:	4689      	mov	r9, r1
    2c34:	4641      	mov	r1, r8
    2c36:	4339      	orrs	r1, r7
    2c38:	4589      	cmp	r9, r1
    2c3a:	d14b      	bne.n	2cd4 <nwkRxTaskHandler+0x150>
			uint8_t diff = (int8_t)entry->seq - header->nwkSeq;
    2c3c:	7b27      	ldrb	r7, [r4, #12]
    2c3e:	0011      	movs	r1, r2
    2c40:	0053      	lsls	r3, r2, #1
    2c42:	4694      	mov	ip, r2
    2c44:	4463      	add	r3, ip
    2c46:	005b      	lsls	r3, r3, #1
    2c48:	4aaf      	ldr	r2, [pc, #700]	; (2f08 <nwkRxTaskHandler+0x384>)
    2c4a:	18d3      	adds	r3, r2, r3
    2c4c:	789a      	ldrb	r2, [r3, #2]
    2c4e:	1bd2      	subs	r2, r2, r7
    2c50:	b2d2      	uxtb	r2, r2

			if (diff < 8) {
    2c52:	2a07      	cmp	r2, #7
    2c54:	d827      	bhi.n	2ca6 <nwkRxTaskHandler+0x122>
				if (entry->mask & (1 << diff)) {
    2c56:	004b      	lsls	r3, r1, #1
    2c58:	4463      	add	r3, ip
    2c5a:	005b      	lsls	r3, r3, #1
    2c5c:	49aa      	ldr	r1, [pc, #680]	; (2f08 <nwkRxTaskHandler+0x384>)
    2c5e:	18cb      	adds	r3, r1, r3
    2c60:	78db      	ldrb	r3, [r3, #3]
    2c62:	0019      	movs	r1, r3
    2c64:	4111      	asrs	r1, r2
    2c66:	07c9      	lsls	r1, r1, #31
    2c68:	d512      	bpl.n	2c90 <nwkRxTaskHandler+0x10c>
	#ifdef NWK_ENABLE_ROUTING
					if (nwkIb.addr == header->macDstAddr) {
    2c6a:	79e2      	ldrb	r2, [r4, #7]
    2c6c:	7a23      	ldrb	r3, [r4, #8]
    2c6e:	021b      	lsls	r3, r3, #8
    2c70:	49a3      	ldr	r1, [pc, #652]	; (2f00 <nwkRxTaskHandler+0x37c>)
    2c72:	8809      	ldrh	r1, [r1, #0]
    2c74:	4313      	orrs	r3, r2
    2c76:	4299      	cmp	r1, r3
    2c78:	d000      	beq.n	2c7c <nwkRxTaskHandler+0xf8>
    2c7a:	e162      	b.n	2f42 <nwkRxTaskHandler+0x3be>
						nwkRouteRemove(
								header->nwkDstAddr,
								header->nwkFcf.multicast);
    2c7c:	7ae1      	ldrb	r1, [r4, #11]
    2c7e:	0709      	lsls	r1, r1, #28

			if (diff < 8) {
				if (entry->mask & (1 << diff)) {
	#ifdef NWK_ENABLE_ROUTING
					if (nwkIb.addr == header->macDstAddr) {
						nwkRouteRemove(
    2c80:	0fc9      	lsrs	r1, r1, #31
    2c82:	7be3      	ldrb	r3, [r4, #15]
    2c84:	7c20      	ldrb	r0, [r4, #16]
    2c86:	0200      	lsls	r0, r0, #8
    2c88:	4318      	orrs	r0, r3
    2c8a:	4ba0      	ldr	r3, [pc, #640]	; (2f0c <nwkRxTaskHandler+0x388>)
    2c8c:	4798      	blx	r3
    2c8e:	e158      	b.n	2f42 <nwkRxTaskHandler+0x3be>
					}
	#endif
					return true;
				}

				entry->mask |= (1 << diff);
    2c90:	9801      	ldr	r0, [sp, #4]
    2c92:	0041      	lsls	r1, r0, #1
    2c94:	1808      	adds	r0, r1, r0
    2c96:	0040      	lsls	r0, r0, #1
    2c98:	499b      	ldr	r1, [pc, #620]	; (2f08 <nwkRxTaskHandler+0x384>)
    2c9a:	1809      	adds	r1, r1, r0
    2c9c:	2001      	movs	r0, #1
    2c9e:	4090      	lsls	r0, r2
    2ca0:	4303      	orrs	r3, r0
    2ca2:	70cb      	strb	r3, [r1, #3]
    2ca4:	e153      	b.n	2f4e <nwkRxTaskHandler+0x3ca>
				return false;
			} else {
				uint8_t shift = -(int8_t)diff;

				entry->seq = header->nwkSeq;
    2ca6:	4b98      	ldr	r3, [pc, #608]	; (2f08 <nwkRxTaskHandler+0x384>)
    2ca8:	9901      	ldr	r1, [sp, #4]
    2caa:	0048      	lsls	r0, r1, #1
    2cac:	1841      	adds	r1, r0, r1
    2cae:	0049      	lsls	r1, r1, #1
    2cb0:	1859      	adds	r1, r3, r1
    2cb2:	708f      	strb	r7, [r1, #2]
				entry->mask = (entry->mask << shift) | 1;
    2cb4:	78cf      	ldrb	r7, [r1, #3]
    2cb6:	4252      	negs	r2, r2
    2cb8:	b2d2      	uxtb	r2, r2
    2cba:	4097      	lsls	r7, r2
    2cbc:	2201      	movs	r2, #1
    2cbe:	433a      	orrs	r2, r7
    2cc0:	70ca      	strb	r2, [r1, #3]
				entry->ttl = DUPLICATE_REJECTION_TTL;
    2cc2:	9901      	ldr	r1, [sp, #4]
    2cc4:	468c      	mov	ip, r1
    2cc6:	4460      	add	r0, ip
    2cc8:	0040      	lsls	r0, r0, #1
    2cca:	181b      	adds	r3, r3, r0
    2ccc:	221f      	movs	r2, #31
    2cce:	711a      	strb	r2, [r3, #4]
    2cd0:	e13d      	b.n	2f4e <nwkRxTaskHandler+0x3ca>
				return false;
			}
		}

		if (0 == entry->ttl) {
			freeEntry = entry;
    2cd2:	469c      	mov	ip, r3
    2cd4:	3201      	adds	r2, #1
    2cd6:	3306      	adds	r3, #6
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    2cd8:	2a0a      	cmp	r2, #10
    2cda:	d1a1      	bne.n	2c20 <nwkRxTaskHandler+0x9c>
		if (0 == entry->ttl) {
			freeEntry = entry;
		}
	}

	if (NULL == freeEntry) {
    2cdc:	4663      	mov	r3, ip
    2cde:	2b00      	cmp	r3, #0
    2ce0:	d100      	bne.n	2ce4 <nwkRxTaskHandler+0x160>
    2ce2:	e12e      	b.n	2f42 <nwkRxTaskHandler+0x3be>
		return true;
	}

	freeEntry->src = header->nwkSrcAddr;
    2ce4:	7b61      	ldrb	r1, [r4, #13]
    2ce6:	7ba2      	ldrb	r2, [r4, #14]
    2ce8:	0212      	lsls	r2, r2, #8
    2cea:	430a      	orrs	r2, r1
    2cec:	4661      	mov	r1, ip
    2cee:	800a      	strh	r2, [r1, #0]
	freeEntry->seq = header->nwkSeq;
    2cf0:	7b23      	ldrb	r3, [r4, #12]
    2cf2:	708b      	strb	r3, [r1, #2]
	freeEntry->mask = 1;
    2cf4:	2301      	movs	r3, #1
    2cf6:	70cb      	strb	r3, [r1, #3]
	freeEntry->ttl = DUPLICATE_REJECTION_TTL;
    2cf8:	331e      	adds	r3, #30
    2cfa:	710b      	strb	r3, [r1, #4]

	SYS_TimerStart(&nwkRxDuplicateRejectionTimer);
    2cfc:	4884      	ldr	r0, [pc, #528]	; (2f10 <nwkRxTaskHandler+0x38c>)
    2cfe:	4b85      	ldr	r3, [pc, #532]	; (2f14 <nwkRxTaskHandler+0x390>)
    2d00:	4798      	blx	r3
    2d02:	e124      	b.n	2f4e <nwkRxTaskHandler+0x3ca>
			frame->state = NWK_RX_STATE_INDICATE;
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
    2d04:	4b7e      	ldr	r3, [pc, #504]	; (2f00 <nwkRxTaskHandler+0x37c>)
    2d06:	8819      	ldrh	r1, [r3, #0]
				header->nwkDstAddr &&
    2d08:	7be2      	ldrb	r2, [r4, #15]
    2d0a:	7c23      	ldrb	r3, [r4, #16]
    2d0c:	021b      	lsls	r3, r3, #8
    2d0e:	4313      	orrs	r3, r2
			frame->state = NWK_RX_STATE_INDICATE;
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
    2d10:	4299      	cmp	r1, r3
    2d12:	d010      	beq.n	2d36 <nwkRxTaskHandler+0x1b2>
				header->nwkDstAddr &&
    2d14:	7ae2      	ldrb	r2, [r4, #11]
    2d16:	0752      	lsls	r2, r2, #29
    2d18:	d40a      	bmi.n	2d30 <nwkRxTaskHandler+0x1ac>
				0 == header->nwkFcf.linkLocal) {
			nwkTxBroadcastFrame(frame);
    2d1a:	0020      	movs	r0, r4
    2d1c:	4b7e      	ldr	r3, [pc, #504]	; (2f18 <nwkRxTaskHandler+0x394>)
    2d1e:	4798      	blx	r3
		}

		if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR ==
    2d20:	4b77      	ldr	r3, [pc, #476]	; (2f00 <nwkRxTaskHandler+0x37c>)
    2d22:	8819      	ldrh	r1, [r3, #0]
    2d24:	7be2      	ldrb	r2, [r4, #15]
    2d26:	7c23      	ldrb	r3, [r4, #16]
    2d28:	021b      	lsls	r3, r3, #8
    2d2a:	4313      	orrs	r3, r2
    2d2c:	4299      	cmp	r1, r3
    2d2e:	d002      	beq.n	2d36 <nwkRxTaskHandler+0x1b2>
    2d30:	4a72      	ldr	r2, [pc, #456]	; (2efc <nwkRxTaskHandler+0x378>)
    2d32:	4293      	cmp	r3, r2
    2d34:	d108      	bne.n	2d48 <nwkRxTaskHandler+0x1c4>
				header->nwkDstAddr) {
    #ifdef NWK_ENABLE_SECURITY
			if (header->nwkFcf.security) {
    2d36:	7ae3      	ldrb	r3, [r4, #11]
    2d38:	079b      	lsls	r3, r3, #30
    2d3a:	d502      	bpl.n	2d42 <nwkRxTaskHandler+0x1be>
				frame->state = NWK_RX_STATE_DECRYPT;
    2d3c:	2321      	movs	r3, #33	; 0x21
    2d3e:	7023      	strb	r3, [r4, #0]
    2d40:	e0ff      	b.n	2f42 <nwkRxTaskHandler+0x3be>
			} else
    #endif
			frame->state = NWK_RX_STATE_INDICATE;
    2d42:	2322      	movs	r3, #34	; 0x22
    2d44:	7023      	strb	r3, [r4, #0]
    2d46:	e0fc      	b.n	2f42 <nwkRxTaskHandler+0x3be>
		}

  #ifdef NWK_ENABLE_ROUTING
		else if (nwkIb.addr == header->macDstAddr) {
    2d48:	79e2      	ldrb	r2, [r4, #7]
    2d4a:	7a23      	ldrb	r3, [r4, #8]
    2d4c:	021b      	lsls	r3, r3, #8
    2d4e:	4313      	orrs	r3, r2
    2d50:	428b      	cmp	r3, r1
    2d52:	d000      	beq.n	2d56 <nwkRxTaskHandler+0x1d2>
    2d54:	e0f5      	b.n	2f42 <nwkRxTaskHandler+0x3be>
			frame->state = NWK_RX_STATE_ROUTE;
    2d56:	2323      	movs	r3, #35	; 0x23
    2d58:	7023      	strb	r3, [r4, #0]
    2d5a:	e0f2      	b.n	2f42 <nwkRxTaskHandler+0x3be>
		break;

#ifdef NWK_ENABLE_SECURITY
		case NWK_RX_STATE_DECRYPT:
		{
			nwkSecurityProcess(frame, false);
    2d5c:	2100      	movs	r1, #0
    2d5e:	0020      	movs	r0, r4
    2d60:	4b6e      	ldr	r3, [pc, #440]	; (2f1c <nwkRxTaskHandler+0x398>)
    2d62:	4798      	blx	r3
		}
		break;
    2d64:	e0ed      	b.n	2f42 <nwkRxTaskHandler+0x3be>
*****************************************************************************/
static void nwkRxHandleIndication(NwkFrame_t *frame)
{
	bool ack;

	nwkRxAckControl = 0;
    2d66:	2200      	movs	r2, #0
    2d68:	4b6d      	ldr	r3, [pc, #436]	; (2f20 <nwkRxTaskHandler+0x39c>)
    2d6a:	701a      	strb	r2, [r3, #0]
static bool nwkRxIndicateFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;
	NWK_DataInd_t ind;

	if (NULL == nwkIb.endpoint[header->nwkDstEndpoint]) {
    2d6c:	7c60      	ldrb	r0, [r4, #17]
    2d6e:	0900      	lsrs	r0, r0, #4
    2d70:	b2c3      	uxtb	r3, r0
    2d72:	3302      	adds	r3, #2
    2d74:	009b      	lsls	r3, r3, #2
    2d76:	4a62      	ldr	r2, [pc, #392]	; (2f00 <nwkRxTaskHandler+0x37c>)
    2d78:	589b      	ldr	r3, [r3, r2]
    2d7a:	4698      	mov	r8, r3
    2d7c:	2b00      	cmp	r3, #0
    2d7e:	d05a      	beq.n	2e36 <nwkRxTaskHandler+0x2b2>
		return false;
	}

	ind.srcAddr = header->nwkSrcAddr;
    2d80:	1ca7      	adds	r7, r4, #2
    2d82:	7b63      	ldrb	r3, [r4, #13]
    2d84:	7ba2      	ldrb	r2, [r4, #14]
    2d86:	0212      	lsls	r2, r2, #8
    2d88:	431a      	orrs	r2, r3
    2d8a:	4691      	mov	r9, r2
    2d8c:	ab02      	add	r3, sp, #8
    2d8e:	801a      	strh	r2, [r3, #0]
	ind.dstAddr = header->nwkDstAddr;
    2d90:	7be3      	ldrb	r3, [r4, #15]
    2d92:	7c21      	ldrb	r1, [r4, #16]
    2d94:	0209      	lsls	r1, r1, #8
    2d96:	4319      	orrs	r1, r3
    2d98:	ab02      	add	r3, sp, #8
    2d9a:	8059      	strh	r1, [r3, #2]
	ind.srcEndpoint = header->nwkSrcEndpoint;
    2d9c:	7c63      	ldrb	r3, [r4, #17]
    2d9e:	071b      	lsls	r3, r3, #28
    2da0:	0f1b      	lsrs	r3, r3, #28
    2da2:	aa02      	add	r2, sp, #8
    2da4:	7113      	strb	r3, [r2, #4]
	ind.dstEndpoint = header->nwkDstEndpoint;
    2da6:	7150      	strb	r0, [r2, #5]
	ind.data = frame->payload;
    2da8:	2381      	movs	r3, #129	; 0x81
    2daa:	5ce3      	ldrb	r3, [r4, r3]
    2dac:	2082      	movs	r0, #130	; 0x82
    2dae:	5c20      	ldrb	r0, [r4, r0]
    2db0:	0200      	lsls	r0, r0, #8
    2db2:	4318      	orrs	r0, r3
    2db4:	2383      	movs	r3, #131	; 0x83
    2db6:	5ce3      	ldrb	r3, [r4, r3]
    2db8:	041b      	lsls	r3, r3, #16
    2dba:	4318      	orrs	r0, r3
    2dbc:	2384      	movs	r3, #132	; 0x84
    2dbe:	5ce3      	ldrb	r3, [r4, r3]
    2dc0:	061b      	lsls	r3, r3, #24
    2dc2:	4303      	orrs	r3, r0
    2dc4:	9304      	str	r3, [sp, #16]
	ind.size = nwkFramePayloadSize(frame);
    2dc6:	1bdb      	subs	r3, r3, r7
    2dc8:	7860      	ldrb	r0, [r4, #1]
    2dca:	1ac3      	subs	r3, r0, r3
    2dcc:	7313      	strb	r3, [r2, #12]
	ind.lqi = frame->rx.lqi;
    2dce:	2385      	movs	r3, #133	; 0x85
    2dd0:	5ce3      	ldrb	r3, [r4, r3]
    2dd2:	7353      	strb	r3, [r2, #13]
	ind.rssi = frame->rx.rssi;
    2dd4:	2386      	movs	r3, #134	; 0x86
    2dd6:	5ce3      	ldrb	r3, [r4, r3]
    2dd8:	7393      	strb	r3, [r2, #14]

	ind.options
		= (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
    2dda:	7ae0      	ldrb	r0, [r4, #11]
	ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
    2ddc:	2303      	movs	r3, #3
    2dde:	4003      	ands	r3, r0
    2de0:	469c      	mov	ip, r3
	ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
    2de2:	0743      	lsls	r3, r0, #29
    2de4:	0fdb      	lsrs	r3, r3, #31
    2de6:	015b      	lsls	r3, r3, #5
    2de8:	4662      	mov	r2, ip
    2dea:	4313      	orrs	r3, r2
	ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
    2dec:	0700      	lsls	r0, r0, #28
    2dee:	0fc0      	lsrs	r0, r0, #31
    2df0:	0180      	lsls	r0, r0, #6
    2df2:	4318      	orrs	r0, r3
	ind.options
		|= (NWK_BROADCAST_ADDR ==
    2df4:	4b4b      	ldr	r3, [pc, #300]	; (2f24 <nwkRxTaskHandler+0x3a0>)
    2df6:	469c      	mov	ip, r3
    2df8:	4461      	add	r1, ip
    2dfa:	424b      	negs	r3, r1
    2dfc:	414b      	adcs	r3, r1
    2dfe:	009b      	lsls	r3, r3, #2
    2e00:	4303      	orrs	r3, r0
			header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
	ind.options
		|= (header->nwkSrcAddr ==
			header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
    2e02:	79f8      	ldrb	r0, [r7, #7]
    2e04:	7a39      	ldrb	r1, [r7, #8]
    2e06:	0209      	lsls	r1, r1, #8
	ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
	ind.options
		|= (NWK_BROADCAST_ADDR ==
			header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
	ind.options
		|= (header->nwkSrcAddr ==
    2e08:	4301      	orrs	r1, r0
    2e0a:	464a      	mov	r2, r9
    2e0c:	1a52      	subs	r2, r2, r1
    2e0e:	4251      	negs	r1, r2
    2e10:	414a      	adcs	r2, r1
    2e12:	00d2      	lsls	r2, r2, #3
    2e14:	4313      	orrs	r3, r2
    2e16:	aa02      	add	r2, sp, #8
    2e18:	7193      	strb	r3, [r2, #6]
			header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
	ind.options
		|= (NWK_BROADCAST_PANID ==
			header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
    2e1a:	78f9      	ldrb	r1, [r7, #3]
    2e1c:	793a      	ldrb	r2, [r7, #4]
    2e1e:	0212      	lsls	r2, r2, #8
			header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
	ind.options
		|= (header->nwkSrcAddr ==
			header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
	ind.options
		|= (NWK_BROADCAST_PANID ==
    2e20:	430a      	orrs	r2, r1
    2e22:	4462      	add	r2, ip
    2e24:	4251      	negs	r1, r2
    2e26:	414a      	adcs	r2, r1
    2e28:	0112      	lsls	r2, r2, #4
    2e2a:	4313      	orrs	r3, r2
    2e2c:	aa02      	add	r2, sp, #8
    2e2e:	7193      	strb	r3, [r2, #6]
			header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;

	return nwkIb.endpoint[header->nwkDstEndpoint](&ind);
    2e30:	0010      	movs	r0, r2
    2e32:	47c0      	blx	r8
    2e34:	e000      	b.n	2e38 <nwkRxTaskHandler+0x2b4>
{
	NwkFrameHeader_t *header = &frame->header;
	NWK_DataInd_t ind;

	if (NULL == nwkIb.endpoint[header->nwkDstEndpoint]) {
		return false;
    2e36:	2000      	movs	r0, #0
	bool ack;

	nwkRxAckControl = 0;
	ack = nwkRxIndicateFrame(frame);

	if (0 == frame->header.nwkFcf.ackRequest) {
    2e38:	7ae1      	ldrb	r1, [r4, #11]
		ack = false;
    2e3a:	07cb      	lsls	r3, r1, #31
    2e3c:	17db      	asrs	r3, r3, #31
    2e3e:	4018      	ands	r0, r3
	}

	if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    2e40:	79e2      	ldrb	r2, [r4, #7]
    2e42:	7a23      	ldrb	r3, [r4, #8]
    2e44:	021b      	lsls	r3, r3, #8
    2e46:	4313      	orrs	r3, r2
    2e48:	4a2c      	ldr	r2, [pc, #176]	; (2efc <nwkRxTaskHandler+0x378>)
    2e4a:	4293      	cmp	r3, r2
    2e4c:	d10a      	bne.n	2e64 <nwkRxTaskHandler+0x2e0>
			nwkIb.addr == frame->header.nwkDstAddr &&
    2e4e:	7be2      	ldrb	r2, [r4, #15]
    2e50:	7c23      	ldrb	r3, [r4, #16]
    2e52:	021b      	lsls	r3, r3, #8

	if (0 == frame->header.nwkFcf.ackRequest) {
		ack = false;
	}

	if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    2e54:	4f2a      	ldr	r7, [pc, #168]	; (2f00 <nwkRxTaskHandler+0x37c>)
    2e56:	883f      	ldrh	r7, [r7, #0]
    2e58:	4313      	orrs	r3, r2
    2e5a:	429f      	cmp	r7, r3
    2e5c:	d102      	bne.n	2e64 <nwkRxTaskHandler+0x2e0>
			nwkIb.addr == frame->header.nwkDstAddr &&
    2e5e:	070b      	lsls	r3, r1, #28
    2e60:	d400      	bmi.n	2e64 <nwkRxTaskHandler+0x2e0>
			0 == frame->header.nwkFcf.multicast) {
		ack = true;
    2e62:	2001      	movs	r0, #1
	}

	if (NWK_BROADCAST_PANID == frame->header.macDstPanId) {
    2e64:	7962      	ldrb	r2, [r4, #5]
    2e66:	79a3      	ldrb	r3, [r4, #6]
    2e68:	021b      	lsls	r3, r3, #8
    2e6a:	4313      	orrs	r3, r2
    2e6c:	4a23      	ldr	r2, [pc, #140]	; (2efc <nwkRxTaskHandler+0x378>)
    2e6e:	4293      	cmp	r3, r2
    2e70:	d03c      	beq.n	2eec <nwkRxTaskHandler+0x368>
		ack = false;
	}

	if (NWK_BROADCAST_ADDR == nwkIb.addr) {
    2e72:	4b23      	ldr	r3, [pc, #140]	; (2f00 <nwkRxTaskHandler+0x37c>)
    2e74:	881a      	ldrh	r2, [r3, #0]
    2e76:	4b21      	ldr	r3, [pc, #132]	; (2efc <nwkRxTaskHandler+0x378>)
    2e78:	429a      	cmp	r2, r3
    2e7a:	d037      	beq.n	2eec <nwkRxTaskHandler+0x368>
		ack = false;
	}

	if (ack) {
    2e7c:	2800      	cmp	r0, #0
    2e7e:	d035      	beq.n	2eec <nwkRxTaskHandler+0x368>
static void nwkRxSendAck(NwkFrame_t *frame)
{
	NwkFrame_t *ack;
	NwkCommandAck_t *command;

	if (NULL == (ack = nwkFrameAlloc())) {
    2e80:	4b29      	ldr	r3, [pc, #164]	; (2f28 <nwkRxTaskHandler+0x3a4>)
    2e82:	4798      	blx	r3
    2e84:	1e07      	subs	r7, r0, #0
    2e86:	d031      	beq.n	2eec <nwkRxTaskHandler+0x368>
		return;
	}

	nwkFrameCommandInit(ack);
    2e88:	4b28      	ldr	r3, [pc, #160]	; (2f2c <nwkRxTaskHandler+0x3a8>)
    2e8a:	4798      	blx	r3

	ack->size += sizeof(NwkCommandAck_t);
    2e8c:	787b      	ldrb	r3, [r7, #1]
    2e8e:	3303      	adds	r3, #3
    2e90:	707b      	strb	r3, [r7, #1]
	ack->tx.confirm = NULL;
    2e92:	2200      	movs	r2, #0
    2e94:	2389      	movs	r3, #137	; 0x89
    2e96:	54fa      	strb	r2, [r7, r3]
    2e98:	003b      	movs	r3, r7
    2e9a:	3389      	adds	r3, #137	; 0x89
    2e9c:	705a      	strb	r2, [r3, #1]
    2e9e:	709a      	strb	r2, [r3, #2]
    2ea0:	70da      	strb	r2, [r3, #3]

	ack->header.nwkFcf.security = frame->header.nwkFcf.security;
    2ea2:	7ae2      	ldrb	r2, [r4, #11]
    2ea4:	2302      	movs	r3, #2
    2ea6:	401a      	ands	r2, r3
    2ea8:	7afb      	ldrb	r3, [r7, #11]
    2eaa:	2102      	movs	r1, #2
    2eac:	438b      	bics	r3, r1
    2eae:	4313      	orrs	r3, r2
    2eb0:	72fb      	strb	r3, [r7, #11]
	ack->header.nwkDstAddr = frame->header.nwkSrcAddr;
    2eb2:	7b62      	ldrb	r2, [r4, #13]
    2eb4:	7ba3      	ldrb	r3, [r4, #14]
    2eb6:	73fa      	strb	r2, [r7, #15]
    2eb8:	743b      	strb	r3, [r7, #16]

	command = (NwkCommandAck_t *)ack->payload;
    2eba:	2381      	movs	r3, #129	; 0x81
    2ebc:	5cf8      	ldrb	r0, [r7, r3]
    2ebe:	3301      	adds	r3, #1
    2ec0:	5cfa      	ldrb	r2, [r7, r3]
    2ec2:	0212      	lsls	r2, r2, #8
    2ec4:	4302      	orrs	r2, r0
    2ec6:	3301      	adds	r3, #1
    2ec8:	5cfb      	ldrb	r3, [r7, r3]
    2eca:	041b      	lsls	r3, r3, #16
    2ecc:	4313      	orrs	r3, r2
    2ece:	001a      	movs	r2, r3
    2ed0:	2384      	movs	r3, #132	; 0x84
    2ed2:	5cfb      	ldrb	r3, [r7, r3]
    2ed4:	061b      	lsls	r3, r3, #24
    2ed6:	4313      	orrs	r3, r2
	command->id = NWK_COMMAND_ACK;
    2ed8:	2200      	movs	r2, #0
    2eda:	701a      	strb	r2, [r3, #0]
	command->control = nwkRxAckControl;
    2edc:	4a10      	ldr	r2, [pc, #64]	; (2f20 <nwkRxTaskHandler+0x39c>)
    2ede:	7812      	ldrb	r2, [r2, #0]
    2ee0:	709a      	strb	r2, [r3, #2]
	command->seq = frame->header.nwkSeq;
    2ee2:	7b22      	ldrb	r2, [r4, #12]
    2ee4:	705a      	strb	r2, [r3, #1]

	nwkTxFrame(ack);
    2ee6:	0038      	movs	r0, r7
    2ee8:	4b11      	ldr	r3, [pc, #68]	; (2f30 <nwkRxTaskHandler+0x3ac>)
    2eea:	4798      	blx	r3

	if (ack) {
		nwkRxSendAck(frame);
	}

	frame->state = NWK_RX_STATE_FINISH;
    2eec:	2324      	movs	r3, #36	; 0x24
    2eee:	7023      	strb	r3, [r4, #0]
    2ef0:	e027      	b.n	2f42 <nwkRxTaskHandler+0x3be>
    2ef2:	46c0      	nop			; (mov r8, r8)
    2ef4:	000026a1 	.word	0x000026a1
    2ef8:	00005764 	.word	0x00005764
    2efc:	0000ffff 	.word	0x0000ffff
    2f00:	20000888 	.word	0x20000888
    2f04:	000027f9 	.word	0x000027f9
    2f08:	20000674 	.word	0x20000674
    2f0c:	000027e1 	.word	0x000027e1
    2f10:	200006b4 	.word	0x200006b4
    2f14:	00003961 	.word	0x00003961
    2f18:	0000338d 	.word	0x0000338d
    2f1c:	00002f8d 	.word	0x00002f8d
    2f20:	200006b0 	.word	0x200006b0
    2f24:	ffff0001 	.word	0xffff0001
    2f28:	0000261d 	.word	0x0000261d
    2f2c:	000026dd 	.word	0x000026dd
    2f30:	000032d1 	.word	0x000032d1
		break;

#ifdef NWK_ENABLE_ROUTING
		case NWK_RX_STATE_ROUTE:
		{
			nwkRouteFrame(frame);
    2f34:	0020      	movs	r0, r4
    2f36:	4b0d      	ldr	r3, [pc, #52]	; (2f6c <nwkRxTaskHandler+0x3e8>)
    2f38:	4798      	blx	r3
		}
		break;
    2f3a:	e002      	b.n	2f42 <nwkRxTaskHandler+0x3be>
#endif

		case NWK_RX_STATE_FINISH:
		{
			nwkFrameFree(frame);
    2f3c:	0020      	movs	r0, r4
    2f3e:	4b0c      	ldr	r3, [pc, #48]	; (2f70 <nwkRxTaskHandler+0x3ec>)
    2f40:	4798      	blx	r3
*****************************************************************************/
void nwkRxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    2f42:	0020      	movs	r0, r4
    2f44:	47a8      	blx	r5
    2f46:	1e04      	subs	r4, r0, #0
    2f48:	d000      	beq.n	2f4c <nwkRxTaskHandler+0x3c8>
    2f4a:	e624      	b.n	2b96 <nwkRxTaskHandler+0x12>
    2f4c:	e008      	b.n	2f60 <nwkRxTaskHandler+0x3dc>
			frame->state = NWK_RX_STATE_INDICATE;
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
    2f4e:	79e2      	ldrb	r2, [r4, #7]
    2f50:	7a23      	ldrb	r3, [r4, #8]
    2f52:	021b      	lsls	r3, r3, #8
    2f54:	4313      	orrs	r3, r2
    2f56:	4a07      	ldr	r2, [pc, #28]	; (2f74 <nwkRxTaskHandler+0x3f0>)
    2f58:	4293      	cmp	r3, r2
    2f5a:	d000      	beq.n	2f5e <nwkRxTaskHandler+0x3da>
    2f5c:	e6e0      	b.n	2d20 <nwkRxTaskHandler+0x19c>
    2f5e:	e6d1      	b.n	2d04 <nwkRxTaskHandler+0x180>
			nwkFrameFree(frame);
		}
		break;
		}
	}
}
    2f60:	b007      	add	sp, #28
    2f62:	bc0c      	pop	{r2, r3}
    2f64:	4690      	mov	r8, r2
    2f66:	4699      	mov	r9, r3
    2f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2f6a:	46c0      	nop			; (mov r8, r8)
    2f6c:	0000297d 	.word	0x0000297d
    2f70:	0000268d 	.word	0x0000268d
    2f74:	0000ffff 	.word	0x0000ffff

00002f78 <nwkSecurityInit>:
/*************************************************************************//**
*  @brief Initializes the Security module
*****************************************************************************/
void nwkSecurityInit(void)
{
	nwkSecurityActiveFrames = 0;
    2f78:	2300      	movs	r3, #0
    2f7a:	4a02      	ldr	r2, [pc, #8]	; (2f84 <nwkSecurityInit+0xc>)
    2f7c:	7013      	strb	r3, [r2, #0]
	nwkSecurityActiveFrame = NULL;
    2f7e:	4a02      	ldr	r2, [pc, #8]	; (2f88 <nwkSecurityInit+0x10>)
    2f80:	6013      	str	r3, [r2, #0]
}
    2f82:	4770      	bx	lr
    2f84:	200006c8 	.word	0x200006c8
    2f88:	200006cc 	.word	0x200006cc

00002f8c <nwkSecurityProcess>:

/*************************************************************************//**
*****************************************************************************/
void nwkSecurityProcess(NwkFrame_t *frame, bool encrypt)
{
	if (encrypt) {
    2f8c:	2900      	cmp	r1, #0
    2f8e:	d002      	beq.n	2f96 <nwkSecurityProcess+0xa>
		frame->state = NWK_SECURITY_STATE_ENCRYPT_PENDING;
    2f90:	2330      	movs	r3, #48	; 0x30
    2f92:	7003      	strb	r3, [r0, #0]
    2f94:	e001      	b.n	2f9a <nwkSecurityProcess+0xe>
	} else {
		frame->state = NWK_SECURITY_STATE_DECRYPT_PENDING;
    2f96:	2331      	movs	r3, #49	; 0x31
    2f98:	7003      	strb	r3, [r0, #0]
	}

	++nwkSecurityActiveFrames;
    2f9a:	4a02      	ldr	r2, [pc, #8]	; (2fa4 <nwkSecurityProcess+0x18>)
    2f9c:	7813      	ldrb	r3, [r2, #0]
    2f9e:	3301      	adds	r3, #1
    2fa0:	7013      	strb	r3, [r2, #0]
}
    2fa2:	4770      	bx	lr
    2fa4:	200006c8 	.word	0x200006c8

00002fa8 <SYS_EncryptConf>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_EncryptConf(void)
{
    2fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2faa:	4647      	mov	r7, r8
    2fac:	b480      	push	{r7}
	uint8_t *vector = (uint8_t *)nwkSecurityVector;
	uint8_t *text = &nwkSecurityActiveFrame->payload[nwkSecurityOffset];
    2fae:	4b25      	ldr	r3, [pc, #148]	; (3044 <SYS_EncryptConf+0x9c>)
    2fb0:	681b      	ldr	r3, [r3, #0]
    2fb2:	469c      	mov	ip, r3
    2fb4:	2381      	movs	r3, #129	; 0x81
    2fb6:	4662      	mov	r2, ip
    2fb8:	5cd0      	ldrb	r0, [r2, r3]
    2fba:	3301      	adds	r3, #1
    2fbc:	5cd3      	ldrb	r3, [r2, r3]
    2fbe:	021b      	lsls	r3, r3, #8
    2fc0:	4303      	orrs	r3, r0
    2fc2:	001a      	movs	r2, r3
    2fc4:	2383      	movs	r3, #131	; 0x83
    2fc6:	4661      	mov	r1, ip
    2fc8:	5ccb      	ldrb	r3, [r1, r3]
    2fca:	041b      	lsls	r3, r3, #16
    2fcc:	4313      	orrs	r3, r2
    2fce:	2284      	movs	r2, #132	; 0x84
    2fd0:	5c89      	ldrb	r1, [r1, r2]
    2fd2:	0609      	lsls	r1, r1, #24
    2fd4:	4319      	orrs	r1, r3
    2fd6:	4b1c      	ldr	r3, [pc, #112]	; (3048 <SYS_EncryptConf+0xa0>)
    2fd8:	781b      	ldrb	r3, [r3, #0]
    2fda:	4698      	mov	r8, r3
	uint8_t block;

	block
		= (nwkSecuritySize <
    2fdc:	4b1b      	ldr	r3, [pc, #108]	; (304c <SYS_EncryptConf+0xa4>)
    2fde:	781e      	ldrb	r6, [r3, #0]
    2fe0:	1c37      	adds	r7, r6, #0
    2fe2:	2e10      	cmp	r6, #16
    2fe4:	d900      	bls.n	2fe8 <SYS_EncryptConf+0x40>
    2fe6:	2710      	movs	r7, #16
    2fe8:	b2ff      	uxtb	r7, r7
			NWK_SECURITY_BLOCK_SIZE) ? nwkSecuritySize :
			NWK_SECURITY_BLOCK_SIZE;

	for (uint8_t i = 0; i < block; i++) {
    2fea:	2f00      	cmp	r7, #0
    2fec:	d016      	beq.n	301c <SYS_EncryptConf+0x74>
		text[i] ^= vector[i];

		if (nwkSecurityEncrypt) {
    2fee:	4b18      	ldr	r3, [pc, #96]	; (3050 <SYS_EncryptConf+0xa8>)
    2ff0:	781d      	ldrb	r5, [r3, #0]
    2ff2:	4441      	add	r1, r8
    2ff4:	4b17      	ldr	r3, [pc, #92]	; (3054 <SYS_EncryptConf+0xac>)
    2ff6:	1e7c      	subs	r4, r7, #1
    2ff8:	b2e4      	uxtb	r4, r4
    2ffa:	3401      	adds	r4, #1
    2ffc:	191c      	adds	r4, r3, r4
		= (nwkSecuritySize <
			NWK_SECURITY_BLOCK_SIZE) ? nwkSecuritySize :
			NWK_SECURITY_BLOCK_SIZE;

	for (uint8_t i = 0; i < block; i++) {
		text[i] ^= vector[i];
    2ffe:	7808      	ldrb	r0, [r1, #0]
    3000:	781a      	ldrb	r2, [r3, #0]
    3002:	4042      	eors	r2, r0
    3004:	700a      	strb	r2, [r1, #0]

		if (nwkSecurityEncrypt) {
    3006:	2d00      	cmp	r5, #0
    3008:	d001      	beq.n	300e <SYS_EncryptConf+0x66>
			vector[i] = text[i];
    300a:	701a      	strb	r2, [r3, #0]
    300c:	e002      	b.n	3014 <SYS_EncryptConf+0x6c>
		} else {
			vector[i] ^= text[i];
    300e:	7818      	ldrb	r0, [r3, #0]
    3010:	4042      	eors	r2, r0
    3012:	701a      	strb	r2, [r3, #0]
    3014:	3101      	adds	r1, #1
    3016:	3301      	adds	r3, #1
	block
		= (nwkSecuritySize <
			NWK_SECURITY_BLOCK_SIZE) ? nwkSecuritySize :
			NWK_SECURITY_BLOCK_SIZE;

	for (uint8_t i = 0; i < block; i++) {
    3018:	42a3      	cmp	r3, r4
    301a:	d1f0      	bne.n	2ffe <SYS_EncryptConf+0x56>
		} else {
			vector[i] ^= text[i];
		}
	}

	nwkSecurityOffset += block;
    301c:	4643      	mov	r3, r8
    301e:	19db      	adds	r3, r3, r7
    3020:	4a09      	ldr	r2, [pc, #36]	; (3048 <SYS_EncryptConf+0xa0>)
    3022:	7013      	strb	r3, [r2, #0]
	nwkSecuritySize -= block;
    3024:	1bf6      	subs	r6, r6, r7
    3026:	b2f6      	uxtb	r6, r6
    3028:	4b08      	ldr	r3, [pc, #32]	; (304c <SYS_EncryptConf+0xa4>)
    302a:	701e      	strb	r6, [r3, #0]

	if (nwkSecuritySize > 0) {
    302c:	2e00      	cmp	r6, #0
    302e:	d003      	beq.n	3038 <SYS_EncryptConf+0x90>
		nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_PROCESS;
    3030:	2332      	movs	r3, #50	; 0x32
    3032:	4662      	mov	r2, ip
    3034:	7013      	strb	r3, [r2, #0]
    3036:	e002      	b.n	303e <SYS_EncryptConf+0x96>
	} else {
		nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_CONFIRM;
    3038:	2334      	movs	r3, #52	; 0x34
    303a:	4662      	mov	r2, ip
    303c:	7013      	strb	r3, [r2, #0]
	}
}
    303e:	bc04      	pop	{r2}
    3040:	4690      	mov	r8, r2
    3042:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3044:	200006cc 	.word	0x200006cc
    3048:	200006d0 	.word	0x200006d0
    304c:	200006d1 	.word	0x200006d1
    3050:	200006d2 	.word	0x200006d2
    3054:	200006d4 	.word	0x200006d4

00003058 <nwkSecurityTaskHandler>:

/*************************************************************************//**
*  @brief Security Module task handler
*****************************************************************************/
void nwkSecurityTaskHandler(void)
{
    3058:	b570      	push	{r4, r5, r6, lr}
    305a:	b082      	sub	sp, #8
	NwkFrame_t *frame = NULL;

	if (0 == nwkSecurityActiveFrames) {
    305c:	4b57      	ldr	r3, [pc, #348]	; (31bc <nwkSecurityTaskHandler+0x164>)
    305e:	781b      	ldrb	r3, [r3, #0]
    3060:	2b00      	cmp	r3, #0
    3062:	d100      	bne.n	3066 <nwkSecurityTaskHandler+0xe>
    3064:	e0a8      	b.n	31b8 <nwkSecurityTaskHandler+0x160>
		return;
	}

	if (nwkSecurityActiveFrame) {
    3066:	4b56      	ldr	r3, [pc, #344]	; (31c0 <nwkSecurityTaskHandler+0x168>)
    3068:	681c      	ldr	r4, [r3, #0]
    306a:	2c00      	cmp	r4, #0
    306c:	d100      	bne.n	3070 <nwkSecurityTaskHandler+0x18>
    306e:	e09e      	b.n	31ae <nwkSecurityTaskHandler+0x156>
		if (NWK_SECURITY_STATE_CONFIRM ==
				nwkSecurityActiveFrame->state) {
    3070:	7823      	ldrb	r3, [r4, #0]
	if (0 == nwkSecurityActiveFrames) {
		return;
	}

	if (nwkSecurityActiveFrame) {
		if (NWK_SECURITY_STATE_CONFIRM ==
    3072:	2b34      	cmp	r3, #52	; 0x34
    3074:	d147      	bne.n	3106 <nwkSecurityTaskHandler+0xae>

/*************************************************************************//**
*****************************************************************************/
static bool nwkSecurityProcessMic(void)
{
	uint8_t *mic = &nwkSecurityActiveFrame->payload[nwkSecurityOffset];
    3076:	334d      	adds	r3, #77	; 0x4d
    3078:	5ce1      	ldrb	r1, [r4, r3]
    307a:	3301      	adds	r3, #1
    307c:	5ce3      	ldrb	r3, [r4, r3]
    307e:	021b      	lsls	r3, r3, #8
    3080:	430b      	orrs	r3, r1
    3082:	001a      	movs	r2, r3
    3084:	2383      	movs	r3, #131	; 0x83
    3086:	5ce0      	ldrb	r0, [r4, r3]
    3088:	0400      	lsls	r0, r0, #16
    308a:	0003      	movs	r3, r0
    308c:	4313      	orrs	r3, r2
    308e:	2284      	movs	r2, #132	; 0x84
    3090:	5ca0      	ldrb	r0, [r4, r2]
    3092:	0600      	lsls	r0, r0, #24
    3094:	4318      	orrs	r0, r3
    3096:	4b4b      	ldr	r3, [pc, #300]	; (31c4 <nwkSecurityTaskHandler+0x16c>)
    3098:	7819      	ldrb	r1, [r3, #0]
    309a:	1840      	adds	r0, r0, r1
	uint32_t vmic = nwkSecurityVector[0] ^ nwkSecurityVector[1] ^
    309c:	4b4a      	ldr	r3, [pc, #296]	; (31c8 <nwkSecurityTaskHandler+0x170>)
			nwkSecurityVector[2] ^ nwkSecurityVector[3];
    309e:	681e      	ldr	r6, [r3, #0]
    30a0:	685a      	ldr	r2, [r3, #4]
    30a2:	4056      	eors	r6, r2
    30a4:	689a      	ldr	r2, [r3, #8]
    30a6:	4056      	eors	r6, r2
    30a8:	68db      	ldr	r3, [r3, #12]
    30aa:	405e      	eors	r6, r3
/*************************************************************************//**
*****************************************************************************/
static bool nwkSecurityProcessMic(void)
{
	uint8_t *mic = &nwkSecurityActiveFrame->payload[nwkSecurityOffset];
	uint32_t vmic = nwkSecurityVector[0] ^ nwkSecurityVector[1] ^
    30ac:	9600      	str	r6, [sp, #0]
			nwkSecurityVector[2] ^ nwkSecurityVector[3];
	uint32_t tmic;

	if (nwkSecurityEncrypt) {
    30ae:	4b47      	ldr	r3, [pc, #284]	; (31cc <nwkSecurityTaskHandler+0x174>)
    30b0:	781d      	ldrb	r5, [r3, #0]
    30b2:	2d00      	cmp	r5, #0
    30b4:	d007      	beq.n	30c6 <nwkSecurityTaskHandler+0x6e>
		memcpy(mic, (uint8_t *)&vmic, NWK_SECURITY_MIC_SIZE);
    30b6:	2204      	movs	r2, #4
    30b8:	4669      	mov	r1, sp
    30ba:	4b45      	ldr	r3, [pc, #276]	; (31d0 <nwkSecurityTaskHandler+0x178>)
    30bc:	4798      	blx	r3
		nwkSecurityActiveFrame->size += NWK_SECURITY_MIC_SIZE;
    30be:	7863      	ldrb	r3, [r4, #1]
    30c0:	3304      	adds	r3, #4
    30c2:	7063      	strb	r3, [r4, #1]
    30c4:	e009      	b.n	30da <nwkSecurityTaskHandler+0x82>
		return true;
	} else {
		memcpy((uint8_t *)&tmic, mic, NWK_SECURITY_MIC_SIZE);
    30c6:	2204      	movs	r2, #4
    30c8:	0001      	movs	r1, r0
    30ca:	a801      	add	r0, sp, #4
    30cc:	4b40      	ldr	r3, [pc, #256]	; (31d0 <nwkSecurityTaskHandler+0x178>)
    30ce:	4798      	blx	r3
		return vmic == tmic;
    30d0:	9b01      	ldr	r3, [sp, #4]
    30d2:	1b9d      	subs	r5, r3, r6
    30d4:	426b      	negs	r3, r5
    30d6:	416b      	adcs	r3, r5
    30d8:	b2dd      	uxtb	r5, r3
	if (nwkSecurityActiveFrame) {
		if (NWK_SECURITY_STATE_CONFIRM ==
				nwkSecurityActiveFrame->state) {
			bool micStatus = nwkSecurityProcessMic();

			if (nwkSecurityEncrypt) {
    30da:	4b3c      	ldr	r3, [pc, #240]	; (31cc <nwkSecurityTaskHandler+0x174>)
    30dc:	781b      	ldrb	r3, [r3, #0]
    30de:	2b00      	cmp	r3, #0
    30e0:	d004      	beq.n	30ec <nwkSecurityTaskHandler+0x94>
				nwkTxEncryptConf(nwkSecurityActiveFrame);
    30e2:	4b37      	ldr	r3, [pc, #220]	; (31c0 <nwkSecurityTaskHandler+0x168>)
    30e4:	6818      	ldr	r0, [r3, #0]
    30e6:	4b3b      	ldr	r3, [pc, #236]	; (31d4 <nwkSecurityTaskHandler+0x17c>)
    30e8:	4798      	blx	r3
    30ea:	e004      	b.n	30f6 <nwkSecurityTaskHandler+0x9e>
			} else {
				nwkRxDecryptConf(nwkSecurityActiveFrame,
    30ec:	4b34      	ldr	r3, [pc, #208]	; (31c0 <nwkSecurityTaskHandler+0x168>)
    30ee:	6818      	ldr	r0, [r3, #0]
    30f0:	0029      	movs	r1, r5
    30f2:	4b39      	ldr	r3, [pc, #228]	; (31d8 <nwkSecurityTaskHandler+0x180>)
    30f4:	4798      	blx	r3
						micStatus);
			}

			nwkSecurityActiveFrame = NULL;
    30f6:	2200      	movs	r2, #0
    30f8:	4b31      	ldr	r3, [pc, #196]	; (31c0 <nwkSecurityTaskHandler+0x168>)
    30fa:	601a      	str	r2, [r3, #0]
			--nwkSecurityActiveFrames;
    30fc:	4a2f      	ldr	r2, [pc, #188]	; (31bc <nwkSecurityTaskHandler+0x164>)
    30fe:	7813      	ldrb	r3, [r2, #0]
    3100:	3b01      	subs	r3, #1
    3102:	7013      	strb	r3, [r2, #0]
    3104:	e058      	b.n	31b8 <nwkSecurityTaskHandler+0x160>
		} else if (NWK_SECURITY_STATE_PROCESS ==
    3106:	2b32      	cmp	r3, #50	; 0x32
    3108:	d156      	bne.n	31b8 <nwkSecurityTaskHandler+0x160>
				nwkSecurityActiveFrame->state) {
			nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_WAIT;
    310a:	3301      	adds	r3, #1
    310c:	7023      	strb	r3, [r4, #0]
			SYS_EncryptReq((uint32_t *)nwkSecurityVector,
    310e:	4933      	ldr	r1, [pc, #204]	; (31dc <nwkSecurityTaskHandler+0x184>)
    3110:	482d      	ldr	r0, [pc, #180]	; (31c8 <nwkSecurityTaskHandler+0x170>)
    3112:	4b33      	ldr	r3, [pc, #204]	; (31e0 <nwkSecurityTaskHandler+0x188>)
    3114:	4798      	blx	r3
    3116:	e04f      	b.n	31b8 <nwkSecurityTaskHandler+0x160>

		return;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_SECURITY_STATE_ENCRYPT_PENDING == frame->state ||
    3118:	7803      	ldrb	r3, [r0, #0]
    311a:	3b30      	subs	r3, #48	; 0x30
    311c:	2b01      	cmp	r3, #1
    311e:	d848      	bhi.n	31b2 <nwkSecurityTaskHandler+0x15a>
				NWK_SECURITY_STATE_DECRYPT_PENDING ==
				frame->state) {
			nwkSecurityActiveFrame = frame;
    3120:	4b27      	ldr	r3, [pc, #156]	; (31c0 <nwkSecurityTaskHandler+0x168>)
    3122:	6018      	str	r0, [r3, #0]
*****************************************************************************/
static void nwkSecurityStart(void)
{
	NwkFrameHeader_t *header = &nwkSecurityActiveFrame->header;

	nwkSecurityVector[0] = header->nwkSeq;
    3124:	4d28      	ldr	r5, [pc, #160]	; (31c8 <nwkSecurityTaskHandler+0x170>)
    3126:	7b02      	ldrb	r2, [r0, #12]
    3128:	602a      	str	r2, [r5, #0]
	nwkSecurityVector[1]
		= ((uint32_t)header->nwkDstAddr <<
    312a:	7bc4      	ldrb	r4, [r0, #15]
    312c:	7c02      	ldrb	r2, [r0, #16]
    312e:	0212      	lsls	r2, r2, #8
    3130:	4322      	orrs	r2, r4
    3132:	0411      	lsls	r1, r2, #16
			16) | header->nwkDstEndpoint;
    3134:	7c42      	ldrb	r2, [r0, #17]
{
	NwkFrameHeader_t *header = &nwkSecurityActiveFrame->header;

	nwkSecurityVector[0] = header->nwkSeq;
	nwkSecurityVector[1]
		= ((uint32_t)header->nwkDstAddr <<
    3136:	0912      	lsrs	r2, r2, #4
    3138:	430a      	orrs	r2, r1
    313a:	606a      	str	r2, [r5, #4]
			16) | header->nwkDstEndpoint;
	nwkSecurityVector[2]
		= ((uint32_t)header->nwkSrcAddr <<
    313c:	7b44      	ldrb	r4, [r0, #13]
    313e:	7b82      	ldrb	r2, [r0, #14]
    3140:	0212      	lsls	r2, r2, #8
    3142:	4322      	orrs	r2, r4
    3144:	0411      	lsls	r1, r2, #16
			16) | header->nwkSrcEndpoint;
    3146:	7c42      	ldrb	r2, [r0, #17]
    3148:	0712      	lsls	r2, r2, #28
	nwkSecurityVector[0] = header->nwkSeq;
	nwkSecurityVector[1]
		= ((uint32_t)header->nwkDstAddr <<
			16) | header->nwkDstEndpoint;
	nwkSecurityVector[2]
		= ((uint32_t)header->nwkSrcAddr <<
    314a:	0f12      	lsrs	r2, r2, #28
    314c:	430a      	orrs	r2, r1
    314e:	60aa      	str	r2, [r5, #8]
			16) | header->nwkSrcEndpoint;
	nwkSecurityVector[3]
		= ((uint32_t)header->macDstPanId <<
    3150:	7942      	ldrb	r2, [r0, #5]
    3152:	7983      	ldrb	r3, [r0, #6]
    3154:	021b      	lsls	r3, r3, #8
    3156:	4313      	orrs	r3, r2
    3158:	041b      	lsls	r3, r3, #16
    315a:	7ac2      	ldrb	r2, [r0, #11]
    315c:	4313      	orrs	r3, r2
    315e:	60eb      	str	r3, [r5, #12]
			16) | *(uint8_t *)&header->nwkFcf;

	if (NWK_SECURITY_STATE_DECRYPT_PENDING ==
			nwkSecurityActiveFrame->state) {
    3160:	7805      	ldrb	r5, [r0, #0]
			16) | header->nwkSrcEndpoint;
	nwkSecurityVector[3]
		= ((uint32_t)header->macDstPanId <<
			16) | *(uint8_t *)&header->nwkFcf;

	if (NWK_SECURITY_STATE_DECRYPT_PENDING ==
    3162:	2d31      	cmp	r5, #49	; 0x31
    3164:	d102      	bne.n	316c <nwkSecurityTaskHandler+0x114>
			nwkSecurityActiveFrame->state) {
		nwkSecurityActiveFrame->size -= NWK_SECURITY_MIC_SIZE;
    3166:	7843      	ldrb	r3, [r0, #1]
    3168:	3b04      	subs	r3, #4
    316a:	7043      	strb	r3, [r0, #1]

/*************************************************************************//**
*****************************************************************************/
static inline uint8_t nwkFramePayloadSize(NwkFrame_t *frame)
{
	return frame->size - (frame->payload - frame->data);
    316c:	2381      	movs	r3, #129	; 0x81
    316e:	5cc4      	ldrb	r4, [r0, r3]
    3170:	3301      	adds	r3, #1
    3172:	5cc2      	ldrb	r2, [r0, r3]
    3174:	0212      	lsls	r2, r2, #8
    3176:	4322      	orrs	r2, r4
    3178:	3301      	adds	r3, #1
    317a:	5cc3      	ldrb	r3, [r0, r3]
    317c:	041b      	lsls	r3, r3, #16
    317e:	4313      	orrs	r3, r2
    3180:	001a      	movs	r2, r3
    3182:	2384      	movs	r3, #132	; 0x84
    3184:	5cc3      	ldrb	r3, [r0, r3]
    3186:	061b      	lsls	r3, r3, #24
    3188:	4313      	orrs	r3, r2
    318a:	1c82      	adds	r2, r0, #2
	}

	nwkSecuritySize = nwkFramePayloadSize(nwkSecurityActiveFrame);
    318c:	1a9b      	subs	r3, r3, r2
    318e:	7842      	ldrb	r2, [r0, #1]
    3190:	1ad3      	subs	r3, r2, r3
    3192:	4a14      	ldr	r2, [pc, #80]	; (31e4 <nwkSecurityTaskHandler+0x18c>)
    3194:	7013      	strb	r3, [r2, #0]
	nwkSecurityOffset = 0;
    3196:	2200      	movs	r2, #0
    3198:	4b0a      	ldr	r3, [pc, #40]	; (31c4 <nwkSecurityTaskHandler+0x16c>)
    319a:	701a      	strb	r2, [r3, #0]
	nwkSecurityEncrypt
		= (NWK_SECURITY_STATE_ENCRYPT_PENDING ==
    319c:	002b      	movs	r3, r5
    319e:	3b30      	subs	r3, #48	; 0x30
    31a0:	4259      	negs	r1, r3
    31a2:	4159      	adcs	r1, r3
    31a4:	4a09      	ldr	r2, [pc, #36]	; (31cc <nwkSecurityTaskHandler+0x174>)
    31a6:	7011      	strb	r1, [r2, #0]
			nwkSecurityActiveFrame->state);

	nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_PROCESS;
    31a8:	2332      	movs	r3, #50	; 0x32
    31aa:	7003      	strb	r3, [r0, #0]
    31ac:	e004      	b.n	31b8 <nwkSecurityTaskHandler+0x160>
    31ae:	2000      	movs	r0, #0
		}

		return;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
    31b0:	4c0d      	ldr	r4, [pc, #52]	; (31e8 <nwkSecurityTaskHandler+0x190>)
    31b2:	47a0      	blx	r4
    31b4:	2800      	cmp	r0, #0
    31b6:	d1af      	bne.n	3118 <nwkSecurityTaskHandler+0xc0>
			nwkSecurityActiveFrame = frame;
			nwkSecurityStart();
			return;
		}
	}
}
    31b8:	b002      	add	sp, #8
    31ba:	bd70      	pop	{r4, r5, r6, pc}
    31bc:	200006c8 	.word	0x200006c8
    31c0:	200006cc 	.word	0x200006cc
    31c4:	200006d0 	.word	0x200006d0
    31c8:	200006d4 	.word	0x200006d4
    31cc:	200006d2 	.word	0x200006d2
    31d0:	00004b9d 	.word	0x00004b9d
    31d4:	00003455 	.word	0x00003455
    31d8:	00002b75 	.word	0x00002b75
    31dc:	200008d0 	.word	0x200008d0
    31e0:	00003869 	.word	0x00003869
    31e4:	200006d1 	.word	0x200006d1
    31e8:	000026a1 	.word	0x000026a1

000031ec <nwkTxDelayTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
    31ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    31ee:	b083      	sub	sp, #12
    31f0:	9001      	str	r0, [sp, #4]
	NwkFrame_t *frame = NULL;
	bool restart = false;
    31f2:	2400      	movs	r4, #0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
    31f4:	2000      	movs	r0, #0
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    31f6:	4d10      	ldr	r5, [pc, #64]	; (3238 <nwkTxDelayTimerHandler+0x4c>)
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
			restart = true;

			if (0 == --frame->tx.timeout) {
    31f8:	2686      	movs	r6, #134	; 0x86
    31fa:	2787      	movs	r7, #135	; 0x87
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    31fc:	e012      	b.n	3224 <nwkTxDelayTimerHandler+0x38>
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
    31fe:	7803      	ldrb	r3, [r0, #0]
    3200:	2b11      	cmp	r3, #17
    3202:	d10f      	bne.n	3224 <nwkTxDelayTimerHandler+0x38>
			restart = true;

			if (0 == --frame->tx.timeout) {
    3204:	5d82      	ldrb	r2, [r0, r6]
    3206:	5dc3      	ldrb	r3, [r0, r7]
    3208:	021b      	lsls	r3, r3, #8
    320a:	4313      	orrs	r3, r2
    320c:	3b01      	subs	r3, #1
    320e:	b29b      	uxth	r3, r3
    3210:	5583      	strb	r3, [r0, r6]
    3212:	0a19      	lsrs	r1, r3, #8
    3214:	0002      	movs	r2, r0
    3216:	3286      	adds	r2, #134	; 0x86
    3218:	7051      	strb	r1, [r2, #1]
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
			restart = true;
    321a:	2401      	movs	r4, #1

			if (0 == --frame->tx.timeout) {
    321c:	2b00      	cmp	r3, #0
    321e:	d101      	bne.n	3224 <nwkTxDelayTimerHandler+0x38>
				frame->state = NWK_TX_STATE_SEND;
    3220:	3313      	adds	r3, #19
    3222:	7003      	strb	r3, [r0, #0]
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    3224:	47a8      	blx	r5
    3226:	2800      	cmp	r0, #0
    3228:	d1e9      	bne.n	31fe <nwkTxDelayTimerHandler+0x12>
				frame->state = NWK_TX_STATE_SEND;
			}
		}
	}

	if (restart) {
    322a:	2c00      	cmp	r4, #0
    322c:	d002      	beq.n	3234 <nwkTxDelayTimerHandler+0x48>
		SYS_TimerStart(timer);
    322e:	9801      	ldr	r0, [sp, #4]
    3230:	4b02      	ldr	r3, [pc, #8]	; (323c <nwkTxDelayTimerHandler+0x50>)
    3232:	4798      	blx	r3
	}
}
    3234:	b003      	add	sp, #12
    3236:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3238:	000026a1 	.word	0x000026a1
    323c:	00003961 	.word	0x00003961

00003240 <nwkTxAckWaitTimerHandler>:
}

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
    3240:	b5f0      	push	{r4, r5, r6, r7, lr}
    3242:	b083      	sub	sp, #12
    3244:	9001      	str	r0, [sp, #4]
	NwkFrame_t *frame = NULL;
	bool restart = false;
    3246:	2400      	movs	r4, #0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
    3248:	2000      	movs	r0, #0
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    324a:	4d12      	ldr	r5, [pc, #72]	; (3294 <nwkTxAckWaitTimerHandler+0x54>)
		if (NWK_TX_STATE_WAIT_ACK == frame->state) {
			restart = true;

			if (0 == --frame->tx.timeout) {
    324c:	2686      	movs	r6, #134	; 0x86
    324e:	2787      	movs	r7, #135	; 0x87
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    3250:	e015      	b.n	327e <nwkTxAckWaitTimerHandler+0x3e>
		if (NWK_TX_STATE_WAIT_ACK == frame->state) {
    3252:	7803      	ldrb	r3, [r0, #0]
    3254:	2b16      	cmp	r3, #22
    3256:	d112      	bne.n	327e <nwkTxAckWaitTimerHandler+0x3e>
			restart = true;

			if (0 == --frame->tx.timeout) {
    3258:	5d82      	ldrb	r2, [r0, r6]
    325a:	5dc3      	ldrb	r3, [r0, r7]
    325c:	021b      	lsls	r3, r3, #8
    325e:	4313      	orrs	r3, r2
    3260:	3b01      	subs	r3, #1
    3262:	b29b      	uxth	r3, r3
    3264:	5583      	strb	r3, [r0, r6]
    3266:	0a19      	lsrs	r1, r3, #8
    3268:	0002      	movs	r2, r0
    326a:	3286      	adds	r2, #134	; 0x86
    326c:	7051      	strb	r1, [r2, #1]
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_TX_STATE_WAIT_ACK == frame->state) {
			restart = true;
    326e:	2401      	movs	r4, #1

			if (0 == --frame->tx.timeout) {
    3270:	2b00      	cmp	r3, #0
    3272:	d104      	bne.n	327e <nwkTxAckWaitTimerHandler+0x3e>

/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
	frame->state = NWK_TX_STATE_CONFIRM;
    3274:	3317      	adds	r3, #23
    3276:	7003      	strb	r3, [r0, #0]
	frame->tx.status = status;
    3278:	2210      	movs	r2, #16
    327a:	336e      	adds	r3, #110	; 0x6e
    327c:	54c2      	strb	r2, [r0, r3]
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    327e:	47a8      	blx	r5
    3280:	2800      	cmp	r0, #0
    3282:	d1e6      	bne.n	3252 <nwkTxAckWaitTimerHandler+0x12>
				nwkTxConfirm(frame, NWK_NO_ACK_STATUS);
			}
		}
	}

	if (restart) {
    3284:	2c00      	cmp	r4, #0
    3286:	d002      	beq.n	328e <nwkTxAckWaitTimerHandler+0x4e>
		SYS_TimerStart(timer);
    3288:	9801      	ldr	r0, [sp, #4]
    328a:	4b03      	ldr	r3, [pc, #12]	; (3298 <nwkTxAckWaitTimerHandler+0x58>)
    328c:	4798      	blx	r3
	}
}
    328e:	b003      	add	sp, #12
    3290:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3292:	46c0      	nop			; (mov r8, r8)
    3294:	000026a1 	.word	0x000026a1
    3298:	00003961 	.word	0x00003961

0000329c <nwkTxInit>:
/*************************************************************************//**
*  @brief Initializes the Tx module
*****************************************************************************/
void nwkTxInit(void)
{
	nwkTxPhyActiveFrame = NULL;
    329c:	2200      	movs	r2, #0
    329e:	4b07      	ldr	r3, [pc, #28]	; (32bc <nwkTxInit+0x20>)
    32a0:	601a      	str	r2, [r3, #0]

	nwkTxAckWaitTimer.interval = NWK_TX_ACK_WAIT_TIMER_INTERVAL;
    32a2:	4b07      	ldr	r3, [pc, #28]	; (32c0 <nwkTxInit+0x24>)
    32a4:	2132      	movs	r1, #50	; 0x32
    32a6:	6099      	str	r1, [r3, #8]
	nwkTxAckWaitTimer.mode = SYS_TIMER_INTERVAL_MODE;
    32a8:	731a      	strb	r2, [r3, #12]
	nwkTxAckWaitTimer.handler = nwkTxAckWaitTimerHandler;
    32aa:	4906      	ldr	r1, [pc, #24]	; (32c4 <nwkTxInit+0x28>)
    32ac:	6119      	str	r1, [r3, #16]

	nwkTxDelayTimer.interval = NWK_TX_DELAY_TIMER_INTERVAL;
    32ae:	4b06      	ldr	r3, [pc, #24]	; (32c8 <nwkTxInit+0x2c>)
    32b0:	210a      	movs	r1, #10
    32b2:	6099      	str	r1, [r3, #8]
	nwkTxDelayTimer.mode = SYS_TIMER_INTERVAL_MODE;
    32b4:	731a      	strb	r2, [r3, #12]
	nwkTxDelayTimer.handler = nwkTxDelayTimerHandler;
    32b6:	4a05      	ldr	r2, [pc, #20]	; (32cc <nwkTxInit+0x30>)
    32b8:	611a      	str	r2, [r3, #16]
}
    32ba:	4770      	bx	lr
    32bc:	200006f8 	.word	0x200006f8
    32c0:	200006e4 	.word	0x200006e4
    32c4:	00003241 	.word	0x00003241
    32c8:	200006fc 	.word	0x200006fc
    32cc:	000031ed 	.word	0x000031ed

000032d0 <nwkTxFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxFrame(NwkFrame_t *frame)
{
    32d0:	b510      	push	{r4, lr}
    32d2:	0004      	movs	r4, r0
	NwkFrameHeader_t *header = &frame->header;

	if (frame->tx.control & NWK_TX_CONTROL_ROUTING) {
    32d4:	2388      	movs	r3, #136	; 0x88
    32d6:	5cc3      	ldrb	r3, [r0, r3]
    32d8:	079a      	lsls	r2, r3, #30
    32da:	d502      	bpl.n	32e2 <nwkTxFrame+0x12>
		frame->state = NWK_TX_STATE_DELAY;
    32dc:	2212      	movs	r2, #18
    32de:	7002      	strb	r2, [r0, #0]
    32e0:	e007      	b.n	32f2 <nwkTxFrame+0x22>
	} else {
  #ifdef NWK_ENABLE_SECURITY
		if (header->nwkFcf.security) {
    32e2:	7ac2      	ldrb	r2, [r0, #11]
    32e4:	0792      	lsls	r2, r2, #30
    32e6:	d502      	bpl.n	32ee <nwkTxFrame+0x1e>
			frame->state = NWK_TX_STATE_ENCRYPT;
    32e8:	2210      	movs	r2, #16
    32ea:	7002      	strb	r2, [r0, #0]
    32ec:	e001      	b.n	32f2 <nwkTxFrame+0x22>
		} else
  #endif
		frame->state = NWK_TX_STATE_DELAY;
    32ee:	2212      	movs	r2, #18
    32f0:	7002      	strb	r2, [r0, #0]
	}

	frame->tx.status = NWK_SUCCESS_STATUS;
    32f2:	2100      	movs	r1, #0
    32f4:	2285      	movs	r2, #133	; 0x85
    32f6:	54a1      	strb	r1, [r4, r2]

	if (frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID) {
    32f8:	07da      	lsls	r2, r3, #31
    32fa:	d504      	bpl.n	3306 <nwkTxFrame+0x36>
		header->macDstPanId = NWK_BROADCAST_PANID;
    32fc:	2201      	movs	r2, #1
    32fe:	4252      	negs	r2, r2
    3300:	7162      	strb	r2, [r4, #5]
    3302:	71a2      	strb	r2, [r4, #6]
    3304:	e004      	b.n	3310 <nwkTxFrame+0x40>
	} else {
		header->macDstPanId = nwkIb.panId;
    3306:	4a1d      	ldr	r2, [pc, #116]	; (337c <nwkTxFrame+0xac>)
    3308:	7891      	ldrb	r1, [r2, #2]
    330a:	7161      	strb	r1, [r4, #5]
    330c:	78d2      	ldrb	r2, [r2, #3]
    330e:	71a2      	strb	r2, [r4, #6]
	}

#ifdef NWK_ENABLE_ROUTING
	if (0 == (frame->tx.control & NWK_TX_CONTROL_DIRECT_LINK) &&
    3310:	2205      	movs	r2, #5
    3312:	421a      	tst	r2, r3
    3314:	d103      	bne.n	331e <nwkTxFrame+0x4e>
			0 ==
			(frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID)) {
		nwkRoutePrepareTx(frame);
    3316:	0020      	movs	r0, r4
    3318:	4b19      	ldr	r3, [pc, #100]	; (3380 <nwkTxFrame+0xb0>)
    331a:	4798      	blx	r3
    331c:	e003      	b.n	3326 <nwkTxFrame+0x56>
	} else
#endif
	header->macDstAddr = header->nwkDstAddr;
    331e:	7be2      	ldrb	r2, [r4, #15]
    3320:	7c23      	ldrb	r3, [r4, #16]
    3322:	71e2      	strb	r2, [r4, #7]
    3324:	7223      	strb	r3, [r4, #8]

	header->macSrcAddr = nwkIb.addr;
    3326:	4915      	ldr	r1, [pc, #84]	; (337c <nwkTxFrame+0xac>)
    3328:	780b      	ldrb	r3, [r1, #0]
    332a:	7263      	strb	r3, [r4, #9]
    332c:	784b      	ldrb	r3, [r1, #1]
    332e:	72a3      	strb	r3, [r4, #10]
	header->macSeq = ++nwkIb.macSeqNum;
    3330:	794b      	ldrb	r3, [r1, #5]
    3332:	3301      	adds	r3, #1
    3334:	b2db      	uxtb	r3, r3
    3336:	714b      	strb	r3, [r1, #5]
    3338:	7123      	strb	r3, [r4, #4]

	if (NWK_BROADCAST_ADDR == header->macDstAddr) {
    333a:	79e1      	ldrb	r1, [r4, #7]
    333c:	7a23      	ldrb	r3, [r4, #8]
    333e:	021b      	lsls	r3, r3, #8
    3340:	430b      	orrs	r3, r1
    3342:	4a10      	ldr	r2, [pc, #64]	; (3384 <nwkTxFrame+0xb4>)
    3344:	4293      	cmp	r3, r2
    3346:	d10e      	bne.n	3366 <nwkTxFrame+0x96>
		header->macFcf = 0x8841;
    3348:	2341      	movs	r3, #65	; 0x41
    334a:	70a3      	strb	r3, [r4, #2]
    334c:	3bb9      	subs	r3, #185	; 0xb9
    334e:	70e3      	strb	r3, [r4, #3]
		frame->tx.timeout = (rand() & NWK_TX_DELAY_JITTER_MASK) + 1;
    3350:	4b0d      	ldr	r3, [pc, #52]	; (3388 <nwkTxFrame+0xb8>)
    3352:	4798      	blx	r3
    3354:	2307      	movs	r3, #7
    3356:	4018      	ands	r0, r3
    3358:	3001      	adds	r0, #1
    335a:	337f      	adds	r3, #127	; 0x7f
    335c:	54e0      	strb	r0, [r4, r3]
    335e:	3486      	adds	r4, #134	; 0x86
    3360:	2300      	movs	r3, #0
    3362:	7063      	strb	r3, [r4, #1]
    3364:	e009      	b.n	337a <nwkTxFrame+0xaa>
	} else {
		header->macFcf = 0x8861;
    3366:	2361      	movs	r3, #97	; 0x61
    3368:	70a3      	strb	r3, [r4, #2]
    336a:	3bd9      	subs	r3, #217	; 0xd9
    336c:	70e3      	strb	r3, [r4, #3]
		frame->tx.timeout = 0;
    336e:	2200      	movs	r2, #0
    3370:	33fe      	adds	r3, #254	; 0xfe
    3372:	54e2      	strb	r2, [r4, r3]
    3374:	3486      	adds	r4, #134	; 0x86
    3376:	2300      	movs	r3, #0
    3378:	7063      	strb	r3, [r4, #1]
	}
}
    337a:	bd10      	pop	{r4, pc}
    337c:	20000888 	.word	0x20000888
    3380:	00002939 	.word	0x00002939
    3384:	0000ffff 	.word	0x0000ffff
    3388:	00004c99 	.word	0x00004c99

0000338c <nwkTxBroadcastFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxBroadcastFrame(NwkFrame_t *frame)
{
    338c:	b570      	push	{r4, r5, r6, lr}
    338e:	0005      	movs	r5, r0
	NwkFrame_t *newFrame;

	if (NULL == (newFrame = nwkFrameAlloc())) {
    3390:	4b1c      	ldr	r3, [pc, #112]	; (3404 <nwkTxBroadcastFrame+0x78>)
    3392:	4798      	blx	r3
    3394:	1e04      	subs	r4, r0, #0
    3396:	d033      	beq.n	3400 <nwkTxBroadcastFrame+0x74>
		return;
	}

	newFrame->state = NWK_TX_STATE_DELAY;
    3398:	2312      	movs	r3, #18
    339a:	7003      	strb	r3, [r0, #0]
	newFrame->size = frame->size;
    339c:	786b      	ldrb	r3, [r5, #1]
    339e:	7043      	strb	r3, [r0, #1]
	newFrame->tx.status = NWK_SUCCESS_STATUS;
    33a0:	2200      	movs	r2, #0
    33a2:	2385      	movs	r3, #133	; 0x85
    33a4:	54c2      	strb	r2, [r0, r3]
	newFrame->tx.timeout = (rand() & NWK_TX_DELAY_JITTER_MASK) + 1;
    33a6:	4b18      	ldr	r3, [pc, #96]	; (3408 <nwkTxBroadcastFrame+0x7c>)
    33a8:	4798      	blx	r3
    33aa:	2307      	movs	r3, #7
    33ac:	4018      	ands	r0, r3
    33ae:	3001      	adds	r0, #1
    33b0:	337f      	adds	r3, #127	; 0x7f
    33b2:	54e0      	strb	r0, [r4, r3]
    33b4:	0c00      	lsrs	r0, r0, #16
    33b6:	0023      	movs	r3, r4
    33b8:	3386      	adds	r3, #134	; 0x86
    33ba:	7058      	strb	r0, [r3, #1]
	newFrame->tx.confirm = NULL;
    33bc:	2200      	movs	r2, #0
    33be:	2389      	movs	r3, #137	; 0x89
    33c0:	54e2      	strb	r2, [r4, r3]
    33c2:	0023      	movs	r3, r4
    33c4:	3389      	adds	r3, #137	; 0x89
    33c6:	705a      	strb	r2, [r3, #1]
    33c8:	709a      	strb	r2, [r3, #2]
    33ca:	70da      	strb	r2, [r3, #3]
	memcpy(newFrame->data, frame->data, frame->size);
    33cc:	1ca0      	adds	r0, r4, #2
    33ce:	786a      	ldrb	r2, [r5, #1]
    33d0:	1ca9      	adds	r1, r5, #2
    33d2:	4b0e      	ldr	r3, [pc, #56]	; (340c <nwkTxBroadcastFrame+0x80>)
    33d4:	4798      	blx	r3

	newFrame->header.macFcf = 0x8841;
    33d6:	2341      	movs	r3, #65	; 0x41
    33d8:	70a3      	strb	r3, [r4, #2]
    33da:	3bb9      	subs	r3, #185	; 0xb9
    33dc:	70e3      	strb	r3, [r4, #3]
	newFrame->header.macDstAddr = NWK_BROADCAST_ADDR;
    33de:	3377      	adds	r3, #119	; 0x77
    33e0:	71e3      	strb	r3, [r4, #7]
    33e2:	7223      	strb	r3, [r4, #8]
	newFrame->header.macDstPanId = frame->header.macDstPanId;
    33e4:	796a      	ldrb	r2, [r5, #5]
    33e6:	79ab      	ldrb	r3, [r5, #6]
    33e8:	7162      	strb	r2, [r4, #5]
    33ea:	71a3      	strb	r3, [r4, #6]
	newFrame->header.macSrcAddr = nwkIb.addr;
    33ec:	4a08      	ldr	r2, [pc, #32]	; (3410 <nwkTxBroadcastFrame+0x84>)
    33ee:	7813      	ldrb	r3, [r2, #0]
    33f0:	7263      	strb	r3, [r4, #9]
    33f2:	7853      	ldrb	r3, [r2, #1]
    33f4:	72a3      	strb	r3, [r4, #10]
	newFrame->header.macSeq = ++nwkIb.macSeqNum;
    33f6:	7953      	ldrb	r3, [r2, #5]
    33f8:	3301      	adds	r3, #1
    33fa:	b2db      	uxtb	r3, r3
    33fc:	7153      	strb	r3, [r2, #5]
    33fe:	7123      	strb	r3, [r4, #4]
}
    3400:	bd70      	pop	{r4, r5, r6, pc}
    3402:	46c0      	nop			; (mov r8, r8)
    3404:	0000261d 	.word	0x0000261d
    3408:	00004c99 	.word	0x00004c99
    340c:	00004b9d 	.word	0x00004b9d
    3410:	20000888 	.word	0x20000888

00003414 <nwkTxAckReceived>:

/*************************************************************************//**
*****************************************************************************/
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
    3414:	b570      	push	{r4, r5, r6, lr}
	NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
	NwkFrame_t *frame = NULL;

	if (sizeof(NwkCommandAck_t) != ind->size) {
    3416:	7b02      	ldrb	r2, [r0, #12]
		return false;
    3418:	2300      	movs	r3, #0
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
	NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
	NwkFrame_t *frame = NULL;

	if (sizeof(NwkCommandAck_t) != ind->size) {
    341a:	2a03      	cmp	r2, #3
    341c:	d115      	bne.n	344a <nwkTxAckReceived+0x36>
    341e:	e00d      	b.n	343c <nwkTxAckReceived+0x28>
		return false;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_TX_STATE_WAIT_ACK == frame->state &&
    3420:	7803      	ldrb	r3, [r0, #0]
    3422:	2b16      	cmp	r3, #22
    3424:	d10d      	bne.n	3442 <nwkTxAckReceived+0x2e>
    3426:	7b02      	ldrb	r2, [r0, #12]
    3428:	786b      	ldrb	r3, [r5, #1]
    342a:	429a      	cmp	r2, r3
    342c:	d109      	bne.n	3442 <nwkTxAckReceived+0x2e>
				frame->header.nwkSeq == command->seq) {
			frame->state = NWK_TX_STATE_CONFIRM;
    342e:	2317      	movs	r3, #23
    3430:	7003      	strb	r3, [r0, #0]
			frame->tx.control = command->control;
    3432:	78aa      	ldrb	r2, [r5, #2]
    3434:	3371      	adds	r3, #113	; 0x71
    3436:	54c2      	strb	r2, [r0, r3]
			return true;
    3438:	3b87      	subs	r3, #135	; 0x87
    343a:	e006      	b.n	344a <nwkTxAckReceived+0x36>

/*************************************************************************//**
*****************************************************************************/
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
	NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
    343c:	6885      	ldr	r5, [r0, #8]
    343e:	2000      	movs	r0, #0

	if (sizeof(NwkCommandAck_t) != ind->size) {
		return false;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
    3440:	4c03      	ldr	r4, [pc, #12]	; (3450 <nwkTxAckReceived+0x3c>)
    3442:	47a0      	blx	r4
    3444:	2800      	cmp	r0, #0
    3446:	d1eb      	bne.n	3420 <nwkTxAckReceived+0xc>
			frame->tx.control = command->control;
			return true;
		}
	}

	return false;
    3448:	2300      	movs	r3, #0
}
    344a:	0018      	movs	r0, r3
    344c:	bd70      	pop	{r4, r5, r6, pc}
    344e:	46c0      	nop			; (mov r8, r8)
    3450:	000026a1 	.word	0x000026a1

00003454 <nwkTxEncryptConf>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxEncryptConf(NwkFrame_t *frame)
{
	frame->state = NWK_TX_STATE_DELAY;
    3454:	2312      	movs	r3, #18
    3456:	7003      	strb	r3, [r0, #0]
}
    3458:	4770      	bx	lr
    345a:	46c0      	nop			; (mov r8, r8)

0000345c <PHY_DataConf>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
	nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    345c:	4b0d      	ldr	r3, [pc, #52]	; (3494 <PHY_DataConf+0x38>)
    345e:	681b      	ldr	r3, [r3, #0]

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
	switch (status) {
    3460:	2801      	cmp	r0, #1
    3462:	d005      	beq.n	3470 <PHY_DataConf+0x14>
    3464:	2800      	cmp	r0, #0
    3466:	d007      	beq.n	3478 <PHY_DataConf+0x1c>

	case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
		return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;

	case PHY_STATUS_NO_ACK:
		return NWK_PHY_NO_ACK_STATUS;
    3468:	2221      	movs	r2, #33	; 0x21

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
	switch (status) {
    346a:	2802      	cmp	r0, #2
    346c:	d005      	beq.n	347a <PHY_DataConf+0x1e>
    346e:	e001      	b.n	3474 <PHY_DataConf+0x18>
	case PHY_STATUS_SUCCESS:
		return NWK_SUCCESS_STATUS;

	case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
		return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;
    3470:	2220      	movs	r2, #32
    3472:	e002      	b.n	347a <PHY_DataConf+0x1e>

	case PHY_STATUS_NO_ACK:
		return NWK_PHY_NO_ACK_STATUS;

	default:
		return NWK_ERROR_STATUS;
    3474:	2201      	movs	r2, #1
    3476:	e000      	b.n	347a <PHY_DataConf+0x1e>
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
	switch (status) {
	case PHY_STATUS_SUCCESS:
		return NWK_SUCCESS_STATUS;
    3478:	2200      	movs	r2, #0

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
	nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    347a:	2185      	movs	r1, #133	; 0x85
    347c:	545a      	strb	r2, [r3, r1]
	nwkTxPhyActiveFrame->state = NWK_TX_STATE_SENT;
    347e:	2215      	movs	r2, #21
    3480:	701a      	strb	r2, [r3, #0]
	nwkTxPhyActiveFrame = NULL;
    3482:	2200      	movs	r2, #0
    3484:	4b03      	ldr	r3, [pc, #12]	; (3494 <PHY_DataConf+0x38>)
    3486:	601a      	str	r2, [r3, #0]
	nwkIb.lock--;
    3488:	4903      	ldr	r1, [pc, #12]	; (3498 <PHY_DataConf+0x3c>)
    348a:	3258      	adds	r2, #88	; 0x58
    348c:	5a8b      	ldrh	r3, [r1, r2]
    348e:	3b01      	subs	r3, #1
    3490:	528b      	strh	r3, [r1, r2]
}
    3492:	4770      	bx	lr
    3494:	200006f8 	.word	0x200006f8
    3498:	20000888 	.word	0x20000888

0000349c <nwkTxTaskHandler>:

/*************************************************************************//**
*  @brief Tx Module task handler
*****************************************************************************/
void nwkTxTaskHandler(void)
{
    349c:	b570      	push	{r4, r5, r6, lr}
	NwkFrame_t *frame = NULL;
    349e:	2400      	movs	r4, #0

	while (NULL != (frame = nwkFrameNext(frame))) {
    34a0:	4d38      	ldr	r5, [pc, #224]	; (3584 <nwkTxTaskHandler+0xe8>)
		switch (frame->state) {
    34a2:	4e39      	ldr	r6, [pc, #228]	; (3588 <nwkTxTaskHandler+0xec>)
*****************************************************************************/
void nwkTxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    34a4:	e068      	b.n	3578 <nwkTxTaskHandler+0xdc>
		switch (frame->state) {
    34a6:	7823      	ldrb	r3, [r4, #0]
    34a8:	3b10      	subs	r3, #16
    34aa:	b2da      	uxtb	r2, r3
    34ac:	2a07      	cmp	r2, #7
    34ae:	d863      	bhi.n	3578 <nwkTxTaskHandler+0xdc>
    34b0:	0093      	lsls	r3, r2, #2
    34b2:	58f3      	ldr	r3, [r6, r3]
    34b4:	469f      	mov	pc, r3
#ifdef NWK_ENABLE_SECURITY
		case NWK_TX_STATE_ENCRYPT:
		{
			nwkSecurityProcess(frame, true);
    34b6:	2101      	movs	r1, #1
    34b8:	0020      	movs	r0, r4
    34ba:	4b34      	ldr	r3, [pc, #208]	; (358c <nwkTxTaskHandler+0xf0>)
    34bc:	4798      	blx	r3
		}
		break;
    34be:	e05b      	b.n	3578 <nwkTxTaskHandler+0xdc>
#endif

		case NWK_TX_STATE_DELAY:
		{
			if (frame->tx.timeout > 0) {
    34c0:	2386      	movs	r3, #134	; 0x86
    34c2:	5ce2      	ldrb	r2, [r4, r3]
    34c4:	3301      	adds	r3, #1
    34c6:	5ce3      	ldrb	r3, [r4, r3]
    34c8:	021b      	lsls	r3, r3, #8
    34ca:	4313      	orrs	r3, r2
    34cc:	d005      	beq.n	34da <nwkTxTaskHandler+0x3e>
				frame->state = NWK_TX_STATE_WAIT_DELAY;
    34ce:	2311      	movs	r3, #17
    34d0:	7023      	strb	r3, [r4, #0]
				SYS_TimerStart(&nwkTxDelayTimer);
    34d2:	482f      	ldr	r0, [pc, #188]	; (3590 <nwkTxTaskHandler+0xf4>)
    34d4:	4b2f      	ldr	r3, [pc, #188]	; (3594 <nwkTxTaskHandler+0xf8>)
    34d6:	4798      	blx	r3
    34d8:	e04e      	b.n	3578 <nwkTxTaskHandler+0xdc>
			} else {
				frame->state = NWK_TX_STATE_SEND;
    34da:	2313      	movs	r3, #19
    34dc:	7023      	strb	r3, [r4, #0]
    34de:	e04b      	b.n	3578 <nwkTxTaskHandler+0xdc>
		}
		break;

		case NWK_TX_STATE_SEND:
		{
			if (NULL == nwkTxPhyActiveFrame) {
    34e0:	4b2d      	ldr	r3, [pc, #180]	; (3598 <nwkTxTaskHandler+0xfc>)
    34e2:	681b      	ldr	r3, [r3, #0]
    34e4:	2b00      	cmp	r3, #0
    34e6:	d147      	bne.n	3578 <nwkTxTaskHandler+0xdc>
				nwkTxPhyActiveFrame = frame;
    34e8:	4b2b      	ldr	r3, [pc, #172]	; (3598 <nwkTxTaskHandler+0xfc>)
    34ea:	601c      	str	r4, [r3, #0]
				frame->state = NWK_TX_STATE_WAIT_CONF;
    34ec:	2314      	movs	r3, #20
    34ee:	7023      	strb	r3, [r4, #0]
				PHY_DataReq(&(frame->size));
    34f0:	1c60      	adds	r0, r4, #1
    34f2:	4b2a      	ldr	r3, [pc, #168]	; (359c <nwkTxTaskHandler+0x100>)
    34f4:	4798      	blx	r3
				nwkIb.lock++;
    34f6:	492a      	ldr	r1, [pc, #168]	; (35a0 <nwkTxTaskHandler+0x104>)
    34f8:	2258      	movs	r2, #88	; 0x58
    34fa:	5a8b      	ldrh	r3, [r1, r2]
    34fc:	3301      	adds	r3, #1
    34fe:	528b      	strh	r3, [r1, r2]
    3500:	e03a      	b.n	3578 <nwkTxTaskHandler+0xdc>
		case NWK_TX_STATE_WAIT_CONF:
			break;

		case NWK_TX_STATE_SENT:
		{
			if (NWK_SUCCESS_STATUS == frame->tx.status) {
    3502:	2385      	movs	r3, #133	; 0x85
    3504:	5ce3      	ldrb	r3, [r4, r3]
    3506:	2b00      	cmp	r3, #0
    3508:	d11a      	bne.n	3540 <nwkTxTaskHandler+0xa4>
				if (frame->header.nwkSrcAddr == nwkIb.addr &&
    350a:	7b62      	ldrb	r2, [r4, #13]
    350c:	7ba3      	ldrb	r3, [r4, #14]
    350e:	021b      	lsls	r3, r3, #8
    3510:	4923      	ldr	r1, [pc, #140]	; (35a0 <nwkTxTaskHandler+0x104>)
    3512:	8809      	ldrh	r1, [r1, #0]
    3514:	4313      	orrs	r3, r2
    3516:	4299      	cmp	r1, r3
    3518:	d10f      	bne.n	353a <nwkTxTaskHandler+0x9e>
    351a:	7ae3      	ldrb	r3, [r4, #11]
    351c:	07db      	lsls	r3, r3, #31
    351e:	d50c      	bpl.n	353a <nwkTxTaskHandler+0x9e>
						frame->header.nwkFcf.
						ackRequest) {
					frame->state = NWK_TX_STATE_WAIT_ACK;
    3520:	2316      	movs	r3, #22
    3522:	7023      	strb	r3, [r4, #0]
					frame->tx.timeout = NWK_ACK_WAIT_TIME /
    3524:	2215      	movs	r2, #21
    3526:	3370      	adds	r3, #112	; 0x70
    3528:	54e2      	strb	r2, [r4, r3]
    352a:	2200      	movs	r2, #0
    352c:	0023      	movs	r3, r4
    352e:	3386      	adds	r3, #134	; 0x86
    3530:	705a      	strb	r2, [r3, #1]
							NWK_TX_ACK_WAIT_TIMER_INTERVAL
							+ 1;
					SYS_TimerStart(&nwkTxAckWaitTimer);
    3532:	481c      	ldr	r0, [pc, #112]	; (35a4 <nwkTxTaskHandler+0x108>)
    3534:	4b17      	ldr	r3, [pc, #92]	; (3594 <nwkTxTaskHandler+0xf8>)
    3536:	4798      	blx	r3
    3538:	e01e      	b.n	3578 <nwkTxTaskHandler+0xdc>
				} else {
					frame->state = NWK_TX_STATE_CONFIRM;
    353a:	2317      	movs	r3, #23
    353c:	7023      	strb	r3, [r4, #0]
    353e:	e01b      	b.n	3578 <nwkTxTaskHandler+0xdc>
				}
			} else {
				frame->state = NWK_TX_STATE_CONFIRM;
    3540:	2317      	movs	r3, #23
    3542:	7023      	strb	r3, [r4, #0]
    3544:	e018      	b.n	3578 <nwkTxTaskHandler+0xdc>
			break;

		case NWK_TX_STATE_CONFIRM:
		{
#ifdef NWK_ENABLE_ROUTING
			nwkRouteFrameSent(frame);
    3546:	0020      	movs	r0, r4
    3548:	4b17      	ldr	r3, [pc, #92]	; (35a8 <nwkTxTaskHandler+0x10c>)
    354a:	4798      	blx	r3
#endif
			if (NULL == frame->tx.confirm) {
    354c:	2389      	movs	r3, #137	; 0x89
    354e:	5ce0      	ldrb	r0, [r4, r3]
    3550:	3301      	adds	r3, #1
    3552:	5ce2      	ldrb	r2, [r4, r3]
    3554:	0212      	lsls	r2, r2, #8
    3556:	4302      	orrs	r2, r0
    3558:	3301      	adds	r3, #1
    355a:	5ce3      	ldrb	r3, [r4, r3]
    355c:	041b      	lsls	r3, r3, #16
    355e:	4313      	orrs	r3, r2
    3560:	001a      	movs	r2, r3
    3562:	238c      	movs	r3, #140	; 0x8c
    3564:	5ce3      	ldrb	r3, [r4, r3]
    3566:	061b      	lsls	r3, r3, #24
    3568:	4313      	orrs	r3, r2
    356a:	d103      	bne.n	3574 <nwkTxTaskHandler+0xd8>
				nwkFrameFree(frame);
    356c:	0020      	movs	r0, r4
    356e:	4b0f      	ldr	r3, [pc, #60]	; (35ac <nwkTxTaskHandler+0x110>)
    3570:	4798      	blx	r3
    3572:	e001      	b.n	3578 <nwkTxTaskHandler+0xdc>
			} else {
				frame->tx.confirm(frame);
    3574:	0020      	movs	r0, r4
    3576:	4798      	blx	r3
*****************************************************************************/
void nwkTxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    3578:	0020      	movs	r0, r4
    357a:	47a8      	blx	r5
    357c:	1e04      	subs	r4, r0, #0
    357e:	d192      	bne.n	34a6 <nwkTxTaskHandler+0xa>

		default:
			break;
		}
	}
}
    3580:	bd70      	pop	{r4, r5, r6, pc}
    3582:	46c0      	nop			; (mov r8, r8)
    3584:	000026a1 	.word	0x000026a1
    3588:	00005778 	.word	0x00005778
    358c:	00002f8d 	.word	0x00002f8d
    3590:	200006fc 	.word	0x200006fc
    3594:	00003961 	.word	0x00003961
    3598:	200006f8 	.word	0x200006f8
    359c:	000036f5 	.word	0x000036f5
    35a0:	20000888 	.word	0x20000888
    35a4:	200006e4 	.word	0x200006e4
    35a8:	000028a9 	.word	0x000028a9
    35ac:	0000268d 	.word	0x0000268d

000035b0 <phyTrxSetState>:
}

/*************************************************************************//**
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
    35b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    35b2:	0004      	movs	r4, r0

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    35b4:	4f0b      	ldr	r7, [pc, #44]	; (35e4 <phyTrxSetState+0x34>)
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    35b6:	4e0c      	ldr	r6, [pc, #48]	; (35e8 <phyTrxSetState+0x38>)
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
	do { phyWriteRegister(TRX_STATE_REG, TRX_CMD_FORCE_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    35b8:	251f      	movs	r5, #31

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    35ba:	2103      	movs	r1, #3
    35bc:	2002      	movs	r0, #2
    35be:	47b8      	blx	r7
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    35c0:	2001      	movs	r0, #1
    35c2:	47b0      	blx	r6
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
	do { phyWriteRegister(TRX_STATE_REG, TRX_CMD_FORCE_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    35c4:	4028      	ands	r0, r5
    35c6:	2808      	cmp	r0, #8
    35c8:	d1f7      	bne.n	35ba <phyTrxSetState+0xa>

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    35ca:	4f06      	ldr	r7, [pc, #24]	; (35e4 <phyTrxSetState+0x34>)
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    35cc:	4e06      	ldr	r6, [pc, #24]	; (35e8 <phyTrxSetState+0x38>)
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));

	do { phyWriteRegister(TRX_STATE_REG,
			     state); } while (state !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    35ce:	251f      	movs	r5, #31

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    35d0:	0021      	movs	r1, r4
    35d2:	2002      	movs	r0, #2
    35d4:	47b8      	blx	r7
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    35d6:	2001      	movs	r0, #1
    35d8:	47b0      	blx	r6
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));

	do { phyWriteRegister(TRX_STATE_REG,
			     state); } while (state !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    35da:	4028      	ands	r0, r5
    35dc:	4284      	cmp	r4, r0
    35de:	d1f7      	bne.n	35d0 <phyTrxSetState+0x20>
}
    35e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    35e2:	46c0      	nop			; (mov r8, r8)
    35e4:	00003fad 	.word	0x00003fad
    35e8:	00003eb1 	.word	0x00003eb1

000035ec <phySetRxState>:
}

/*************************************************************************//**
*****************************************************************************/
static void phySetRxState(void)
{
    35ec:	b510      	push	{r4, lr}
	phyTrxSetState(TRX_CMD_TRX_OFF);
    35ee:	2008      	movs	r0, #8
    35f0:	4b06      	ldr	r3, [pc, #24]	; (360c <phySetRxState+0x20>)
    35f2:	4798      	blx	r3
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    35f4:	200f      	movs	r0, #15
    35f6:	4b06      	ldr	r3, [pc, #24]	; (3610 <phySetRxState+0x24>)
    35f8:	4798      	blx	r3
{
	phyTrxSetState(TRX_CMD_TRX_OFF);

	phyReadRegister(IRQ_STATUS_REG);

	if (phyRxState) {
    35fa:	4b06      	ldr	r3, [pc, #24]	; (3614 <phySetRxState+0x28>)
    35fc:	781b      	ldrb	r3, [r3, #0]
    35fe:	2b00      	cmp	r3, #0
    3600:	d002      	beq.n	3608 <phySetRxState+0x1c>
		phyTrxSetState(TRX_CMD_RX_AACK_ON);
    3602:	2016      	movs	r0, #22
    3604:	4b01      	ldr	r3, [pc, #4]	; (360c <phySetRxState+0x20>)
    3606:	4798      	blx	r3
	}
}
    3608:	bd10      	pop	{r4, pc}
    360a:	46c0      	nop			; (mov r8, r8)
    360c:	000035b1 	.word	0x000035b1
    3610:	00003eb1 	.word	0x00003eb1
    3614:	20000791 	.word	0x20000791

00003618 <PHY_Init>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void PHY_Init(void)
{
    3618:	b570      	push	{r4, r5, r6, lr}
	trx_spi_init();
    361a:	4b0e      	ldr	r3, [pc, #56]	; (3654 <PHY_Init+0x3c>)
    361c:	4798      	blx	r3
	PhyReset();
    361e:	4b0e      	ldr	r3, [pc, #56]	; (3658 <PHY_Init+0x40>)
    3620:	4798      	blx	r3
	phyRxState = false;
    3622:	2200      	movs	r2, #0
    3624:	4b0d      	ldr	r3, [pc, #52]	; (365c <PHY_Init+0x44>)
    3626:	701a      	strb	r2, [r3, #0]
	phyState = PHY_STATE_IDLE;
    3628:	3201      	adds	r2, #1
    362a:	4b0d      	ldr	r3, [pc, #52]	; (3660 <PHY_Init+0x48>)
    362c:	701a      	strb	r2, [r3, #0]

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    362e:	4e0d      	ldr	r6, [pc, #52]	; (3664 <PHY_Init+0x4c>)
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    3630:	4d0d      	ldr	r5, [pc, #52]	; (3668 <PHY_Init+0x50>)
	phyRxState = false;
	phyState = PHY_STATE_IDLE;

	do {phyWriteRegister(TRX_STATE_REG, TRX_CMD_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    3632:	241f      	movs	r4, #31

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    3634:	2108      	movs	r1, #8
    3636:	2002      	movs	r0, #2
    3638:	47b0      	blx	r6
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    363a:	2001      	movs	r0, #1
    363c:	47a8      	blx	r5
	phyRxState = false;
	phyState = PHY_STATE_IDLE;

	do {phyWriteRegister(TRX_STATE_REG, TRX_CMD_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    363e:	4020      	ands	r0, r4
    3640:	2808      	cmp	r0, #8
    3642:	d1f7      	bne.n	3634 <PHY_Init+0x1c>

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    3644:	212e      	movs	r1, #46	; 0x2e
    3646:	3804      	subs	r0, #4
    3648:	4c06      	ldr	r4, [pc, #24]	; (3664 <PHY_Init+0x4c>)
    364a:	47a0      	blx	r4
    364c:	21a0      	movs	r1, #160	; 0xa0
    364e:	200c      	movs	r0, #12
    3650:	47a0      	blx	r4
			(1 << TX_AUTO_CRC_ON) | (3 << SPI_CMD_MODE) |
			(1 << IRQ_MASK_MODE));

	phyWriteRegister(TRX_CTRL_2_REG,
			(1 << RX_SAFE_MODE) | (1 << OQPSK_SCRAM_EN));
}
    3652:	bd70      	pop	{r4, r5, r6, pc}
    3654:	00003d65 	.word	0x00003d65
    3658:	00003e81 	.word	0x00003e81
    365c:	20000791 	.word	0x20000791
    3660:	20000790 	.word	0x20000790
    3664:	00003fad 	.word	0x00003fad
    3668:	00003eb1 	.word	0x00003eb1

0000366c <PHY_SetRxState>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetRxState(bool rx)
{
    366c:	b510      	push	{r4, lr}
	phyRxState = rx;
    366e:	4b02      	ldr	r3, [pc, #8]	; (3678 <PHY_SetRxState+0xc>)
    3670:	7018      	strb	r0, [r3, #0]
	phySetRxState();
    3672:	4b02      	ldr	r3, [pc, #8]	; (367c <PHY_SetRxState+0x10>)
    3674:	4798      	blx	r3
}
    3676:	bd10      	pop	{r4, pc}
    3678:	20000791 	.word	0x20000791
    367c:	000035ed 	.word	0x000035ed

00003680 <PHY_SetChannel>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetChannel(uint8_t channel)
{
    3680:	b510      	push	{r4, lr}
    3682:	0004      	movs	r4, r0
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    3684:	2008      	movs	r0, #8
    3686:	4b06      	ldr	r3, [pc, #24]	; (36a0 <PHY_SetChannel+0x20>)
    3688:	4798      	blx	r3

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    368a:	231f      	movs	r3, #31
    368c:	0001      	movs	r1, r0
    368e:	4399      	bics	r1, r3
    3690:	0020      	movs	r0, r4
    3692:	4308      	orrs	r0, r1
    3694:	b2c1      	uxtb	r1, r0
    3696:	2008      	movs	r0, #8
    3698:	4b02      	ldr	r3, [pc, #8]	; (36a4 <PHY_SetChannel+0x24>)
    369a:	4798      	blx	r3
{
	uint8_t reg;

	reg = phyReadRegister(PHY_CC_CCA_REG) & ~0x1f;
	phyWriteRegister(PHY_CC_CCA_REG, reg | channel);
}
    369c:	bd10      	pop	{r4, pc}
    369e:	46c0      	nop			; (mov r8, r8)
    36a0:	00003eb1 	.word	0x00003eb1
    36a4:	00003fad 	.word	0x00003fad

000036a8 <PHY_SetPanId>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetPanId(uint16_t panId)
{
    36a8:	b530      	push	{r4, r5, lr}
    36aa:	b083      	sub	sp, #12
    36ac:	466b      	mov	r3, sp
    36ae:	1d9d      	adds	r5, r3, #6
    36b0:	80d8      	strh	r0, [r3, #6]

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    36b2:	b2c1      	uxtb	r1, r0
    36b4:	2022      	movs	r0, #34	; 0x22
    36b6:	4c03      	ldr	r4, [pc, #12]	; (36c4 <PHY_SetPanId+0x1c>)
    36b8:	47a0      	blx	r4
    36ba:	7869      	ldrb	r1, [r5, #1]
    36bc:	2023      	movs	r0, #35	; 0x23
    36be:	47a0      	blx	r4
{
	uint8_t *d = (uint8_t *)&panId;

	phyWriteRegister(PAN_ID_0_REG, d[0]);
	phyWriteRegister(PAN_ID_1_REG, d[1]);
}
    36c0:	b003      	add	sp, #12
    36c2:	bd30      	pop	{r4, r5, pc}
    36c4:	00003fad 	.word	0x00003fad

000036c8 <PHY_SetShortAddr>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetShortAddr(uint16_t addr)
{
    36c8:	b570      	push	{r4, r5, r6, lr}
    36ca:	b082      	sub	sp, #8
    36cc:	466b      	mov	r3, sp
    36ce:	1d9c      	adds	r4, r3, #6
    36d0:	80d8      	strh	r0, [r3, #6]
	uint8_t *d = (uint8_t *)&addr;

	phyWriteRegister(SHORT_ADDR_0_REG, d[0]);
    36d2:	b2c5      	uxtb	r5, r0

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    36d4:	0029      	movs	r1, r5
    36d6:	2020      	movs	r0, #32
    36d8:	4e05      	ldr	r6, [pc, #20]	; (36f0 <PHY_SetShortAddr+0x28>)
    36da:	47b0      	blx	r6
void PHY_SetShortAddr(uint16_t addr)
{
	uint8_t *d = (uint8_t *)&addr;

	phyWriteRegister(SHORT_ADDR_0_REG, d[0]);
	phyWriteRegister(SHORT_ADDR_1_REG, d[1]);
    36dc:	7864      	ldrb	r4, [r4, #1]

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    36de:	0021      	movs	r1, r4
    36e0:	2021      	movs	r0, #33	; 0x21
    36e2:	47b0      	blx	r6
    36e4:	192c      	adds	r4, r5, r4
    36e6:	b2e1      	uxtb	r1, r4
    36e8:	202d      	movs	r0, #45	; 0x2d
    36ea:	47b0      	blx	r6
	uint8_t *d = (uint8_t *)&addr;

	phyWriteRegister(SHORT_ADDR_0_REG, d[0]);
	phyWriteRegister(SHORT_ADDR_1_REG, d[1]);
	phyWriteRegister(CSMA_SEED_0_REG, d[0] + d[1]);
}
    36ec:	b002      	add	sp, #8
    36ee:	bd70      	pop	{r4, r5, r6, pc}
    36f0:	00003fad 	.word	0x00003fad

000036f4 <PHY_DataReq>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_DataReq(uint8_t *data)
{
    36f4:	b510      	push	{r4, lr}
    36f6:	0004      	movs	r4, r0
	phyTrxSetState(TRX_CMD_TX_ARET_ON);
    36f8:	2019      	movs	r0, #25
    36fa:	4b0c      	ldr	r3, [pc, #48]	; (372c <PHY_DataReq+0x38>)
    36fc:	4798      	blx	r3
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    36fe:	200f      	movs	r0, #15
    3700:	4b0b      	ldr	r3, [pc, #44]	; (3730 <PHY_DataReq+0x3c>)
    3702:	4798      	blx	r3
	phyReadRegister(IRQ_STATUS_REG);

	/* size of the buffer is sent as first byte of the data
	 * and data starts from second byte.
	 */
	data[0] += 2;
    3704:	7821      	ldrb	r1, [r4, #0]
    3706:	1c8b      	adds	r3, r1, #2
    3708:	7023      	strb	r3, [r4, #0]
	trx_frame_write(data, (data[0] - 1) /* length value*/);
    370a:	3101      	adds	r1, #1
    370c:	b2c9      	uxtb	r1, r1
    370e:	0020      	movs	r0, r4
    3710:	4b08      	ldr	r3, [pc, #32]	; (3734 <PHY_DataReq+0x40>)
    3712:	4798      	blx	r3

	phyState = PHY_STATE_TX_WAIT_END;
    3714:	2203      	movs	r2, #3
    3716:	4b08      	ldr	r3, [pc, #32]	; (3738 <PHY_DataReq+0x44>)
    3718:	701a      	strb	r2, [r3, #0]
    371a:	4b08      	ldr	r3, [pc, #32]	; (373c <PHY_DataReq+0x48>)
    371c:	2280      	movs	r2, #128	; 0x80
    371e:	0352      	lsls	r2, r2, #13
    3720:	619a      	str	r2, [r3, #24]

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
    3722:	46c0      	nop			; (mov r8, r8)
    3724:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    3726:	615a      	str	r2, [r3, #20]

	TRX_SLP_TR_HIGH();
	TRX_TRIG_DELAY();
	TRX_SLP_TR_LOW();
}
    3728:	bd10      	pop	{r4, pc}
    372a:	46c0      	nop			; (mov r8, r8)
    372c:	000035b1 	.word	0x000035b1
    3730:	00003eb1 	.word	0x00003eb1
    3734:	000041dd 	.word	0x000041dd
    3738:	20000790 	.word	0x20000790
    373c:	41004400 	.word	0x41004400

00003740 <PHY_EncryptReq>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_EncryptReq(uint8_t *text, uint8_t *key)
{
    3740:	b510      	push	{r4, lr}
    3742:	0004      	movs	r4, r0
    3744:	0008      	movs	r0, r1
	sal_aes_setup(key, AES_MODE_ECB, AES_DIR_ENCRYPT);
    3746:	2200      	movs	r2, #0
    3748:	2100      	movs	r1, #0
    374a:	4b05      	ldr	r3, [pc, #20]	; (3760 <PHY_EncryptReq+0x20>)
    374c:	4798      	blx	r3
#if (SAL_TYPE == AT86RF2xx)
	sal_aes_wrrd(text, NULL);
    374e:	2100      	movs	r1, #0
    3750:	0020      	movs	r0, r4
    3752:	4b04      	ldr	r3, [pc, #16]	; (3764 <PHY_EncryptReq+0x24>)
    3754:	4798      	blx	r3
#else
	sal_aes_exec(text);
#endif
	sal_aes_read(text);
    3756:	0020      	movs	r0, r4
    3758:	4b03      	ldr	r3, [pc, #12]	; (3768 <PHY_EncryptReq+0x28>)
    375a:	4798      	blx	r3
}
    375c:	bd10      	pop	{r4, pc}
    375e:	46c0      	nop			; (mov r8, r8)
    3760:	00003bfd 	.word	0x00003bfd
    3764:	00003b91 	.word	0x00003b91
    3768:	00003d35 	.word	0x00003d35

0000376c <PHY_TaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_TaskHandler(void)
{
    376c:	b5f0      	push	{r4, r5, r6, r7, lr}
    376e:	b085      	sub	sp, #20
	if (PHY_STATE_SLEEP == phyState) {
    3770:	4b26      	ldr	r3, [pc, #152]	; (380c <PHY_TaskHandler+0xa0>)
    3772:	781b      	ldrb	r3, [r3, #0]
    3774:	2b02      	cmp	r3, #2
    3776:	d047      	beq.n	3808 <PHY_TaskHandler+0x9c>
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    3778:	200f      	movs	r0, #15
    377a:	4b25      	ldr	r3, [pc, #148]	; (3810 <PHY_TaskHandler+0xa4>)
    377c:	4798      	blx	r3
{
	if (PHY_STATE_SLEEP == phyState) {
		return;
	}

	if (phyReadRegister(IRQ_STATUS_REG) & (1 << TRX_END)) {
    377e:	0703      	lsls	r3, r0, #28
    3780:	d542      	bpl.n	3808 <PHY_TaskHandler+0x9c>
		if (PHY_STATE_IDLE == phyState) {
    3782:	4b22      	ldr	r3, [pc, #136]	; (380c <PHY_TaskHandler+0xa0>)
    3784:	781b      	ldrb	r3, [r3, #0]
    3786:	2b01      	cmp	r3, #1
    3788:	d124      	bne.n	37d4 <PHY_TaskHandler+0x68>
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    378a:	2007      	movs	r0, #7
    378c:	4b20      	ldr	r3, [pc, #128]	; (3810 <PHY_TaskHandler+0xa4>)
    378e:	4798      	blx	r3
    3790:	0005      	movs	r5, r0
			uint8_t size;
			int8_t rssi;

			rssi = (int8_t)phyReadRegister(PHY_ED_LEVEL_REG);

			trx_frame_read(&size, 1);
    3792:	466b      	mov	r3, sp
    3794:	1ddc      	adds	r4, r3, #7
    3796:	2101      	movs	r1, #1
    3798:	0020      	movs	r0, r4
    379a:	4f1e      	ldr	r7, [pc, #120]	; (3814 <PHY_TaskHandler+0xa8>)
    379c:	47b8      	blx	r7

			trx_frame_read(phyRxBuffer, size + 2);
    379e:	7821      	ldrb	r1, [r4, #0]
    37a0:	3102      	adds	r1, #2
    37a2:	b2c9      	uxtb	r1, r1
    37a4:	4e1c      	ldr	r6, [pc, #112]	; (3818 <PHY_TaskHandler+0xac>)
    37a6:	0030      	movs	r0, r6
    37a8:	47b8      	blx	r7

			ind.data = phyRxBuffer + 1;
    37aa:	a802      	add	r0, sp, #8
    37ac:	1c73      	adds	r3, r6, #1
    37ae:	9302      	str	r3, [sp, #8]

			ind.size = size - PHY_CRC_SIZE;
    37b0:	7823      	ldrb	r3, [r4, #0]
    37b2:	1e9a      	subs	r2, r3, #2
    37b4:	7102      	strb	r2, [r0, #4]
			ind.lqi  = phyRxBuffer[size + 1];
    37b6:	18f3      	adds	r3, r6, r3
    37b8:	785b      	ldrb	r3, [r3, #1]
    37ba:	7143      	strb	r3, [r0, #5]
			ind.rssi = rssi + PHY_RSSI_BASE_VAL;
    37bc:	3d5b      	subs	r5, #91	; 0x5b
    37be:	7185      	strb	r5, [r0, #6]
			PHY_DataInd(&ind);
    37c0:	4b16      	ldr	r3, [pc, #88]	; (381c <PHY_TaskHandler+0xb0>)
    37c2:	4798      	blx	r3
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    37c4:	4d12      	ldr	r5, [pc, #72]	; (3810 <PHY_TaskHandler+0xa4>)

/*************************************************************************//**
*****************************************************************************/
static void phyWaitState(uint8_t state)
{
	while (state != (phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK)) {
    37c6:	241f      	movs	r4, #31
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    37c8:	2001      	movs	r0, #1
    37ca:	47a8      	blx	r5

/*************************************************************************//**
*****************************************************************************/
static void phyWaitState(uint8_t state)
{
	while (state != (phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK)) {
    37cc:	4020      	ands	r0, r4
    37ce:	2816      	cmp	r0, #22
    37d0:	d1fa      	bne.n	37c8 <PHY_TaskHandler+0x5c>
    37d2:	e019      	b.n	3808 <PHY_TaskHandler+0x9c>
			ind.lqi  = phyRxBuffer[size + 1];
			ind.rssi = rssi + PHY_RSSI_BASE_VAL;
			PHY_DataInd(&ind);

			phyWaitState(TRX_STATUS_RX_AACK_ON);
		} else if (PHY_STATE_TX_WAIT_END == phyState) {
    37d4:	2b03      	cmp	r3, #3
    37d6:	d117      	bne.n	3808 <PHY_TaskHandler+0x9c>
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    37d8:	2002      	movs	r0, #2
    37da:	4b0d      	ldr	r3, [pc, #52]	; (3810 <PHY_TaskHandler+0xa4>)
    37dc:	4798      	blx	r3
			ind.rssi = rssi + PHY_RSSI_BASE_VAL;
			PHY_DataInd(&ind);

			phyWaitState(TRX_STATUS_RX_AACK_ON);
		} else if (PHY_STATE_TX_WAIT_END == phyState) {
			uint8_t status
    37de:	0940      	lsrs	r0, r0, #5
    37e0:	b2c4      	uxtb	r4, r0
				= (phyReadRegister(TRX_STATE_REG) >>
					TRAC_STATUS) & 7;

			if (TRAC_STATUS_SUCCESS == status) {
    37e2:	2c00      	cmp	r4, #0
    37e4:	d008      	beq.n	37f8 <PHY_TaskHandler+0x8c>
				status = PHY_STATUS_SUCCESS;
			} else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE ==
    37e6:	2c03      	cmp	r4, #3
    37e8:	d005      	beq.n	37f6 <PHY_TaskHandler+0x8a>
					status) {
				status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
			} else if (TRAC_STATUS_NO_ACK == status) {
				status = PHY_STATUS_NO_ACK;
			} else {
				status = PHY_STATUS_ERROR;
    37ea:	3c05      	subs	r4, #5
    37ec:	4263      	negs	r3, r4
    37ee:	4163      	adcs	r3, r4
    37f0:	2403      	movs	r4, #3
    37f2:	1ae4      	subs	r4, r4, r3
    37f4:	e000      	b.n	37f8 <PHY_TaskHandler+0x8c>

			if (TRAC_STATUS_SUCCESS == status) {
				status = PHY_STATUS_SUCCESS;
			} else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE ==
					status) {
				status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    37f6:	2401      	movs	r4, #1
				status = PHY_STATUS_NO_ACK;
			} else {
				status = PHY_STATUS_ERROR;
			}

			phySetRxState();
    37f8:	4b09      	ldr	r3, [pc, #36]	; (3820 <PHY_TaskHandler+0xb4>)
    37fa:	4798      	blx	r3
			phyState = PHY_STATE_IDLE;
    37fc:	2201      	movs	r2, #1
    37fe:	4b03      	ldr	r3, [pc, #12]	; (380c <PHY_TaskHandler+0xa0>)
    3800:	701a      	strb	r2, [r3, #0]

			PHY_DataConf(status);
    3802:	0020      	movs	r0, r4
    3804:	4b07      	ldr	r3, [pc, #28]	; (3824 <PHY_TaskHandler+0xb8>)
    3806:	4798      	blx	r3
		}
	}
}
    3808:	b005      	add	sp, #20
    380a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    380c:	20000790 	.word	0x20000790
    3810:	00003eb1 	.word	0x00003eb1
    3814:	000040ad 	.word	0x000040ad
    3818:	20000710 	.word	0x20000710
    381c:	00002b25 	.word	0x00002b25
    3820:	000035ed 	.word	0x000035ed
    3824:	0000345d 	.word	0x0000345d

00003828 <SYS_Init>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
    3828:	b510      	push	{r4, lr}
	SYS_TimerInit();
    382a:	4b04      	ldr	r3, [pc, #16]	; (383c <SYS_Init+0x14>)
    382c:	4798      	blx	r3
#if SYS_SECURITY_MODE == 0
	sal_init();
    382e:	4b04      	ldr	r3, [pc, #16]	; (3840 <SYS_Init+0x18>)
    3830:	4798      	blx	r3
#endif
	PHY_Init();
    3832:	4b04      	ldr	r3, [pc, #16]	; (3844 <SYS_Init+0x1c>)
    3834:	4798      	blx	r3
	NWK_Init();
    3836:	4b04      	ldr	r3, [pc, #16]	; (3848 <SYS_Init+0x20>)
    3838:	4798      	blx	r3
}
    383a:	bd10      	pop	{r4, pc}
    383c:	000038f9 	.word	0x000038f9
    3840:	00003b8d 	.word	0x00003b8d
    3844:	00003619 	.word	0x00003619
    3848:	00002395 	.word	0x00002395

0000384c <SYS_TaskHandler>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TaskHandler(void)
{
    384c:	b510      	push	{r4, lr}
	PHY_TaskHandler();
    384e:	4b03      	ldr	r3, [pc, #12]	; (385c <SYS_TaskHandler+0x10>)
    3850:	4798      	blx	r3
	NWK_TaskHandler();
    3852:	4b03      	ldr	r3, [pc, #12]	; (3860 <SYS_TaskHandler+0x14>)
    3854:	4798      	blx	r3
	SYS_TimerTaskHandler();
    3856:	4b03      	ldr	r3, [pc, #12]	; (3864 <SYS_TaskHandler+0x18>)
    3858:	4798      	blx	r3
}
    385a:	bd10      	pop	{r4, pc}
    385c:	0000376d 	.word	0x0000376d
    3860:	00002421 	.word	0x00002421
    3864:	0000397d 	.word	0x0000397d

00003868 <SYS_EncryptReq>:
#endif

/*************************************************************************//**
*****************************************************************************/
void SYS_EncryptReq(uint32_t *text, uint32_t *key)
{
    3868:	b510      	push	{r4, lr}
#if SYS_SECURITY_MODE == 0
	PHY_EncryptReq((uint8_t *)text, (uint8_t *)key);
    386a:	4b02      	ldr	r3, [pc, #8]	; (3874 <SYS_EncryptReq+0xc>)
    386c:	4798      	blx	r3
	text[2] ^= text[0];
	text[3] ^= text[1];
	xtea(&text[2], key);
#endif

	SYS_EncryptConf();
    386e:	4b02      	ldr	r3, [pc, #8]	; (3878 <SYS_EncryptReq+0x10>)
    3870:	4798      	blx	r3
}
    3872:	bd10      	pop	{r4, pc}
    3874:	00003741 	.word	0x00003741
    3878:	00002fa9 	.word	0x00002fa9

0000387c <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    387c:	b530      	push	{r4, r5, lr}
	if (timers) {
    387e:	4b15      	ldr	r3, [pc, #84]	; (38d4 <placeTimer+0x58>)
    3880:	681d      	ldr	r5, [r3, #0]
    3882:	2d00      	cmp	r5, #0
    3884:	d01e      	beq.n	38c4 <placeTimer+0x48>
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;
    3886:	6882      	ldr	r2, [r0, #8]

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
    3888:	6869      	ldr	r1, [r5, #4]
    388a:	428a      	cmp	r2, r1
    388c:	d305      	bcc.n	389a <placeTimer+0x1e>
    388e:	002c      	movs	r4, r5
    3890:	e009      	b.n	38a6 <placeTimer+0x2a>
    3892:	6859      	ldr	r1, [r3, #4]
    3894:	4291      	cmp	r1, r2
    3896:	d905      	bls.n	38a4 <placeTimer+0x28>
    3898:	e001      	b.n	389e <placeTimer+0x22>
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
    389a:	002b      	movs	r3, r5
/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
    389c:	2400      	movs	r4, #0
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
				t->timeout -= timeout;
    389e:	1a89      	subs	r1, r1, r2
    38a0:	6059      	str	r1, [r3, #4]
				break;
    38a2:	e004      	b.n	38ae <placeTimer+0x32>
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
    38a4:	001c      	movs	r4, r3
			if (timeout < t->timeout) {
				t->timeout -= timeout;
				break;
			} else {
				timeout -= t->timeout;
    38a6:	1a52      	subs	r2, r2, r1
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
    38a8:	6823      	ldr	r3, [r4, #0]
    38aa:	2b00      	cmp	r3, #0
    38ac:	d1f1      	bne.n	3892 <placeTimer+0x16>
			}

			prev = t;
		}

		timer->timeout = timeout;
    38ae:	6042      	str	r2, [r0, #4]

		if (prev) {
    38b0:	2c00      	cmp	r4, #0
    38b2:	d003      	beq.n	38bc <placeTimer+0x40>
			timer->next = prev->next;
    38b4:	6823      	ldr	r3, [r4, #0]
    38b6:	6003      	str	r3, [r0, #0]
			prev->next = timer;
    38b8:	6020      	str	r0, [r4, #0]
    38ba:	e009      	b.n	38d0 <placeTimer+0x54>
		} else {
			timer->next = timers;
    38bc:	6005      	str	r5, [r0, #0]
			timers = timer;
    38be:	4b05      	ldr	r3, [pc, #20]	; (38d4 <placeTimer+0x58>)
    38c0:	6018      	str	r0, [r3, #0]
    38c2:	e005      	b.n	38d0 <placeTimer+0x54>
		}
	} else {
		timer->next = NULL;
    38c4:	2300      	movs	r3, #0
    38c6:	6003      	str	r3, [r0, #0]
		timer->timeout = timer->interval;
    38c8:	6883      	ldr	r3, [r0, #8]
    38ca:	6043      	str	r3, [r0, #4]
		timers = timer;
    38cc:	4b01      	ldr	r3, [pc, #4]	; (38d4 <placeTimer+0x58>)
    38ce:	6018      	str	r0, [r3, #0]
	}
}
    38d0:	bd30      	pop	{r4, r5, pc}
    38d2:	46c0      	nop			; (mov r8, r8)
    38d4:	20000794 	.word	0x20000794

000038d8 <SYS_HwExpiry_Cb>:

/*****************************************************************************
*****************************************************************************/
void SYS_HwExpiry_Cb(void)
{
    38d8:	b510      	push	{r4, lr}
	SysTimerIrqCount++;
    38da:	4a04      	ldr	r2, [pc, #16]	; (38ec <SYS_HwExpiry_Cb+0x14>)
    38dc:	7813      	ldrb	r3, [r2, #0]
    38de:	3301      	adds	r3, #1
    38e0:	b2db      	uxtb	r3, r3
    38e2:	7013      	strb	r3, [r2, #0]
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    38e4:	4802      	ldr	r0, [pc, #8]	; (38f0 <SYS_HwExpiry_Cb+0x18>)
    38e6:	4b03      	ldr	r3, [pc, #12]	; (38f4 <SYS_HwExpiry_Cb+0x1c>)
    38e8:	4798      	blx	r3
}
    38ea:	bd10      	pop	{r4, pc}
    38ec:	200008e4 	.word	0x200008e4
    38f0:	00002710 	.word	0x00002710
    38f4:	000048e5 	.word	0x000048e5

000038f8 <SYS_TimerInit>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerInit(void)
{
    38f8:	b510      	push	{r4, lr}
	SysTimerIrqCount = 0;
    38fa:	2400      	movs	r4, #0
    38fc:	4b06      	ldr	r3, [pc, #24]	; (3918 <SYS_TimerInit+0x20>)
    38fe:	701c      	strb	r4, [r3, #0]
	set_common_tc_expiry_callback(SYS_HwExpiry_Cb);
    3900:	4806      	ldr	r0, [pc, #24]	; (391c <SYS_TimerInit+0x24>)
    3902:	4b07      	ldr	r3, [pc, #28]	; (3920 <SYS_TimerInit+0x28>)
    3904:	4798      	blx	r3
	common_tc_init();
    3906:	4b07      	ldr	r3, [pc, #28]	; (3924 <SYS_TimerInit+0x2c>)
    3908:	4798      	blx	r3
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    390a:	4807      	ldr	r0, [pc, #28]	; (3928 <SYS_TimerInit+0x30>)
    390c:	4b07      	ldr	r3, [pc, #28]	; (392c <SYS_TimerInit+0x34>)
    390e:	4798      	blx	r3
	timers = NULL;
    3910:	4b07      	ldr	r3, [pc, #28]	; (3930 <SYS_TimerInit+0x38>)
    3912:	601c      	str	r4, [r3, #0]
}
    3914:	bd10      	pop	{r4, pc}
    3916:	46c0      	nop			; (mov r8, r8)
    3918:	200008e4 	.word	0x200008e4
    391c:	000038d9 	.word	0x000038d9
    3920:	000049d5 	.word	0x000049d5
    3924:	00004951 	.word	0x00004951
    3928:	00002710 	.word	0x00002710
    392c:	000048e5 	.word	0x000048e5
    3930:	20000794 	.word	0x20000794

00003934 <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    3934:	4b09      	ldr	r3, [pc, #36]	; (395c <SYS_TimerStarted+0x28>)
    3936:	681b      	ldr	r3, [r3, #0]
    3938:	2b00      	cmp	r3, #0
    393a:	d009      	beq.n	3950 <SYS_TimerStarted+0x1c>
		if (t == timer) {
    393c:	4283      	cmp	r3, r0
    393e:	d102      	bne.n	3946 <SYS_TimerStarted+0x12>
    3940:	e008      	b.n	3954 <SYS_TimerStarted+0x20>
    3942:	4298      	cmp	r0, r3
    3944:	d008      	beq.n	3958 <SYS_TimerStarted+0x24>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    3946:	681b      	ldr	r3, [r3, #0]
    3948:	2b00      	cmp	r3, #0
    394a:	d1fa      	bne.n	3942 <SYS_TimerStarted+0xe>
		if (t == timer) {
			return true;
		}
	}
	return false;
    394c:	2000      	movs	r0, #0
    394e:	e004      	b.n	395a <SYS_TimerStarted+0x26>
    3950:	2000      	movs	r0, #0
    3952:	e002      	b.n	395a <SYS_TimerStarted+0x26>
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
		if (t == timer) {
			return true;
    3954:	2001      	movs	r0, #1
    3956:	e000      	b.n	395a <SYS_TimerStarted+0x26>
    3958:	2001      	movs	r0, #1
		}
	}
	return false;
}
    395a:	4770      	bx	lr
    395c:	20000794 	.word	0x20000794

00003960 <SYS_TimerStart>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    3960:	b510      	push	{r4, lr}
    3962:	0004      	movs	r4, r0
	if (!SYS_TimerStarted(timer)) {
    3964:	4b03      	ldr	r3, [pc, #12]	; (3974 <SYS_TimerStart+0x14>)
    3966:	4798      	blx	r3
    3968:	2800      	cmp	r0, #0
    396a:	d102      	bne.n	3972 <SYS_TimerStart+0x12>
		placeTimer(timer);
    396c:	0020      	movs	r0, r4
    396e:	4b02      	ldr	r3, [pc, #8]	; (3978 <SYS_TimerStart+0x18>)
    3970:	4798      	blx	r3
	}
}
    3972:	bd10      	pop	{r4, pc}
    3974:	00003935 	.word	0x00003935
    3978:	0000387d 	.word	0x0000387d

0000397c <SYS_TimerTaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerTaskHandler(void)
{
    397c:	b5f0      	push	{r4, r5, r6, r7, lr}
    397e:	b083      	sub	sp, #12
	uint32_t elapsed;
	uint8_t cnt;
	irqflags_t flags;

	if (0 == SysTimerIrqCount) {
    3980:	4b1c      	ldr	r3, [pc, #112]	; (39f4 <SYS_TimerTaskHandler+0x78>)
    3982:	781b      	ldrb	r3, [r3, #0]
    3984:	2b00      	cmp	r3, #0
    3986:	d033      	beq.n	39f0 <SYS_TimerTaskHandler+0x74>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3988:	f3ef 8210 	mrs	r2, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    398c:	4253      	negs	r3, r2
    398e:	4153      	adcs	r3, r2
    3990:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    3992:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    3994:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3998:	2200      	movs	r2, #0
    399a:	4b17      	ldr	r3, [pc, #92]	; (39f8 <SYS_TimerTaskHandler+0x7c>)
    399c:	701a      	strb	r2, [r3, #0]
	return flags;
    399e:	9901      	ldr	r1, [sp, #4]
		return;
	}

	/* Enter a critical section */
	flags = cpu_irq_save();
	cnt = SysTimerIrqCount;
    39a0:	4b14      	ldr	r3, [pc, #80]	; (39f4 <SYS_TimerTaskHandler+0x78>)
    39a2:	781d      	ldrb	r5, [r3, #0]
    39a4:	b2ed      	uxtb	r5, r5
	SysTimerIrqCount = 0;
    39a6:	701a      	strb	r2, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    39a8:	2900      	cmp	r1, #0
    39aa:	d005      	beq.n	39b8 <SYS_TimerTaskHandler+0x3c>
		cpu_irq_enable();
    39ac:	3201      	adds	r2, #1
    39ae:	4b12      	ldr	r3, [pc, #72]	; (39f8 <SYS_TimerTaskHandler+0x7c>)
    39b0:	701a      	strb	r2, [r3, #0]
    39b2:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    39b6:	b662      	cpsie	i
	/* Leave the critical section */
	cpu_irq_restore(flags);

	elapsed = cnt * SYS_TIMER_INTERVAL;
    39b8:	00ab      	lsls	r3, r5, #2
    39ba:	195d      	adds	r5, r3, r5
    39bc:	006d      	lsls	r5, r5, #1

	while (timers && (timers->timeout <= elapsed)) {
    39be:	4e0f      	ldr	r6, [pc, #60]	; (39fc <SYS_TimerTaskHandler+0x80>)
		SYS_Timer_t *timer = timers;

		elapsed -= timers->timeout;
		timers = timers->next;
    39c0:	0037      	movs	r7, r6
	/* Leave the critical section */
	cpu_irq_restore(flags);

	elapsed = cnt * SYS_TIMER_INTERVAL;

	while (timers && (timers->timeout <= elapsed)) {
    39c2:	e00d      	b.n	39e0 <SYS_TimerTaskHandler+0x64>
		SYS_Timer_t *timer = timers;

		elapsed -= timers->timeout;
    39c4:	1aed      	subs	r5, r5, r3
		timers = timers->next;
    39c6:	6823      	ldr	r3, [r4, #0]
    39c8:	603b      	str	r3, [r7, #0]
		if (SYS_TIMER_PERIODIC_MODE == timer->mode) {
    39ca:	7b23      	ldrb	r3, [r4, #12]
    39cc:	2b01      	cmp	r3, #1
    39ce:	d102      	bne.n	39d6 <SYS_TimerTaskHandler+0x5a>
			placeTimer(timer);
    39d0:	0020      	movs	r0, r4
    39d2:	4b0b      	ldr	r3, [pc, #44]	; (3a00 <SYS_TimerTaskHandler+0x84>)
    39d4:	4798      	blx	r3
		}

		if (timer->handler) {
    39d6:	6923      	ldr	r3, [r4, #16]
    39d8:	2b00      	cmp	r3, #0
    39da:	d001      	beq.n	39e0 <SYS_TimerTaskHandler+0x64>
			timer->handler(timer);
    39dc:	0020      	movs	r0, r4
    39de:	4798      	blx	r3
	/* Leave the critical section */
	cpu_irq_restore(flags);

	elapsed = cnt * SYS_TIMER_INTERVAL;

	while (timers && (timers->timeout <= elapsed)) {
    39e0:	6834      	ldr	r4, [r6, #0]
    39e2:	2c00      	cmp	r4, #0
    39e4:	d004      	beq.n	39f0 <SYS_TimerTaskHandler+0x74>
    39e6:	6863      	ldr	r3, [r4, #4]
    39e8:	429d      	cmp	r5, r3
    39ea:	d2eb      	bcs.n	39c4 <SYS_TimerTaskHandler+0x48>
			timer->handler(timer);
		}
	}

	if (timers) {
		timers->timeout -= elapsed;
    39ec:	1b5d      	subs	r5, r3, r5
    39ee:	6065      	str	r5, [r4, #4]
	}
}
    39f0:	b003      	add	sp, #12
    39f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    39f4:	200008e4 	.word	0x200008e4
    39f8:	20000008 	.word	0x20000008
    39fc:	20000794 	.word	0x20000794
    3a00:	0000387d 	.word	0x0000387d

00003a04 <tc_cca_callback>:
}

/*! \brief  hw timer compare callback
 */
static void tc_cca_callback(struct tc_module *const module_instance)
{
    3a04:	b510      	push	{r4, lr}
	tmr_cca_callback();
    3a06:	4b01      	ldr	r3, [pc, #4]	; (3a0c <tc_cca_callback+0x8>)
    3a08:	4798      	blx	r3
}
    3a0a:	bd10      	pop	{r4, pc}
    3a0c:	000049b9 	.word	0x000049b9

00003a10 <tc_ovf_callback>:
{
	cpu_irq_restore((uint32_t)flags);
}

static void tc_ovf_callback(struct tc_module *const module_instance)
{
    3a10:	b510      	push	{r4, lr}
	tmr_ovf_callback();
    3a12:	4b01      	ldr	r3, [pc, #4]	; (3a18 <tc_ovf_callback+0x8>)
    3a14:	4798      	blx	r3
}
    3a16:	bd10      	pop	{r4, pc}
    3a18:	00004971 	.word	0x00004971

00003a1c <tmr_read_count>:
#endif

/*! \brief  read the actual timer count from register
 */
uint16_t tmr_read_count(void)
{
    3a1c:	b510      	push	{r4, lr}
	return ((uint16_t)tc_get_count_value(&module_inst));
    3a1e:	4802      	ldr	r0, [pc, #8]	; (3a28 <tmr_read_count+0xc>)
    3a20:	4b02      	ldr	r3, [pc, #8]	; (3a2c <tmr_read_count+0x10>)
    3a22:	4798      	blx	r3
    3a24:	b280      	uxth	r0, r0
}
    3a26:	bd10      	pop	{r4, pc}
    3a28:	2000091c 	.word	0x2000091c
    3a2c:	00001f51 	.word	0x00001f51

00003a30 <tmr_disable_cc_interrupt>:
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    3a30:	4b03      	ldr	r3, [pc, #12]	; (3a40 <tmr_disable_cc_interrupt+0x10>)
    3a32:	2110      	movs	r1, #16
    3a34:	681a      	ldr	r2, [r3, #0]
    3a36:	7311      	strb	r1, [r2, #12]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    3a38:	7e5a      	ldrb	r2, [r3, #25]
    3a3a:	438a      	bics	r2, r1
    3a3c:	765a      	strb	r2, [r3, #25]
/*! \brief  to disable compare interrupt
 */
void tmr_disable_cc_interrupt(void)
{
	tc_disable_callback(&module_inst, TC_CALLBACK_CC_CHANNEL0);
}
    3a3e:	4770      	bx	lr
    3a40:	2000091c 	.word	0x2000091c

00003a44 <tmr_enable_cc_interrupt>:

/*! \brief  to enable compare interrupt
 */
void tmr_enable_cc_interrupt(void)
{
    3a44:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    3a46:	4c0a      	ldr	r4, [pc, #40]	; (3a70 <tmr_enable_cc_interrupt+0x2c>)
    3a48:	6820      	ldr	r0, [r4, #0]
    3a4a:	4b0a      	ldr	r3, [pc, #40]	; (3a74 <tmr_enable_cc_interrupt+0x30>)
    3a4c:	4798      	blx	r3
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    3a4e:	4b0a      	ldr	r3, [pc, #40]	; (3a78 <tmr_enable_cc_interrupt+0x34>)
    3a50:	5c1b      	ldrb	r3, [r3, r0]
    3a52:	221f      	movs	r2, #31
    3a54:	401a      	ands	r2, r3
    3a56:	2301      	movs	r3, #1
    3a58:	4093      	lsls	r3, r2
    3a5a:	4a08      	ldr	r2, [pc, #32]	; (3a7c <tmr_enable_cc_interrupt+0x38>)
    3a5c:	6013      	str	r3, [r2, #0]
	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    3a5e:	7e62      	ldrb	r2, [r4, #25]
    3a60:	2310      	movs	r3, #16
    3a62:	4313      	orrs	r3, r2
    3a64:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    3a66:	6823      	ldr	r3, [r4, #0]
    3a68:	2210      	movs	r2, #16
    3a6a:	735a      	strb	r2, [r3, #13]
	tc_enable_callback(&module_inst, TC_CALLBACK_CC_CHANNEL0);
}
    3a6c:	bd10      	pop	{r4, pc}
    3a6e:	46c0      	nop			; (mov r8, r8)
    3a70:	2000091c 	.word	0x2000091c
    3a74:	00001c9d 	.word	0x00001c9d
    3a78:	00005798 	.word	0x00005798
    3a7c:	e000e100 	.word	0xe000e100

00003a80 <tmr_write_cmpreg>:
}

/*! \brief  to load compare value in channel compare register
 */
void tmr_write_cmpreg(uint16_t compare_value)
{
    3a80:	b510      	push	{r4, lr}
    3a82:	0002      	movs	r2, r0
	tc_set_compare_value(&module_inst, TC_COMPARE_CAPTURE_CHANNEL_0,
    3a84:	2100      	movs	r1, #0
    3a86:	4802      	ldr	r0, [pc, #8]	; (3a90 <tmr_write_cmpreg+0x10>)
    3a88:	4b02      	ldr	r3, [pc, #8]	; (3a94 <tmr_write_cmpreg+0x14>)
    3a8a:	4798      	blx	r3
			(uint32_t)compare_value);
}
    3a8c:	bd10      	pop	{r4, pc}
    3a8e:	46c0      	nop			; (mov r8, r8)
    3a90:	2000091c 	.word	0x2000091c
    3a94:	00001f81 	.word	0x00001f81

00003a98 <tmr_init>:
}

/*! \brief  to initialize hw timer
 */
uint8_t tmr_init(void)
{
    3a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3a9a:	464f      	mov	r7, r9
    3a9c:	4646      	mov	r6, r8
    3a9e:	b4c0      	push	{r6, r7}
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    3aa0:	4a2d      	ldr	r2, [pc, #180]	; (3b58 <tmr_init+0xc0>)
    3aa2:	2300      	movs	r3, #0
    3aa4:	7013      	strb	r3, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    3aa6:	7093      	strb	r3, [r2, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    3aa8:	2100      	movs	r1, #0
    3aaa:	8093      	strh	r3, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    3aac:	7191      	strb	r1, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    3aae:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    3ab0:	7051      	strb	r1, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    3ab2:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    3ab4:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    3ab6:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    3ab8:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    3aba:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    3abc:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    3abe:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    3ac0:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    3ac2:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    3ac4:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    3ac6:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    3ac8:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    3aca:	8593      	strh	r3, [r2, #44]	; 0x2c
		timer_config.clock_source = GCLK_GENERATOR_1;
		timer_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV2;
		timer_config.run_in_standby = true;
	}
	#endif
	timer_config.counter_16_bit.compare_capture_channel[0] = TIMER_PERIOD;
    3acc:	3b01      	subs	r3, #1
    3ace:	8553      	strh	r3, [r2, #42]	; 0x2a
	tc_init(&module_inst, TIMER, &timer_config);
    3ad0:	4c22      	ldr	r4, [pc, #136]	; (3b5c <tmr_init+0xc4>)
    3ad2:	4923      	ldr	r1, [pc, #140]	; (3b60 <tmr_init+0xc8>)
    3ad4:	0020      	movs	r0, r4
    3ad6:	4b23      	ldr	r3, [pc, #140]	; (3b64 <tmr_init+0xcc>)
    3ad8:	4798      	blx	r3
	tc_register_callback(&module_inst, tc_ovf_callback,
    3ada:	2200      	movs	r2, #0
    3adc:	4922      	ldr	r1, [pc, #136]	; (3b68 <tmr_init+0xd0>)
    3ade:	0020      	movs	r0, r4
    3ae0:	4d22      	ldr	r5, [pc, #136]	; (3b6c <tmr_init+0xd4>)
    3ae2:	47a8      	blx	r5
			TC_CALLBACK_OVERFLOW);
	tc_register_callback(&module_inst, tc_cca_callback,
    3ae4:	2202      	movs	r2, #2
    3ae6:	4922      	ldr	r1, [pc, #136]	; (3b70 <tmr_init+0xd8>)
    3ae8:	0020      	movs	r0, r4
    3aea:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    3aec:	6820      	ldr	r0, [r4, #0]
    3aee:	4b21      	ldr	r3, [pc, #132]	; (3b74 <tmr_init+0xdc>)
    3af0:	4699      	mov	r9, r3
    3af2:	4798      	blx	r3
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    3af4:	4b20      	ldr	r3, [pc, #128]	; (3b78 <tmr_init+0xe0>)
    3af6:	4698      	mov	r8, r3
    3af8:	5c1b      	ldrb	r3, [r3, r0]
    3afa:	271f      	movs	r7, #31
    3afc:	403b      	ands	r3, r7
    3afe:	2501      	movs	r5, #1
    3b00:	002a      	movs	r2, r5
    3b02:	409a      	lsls	r2, r3
    3b04:	4e1d      	ldr	r6, [pc, #116]	; (3b7c <tmr_init+0xe4>)
    3b06:	6032      	str	r2, [r6, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
    3b08:	7e62      	ldrb	r2, [r4, #25]
    3b0a:	2301      	movs	r3, #1
    3b0c:	4313      	orrs	r3, r2
    3b0e:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    3b10:	6823      	ldr	r3, [r4, #0]
    3b12:	735d      	strb	r5, [r3, #13]
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    3b14:	0018      	movs	r0, r3
    3b16:	47c8      	blx	r9
    3b18:	4643      	mov	r3, r8
    3b1a:	5c1b      	ldrb	r3, [r3, r0]
    3b1c:	403b      	ands	r3, r7
    3b1e:	409d      	lsls	r5, r3
    3b20:	6035      	str	r5, [r6, #0]

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    3b22:	7e62      	ldrb	r2, [r4, #25]
    3b24:	2310      	movs	r3, #16
    3b26:	4313      	orrs	r3, r2
    3b28:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    3b2a:	6822      	ldr	r2, [r4, #0]
    3b2c:	2310      	movs	r3, #16
    3b2e:	7353      	strb	r3, [r2, #13]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    3b30:	217f      	movs	r1, #127	; 0x7f
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    3b32:	7bd3      	ldrb	r3, [r2, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    3b34:	438b      	bics	r3, r1
    3b36:	d1fc      	bne.n	3b32 <tmr_init+0x9a>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    3b38:	8811      	ldrh	r1, [r2, #0]
    3b3a:	3302      	adds	r3, #2
    3b3c:	430b      	orrs	r3, r1
    3b3e:	8013      	strh	r3, [r2, #0]
	} else {
		timer_multiplier = system_gclk_gen_get_hz(0) / DEF_1MHZ;
	}

    #else
	timer_multiplier = system_gclk_gen_get_hz(0) / DEF_1MHZ;
    3b40:	2000      	movs	r0, #0
    3b42:	4b0f      	ldr	r3, [pc, #60]	; (3b80 <tmr_init+0xe8>)
    3b44:	4798      	blx	r3
	#endif
	return timer_multiplier;
    3b46:	490f      	ldr	r1, [pc, #60]	; (3b84 <tmr_init+0xec>)
    3b48:	4b0f      	ldr	r3, [pc, #60]	; (3b88 <tmr_init+0xf0>)
    3b4a:	4798      	blx	r3
    3b4c:	b2c0      	uxtb	r0, r0
}
    3b4e:	bc0c      	pop	{r2, r3}
    3b50:	4690      	mov	r8, r2
    3b52:	4699      	mov	r9, r3
    3b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3b56:	46c0      	nop			; (mov r8, r8)
    3b58:	200008e8 	.word	0x200008e8
    3b5c:	2000091c 	.word	0x2000091c
    3b60:	42002c00 	.word	0x42002c00
    3b64:	00001cd5 	.word	0x00001cd5
    3b68:	00003a11 	.word	0x00003a11
    3b6c:	00001be1 	.word	0x00001be1
    3b70:	00003a05 	.word	0x00003a05
    3b74:	00001c9d 	.word	0x00001c9d
    3b78:	00005798 	.word	0x00005798
    3b7c:	e000e100 	.word	0xe000e100
    3b80:	00001971 	.word	0x00001971
    3b84:	000f4240 	.word	0x000f4240
    3b88:	000049e1 	.word	0x000049e1

00003b8c <sal_init>:
 *
 * This functions initializes the SAL.
 */
void sal_init(void)
{
}
    3b8c:	4770      	bx	lr
    3b8e:	46c0      	nop			; (mov r8, r8)

00003b90 <sal_aes_wrrd>:
 * @param[in]  idata  AES block to be en/decrypted
 * @param[out] odata  Result of previous operation
 *                    (odata may be NULL or equal to idata)
 */
void sal_aes_wrrd(uint8_t *idata, uint8_t *odata)
{
    3b90:	b570      	push	{r4, r5, r6, lr}
    3b92:	0003      	movs	r3, r0
    3b94:	000d      	movs	r5, r1
	 * Write data and start the operation.
	 * AES_MODE in aes_buf[0] and aes_buf[AES_BLOCKSIZE+1] as well as
	 * AES_REQUEST in aes_buf[AES_BLOCKSIZE+1]
	 * were set before in sal_aes_setup()
	 */
	memcpy(aes_buf + 1, idata, AES_BLOCKSIZE);
    3b96:	4c14      	ldr	r4, [pc, #80]	; (3be8 <sal_aes_wrrd+0x58>)
    3b98:	1c60      	adds	r0, r4, #1
    3b9a:	2210      	movs	r2, #16
    3b9c:	0019      	movs	r1, r3
    3b9e:	4b13      	ldr	r3, [pc, #76]	; (3bec <sal_aes_wrrd+0x5c>)
    3ba0:	4798      	blx	r3

	/* trx_aes_wrrd() overwrites aes_buf, the last byte must be saved.
	**/
	save_cmd = aes_buf[AES_BLOCKSIZE + 1];
    3ba2:	7c64      	ldrb	r4, [r4, #17]

	if (setup_flag) {
    3ba4:	4b12      	ldr	r3, [pc, #72]	; (3bf0 <sal_aes_wrrd+0x60>)
    3ba6:	781b      	ldrb	r3, [r3, #0]
    3ba8:	2b00      	cmp	r3, #0
    3baa:	d008      	beq.n	3bbe <sal_aes_wrrd+0x2e>
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_CTRL), aes_buf,
    3bac:	2212      	movs	r2, #18
    3bae:	490e      	ldr	r1, [pc, #56]	; (3be8 <sal_aes_wrrd+0x58>)
    3bb0:	2083      	movs	r0, #131	; 0x83
    3bb2:	4b10      	ldr	r3, [pc, #64]	; (3bf4 <sal_aes_wrrd+0x64>)
    3bb4:	4798      	blx	r3
				AES_BLOCKSIZE + 2);

		setup_flag = false;
    3bb6:	2200      	movs	r2, #0
    3bb8:	4b0d      	ldr	r3, [pc, #52]	; (3bf0 <sal_aes_wrrd+0x60>)
    3bba:	701a      	strb	r2, [r3, #0]
    3bbc:	e005      	b.n	3bca <sal_aes_wrrd+0x3a>
	} else {
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_STATE_KEY_0),
    3bbe:	2211      	movs	r2, #17
    3bc0:	4909      	ldr	r1, [pc, #36]	; (3be8 <sal_aes_wrrd+0x58>)
    3bc2:	3101      	adds	r1, #1
    3bc4:	2084      	movs	r0, #132	; 0x84
    3bc6:	4b0b      	ldr	r3, [pc, #44]	; (3bf4 <sal_aes_wrrd+0x64>)
    3bc8:	4798      	blx	r3
				aes_buf + 1, AES_BLOCKSIZE + 1);
	}

	/* Restore the result. */
	if (odata != NULL) {
    3bca:	2d00      	cmp	r5, #0
    3bcc:	d005      	beq.n	3bda <sal_aes_wrrd+0x4a>
		memcpy(odata, aes_buf + 1, AES_BLOCKSIZE);
    3bce:	2210      	movs	r2, #16
    3bd0:	4905      	ldr	r1, [pc, #20]	; (3be8 <sal_aes_wrrd+0x58>)
    3bd2:	3101      	adds	r1, #1
    3bd4:	0028      	movs	r0, r5
    3bd6:	4b05      	ldr	r3, [pc, #20]	; (3bec <sal_aes_wrrd+0x5c>)
    3bd8:	4798      	blx	r3
	}

	aes_buf[AES_BLOCKSIZE + 1] = save_cmd;
    3bda:	4b03      	ldr	r3, [pc, #12]	; (3be8 <sal_aes_wrrd+0x58>)
    3bdc:	745c      	strb	r4, [r3, #17]

	/* Wait for the operation to finish for 24 us. */
	delay_us(24);
    3bde:	2018      	movs	r0, #24
    3be0:	4b05      	ldr	r3, [pc, #20]	; (3bf8 <sal_aes_wrrd+0x68>)
    3be2:	4798      	blx	r3
}
    3be4:	bd70      	pop	{r4, r5, r6, pc}
    3be6:	46c0      	nop			; (mov r8, r8)
    3be8:	200007bc 	.word	0x200007bc
    3bec:	00004b9d 	.word	0x00004b9d
    3bf0:	200007ce 	.word	0x200007ce
    3bf4:	000045e9 	.word	0x000045e9
    3bf8:	00000155 	.word	0x00000155

00003bfc <sal_aes_setup>:
 * @return  False if some parameter was illegal, true else
 */
bool sal_aes_setup(uint8_t *key,
		uint8_t enc_mode,
		uint8_t dir)
{
    3bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
    3bfe:	4647      	mov	r7, r8
    3c00:	b480      	push	{r7}
    3c02:	b084      	sub	sp, #16
    3c04:	0006      	movs	r6, r0
    3c06:	000d      	movs	r5, r1
    3c08:	0014      	movs	r4, r2
	if (key != NULL) {
    3c0a:	2800      	cmp	r0, #0
    3c0c:	d017      	beq.n	3c3e <sal_aes_setup+0x42>
		/* Setup key. */
		dec_initialized = false;
    3c0e:	2200      	movs	r2, #0
    3c10:	4b3e      	ldr	r3, [pc, #248]	; (3d0c <sal_aes_setup+0x110>)
    3c12:	701a      	strb	r2, [r3, #0]

		last_dir = AES_DIR_VOID;
    3c14:	3202      	adds	r2, #2
    3c16:	4b3e      	ldr	r3, [pc, #248]	; (3d10 <sal_aes_setup+0x114>)
    3c18:	701a      	strb	r2, [r3, #0]

		/* Save key for later use after decryption or sleep. */
		memcpy(enc_key, key, AES_KEYSIZE);
    3c1a:	320e      	adds	r2, #14
    3c1c:	0001      	movs	r1, r0
    3c1e:	483d      	ldr	r0, [pc, #244]	; (3d14 <sal_aes_setup+0x118>)
    3c20:	4b3d      	ldr	r3, [pc, #244]	; (3d18 <sal_aes_setup+0x11c>)
    3c22:	4698      	mov	r8, r3
    3c24:	4798      	blx	r3

		/* Set subregister AES_MODE (Bits 4:6 in AES_CON) to 1: KEY
		 * SETUP. */
		aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    3c26:	4f3d      	ldr	r7, [pc, #244]	; (3d1c <sal_aes_setup+0x120>)
    3c28:	2310      	movs	r3, #16
    3c2a:	703b      	strb	r3, [r7, #0]

		/* Fill in key. */
		memcpy(aes_buf + 1, key, AES_KEYSIZE);
    3c2c:	1c78      	adds	r0, r7, #1
    3c2e:	2210      	movs	r2, #16
    3c30:	0031      	movs	r1, r6
    3c32:	47c0      	blx	r8

		/* Write to SRAM in one step. */
		trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL), aes_buf,
    3c34:	2211      	movs	r2, #17
    3c36:	0039      	movs	r1, r7
    3c38:	2083      	movs	r0, #131	; 0x83
    3c3a:	4b39      	ldr	r3, [pc, #228]	; (3d20 <sal_aes_setup+0x124>)
    3c3c:	4798      	blx	r3
				AES_BLOCKSIZE + 1);
	}

	/* Set encryption direction. */
	switch (dir) {
    3c3e:	2c00      	cmp	r4, #0
    3c40:	d002      	beq.n	3c48 <sal_aes_setup+0x4c>
    3c42:	2c01      	cmp	r4, #1
    3c44:	d012      	beq.n	3c6c <sal_aes_setup+0x70>
    3c46:	e05a      	b.n	3cfe <sal_aes_setup+0x102>
	case AES_DIR_ENCRYPT:
		if (last_dir == AES_DIR_DECRYPT) {
    3c48:	4b31      	ldr	r3, [pc, #196]	; (3d10 <sal_aes_setup+0x114>)
    3c4a:	781b      	ldrb	r3, [r3, #0]
    3c4c:	2b01      	cmp	r3, #1
    3c4e:	d13d      	bne.n	3ccc <sal_aes_setup+0xd0>
			/*
			 * If the last operation was decryption, the encryption
			 * key must be stored in enc_key, so re-initialize it.
			 */
			aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    3c50:	4e32      	ldr	r6, [pc, #200]	; (3d1c <sal_aes_setup+0x120>)
    3c52:	330f      	adds	r3, #15
    3c54:	7033      	strb	r3, [r6, #0]

			/* Fill in key. */
			memcpy(aes_buf + 1, enc_key, AES_KEYSIZE);
    3c56:	1c70      	adds	r0, r6, #1
    3c58:	2210      	movs	r2, #16
    3c5a:	492e      	ldr	r1, [pc, #184]	; (3d14 <sal_aes_setup+0x118>)
    3c5c:	4b2e      	ldr	r3, [pc, #184]	; (3d18 <sal_aes_setup+0x11c>)
    3c5e:	4798      	blx	r3

			/* Write to SRAM in one step. */
			trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL),
    3c60:	2211      	movs	r2, #17
    3c62:	0031      	movs	r1, r6
    3c64:	2083      	movs	r0, #131	; 0x83
    3c66:	4b2e      	ldr	r3, [pc, #184]	; (3d20 <sal_aes_setup+0x124>)
    3c68:	4798      	blx	r3
    3c6a:	e02f      	b.n	3ccc <sal_aes_setup+0xd0>
		}

		break;

	case AES_DIR_DECRYPT:
		if (last_dir != AES_DIR_DECRYPT) {
    3c6c:	4b28      	ldr	r3, [pc, #160]	; (3d10 <sal_aes_setup+0x114>)
    3c6e:	781b      	ldrb	r3, [r3, #0]
    3c70:	2b01      	cmp	r3, #1
    3c72:	d02b      	beq.n	3ccc <sal_aes_setup+0xd0>
			aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    3c74:	2210      	movs	r2, #16
    3c76:	4b29      	ldr	r3, [pc, #164]	; (3d1c <sal_aes_setup+0x120>)
    3c78:	701a      	strb	r2, [r3, #0]

			if (!dec_initialized) {
    3c7a:	4b24      	ldr	r3, [pc, #144]	; (3d0c <sal_aes_setup+0x110>)
    3c7c:	781b      	ldrb	r3, [r3, #0]
    3c7e:	2b00      	cmp	r3, #0
    3c80:	d116      	bne.n	3cb0 <sal_aes_setup+0xb4>

				/* Compute decryption key and initialize unit
				 * with it. */

				/* Dummy ECB encryption. */
				aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_ECB);
    3c82:	4e26      	ldr	r6, [pc, #152]	; (3d1c <sal_aes_setup+0x120>)
    3c84:	7033      	strb	r3, [r6, #0]
				aes_buf[AES_BLOCKSIZE + 1] = SR_MASK(
    3c86:	3380      	adds	r3, #128	; 0x80
    3c88:	7473      	strb	r3, [r6, #17]
						SR_AES_MODE, AES_MODE_ECB) |
						SR_MASK(SR_AES_REQUEST,
						AES_REQUEST);

				setup_flag = true; /* Needed in sal_aes_wrrd().
    3c8a:	3a0f      	subs	r2, #15
    3c8c:	4b25      	ldr	r3, [pc, #148]	; (3d24 <sal_aes_setup+0x128>)
    3c8e:	701a      	strb	r2, [r3, #0]
				                   **/
				sal_aes_wrrd(dummy, NULL);
    3c90:	2100      	movs	r1, #0
    3c92:	4668      	mov	r0, sp
    3c94:	4b24      	ldr	r3, [pc, #144]	; (3d28 <sal_aes_setup+0x12c>)
    3c96:	4798      	blx	r3

				/* Read last round key: */

				/* Set to key mode. */
				aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    3c98:	2310      	movs	r3, #16
    3c9a:	7033      	strb	r3, [r6, #0]
				trx_sram_write(
    3c9c:	2201      	movs	r2, #1
    3c9e:	0031      	movs	r1, r6
    3ca0:	2083      	movs	r0, #131	; 0x83
    3ca2:	4b1f      	ldr	r3, [pc, #124]	; (3d20 <sal_aes_setup+0x124>)
    3ca4:	4798      	blx	r3
						(AES_BASE_ADDR + RG_AES_CTRL),
						aes_buf, 1);

				/* Read the key. */
				trx_sram_read((AES_BASE_ADDR +
    3ca6:	2210      	movs	r2, #16
    3ca8:	4920      	ldr	r1, [pc, #128]	; (3d2c <sal_aes_setup+0x130>)
    3caa:	2084      	movs	r0, #132	; 0x84
    3cac:	4b20      	ldr	r3, [pc, #128]	; (3d30 <sal_aes_setup+0x134>)
    3cae:	4798      	blx	r3
			 * simply re-initialize the unit;
			 * aes_buf[0] is AES_MODE_KEY
			 */

			/* Fill in key. */
			memcpy(aes_buf + 1, dec_key, AES_KEYSIZE);
    3cb0:	4e1a      	ldr	r6, [pc, #104]	; (3d1c <sal_aes_setup+0x120>)
    3cb2:	1c70      	adds	r0, r6, #1
    3cb4:	2210      	movs	r2, #16
    3cb6:	491d      	ldr	r1, [pc, #116]	; (3d2c <sal_aes_setup+0x130>)
    3cb8:	4b17      	ldr	r3, [pc, #92]	; (3d18 <sal_aes_setup+0x11c>)
    3cba:	4798      	blx	r3

			/* Write to SRAM in one step. */
			trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL),
    3cbc:	2211      	movs	r2, #17
    3cbe:	0031      	movs	r1, r6
    3cc0:	2083      	movs	r0, #131	; 0x83
    3cc2:	4b17      	ldr	r3, [pc, #92]	; (3d20 <sal_aes_setup+0x124>)
    3cc4:	4798      	blx	r3
					aes_buf, AES_BLOCKSIZE + 1);

			dec_initialized = true;
    3cc6:	4b11      	ldr	r3, [pc, #68]	; (3d0c <sal_aes_setup+0x110>)
    3cc8:	2201      	movs	r2, #1
    3cca:	701a      	strb	r2, [r3, #0]

	default:
		return false;
	}

	last_dir = dir;
    3ccc:	4b10      	ldr	r3, [pc, #64]	; (3d10 <sal_aes_setup+0x114>)
    3cce:	701c      	strb	r4, [r3, #0]

	/* Set encryption mode. */
	switch (enc_mode) {
    3cd0:	2d00      	cmp	r5, #0
    3cd2:	d002      	beq.n	3cda <sal_aes_setup+0xde>
				SR_MASK(SR_AES_REQUEST, AES_REQUEST);
	}
	break;

	default:
		return (false);
    3cd4:	2000      	movs	r0, #0
	}

	last_dir = dir;

	/* Set encryption mode. */
	switch (enc_mode) {
    3cd6:	2d02      	cmp	r5, #2
    3cd8:	d113      	bne.n	3d02 <sal_aes_setup+0x106>
	case AES_MODE_ECB:
	case AES_MODE_CBC:
	{
		aes_buf[0] = SR_MASK(SR_AES_MODE, enc_mode) |
    3cda:	012d      	lsls	r5, r5, #4
    3cdc:	2370      	movs	r3, #112	; 0x70
    3cde:	401d      	ands	r5, r3
    3ce0:	00e3      	lsls	r3, r4, #3
    3ce2:	2408      	movs	r4, #8
    3ce4:	401c      	ands	r4, r3
    3ce6:	432c      	orrs	r4, r5
    3ce8:	4b0c      	ldr	r3, [pc, #48]	; (3d1c <sal_aes_setup+0x120>)
    3cea:	701c      	strb	r4, [r3, #0]
				SR_MASK(SR_AES_DIR, dir);
		aes_buf[AES_BLOCKSIZE + 1] = SR_MASK(SR_AES_MODE, enc_mode) |
    3cec:	2280      	movs	r2, #128	; 0x80
    3cee:	4252      	negs	r2, r2
    3cf0:	4314      	orrs	r4, r2
    3cf2:	745c      	strb	r4, [r3, #17]

	default:
		return (false);
	}

	setup_flag = true;
    3cf4:	3281      	adds	r2, #129	; 0x81
    3cf6:	4b0b      	ldr	r3, [pc, #44]	; (3d24 <sal_aes_setup+0x128>)
    3cf8:	701a      	strb	r2, [r3, #0]

	return (true);
    3cfa:	2001      	movs	r0, #1
    3cfc:	e001      	b.n	3d02 <sal_aes_setup+0x106>
		}

		break;

	default:
		return false;
    3cfe:	2000      	movs	r0, #0
    3d00:	e7ff      	b.n	3d02 <sal_aes_setup+0x106>
	}

	setup_flag = true;

	return (true);
}
    3d02:	b004      	add	sp, #16
    3d04:	bc04      	pop	{r2}
    3d06:	4690      	mov	r8, r2
    3d08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3d0a:	46c0      	nop			; (mov r8, r8)
    3d0c:	20000798 	.word	0x20000798
    3d10:	20000009 	.word	0x20000009
    3d14:	200007ac 	.word	0x200007ac
    3d18:	00004b9d 	.word	0x00004b9d
    3d1c:	200007bc 	.word	0x200007bc
    3d20:	000042f9 	.word	0x000042f9
    3d24:	200007ce 	.word	0x200007ce
    3d28:	00003b91 	.word	0x00003b91
    3d2c:	2000079c 	.word	0x2000079c
    3d30:	00004461 	.word	0x00004461

00003d34 <sal_aes_read>:
 * of a series of sal_aes_wrrd() calls.
 *
 * @param[out] data     - result of previous operation
 */
void sal_aes_read(uint8_t *data)
{
    3d34:	b510      	push	{r4, lr}
    3d36:	0001      	movs	r1, r0
	trx_sram_read((AES_BASE_ADDR + RG_AES_STATE_KEY_0), data,
    3d38:	2210      	movs	r2, #16
    3d3a:	2084      	movs	r0, #132	; 0x84
    3d3c:	4b01      	ldr	r3, [pc, #4]	; (3d44 <sal_aes_read+0x10>)
    3d3e:	4798      	blx	r3
			AES_BLOCKSIZE);
}
    3d40:	bd10      	pop	{r4, pc}
    3d42:	46c0      	nop			; (mov r8, r8)
    3d44:	00004461 	.word	0x00004461

00003d48 <AT86RFX_ISR>:
void AT86RFX_ISR(void)
#else
AT86RFX_ISR()
#endif

{
    3d48:	b510      	push	{r4, lr}
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    3d4a:	2201      	movs	r2, #1
    3d4c:	4b03      	ldr	r3, [pc, #12]	; (3d5c <AT86RFX_ISR+0x14>)
    3d4e:	611a      	str	r2, [r3, #16]
	/*Clearing the RF interrupt*/
	trx_irq_flag_clr();
  	/*Calling the interrupt routines*/
	if (irq_hdl_trx) {
    3d50:	4b03      	ldr	r3, [pc, #12]	; (3d60 <AT86RFX_ISR+0x18>)
    3d52:	681b      	ldr	r3, [r3, #0]
    3d54:	2b00      	cmp	r3, #0
    3d56:	d000      	beq.n	3d5a <AT86RFX_ISR+0x12>
		irq_hdl_trx();
    3d58:	4798      	blx	r3
	}
}
    3d5a:	bd10      	pop	{r4, pc}
    3d5c:	40001800 	.word	0x40001800
    3d60:	200007d0 	.word	0x200007d0

00003d64 <trx_spi_init>:

void trx_spi_init(void)
{
    3d64:	b530      	push	{r4, r5, lr}
    3d66:	b085      	sub	sp, #20
		struct spi_slave_inst_config *const config)
{
	Assert(config);

	config->ss_pin          = 10;
	config->address_enabled = false;
    3d68:	4a34      	ldr	r2, [pc, #208]	; (3e3c <trx_spi_init+0xd8>)
    3d6a:	2300      	movs	r3, #0
    3d6c:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    3d6e:	7093      	strb	r3, [r2, #2]
	/* Initialize SPI in master mode to access the transceiver */
#if SAMD || SAMR21 || SAML21
	spi_slave_inst_get_config_defaults(&slave_dev_config);
	slave_dev_config.ss_pin = AT86RFX_SPI_CS;
    3d70:	213f      	movs	r1, #63	; 0x3f
    3d72:	7011      	strb	r1, [r2, #0]
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    3d74:	4c32      	ldr	r4, [pc, #200]	; (3e40 <trx_spi_init+0xdc>)
    3d76:	7021      	strb	r1, [r4, #0]
	slave->address_enabled = config->address_enabled;
    3d78:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    3d7a:	70a3      	strb	r3, [r4, #2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    3d7c:	2201      	movs	r2, #1
    3d7e:	4669      	mov	r1, sp
    3d80:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    3d82:	708b      	strb	r3, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    3d84:	700a      	strb	r2, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    3d86:	203f      	movs	r0, #63	; 0x3f
    3d88:	4b2e      	ldr	r3, [pc, #184]	; (3e44 <trx_spi_init+0xe0>)
    3d8a:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    3d8c:	7823      	ldrb	r3, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3d8e:	09da      	lsrs	r2, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    3d90:	2100      	movs	r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3d92:	2a00      	cmp	r2, #0
    3d94:	d104      	bne.n	3da0 <trx_spi_init+0x3c>
		return &(ports[port_index]->Group[group_index]);
    3d96:	0959      	lsrs	r1, r3, #5
    3d98:	01c9      	lsls	r1, r1, #7
    3d9a:	4a2b      	ldr	r2, [pc, #172]	; (3e48 <trx_spi_init+0xe4>)
    3d9c:	4694      	mov	ip, r2
    3d9e:	4461      	add	r1, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3da0:	221f      	movs	r2, #31
    3da2:	4013      	ands	r3, r2
    3da4:	3a1e      	subs	r2, #30
    3da6:	0010      	movs	r0, r2
    3da8:	4098      	lsls	r0, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    3daa:	6188      	str	r0, [r1, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    3dac:	4c27      	ldr	r4, [pc, #156]	; (3e4c <trx_spi_init+0xe8>)
    3dae:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    3db0:	2300      	movs	r3, #0
    3db2:	6063      	str	r3, [r4, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    3db4:	60a3      	str	r3, [r4, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    3db6:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    3db8:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    3dba:	74a2      	strb	r2, [r4, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    3dbc:	74e2      	strb	r2, [r4, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    3dbe:	7523      	strb	r3, [r4, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    3dc0:	3223      	adds	r2, #35	; 0x23
    3dc2:	54a3      	strb	r3, [r4, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    3dc4:	0020      	movs	r0, r4
    3dc6:	3018      	adds	r0, #24
    3dc8:	3a18      	subs	r2, #24
    3dca:	2100      	movs	r1, #0
    3dcc:	4b20      	ldr	r3, [pc, #128]	; (3e50 <trx_spi_init+0xec>)
    3dce:	4798      	blx	r3
	spi_attach_slave(&slave, &slave_dev_config);
	spi_get_config_defaults(&config);
	config.mux_setting = AT86RFX_SPI_SERCOM_MUX_SETTING;
    3dd0:	2380      	movs	r3, #128	; 0x80
    3dd2:	025b      	lsls	r3, r3, #9
    3dd4:	60e3      	str	r3, [r4, #12]
	config.mode_specific.master.baudrate = AT86RFX_SPI_BAUDRATE;
    3dd6:	4b1f      	ldr	r3, [pc, #124]	; (3e54 <trx_spi_init+0xf0>)
    3dd8:	61a3      	str	r3, [r4, #24]
	config.pinmux_pad0 = AT86RFX_SPI_SERCOM_PINMUX_PAD0;
    3dda:	4b1f      	ldr	r3, [pc, #124]	; (3e58 <trx_spi_init+0xf4>)
    3ddc:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = AT86RFX_SPI_SERCOM_PINMUX_PAD1;
    3dde:	2301      	movs	r3, #1
    3de0:	425b      	negs	r3, r3
    3de2:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = AT86RFX_SPI_SERCOM_PINMUX_PAD2;
    3de4:	4b1d      	ldr	r3, [pc, #116]	; (3e5c <trx_spi_init+0xf8>)
    3de6:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = AT86RFX_SPI_SERCOM_PINMUX_PAD3;
    3de8:	4b1d      	ldr	r3, [pc, #116]	; (3e60 <trx_spi_init+0xfc>)
    3dea:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&master, AT86RFX_SPI, &config);
    3dec:	4d1d      	ldr	r5, [pc, #116]	; (3e64 <trx_spi_init+0x100>)
    3dee:	0022      	movs	r2, r4
    3df0:	491d      	ldr	r1, [pc, #116]	; (3e68 <trx_spi_init+0x104>)
    3df2:	0028      	movs	r0, r5
    3df4:	4b1d      	ldr	r3, [pc, #116]	; (3e6c <trx_spi_init+0x108>)
    3df6:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3df8:	682a      	ldr	r2, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    3dfa:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    3dfc:	2b00      	cmp	r3, #0
    3dfe:	d1fc      	bne.n	3dfa <trx_spi_init+0x96>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    3e00:	6813      	ldr	r3, [r2, #0]
    3e02:	2502      	movs	r5, #2
    3e04:	432b      	orrs	r3, r5
    3e06:	6013      	str	r3, [r2, #0]
	spi_enable(&master);

	struct extint_chan_conf eint_chan_conf;
	extint_chan_get_config_defaults(&eint_chan_conf);
    3e08:	ac01      	add	r4, sp, #4
    3e0a:	0020      	movs	r0, r4
    3e0c:	4b18      	ldr	r3, [pc, #96]	; (3e70 <trx_spi_init+0x10c>)
    3e0e:	4798      	blx	r3
	eint_chan_conf.gpio_pin = AT86RFX_IRQ_PIN;
    3e10:	2320      	movs	r3, #32
    3e12:	9301      	str	r3, [sp, #4]
	eint_chan_conf.gpio_pin_mux = AT86RFX_IRQ_PINMUX;
    3e14:	2380      	movs	r3, #128	; 0x80
    3e16:	039b      	lsls	r3, r3, #14
    3e18:	6063      	str	r3, [r4, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_DOWN;
    3e1a:	7225      	strb	r5, [r4, #8]
	#if (SAML21)
	eint_chan_conf.enable_async_edge_detection = false;
	#else
	eint_chan_conf.wake_if_sleeping    = true;
    3e1c:	2301      	movs	r3, #1
    3e1e:	7263      	strb	r3, [r4, #9]
	#endif
	eint_chan_conf.filter_input_signal = false;
    3e20:	2200      	movs	r2, #0
    3e22:	72a2      	strb	r2, [r4, #10]
	eint_chan_conf.detection_criteria  = EXTINT_DETECT_RISING;
    3e24:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(AT86RFX_IRQ_CHAN, &eint_chan_conf);
    3e26:	0021      	movs	r1, r4
    3e28:	2000      	movs	r0, #0
    3e2a:	4b12      	ldr	r3, [pc, #72]	; (3e74 <trx_spi_init+0x110>)
    3e2c:	4798      	blx	r3
	extint_register_callback(AT86RFX_ISR, AT86RFX_IRQ_CHAN,
    3e2e:	2200      	movs	r2, #0
    3e30:	2100      	movs	r1, #0
    3e32:	4811      	ldr	r0, [pc, #68]	; (3e78 <trx_spi_init+0x114>)
    3e34:	4b11      	ldr	r3, [pc, #68]	; (3e7c <trx_spi_init+0x118>)
    3e36:	4798      	blx	r3
	spi_master_setup_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE, SPI_MODE_0,
			AT86RFX_SPI_BAUDRATE, 0);
	spi_enable(AT86RFX_SPI);
	AT86RFX_INTC_INIT();
#endif
}
    3e38:	b005      	add	sp, #20
    3e3a:	bd30      	pop	{r4, r5, pc}
    3e3c:	2000093c 	.word	0x2000093c
    3e40:	20000940 	.word	0x20000940
    3e44:	000004a1 	.word	0x000004a1
    3e48:	41004400 	.word	0x41004400
    3e4c:	20000944 	.word	0x20000944
    3e50:	00004baf 	.word	0x00004baf
    3e54:	004c4b40 	.word	0x004c4b40
    3e58:	00530005 	.word	0x00530005
    3e5c:	003e0005 	.word	0x003e0005
    3e60:	00520005 	.word	0x00520005
    3e64:	2000097c 	.word	0x2000097c
    3e68:	42001800 	.word	0x42001800
    3e6c:	00000991 	.word	0x00000991
    3e70:	00000419 	.word	0x00000419
    3e74:	0000042d 	.word	0x0000042d
    3e78:	00003d49 	.word	0x00003d49
    3e7c:	000002c1 	.word	0x000002c1

00003e80 <PhyReset>:

void PhyReset(void)
{
    3e80:	b570      	push	{r4, r5, r6, lr}
    3e82:	4b09      	ldr	r3, [pc, #36]	; (3ea8 <PhyReset+0x28>)
    3e84:	001c      	movs	r4, r3
    3e86:	3480      	adds	r4, #128	; 0x80
    3e88:	2580      	movs	r5, #128	; 0x80
    3e8a:	022d      	lsls	r5, r5, #8
    3e8c:	61a5      	str	r5, [r4, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
    3e8e:	2280      	movs	r2, #128	; 0x80
    3e90:	0352      	lsls	r2, r2, #13
    3e92:	615a      	str	r2, [r3, #20]
	/* Ensure control lines have correct levels. */
	RST_HIGH();
	SLP_TR_LOW();

	/* Wait typical time of timer TR1. */
	delay_us(330);
    3e94:	20a5      	movs	r0, #165	; 0xa5
    3e96:	0040      	lsls	r0, r0, #1
    3e98:	4e04      	ldr	r6, [pc, #16]	; (3eac <PhyReset+0x2c>)
    3e9a:	47b0      	blx	r6
    3e9c:	6165      	str	r5, [r4, #20]

	RST_LOW();
	delay_us(10);
    3e9e:	200a      	movs	r0, #10
    3ea0:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    3ea2:	61a5      	str	r5, [r4, #24]
	RST_HIGH();
}
    3ea4:	bd70      	pop	{r4, r5, r6, pc}
    3ea6:	46c0      	nop			; (mov r8, r8)
    3ea8:	41004400 	.word	0x41004400
    3eac:	00000155 	.word	0x00000155

00003eb0 <trx_reg_read>:

uint8_t trx_reg_read(uint8_t addr)
{
    3eb0:	b570      	push	{r4, r5, r6, lr}
    3eb2:	b082      	sub	sp, #8
    3eb4:	0005      	movs	r5, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3eb6:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    3eba:	425a      	negs	r2, r3
    3ebc:	4153      	adcs	r3, r2
    3ebe:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    3ec0:	b672      	cpsid	i
    3ec2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3ec6:	2200      	movs	r2, #0
    3ec8:	4b33      	ldr	r3, [pc, #204]	; (3f98 <trx_reg_read+0xe8>)
    3eca:	701a      	strb	r2, [r3, #0]
	return flags;
    3ecc:	9c01      	ldr	r4, [sp, #4]
	/* Prepare the command byte */
	addr |= READ_ACCESS_COMMAND;

#if SAMD || SAMR21 || SAML21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    3ece:	4e33      	ldr	r6, [pc, #204]	; (3f9c <trx_reg_read+0xec>)
    3ed0:	3201      	adds	r2, #1
    3ed2:	4933      	ldr	r1, [pc, #204]	; (3fa0 <trx_reg_read+0xf0>)
    3ed4:	0030      	movs	r0, r6
    3ed6:	4b33      	ldr	r3, [pc, #204]	; (3fa4 <trx_reg_read+0xf4>)
    3ed8:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3eda:	6833      	ldr	r3, [r6, #0]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    3edc:	2101      	movs	r1, #1

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3ede:	7e1a      	ldrb	r2, [r3, #24]
    3ee0:	420a      	tst	r2, r1
    3ee2:	d0fc      	beq.n	3ede <trx_reg_read+0x2e>
    3ee4:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3ee6:	07d2      	lsls	r2, r2, #31
    3ee8:	d502      	bpl.n	3ef0 <trx_reg_read+0x40>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3eea:	2280      	movs	r2, #128	; 0x80
    3eec:	4315      	orrs	r5, r2
    3eee:	629d      	str	r5, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    3ef0:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3ef2:	7e1a      	ldrb	r2, [r3, #24]
    3ef4:	420a      	tst	r2, r1
    3ef6:	d0fc      	beq.n	3ef2 <trx_reg_read+0x42>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3ef8:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3efa:	7e1a      	ldrb	r2, [r3, #24]
    3efc:	420a      	tst	r2, r1
    3efe:	d0fc      	beq.n	3efa <trx_reg_read+0x4a>
    3f00:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3f02:	0752      	lsls	r2, r2, #29
    3f04:	d512      	bpl.n	3f2c <trx_reg_read+0x7c>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3f06:	8b5a      	ldrh	r2, [r3, #26]
    3f08:	0752      	lsls	r2, r2, #29
    3f0a:	d501      	bpl.n	3f10 <trx_reg_read+0x60>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3f0c:	2204      	movs	r2, #4
    3f0e:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3f10:	4a22      	ldr	r2, [pc, #136]	; (3f9c <trx_reg_read+0xec>)
    3f12:	7992      	ldrb	r2, [r2, #6]
    3f14:	2a01      	cmp	r2, #1
    3f16:	d105      	bne.n	3f24 <trx_reg_read+0x74>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3f18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3f1a:	05d2      	lsls	r2, r2, #23
    3f1c:	0dd2      	lsrs	r2, r2, #23
    3f1e:	4922      	ldr	r1, [pc, #136]	; (3fa8 <trx_reg_read+0xf8>)
    3f20:	800a      	strh	r2, [r1, #0]
    3f22:	e003      	b.n	3f2c <trx_reg_read+0x7c>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3f24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3f26:	b2d2      	uxtb	r2, r2
    3f28:	491f      	ldr	r1, [pc, #124]	; (3fa8 <trx_reg_read+0xf8>)
    3f2a:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	while (!spi_is_ready_to_write(&master)) {
    3f2c:	2101      	movs	r1, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3f2e:	7e1a      	ldrb	r2, [r3, #24]
    3f30:	420a      	tst	r2, r1
    3f32:	d0fc      	beq.n	3f2e <trx_reg_read+0x7e>
    3f34:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3f36:	07d2      	lsls	r2, r2, #31
    3f38:	d501      	bpl.n	3f3e <trx_reg_read+0x8e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3f3a:	2200      	movs	r2, #0
    3f3c:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    3f3e:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3f40:	7e1a      	ldrb	r2, [r3, #24]
    3f42:	420a      	tst	r2, r1
    3f44:	d0fc      	beq.n	3f40 <trx_reg_read+0x90>
	}
	while (!spi_is_ready_to_read(&master)) {
    3f46:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3f48:	7e1a      	ldrb	r2, [r3, #24]
    3f4a:	420a      	tst	r2, r1
    3f4c:	d0fc      	beq.n	3f48 <trx_reg_read+0x98>
    3f4e:	7e1a      	ldrb	r2, [r3, #24]
}

uint8_t trx_reg_read(uint8_t addr)
{
#if SAMD || SAMR21 || SAML21
	uint16_t register_value = 0;
    3f50:	2500      	movs	r5, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3f52:	0752      	lsls	r2, r2, #29
    3f54:	d50e      	bpl.n	3f74 <trx_reg_read+0xc4>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3f56:	8b5a      	ldrh	r2, [r3, #26]
    3f58:	0752      	lsls	r2, r2, #29
    3f5a:	d501      	bpl.n	3f60 <trx_reg_read+0xb0>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3f5c:	2204      	movs	r2, #4
    3f5e:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3f60:	4a0e      	ldr	r2, [pc, #56]	; (3f9c <trx_reg_read+0xec>)
    3f62:	7992      	ldrb	r2, [r2, #6]
    3f64:	2a01      	cmp	r2, #1
    3f66:	d103      	bne.n	3f70 <trx_reg_read+0xc0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3f68:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    3f6a:	05ed      	lsls	r5, r5, #23
    3f6c:	0ded      	lsrs	r5, r5, #23
    3f6e:	e001      	b.n	3f74 <trx_reg_read+0xc4>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3f70:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    3f72:	b2ed      	uxtb	r5, r5
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &register_value);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    3f74:	2200      	movs	r2, #0
    3f76:	490a      	ldr	r1, [pc, #40]	; (3fa0 <trx_reg_read+0xf0>)
    3f78:	4808      	ldr	r0, [pc, #32]	; (3f9c <trx_reg_read+0xec>)
    3f7a:	4b0a      	ldr	r3, [pc, #40]	; (3fa4 <trx_reg_read+0xf4>)
    3f7c:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    3f7e:	23ff      	movs	r3, #255	; 0xff
    3f80:	4223      	tst	r3, r4
    3f82:	d005      	beq.n	3f90 <trx_reg_read+0xe0>
		cpu_irq_enable();
    3f84:	2201      	movs	r2, #1
    3f86:	4b04      	ldr	r3, [pc, #16]	; (3f98 <trx_reg_read+0xe8>)
    3f88:	701a      	strb	r2, [r3, #0]
    3f8a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    3f8e:	b662      	cpsie	i

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();

	return register_value;
    3f90:	b2e8      	uxtb	r0, r5
}
    3f92:	b002      	add	sp, #8
    3f94:	bd70      	pop	{r4, r5, r6, pc}
    3f96:	46c0      	nop			; (mov r8, r8)
    3f98:	20000008 	.word	0x20000008
    3f9c:	2000097c 	.word	0x2000097c
    3fa0:	20000940 	.word	0x20000940
    3fa4:	00000c3d 	.word	0x00000c3d
    3fa8:	20000938 	.word	0x20000938

00003fac <trx_reg_write>:

void trx_reg_write(uint8_t addr, uint8_t data)
{
    3fac:	b5f0      	push	{r4, r5, r6, r7, lr}
    3fae:	b083      	sub	sp, #12
    3fb0:	0006      	movs	r6, r0
    3fb2:	000c      	movs	r4, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3fb4:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    3fb8:	425a      	negs	r2, r3
    3fba:	4153      	adcs	r3, r2
    3fbc:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    3fbe:	b672      	cpsid	i
    3fc0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3fc4:	2200      	movs	r2, #0
    3fc6:	4b34      	ldr	r3, [pc, #208]	; (4098 <trx_reg_write+0xec>)
    3fc8:	701a      	strb	r2, [r3, #0]
	return flags;
    3fca:	9d01      	ldr	r5, [sp, #4]
	/* Prepare the command byte */
	addr |= WRITE_ACCESS_COMMAND;

#if SAMD || SAMR21 || SAML21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    3fcc:	4f33      	ldr	r7, [pc, #204]	; (409c <trx_reg_write+0xf0>)
    3fce:	3201      	adds	r2, #1
    3fd0:	4933      	ldr	r1, [pc, #204]	; (40a0 <trx_reg_write+0xf4>)
    3fd2:	0038      	movs	r0, r7
    3fd4:	4b33      	ldr	r3, [pc, #204]	; (40a4 <trx_reg_write+0xf8>)
    3fd6:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3fd8:	683b      	ldr	r3, [r7, #0]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    3fda:	2101      	movs	r1, #1

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3fdc:	7e1a      	ldrb	r2, [r3, #24]
    3fde:	420a      	tst	r2, r1
    3fe0:	d0fc      	beq.n	3fdc <trx_reg_write+0x30>
    3fe2:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3fe4:	07d2      	lsls	r2, r2, #31
    3fe6:	d502      	bpl.n	3fee <trx_reg_write+0x42>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3fe8:	22c0      	movs	r2, #192	; 0xc0
    3fea:	4316      	orrs	r6, r2
    3fec:	629e      	str	r6, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    3fee:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3ff0:	7e1a      	ldrb	r2, [r3, #24]
    3ff2:	420a      	tst	r2, r1
    3ff4:	d0fc      	beq.n	3ff0 <trx_reg_write+0x44>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3ff6:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3ff8:	7e1a      	ldrb	r2, [r3, #24]
    3ffa:	420a      	tst	r2, r1
    3ffc:	d0fc      	beq.n	3ff8 <trx_reg_write+0x4c>
    3ffe:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4000:	0752      	lsls	r2, r2, #29
    4002:	d512      	bpl.n	402a <trx_reg_write+0x7e>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4004:	8b5a      	ldrh	r2, [r3, #26]
    4006:	0752      	lsls	r2, r2, #29
    4008:	d501      	bpl.n	400e <trx_reg_write+0x62>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    400a:	2204      	movs	r2, #4
    400c:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    400e:	4a23      	ldr	r2, [pc, #140]	; (409c <trx_reg_write+0xf0>)
    4010:	7992      	ldrb	r2, [r2, #6]
    4012:	2a01      	cmp	r2, #1
    4014:	d105      	bne.n	4022 <trx_reg_write+0x76>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4016:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4018:	05d2      	lsls	r2, r2, #23
    401a:	0dd2      	lsrs	r2, r2, #23
    401c:	4922      	ldr	r1, [pc, #136]	; (40a8 <trx_reg_write+0xfc>)
    401e:	800a      	strh	r2, [r1, #0]
    4020:	e003      	b.n	402a <trx_reg_write+0x7e>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4022:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4024:	b2d2      	uxtb	r2, r2
    4026:	4920      	ldr	r1, [pc, #128]	; (40a8 <trx_reg_write+0xfc>)
    4028:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master)) {
    402a:	2101      	movs	r1, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    402c:	7e1a      	ldrb	r2, [r3, #24]
    402e:	420a      	tst	r2, r1
    4030:	d0fc      	beq.n	402c <trx_reg_write+0x80>
    4032:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4034:	07d2      	lsls	r2, r2, #31
    4036:	d500      	bpl.n	403a <trx_reg_write+0x8e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4038:	629c      	str	r4, [r3, #40]	; 0x28
	}
	spi_write(&master, data);
	while (!spi_is_write_complete(&master)) {
    403a:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    403c:	7e1a      	ldrb	r2, [r3, #24]
    403e:	420a      	tst	r2, r1
    4040:	d0fc      	beq.n	403c <trx_reg_write+0x90>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4042:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4044:	7e1a      	ldrb	r2, [r3, #24]
    4046:	420a      	tst	r2, r1
    4048:	d0fc      	beq.n	4044 <trx_reg_write+0x98>
    404a:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    404c:	0752      	lsls	r2, r2, #29
    404e:	d512      	bpl.n	4076 <trx_reg_write+0xca>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4050:	8b5a      	ldrh	r2, [r3, #26]
    4052:	0752      	lsls	r2, r2, #29
    4054:	d501      	bpl.n	405a <trx_reg_write+0xae>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4056:	2204      	movs	r2, #4
    4058:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    405a:	4a10      	ldr	r2, [pc, #64]	; (409c <trx_reg_write+0xf0>)
    405c:	7992      	ldrb	r2, [r2, #6]
    405e:	2a01      	cmp	r2, #1
    4060:	d105      	bne.n	406e <trx_reg_write+0xc2>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4064:	05db      	lsls	r3, r3, #23
    4066:	0ddb      	lsrs	r3, r3, #23
    4068:	4a0f      	ldr	r2, [pc, #60]	; (40a8 <trx_reg_write+0xfc>)
    406a:	8013      	strh	r3, [r2, #0]
    406c:	e003      	b.n	4076 <trx_reg_write+0xca>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    406e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4070:	b2db      	uxtb	r3, r3
    4072:	4a0d      	ldr	r2, [pc, #52]	; (40a8 <trx_reg_write+0xfc>)
    4074:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    4076:	2200      	movs	r2, #0
    4078:	4909      	ldr	r1, [pc, #36]	; (40a0 <trx_reg_write+0xf4>)
    407a:	4808      	ldr	r0, [pc, #32]	; (409c <trx_reg_write+0xf0>)
    407c:	4b09      	ldr	r3, [pc, #36]	; (40a4 <trx_reg_write+0xf8>)
    407e:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    4080:	23ff      	movs	r3, #255	; 0xff
    4082:	422b      	tst	r3, r5
    4084:	d005      	beq.n	4092 <trx_reg_write+0xe6>
		cpu_irq_enable();
    4086:	2201      	movs	r2, #1
    4088:	4b03      	ldr	r3, [pc, #12]	; (4098 <trx_reg_write+0xec>)
    408a:	701a      	strb	r2, [r3, #0]
    408c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    4090:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    4092:	b003      	add	sp, #12
    4094:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4096:	46c0      	nop			; (mov r8, r8)
    4098:	20000008 	.word	0x20000008
    409c:	2000097c 	.word	0x2000097c
    40a0:	20000940 	.word	0x20000940
    40a4:	00000c3d 	.word	0x00000c3d
    40a8:	20000938 	.word	0x20000938

000040ac <trx_frame_read>:
	new_value |= current_reg_value;
	trx_reg_write(reg_addr, new_value);
}

void trx_frame_read(uint8_t *data, uint8_t length)
{
    40ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    40ae:	4657      	mov	r7, sl
    40b0:	464e      	mov	r6, r9
    40b2:	4645      	mov	r5, r8
    40b4:	b4e0      	push	{r5, r6, r7}
    40b6:	b082      	sub	sp, #8
    40b8:	0005      	movs	r5, r0
    40ba:	000c      	movs	r4, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    40bc:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    40c0:	425a      	negs	r2, r3
    40c2:	4153      	adcs	r3, r2
    40c4:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    40c6:	b672      	cpsid	i
    40c8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    40cc:	2200      	movs	r2, #0
    40ce:	4b3e      	ldr	r3, [pc, #248]	; (41c8 <trx_frame_read+0x11c>)
    40d0:	701a      	strb	r2, [r3, #0]
	return flags;
    40d2:	9b01      	ldr	r3, [sp, #4]
    40d4:	4698      	mov	r8, r3
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21 || SAML21
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    40d6:	4f3d      	ldr	r7, [pc, #244]	; (41cc <trx_frame_read+0x120>)
    40d8:	3201      	adds	r2, #1
    40da:	493d      	ldr	r1, [pc, #244]	; (41d0 <trx_frame_read+0x124>)
    40dc:	0038      	movs	r0, r7
    40de:	4b3d      	ldr	r3, [pc, #244]	; (41d4 <trx_frame_read+0x128>)
    40e0:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    40e2:	683b      	ldr	r3, [r7, #0]

	temp = TRX_CMD_FR;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    40e4:	2101      	movs	r1, #1

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    40e6:	7e1a      	ldrb	r2, [r3, #24]
    40e8:	420a      	tst	r2, r1
    40ea:	d0fc      	beq.n	40e6 <trx_frame_read+0x3a>
    40ec:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    40ee:	07d2      	lsls	r2, r2, #31
    40f0:	d501      	bpl.n	40f6 <trx_frame_read+0x4a>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    40f2:	2220      	movs	r2, #32
    40f4:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    40f6:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    40f8:	7e1a      	ldrb	r2, [r3, #24]
    40fa:	420a      	tst	r2, r1
    40fc:	d0fc      	beq.n	40f8 <trx_frame_read+0x4c>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    40fe:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4100:	7e1a      	ldrb	r2, [r3, #24]
    4102:	420a      	tst	r2, r1
    4104:	d0fc      	beq.n	4100 <trx_frame_read+0x54>
    4106:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4108:	0752      	lsls	r2, r2, #29
    410a:	d512      	bpl.n	4132 <trx_frame_read+0x86>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    410c:	8b5a      	ldrh	r2, [r3, #26]
    410e:	0752      	lsls	r2, r2, #29
    4110:	d501      	bpl.n	4116 <trx_frame_read+0x6a>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4112:	2204      	movs	r2, #4
    4114:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4116:	4a2d      	ldr	r2, [pc, #180]	; (41cc <trx_frame_read+0x120>)
    4118:	7992      	ldrb	r2, [r2, #6]
    411a:	2a01      	cmp	r2, #1
    411c:	d105      	bne.n	412a <trx_frame_read+0x7e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    411e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4120:	05db      	lsls	r3, r3, #23
    4122:	0ddb      	lsrs	r3, r3, #23
    4124:	4a2c      	ldr	r2, [pc, #176]	; (41d8 <trx_frame_read+0x12c>)
    4126:	8013      	strh	r3, [r2, #0]
    4128:	e003      	b.n	4132 <trx_frame_read+0x86>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    412a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    412c:	b2db      	uxtb	r3, r3
    412e:	4a2a      	ldr	r2, [pc, #168]	; (41d8 <trx_frame_read+0x12c>)
    4130:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	while (length--) {
    4132:	1e63      	subs	r3, r4, #1
    4134:	b2db      	uxtb	r3, r3
    4136:	2c00      	cmp	r4, #0
    4138:	d030      	beq.n	419c <trx_frame_read+0xf0>
    413a:	3301      	adds	r3, #1
    413c:	469c      	mov	ip, r3
    413e:	44ac      	add	ip, r5
    4140:	2720      	movs	r7, #32
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4142:	4e22      	ldr	r6, [pc, #136]	; (41cc <trx_frame_read+0x120>)
		while (!spi_is_ready_to_write(&master)) {
    4144:	2001      	movs	r0, #1
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4146:	2300      	movs	r3, #0
    4148:	469a      	mov	sl, r3
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    414a:	2402      	movs	r4, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    414c:	2104      	movs	r1, #4
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    414e:	46b1      	mov	r9, r6
    4150:	e022      	b.n	4198 <trx_frame_read+0xec>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4152:	7e1a      	ldrb	r2, [r3, #24]
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    4154:	4202      	tst	r2, r0
    4156:	d0fc      	beq.n	4152 <trx_frame_read+0xa6>
    4158:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    415a:	4202      	tst	r2, r0
    415c:	d001      	beq.n	4162 <trx_frame_read+0xb6>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    415e:	4652      	mov	r2, sl
    4160:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4162:	7e1a      	ldrb	r2, [r3, #24]
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    4164:	4222      	tst	r2, r4
    4166:	d0fc      	beq.n	4162 <trx_frame_read+0xb6>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4168:	7e1a      	ldrb	r2, [r3, #24]
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    416a:	420a      	tst	r2, r1
    416c:	d0fc      	beq.n	4168 <trx_frame_read+0xbc>
    416e:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4170:	420a      	tst	r2, r1
    4172:	d00d      	beq.n	4190 <trx_frame_read+0xe4>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4174:	8b5a      	ldrh	r2, [r3, #26]
    4176:	420a      	tst	r2, r1
    4178:	d000      	beq.n	417c <trx_frame_read+0xd0>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    417a:	8359      	strh	r1, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    417c:	464a      	mov	r2, r9
    417e:	7992      	ldrb	r2, [r2, #6]
    4180:	2a01      	cmp	r2, #1
    4182:	d103      	bne.n	418c <trx_frame_read+0xe0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4184:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    4186:	05ff      	lsls	r7, r7, #23
    4188:	0dff      	lsrs	r7, r7, #23
    418a:	e001      	b.n	4190 <trx_frame_read+0xe4>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    418c:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    418e:	b2ff      	uxtb	r7, r7
		}
		spi_read(&master, &temp);
		*data = temp;
    4190:	702f      	strb	r7, [r5, #0]
		data++;
    4192:	3501      	adds	r5, #1
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	while (length--) {
    4194:	45ac      	cmp	ip, r5
    4196:	d001      	beq.n	419c <trx_frame_read+0xf0>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4198:	6833      	ldr	r3, [r6, #0]
    419a:	e7da      	b.n	4152 <trx_frame_read+0xa6>
		*data = temp;
		data++;
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    419c:	2200      	movs	r2, #0
    419e:	490c      	ldr	r1, [pc, #48]	; (41d0 <trx_frame_read+0x124>)
    41a0:	480a      	ldr	r0, [pc, #40]	; (41cc <trx_frame_read+0x120>)
    41a2:	4b0c      	ldr	r3, [pc, #48]	; (41d4 <trx_frame_read+0x128>)
    41a4:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    41a6:	23ff      	movs	r3, #255	; 0xff
    41a8:	4642      	mov	r2, r8
    41aa:	4213      	tst	r3, r2
    41ac:	d005      	beq.n	41ba <trx_frame_read+0x10e>
		cpu_irq_enable();
    41ae:	2201      	movs	r2, #1
    41b0:	4b05      	ldr	r3, [pc, #20]	; (41c8 <trx_frame_read+0x11c>)
    41b2:	701a      	strb	r2, [r3, #0]
    41b4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    41b8:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    41ba:	b002      	add	sp, #8
    41bc:	bc1c      	pop	{r2, r3, r4}
    41be:	4690      	mov	r8, r2
    41c0:	4699      	mov	r9, r3
    41c2:	46a2      	mov	sl, r4
    41c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    41c6:	46c0      	nop			; (mov r8, r8)
    41c8:	20000008 	.word	0x20000008
    41cc:	2000097c 	.word	0x2000097c
    41d0:	20000940 	.word	0x20000940
    41d4:	00000c3d 	.word	0x00000c3d
    41d8:	20000938 	.word	0x20000938

000041dc <trx_frame_write>:

void trx_frame_write(uint8_t *data, uint8_t length)
{
    41dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    41de:	4647      	mov	r7, r8
    41e0:	b480      	push	{r7}
    41e2:	b082      	sub	sp, #8
    41e4:	0004      	movs	r4, r0
    41e6:	000d      	movs	r5, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    41e8:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    41ec:	425a      	negs	r2, r3
    41ee:	4153      	adcs	r3, r2
    41f0:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    41f2:	b672      	cpsid	i
    41f4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    41f8:	2200      	movs	r2, #0
    41fa:	4b3a      	ldr	r3, [pc, #232]	; (42e4 <trx_frame_write+0x108>)
    41fc:	701a      	strb	r2, [r3, #0]
	return flags;
    41fe:	9b01      	ldr	r3, [sp, #4]
    4200:	4698      	mov	r8, r3
	**/
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21 || SAML21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    4202:	4f39      	ldr	r7, [pc, #228]	; (42e8 <trx_frame_write+0x10c>)
    4204:	3201      	adds	r2, #1
    4206:	4939      	ldr	r1, [pc, #228]	; (42ec <trx_frame_write+0x110>)
    4208:	0038      	movs	r0, r7
    420a:	4b39      	ldr	r3, [pc, #228]	; (42f0 <trx_frame_write+0x114>)
    420c:	4798      	blx	r3
    420e:	683b      	ldr	r3, [r7, #0]

	temp = TRX_CMD_FW;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    4210:	2101      	movs	r1, #1

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4212:	7e1a      	ldrb	r2, [r3, #24]
    4214:	420a      	tst	r2, r1
    4216:	d0fc      	beq.n	4212 <trx_frame_write+0x36>
    4218:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    421a:	07d2      	lsls	r2, r2, #31
    421c:	d501      	bpl.n	4222 <trx_frame_write+0x46>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    421e:	2260      	movs	r2, #96	; 0x60
    4220:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    4222:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4224:	7e1a      	ldrb	r2, [r3, #24]
    4226:	420a      	tst	r2, r1
    4228:	d0fc      	beq.n	4224 <trx_frame_write+0x48>
	} 
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    422a:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    422c:	7e1a      	ldrb	r2, [r3, #24]
    422e:	420a      	tst	r2, r1
    4230:	d0fc      	beq.n	422c <trx_frame_write+0x50>
    4232:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4234:	0752      	lsls	r2, r2, #29
    4236:	d512      	bpl.n	425e <trx_frame_write+0x82>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4238:	8b5a      	ldrh	r2, [r3, #26]
    423a:	0752      	lsls	r2, r2, #29
    423c:	d501      	bpl.n	4242 <trx_frame_write+0x66>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    423e:	2204      	movs	r2, #4
    4240:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4242:	4a29      	ldr	r2, [pc, #164]	; (42e8 <trx_frame_write+0x10c>)
    4244:	7992      	ldrb	r2, [r2, #6]
    4246:	2a01      	cmp	r2, #1
    4248:	d105      	bne.n	4256 <trx_frame_write+0x7a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    424a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    424c:	05d2      	lsls	r2, r2, #23
    424e:	0dd2      	lsrs	r2, r2, #23
    4250:	4928      	ldr	r1, [pc, #160]	; (42f4 <trx_frame_write+0x118>)
    4252:	800a      	strh	r2, [r1, #0]
    4254:	e003      	b.n	425e <trx_frame_write+0x82>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4256:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4258:	b2d2      	uxtb	r2, r2
    425a:	4926      	ldr	r1, [pc, #152]	; (42f4 <trx_frame_write+0x118>)
    425c:	800a      	strh	r2, [r1, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    425e:	4a22      	ldr	r2, [pc, #136]	; (42e8 <trx_frame_write+0x10c>)
    4260:	7992      	ldrb	r2, [r2, #6]
    4262:	4694      	mov	ip, r2
    4264:	0021      	movs	r1, r4
	}
	spi_read(&master, &dummy_read);
	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    4266:	2701      	movs	r7, #1
		}
		spi_write(&master, *data++);
		while (!spi_is_write_complete(&master)) {
    4268:	2002      	movs	r0, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    426a:	2404      	movs	r4, #4
    426c:	e022      	b.n	42b4 <trx_frame_write+0xd8>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    426e:	7e1a      	ldrb	r2, [r3, #24]
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);
	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    4270:	423a      	tst	r2, r7
    4272:	d0fc      	beq.n	426e <trx_frame_write+0x92>
    4274:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4276:	423a      	tst	r2, r7
    4278:	d001      	beq.n	427e <trx_frame_write+0xa2>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    427a:	780a      	ldrb	r2, [r1, #0]
    427c:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    427e:	7e1a      	ldrb	r2, [r3, #24]
		}
		spi_write(&master, *data++);
		while (!spi_is_write_complete(&master)) {
    4280:	4202      	tst	r2, r0
    4282:	d0fc      	beq.n	427e <trx_frame_write+0xa2>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4284:	7e1a      	ldrb	r2, [r3, #24]
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    4286:	4222      	tst	r2, r4
    4288:	d0fc      	beq.n	4284 <trx_frame_write+0xa8>
    428a:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    428c:	4222      	tst	r2, r4
    428e:	d010      	beq.n	42b2 <trx_frame_write+0xd6>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4290:	8b5a      	ldrh	r2, [r3, #26]
    4292:	4222      	tst	r2, r4
    4294:	d000      	beq.n	4298 <trx_frame_write+0xbc>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4296:	835c      	strh	r4, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4298:	4662      	mov	r2, ip
    429a:	2a01      	cmp	r2, #1
    429c:	d105      	bne.n	42aa <trx_frame_write+0xce>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    429e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    42a0:	05d2      	lsls	r2, r2, #23
    42a2:	0dd2      	lsrs	r2, r2, #23
    42a4:	4e13      	ldr	r6, [pc, #76]	; (42f4 <trx_frame_write+0x118>)
    42a6:	8032      	strh	r2, [r6, #0]
    42a8:	e003      	b.n	42b2 <trx_frame_write+0xd6>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    42aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    42ac:	b2d2      	uxtb	r2, r2
    42ae:	4e11      	ldr	r6, [pc, #68]	; (42f4 <trx_frame_write+0x118>)
    42b0:	8032      	strh	r2, [r6, #0]
    42b2:	3101      	adds	r1, #1
	} 
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);
	while (length--) {
    42b4:	3d01      	subs	r5, #1
    42b6:	b2ed      	uxtb	r5, r5
    42b8:	2dff      	cmp	r5, #255	; 0xff
    42ba:	d1d8      	bne.n	426e <trx_frame_write+0x92>
		}
		spi_read(&master, &dummy_read);
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    42bc:	2200      	movs	r2, #0
    42be:	490b      	ldr	r1, [pc, #44]	; (42ec <trx_frame_write+0x110>)
    42c0:	4809      	ldr	r0, [pc, #36]	; (42e8 <trx_frame_write+0x10c>)
    42c2:	4b0b      	ldr	r3, [pc, #44]	; (42f0 <trx_frame_write+0x114>)
    42c4:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    42c6:	23ff      	movs	r3, #255	; 0xff
    42c8:	4642      	mov	r2, r8
    42ca:	4213      	tst	r3, r2
    42cc:	d005      	beq.n	42da <trx_frame_write+0xfe>
		cpu_irq_enable();
    42ce:	2201      	movs	r2, #1
    42d0:	4b04      	ldr	r3, [pc, #16]	; (42e4 <trx_frame_write+0x108>)
    42d2:	701a      	strb	r2, [r3, #0]
    42d4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    42d8:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    42da:	b002      	add	sp, #8
    42dc:	bc04      	pop	{r2}
    42de:	4690      	mov	r8, r2
    42e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    42e2:	46c0      	nop			; (mov r8, r8)
    42e4:	20000008 	.word	0x20000008
    42e8:	2000097c 	.word	0x2000097c
    42ec:	20000940 	.word	0x20000940
    42f0:	00000c3d 	.word	0x00000c3d
    42f4:	20000938 	.word	0x20000938

000042f8 <trx_sram_write>:
 * @param addr Start address in the SRAM for the write operation
 * @param data Pointer to the data to be written into SRAM
 * @param length Number of bytes to be written into SRAM
 */
void trx_sram_write(uint8_t addr, uint8_t *data, uint8_t length)
{
    42f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    42fa:	4647      	mov	r7, r8
    42fc:	b480      	push	{r7}
    42fe:	b082      	sub	sp, #8
    4300:	0006      	movs	r6, r0
    4302:	000d      	movs	r5, r1
    4304:	0014      	movs	r4, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4306:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    430a:	425a      	negs	r2, r3
    430c:	4153      	adcs	r3, r2
    430e:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    4310:	b672      	cpsid	i
    4312:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    4316:	2200      	movs	r2, #0
    4318:	4b4c      	ldr	r3, [pc, #304]	; (444c <trx_sram_write+0x154>)
    431a:	701a      	strb	r2, [r3, #0]
	return flags;
    431c:	9b01      	ldr	r3, [sp, #4]
    431e:	4698      	mov	r8, r3
	**/
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21 || SAML21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    4320:	4f4b      	ldr	r7, [pc, #300]	; (4450 <trx_sram_write+0x158>)
    4322:	3201      	adds	r2, #1
    4324:	494b      	ldr	r1, [pc, #300]	; (4454 <trx_sram_write+0x15c>)
    4326:	0038      	movs	r0, r7
    4328:	4b4b      	ldr	r3, [pc, #300]	; (4458 <trx_sram_write+0x160>)
    432a:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    432c:	683b      	ldr	r3, [r7, #0]

	/* Send the command byte */
	temp = TRX_CMD_SW;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    432e:	2101      	movs	r1, #1

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4330:	7e1a      	ldrb	r2, [r3, #24]
    4332:	420a      	tst	r2, r1
    4334:	d0fc      	beq.n	4330 <trx_sram_write+0x38>
    4336:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4338:	07d2      	lsls	r2, r2, #31
    433a:	d501      	bpl.n	4340 <trx_sram_write+0x48>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    433c:	2240      	movs	r2, #64	; 0x40
    433e:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    4340:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4342:	7e1a      	ldrb	r2, [r3, #24]
    4344:	420a      	tst	r2, r1
    4346:	d0fc      	beq.n	4342 <trx_sram_write+0x4a>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4348:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    434a:	7e1a      	ldrb	r2, [r3, #24]
    434c:	420a      	tst	r2, r1
    434e:	d0fc      	beq.n	434a <trx_sram_write+0x52>
    4350:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4352:	0752      	lsls	r2, r2, #29
    4354:	d512      	bpl.n	437c <trx_sram_write+0x84>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4356:	8b5a      	ldrh	r2, [r3, #26]
    4358:	0752      	lsls	r2, r2, #29
    435a:	d501      	bpl.n	4360 <trx_sram_write+0x68>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    435c:	2204      	movs	r2, #4
    435e:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4360:	4a3b      	ldr	r2, [pc, #236]	; (4450 <trx_sram_write+0x158>)
    4362:	7992      	ldrb	r2, [r2, #6]
    4364:	2a01      	cmp	r2, #1
    4366:	d105      	bne.n	4374 <trx_sram_write+0x7c>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4368:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    436a:	05d2      	lsls	r2, r2, #23
    436c:	0dd2      	lsrs	r2, r2, #23
    436e:	493b      	ldr	r1, [pc, #236]	; (445c <trx_sram_write+0x164>)
    4370:	800a      	strh	r2, [r1, #0]
    4372:	e003      	b.n	437c <trx_sram_write+0x84>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4374:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4376:	b2d2      	uxtb	r2, r2
    4378:	4938      	ldr	r1, [pc, #224]	; (445c <trx_sram_write+0x164>)
    437a:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Send the address from which the write operation should start */
	while (!spi_is_ready_to_write(&master)) {
    437c:	2101      	movs	r1, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    437e:	7e1a      	ldrb	r2, [r3, #24]
    4380:	420a      	tst	r2, r1
    4382:	d0fc      	beq.n	437e <trx_sram_write+0x86>
    4384:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4386:	07d2      	lsls	r2, r2, #31
    4388:	d500      	bpl.n	438c <trx_sram_write+0x94>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    438a:	629e      	str	r6, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    438c:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    438e:	7e1a      	ldrb	r2, [r3, #24]
    4390:	420a      	tst	r2, r1
    4392:	d0fc      	beq.n	438e <trx_sram_write+0x96>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4394:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4396:	7e1a      	ldrb	r2, [r3, #24]
    4398:	420a      	tst	r2, r1
    439a:	d0fc      	beq.n	4396 <trx_sram_write+0x9e>
    439c:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    439e:	0752      	lsls	r2, r2, #29
    43a0:	d512      	bpl.n	43c8 <trx_sram_write+0xd0>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    43a2:	8b5a      	ldrh	r2, [r3, #26]
    43a4:	0752      	lsls	r2, r2, #29
    43a6:	d501      	bpl.n	43ac <trx_sram_write+0xb4>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    43a8:	2204      	movs	r2, #4
    43aa:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    43ac:	4a28      	ldr	r2, [pc, #160]	; (4450 <trx_sram_write+0x158>)
    43ae:	7992      	ldrb	r2, [r2, #6]
    43b0:	2a01      	cmp	r2, #1
    43b2:	d105      	bne.n	43c0 <trx_sram_write+0xc8>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    43b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    43b6:	05d2      	lsls	r2, r2, #23
    43b8:	0dd2      	lsrs	r2, r2, #23
    43ba:	4928      	ldr	r1, [pc, #160]	; (445c <trx_sram_write+0x164>)
    43bc:	800a      	strh	r2, [r1, #0]
    43be:	e003      	b.n	43c8 <trx_sram_write+0xd0>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    43c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    43c2:	b2d2      	uxtb	r2, r2
    43c4:	4925      	ldr	r1, [pc, #148]	; (445c <trx_sram_write+0x164>)
    43c6:	800a      	strh	r2, [r1, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    43c8:	4a21      	ldr	r2, [pc, #132]	; (4450 <trx_sram_write+0x158>)
    43ca:	7992      	ldrb	r2, [r2, #6]
    43cc:	4694      	mov	ip, r2
    43ce:	0028      	movs	r0, r5
	}
	spi_read(&master, &dummy_read);

	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    43d0:	2601      	movs	r6, #1
		}
		spi_write(&master, *data++);
		while (!spi_is_write_complete(&master)) {
    43d2:	2502      	movs	r5, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    43d4:	2104      	movs	r1, #4
    43d6:	e022      	b.n	441e <trx_sram_write+0x126>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    43d8:	7e1a      	ldrb	r2, [r3, #24]
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    43da:	4232      	tst	r2, r6
    43dc:	d0fc      	beq.n	43d8 <trx_sram_write+0xe0>
    43de:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    43e0:	4232      	tst	r2, r6
    43e2:	d001      	beq.n	43e8 <trx_sram_write+0xf0>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    43e4:	7802      	ldrb	r2, [r0, #0]
    43e6:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    43e8:	7e1a      	ldrb	r2, [r3, #24]
		}
		spi_write(&master, *data++);
		while (!spi_is_write_complete(&master)) {
    43ea:	422a      	tst	r2, r5
    43ec:	d0fc      	beq.n	43e8 <trx_sram_write+0xf0>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    43ee:	7e1a      	ldrb	r2, [r3, #24]
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    43f0:	420a      	tst	r2, r1
    43f2:	d0fc      	beq.n	43ee <trx_sram_write+0xf6>
    43f4:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    43f6:	420a      	tst	r2, r1
    43f8:	d010      	beq.n	441c <trx_sram_write+0x124>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    43fa:	8b5a      	ldrh	r2, [r3, #26]
    43fc:	420a      	tst	r2, r1
    43fe:	d000      	beq.n	4402 <trx_sram_write+0x10a>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4400:	8359      	strh	r1, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4402:	4662      	mov	r2, ip
    4404:	2a01      	cmp	r2, #1
    4406:	d105      	bne.n	4414 <trx_sram_write+0x11c>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4408:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    440a:	05d2      	lsls	r2, r2, #23
    440c:	0dd2      	lsrs	r2, r2, #23
    440e:	4f13      	ldr	r7, [pc, #76]	; (445c <trx_sram_write+0x164>)
    4410:	803a      	strh	r2, [r7, #0]
    4412:	e003      	b.n	441c <trx_sram_write+0x124>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4414:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4416:	b2d2      	uxtb	r2, r2
    4418:	4f10      	ldr	r7, [pc, #64]	; (445c <trx_sram_write+0x164>)
    441a:	803a      	strh	r2, [r7, #0]
    441c:	3001      	adds	r0, #1
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	while (length--) {
    441e:	3c01      	subs	r4, #1
    4420:	b2e4      	uxtb	r4, r4
    4422:	2cff      	cmp	r4, #255	; 0xff
    4424:	d1d8      	bne.n	43d8 <trx_sram_write+0xe0>
		}
		spi_read(&master, &dummy_read);
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    4426:	2200      	movs	r2, #0
    4428:	490a      	ldr	r1, [pc, #40]	; (4454 <trx_sram_write+0x15c>)
    442a:	4809      	ldr	r0, [pc, #36]	; (4450 <trx_sram_write+0x158>)
    442c:	4b0a      	ldr	r3, [pc, #40]	; (4458 <trx_sram_write+0x160>)
    442e:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    4430:	23ff      	movs	r3, #255	; 0xff
    4432:	4642      	mov	r2, r8
    4434:	4213      	tst	r3, r2
    4436:	d005      	beq.n	4444 <trx_sram_write+0x14c>
		cpu_irq_enable();
    4438:	2201      	movs	r2, #1
    443a:	4b04      	ldr	r3, [pc, #16]	; (444c <trx_sram_write+0x154>)
    443c:	701a      	strb	r2, [r3, #0]
    443e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    4442:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    4444:	b002      	add	sp, #8
    4446:	bc04      	pop	{r2}
    4448:	4690      	mov	r8, r2
    444a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    444c:	20000008 	.word	0x20000008
    4450:	2000097c 	.word	0x2000097c
    4454:	20000940 	.word	0x20000940
    4458:	00000c3d 	.word	0x00000c3d
    445c:	20000938 	.word	0x20000938

00004460 <trx_sram_read>:
 * @param[in] addr Start address in SRAM for read operation
 * @param[out] data Pointer to the location where data stored
 * @param[in] length Number of bytes to be read from SRAM
 */
void trx_sram_read(uint8_t addr, uint8_t *data, uint8_t length)
{
    4460:	b5f0      	push	{r4, r5, r6, r7, lr}
    4462:	4657      	mov	r7, sl
    4464:	464e      	mov	r6, r9
    4466:	4645      	mov	r5, r8
    4468:	b4e0      	push	{r5, r6, r7}
    446a:	b082      	sub	sp, #8
    446c:	0004      	movs	r4, r0
    446e:	000d      	movs	r5, r1
    4470:	0017      	movs	r7, r2
	delay_us(1); /* wap_rf4ce */
    4472:	2001      	movs	r0, #1
    4474:	4b56      	ldr	r3, [pc, #344]	; (45d0 <trx_sram_read+0x170>)
    4476:	4798      	blx	r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4478:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    447c:	425a      	negs	r2, r3
    447e:	4153      	adcs	r3, r2
    4480:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    4482:	b672      	cpsid	i
    4484:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    4488:	2200      	movs	r2, #0
    448a:	4b52      	ldr	r3, [pc, #328]	; (45d4 <trx_sram_read+0x174>)
    448c:	701a      	strb	r2, [r3, #0]
	return flags;
    448e:	9b01      	ldr	r3, [sp, #4]
    4490:	4698      	mov	r8, r3
	**/
	ENTER_TRX_CRITICAL_REGION();
#if SAMD || SAMR21 || SAML21
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    4492:	4e51      	ldr	r6, [pc, #324]	; (45d8 <trx_sram_read+0x178>)
    4494:	3201      	adds	r2, #1
    4496:	4951      	ldr	r1, [pc, #324]	; (45dc <trx_sram_read+0x17c>)
    4498:	0030      	movs	r0, r6
    449a:	4b51      	ldr	r3, [pc, #324]	; (45e0 <trx_sram_read+0x180>)
    449c:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    449e:	6833      	ldr	r3, [r6, #0]

	temp = TRX_CMD_SR;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    44a0:	2101      	movs	r1, #1

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    44a2:	7e1a      	ldrb	r2, [r3, #24]
    44a4:	420a      	tst	r2, r1
    44a6:	d0fc      	beq.n	44a2 <trx_sram_read+0x42>
    44a8:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    44aa:	07d2      	lsls	r2, r2, #31
    44ac:	d501      	bpl.n	44b2 <trx_sram_read+0x52>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    44ae:	2200      	movs	r2, #0
    44b0:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    44b2:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    44b4:	7e1a      	ldrb	r2, [r3, #24]
    44b6:	420a      	tst	r2, r1
    44b8:	d0fc      	beq.n	44b4 <trx_sram_read+0x54>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    44ba:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    44bc:	7e1a      	ldrb	r2, [r3, #24]
    44be:	420a      	tst	r2, r1
    44c0:	d0fc      	beq.n	44bc <trx_sram_read+0x5c>
    44c2:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    44c4:	0752      	lsls	r2, r2, #29
    44c6:	d512      	bpl.n	44ee <trx_sram_read+0x8e>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    44c8:	8b5a      	ldrh	r2, [r3, #26]
    44ca:	0752      	lsls	r2, r2, #29
    44cc:	d501      	bpl.n	44d2 <trx_sram_read+0x72>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    44ce:	2204      	movs	r2, #4
    44d0:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    44d2:	4a41      	ldr	r2, [pc, #260]	; (45d8 <trx_sram_read+0x178>)
    44d4:	7992      	ldrb	r2, [r2, #6]
    44d6:	2a01      	cmp	r2, #1
    44d8:	d105      	bne.n	44e6 <trx_sram_read+0x86>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    44da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    44dc:	05d2      	lsls	r2, r2, #23
    44de:	0dd2      	lsrs	r2, r2, #23
    44e0:	4940      	ldr	r1, [pc, #256]	; (45e4 <trx_sram_read+0x184>)
    44e2:	800a      	strh	r2, [r1, #0]
    44e4:	e003      	b.n	44ee <trx_sram_read+0x8e>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    44e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    44e8:	b2d2      	uxtb	r2, r2
    44ea:	493e      	ldr	r1, [pc, #248]	; (45e4 <trx_sram_read+0x184>)
    44ec:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Send the address from which the read operation should start */
	while (!spi_is_ready_to_write(&master)) {
    44ee:	2101      	movs	r1, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    44f0:	7e1a      	ldrb	r2, [r3, #24]
    44f2:	420a      	tst	r2, r1
    44f4:	d0fc      	beq.n	44f0 <trx_sram_read+0x90>
    44f6:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    44f8:	07d2      	lsls	r2, r2, #31
    44fa:	d500      	bpl.n	44fe <trx_sram_read+0x9e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    44fc:	629c      	str	r4, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    44fe:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4500:	7e1a      	ldrb	r2, [r3, #24]
    4502:	420a      	tst	r2, r1
    4504:	d0fc      	beq.n	4500 <trx_sram_read+0xa0>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4506:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4508:	7e1a      	ldrb	r2, [r3, #24]
    450a:	420a      	tst	r2, r1
    450c:	d0fc      	beq.n	4508 <trx_sram_read+0xa8>
    450e:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4510:	0752      	lsls	r2, r2, #29
    4512:	d512      	bpl.n	453a <trx_sram_read+0xda>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4514:	8b5a      	ldrh	r2, [r3, #26]
    4516:	0752      	lsls	r2, r2, #29
    4518:	d501      	bpl.n	451e <trx_sram_read+0xbe>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    451a:	2204      	movs	r2, #4
    451c:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    451e:	4a2e      	ldr	r2, [pc, #184]	; (45d8 <trx_sram_read+0x178>)
    4520:	7992      	ldrb	r2, [r2, #6]
    4522:	2a01      	cmp	r2, #1
    4524:	d105      	bne.n	4532 <trx_sram_read+0xd2>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4528:	05db      	lsls	r3, r3, #23
    452a:	0ddb      	lsrs	r3, r3, #23
    452c:	4a2d      	ldr	r2, [pc, #180]	; (45e4 <trx_sram_read+0x184>)
    452e:	8013      	strh	r3, [r2, #0]
    4530:	e003      	b.n	453a <trx_sram_read+0xda>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4534:	b2db      	uxtb	r3, r3
    4536:	4a2b      	ldr	r2, [pc, #172]	; (45e4 <trx_sram_read+0x184>)
    4538:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Upload the received byte in the user provided location */
	while (length--) {
    453a:	1e7b      	subs	r3, r7, #1
    453c:	b2db      	uxtb	r3, r3
    453e:	2f00      	cmp	r7, #0
    4540:	d030      	beq.n	45a4 <trx_sram_read+0x144>
    4542:	3301      	adds	r3, #1
    4544:	469c      	mov	ip, r3
    4546:	44ac      	add	ip, r5
    4548:	2700      	movs	r7, #0
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    454a:	4e23      	ldr	r6, [pc, #140]	; (45d8 <trx_sram_read+0x178>)
		while (!spi_is_ready_to_write(&master)) {
    454c:	2001      	movs	r0, #1
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    454e:	2300      	movs	r3, #0
    4550:	469a      	mov	sl, r3
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    4552:	2402      	movs	r4, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    4554:	2104      	movs	r1, #4
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4556:	46b1      	mov	r9, r6
    4558:	e022      	b.n	45a0 <trx_sram_read+0x140>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    455a:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	/* Upload the received byte in the user provided location */
	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    455c:	4202      	tst	r2, r0
    455e:	d0fc      	beq.n	455a <trx_sram_read+0xfa>
    4560:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4562:	4202      	tst	r2, r0
    4564:	d001      	beq.n	456a <trx_sram_read+0x10a>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4566:	4652      	mov	r2, sl
    4568:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    456a:	7e1a      	ldrb	r2, [r3, #24]
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    456c:	4222      	tst	r2, r4
    456e:	d0fc      	beq.n	456a <trx_sram_read+0x10a>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4570:	7e1a      	ldrb	r2, [r3, #24]
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    4572:	420a      	tst	r2, r1
    4574:	d0fc      	beq.n	4570 <trx_sram_read+0x110>
    4576:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4578:	420a      	tst	r2, r1
    457a:	d00d      	beq.n	4598 <trx_sram_read+0x138>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    457c:	8b5a      	ldrh	r2, [r3, #26]
    457e:	420a      	tst	r2, r1
    4580:	d000      	beq.n	4584 <trx_sram_read+0x124>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4582:	8359      	strh	r1, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4584:	464a      	mov	r2, r9
    4586:	7992      	ldrb	r2, [r2, #6]
    4588:	2a01      	cmp	r2, #1
    458a:	d103      	bne.n	4594 <trx_sram_read+0x134>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    458c:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    458e:	05ff      	lsls	r7, r7, #23
    4590:	0dff      	lsrs	r7, r7, #23
    4592:	e001      	b.n	4598 <trx_sram_read+0x138>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4594:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    4596:	b2ff      	uxtb	r7, r7
		}
		spi_read(&master, &temp);
		*data = temp;
    4598:	702f      	strb	r7, [r5, #0]
		data++;
    459a:	3501      	adds	r5, #1
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	/* Upload the received byte in the user provided location */
	while (length--) {
    459c:	45ac      	cmp	ip, r5
    459e:	d001      	beq.n	45a4 <trx_sram_read+0x144>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    45a0:	6833      	ldr	r3, [r6, #0]
    45a2:	e7da      	b.n	455a <trx_sram_read+0xfa>
		*data = temp;
		data++;
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    45a4:	2200      	movs	r2, #0
    45a6:	490d      	ldr	r1, [pc, #52]	; (45dc <trx_sram_read+0x17c>)
    45a8:	480b      	ldr	r0, [pc, #44]	; (45d8 <trx_sram_read+0x178>)
    45aa:	4b0d      	ldr	r3, [pc, #52]	; (45e0 <trx_sram_read+0x180>)
    45ac:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    45ae:	23ff      	movs	r3, #255	; 0xff
    45b0:	4642      	mov	r2, r8
    45b2:	4213      	tst	r3, r2
    45b4:	d005      	beq.n	45c2 <trx_sram_read+0x162>
		cpu_irq_enable();
    45b6:	2201      	movs	r2, #1
    45b8:	4b06      	ldr	r3, [pc, #24]	; (45d4 <trx_sram_read+0x174>)
    45ba:	701a      	strb	r2, [r3, #0]
    45bc:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    45c0:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    45c2:	b002      	add	sp, #8
    45c4:	bc1c      	pop	{r2, r3, r4}
    45c6:	4690      	mov	r8, r2
    45c8:	4699      	mov	r9, r3
    45ca:	46a2      	mov	sl, r4
    45cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    45ce:	46c0      	nop			; (mov r8, r8)
    45d0:	00000155 	.word	0x00000155
    45d4:	20000008 	.word	0x20000008
    45d8:	2000097c 	.word	0x2000097c
    45dc:	20000940 	.word	0x20000940
    45e0:	00000c3d 	.word	0x00000c3d
    45e4:	20000938 	.word	0x20000938

000045e8 <trx_aes_wrrd>:
 * @param addr Start address in the SRAM for the write operation
 * @param idata Pointer to the data written/read into/from SRAM
 * @param length Number of bytes written/read into/from SRAM
 */
void trx_aes_wrrd(uint8_t addr, uint8_t *idata, uint8_t length)
{
    45e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    45ea:	4657      	mov	r7, sl
    45ec:	464e      	mov	r6, r9
    45ee:	4645      	mov	r5, r8
    45f0:	b4e0      	push	{r5, r6, r7}
    45f2:	0006      	movs	r6, r0
    45f4:	468a      	mov	sl, r1
    45f6:	0014      	movs	r4, r2
#if SAMD || SAMR21 || SAML21
	uint16_t odata_var = 0;
#endif
	uint8_t temp;

	delay_us(1); /* wap_rf4ce */
    45f8:	2001      	movs	r0, #1
    45fa:	4b76      	ldr	r3, [pc, #472]	; (47d4 <trx_aes_wrrd+0x1ec>)
    45fc:	4798      	blx	r3

	ENTER_TRX_REGION();
    45fe:	2100      	movs	r1, #0
    4600:	2000      	movs	r0, #0
    4602:	4b75      	ldr	r3, [pc, #468]	; (47d8 <trx_aes_wrrd+0x1f0>)
    4604:	4798      	blx	r3
		/* wait until SPI gets available */
	}
#endif
#if SAMD || SAMR21 || SAML21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    4606:	4f75      	ldr	r7, [pc, #468]	; (47dc <trx_aes_wrrd+0x1f4>)
    4608:	2201      	movs	r2, #1
    460a:	4975      	ldr	r1, [pc, #468]	; (47e0 <trx_aes_wrrd+0x1f8>)
    460c:	0038      	movs	r0, r7
    460e:	4b75      	ldr	r3, [pc, #468]	; (47e4 <trx_aes_wrrd+0x1fc>)
    4610:	4798      	blx	r3
    4612:	683b      	ldr	r3, [r7, #0]

	/* Send the command byte */
	temp = TRX_CMD_SW;

	while (!spi_is_ready_to_write(&master)) {
    4614:	2101      	movs	r1, #1

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4616:	7e1a      	ldrb	r2, [r3, #24]
    4618:	420a      	tst	r2, r1
    461a:	d0fc      	beq.n	4616 <trx_aes_wrrd+0x2e>
    461c:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    461e:	07d2      	lsls	r2, r2, #31
    4620:	d501      	bpl.n	4626 <trx_aes_wrrd+0x3e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4622:	2240      	movs	r2, #64	; 0x40
    4624:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    4626:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4628:	7e1a      	ldrb	r2, [r3, #24]
    462a:	420a      	tst	r2, r1
    462c:	d0fc      	beq.n	4628 <trx_aes_wrrd+0x40>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    462e:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4630:	7e1a      	ldrb	r2, [r3, #24]
    4632:	420a      	tst	r2, r1
    4634:	d0fc      	beq.n	4630 <trx_aes_wrrd+0x48>
    4636:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4638:	0752      	lsls	r2, r2, #29
    463a:	d512      	bpl.n	4662 <trx_aes_wrrd+0x7a>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    463c:	8b5a      	ldrh	r2, [r3, #26]
    463e:	0752      	lsls	r2, r2, #29
    4640:	d501      	bpl.n	4646 <trx_aes_wrrd+0x5e>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4642:	2204      	movs	r2, #4
    4644:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4646:	4a65      	ldr	r2, [pc, #404]	; (47dc <trx_aes_wrrd+0x1f4>)
    4648:	7992      	ldrb	r2, [r2, #6]
    464a:	2a01      	cmp	r2, #1
    464c:	d105      	bne.n	465a <trx_aes_wrrd+0x72>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    464e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4650:	05d2      	lsls	r2, r2, #23
    4652:	0dd2      	lsrs	r2, r2, #23
    4654:	4964      	ldr	r1, [pc, #400]	; (47e8 <trx_aes_wrrd+0x200>)
    4656:	800a      	strh	r2, [r1, #0]
    4658:	e003      	b.n	4662 <trx_aes_wrrd+0x7a>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    465a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    465c:	b2d2      	uxtb	r2, r2
    465e:	4962      	ldr	r1, [pc, #392]	; (47e8 <trx_aes_wrrd+0x200>)
    4660:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* write SRAM start address */
	while (!spi_is_ready_to_write(&master)) {
    4662:	2101      	movs	r1, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4664:	7e1a      	ldrb	r2, [r3, #24]
    4666:	420a      	tst	r2, r1
    4668:	d0fc      	beq.n	4664 <trx_aes_wrrd+0x7c>
    466a:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    466c:	07d2      	lsls	r2, r2, #31
    466e:	d500      	bpl.n	4672 <trx_aes_wrrd+0x8a>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4670:	629e      	str	r6, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    4672:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4674:	7e1a      	ldrb	r2, [r3, #24]
    4676:	420a      	tst	r2, r1
    4678:	d0fc      	beq.n	4674 <trx_aes_wrrd+0x8c>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    467a:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    467c:	7e1a      	ldrb	r2, [r3, #24]
    467e:	420a      	tst	r2, r1
    4680:	d0fc      	beq.n	467c <trx_aes_wrrd+0x94>
    4682:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4684:	0752      	lsls	r2, r2, #29
    4686:	d512      	bpl.n	46ae <trx_aes_wrrd+0xc6>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4688:	8b5a      	ldrh	r2, [r3, #26]
    468a:	0752      	lsls	r2, r2, #29
    468c:	d501      	bpl.n	4692 <trx_aes_wrrd+0xaa>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    468e:	2204      	movs	r2, #4
    4690:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4692:	4a52      	ldr	r2, [pc, #328]	; (47dc <trx_aes_wrrd+0x1f4>)
    4694:	7992      	ldrb	r2, [r2, #6]
    4696:	2a01      	cmp	r2, #1
    4698:	d105      	bne.n	46a6 <trx_aes_wrrd+0xbe>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    469a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    469c:	05d2      	lsls	r2, r2, #23
    469e:	0dd2      	lsrs	r2, r2, #23
    46a0:	4951      	ldr	r1, [pc, #324]	; (47e8 <trx_aes_wrrd+0x200>)
    46a2:	800a      	strh	r2, [r1, #0]
    46a4:	e003      	b.n	46ae <trx_aes_wrrd+0xc6>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    46a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    46a8:	b2d2      	uxtb	r2, r2
    46aa:	494f      	ldr	r1, [pc, #316]	; (47e8 <trx_aes_wrrd+0x200>)
    46ac:	800a      	strh	r2, [r1, #0]

	/* now transfer data */
	odata = idata;

	/* write data byte 0 - the obtained value in SPDR is meaningless */
	while (!spi_is_ready_to_write(&master)) {
    46ae:	2101      	movs	r1, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    46b0:	7e1a      	ldrb	r2, [r3, #24]
    46b2:	420a      	tst	r2, r1
    46b4:	d0fc      	beq.n	46b0 <trx_aes_wrrd+0xc8>
    46b6:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    46b8:	07d2      	lsls	r2, r2, #31
    46ba:	d502      	bpl.n	46c2 <trx_aes_wrrd+0xda>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    46bc:	4652      	mov	r2, sl
    46be:	7812      	ldrb	r2, [r2, #0]
    46c0:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, *idata++);
	while (!spi_is_write_complete(&master)) {
    46c2:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    46c4:	7e1a      	ldrb	r2, [r3, #24]
    46c6:	420a      	tst	r2, r1
    46c8:	d0fc      	beq.n	46c4 <trx_aes_wrrd+0xdc>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    46ca:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    46cc:	7e1a      	ldrb	r2, [r3, #24]
    46ce:	420a      	tst	r2, r1
    46d0:	d0fc      	beq.n	46cc <trx_aes_wrrd+0xe4>
    46d2:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    46d4:	0752      	lsls	r2, r2, #29
    46d6:	d512      	bpl.n	46fe <trx_aes_wrrd+0x116>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    46d8:	8b5a      	ldrh	r2, [r3, #26]
    46da:	0752      	lsls	r2, r2, #29
    46dc:	d501      	bpl.n	46e2 <trx_aes_wrrd+0xfa>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    46de:	2204      	movs	r2, #4
    46e0:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    46e2:	4a3e      	ldr	r2, [pc, #248]	; (47dc <trx_aes_wrrd+0x1f4>)
    46e4:	7992      	ldrb	r2, [r2, #6]
    46e6:	2a01      	cmp	r2, #1
    46e8:	d105      	bne.n	46f6 <trx_aes_wrrd+0x10e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    46ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    46ec:	05db      	lsls	r3, r3, #23
    46ee:	0ddb      	lsrs	r3, r3, #23
    46f0:	4a3d      	ldr	r2, [pc, #244]	; (47e8 <trx_aes_wrrd+0x200>)
    46f2:	8013      	strh	r3, [r2, #0]
    46f4:	e003      	b.n	46fe <trx_aes_wrrd+0x116>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    46f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    46f8:	b2db      	uxtb	r3, r3
    46fa:	4a3b      	ldr	r2, [pc, #236]	; (47e8 <trx_aes_wrrd+0x200>)
    46fc:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Reading Spi Data for the length specified */
	while (length > 0) {
    46fe:	2c00      	cmp	r4, #0
    4700:	d031      	beq.n	4766 <trx_aes_wrrd+0x17e>
    4702:	4656      	mov	r6, sl
    4704:	3c01      	subs	r4, #1
    4706:	b2e4      	uxtb	r4, r4
    4708:	3401      	adds	r4, #1
    470a:	44a2      	add	sl, r4
    470c:	46d0      	mov	r8, sl
    470e:	2700      	movs	r7, #0
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4710:	4d32      	ldr	r5, [pc, #200]	; (47dc <trx_aes_wrrd+0x1f4>)
		while (!spi_is_ready_to_write(&master)) {
    4712:	2001      	movs	r0, #1
		}
		spi_write(&master, *idata++);
		while (!spi_is_write_complete(&master)) {
    4714:	2402      	movs	r4, #2
		}
		while (!spi_is_ready_to_read(&master)) {
    4716:	2104      	movs	r1, #4
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4718:	46a9      	mov	r9, r5
    471a:	e022      	b.n	4762 <trx_aes_wrrd+0x17a>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    471c:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	/* Reading Spi Data for the length specified */
	while (length > 0) {
		while (!spi_is_ready_to_write(&master)) {
    471e:	4202      	tst	r2, r0
    4720:	d0fc      	beq.n	471c <trx_aes_wrrd+0x134>
    4722:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4724:	4202      	tst	r2, r0
    4726:	d001      	beq.n	472c <trx_aes_wrrd+0x144>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4728:	7872      	ldrb	r2, [r6, #1]
    472a:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    472c:	7e1a      	ldrb	r2, [r3, #24]
		}
		spi_write(&master, *idata++);
		while (!spi_is_write_complete(&master)) {
    472e:	4222      	tst	r2, r4
    4730:	d0fc      	beq.n	472c <trx_aes_wrrd+0x144>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4732:	7e1a      	ldrb	r2, [r3, #24]
		}
		while (!spi_is_ready_to_read(&master)) {
    4734:	420a      	tst	r2, r1
    4736:	d0fc      	beq.n	4732 <trx_aes_wrrd+0x14a>
    4738:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    473a:	420a      	tst	r2, r1
    473c:	d00d      	beq.n	475a <trx_aes_wrrd+0x172>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    473e:	8b5a      	ldrh	r2, [r3, #26]
    4740:	420a      	tst	r2, r1
    4742:	d000      	beq.n	4746 <trx_aes_wrrd+0x15e>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4744:	8359      	strh	r1, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4746:	464a      	mov	r2, r9
    4748:	7992      	ldrb	r2, [r2, #6]
    474a:	2a01      	cmp	r2, #1
    474c:	d103      	bne.n	4756 <trx_aes_wrrd+0x16e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    474e:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    4750:	05ff      	lsls	r7, r7, #23
    4752:	0dff      	lsrs	r7, r7, #23
    4754:	e001      	b.n	475a <trx_aes_wrrd+0x172>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4756:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    4758:	b2ff      	uxtb	r7, r7
		}

#if SAMD || SAMR21 || SAML21
		spi_read(&master, &odata_var);
		*odata++ = (uint8_t)odata_var;
    475a:	7037      	strb	r7, [r6, #0]
    475c:	3601      	adds	r6, #1
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	/* Reading Spi Data for the length specified */
	while (length > 0) {
    475e:	4546      	cmp	r6, r8
    4760:	d002      	beq.n	4768 <trx_aes_wrrd+0x180>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4762:	682b      	ldr	r3, [r5, #0]
    4764:	e7da      	b.n	471c <trx_aes_wrrd+0x134>
    4766:	2700      	movs	r7, #0
    4768:	4b1c      	ldr	r3, [pc, #112]	; (47dc <trx_aes_wrrd+0x1f4>)
    476a:	681b      	ldr	r3, [r3, #0]
#endif
		length--;
	}

	/* To get the last data byte, write some dummy byte */
	while (!spi_is_ready_to_write(&master)) {
    476c:	2101      	movs	r1, #1

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    476e:	7e1a      	ldrb	r2, [r3, #24]
    4770:	420a      	tst	r2, r1
    4772:	d0fc      	beq.n	476e <trx_aes_wrrd+0x186>
    4774:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4776:	07d2      	lsls	r2, r2, #31
    4778:	d501      	bpl.n	477e <trx_aes_wrrd+0x196>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    477a:	2200      	movs	r2, #0
    477c:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    477e:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4780:	7e1a      	ldrb	r2, [r3, #24]
    4782:	420a      	tst	r2, r1
    4784:	d0fc      	beq.n	4780 <trx_aes_wrrd+0x198>
	}
	while (!spi_is_ready_to_read(&master)) {
    4786:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4788:	7e1a      	ldrb	r2, [r3, #24]
    478a:	420a      	tst	r2, r1
    478c:	d0fc      	beq.n	4788 <trx_aes_wrrd+0x1a0>
    478e:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4790:	0752      	lsls	r2, r2, #29
    4792:	d50e      	bpl.n	47b2 <trx_aes_wrrd+0x1ca>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4794:	8b5a      	ldrh	r2, [r3, #26]
    4796:	0752      	lsls	r2, r2, #29
    4798:	d501      	bpl.n	479e <trx_aes_wrrd+0x1b6>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    479a:	2204      	movs	r2, #4
    479c:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    479e:	4a0f      	ldr	r2, [pc, #60]	; (47dc <trx_aes_wrrd+0x1f4>)
    47a0:	7992      	ldrb	r2, [r2, #6]
    47a2:	2a01      	cmp	r2, #1
    47a4:	d103      	bne.n	47ae <trx_aes_wrrd+0x1c6>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    47a6:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    47a8:	05ff      	lsls	r7, r7, #23
    47aa:	0dff      	lsrs	r7, r7, #23
    47ac:	e001      	b.n	47b2 <trx_aes_wrrd+0x1ca>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    47ae:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    47b0:	b2ff      	uxtb	r7, r7
	}
#if SAMD || SAMR21 || SAML21
	spi_read(&master, &odata_var);
	*odata = (uint8_t)odata_var;
    47b2:	4653      	mov	r3, sl
    47b4:	701f      	strb	r7, [r3, #0]
#else
	spi_read(&master, (uint16_t *)odata);
#endif

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    47b6:	2200      	movs	r2, #0
    47b8:	4909      	ldr	r1, [pc, #36]	; (47e0 <trx_aes_wrrd+0x1f8>)
    47ba:	4808      	ldr	r0, [pc, #32]	; (47dc <trx_aes_wrrd+0x1f4>)
    47bc:	4b09      	ldr	r3, [pc, #36]	; (47e4 <trx_aes_wrrd+0x1fc>)
    47be:	4798      	blx	r3
	spi_read_packet(AT86RFX_SPI, odata, 1);

	/* Stop the SPI transaction by setting SEL high */
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	LEAVE_TRX_REGION();
    47c0:	2100      	movs	r1, #0
    47c2:	2000      	movs	r0, #0
    47c4:	4b09      	ldr	r3, [pc, #36]	; (47ec <trx_aes_wrrd+0x204>)
    47c6:	4798      	blx	r3
}
    47c8:	bc1c      	pop	{r2, r3, r4}
    47ca:	4690      	mov	r8, r2
    47cc:	4699      	mov	r9, r3
    47ce:	46a2      	mov	sl, r4
    47d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    47d2:	46c0      	nop			; (mov r8, r8)
    47d4:	00000155 	.word	0x00000155
    47d8:	0000030d 	.word	0x0000030d
    47dc:	2000097c 	.word	0x2000097c
    47e0:	20000940 	.word	0x20000940
    47e4:	00000c3d 	.word	0x00000c3d
    47e8:	20000938 	.word	0x20000938
    47ec:	000002ed 	.word	0x000002ed

000047f0 <sendDonePKT>:
static uint8_t data[]= "qkqh";
static bool sendBusy = false;

static void sendDonePKT(NWK_DataReq_t *req)
{
	sendBusy = false;
    47f0:	2200      	movs	r2, #0
    47f2:	4b01      	ldr	r3, [pc, #4]	; (47f8 <sendDonePKT+0x8>)
    47f4:	701a      	strb	r2, [r3, #0]
}
    47f6:	4770      	bx	lr
    47f8:	200007d4 	.word	0x200007d4

000047fc <receivePKT>:
	sendBusy = true;
}

//----------------------------------------------------------------
static bool receivePKT(NWK_DataInd_t* ind)
{
    47fc:	b510      	push	{r4, lr}
	printf("%s\n", ind->data);
    47fe:	6880      	ldr	r0, [r0, #8]
    4800:	4b03      	ldr	r3, [pc, #12]	; (4810 <receivePKT+0x14>)
    4802:	4798      	blx	r3
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    4804:	2280      	movs	r2, #128	; 0x80
    4806:	0312      	lsls	r2, r2, #12
    4808:	4b02      	ldr	r3, [pc, #8]	; (4814 <receivePKT+0x18>)
    480a:	61da      	str	r2, [r3, #28]
	LED_Toggle(LED0);
	
	return true;
}
    480c:	2001      	movs	r0, #1
    480e:	bd10      	pop	{r4, pc}
    4810:	00004c85 	.word	0x00004c85
    4814:	41004400 	.word	0x41004400

00004818 <radioInit>:

void radioInit()
{
    4818:	b510      	push	{r4, lr}
	NWK_SetAddr(15);
    481a:	200f      	movs	r0, #15
    481c:	4b07      	ldr	r3, [pc, #28]	; (483c <radioInit+0x24>)
    481e:	4798      	blx	r3
	NWK_SetPanId(APP_PANID);
    4820:	4807      	ldr	r0, [pc, #28]	; (4840 <radioInit+0x28>)
    4822:	4b08      	ldr	r3, [pc, #32]	; (4844 <radioInit+0x2c>)
    4824:	4798      	blx	r3
	PHY_SetChannel(APP_CHANNEL);
    4826:	200f      	movs	r0, #15
    4828:	4b07      	ldr	r3, [pc, #28]	; (4848 <radioInit+0x30>)
    482a:	4798      	blx	r3
	PHY_SetRxState(true);
    482c:	2001      	movs	r0, #1
    482e:	4b07      	ldr	r3, [pc, #28]	; (484c <radioInit+0x34>)
    4830:	4798      	blx	r3
	NWK_OpenEndpoint(APP_ENDPOINT, receivePKT);
    4832:	4907      	ldr	r1, [pc, #28]	; (4850 <radioInit+0x38>)
    4834:	2001      	movs	r0, #1
    4836:	4b07      	ldr	r3, [pc, #28]	; (4854 <radioInit+0x3c>)
    4838:	4798      	blx	r3
}
    483a:	bd10      	pop	{r4, pc}
    483c:	000023e9 	.word	0x000023e9
    4840:	00004567 	.word	0x00004567
    4844:	000023fd 	.word	0x000023fd
    4848:	00003681 	.word	0x00003681
    484c:	0000366d 	.word	0x0000366d
    4850:	000047fd 	.word	0x000047fd
    4854:	00002411 	.word	0x00002411

00004858 <main>:

//----------------------------------------------------------------

int main()
{
    4858:	b510      	push	{r4, lr}
	irq_initialize_vectors();
	system_init();
    485a:	4b15      	ldr	r3, [pc, #84]	; (48b0 <main+0x58>)
    485c:	4798      	blx	r3
	delay_init();
    485e:	4b15      	ldr	r3, [pc, #84]	; (48b4 <main+0x5c>)
    4860:	4798      	blx	r3
	SYS_Init();
    4862:	4b15      	ldr	r3, [pc, #84]	; (48b8 <main+0x60>)
    4864:	4798      	blx	r3
	sio2host_init();
    4866:	4b15      	ldr	r3, [pc, #84]	; (48bc <main+0x64>)
    4868:	4798      	blx	r3
	cpu_irq_enable();
    486a:	2201      	movs	r2, #1
    486c:	4b14      	ldr	r3, [pc, #80]	; (48c0 <main+0x68>)
    486e:	701a      	strb	r2, [r3, #0]
    4870:	f3bf 8f5f 	dmb	sy
    4874:	b662      	cpsie	i
	
	radioInit();
    4876:	4b13      	ldr	r3, [pc, #76]	; (48c4 <main+0x6c>)
    4878:	4798      	blx	r3
	sendBusy = false;
}

static void sendPKT(void)
{
	if(sendBusy)
    487a:	4b13      	ldr	r3, [pc, #76]	; (48c8 <main+0x70>)
    487c:	781b      	ldrb	r3, [r3, #0]
    487e:	2b00      	cmp	r3, #0
    4880:	d113      	bne.n	48aa <main+0x52>
		return;
		
	appDataReq.dstAddr = 16;
    4882:	4812      	ldr	r0, [pc, #72]	; (48cc <main+0x74>)
    4884:	3310      	adds	r3, #16
    4886:	8143      	strh	r3, [r0, #10]
	appDataReq.dstEndpoint = APP_ENDPOINT;
    4888:	2401      	movs	r4, #1
    488a:	7304      	strb	r4, [r0, #12]
	appDataReq.srcEndpoint = APP_ENDPOINT;
    488c:	7344      	strb	r4, [r0, #13]
	appDataReq.data = data;
    488e:	4b10      	ldr	r3, [pc, #64]	; (48d0 <main+0x78>)
    4890:	6103      	str	r3, [r0, #16]
	appDataReq.size = 40;
    4892:	2328      	movs	r3, #40	; 0x28
    4894:	7503      	strb	r3, [r0, #20]
	appDataReq.confirm = sendDonePKT;
    4896:	4b0f      	ldr	r3, [pc, #60]	; (48d4 <main+0x7c>)
    4898:	6183      	str	r3, [r0, #24]
	NWK_DataReq(&appDataReq);
    489a:	4b0f      	ldr	r3, [pc, #60]	; (48d8 <main+0x80>)
    489c:	4798      	blx	r3
    489e:	2280      	movs	r2, #128	; 0x80
    48a0:	0312      	lsls	r2, r2, #12
    48a2:	4b0e      	ldr	r3, [pc, #56]	; (48dc <main+0x84>)
    48a4:	61da      	str	r2, [r3, #28]
	
	LED_Toggle(LED0);
	sendBusy = true;
    48a6:	4b08      	ldr	r3, [pc, #32]	; (48c8 <main+0x70>)
    48a8:	701c      	strb	r4, [r3, #0]
	
	radioInit();
	sendPKT();
	
	while(1){
		SYS_TaskHandler();
    48aa:	4c0d      	ldr	r4, [pc, #52]	; (48e0 <main+0x88>)
    48ac:	47a0      	blx	r4
    48ae:	e7fd      	b.n	48ac <main+0x54>
    48b0:	00001bb5 	.word	0x00001bb5
    48b4:	00000115 	.word	0x00000115
    48b8:	00003829 	.word	0x00003829
    48bc:	00002245 	.word	0x00002245
    48c0:	20000008 	.word	0x20000008
    48c4:	00004819 	.word	0x00004819
    48c8:	200007d4 	.word	0x200007d4
    48cc:	200007d8 	.word	0x200007d8
    48d0:	2000000c 	.word	0x2000000c
    48d4:	000047f1 	.word	0x000047f1
    48d8:	00002491 	.word	0x00002491
    48dc:	41004400 	.word	0x41004400
    48e0:	0000384d 	.word	0x0000384d

000048e4 <common_tc_delay>:
    48e4:	b510      	push	{r4, lr}
    48e6:	1c04      	adds	r4, r0, #0
    48e8:	4b13      	ldr	r3, [pc, #76]	; (4938 <common_tc_delay+0x54>)
    48ea:	4798      	blx	r3
    48ec:	4b13      	ldr	r3, [pc, #76]	; (493c <common_tc_delay+0x58>)
    48ee:	781a      	ldrb	r2, [r3, #0]
    48f0:	4362      	muls	r2, r4
    48f2:	1881      	adds	r1, r0, r2
    48f4:	4b12      	ldr	r3, [pc, #72]	; (4940 <common_tc_delay+0x5c>)
    48f6:	6059      	str	r1, [r3, #4]
    48f8:	6859      	ldr	r1, [r3, #4]
    48fa:	0c09      	lsrs	r1, r1, #16
    48fc:	6059      	str	r1, [r3, #4]
    48fe:	685b      	ldr	r3, [r3, #4]
    4900:	2b00      	cmp	r3, #0
    4902:	d007      	beq.n	4914 <common_tc_delay+0x30>
    4904:	4b0e      	ldr	r3, [pc, #56]	; (4940 <common_tc_delay+0x5c>)
    4906:	6859      	ldr	r1, [r3, #4]
    4908:	3201      	adds	r2, #1
    490a:	1880      	adds	r0, r0, r2
    490c:	8118      	strh	r0, [r3, #8]
    490e:	4b0d      	ldr	r3, [pc, #52]	; (4944 <common_tc_delay+0x60>)
    4910:	4798      	blx	r3
    4912:	e004      	b.n	491e <common_tc_delay+0x3a>
    4914:	1882      	adds	r2, r0, r2
    4916:	4b0a      	ldr	r3, [pc, #40]	; (4940 <common_tc_delay+0x5c>)
    4918:	811a      	strh	r2, [r3, #8]
    491a:	4b0b      	ldr	r3, [pc, #44]	; (4948 <common_tc_delay+0x64>)
    491c:	4798      	blx	r3
    491e:	4b08      	ldr	r3, [pc, #32]	; (4940 <common_tc_delay+0x5c>)
    4920:	891b      	ldrh	r3, [r3, #8]
    4922:	2b63      	cmp	r3, #99	; 0x63
    4924:	d802      	bhi.n	492c <common_tc_delay+0x48>
    4926:	3364      	adds	r3, #100	; 0x64
    4928:	4a05      	ldr	r2, [pc, #20]	; (4940 <common_tc_delay+0x5c>)
    492a:	8113      	strh	r3, [r2, #8]
    492c:	4b04      	ldr	r3, [pc, #16]	; (4940 <common_tc_delay+0x5c>)
    492e:	8918      	ldrh	r0, [r3, #8]
    4930:	4b06      	ldr	r3, [pc, #24]	; (494c <common_tc_delay+0x68>)
    4932:	4798      	blx	r3
    4934:	bd10      	pop	{r4, pc}
    4936:	46c0      	nop			; (mov r8, r8)
    4938:	00003a1d 	.word	0x00003a1d
    493c:	20000988 	.word	0x20000988
    4940:	200007f8 	.word	0x200007f8
    4944:	00003a31 	.word	0x00003a31
    4948:	00003a45 	.word	0x00003a45
    494c:	00003a81 	.word	0x00003a81

00004950 <common_tc_init>:
    4950:	b508      	push	{r3, lr}
    4952:	2200      	movs	r2, #0
    4954:	4b03      	ldr	r3, [pc, #12]	; (4964 <common_tc_init+0x14>)
    4956:	701a      	strb	r2, [r3, #0]
    4958:	4b03      	ldr	r3, [pc, #12]	; (4968 <common_tc_init+0x18>)
    495a:	4798      	blx	r3
    495c:	4b03      	ldr	r3, [pc, #12]	; (496c <common_tc_init+0x1c>)
    495e:	7018      	strb	r0, [r3, #0]
    4960:	bd08      	pop	{r3, pc}
    4962:	46c0      	nop			; (mov r8, r8)
    4964:	200007f8 	.word	0x200007f8
    4968:	00003a99 	.word	0x00003a99
    496c:	20000988 	.word	0x20000988

00004970 <tmr_ovf_callback>:
    4970:	b508      	push	{r3, lr}
    4972:	4b0e      	ldr	r3, [pc, #56]	; (49ac <tmr_ovf_callback+0x3c>)
    4974:	685b      	ldr	r3, [r3, #4]
    4976:	2b00      	cmp	r3, #0
    4978:	d007      	beq.n	498a <tmr_ovf_callback+0x1a>
    497a:	4a0c      	ldr	r2, [pc, #48]	; (49ac <tmr_ovf_callback+0x3c>)
    497c:	6853      	ldr	r3, [r2, #4]
    497e:	3b01      	subs	r3, #1
    4980:	6053      	str	r3, [r2, #4]
    4982:	2b00      	cmp	r3, #0
    4984:	d101      	bne.n	498a <tmr_ovf_callback+0x1a>
    4986:	4b0a      	ldr	r3, [pc, #40]	; (49b0 <tmr_ovf_callback+0x40>)
    4988:	4798      	blx	r3
    498a:	4a08      	ldr	r2, [pc, #32]	; (49ac <tmr_ovf_callback+0x3c>)
    498c:	7813      	ldrb	r3, [r2, #0]
    498e:	3301      	adds	r3, #1
    4990:	b2db      	uxtb	r3, r3
    4992:	7013      	strb	r3, [r2, #0]
    4994:	4a07      	ldr	r2, [pc, #28]	; (49b4 <tmr_ovf_callback+0x44>)
    4996:	7812      	ldrb	r2, [r2, #0]
    4998:	429a      	cmp	r2, r3
    499a:	d806      	bhi.n	49aa <tmr_ovf_callback+0x3a>
    499c:	4b03      	ldr	r3, [pc, #12]	; (49ac <tmr_ovf_callback+0x3c>)
    499e:	2200      	movs	r2, #0
    49a0:	701a      	strb	r2, [r3, #0]
    49a2:	68db      	ldr	r3, [r3, #12]
    49a4:	2b00      	cmp	r3, #0
    49a6:	d000      	beq.n	49aa <tmr_ovf_callback+0x3a>
    49a8:	4798      	blx	r3
    49aa:	bd08      	pop	{r3, pc}
    49ac:	200007f8 	.word	0x200007f8
    49b0:	00003a45 	.word	0x00003a45
    49b4:	20000988 	.word	0x20000988

000049b8 <tmr_cca_callback>:
    49b8:	b508      	push	{r3, lr}
    49ba:	4b04      	ldr	r3, [pc, #16]	; (49cc <tmr_cca_callback+0x14>)
    49bc:	4798      	blx	r3
    49be:	4b04      	ldr	r3, [pc, #16]	; (49d0 <tmr_cca_callback+0x18>)
    49c0:	691b      	ldr	r3, [r3, #16]
    49c2:	2b00      	cmp	r3, #0
    49c4:	d000      	beq.n	49c8 <tmr_cca_callback+0x10>
    49c6:	4798      	blx	r3
    49c8:	bd08      	pop	{r3, pc}
    49ca:	46c0      	nop			; (mov r8, r8)
    49cc:	00003a31 	.word	0x00003a31
    49d0:	200007f8 	.word	0x200007f8

000049d4 <set_common_tc_expiry_callback>:
    49d4:	4b01      	ldr	r3, [pc, #4]	; (49dc <set_common_tc_expiry_callback+0x8>)
    49d6:	6118      	str	r0, [r3, #16]
    49d8:	4770      	bx	lr
    49da:	46c0      	nop			; (mov r8, r8)
    49dc:	200007f8 	.word	0x200007f8

000049e0 <__aeabi_uidiv>:
    49e0:	2200      	movs	r2, #0
    49e2:	0843      	lsrs	r3, r0, #1
    49e4:	428b      	cmp	r3, r1
    49e6:	d374      	bcc.n	4ad2 <__aeabi_uidiv+0xf2>
    49e8:	0903      	lsrs	r3, r0, #4
    49ea:	428b      	cmp	r3, r1
    49ec:	d35f      	bcc.n	4aae <__aeabi_uidiv+0xce>
    49ee:	0a03      	lsrs	r3, r0, #8
    49f0:	428b      	cmp	r3, r1
    49f2:	d344      	bcc.n	4a7e <__aeabi_uidiv+0x9e>
    49f4:	0b03      	lsrs	r3, r0, #12
    49f6:	428b      	cmp	r3, r1
    49f8:	d328      	bcc.n	4a4c <__aeabi_uidiv+0x6c>
    49fa:	0c03      	lsrs	r3, r0, #16
    49fc:	428b      	cmp	r3, r1
    49fe:	d30d      	bcc.n	4a1c <__aeabi_uidiv+0x3c>
    4a00:	22ff      	movs	r2, #255	; 0xff
    4a02:	0209      	lsls	r1, r1, #8
    4a04:	ba12      	rev	r2, r2
    4a06:	0c03      	lsrs	r3, r0, #16
    4a08:	428b      	cmp	r3, r1
    4a0a:	d302      	bcc.n	4a12 <__aeabi_uidiv+0x32>
    4a0c:	1212      	asrs	r2, r2, #8
    4a0e:	0209      	lsls	r1, r1, #8
    4a10:	d065      	beq.n	4ade <__aeabi_uidiv+0xfe>
    4a12:	0b03      	lsrs	r3, r0, #12
    4a14:	428b      	cmp	r3, r1
    4a16:	d319      	bcc.n	4a4c <__aeabi_uidiv+0x6c>
    4a18:	e000      	b.n	4a1c <__aeabi_uidiv+0x3c>
    4a1a:	0a09      	lsrs	r1, r1, #8
    4a1c:	0bc3      	lsrs	r3, r0, #15
    4a1e:	428b      	cmp	r3, r1
    4a20:	d301      	bcc.n	4a26 <__aeabi_uidiv+0x46>
    4a22:	03cb      	lsls	r3, r1, #15
    4a24:	1ac0      	subs	r0, r0, r3
    4a26:	4152      	adcs	r2, r2
    4a28:	0b83      	lsrs	r3, r0, #14
    4a2a:	428b      	cmp	r3, r1
    4a2c:	d301      	bcc.n	4a32 <__aeabi_uidiv+0x52>
    4a2e:	038b      	lsls	r3, r1, #14
    4a30:	1ac0      	subs	r0, r0, r3
    4a32:	4152      	adcs	r2, r2
    4a34:	0b43      	lsrs	r3, r0, #13
    4a36:	428b      	cmp	r3, r1
    4a38:	d301      	bcc.n	4a3e <__aeabi_uidiv+0x5e>
    4a3a:	034b      	lsls	r3, r1, #13
    4a3c:	1ac0      	subs	r0, r0, r3
    4a3e:	4152      	adcs	r2, r2
    4a40:	0b03      	lsrs	r3, r0, #12
    4a42:	428b      	cmp	r3, r1
    4a44:	d301      	bcc.n	4a4a <__aeabi_uidiv+0x6a>
    4a46:	030b      	lsls	r3, r1, #12
    4a48:	1ac0      	subs	r0, r0, r3
    4a4a:	4152      	adcs	r2, r2
    4a4c:	0ac3      	lsrs	r3, r0, #11
    4a4e:	428b      	cmp	r3, r1
    4a50:	d301      	bcc.n	4a56 <__aeabi_uidiv+0x76>
    4a52:	02cb      	lsls	r3, r1, #11
    4a54:	1ac0      	subs	r0, r0, r3
    4a56:	4152      	adcs	r2, r2
    4a58:	0a83      	lsrs	r3, r0, #10
    4a5a:	428b      	cmp	r3, r1
    4a5c:	d301      	bcc.n	4a62 <__aeabi_uidiv+0x82>
    4a5e:	028b      	lsls	r3, r1, #10
    4a60:	1ac0      	subs	r0, r0, r3
    4a62:	4152      	adcs	r2, r2
    4a64:	0a43      	lsrs	r3, r0, #9
    4a66:	428b      	cmp	r3, r1
    4a68:	d301      	bcc.n	4a6e <__aeabi_uidiv+0x8e>
    4a6a:	024b      	lsls	r3, r1, #9
    4a6c:	1ac0      	subs	r0, r0, r3
    4a6e:	4152      	adcs	r2, r2
    4a70:	0a03      	lsrs	r3, r0, #8
    4a72:	428b      	cmp	r3, r1
    4a74:	d301      	bcc.n	4a7a <__aeabi_uidiv+0x9a>
    4a76:	020b      	lsls	r3, r1, #8
    4a78:	1ac0      	subs	r0, r0, r3
    4a7a:	4152      	adcs	r2, r2
    4a7c:	d2cd      	bcs.n	4a1a <__aeabi_uidiv+0x3a>
    4a7e:	09c3      	lsrs	r3, r0, #7
    4a80:	428b      	cmp	r3, r1
    4a82:	d301      	bcc.n	4a88 <__aeabi_uidiv+0xa8>
    4a84:	01cb      	lsls	r3, r1, #7
    4a86:	1ac0      	subs	r0, r0, r3
    4a88:	4152      	adcs	r2, r2
    4a8a:	0983      	lsrs	r3, r0, #6
    4a8c:	428b      	cmp	r3, r1
    4a8e:	d301      	bcc.n	4a94 <__aeabi_uidiv+0xb4>
    4a90:	018b      	lsls	r3, r1, #6
    4a92:	1ac0      	subs	r0, r0, r3
    4a94:	4152      	adcs	r2, r2
    4a96:	0943      	lsrs	r3, r0, #5
    4a98:	428b      	cmp	r3, r1
    4a9a:	d301      	bcc.n	4aa0 <__aeabi_uidiv+0xc0>
    4a9c:	014b      	lsls	r3, r1, #5
    4a9e:	1ac0      	subs	r0, r0, r3
    4aa0:	4152      	adcs	r2, r2
    4aa2:	0903      	lsrs	r3, r0, #4
    4aa4:	428b      	cmp	r3, r1
    4aa6:	d301      	bcc.n	4aac <__aeabi_uidiv+0xcc>
    4aa8:	010b      	lsls	r3, r1, #4
    4aaa:	1ac0      	subs	r0, r0, r3
    4aac:	4152      	adcs	r2, r2
    4aae:	08c3      	lsrs	r3, r0, #3
    4ab0:	428b      	cmp	r3, r1
    4ab2:	d301      	bcc.n	4ab8 <__aeabi_uidiv+0xd8>
    4ab4:	00cb      	lsls	r3, r1, #3
    4ab6:	1ac0      	subs	r0, r0, r3
    4ab8:	4152      	adcs	r2, r2
    4aba:	0883      	lsrs	r3, r0, #2
    4abc:	428b      	cmp	r3, r1
    4abe:	d301      	bcc.n	4ac4 <__aeabi_uidiv+0xe4>
    4ac0:	008b      	lsls	r3, r1, #2
    4ac2:	1ac0      	subs	r0, r0, r3
    4ac4:	4152      	adcs	r2, r2
    4ac6:	0843      	lsrs	r3, r0, #1
    4ac8:	428b      	cmp	r3, r1
    4aca:	d301      	bcc.n	4ad0 <__aeabi_uidiv+0xf0>
    4acc:	004b      	lsls	r3, r1, #1
    4ace:	1ac0      	subs	r0, r0, r3
    4ad0:	4152      	adcs	r2, r2
    4ad2:	1a41      	subs	r1, r0, r1
    4ad4:	d200      	bcs.n	4ad8 <__aeabi_uidiv+0xf8>
    4ad6:	4601      	mov	r1, r0
    4ad8:	4152      	adcs	r2, r2
    4ada:	4610      	mov	r0, r2
    4adc:	4770      	bx	lr
    4ade:	e7ff      	b.n	4ae0 <__aeabi_uidiv+0x100>
    4ae0:	b501      	push	{r0, lr}
    4ae2:	2000      	movs	r0, #0
    4ae4:	f000 f806 	bl	4af4 <__aeabi_idiv0>
    4ae8:	bd02      	pop	{r1, pc}
    4aea:	46c0      	nop			; (mov r8, r8)

00004aec <__aeabi_uidivmod>:
    4aec:	2900      	cmp	r1, #0
    4aee:	d0f7      	beq.n	4ae0 <__aeabi_uidiv+0x100>
    4af0:	e776      	b.n	49e0 <__aeabi_uidiv>
    4af2:	4770      	bx	lr

00004af4 <__aeabi_idiv0>:
    4af4:	4770      	bx	lr
    4af6:	46c0      	nop			; (mov r8, r8)

00004af8 <__aeabi_lmul>:
    4af8:	b5f0      	push	{r4, r5, r6, r7, lr}
    4afa:	464f      	mov	r7, r9
    4afc:	4646      	mov	r6, r8
    4afe:	b4c0      	push	{r6, r7}
    4b00:	0416      	lsls	r6, r2, #16
    4b02:	0c36      	lsrs	r6, r6, #16
    4b04:	4699      	mov	r9, r3
    4b06:	0033      	movs	r3, r6
    4b08:	0405      	lsls	r5, r0, #16
    4b0a:	0c2c      	lsrs	r4, r5, #16
    4b0c:	0c07      	lsrs	r7, r0, #16
    4b0e:	0c15      	lsrs	r5, r2, #16
    4b10:	4363      	muls	r3, r4
    4b12:	437e      	muls	r6, r7
    4b14:	436f      	muls	r7, r5
    4b16:	4365      	muls	r5, r4
    4b18:	0c1c      	lsrs	r4, r3, #16
    4b1a:	19ad      	adds	r5, r5, r6
    4b1c:	1964      	adds	r4, r4, r5
    4b1e:	469c      	mov	ip, r3
    4b20:	42a6      	cmp	r6, r4
    4b22:	d903      	bls.n	4b2c <__aeabi_lmul+0x34>
    4b24:	2380      	movs	r3, #128	; 0x80
    4b26:	025b      	lsls	r3, r3, #9
    4b28:	4698      	mov	r8, r3
    4b2a:	4447      	add	r7, r8
    4b2c:	4663      	mov	r3, ip
    4b2e:	0c25      	lsrs	r5, r4, #16
    4b30:	19ef      	adds	r7, r5, r7
    4b32:	041d      	lsls	r5, r3, #16
    4b34:	464b      	mov	r3, r9
    4b36:	434a      	muls	r2, r1
    4b38:	4343      	muls	r3, r0
    4b3a:	0c2d      	lsrs	r5, r5, #16
    4b3c:	0424      	lsls	r4, r4, #16
    4b3e:	1964      	adds	r4, r4, r5
    4b40:	1899      	adds	r1, r3, r2
    4b42:	19c9      	adds	r1, r1, r7
    4b44:	0020      	movs	r0, r4
    4b46:	bc0c      	pop	{r2, r3}
    4b48:	4690      	mov	r8, r2
    4b4a:	4699      	mov	r9, r3
    4b4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4b4e:	46c0      	nop			; (mov r8, r8)

00004b50 <__libc_init_array>:
    4b50:	4b0e      	ldr	r3, [pc, #56]	; (4b8c <__libc_init_array+0x3c>)
    4b52:	b570      	push	{r4, r5, r6, lr}
    4b54:	2500      	movs	r5, #0
    4b56:	001e      	movs	r6, r3
    4b58:	4c0d      	ldr	r4, [pc, #52]	; (4b90 <__libc_init_array+0x40>)
    4b5a:	1ae4      	subs	r4, r4, r3
    4b5c:	10a4      	asrs	r4, r4, #2
    4b5e:	42a5      	cmp	r5, r4
    4b60:	d004      	beq.n	4b6c <__libc_init_array+0x1c>
    4b62:	00ab      	lsls	r3, r5, #2
    4b64:	58f3      	ldr	r3, [r6, r3]
    4b66:	4798      	blx	r3
    4b68:	3501      	adds	r5, #1
    4b6a:	e7f8      	b.n	4b5e <__libc_init_array+0xe>
    4b6c:	f000 fe4a 	bl	5804 <_init>
    4b70:	4b08      	ldr	r3, [pc, #32]	; (4b94 <__libc_init_array+0x44>)
    4b72:	2500      	movs	r5, #0
    4b74:	001e      	movs	r6, r3
    4b76:	4c08      	ldr	r4, [pc, #32]	; (4b98 <__libc_init_array+0x48>)
    4b78:	1ae4      	subs	r4, r4, r3
    4b7a:	10a4      	asrs	r4, r4, #2
    4b7c:	42a5      	cmp	r5, r4
    4b7e:	d004      	beq.n	4b8a <__libc_init_array+0x3a>
    4b80:	00ab      	lsls	r3, r5, #2
    4b82:	58f3      	ldr	r3, [r6, r3]
    4b84:	4798      	blx	r3
    4b86:	3501      	adds	r5, #1
    4b88:	e7f8      	b.n	4b7c <__libc_init_array+0x2c>
    4b8a:	bd70      	pop	{r4, r5, r6, pc}
    4b8c:	00005810 	.word	0x00005810
    4b90:	00005810 	.word	0x00005810
    4b94:	00005810 	.word	0x00005810
    4b98:	00005814 	.word	0x00005814

00004b9c <memcpy>:
    4b9c:	2300      	movs	r3, #0
    4b9e:	b510      	push	{r4, lr}
    4ba0:	429a      	cmp	r2, r3
    4ba2:	d003      	beq.n	4bac <memcpy+0x10>
    4ba4:	5ccc      	ldrb	r4, [r1, r3]
    4ba6:	54c4      	strb	r4, [r0, r3]
    4ba8:	3301      	adds	r3, #1
    4baa:	e7f9      	b.n	4ba0 <memcpy+0x4>
    4bac:	bd10      	pop	{r4, pc}

00004bae <memset>:
    4bae:	0003      	movs	r3, r0
    4bb0:	1882      	adds	r2, r0, r2
    4bb2:	4293      	cmp	r3, r2
    4bb4:	d002      	beq.n	4bbc <memset+0xe>
    4bb6:	7019      	strb	r1, [r3, #0]
    4bb8:	3301      	adds	r3, #1
    4bba:	e7fa      	b.n	4bb2 <memset+0x4>
    4bbc:	4770      	bx	lr
	...

00004bc0 <_puts_r>:
    4bc0:	b570      	push	{r4, r5, r6, lr}
    4bc2:	0005      	movs	r5, r0
    4bc4:	000e      	movs	r6, r1
    4bc6:	2800      	cmp	r0, #0
    4bc8:	d004      	beq.n	4bd4 <_puts_r+0x14>
    4bca:	6983      	ldr	r3, [r0, #24]
    4bcc:	2b00      	cmp	r3, #0
    4bce:	d101      	bne.n	4bd4 <_puts_r+0x14>
    4bd0:	f000 fb1a 	bl	5208 <__sinit>
    4bd4:	69ab      	ldr	r3, [r5, #24]
    4bd6:	68ac      	ldr	r4, [r5, #8]
    4bd8:	2b00      	cmp	r3, #0
    4bda:	d102      	bne.n	4be2 <_puts_r+0x22>
    4bdc:	0028      	movs	r0, r5
    4bde:	f000 fb13 	bl	5208 <__sinit>
    4be2:	4b25      	ldr	r3, [pc, #148]	; (4c78 <_puts_r+0xb8>)
    4be4:	429c      	cmp	r4, r3
    4be6:	d101      	bne.n	4bec <_puts_r+0x2c>
    4be8:	686c      	ldr	r4, [r5, #4]
    4bea:	e008      	b.n	4bfe <_puts_r+0x3e>
    4bec:	4b23      	ldr	r3, [pc, #140]	; (4c7c <_puts_r+0xbc>)
    4bee:	429c      	cmp	r4, r3
    4bf0:	d101      	bne.n	4bf6 <_puts_r+0x36>
    4bf2:	68ac      	ldr	r4, [r5, #8]
    4bf4:	e003      	b.n	4bfe <_puts_r+0x3e>
    4bf6:	4b22      	ldr	r3, [pc, #136]	; (4c80 <_puts_r+0xc0>)
    4bf8:	429c      	cmp	r4, r3
    4bfa:	d100      	bne.n	4bfe <_puts_r+0x3e>
    4bfc:	68ec      	ldr	r4, [r5, #12]
    4bfe:	89a3      	ldrh	r3, [r4, #12]
    4c00:	071b      	lsls	r3, r3, #28
    4c02:	d502      	bpl.n	4c0a <_puts_r+0x4a>
    4c04:	6923      	ldr	r3, [r4, #16]
    4c06:	2b00      	cmp	r3, #0
    4c08:	d111      	bne.n	4c2e <_puts_r+0x6e>
    4c0a:	0021      	movs	r1, r4
    4c0c:	0028      	movs	r0, r5
    4c0e:	f000 f991 	bl	4f34 <__swsetup_r>
    4c12:	2800      	cmp	r0, #0
    4c14:	d00b      	beq.n	4c2e <_puts_r+0x6e>
    4c16:	2001      	movs	r0, #1
    4c18:	4240      	negs	r0, r0
    4c1a:	e02b      	b.n	4c74 <_puts_r+0xb4>
    4c1c:	3b01      	subs	r3, #1
    4c1e:	3601      	adds	r6, #1
    4c20:	60a3      	str	r3, [r4, #8]
    4c22:	2b00      	cmp	r3, #0
    4c24:	db08      	blt.n	4c38 <_puts_r+0x78>
    4c26:	6823      	ldr	r3, [r4, #0]
    4c28:	1c5a      	adds	r2, r3, #1
    4c2a:	6022      	str	r2, [r4, #0]
    4c2c:	7019      	strb	r1, [r3, #0]
    4c2e:	7831      	ldrb	r1, [r6, #0]
    4c30:	68a3      	ldr	r3, [r4, #8]
    4c32:	2900      	cmp	r1, #0
    4c34:	d1f2      	bne.n	4c1c <_puts_r+0x5c>
    4c36:	e00b      	b.n	4c50 <_puts_r+0x90>
    4c38:	69a2      	ldr	r2, [r4, #24]
    4c3a:	4293      	cmp	r3, r2
    4c3c:	db01      	blt.n	4c42 <_puts_r+0x82>
    4c3e:	290a      	cmp	r1, #10
    4c40:	d1f1      	bne.n	4c26 <_puts_r+0x66>
    4c42:	0022      	movs	r2, r4
    4c44:	0028      	movs	r0, r5
    4c46:	f000 f91d 	bl	4e84 <__swbuf_r>
    4c4a:	1c43      	adds	r3, r0, #1
    4c4c:	d1ef      	bne.n	4c2e <_puts_r+0x6e>
    4c4e:	e7e2      	b.n	4c16 <_puts_r+0x56>
    4c50:	3b01      	subs	r3, #1
    4c52:	60a3      	str	r3, [r4, #8]
    4c54:	2b00      	cmp	r3, #0
    4c56:	da08      	bge.n	4c6a <_puts_r+0xaa>
    4c58:	0022      	movs	r2, r4
    4c5a:	310a      	adds	r1, #10
    4c5c:	0028      	movs	r0, r5
    4c5e:	f000 f911 	bl	4e84 <__swbuf_r>
    4c62:	1c43      	adds	r3, r0, #1
    4c64:	d0d7      	beq.n	4c16 <_puts_r+0x56>
    4c66:	200a      	movs	r0, #10
    4c68:	e004      	b.n	4c74 <_puts_r+0xb4>
    4c6a:	200a      	movs	r0, #10
    4c6c:	6823      	ldr	r3, [r4, #0]
    4c6e:	1c5a      	adds	r2, r3, #1
    4c70:	6022      	str	r2, [r4, #0]
    4c72:	7018      	strb	r0, [r3, #0]
    4c74:	bd70      	pop	{r4, r5, r6, pc}
    4c76:	46c0      	nop			; (mov r8, r8)
    4c78:	000057a4 	.word	0x000057a4
    4c7c:	000057c4 	.word	0x000057c4
    4c80:	000057e4 	.word	0x000057e4

00004c84 <puts>:
    4c84:	b510      	push	{r4, lr}
    4c86:	4b03      	ldr	r3, [pc, #12]	; (4c94 <puts+0x10>)
    4c88:	0001      	movs	r1, r0
    4c8a:	6818      	ldr	r0, [r3, #0]
    4c8c:	f7ff ff98 	bl	4bc0 <_puts_r>
    4c90:	bd10      	pop	{r4, pc}
    4c92:	46c0      	nop			; (mov r8, r8)
    4c94:	20000074 	.word	0x20000074

00004c98 <rand>:
    4c98:	4b15      	ldr	r3, [pc, #84]	; (4cf0 <rand+0x58>)
    4c9a:	b510      	push	{r4, lr}
    4c9c:	681c      	ldr	r4, [r3, #0]
    4c9e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    4ca0:	2b00      	cmp	r3, #0
    4ca2:	d115      	bne.n	4cd0 <rand+0x38>
    4ca4:	2018      	movs	r0, #24
    4ca6:	f000 fba7 	bl	53f8 <malloc>
    4caa:	4b12      	ldr	r3, [pc, #72]	; (4cf4 <rand+0x5c>)
    4cac:	63a0      	str	r0, [r4, #56]	; 0x38
    4cae:	8003      	strh	r3, [r0, #0]
    4cb0:	4b11      	ldr	r3, [pc, #68]	; (4cf8 <rand+0x60>)
    4cb2:	2201      	movs	r2, #1
    4cb4:	8043      	strh	r3, [r0, #2]
    4cb6:	4b11      	ldr	r3, [pc, #68]	; (4cfc <rand+0x64>)
    4cb8:	8083      	strh	r3, [r0, #4]
    4cba:	4b11      	ldr	r3, [pc, #68]	; (4d00 <rand+0x68>)
    4cbc:	80c3      	strh	r3, [r0, #6]
    4cbe:	4b11      	ldr	r3, [pc, #68]	; (4d04 <rand+0x6c>)
    4cc0:	8103      	strh	r3, [r0, #8]
    4cc2:	2305      	movs	r3, #5
    4cc4:	8143      	strh	r3, [r0, #10]
    4cc6:	3306      	adds	r3, #6
    4cc8:	8183      	strh	r3, [r0, #12]
    4cca:	2300      	movs	r3, #0
    4ccc:	6102      	str	r2, [r0, #16]
    4cce:	6143      	str	r3, [r0, #20]
    4cd0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    4cd2:	4a0d      	ldr	r2, [pc, #52]	; (4d08 <rand+0x70>)
    4cd4:	6920      	ldr	r0, [r4, #16]
    4cd6:	6961      	ldr	r1, [r4, #20]
    4cd8:	4b0c      	ldr	r3, [pc, #48]	; (4d0c <rand+0x74>)
    4cda:	f7ff ff0d 	bl	4af8 <__aeabi_lmul>
    4cde:	2201      	movs	r2, #1
    4ce0:	2300      	movs	r3, #0
    4ce2:	1880      	adds	r0, r0, r2
    4ce4:	4159      	adcs	r1, r3
    4ce6:	6120      	str	r0, [r4, #16]
    4ce8:	6161      	str	r1, [r4, #20]
    4cea:	0048      	lsls	r0, r1, #1
    4cec:	0840      	lsrs	r0, r0, #1
    4cee:	bd10      	pop	{r4, pc}
    4cf0:	20000074 	.word	0x20000074
    4cf4:	0000330e 	.word	0x0000330e
    4cf8:	ffffabcd 	.word	0xffffabcd
    4cfc:	00001234 	.word	0x00001234
    4d00:	ffffe66d 	.word	0xffffe66d
    4d04:	ffffdeec 	.word	0xffffdeec
    4d08:	4c957f2d 	.word	0x4c957f2d
    4d0c:	5851f42d 	.word	0x5851f42d

00004d10 <setbuf>:
    4d10:	424a      	negs	r2, r1
    4d12:	414a      	adcs	r2, r1
    4d14:	2380      	movs	r3, #128	; 0x80
    4d16:	b510      	push	{r4, lr}
    4d18:	0052      	lsls	r2, r2, #1
    4d1a:	00db      	lsls	r3, r3, #3
    4d1c:	f000 f802 	bl	4d24 <setvbuf>
    4d20:	bd10      	pop	{r4, pc}
	...

00004d24 <setvbuf>:
    4d24:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d26:	001d      	movs	r5, r3
    4d28:	4b51      	ldr	r3, [pc, #324]	; (4e70 <setvbuf+0x14c>)
    4d2a:	b085      	sub	sp, #20
    4d2c:	681e      	ldr	r6, [r3, #0]
    4d2e:	0004      	movs	r4, r0
    4d30:	000f      	movs	r7, r1
    4d32:	9200      	str	r2, [sp, #0]
    4d34:	2e00      	cmp	r6, #0
    4d36:	d005      	beq.n	4d44 <setvbuf+0x20>
    4d38:	69b3      	ldr	r3, [r6, #24]
    4d3a:	2b00      	cmp	r3, #0
    4d3c:	d102      	bne.n	4d44 <setvbuf+0x20>
    4d3e:	0030      	movs	r0, r6
    4d40:	f000 fa62 	bl	5208 <__sinit>
    4d44:	4b4b      	ldr	r3, [pc, #300]	; (4e74 <setvbuf+0x150>)
    4d46:	429c      	cmp	r4, r3
    4d48:	d101      	bne.n	4d4e <setvbuf+0x2a>
    4d4a:	6874      	ldr	r4, [r6, #4]
    4d4c:	e008      	b.n	4d60 <setvbuf+0x3c>
    4d4e:	4b4a      	ldr	r3, [pc, #296]	; (4e78 <setvbuf+0x154>)
    4d50:	429c      	cmp	r4, r3
    4d52:	d101      	bne.n	4d58 <setvbuf+0x34>
    4d54:	68b4      	ldr	r4, [r6, #8]
    4d56:	e003      	b.n	4d60 <setvbuf+0x3c>
    4d58:	4b48      	ldr	r3, [pc, #288]	; (4e7c <setvbuf+0x158>)
    4d5a:	429c      	cmp	r4, r3
    4d5c:	d100      	bne.n	4d60 <setvbuf+0x3c>
    4d5e:	68f4      	ldr	r4, [r6, #12]
    4d60:	9b00      	ldr	r3, [sp, #0]
    4d62:	2b02      	cmp	r3, #2
    4d64:	d005      	beq.n	4d72 <setvbuf+0x4e>
    4d66:	2b01      	cmp	r3, #1
    4d68:	d900      	bls.n	4d6c <setvbuf+0x48>
    4d6a:	e07c      	b.n	4e66 <setvbuf+0x142>
    4d6c:	2d00      	cmp	r5, #0
    4d6e:	da00      	bge.n	4d72 <setvbuf+0x4e>
    4d70:	e079      	b.n	4e66 <setvbuf+0x142>
    4d72:	0021      	movs	r1, r4
    4d74:	0030      	movs	r0, r6
    4d76:	f000 f9d9 	bl	512c <_fflush_r>
    4d7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4d7c:	2900      	cmp	r1, #0
    4d7e:	d008      	beq.n	4d92 <setvbuf+0x6e>
    4d80:	0023      	movs	r3, r4
    4d82:	3344      	adds	r3, #68	; 0x44
    4d84:	4299      	cmp	r1, r3
    4d86:	d002      	beq.n	4d8e <setvbuf+0x6a>
    4d88:	0030      	movs	r0, r6
    4d8a:	f000 fb3f 	bl	540c <_free_r>
    4d8e:	2300      	movs	r3, #0
    4d90:	6363      	str	r3, [r4, #52]	; 0x34
    4d92:	2300      	movs	r3, #0
    4d94:	61a3      	str	r3, [r4, #24]
    4d96:	6063      	str	r3, [r4, #4]
    4d98:	89a3      	ldrh	r3, [r4, #12]
    4d9a:	061b      	lsls	r3, r3, #24
    4d9c:	d503      	bpl.n	4da6 <setvbuf+0x82>
    4d9e:	6921      	ldr	r1, [r4, #16]
    4da0:	0030      	movs	r0, r6
    4da2:	f000 fb33 	bl	540c <_free_r>
    4da6:	89a2      	ldrh	r2, [r4, #12]
    4da8:	4b35      	ldr	r3, [pc, #212]	; (4e80 <setvbuf+0x15c>)
    4daa:	4013      	ands	r3, r2
    4dac:	81a3      	strh	r3, [r4, #12]
    4dae:	9b00      	ldr	r3, [sp, #0]
    4db0:	2b02      	cmp	r3, #2
    4db2:	d021      	beq.n	4df8 <setvbuf+0xd4>
    4db4:	ab03      	add	r3, sp, #12
    4db6:	aa02      	add	r2, sp, #8
    4db8:	0021      	movs	r1, r4
    4dba:	0030      	movs	r0, r6
    4dbc:	f000 fab8 	bl	5330 <__swhatbuf_r>
    4dc0:	89a3      	ldrh	r3, [r4, #12]
    4dc2:	4318      	orrs	r0, r3
    4dc4:	81a0      	strh	r0, [r4, #12]
    4dc6:	2d00      	cmp	r5, #0
    4dc8:	d101      	bne.n	4dce <setvbuf+0xaa>
    4dca:	9d02      	ldr	r5, [sp, #8]
    4dcc:	e001      	b.n	4dd2 <setvbuf+0xae>
    4dce:	2f00      	cmp	r7, #0
    4dd0:	d125      	bne.n	4e1e <setvbuf+0xfa>
    4dd2:	0028      	movs	r0, r5
    4dd4:	f000 fb10 	bl	53f8 <malloc>
    4dd8:	9501      	str	r5, [sp, #4]
    4dda:	1e07      	subs	r7, r0, #0
    4ddc:	d11a      	bne.n	4e14 <setvbuf+0xf0>
    4dde:	9b02      	ldr	r3, [sp, #8]
    4de0:	9301      	str	r3, [sp, #4]
    4de2:	42ab      	cmp	r3, r5
    4de4:	d102      	bne.n	4dec <setvbuf+0xc8>
    4de6:	2001      	movs	r0, #1
    4de8:	4240      	negs	r0, r0
    4dea:	e006      	b.n	4dfa <setvbuf+0xd6>
    4dec:	9801      	ldr	r0, [sp, #4]
    4dee:	f000 fb03 	bl	53f8 <malloc>
    4df2:	1e07      	subs	r7, r0, #0
    4df4:	d10e      	bne.n	4e14 <setvbuf+0xf0>
    4df6:	e7f6      	b.n	4de6 <setvbuf+0xc2>
    4df8:	2000      	movs	r0, #0
    4dfa:	2202      	movs	r2, #2
    4dfc:	89a3      	ldrh	r3, [r4, #12]
    4dfe:	4313      	orrs	r3, r2
    4e00:	81a3      	strh	r3, [r4, #12]
    4e02:	2300      	movs	r3, #0
    4e04:	60a3      	str	r3, [r4, #8]
    4e06:	0023      	movs	r3, r4
    4e08:	3347      	adds	r3, #71	; 0x47
    4e0a:	6023      	str	r3, [r4, #0]
    4e0c:	6123      	str	r3, [r4, #16]
    4e0e:	2301      	movs	r3, #1
    4e10:	6163      	str	r3, [r4, #20]
    4e12:	e02a      	b.n	4e6a <setvbuf+0x146>
    4e14:	2280      	movs	r2, #128	; 0x80
    4e16:	89a3      	ldrh	r3, [r4, #12]
    4e18:	9d01      	ldr	r5, [sp, #4]
    4e1a:	4313      	orrs	r3, r2
    4e1c:	81a3      	strh	r3, [r4, #12]
    4e1e:	69b3      	ldr	r3, [r6, #24]
    4e20:	2b00      	cmp	r3, #0
    4e22:	d102      	bne.n	4e2a <setvbuf+0x106>
    4e24:	0030      	movs	r0, r6
    4e26:	f000 f9ef 	bl	5208 <__sinit>
    4e2a:	9b00      	ldr	r3, [sp, #0]
    4e2c:	2b01      	cmp	r3, #1
    4e2e:	d103      	bne.n	4e38 <setvbuf+0x114>
    4e30:	89a3      	ldrh	r3, [r4, #12]
    4e32:	9a00      	ldr	r2, [sp, #0]
    4e34:	431a      	orrs	r2, r3
    4e36:	81a2      	strh	r2, [r4, #12]
    4e38:	2308      	movs	r3, #8
    4e3a:	89a2      	ldrh	r2, [r4, #12]
    4e3c:	6027      	str	r7, [r4, #0]
    4e3e:	4013      	ands	r3, r2
    4e40:	6127      	str	r7, [r4, #16]
    4e42:	6165      	str	r5, [r4, #20]
    4e44:	1e18      	subs	r0, r3, #0
    4e46:	d00c      	beq.n	4e62 <setvbuf+0x13e>
    4e48:	2301      	movs	r3, #1
    4e4a:	401a      	ands	r2, r3
    4e4c:	2300      	movs	r3, #0
    4e4e:	1e10      	subs	r0, r2, #0
    4e50:	4298      	cmp	r0, r3
    4e52:	d004      	beq.n	4e5e <setvbuf+0x13a>
    4e54:	426d      	negs	r5, r5
    4e56:	60a3      	str	r3, [r4, #8]
    4e58:	61a5      	str	r5, [r4, #24]
    4e5a:	0018      	movs	r0, r3
    4e5c:	e005      	b.n	4e6a <setvbuf+0x146>
    4e5e:	60a5      	str	r5, [r4, #8]
    4e60:	e003      	b.n	4e6a <setvbuf+0x146>
    4e62:	60a3      	str	r3, [r4, #8]
    4e64:	e001      	b.n	4e6a <setvbuf+0x146>
    4e66:	2001      	movs	r0, #1
    4e68:	4240      	negs	r0, r0
    4e6a:	b005      	add	sp, #20
    4e6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4e6e:	46c0      	nop			; (mov r8, r8)
    4e70:	20000074 	.word	0x20000074
    4e74:	000057a4 	.word	0x000057a4
    4e78:	000057c4 	.word	0x000057c4
    4e7c:	000057e4 	.word	0x000057e4
    4e80:	fffff35c 	.word	0xfffff35c

00004e84 <__swbuf_r>:
    4e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4e86:	0005      	movs	r5, r0
    4e88:	000f      	movs	r7, r1
    4e8a:	0014      	movs	r4, r2
    4e8c:	2800      	cmp	r0, #0
    4e8e:	d004      	beq.n	4e9a <__swbuf_r+0x16>
    4e90:	6983      	ldr	r3, [r0, #24]
    4e92:	2b00      	cmp	r3, #0
    4e94:	d101      	bne.n	4e9a <__swbuf_r+0x16>
    4e96:	f000 f9b7 	bl	5208 <__sinit>
    4e9a:	4b23      	ldr	r3, [pc, #140]	; (4f28 <__swbuf_r+0xa4>)
    4e9c:	429c      	cmp	r4, r3
    4e9e:	d101      	bne.n	4ea4 <__swbuf_r+0x20>
    4ea0:	686c      	ldr	r4, [r5, #4]
    4ea2:	e008      	b.n	4eb6 <__swbuf_r+0x32>
    4ea4:	4b21      	ldr	r3, [pc, #132]	; (4f2c <__swbuf_r+0xa8>)
    4ea6:	429c      	cmp	r4, r3
    4ea8:	d101      	bne.n	4eae <__swbuf_r+0x2a>
    4eaa:	68ac      	ldr	r4, [r5, #8]
    4eac:	e003      	b.n	4eb6 <__swbuf_r+0x32>
    4eae:	4b20      	ldr	r3, [pc, #128]	; (4f30 <__swbuf_r+0xac>)
    4eb0:	429c      	cmp	r4, r3
    4eb2:	d100      	bne.n	4eb6 <__swbuf_r+0x32>
    4eb4:	68ec      	ldr	r4, [r5, #12]
    4eb6:	69a3      	ldr	r3, [r4, #24]
    4eb8:	60a3      	str	r3, [r4, #8]
    4eba:	89a3      	ldrh	r3, [r4, #12]
    4ebc:	071b      	lsls	r3, r3, #28
    4ebe:	d50a      	bpl.n	4ed6 <__swbuf_r+0x52>
    4ec0:	6923      	ldr	r3, [r4, #16]
    4ec2:	2b00      	cmp	r3, #0
    4ec4:	d007      	beq.n	4ed6 <__swbuf_r+0x52>
    4ec6:	6823      	ldr	r3, [r4, #0]
    4ec8:	6922      	ldr	r2, [r4, #16]
    4eca:	b2fe      	uxtb	r6, r7
    4ecc:	1a98      	subs	r0, r3, r2
    4ece:	6963      	ldr	r3, [r4, #20]
    4ed0:	4298      	cmp	r0, r3
    4ed2:	db0f      	blt.n	4ef4 <__swbuf_r+0x70>
    4ed4:	e008      	b.n	4ee8 <__swbuf_r+0x64>
    4ed6:	0021      	movs	r1, r4
    4ed8:	0028      	movs	r0, r5
    4eda:	f000 f82b 	bl	4f34 <__swsetup_r>
    4ede:	2800      	cmp	r0, #0
    4ee0:	d0f1      	beq.n	4ec6 <__swbuf_r+0x42>
    4ee2:	2001      	movs	r0, #1
    4ee4:	4240      	negs	r0, r0
    4ee6:	e01d      	b.n	4f24 <__swbuf_r+0xa0>
    4ee8:	0021      	movs	r1, r4
    4eea:	0028      	movs	r0, r5
    4eec:	f000 f91e 	bl	512c <_fflush_r>
    4ef0:	2800      	cmp	r0, #0
    4ef2:	d1f6      	bne.n	4ee2 <__swbuf_r+0x5e>
    4ef4:	68a3      	ldr	r3, [r4, #8]
    4ef6:	3001      	adds	r0, #1
    4ef8:	3b01      	subs	r3, #1
    4efa:	60a3      	str	r3, [r4, #8]
    4efc:	6823      	ldr	r3, [r4, #0]
    4efe:	1c5a      	adds	r2, r3, #1
    4f00:	6022      	str	r2, [r4, #0]
    4f02:	701f      	strb	r7, [r3, #0]
    4f04:	6963      	ldr	r3, [r4, #20]
    4f06:	4298      	cmp	r0, r3
    4f08:	d005      	beq.n	4f16 <__swbuf_r+0x92>
    4f0a:	89a3      	ldrh	r3, [r4, #12]
    4f0c:	0030      	movs	r0, r6
    4f0e:	07db      	lsls	r3, r3, #31
    4f10:	d508      	bpl.n	4f24 <__swbuf_r+0xa0>
    4f12:	2e0a      	cmp	r6, #10
    4f14:	d106      	bne.n	4f24 <__swbuf_r+0xa0>
    4f16:	0021      	movs	r1, r4
    4f18:	0028      	movs	r0, r5
    4f1a:	f000 f907 	bl	512c <_fflush_r>
    4f1e:	2800      	cmp	r0, #0
    4f20:	d1df      	bne.n	4ee2 <__swbuf_r+0x5e>
    4f22:	0030      	movs	r0, r6
    4f24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4f26:	46c0      	nop			; (mov r8, r8)
    4f28:	000057a4 	.word	0x000057a4
    4f2c:	000057c4 	.word	0x000057c4
    4f30:	000057e4 	.word	0x000057e4

00004f34 <__swsetup_r>:
    4f34:	4b36      	ldr	r3, [pc, #216]	; (5010 <__swsetup_r+0xdc>)
    4f36:	b570      	push	{r4, r5, r6, lr}
    4f38:	681d      	ldr	r5, [r3, #0]
    4f3a:	0006      	movs	r6, r0
    4f3c:	000c      	movs	r4, r1
    4f3e:	2d00      	cmp	r5, #0
    4f40:	d005      	beq.n	4f4e <__swsetup_r+0x1a>
    4f42:	69ab      	ldr	r3, [r5, #24]
    4f44:	2b00      	cmp	r3, #0
    4f46:	d102      	bne.n	4f4e <__swsetup_r+0x1a>
    4f48:	0028      	movs	r0, r5
    4f4a:	f000 f95d 	bl	5208 <__sinit>
    4f4e:	4b31      	ldr	r3, [pc, #196]	; (5014 <__swsetup_r+0xe0>)
    4f50:	429c      	cmp	r4, r3
    4f52:	d101      	bne.n	4f58 <__swsetup_r+0x24>
    4f54:	686c      	ldr	r4, [r5, #4]
    4f56:	e008      	b.n	4f6a <__swsetup_r+0x36>
    4f58:	4b2f      	ldr	r3, [pc, #188]	; (5018 <__swsetup_r+0xe4>)
    4f5a:	429c      	cmp	r4, r3
    4f5c:	d101      	bne.n	4f62 <__swsetup_r+0x2e>
    4f5e:	68ac      	ldr	r4, [r5, #8]
    4f60:	e003      	b.n	4f6a <__swsetup_r+0x36>
    4f62:	4b2e      	ldr	r3, [pc, #184]	; (501c <__swsetup_r+0xe8>)
    4f64:	429c      	cmp	r4, r3
    4f66:	d100      	bne.n	4f6a <__swsetup_r+0x36>
    4f68:	68ec      	ldr	r4, [r5, #12]
    4f6a:	220c      	movs	r2, #12
    4f6c:	5ea3      	ldrsh	r3, [r4, r2]
    4f6e:	b29a      	uxth	r2, r3
    4f70:	0711      	lsls	r1, r2, #28
    4f72:	d423      	bmi.n	4fbc <__swsetup_r+0x88>
    4f74:	06d1      	lsls	r1, r2, #27
    4f76:	d407      	bmi.n	4f88 <__swsetup_r+0x54>
    4f78:	2209      	movs	r2, #9
    4f7a:	2001      	movs	r0, #1
    4f7c:	6032      	str	r2, [r6, #0]
    4f7e:	3237      	adds	r2, #55	; 0x37
    4f80:	4313      	orrs	r3, r2
    4f82:	81a3      	strh	r3, [r4, #12]
    4f84:	4240      	negs	r0, r0
    4f86:	e042      	b.n	500e <__swsetup_r+0xda>
    4f88:	0753      	lsls	r3, r2, #29
    4f8a:	d513      	bpl.n	4fb4 <__swsetup_r+0x80>
    4f8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4f8e:	2900      	cmp	r1, #0
    4f90:	d008      	beq.n	4fa4 <__swsetup_r+0x70>
    4f92:	0023      	movs	r3, r4
    4f94:	3344      	adds	r3, #68	; 0x44
    4f96:	4299      	cmp	r1, r3
    4f98:	d002      	beq.n	4fa0 <__swsetup_r+0x6c>
    4f9a:	0030      	movs	r0, r6
    4f9c:	f000 fa36 	bl	540c <_free_r>
    4fa0:	2300      	movs	r3, #0
    4fa2:	6363      	str	r3, [r4, #52]	; 0x34
    4fa4:	2224      	movs	r2, #36	; 0x24
    4fa6:	89a3      	ldrh	r3, [r4, #12]
    4fa8:	4393      	bics	r3, r2
    4faa:	81a3      	strh	r3, [r4, #12]
    4fac:	2300      	movs	r3, #0
    4fae:	6063      	str	r3, [r4, #4]
    4fb0:	6923      	ldr	r3, [r4, #16]
    4fb2:	6023      	str	r3, [r4, #0]
    4fb4:	2208      	movs	r2, #8
    4fb6:	89a3      	ldrh	r3, [r4, #12]
    4fb8:	4313      	orrs	r3, r2
    4fba:	81a3      	strh	r3, [r4, #12]
    4fbc:	6923      	ldr	r3, [r4, #16]
    4fbe:	2b00      	cmp	r3, #0
    4fc0:	d10b      	bne.n	4fda <__swsetup_r+0xa6>
    4fc2:	23a0      	movs	r3, #160	; 0xa0
    4fc4:	89a2      	ldrh	r2, [r4, #12]
    4fc6:	009b      	lsls	r3, r3, #2
    4fc8:	4013      	ands	r3, r2
    4fca:	2280      	movs	r2, #128	; 0x80
    4fcc:	0092      	lsls	r2, r2, #2
    4fce:	4293      	cmp	r3, r2
    4fd0:	d003      	beq.n	4fda <__swsetup_r+0xa6>
    4fd2:	0021      	movs	r1, r4
    4fd4:	0030      	movs	r0, r6
    4fd6:	f000 f9d1 	bl	537c <__smakebuf_r>
    4fda:	2301      	movs	r3, #1
    4fdc:	89a2      	ldrh	r2, [r4, #12]
    4fde:	4013      	ands	r3, r2
    4fe0:	d005      	beq.n	4fee <__swsetup_r+0xba>
    4fe2:	2300      	movs	r3, #0
    4fe4:	60a3      	str	r3, [r4, #8]
    4fe6:	6963      	ldr	r3, [r4, #20]
    4fe8:	425b      	negs	r3, r3
    4fea:	61a3      	str	r3, [r4, #24]
    4fec:	e003      	b.n	4ff6 <__swsetup_r+0xc2>
    4fee:	0792      	lsls	r2, r2, #30
    4ff0:	d400      	bmi.n	4ff4 <__swsetup_r+0xc0>
    4ff2:	6963      	ldr	r3, [r4, #20]
    4ff4:	60a3      	str	r3, [r4, #8]
    4ff6:	2000      	movs	r0, #0
    4ff8:	6923      	ldr	r3, [r4, #16]
    4ffa:	4283      	cmp	r3, r0
    4ffc:	d107      	bne.n	500e <__swsetup_r+0xda>
    4ffe:	220c      	movs	r2, #12
    5000:	5ea3      	ldrsh	r3, [r4, r2]
    5002:	061a      	lsls	r2, r3, #24
    5004:	d503      	bpl.n	500e <__swsetup_r+0xda>
    5006:	2240      	movs	r2, #64	; 0x40
    5008:	4313      	orrs	r3, r2
    500a:	81a3      	strh	r3, [r4, #12]
    500c:	3801      	subs	r0, #1
    500e:	bd70      	pop	{r4, r5, r6, pc}
    5010:	20000074 	.word	0x20000074
    5014:	000057a4 	.word	0x000057a4
    5018:	000057c4 	.word	0x000057c4
    501c:	000057e4 	.word	0x000057e4

00005020 <__sflush_r>:
    5020:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5022:	898a      	ldrh	r2, [r1, #12]
    5024:	0005      	movs	r5, r0
    5026:	000c      	movs	r4, r1
    5028:	0713      	lsls	r3, r2, #28
    502a:	d45a      	bmi.n	50e2 <__sflush_r+0xc2>
    502c:	684b      	ldr	r3, [r1, #4]
    502e:	2b00      	cmp	r3, #0
    5030:	dc02      	bgt.n	5038 <__sflush_r+0x18>
    5032:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    5034:	2b00      	cmp	r3, #0
    5036:	dd19      	ble.n	506c <__sflush_r+0x4c>
    5038:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    503a:	2f00      	cmp	r7, #0
    503c:	d016      	beq.n	506c <__sflush_r+0x4c>
    503e:	2300      	movs	r3, #0
    5040:	682e      	ldr	r6, [r5, #0]
    5042:	602b      	str	r3, [r5, #0]
    5044:	2380      	movs	r3, #128	; 0x80
    5046:	015b      	lsls	r3, r3, #5
    5048:	401a      	ands	r2, r3
    504a:	d001      	beq.n	5050 <__sflush_r+0x30>
    504c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    504e:	e014      	b.n	507a <__sflush_r+0x5a>
    5050:	2301      	movs	r3, #1
    5052:	6a21      	ldr	r1, [r4, #32]
    5054:	0028      	movs	r0, r5
    5056:	47b8      	blx	r7
    5058:	1c43      	adds	r3, r0, #1
    505a:	d10e      	bne.n	507a <__sflush_r+0x5a>
    505c:	682b      	ldr	r3, [r5, #0]
    505e:	2b00      	cmp	r3, #0
    5060:	d00b      	beq.n	507a <__sflush_r+0x5a>
    5062:	2b1d      	cmp	r3, #29
    5064:	d001      	beq.n	506a <__sflush_r+0x4a>
    5066:	2b16      	cmp	r3, #22
    5068:	d102      	bne.n	5070 <__sflush_r+0x50>
    506a:	602e      	str	r6, [r5, #0]
    506c:	2000      	movs	r0, #0
    506e:	e05a      	b.n	5126 <__sflush_r+0x106>
    5070:	2240      	movs	r2, #64	; 0x40
    5072:	89a3      	ldrh	r3, [r4, #12]
    5074:	4313      	orrs	r3, r2
    5076:	81a3      	strh	r3, [r4, #12]
    5078:	e055      	b.n	5126 <__sflush_r+0x106>
    507a:	89a3      	ldrh	r3, [r4, #12]
    507c:	075b      	lsls	r3, r3, #29
    507e:	d506      	bpl.n	508e <__sflush_r+0x6e>
    5080:	6863      	ldr	r3, [r4, #4]
    5082:	1ac0      	subs	r0, r0, r3
    5084:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5086:	2b00      	cmp	r3, #0
    5088:	d001      	beq.n	508e <__sflush_r+0x6e>
    508a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    508c:	1ac0      	subs	r0, r0, r3
    508e:	2300      	movs	r3, #0
    5090:	0002      	movs	r2, r0
    5092:	6a21      	ldr	r1, [r4, #32]
    5094:	0028      	movs	r0, r5
    5096:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    5098:	47b8      	blx	r7
    509a:	89a3      	ldrh	r3, [r4, #12]
    509c:	1c42      	adds	r2, r0, #1
    509e:	d106      	bne.n	50ae <__sflush_r+0x8e>
    50a0:	6829      	ldr	r1, [r5, #0]
    50a2:	291d      	cmp	r1, #29
    50a4:	d83a      	bhi.n	511c <__sflush_r+0xfc>
    50a6:	4a20      	ldr	r2, [pc, #128]	; (5128 <__sflush_r+0x108>)
    50a8:	40ca      	lsrs	r2, r1
    50aa:	07d2      	lsls	r2, r2, #31
    50ac:	d536      	bpl.n	511c <__sflush_r+0xfc>
    50ae:	2200      	movs	r2, #0
    50b0:	6062      	str	r2, [r4, #4]
    50b2:	6922      	ldr	r2, [r4, #16]
    50b4:	6022      	str	r2, [r4, #0]
    50b6:	04db      	lsls	r3, r3, #19
    50b8:	d505      	bpl.n	50c6 <__sflush_r+0xa6>
    50ba:	1c43      	adds	r3, r0, #1
    50bc:	d102      	bne.n	50c4 <__sflush_r+0xa4>
    50be:	682b      	ldr	r3, [r5, #0]
    50c0:	2b00      	cmp	r3, #0
    50c2:	d100      	bne.n	50c6 <__sflush_r+0xa6>
    50c4:	6560      	str	r0, [r4, #84]	; 0x54
    50c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
    50c8:	602e      	str	r6, [r5, #0]
    50ca:	2900      	cmp	r1, #0
    50cc:	d0ce      	beq.n	506c <__sflush_r+0x4c>
    50ce:	0023      	movs	r3, r4
    50d0:	3344      	adds	r3, #68	; 0x44
    50d2:	4299      	cmp	r1, r3
    50d4:	d002      	beq.n	50dc <__sflush_r+0xbc>
    50d6:	0028      	movs	r0, r5
    50d8:	f000 f998 	bl	540c <_free_r>
    50dc:	2000      	movs	r0, #0
    50de:	6360      	str	r0, [r4, #52]	; 0x34
    50e0:	e021      	b.n	5126 <__sflush_r+0x106>
    50e2:	690f      	ldr	r7, [r1, #16]
    50e4:	2f00      	cmp	r7, #0
    50e6:	d0c1      	beq.n	506c <__sflush_r+0x4c>
    50e8:	680b      	ldr	r3, [r1, #0]
    50ea:	600f      	str	r7, [r1, #0]
    50ec:	1bdb      	subs	r3, r3, r7
    50ee:	9301      	str	r3, [sp, #4]
    50f0:	2300      	movs	r3, #0
    50f2:	0792      	lsls	r2, r2, #30
    50f4:	d100      	bne.n	50f8 <__sflush_r+0xd8>
    50f6:	694b      	ldr	r3, [r1, #20]
    50f8:	60a3      	str	r3, [r4, #8]
    50fa:	e003      	b.n	5104 <__sflush_r+0xe4>
    50fc:	9b01      	ldr	r3, [sp, #4]
    50fe:	183f      	adds	r7, r7, r0
    5100:	1a1b      	subs	r3, r3, r0
    5102:	9301      	str	r3, [sp, #4]
    5104:	9b01      	ldr	r3, [sp, #4]
    5106:	2b00      	cmp	r3, #0
    5108:	ddb0      	ble.n	506c <__sflush_r+0x4c>
    510a:	9b01      	ldr	r3, [sp, #4]
    510c:	003a      	movs	r2, r7
    510e:	6a21      	ldr	r1, [r4, #32]
    5110:	0028      	movs	r0, r5
    5112:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    5114:	47b0      	blx	r6
    5116:	2800      	cmp	r0, #0
    5118:	dcf0      	bgt.n	50fc <__sflush_r+0xdc>
    511a:	89a3      	ldrh	r3, [r4, #12]
    511c:	2240      	movs	r2, #64	; 0x40
    511e:	2001      	movs	r0, #1
    5120:	4313      	orrs	r3, r2
    5122:	81a3      	strh	r3, [r4, #12]
    5124:	4240      	negs	r0, r0
    5126:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5128:	20400001 	.word	0x20400001

0000512c <_fflush_r>:
    512c:	690b      	ldr	r3, [r1, #16]
    512e:	b570      	push	{r4, r5, r6, lr}
    5130:	0005      	movs	r5, r0
    5132:	000c      	movs	r4, r1
    5134:	2b00      	cmp	r3, #0
    5136:	d101      	bne.n	513c <_fflush_r+0x10>
    5138:	2000      	movs	r0, #0
    513a:	e01c      	b.n	5176 <_fflush_r+0x4a>
    513c:	2800      	cmp	r0, #0
    513e:	d004      	beq.n	514a <_fflush_r+0x1e>
    5140:	6983      	ldr	r3, [r0, #24]
    5142:	2b00      	cmp	r3, #0
    5144:	d101      	bne.n	514a <_fflush_r+0x1e>
    5146:	f000 f85f 	bl	5208 <__sinit>
    514a:	4b0b      	ldr	r3, [pc, #44]	; (5178 <_fflush_r+0x4c>)
    514c:	429c      	cmp	r4, r3
    514e:	d101      	bne.n	5154 <_fflush_r+0x28>
    5150:	686c      	ldr	r4, [r5, #4]
    5152:	e008      	b.n	5166 <_fflush_r+0x3a>
    5154:	4b09      	ldr	r3, [pc, #36]	; (517c <_fflush_r+0x50>)
    5156:	429c      	cmp	r4, r3
    5158:	d101      	bne.n	515e <_fflush_r+0x32>
    515a:	68ac      	ldr	r4, [r5, #8]
    515c:	e003      	b.n	5166 <_fflush_r+0x3a>
    515e:	4b08      	ldr	r3, [pc, #32]	; (5180 <_fflush_r+0x54>)
    5160:	429c      	cmp	r4, r3
    5162:	d100      	bne.n	5166 <_fflush_r+0x3a>
    5164:	68ec      	ldr	r4, [r5, #12]
    5166:	220c      	movs	r2, #12
    5168:	5ea3      	ldrsh	r3, [r4, r2]
    516a:	2b00      	cmp	r3, #0
    516c:	d0e4      	beq.n	5138 <_fflush_r+0xc>
    516e:	0021      	movs	r1, r4
    5170:	0028      	movs	r0, r5
    5172:	f7ff ff55 	bl	5020 <__sflush_r>
    5176:	bd70      	pop	{r4, r5, r6, pc}
    5178:	000057a4 	.word	0x000057a4
    517c:	000057c4 	.word	0x000057c4
    5180:	000057e4 	.word	0x000057e4

00005184 <_cleanup_r>:
    5184:	b510      	push	{r4, lr}
    5186:	4902      	ldr	r1, [pc, #8]	; (5190 <_cleanup_r+0xc>)
    5188:	f000 f8b0 	bl	52ec <_fwalk_reent>
    518c:	bd10      	pop	{r4, pc}
    518e:	46c0      	nop			; (mov r8, r8)
    5190:	0000512d 	.word	0x0000512d

00005194 <std.isra.0>:
    5194:	2300      	movs	r3, #0
    5196:	b510      	push	{r4, lr}
    5198:	0004      	movs	r4, r0
    519a:	6003      	str	r3, [r0, #0]
    519c:	6043      	str	r3, [r0, #4]
    519e:	6083      	str	r3, [r0, #8]
    51a0:	8181      	strh	r1, [r0, #12]
    51a2:	6643      	str	r3, [r0, #100]	; 0x64
    51a4:	81c2      	strh	r2, [r0, #14]
    51a6:	6103      	str	r3, [r0, #16]
    51a8:	6143      	str	r3, [r0, #20]
    51aa:	6183      	str	r3, [r0, #24]
    51ac:	0019      	movs	r1, r3
    51ae:	2208      	movs	r2, #8
    51b0:	305c      	adds	r0, #92	; 0x5c
    51b2:	f7ff fcfc 	bl	4bae <memset>
    51b6:	4b05      	ldr	r3, [pc, #20]	; (51cc <std.isra.0+0x38>)
    51b8:	6224      	str	r4, [r4, #32]
    51ba:	6263      	str	r3, [r4, #36]	; 0x24
    51bc:	4b04      	ldr	r3, [pc, #16]	; (51d0 <std.isra.0+0x3c>)
    51be:	62a3      	str	r3, [r4, #40]	; 0x28
    51c0:	4b04      	ldr	r3, [pc, #16]	; (51d4 <std.isra.0+0x40>)
    51c2:	62e3      	str	r3, [r4, #44]	; 0x2c
    51c4:	4b04      	ldr	r3, [pc, #16]	; (51d8 <std.isra.0+0x44>)
    51c6:	6323      	str	r3, [r4, #48]	; 0x30
    51c8:	bd10      	pop	{r4, pc}
    51ca:	46c0      	nop			; (mov r8, r8)
    51cc:	00005569 	.word	0x00005569
    51d0:	00005591 	.word	0x00005591
    51d4:	000055c9 	.word	0x000055c9
    51d8:	000055f5 	.word	0x000055f5

000051dc <__sfmoreglue>:
    51dc:	b570      	push	{r4, r5, r6, lr}
    51de:	2568      	movs	r5, #104	; 0x68
    51e0:	1e4b      	subs	r3, r1, #1
    51e2:	435d      	muls	r5, r3
    51e4:	000e      	movs	r6, r1
    51e6:	0029      	movs	r1, r5
    51e8:	3174      	adds	r1, #116	; 0x74
    51ea:	f000 f955 	bl	5498 <_malloc_r>
    51ee:	1e04      	subs	r4, r0, #0
    51f0:	d008      	beq.n	5204 <__sfmoreglue+0x28>
    51f2:	2100      	movs	r1, #0
    51f4:	002a      	movs	r2, r5
    51f6:	6001      	str	r1, [r0, #0]
    51f8:	6046      	str	r6, [r0, #4]
    51fa:	300c      	adds	r0, #12
    51fc:	60a0      	str	r0, [r4, #8]
    51fe:	3268      	adds	r2, #104	; 0x68
    5200:	f7ff fcd5 	bl	4bae <memset>
    5204:	0020      	movs	r0, r4
    5206:	bd70      	pop	{r4, r5, r6, pc}

00005208 <__sinit>:
    5208:	6983      	ldr	r3, [r0, #24]
    520a:	b513      	push	{r0, r1, r4, lr}
    520c:	0004      	movs	r4, r0
    520e:	2b00      	cmp	r3, #0
    5210:	d128      	bne.n	5264 <__sinit+0x5c>
    5212:	6483      	str	r3, [r0, #72]	; 0x48
    5214:	64c3      	str	r3, [r0, #76]	; 0x4c
    5216:	6503      	str	r3, [r0, #80]	; 0x50
    5218:	4b13      	ldr	r3, [pc, #76]	; (5268 <__sinit+0x60>)
    521a:	4a14      	ldr	r2, [pc, #80]	; (526c <__sinit+0x64>)
    521c:	681b      	ldr	r3, [r3, #0]
    521e:	6282      	str	r2, [r0, #40]	; 0x28
    5220:	9301      	str	r3, [sp, #4]
    5222:	4298      	cmp	r0, r3
    5224:	d101      	bne.n	522a <__sinit+0x22>
    5226:	2301      	movs	r3, #1
    5228:	6183      	str	r3, [r0, #24]
    522a:	0020      	movs	r0, r4
    522c:	f000 f820 	bl	5270 <__sfp>
    5230:	6060      	str	r0, [r4, #4]
    5232:	0020      	movs	r0, r4
    5234:	f000 f81c 	bl	5270 <__sfp>
    5238:	60a0      	str	r0, [r4, #8]
    523a:	0020      	movs	r0, r4
    523c:	f000 f818 	bl	5270 <__sfp>
    5240:	2200      	movs	r2, #0
    5242:	60e0      	str	r0, [r4, #12]
    5244:	2104      	movs	r1, #4
    5246:	6860      	ldr	r0, [r4, #4]
    5248:	f7ff ffa4 	bl	5194 <std.isra.0>
    524c:	2201      	movs	r2, #1
    524e:	2109      	movs	r1, #9
    5250:	68a0      	ldr	r0, [r4, #8]
    5252:	f7ff ff9f 	bl	5194 <std.isra.0>
    5256:	2202      	movs	r2, #2
    5258:	2112      	movs	r1, #18
    525a:	68e0      	ldr	r0, [r4, #12]
    525c:	f7ff ff9a 	bl	5194 <std.isra.0>
    5260:	2301      	movs	r3, #1
    5262:	61a3      	str	r3, [r4, #24]
    5264:	bd13      	pop	{r0, r1, r4, pc}
    5266:	46c0      	nop			; (mov r8, r8)
    5268:	000057a0 	.word	0x000057a0
    526c:	00005185 	.word	0x00005185

00005270 <__sfp>:
    5270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5272:	4b1d      	ldr	r3, [pc, #116]	; (52e8 <__sfp+0x78>)
    5274:	0006      	movs	r6, r0
    5276:	681d      	ldr	r5, [r3, #0]
    5278:	69ab      	ldr	r3, [r5, #24]
    527a:	2b00      	cmp	r3, #0
    527c:	d102      	bne.n	5284 <__sfp+0x14>
    527e:	0028      	movs	r0, r5
    5280:	f7ff ffc2 	bl	5208 <__sinit>
    5284:	3548      	adds	r5, #72	; 0x48
    5286:	68ac      	ldr	r4, [r5, #8]
    5288:	686b      	ldr	r3, [r5, #4]
    528a:	3b01      	subs	r3, #1
    528c:	d405      	bmi.n	529a <__sfp+0x2a>
    528e:	220c      	movs	r2, #12
    5290:	5ea7      	ldrsh	r7, [r4, r2]
    5292:	2f00      	cmp	r7, #0
    5294:	d010      	beq.n	52b8 <__sfp+0x48>
    5296:	3468      	adds	r4, #104	; 0x68
    5298:	e7f7      	b.n	528a <__sfp+0x1a>
    529a:	682b      	ldr	r3, [r5, #0]
    529c:	2b00      	cmp	r3, #0
    529e:	d001      	beq.n	52a4 <__sfp+0x34>
    52a0:	682d      	ldr	r5, [r5, #0]
    52a2:	e7f0      	b.n	5286 <__sfp+0x16>
    52a4:	2104      	movs	r1, #4
    52a6:	0030      	movs	r0, r6
    52a8:	f7ff ff98 	bl	51dc <__sfmoreglue>
    52ac:	6028      	str	r0, [r5, #0]
    52ae:	2800      	cmp	r0, #0
    52b0:	d1f6      	bne.n	52a0 <__sfp+0x30>
    52b2:	230c      	movs	r3, #12
    52b4:	6033      	str	r3, [r6, #0]
    52b6:	e016      	b.n	52e6 <__sfp+0x76>
    52b8:	2301      	movs	r3, #1
    52ba:	0020      	movs	r0, r4
    52bc:	425b      	negs	r3, r3
    52be:	81e3      	strh	r3, [r4, #14]
    52c0:	3302      	adds	r3, #2
    52c2:	81a3      	strh	r3, [r4, #12]
    52c4:	6667      	str	r7, [r4, #100]	; 0x64
    52c6:	6027      	str	r7, [r4, #0]
    52c8:	60a7      	str	r7, [r4, #8]
    52ca:	6067      	str	r7, [r4, #4]
    52cc:	6127      	str	r7, [r4, #16]
    52ce:	6167      	str	r7, [r4, #20]
    52d0:	61a7      	str	r7, [r4, #24]
    52d2:	305c      	adds	r0, #92	; 0x5c
    52d4:	2208      	movs	r2, #8
    52d6:	0039      	movs	r1, r7
    52d8:	f7ff fc69 	bl	4bae <memset>
    52dc:	0020      	movs	r0, r4
    52de:	6367      	str	r7, [r4, #52]	; 0x34
    52e0:	63a7      	str	r7, [r4, #56]	; 0x38
    52e2:	64a7      	str	r7, [r4, #72]	; 0x48
    52e4:	64e7      	str	r7, [r4, #76]	; 0x4c
    52e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    52e8:	000057a0 	.word	0x000057a0

000052ec <_fwalk_reent>:
    52ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    52ee:	0004      	movs	r4, r0
    52f0:	0007      	movs	r7, r0
    52f2:	2600      	movs	r6, #0
    52f4:	9101      	str	r1, [sp, #4]
    52f6:	3448      	adds	r4, #72	; 0x48
    52f8:	2c00      	cmp	r4, #0
    52fa:	d016      	beq.n	532a <_fwalk_reent+0x3e>
    52fc:	6863      	ldr	r3, [r4, #4]
    52fe:	68a5      	ldr	r5, [r4, #8]
    5300:	9300      	str	r3, [sp, #0]
    5302:	9b00      	ldr	r3, [sp, #0]
    5304:	3b01      	subs	r3, #1
    5306:	9300      	str	r3, [sp, #0]
    5308:	d40d      	bmi.n	5326 <_fwalk_reent+0x3a>
    530a:	89ab      	ldrh	r3, [r5, #12]
    530c:	2b01      	cmp	r3, #1
    530e:	d908      	bls.n	5322 <_fwalk_reent+0x36>
    5310:	220e      	movs	r2, #14
    5312:	5eab      	ldrsh	r3, [r5, r2]
    5314:	3301      	adds	r3, #1
    5316:	d004      	beq.n	5322 <_fwalk_reent+0x36>
    5318:	0029      	movs	r1, r5
    531a:	0038      	movs	r0, r7
    531c:	9b01      	ldr	r3, [sp, #4]
    531e:	4798      	blx	r3
    5320:	4306      	orrs	r6, r0
    5322:	3568      	adds	r5, #104	; 0x68
    5324:	e7ed      	b.n	5302 <_fwalk_reent+0x16>
    5326:	6824      	ldr	r4, [r4, #0]
    5328:	e7e6      	b.n	52f8 <_fwalk_reent+0xc>
    532a:	0030      	movs	r0, r6
    532c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00005330 <__swhatbuf_r>:
    5330:	b570      	push	{r4, r5, r6, lr}
    5332:	000e      	movs	r6, r1
    5334:	001d      	movs	r5, r3
    5336:	230e      	movs	r3, #14
    5338:	5ec9      	ldrsh	r1, [r1, r3]
    533a:	b090      	sub	sp, #64	; 0x40
    533c:	0014      	movs	r4, r2
    533e:	2900      	cmp	r1, #0
    5340:	da06      	bge.n	5350 <__swhatbuf_r+0x20>
    5342:	2300      	movs	r3, #0
    5344:	602b      	str	r3, [r5, #0]
    5346:	89b3      	ldrh	r3, [r6, #12]
    5348:	061b      	lsls	r3, r3, #24
    534a:	d50f      	bpl.n	536c <__swhatbuf_r+0x3c>
    534c:	2340      	movs	r3, #64	; 0x40
    534e:	e00f      	b.n	5370 <__swhatbuf_r+0x40>
    5350:	aa01      	add	r2, sp, #4
    5352:	f000 f97b 	bl	564c <_fstat_r>
    5356:	2800      	cmp	r0, #0
    5358:	dbf3      	blt.n	5342 <__swhatbuf_r+0x12>
    535a:	23f0      	movs	r3, #240	; 0xf0
    535c:	9a02      	ldr	r2, [sp, #8]
    535e:	021b      	lsls	r3, r3, #8
    5360:	4013      	ands	r3, r2
    5362:	4a05      	ldr	r2, [pc, #20]	; (5378 <__swhatbuf_r+0x48>)
    5364:	189b      	adds	r3, r3, r2
    5366:	425a      	negs	r2, r3
    5368:	4153      	adcs	r3, r2
    536a:	602b      	str	r3, [r5, #0]
    536c:	2380      	movs	r3, #128	; 0x80
    536e:	00db      	lsls	r3, r3, #3
    5370:	2000      	movs	r0, #0
    5372:	6023      	str	r3, [r4, #0]
    5374:	b010      	add	sp, #64	; 0x40
    5376:	bd70      	pop	{r4, r5, r6, pc}
    5378:	ffffe000 	.word	0xffffe000

0000537c <__smakebuf_r>:
    537c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    537e:	2602      	movs	r6, #2
    5380:	898b      	ldrh	r3, [r1, #12]
    5382:	0005      	movs	r5, r0
    5384:	000c      	movs	r4, r1
    5386:	4233      	tst	r3, r6
    5388:	d110      	bne.n	53ac <__smakebuf_r+0x30>
    538a:	ab01      	add	r3, sp, #4
    538c:	466a      	mov	r2, sp
    538e:	f7ff ffcf 	bl	5330 <__swhatbuf_r>
    5392:	9900      	ldr	r1, [sp, #0]
    5394:	0007      	movs	r7, r0
    5396:	0028      	movs	r0, r5
    5398:	f000 f87e 	bl	5498 <_malloc_r>
    539c:	2800      	cmp	r0, #0
    539e:	d10c      	bne.n	53ba <__smakebuf_r+0x3e>
    53a0:	220c      	movs	r2, #12
    53a2:	5ea3      	ldrsh	r3, [r4, r2]
    53a4:	059a      	lsls	r2, r3, #22
    53a6:	d423      	bmi.n	53f0 <__smakebuf_r+0x74>
    53a8:	4333      	orrs	r3, r6
    53aa:	81a3      	strh	r3, [r4, #12]
    53ac:	0023      	movs	r3, r4
    53ae:	3347      	adds	r3, #71	; 0x47
    53b0:	6023      	str	r3, [r4, #0]
    53b2:	6123      	str	r3, [r4, #16]
    53b4:	2301      	movs	r3, #1
    53b6:	6163      	str	r3, [r4, #20]
    53b8:	e01a      	b.n	53f0 <__smakebuf_r+0x74>
    53ba:	2280      	movs	r2, #128	; 0x80
    53bc:	4b0d      	ldr	r3, [pc, #52]	; (53f4 <__smakebuf_r+0x78>)
    53be:	62ab      	str	r3, [r5, #40]	; 0x28
    53c0:	89a3      	ldrh	r3, [r4, #12]
    53c2:	6020      	str	r0, [r4, #0]
    53c4:	4313      	orrs	r3, r2
    53c6:	81a3      	strh	r3, [r4, #12]
    53c8:	9b00      	ldr	r3, [sp, #0]
    53ca:	6120      	str	r0, [r4, #16]
    53cc:	6163      	str	r3, [r4, #20]
    53ce:	9b01      	ldr	r3, [sp, #4]
    53d0:	2b00      	cmp	r3, #0
    53d2:	d00a      	beq.n	53ea <__smakebuf_r+0x6e>
    53d4:	230e      	movs	r3, #14
    53d6:	5ee1      	ldrsh	r1, [r4, r3]
    53d8:	0028      	movs	r0, r5
    53da:	f000 f949 	bl	5670 <_isatty_r>
    53de:	2800      	cmp	r0, #0
    53e0:	d003      	beq.n	53ea <__smakebuf_r+0x6e>
    53e2:	2201      	movs	r2, #1
    53e4:	89a3      	ldrh	r3, [r4, #12]
    53e6:	4313      	orrs	r3, r2
    53e8:	81a3      	strh	r3, [r4, #12]
    53ea:	89a3      	ldrh	r3, [r4, #12]
    53ec:	431f      	orrs	r7, r3
    53ee:	81a7      	strh	r7, [r4, #12]
    53f0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    53f2:	46c0      	nop			; (mov r8, r8)
    53f4:	00005185 	.word	0x00005185

000053f8 <malloc>:
    53f8:	b510      	push	{r4, lr}
    53fa:	4b03      	ldr	r3, [pc, #12]	; (5408 <malloc+0x10>)
    53fc:	0001      	movs	r1, r0
    53fe:	6818      	ldr	r0, [r3, #0]
    5400:	f000 f84a 	bl	5498 <_malloc_r>
    5404:	bd10      	pop	{r4, pc}
    5406:	46c0      	nop			; (mov r8, r8)
    5408:	20000074 	.word	0x20000074

0000540c <_free_r>:
    540c:	b530      	push	{r4, r5, lr}
    540e:	2900      	cmp	r1, #0
    5410:	d03e      	beq.n	5490 <_free_r+0x84>
    5412:	3904      	subs	r1, #4
    5414:	680b      	ldr	r3, [r1, #0]
    5416:	2b00      	cmp	r3, #0
    5418:	da00      	bge.n	541c <_free_r+0x10>
    541a:	18c9      	adds	r1, r1, r3
    541c:	4a1d      	ldr	r2, [pc, #116]	; (5494 <_free_r+0x88>)
    541e:	6813      	ldr	r3, [r2, #0]
    5420:	0014      	movs	r4, r2
    5422:	2b00      	cmp	r3, #0
    5424:	d102      	bne.n	542c <_free_r+0x20>
    5426:	604b      	str	r3, [r1, #4]
    5428:	6011      	str	r1, [r2, #0]
    542a:	e031      	b.n	5490 <_free_r+0x84>
    542c:	428b      	cmp	r3, r1
    542e:	d90d      	bls.n	544c <_free_r+0x40>
    5430:	680a      	ldr	r2, [r1, #0]
    5432:	1888      	adds	r0, r1, r2
    5434:	4283      	cmp	r3, r0
    5436:	d103      	bne.n	5440 <_free_r+0x34>
    5438:	6818      	ldr	r0, [r3, #0]
    543a:	685b      	ldr	r3, [r3, #4]
    543c:	1882      	adds	r2, r0, r2
    543e:	600a      	str	r2, [r1, #0]
    5440:	604b      	str	r3, [r1, #4]
    5442:	6021      	str	r1, [r4, #0]
    5444:	e024      	b.n	5490 <_free_r+0x84>
    5446:	428a      	cmp	r2, r1
    5448:	d803      	bhi.n	5452 <_free_r+0x46>
    544a:	0013      	movs	r3, r2
    544c:	685a      	ldr	r2, [r3, #4]
    544e:	2a00      	cmp	r2, #0
    5450:	d1f9      	bne.n	5446 <_free_r+0x3a>
    5452:	681d      	ldr	r5, [r3, #0]
    5454:	195c      	adds	r4, r3, r5
    5456:	428c      	cmp	r4, r1
    5458:	d10b      	bne.n	5472 <_free_r+0x66>
    545a:	6809      	ldr	r1, [r1, #0]
    545c:	1869      	adds	r1, r5, r1
    545e:	1858      	adds	r0, r3, r1
    5460:	6019      	str	r1, [r3, #0]
    5462:	4282      	cmp	r2, r0
    5464:	d114      	bne.n	5490 <_free_r+0x84>
    5466:	6810      	ldr	r0, [r2, #0]
    5468:	6852      	ldr	r2, [r2, #4]
    546a:	1841      	adds	r1, r0, r1
    546c:	6019      	str	r1, [r3, #0]
    546e:	605a      	str	r2, [r3, #4]
    5470:	e00e      	b.n	5490 <_free_r+0x84>
    5472:	428c      	cmp	r4, r1
    5474:	d902      	bls.n	547c <_free_r+0x70>
    5476:	230c      	movs	r3, #12
    5478:	6003      	str	r3, [r0, #0]
    547a:	e009      	b.n	5490 <_free_r+0x84>
    547c:	6808      	ldr	r0, [r1, #0]
    547e:	180c      	adds	r4, r1, r0
    5480:	42a2      	cmp	r2, r4
    5482:	d103      	bne.n	548c <_free_r+0x80>
    5484:	6814      	ldr	r4, [r2, #0]
    5486:	6852      	ldr	r2, [r2, #4]
    5488:	1820      	adds	r0, r4, r0
    548a:	6008      	str	r0, [r1, #0]
    548c:	604a      	str	r2, [r1, #4]
    548e:	6059      	str	r1, [r3, #4]
    5490:	bd30      	pop	{r4, r5, pc}
    5492:	46c0      	nop			; (mov r8, r8)
    5494:	20000810 	.word	0x20000810

00005498 <_malloc_r>:
    5498:	2303      	movs	r3, #3
    549a:	b570      	push	{r4, r5, r6, lr}
    549c:	1ccd      	adds	r5, r1, #3
    549e:	439d      	bics	r5, r3
    54a0:	3508      	adds	r5, #8
    54a2:	0006      	movs	r6, r0
    54a4:	2d0c      	cmp	r5, #12
    54a6:	d201      	bcs.n	54ac <_malloc_r+0x14>
    54a8:	250c      	movs	r5, #12
    54aa:	e005      	b.n	54b8 <_malloc_r+0x20>
    54ac:	2d00      	cmp	r5, #0
    54ae:	da03      	bge.n	54b8 <_malloc_r+0x20>
    54b0:	230c      	movs	r3, #12
    54b2:	2000      	movs	r0, #0
    54b4:	6033      	str	r3, [r6, #0]
    54b6:	e040      	b.n	553a <_malloc_r+0xa2>
    54b8:	42a9      	cmp	r1, r5
    54ba:	d8f9      	bhi.n	54b0 <_malloc_r+0x18>
    54bc:	4b1f      	ldr	r3, [pc, #124]	; (553c <_malloc_r+0xa4>)
    54be:	681c      	ldr	r4, [r3, #0]
    54c0:	001a      	movs	r2, r3
    54c2:	0021      	movs	r1, r4
    54c4:	2900      	cmp	r1, #0
    54c6:	d013      	beq.n	54f0 <_malloc_r+0x58>
    54c8:	680b      	ldr	r3, [r1, #0]
    54ca:	1b5b      	subs	r3, r3, r5
    54cc:	d40d      	bmi.n	54ea <_malloc_r+0x52>
    54ce:	2b0b      	cmp	r3, #11
    54d0:	d902      	bls.n	54d8 <_malloc_r+0x40>
    54d2:	600b      	str	r3, [r1, #0]
    54d4:	18cc      	adds	r4, r1, r3
    54d6:	e01e      	b.n	5516 <_malloc_r+0x7e>
    54d8:	428c      	cmp	r4, r1
    54da:	d102      	bne.n	54e2 <_malloc_r+0x4a>
    54dc:	6863      	ldr	r3, [r4, #4]
    54de:	6013      	str	r3, [r2, #0]
    54e0:	e01a      	b.n	5518 <_malloc_r+0x80>
    54e2:	684b      	ldr	r3, [r1, #4]
    54e4:	6063      	str	r3, [r4, #4]
    54e6:	000c      	movs	r4, r1
    54e8:	e016      	b.n	5518 <_malloc_r+0x80>
    54ea:	000c      	movs	r4, r1
    54ec:	6849      	ldr	r1, [r1, #4]
    54ee:	e7e9      	b.n	54c4 <_malloc_r+0x2c>
    54f0:	4c13      	ldr	r4, [pc, #76]	; (5540 <_malloc_r+0xa8>)
    54f2:	6823      	ldr	r3, [r4, #0]
    54f4:	2b00      	cmp	r3, #0
    54f6:	d103      	bne.n	5500 <_malloc_r+0x68>
    54f8:	0030      	movs	r0, r6
    54fa:	f000 f823 	bl	5544 <_sbrk_r>
    54fe:	6020      	str	r0, [r4, #0]
    5500:	0029      	movs	r1, r5
    5502:	0030      	movs	r0, r6
    5504:	f000 f81e 	bl	5544 <_sbrk_r>
    5508:	1c43      	adds	r3, r0, #1
    550a:	d0d1      	beq.n	54b0 <_malloc_r+0x18>
    550c:	2303      	movs	r3, #3
    550e:	1cc4      	adds	r4, r0, #3
    5510:	439c      	bics	r4, r3
    5512:	42a0      	cmp	r0, r4
    5514:	d10a      	bne.n	552c <_malloc_r+0x94>
    5516:	6025      	str	r5, [r4, #0]
    5518:	0020      	movs	r0, r4
    551a:	2207      	movs	r2, #7
    551c:	300b      	adds	r0, #11
    551e:	1d23      	adds	r3, r4, #4
    5520:	4390      	bics	r0, r2
    5522:	1ac3      	subs	r3, r0, r3
    5524:	d009      	beq.n	553a <_malloc_r+0xa2>
    5526:	425a      	negs	r2, r3
    5528:	50e2      	str	r2, [r4, r3]
    552a:	e006      	b.n	553a <_malloc_r+0xa2>
    552c:	1a21      	subs	r1, r4, r0
    552e:	0030      	movs	r0, r6
    5530:	f000 f808 	bl	5544 <_sbrk_r>
    5534:	1c43      	adds	r3, r0, #1
    5536:	d1ee      	bne.n	5516 <_malloc_r+0x7e>
    5538:	e7ba      	b.n	54b0 <_malloc_r+0x18>
    553a:	bd70      	pop	{r4, r5, r6, pc}
    553c:	20000810 	.word	0x20000810
    5540:	2000080c 	.word	0x2000080c

00005544 <_sbrk_r>:
    5544:	2300      	movs	r3, #0
    5546:	b570      	push	{r4, r5, r6, lr}
    5548:	4c06      	ldr	r4, [pc, #24]	; (5564 <_sbrk_r+0x20>)
    554a:	0005      	movs	r5, r0
    554c:	0008      	movs	r0, r1
    554e:	6023      	str	r3, [r4, #0]
    5550:	f7fc fe06 	bl	2160 <_sbrk>
    5554:	1c43      	adds	r3, r0, #1
    5556:	d103      	bne.n	5560 <_sbrk_r+0x1c>
    5558:	6823      	ldr	r3, [r4, #0]
    555a:	2b00      	cmp	r3, #0
    555c:	d000      	beq.n	5560 <_sbrk_r+0x1c>
    555e:	602b      	str	r3, [r5, #0]
    5560:	bd70      	pop	{r4, r5, r6, pc}
    5562:	46c0      	nop			; (mov r8, r8)
    5564:	2000098c 	.word	0x2000098c

00005568 <__sread>:
    5568:	b570      	push	{r4, r5, r6, lr}
    556a:	000c      	movs	r4, r1
    556c:	250e      	movs	r5, #14
    556e:	5f49      	ldrsh	r1, [r1, r5]
    5570:	f000 f8a4 	bl	56bc <_read_r>
    5574:	2800      	cmp	r0, #0
    5576:	db03      	blt.n	5580 <__sread+0x18>
    5578:	6d63      	ldr	r3, [r4, #84]	; 0x54
    557a:	181b      	adds	r3, r3, r0
    557c:	6563      	str	r3, [r4, #84]	; 0x54
    557e:	e003      	b.n	5588 <__sread+0x20>
    5580:	89a2      	ldrh	r2, [r4, #12]
    5582:	4b02      	ldr	r3, [pc, #8]	; (558c <__sread+0x24>)
    5584:	4013      	ands	r3, r2
    5586:	81a3      	strh	r3, [r4, #12]
    5588:	bd70      	pop	{r4, r5, r6, pc}
    558a:	46c0      	nop			; (mov r8, r8)
    558c:	ffffefff 	.word	0xffffefff

00005590 <__swrite>:
    5590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5592:	001f      	movs	r7, r3
    5594:	898b      	ldrh	r3, [r1, #12]
    5596:	0005      	movs	r5, r0
    5598:	000c      	movs	r4, r1
    559a:	0016      	movs	r6, r2
    559c:	05db      	lsls	r3, r3, #23
    559e:	d505      	bpl.n	55ac <__swrite+0x1c>
    55a0:	230e      	movs	r3, #14
    55a2:	5ec9      	ldrsh	r1, [r1, r3]
    55a4:	2200      	movs	r2, #0
    55a6:	2302      	movs	r3, #2
    55a8:	f000 f874 	bl	5694 <_lseek_r>
    55ac:	89a2      	ldrh	r2, [r4, #12]
    55ae:	4b05      	ldr	r3, [pc, #20]	; (55c4 <__swrite+0x34>)
    55b0:	0028      	movs	r0, r5
    55b2:	4013      	ands	r3, r2
    55b4:	81a3      	strh	r3, [r4, #12]
    55b6:	0032      	movs	r2, r6
    55b8:	230e      	movs	r3, #14
    55ba:	5ee1      	ldrsh	r1, [r4, r3]
    55bc:	003b      	movs	r3, r7
    55be:	f000 f81f 	bl	5600 <_write_r>
    55c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    55c4:	ffffefff 	.word	0xffffefff

000055c8 <__sseek>:
    55c8:	b570      	push	{r4, r5, r6, lr}
    55ca:	000c      	movs	r4, r1
    55cc:	250e      	movs	r5, #14
    55ce:	5f49      	ldrsh	r1, [r1, r5]
    55d0:	f000 f860 	bl	5694 <_lseek_r>
    55d4:	89a3      	ldrh	r3, [r4, #12]
    55d6:	1c42      	adds	r2, r0, #1
    55d8:	d103      	bne.n	55e2 <__sseek+0x1a>
    55da:	4a05      	ldr	r2, [pc, #20]	; (55f0 <__sseek+0x28>)
    55dc:	4013      	ands	r3, r2
    55de:	81a3      	strh	r3, [r4, #12]
    55e0:	e004      	b.n	55ec <__sseek+0x24>
    55e2:	2280      	movs	r2, #128	; 0x80
    55e4:	0152      	lsls	r2, r2, #5
    55e6:	4313      	orrs	r3, r2
    55e8:	81a3      	strh	r3, [r4, #12]
    55ea:	6560      	str	r0, [r4, #84]	; 0x54
    55ec:	bd70      	pop	{r4, r5, r6, pc}
    55ee:	46c0      	nop			; (mov r8, r8)
    55f0:	ffffefff 	.word	0xffffefff

000055f4 <__sclose>:
    55f4:	b510      	push	{r4, lr}
    55f6:	230e      	movs	r3, #14
    55f8:	5ec9      	ldrsh	r1, [r1, r3]
    55fa:	f000 f815 	bl	5628 <_close_r>
    55fe:	bd10      	pop	{r4, pc}

00005600 <_write_r>:
    5600:	b570      	push	{r4, r5, r6, lr}
    5602:	0005      	movs	r5, r0
    5604:	0008      	movs	r0, r1
    5606:	0011      	movs	r1, r2
    5608:	2200      	movs	r2, #0
    560a:	4c06      	ldr	r4, [pc, #24]	; (5624 <_write_r+0x24>)
    560c:	6022      	str	r2, [r4, #0]
    560e:	001a      	movs	r2, r3
    5610:	f7fc fd7e 	bl	2110 <_write>
    5614:	1c43      	adds	r3, r0, #1
    5616:	d103      	bne.n	5620 <_write_r+0x20>
    5618:	6823      	ldr	r3, [r4, #0]
    561a:	2b00      	cmp	r3, #0
    561c:	d000      	beq.n	5620 <_write_r+0x20>
    561e:	602b      	str	r3, [r5, #0]
    5620:	bd70      	pop	{r4, r5, r6, pc}
    5622:	46c0      	nop			; (mov r8, r8)
    5624:	2000098c 	.word	0x2000098c

00005628 <_close_r>:
    5628:	2300      	movs	r3, #0
    562a:	b570      	push	{r4, r5, r6, lr}
    562c:	4c06      	ldr	r4, [pc, #24]	; (5648 <_close_r+0x20>)
    562e:	0005      	movs	r5, r0
    5630:	0008      	movs	r0, r1
    5632:	6023      	str	r3, [r4, #0]
    5634:	f7fc fda6 	bl	2184 <_close>
    5638:	1c43      	adds	r3, r0, #1
    563a:	d103      	bne.n	5644 <_close_r+0x1c>
    563c:	6823      	ldr	r3, [r4, #0]
    563e:	2b00      	cmp	r3, #0
    5640:	d000      	beq.n	5644 <_close_r+0x1c>
    5642:	602b      	str	r3, [r5, #0]
    5644:	bd70      	pop	{r4, r5, r6, pc}
    5646:	46c0      	nop			; (mov r8, r8)
    5648:	2000098c 	.word	0x2000098c

0000564c <_fstat_r>:
    564c:	2300      	movs	r3, #0
    564e:	b570      	push	{r4, r5, r6, lr}
    5650:	4c06      	ldr	r4, [pc, #24]	; (566c <_fstat_r+0x20>)
    5652:	0005      	movs	r5, r0
    5654:	0008      	movs	r0, r1
    5656:	0011      	movs	r1, r2
    5658:	6023      	str	r3, [r4, #0]
    565a:	f7fc fd97 	bl	218c <_fstat>
    565e:	1c43      	adds	r3, r0, #1
    5660:	d103      	bne.n	566a <_fstat_r+0x1e>
    5662:	6823      	ldr	r3, [r4, #0]
    5664:	2b00      	cmp	r3, #0
    5666:	d000      	beq.n	566a <_fstat_r+0x1e>
    5668:	602b      	str	r3, [r5, #0]
    566a:	bd70      	pop	{r4, r5, r6, pc}
    566c:	2000098c 	.word	0x2000098c

00005670 <_isatty_r>:
    5670:	2300      	movs	r3, #0
    5672:	b570      	push	{r4, r5, r6, lr}
    5674:	4c06      	ldr	r4, [pc, #24]	; (5690 <_isatty_r+0x20>)
    5676:	0005      	movs	r5, r0
    5678:	0008      	movs	r0, r1
    567a:	6023      	str	r3, [r4, #0]
    567c:	f7fc fd8c 	bl	2198 <_isatty>
    5680:	1c43      	adds	r3, r0, #1
    5682:	d103      	bne.n	568c <_isatty_r+0x1c>
    5684:	6823      	ldr	r3, [r4, #0]
    5686:	2b00      	cmp	r3, #0
    5688:	d000      	beq.n	568c <_isatty_r+0x1c>
    568a:	602b      	str	r3, [r5, #0]
    568c:	bd70      	pop	{r4, r5, r6, pc}
    568e:	46c0      	nop			; (mov r8, r8)
    5690:	2000098c 	.word	0x2000098c

00005694 <_lseek_r>:
    5694:	b570      	push	{r4, r5, r6, lr}
    5696:	0005      	movs	r5, r0
    5698:	0008      	movs	r0, r1
    569a:	0011      	movs	r1, r2
    569c:	2200      	movs	r2, #0
    569e:	4c06      	ldr	r4, [pc, #24]	; (56b8 <_lseek_r+0x24>)
    56a0:	6022      	str	r2, [r4, #0]
    56a2:	001a      	movs	r2, r3
    56a4:	f7fc fd7a 	bl	219c <_lseek>
    56a8:	1c43      	adds	r3, r0, #1
    56aa:	d103      	bne.n	56b4 <_lseek_r+0x20>
    56ac:	6823      	ldr	r3, [r4, #0]
    56ae:	2b00      	cmp	r3, #0
    56b0:	d000      	beq.n	56b4 <_lseek_r+0x20>
    56b2:	602b      	str	r3, [r5, #0]
    56b4:	bd70      	pop	{r4, r5, r6, pc}
    56b6:	46c0      	nop			; (mov r8, r8)
    56b8:	2000098c 	.word	0x2000098c

000056bc <_read_r>:
    56bc:	b570      	push	{r4, r5, r6, lr}
    56be:	0005      	movs	r5, r0
    56c0:	0008      	movs	r0, r1
    56c2:	0011      	movs	r1, r2
    56c4:	2200      	movs	r2, #0
    56c6:	4c06      	ldr	r4, [pc, #24]	; (56e0 <_read_r+0x24>)
    56c8:	6022      	str	r2, [r4, #0]
    56ca:	001a      	movs	r2, r3
    56cc:	f7fc fd00 	bl	20d0 <_read>
    56d0:	1c43      	adds	r3, r0, #1
    56d2:	d103      	bne.n	56dc <_read_r+0x20>
    56d4:	6823      	ldr	r3, [r4, #0]
    56d6:	2b00      	cmp	r3, #0
    56d8:	d000      	beq.n	56dc <_read_r+0x20>
    56da:	602b      	str	r3, [r5, #0]
    56dc:	bd70      	pop	{r4, r5, r6, pc}
    56de:	46c0      	nop			; (mov r8, r8)
    56e0:	2000098c 	.word	0x2000098c
    56e4:	42000800 	.word	0x42000800
    56e8:	42000c00 	.word	0x42000c00
    56ec:	42001000 	.word	0x42001000
    56f0:	42001400 	.word	0x42001400
    56f4:	42001800 	.word	0x42001800
    56f8:	42001c00 	.word	0x42001c00
    56fc:	0c0b0a09 	.word	0x0c0b0a09
    5700:	00000e0d 	.word	0x00000e0d
    5704:	00001332 	.word	0x00001332
    5708:	0000132e 	.word	0x0000132e
    570c:	0000132e 	.word	0x0000132e
    5710:	0000138c 	.word	0x0000138c
    5714:	0000138c 	.word	0x0000138c
    5718:	00001346 	.word	0x00001346
    571c:	00001338 	.word	0x00001338
    5720:	0000134c 	.word	0x0000134c
    5724:	0000137a 	.word	0x0000137a
    5728:	000015fc 	.word	0x000015fc
    572c:	000015dc 	.word	0x000015dc
    5730:	000015dc 	.word	0x000015dc
    5734:	00001668 	.word	0x00001668
    5738:	000015ee 	.word	0x000015ee
    573c:	0000160a 	.word	0x0000160a
    5740:	000015e0 	.word	0x000015e0
    5744:	00001618 	.word	0x00001618
    5748:	00001658 	.word	0x00001658
    574c:	42002c00 	.word	0x42002c00
    5750:	42003000 	.word	0x42003000
    5754:	42003400 	.word	0x42003400
    5758:	001c1c1b 	.word	0x001c1c1b
    575c:	10000800 	.word	0x10000800
    5760:	00002000 	.word	0x00002000
    5764:	00002ba8 	.word	0x00002ba8
    5768:	00002d5c 	.word	0x00002d5c
    576c:	00002d66 	.word	0x00002d66
    5770:	00002f34 	.word	0x00002f34
    5774:	00002f3c 	.word	0x00002f3c
    5778:	000034b6 	.word	0x000034b6
    577c:	00003578 	.word	0x00003578
    5780:	000034c0 	.word	0x000034c0
    5784:	000034e0 	.word	0x000034e0
    5788:	00003578 	.word	0x00003578
    578c:	00003502 	.word	0x00003502
    5790:	00003578 	.word	0x00003578
    5794:	00003546 	.word	0x00003546

00005798 <tc_interrupt_vectors.11902>:
    5798:	43141312 00000000                       ...C....

000057a0 <_global_impure_ptr>:
    57a0:	20000014                                ... 

000057a4 <__sf_fake_stdin>:
	...

000057c4 <__sf_fake_stdout>:
	...

000057e4 <__sf_fake_stderr>:
	...

00005804 <_init>:
    5804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5806:	46c0      	nop			; (mov r8, r8)
    5808:	bcf8      	pop	{r3, r4, r5, r6, r7}
    580a:	bc08      	pop	{r3}
    580c:	469e      	mov	lr, r3
    580e:	4770      	bx	lr

00005810 <__init_array_start>:
    5810:	000000dd 	.word	0x000000dd

00005814 <_fini>:
    5814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5816:	46c0      	nop			; (mov r8, r8)
    5818:	bcf8      	pop	{r3, r4, r5, r6, r7}
    581a:	bc08      	pop	{r3}
    581c:	469e      	mov	lr, r3
    581e:	4770      	bx	lr

00005820 <__fini_array_start>:
    5820:	000000b5 	.word	0x000000b5
