
Color_tset.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003b60  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000084  20000000  00003b60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000140  20000084  00003be4  00020084  2**2
                  ALLOC
  3 .stack        00002004  200001c4  00003d24  00020084  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002ef85  00000000  00000000  00020105  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004835  00000000  00000000  0004f08a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00006a1c  00000000  00000000  000538bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000660  00000000  00000000  0005a2db  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000748  00000000  00000000  0005a93b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001a8e9  00000000  00000000  0005b083  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000e6d8  00000000  00000000  0007596c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00084fd5  00000000  00000000  00084044  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001800  00000000  00000000  0010901c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	c8 21 00 20 1d 16 00 00 19 16 00 00 19 16 00 00     .!. ............
	...
      2c:	19 16 00 00 00 00 00 00 00 00 00 00 19 16 00 00     ................
      3c:	19 16 00 00 19 16 00 00 19 16 00 00 19 16 00 00     ................
      4c:	19 16 00 00 e1 01 00 00 19 16 00 00 19 16 00 00     ................
      5c:	19 16 00 00 81 01 00 00 2d 0f 00 00 3d 0f 00 00     ........-...=...
      6c:	4d 0f 00 00 5d 0f 00 00 6d 0f 00 00 7d 0f 00 00     M...]...m...}...
      7c:	19 16 00 00 19 16 00 00 19 16 00 00 19 16 00 00     ................
      8c:	19 16 00 00 19 16 00 00 00 00 00 00 00 00 00 00     ................
      9c:	19 16 00 00 19 16 00 00 00 00 00 00 19 16 00 00     ................
	...

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000084 	.word	0x20000084
      d4:	00000000 	.word	0x00000000
      d8:	00003b60 	.word	0x00003b60

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000088 	.word	0x20000088
     108:	00003b60 	.word	0x00003b60
     10c:	00003b60 	.word	0x00003b60
     110:	00000000 	.word	0x00000000

00000114 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     114:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     116:	2000      	movs	r0, #0
     118:	4b08      	ldr	r3, [pc, #32]	; (13c <delay_init+0x28>)
     11a:	4798      	blx	r3
     11c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     11e:	4c08      	ldr	r4, [pc, #32]	; (140 <delay_init+0x2c>)
     120:	21fa      	movs	r1, #250	; 0xfa
     122:	0089      	lsls	r1, r1, #2
     124:	47a0      	blx	r4
     126:	4b07      	ldr	r3, [pc, #28]	; (144 <delay_init+0x30>)
     128:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     12a:	4907      	ldr	r1, [pc, #28]	; (148 <delay_init+0x34>)
     12c:	0028      	movs	r0, r5
     12e:	47a0      	blx	r4
     130:	4b06      	ldr	r3, [pc, #24]	; (14c <delay_init+0x38>)
     132:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     134:	2205      	movs	r2, #5
     136:	4b06      	ldr	r3, [pc, #24]	; (150 <delay_init+0x3c>)
     138:	601a      	str	r2, [r3, #0]
}
     13a:	bd70      	pop	{r4, r5, r6, pc}
     13c:	000013a9 	.word	0x000013a9
     140:	00001d7d 	.word	0x00001d7d
     144:	20000000 	.word	0x20000000
     148:	000f4240 	.word	0x000f4240
     14c:	20000004 	.word	0x20000004
     150:	e000e010 	.word	0xe000e010

00000154 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     154:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     156:	4b08      	ldr	r3, [pc, #32]	; (178 <delay_cycles_ms+0x24>)
     158:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     15a:	4a08      	ldr	r2, [pc, #32]	; (17c <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     15c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     15e:	2180      	movs	r1, #128	; 0x80
     160:	0249      	lsls	r1, r1, #9
	while (n--) {
     162:	3801      	subs	r0, #1
     164:	d307      	bcc.n	176 <delay_cycles_ms+0x22>
	if (n > 0) {
     166:	2c00      	cmp	r4, #0
     168:	d0fb      	beq.n	162 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     16a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     16c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     16e:	6813      	ldr	r3, [r2, #0]
     170:	420b      	tst	r3, r1
     172:	d0fc      	beq.n	16e <delay_cycles_ms+0x1a>
     174:	e7f5      	b.n	162 <delay_cycles_ms+0xe>
	}
}
     176:	bd30      	pop	{r4, r5, pc}
     178:	20000000 	.word	0x20000000
     17c:	e000e010 	.word	0xe000e010

00000180 <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
     180:	b510      	push	{r4, lr}
	struct events_hook *current_hook = _events_inst.hook_list;
     182:	4b0b      	ldr	r3, [pc, #44]	; (1b0 <EVSYS_Handler+0x30>)
     184:	691c      	ldr	r4, [r3, #16]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
     186:	490b      	ldr	r1, [pc, #44]	; (1b4 <EVSYS_Handler+0x34>)
     188:	698a      	ldr	r2, [r1, #24]
	_events_inst.interrupt_flag_buffer |= flag;
     18a:	6898      	ldr	r0, [r3, #8]
     18c:	4302      	orrs	r2, r0
     18e:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
     190:	4b09      	ldr	r3, [pc, #36]	; (1b8 <EVSYS_Handler+0x38>)
     192:	618b      	str	r3, [r1, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
     194:	2c00      	cmp	r4, #0
     196:	d005      	beq.n	1a4 <EVSYS_Handler+0x24>
		current_hook->hook_func(current_hook->resource);
     198:	6820      	ldr	r0, [r4, #0]
     19a:	6863      	ldr	r3, [r4, #4]
     19c:	4798      	blx	r3
		current_hook = current_hook->next;
     19e:	68a4      	ldr	r4, [r4, #8]
	while (current_hook != NULL) {
     1a0:	2c00      	cmp	r4, #0
     1a2:	d1f9      	bne.n	198 <EVSYS_Handler+0x18>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
     1a4:	4b02      	ldr	r3, [pc, #8]	; (1b0 <EVSYS_Handler+0x30>)
     1a6:	68d9      	ldr	r1, [r3, #12]
	_events_inst.interrupt_flag_buffer &= ~flag;
     1a8:	689a      	ldr	r2, [r3, #8]
     1aa:	438a      	bics	r2, r1
     1ac:	609a      	str	r2, [r3, #8]
}
     1ae:	bd10      	pop	{r4, pc}
     1b0:	20000008 	.word	0x20000008
     1b4:	42000400 	.word	0x42000400
     1b8:	0f0fffff 	.word	0x0f0fffff

000001bc <_system_events_init>:
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     1bc:	4a06      	ldr	r2, [pc, #24]	; (1d8 <_system_events_init+0x1c>)
     1be:	6a13      	ldr	r3, [r2, #32]
     1c0:	2102      	movs	r1, #2
     1c2:	430b      	orrs	r3, r1
     1c4:	6213      	str	r3, [r2, #32]
{
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
     1c6:	2201      	movs	r2, #1
     1c8:	4b04      	ldr	r3, [pc, #16]	; (1dc <_system_events_init+0x20>)
     1ca:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
     1cc:	0019      	movs	r1, r3
     1ce:	780b      	ldrb	r3, [r1, #0]
     1d0:	4213      	tst	r3, r2
     1d2:	d1fc      	bne.n	1ce <_system_events_init+0x12>
	}
}
     1d4:	4770      	bx	lr
     1d6:	46c0      	nop			; (mov r8, r8)
     1d8:	40000400 	.word	0x40000400
     1dc:	42000400 	.word	0x42000400

000001e0 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     1e0:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     1e2:	2200      	movs	r2, #0
     1e4:	4b10      	ldr	r3, [pc, #64]	; (228 <EIC_Handler+0x48>)
     1e6:	701a      	strb	r2, [r3, #0]
     1e8:	2300      	movs	r3, #0

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     1ea:	4910      	ldr	r1, [pc, #64]	; (22c <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     1ec:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     1ee:	4e10      	ldr	r6, [pc, #64]	; (230 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     1f0:	4c0d      	ldr	r4, [pc, #52]	; (228 <EIC_Handler+0x48>)
     1f2:	e00a      	b.n	20a <EIC_Handler+0x2a>
		return eics[eic_index];
     1f4:	490d      	ldr	r1, [pc, #52]	; (22c <EIC_Handler+0x4c>)
     1f6:	e008      	b.n	20a <EIC_Handler+0x2a>
     1f8:	7823      	ldrb	r3, [r4, #0]
     1fa:	3301      	adds	r3, #1
     1fc:	b2db      	uxtb	r3, r3
     1fe:	7023      	strb	r3, [r4, #0]
     200:	2b0f      	cmp	r3, #15
     202:	d810      	bhi.n	226 <EIC_Handler+0x46>
		return NULL;
     204:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     206:	2b1f      	cmp	r3, #31
     208:	d9f4      	bls.n	1f4 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
     20a:	0028      	movs	r0, r5
     20c:	4018      	ands	r0, r3
     20e:	2201      	movs	r2, #1
     210:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
     212:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     214:	4210      	tst	r0, r2
     216:	d0ef      	beq.n	1f8 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     218:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     21a:	009b      	lsls	r3, r3, #2
     21c:	599b      	ldr	r3, [r3, r6]
     21e:	2b00      	cmp	r3, #0
     220:	d0ea      	beq.n	1f8 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     222:	4798      	blx	r3
     224:	e7e8      	b.n	1f8 <EIC_Handler+0x18>
			}
		}
	}
}
     226:	bd70      	pop	{r4, r5, r6, pc}
     228:	200000e8 	.word	0x200000e8
     22c:	40001800 	.word	0x40001800
     230:	200000ec 	.word	0x200000ec

00000234 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     234:	4a04      	ldr	r2, [pc, #16]	; (248 <_extint_enable+0x14>)
     236:	7813      	ldrb	r3, [r2, #0]
     238:	2102      	movs	r1, #2
     23a:	430b      	orrs	r3, r1
     23c:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     23e:	7853      	ldrb	r3, [r2, #1]
     240:	b25b      	sxtb	r3, r3
     242:	2b00      	cmp	r3, #0
     244:	dbfb      	blt.n	23e <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     246:	4770      	bx	lr
     248:	40001800 	.word	0x40001800

0000024c <_system_extint_init>:
{
     24c:	b500      	push	{lr}
     24e:	b083      	sub	sp, #12
			PM->APBAMASK.reg |= mask;
     250:	4a12      	ldr	r2, [pc, #72]	; (29c <_system_extint_init+0x50>)
     252:	6993      	ldr	r3, [r2, #24]
     254:	2140      	movs	r1, #64	; 0x40
     256:	430b      	orrs	r3, r1
     258:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     25a:	a901      	add	r1, sp, #4
     25c:	2300      	movs	r3, #0
     25e:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     260:	2005      	movs	r0, #5
     262:	4b0f      	ldr	r3, [pc, #60]	; (2a0 <_system_extint_init+0x54>)
     264:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     266:	2005      	movs	r0, #5
     268:	4b0e      	ldr	r3, [pc, #56]	; (2a4 <_system_extint_init+0x58>)
     26a:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     26c:	4a0e      	ldr	r2, [pc, #56]	; (2a8 <_system_extint_init+0x5c>)
     26e:	7813      	ldrb	r3, [r2, #0]
     270:	2101      	movs	r1, #1
     272:	430b      	orrs	r3, r1
     274:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     276:	7853      	ldrb	r3, [r2, #1]
     278:	b25b      	sxtb	r3, r3
     27a:	2b00      	cmp	r3, #0
     27c:	dbfb      	blt.n	276 <_system_extint_init+0x2a>
     27e:	4b0b      	ldr	r3, [pc, #44]	; (2ac <_system_extint_init+0x60>)
     280:	0019      	movs	r1, r3
     282:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     284:	2200      	movs	r2, #0
     286:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     288:	4299      	cmp	r1, r3
     28a:	d1fc      	bne.n	286 <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     28c:	2210      	movs	r2, #16
     28e:	4b08      	ldr	r3, [pc, #32]	; (2b0 <_system_extint_init+0x64>)
     290:	601a      	str	r2, [r3, #0]
	_extint_enable();
     292:	4b08      	ldr	r3, [pc, #32]	; (2b4 <_system_extint_init+0x68>)
     294:	4798      	blx	r3
}
     296:	b003      	add	sp, #12
     298:	bd00      	pop	{pc}
     29a:	46c0      	nop			; (mov r8, r8)
     29c:	40000400 	.word	0x40000400
     2a0:	000014c1 	.word	0x000014c1
     2a4:	00001435 	.word	0x00001435
     2a8:	40001800 	.word	0x40001800
     2ac:	200000ec 	.word	0x200000ec
     2b0:	e000e100 	.word	0xe000e100
     2b4:	00000235 	.word	0x00000235

000002b8 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     2b8:	b5f0      	push	{r4, r5, r6, r7, lr}
     2ba:	46de      	mov	lr, fp
     2bc:	4657      	mov	r7, sl
     2be:	464e      	mov	r6, r9
     2c0:	4645      	mov	r5, r8
     2c2:	b5e0      	push	{r5, r6, r7, lr}
     2c4:	b087      	sub	sp, #28
     2c6:	4680      	mov	r8, r0
     2c8:	9104      	str	r1, [sp, #16]
     2ca:	0016      	movs	r6, r2
     2cc:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     2ce:	2200      	movs	r2, #0
     2d0:	2300      	movs	r3, #0
     2d2:	2100      	movs	r1, #0
     2d4:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     2d6:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     2d8:	2001      	movs	r0, #1
     2da:	0021      	movs	r1, r4
     2dc:	9600      	str	r6, [sp, #0]
     2de:	9701      	str	r7, [sp, #4]
     2e0:	465c      	mov	r4, fp
     2e2:	9403      	str	r4, [sp, #12]
     2e4:	4644      	mov	r4, r8
     2e6:	9405      	str	r4, [sp, #20]
     2e8:	e013      	b.n	312 <long_division+0x5a>
     2ea:	2420      	movs	r4, #32
     2ec:	1a64      	subs	r4, r4, r1
     2ee:	0005      	movs	r5, r0
     2f0:	40e5      	lsrs	r5, r4
     2f2:	46a8      	mov	r8, r5
     2f4:	e014      	b.n	320 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     2f6:	9c00      	ldr	r4, [sp, #0]
     2f8:	9d01      	ldr	r5, [sp, #4]
     2fa:	1b12      	subs	r2, r2, r4
     2fc:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     2fe:	465c      	mov	r4, fp
     300:	464d      	mov	r5, r9
     302:	432c      	orrs	r4, r5
     304:	46a3      	mov	fp, r4
     306:	9c03      	ldr	r4, [sp, #12]
     308:	4645      	mov	r5, r8
     30a:	432c      	orrs	r4, r5
     30c:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     30e:	3901      	subs	r1, #1
     310:	d325      	bcc.n	35e <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     312:	2420      	movs	r4, #32
     314:	4264      	negs	r4, r4
     316:	190c      	adds	r4, r1, r4
     318:	d4e7      	bmi.n	2ea <long_division+0x32>
     31a:	0005      	movs	r5, r0
     31c:	40a5      	lsls	r5, r4
     31e:	46a8      	mov	r8, r5
     320:	0004      	movs	r4, r0
     322:	408c      	lsls	r4, r1
     324:	46a1      	mov	r9, r4
		r = r << 1;
     326:	1892      	adds	r2, r2, r2
     328:	415b      	adcs	r3, r3
     32a:	0014      	movs	r4, r2
     32c:	001d      	movs	r5, r3
		if (n & bit_shift) {
     32e:	9e05      	ldr	r6, [sp, #20]
     330:	464f      	mov	r7, r9
     332:	403e      	ands	r6, r7
     334:	46b4      	mov	ip, r6
     336:	9e04      	ldr	r6, [sp, #16]
     338:	4647      	mov	r7, r8
     33a:	403e      	ands	r6, r7
     33c:	46b2      	mov	sl, r6
     33e:	4666      	mov	r6, ip
     340:	4657      	mov	r7, sl
     342:	433e      	orrs	r6, r7
     344:	d003      	beq.n	34e <long_division+0x96>
			r |= 0x01;
     346:	0006      	movs	r6, r0
     348:	4326      	orrs	r6, r4
     34a:	0032      	movs	r2, r6
     34c:	002b      	movs	r3, r5
		if (r >= d) {
     34e:	9c00      	ldr	r4, [sp, #0]
     350:	9d01      	ldr	r5, [sp, #4]
     352:	429d      	cmp	r5, r3
     354:	d8db      	bhi.n	30e <long_division+0x56>
     356:	d1ce      	bne.n	2f6 <long_division+0x3e>
     358:	4294      	cmp	r4, r2
     35a:	d8d8      	bhi.n	30e <long_division+0x56>
     35c:	e7cb      	b.n	2f6 <long_division+0x3e>
     35e:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     360:	4658      	mov	r0, fp
     362:	0019      	movs	r1, r3
     364:	b007      	add	sp, #28
     366:	bc3c      	pop	{r2, r3, r4, r5}
     368:	4690      	mov	r8, r2
     36a:	4699      	mov	r9, r3
     36c:	46a2      	mov	sl, r4
     36e:	46ab      	mov	fp, r5
     370:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000372 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     372:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     374:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     376:	2340      	movs	r3, #64	; 0x40
     378:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     37a:	4281      	cmp	r1, r0
     37c:	d202      	bcs.n	384 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     37e:	0018      	movs	r0, r3
     380:	bd10      	pop	{r4, pc}
		baud_calculated++;
     382:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     384:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     386:	1c63      	adds	r3, r4, #1
     388:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     38a:	4288      	cmp	r0, r1
     38c:	d9f9      	bls.n	382 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     38e:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     390:	2cff      	cmp	r4, #255	; 0xff
     392:	d8f4      	bhi.n	37e <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     394:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     396:	2300      	movs	r3, #0
     398:	e7f1      	b.n	37e <_sercom_get_sync_baud_val+0xc>
	...

0000039c <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     39c:	b5f0      	push	{r4, r5, r6, r7, lr}
     39e:	b083      	sub	sp, #12
     3a0:	000f      	movs	r7, r1
     3a2:	0016      	movs	r6, r2
     3a4:	aa08      	add	r2, sp, #32
     3a6:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     3a8:	0004      	movs	r4, r0
     3aa:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     3ac:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     3ae:	42bc      	cmp	r4, r7
     3b0:	d902      	bls.n	3b8 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     3b2:	0010      	movs	r0, r2
     3b4:	b003      	add	sp, #12
     3b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     3b8:	2b00      	cmp	r3, #0
     3ba:	d114      	bne.n	3e6 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     3bc:	0002      	movs	r2, r0
     3be:	0008      	movs	r0, r1
     3c0:	2100      	movs	r1, #0
     3c2:	4c19      	ldr	r4, [pc, #100]	; (428 <_sercom_get_async_baud_val+0x8c>)
     3c4:	47a0      	blx	r4
     3c6:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     3c8:	003a      	movs	r2, r7
     3ca:	2300      	movs	r3, #0
     3cc:	2000      	movs	r0, #0
     3ce:	4c17      	ldr	r4, [pc, #92]	; (42c <_sercom_get_async_baud_val+0x90>)
     3d0:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     3d2:	2200      	movs	r2, #0
     3d4:	2301      	movs	r3, #1
     3d6:	1a12      	subs	r2, r2, r0
     3d8:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     3da:	0c12      	lsrs	r2, r2, #16
     3dc:	041b      	lsls	r3, r3, #16
     3de:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     3e0:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     3e2:	2200      	movs	r2, #0
     3e4:	e7e5      	b.n	3b2 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     3e6:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     3e8:	2b01      	cmp	r3, #1
     3ea:	d1f9      	bne.n	3e0 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     3ec:	000a      	movs	r2, r1
     3ee:	2300      	movs	r3, #0
     3f0:	2100      	movs	r1, #0
     3f2:	4c0d      	ldr	r4, [pc, #52]	; (428 <_sercom_get_async_baud_val+0x8c>)
     3f4:	47a0      	blx	r4
     3f6:	0002      	movs	r2, r0
     3f8:	000b      	movs	r3, r1
     3fa:	9200      	str	r2, [sp, #0]
     3fc:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     3fe:	0038      	movs	r0, r7
     400:	2100      	movs	r1, #0
     402:	4c0a      	ldr	r4, [pc, #40]	; (42c <_sercom_get_async_baud_val+0x90>)
     404:	47a0      	blx	r4
     406:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     408:	2380      	movs	r3, #128	; 0x80
     40a:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     40c:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     40e:	4298      	cmp	r0, r3
     410:	d8cf      	bhi.n	3b2 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     412:	0f79      	lsrs	r1, r7, #29
     414:	00f8      	lsls	r0, r7, #3
     416:	9a00      	ldr	r2, [sp, #0]
     418:	9b01      	ldr	r3, [sp, #4]
     41a:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     41c:	00ea      	lsls	r2, r5, #3
     41e:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     420:	b2d2      	uxtb	r2, r2
     422:	0352      	lsls	r2, r2, #13
     424:	432a      	orrs	r2, r5
     426:	e7db      	b.n	3e0 <_sercom_get_async_baud_val+0x44>
     428:	00002159 	.word	0x00002159
     42c:	000002b9 	.word	0x000002b9

00000430 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     430:	b510      	push	{r4, lr}
     432:	b082      	sub	sp, #8
     434:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     436:	4b0e      	ldr	r3, [pc, #56]	; (470 <sercom_set_gclk_generator+0x40>)
     438:	781b      	ldrb	r3, [r3, #0]
     43a:	2b00      	cmp	r3, #0
     43c:	d007      	beq.n	44e <sercom_set_gclk_generator+0x1e>
     43e:	2900      	cmp	r1, #0
     440:	d105      	bne.n	44e <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     442:	4b0b      	ldr	r3, [pc, #44]	; (470 <sercom_set_gclk_generator+0x40>)
     444:	785b      	ldrb	r3, [r3, #1]
     446:	4283      	cmp	r3, r0
     448:	d010      	beq.n	46c <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     44a:	201d      	movs	r0, #29
     44c:	e00c      	b.n	468 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     44e:	a901      	add	r1, sp, #4
     450:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     452:	2013      	movs	r0, #19
     454:	4b07      	ldr	r3, [pc, #28]	; (474 <sercom_set_gclk_generator+0x44>)
     456:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     458:	2013      	movs	r0, #19
     45a:	4b07      	ldr	r3, [pc, #28]	; (478 <sercom_set_gclk_generator+0x48>)
     45c:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     45e:	4b04      	ldr	r3, [pc, #16]	; (470 <sercom_set_gclk_generator+0x40>)
     460:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     462:	2201      	movs	r2, #1
     464:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     466:	2000      	movs	r0, #0
}
     468:	b002      	add	sp, #8
     46a:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     46c:	2000      	movs	r0, #0
     46e:	e7fb      	b.n	468 <sercom_set_gclk_generator+0x38>
     470:	200000a0 	.word	0x200000a0
     474:	000014c1 	.word	0x000014c1
     478:	00001435 	.word	0x00001435

0000047c <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     47c:	4b40      	ldr	r3, [pc, #256]	; (580 <_sercom_get_default_pad+0x104>)
     47e:	4298      	cmp	r0, r3
     480:	d031      	beq.n	4e6 <_sercom_get_default_pad+0x6a>
     482:	d90a      	bls.n	49a <_sercom_get_default_pad+0x1e>
     484:	4b3f      	ldr	r3, [pc, #252]	; (584 <_sercom_get_default_pad+0x108>)
     486:	4298      	cmp	r0, r3
     488:	d04d      	beq.n	526 <_sercom_get_default_pad+0xaa>
     48a:	4b3f      	ldr	r3, [pc, #252]	; (588 <_sercom_get_default_pad+0x10c>)
     48c:	4298      	cmp	r0, r3
     48e:	d05a      	beq.n	546 <_sercom_get_default_pad+0xca>
     490:	4b3e      	ldr	r3, [pc, #248]	; (58c <_sercom_get_default_pad+0x110>)
     492:	4298      	cmp	r0, r3
     494:	d037      	beq.n	506 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     496:	2000      	movs	r0, #0
}
     498:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     49a:	4b3d      	ldr	r3, [pc, #244]	; (590 <_sercom_get_default_pad+0x114>)
     49c:	4298      	cmp	r0, r3
     49e:	d00c      	beq.n	4ba <_sercom_get_default_pad+0x3e>
     4a0:	4b3c      	ldr	r3, [pc, #240]	; (594 <_sercom_get_default_pad+0x118>)
     4a2:	4298      	cmp	r0, r3
     4a4:	d1f7      	bne.n	496 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     4a6:	2901      	cmp	r1, #1
     4a8:	d017      	beq.n	4da <_sercom_get_default_pad+0x5e>
     4aa:	2900      	cmp	r1, #0
     4ac:	d05d      	beq.n	56a <_sercom_get_default_pad+0xee>
     4ae:	2902      	cmp	r1, #2
     4b0:	d015      	beq.n	4de <_sercom_get_default_pad+0x62>
     4b2:	2903      	cmp	r1, #3
     4b4:	d015      	beq.n	4e2 <_sercom_get_default_pad+0x66>
	return 0;
     4b6:	2000      	movs	r0, #0
     4b8:	e7ee      	b.n	498 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     4ba:	2901      	cmp	r1, #1
     4bc:	d007      	beq.n	4ce <_sercom_get_default_pad+0x52>
     4be:	2900      	cmp	r1, #0
     4c0:	d051      	beq.n	566 <_sercom_get_default_pad+0xea>
     4c2:	2902      	cmp	r1, #2
     4c4:	d005      	beq.n	4d2 <_sercom_get_default_pad+0x56>
     4c6:	2903      	cmp	r1, #3
     4c8:	d005      	beq.n	4d6 <_sercom_get_default_pad+0x5a>
	return 0;
     4ca:	2000      	movs	r0, #0
     4cc:	e7e4      	b.n	498 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     4ce:	4832      	ldr	r0, [pc, #200]	; (598 <_sercom_get_default_pad+0x11c>)
     4d0:	e7e2      	b.n	498 <_sercom_get_default_pad+0x1c>
     4d2:	4832      	ldr	r0, [pc, #200]	; (59c <_sercom_get_default_pad+0x120>)
     4d4:	e7e0      	b.n	498 <_sercom_get_default_pad+0x1c>
     4d6:	4832      	ldr	r0, [pc, #200]	; (5a0 <_sercom_get_default_pad+0x124>)
     4d8:	e7de      	b.n	498 <_sercom_get_default_pad+0x1c>
     4da:	4832      	ldr	r0, [pc, #200]	; (5a4 <_sercom_get_default_pad+0x128>)
     4dc:	e7dc      	b.n	498 <_sercom_get_default_pad+0x1c>
     4de:	4832      	ldr	r0, [pc, #200]	; (5a8 <_sercom_get_default_pad+0x12c>)
     4e0:	e7da      	b.n	498 <_sercom_get_default_pad+0x1c>
     4e2:	4832      	ldr	r0, [pc, #200]	; (5ac <_sercom_get_default_pad+0x130>)
     4e4:	e7d8      	b.n	498 <_sercom_get_default_pad+0x1c>
     4e6:	2901      	cmp	r1, #1
     4e8:	d007      	beq.n	4fa <_sercom_get_default_pad+0x7e>
     4ea:	2900      	cmp	r1, #0
     4ec:	d03f      	beq.n	56e <_sercom_get_default_pad+0xf2>
     4ee:	2902      	cmp	r1, #2
     4f0:	d005      	beq.n	4fe <_sercom_get_default_pad+0x82>
     4f2:	2903      	cmp	r1, #3
     4f4:	d005      	beq.n	502 <_sercom_get_default_pad+0x86>
	return 0;
     4f6:	2000      	movs	r0, #0
     4f8:	e7ce      	b.n	498 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     4fa:	482d      	ldr	r0, [pc, #180]	; (5b0 <_sercom_get_default_pad+0x134>)
     4fc:	e7cc      	b.n	498 <_sercom_get_default_pad+0x1c>
     4fe:	482d      	ldr	r0, [pc, #180]	; (5b4 <_sercom_get_default_pad+0x138>)
     500:	e7ca      	b.n	498 <_sercom_get_default_pad+0x1c>
     502:	482d      	ldr	r0, [pc, #180]	; (5b8 <_sercom_get_default_pad+0x13c>)
     504:	e7c8      	b.n	498 <_sercom_get_default_pad+0x1c>
     506:	2901      	cmp	r1, #1
     508:	d007      	beq.n	51a <_sercom_get_default_pad+0x9e>
     50a:	2900      	cmp	r1, #0
     50c:	d031      	beq.n	572 <_sercom_get_default_pad+0xf6>
     50e:	2902      	cmp	r1, #2
     510:	d005      	beq.n	51e <_sercom_get_default_pad+0xa2>
     512:	2903      	cmp	r1, #3
     514:	d005      	beq.n	522 <_sercom_get_default_pad+0xa6>
	return 0;
     516:	2000      	movs	r0, #0
     518:	e7be      	b.n	498 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     51a:	4828      	ldr	r0, [pc, #160]	; (5bc <_sercom_get_default_pad+0x140>)
     51c:	e7bc      	b.n	498 <_sercom_get_default_pad+0x1c>
     51e:	4828      	ldr	r0, [pc, #160]	; (5c0 <_sercom_get_default_pad+0x144>)
     520:	e7ba      	b.n	498 <_sercom_get_default_pad+0x1c>
     522:	4828      	ldr	r0, [pc, #160]	; (5c4 <_sercom_get_default_pad+0x148>)
     524:	e7b8      	b.n	498 <_sercom_get_default_pad+0x1c>
     526:	2901      	cmp	r1, #1
     528:	d007      	beq.n	53a <_sercom_get_default_pad+0xbe>
     52a:	2900      	cmp	r1, #0
     52c:	d023      	beq.n	576 <_sercom_get_default_pad+0xfa>
     52e:	2902      	cmp	r1, #2
     530:	d005      	beq.n	53e <_sercom_get_default_pad+0xc2>
     532:	2903      	cmp	r1, #3
     534:	d005      	beq.n	542 <_sercom_get_default_pad+0xc6>
	return 0;
     536:	2000      	movs	r0, #0
     538:	e7ae      	b.n	498 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     53a:	4823      	ldr	r0, [pc, #140]	; (5c8 <_sercom_get_default_pad+0x14c>)
     53c:	e7ac      	b.n	498 <_sercom_get_default_pad+0x1c>
     53e:	4823      	ldr	r0, [pc, #140]	; (5cc <_sercom_get_default_pad+0x150>)
     540:	e7aa      	b.n	498 <_sercom_get_default_pad+0x1c>
     542:	4823      	ldr	r0, [pc, #140]	; (5d0 <_sercom_get_default_pad+0x154>)
     544:	e7a8      	b.n	498 <_sercom_get_default_pad+0x1c>
     546:	2901      	cmp	r1, #1
     548:	d007      	beq.n	55a <_sercom_get_default_pad+0xde>
     54a:	2900      	cmp	r1, #0
     54c:	d015      	beq.n	57a <_sercom_get_default_pad+0xfe>
     54e:	2902      	cmp	r1, #2
     550:	d005      	beq.n	55e <_sercom_get_default_pad+0xe2>
     552:	2903      	cmp	r1, #3
     554:	d005      	beq.n	562 <_sercom_get_default_pad+0xe6>
	return 0;
     556:	2000      	movs	r0, #0
     558:	e79e      	b.n	498 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     55a:	481e      	ldr	r0, [pc, #120]	; (5d4 <_sercom_get_default_pad+0x158>)
     55c:	e79c      	b.n	498 <_sercom_get_default_pad+0x1c>
     55e:	481e      	ldr	r0, [pc, #120]	; (5d8 <_sercom_get_default_pad+0x15c>)
     560:	e79a      	b.n	498 <_sercom_get_default_pad+0x1c>
     562:	481e      	ldr	r0, [pc, #120]	; (5dc <_sercom_get_default_pad+0x160>)
     564:	e798      	b.n	498 <_sercom_get_default_pad+0x1c>
     566:	481e      	ldr	r0, [pc, #120]	; (5e0 <_sercom_get_default_pad+0x164>)
     568:	e796      	b.n	498 <_sercom_get_default_pad+0x1c>
     56a:	2003      	movs	r0, #3
     56c:	e794      	b.n	498 <_sercom_get_default_pad+0x1c>
     56e:	481d      	ldr	r0, [pc, #116]	; (5e4 <_sercom_get_default_pad+0x168>)
     570:	e792      	b.n	498 <_sercom_get_default_pad+0x1c>
     572:	481d      	ldr	r0, [pc, #116]	; (5e8 <_sercom_get_default_pad+0x16c>)
     574:	e790      	b.n	498 <_sercom_get_default_pad+0x1c>
     576:	481d      	ldr	r0, [pc, #116]	; (5ec <_sercom_get_default_pad+0x170>)
     578:	e78e      	b.n	498 <_sercom_get_default_pad+0x1c>
     57a:	481d      	ldr	r0, [pc, #116]	; (5f0 <_sercom_get_default_pad+0x174>)
     57c:	e78c      	b.n	498 <_sercom_get_default_pad+0x1c>
     57e:	46c0      	nop			; (mov r8, r8)
     580:	42001000 	.word	0x42001000
     584:	42001800 	.word	0x42001800
     588:	42001c00 	.word	0x42001c00
     58c:	42001400 	.word	0x42001400
     590:	42000800 	.word	0x42000800
     594:	42000c00 	.word	0x42000c00
     598:	00050003 	.word	0x00050003
     59c:	00060003 	.word	0x00060003
     5a0:	00070003 	.word	0x00070003
     5a4:	00010003 	.word	0x00010003
     5a8:	001e0003 	.word	0x001e0003
     5ac:	001f0003 	.word	0x001f0003
     5b0:	000d0002 	.word	0x000d0002
     5b4:	000e0002 	.word	0x000e0002
     5b8:	000f0002 	.word	0x000f0002
     5bc:	00110003 	.word	0x00110003
     5c0:	00120003 	.word	0x00120003
     5c4:	00130003 	.word	0x00130003
     5c8:	003f0005 	.word	0x003f0005
     5cc:	003e0005 	.word	0x003e0005
     5d0:	00520005 	.word	0x00520005
     5d4:	00170003 	.word	0x00170003
     5d8:	00180003 	.word	0x00180003
     5dc:	00190003 	.word	0x00190003
     5e0:	00040003 	.word	0x00040003
     5e4:	000c0002 	.word	0x000c0002
     5e8:	00100003 	.word	0x00100003
     5ec:	00530005 	.word	0x00530005
     5f0:	00160003 	.word	0x00160003

000005f4 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     5f4:	b530      	push	{r4, r5, lr}
     5f6:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     5f8:	4b0b      	ldr	r3, [pc, #44]	; (628 <_sercom_get_sercom_inst_index+0x34>)
     5fa:	466a      	mov	r2, sp
     5fc:	cb32      	ldmia	r3!, {r1, r4, r5}
     5fe:	c232      	stmia	r2!, {r1, r4, r5}
     600:	cb32      	ldmia	r3!, {r1, r4, r5}
     602:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     604:	9b00      	ldr	r3, [sp, #0]
     606:	4283      	cmp	r3, r0
     608:	d00b      	beq.n	622 <_sercom_get_sercom_inst_index+0x2e>
     60a:	2301      	movs	r3, #1
     60c:	009a      	lsls	r2, r3, #2
     60e:	4669      	mov	r1, sp
     610:	5852      	ldr	r2, [r2, r1]
     612:	4282      	cmp	r2, r0
     614:	d006      	beq.n	624 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     616:	3301      	adds	r3, #1
     618:	2b06      	cmp	r3, #6
     61a:	d1f7      	bne.n	60c <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     61c:	2000      	movs	r0, #0
}
     61e:	b007      	add	sp, #28
     620:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     622:	2300      	movs	r3, #0
			return i;
     624:	b2d8      	uxtb	r0, r3
     626:	e7fa      	b.n	61e <_sercom_get_sercom_inst_index+0x2a>
     628:	0000393c 	.word	0x0000393c

0000062c <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
     62c:	b530      	push	{r4, r5, lr}
     62e:	b085      	sub	sp, #20
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
     630:	aa01      	add	r2, sp, #4
     632:	4b0b      	ldr	r3, [pc, #44]	; (660 <_tc_get_inst_index+0x34>)
     634:	cb32      	ldmia	r3!, {r1, r4, r5}
     636:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
     638:	9b01      	ldr	r3, [sp, #4]
     63a:	4298      	cmp	r0, r3
     63c:	d00d      	beq.n	65a <_tc_get_inst_index+0x2e>
     63e:	9b02      	ldr	r3, [sp, #8]
     640:	4298      	cmp	r0, r3
     642:	d008      	beq.n	656 <_tc_get_inst_index+0x2a>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     644:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
     646:	9a03      	ldr	r2, [sp, #12]
     648:	4282      	cmp	r2, r0
     64a:	d002      	beq.n	652 <_tc_get_inst_index+0x26>
}
     64c:	0018      	movs	r0, r3
     64e:	b005      	add	sp, #20
     650:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
     652:	3302      	adds	r3, #2
     654:	e002      	b.n	65c <_tc_get_inst_index+0x30>
     656:	2301      	movs	r3, #1
     658:	e000      	b.n	65c <_tc_get_inst_index+0x30>
     65a:	2300      	movs	r3, #0
			return i;
     65c:	b2db      	uxtb	r3, r3
     65e:	e7f5      	b.n	64c <_tc_get_inst_index+0x20>
     660:	00003954 	.word	0x00003954

00000664 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
     664:	b5f0      	push	{r4, r5, r6, r7, lr}
     666:	b087      	sub	sp, #28
     668:	0006      	movs	r6, r0
     66a:	000c      	movs	r4, r1
     66c:	0017      	movs	r7, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
     66e:	0008      	movs	r0, r1
     670:	4b80      	ldr	r3, [pc, #512]	; (874 <tc_init+0x210>)
     672:	4798      	blx	r3
     674:	0005      	movs	r5, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
     676:	ab05      	add	r3, sp, #20
     678:	221b      	movs	r2, #27
     67a:	701a      	strb	r2, [r3, #0]
     67c:	3201      	adds	r2, #1
     67e:	705a      	strb	r2, [r3, #1]
     680:	709a      	strb	r2, [r3, #2]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
     682:	ab03      	add	r3, sp, #12
     684:	2280      	movs	r2, #128	; 0x80
     686:	0112      	lsls	r2, r2, #4
     688:	801a      	strh	r2, [r3, #0]
     68a:	2280      	movs	r2, #128	; 0x80
     68c:	0152      	lsls	r2, r2, #5
     68e:	805a      	strh	r2, [r3, #2]
     690:	2280      	movs	r2, #128	; 0x80
     692:	0192      	lsls	r2, r2, #6
     694:	809a      	strh	r2, [r3, #4]
	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
     696:	6034      	str	r4, [r6, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     698:	78bb      	ldrb	r3, [r7, #2]
     69a:	2b08      	cmp	r3, #8
     69c:	d006      	beq.n	6ac <tc_init+0x48>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
     69e:	7133      	strb	r3, [r6, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
     6a0:	8823      	ldrh	r3, [r4, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     6a2:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
     6a4:	07db      	lsls	r3, r3, #31
     6a6:	d505      	bpl.n	6b4 <tc_init+0x50>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
     6a8:	b007      	add	sp, #28
     6aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
     6ac:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     6ae:	07ea      	lsls	r2, r5, #31
     6b0:	d5fa      	bpl.n	6a8 <tc_init+0x44>
     6b2:	e7f4      	b.n	69e <tc_init+0x3a>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
     6b4:	7be3      	ldrb	r3, [r4, #15]
		return STATUS_ERR_DENIED;
     6b6:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
     6b8:	06db      	lsls	r3, r3, #27
     6ba:	d4f5      	bmi.n	6a8 <tc_init+0x44>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
     6bc:	8823      	ldrh	r3, [r4, #0]
     6be:	079b      	lsls	r3, r3, #30
     6c0:	d4f2      	bmi.n	6a8 <tc_init+0x44>
	if (config->pwm_channel[0].enabled) {
     6c2:	7c3b      	ldrb	r3, [r7, #16]
     6c4:	2b00      	cmp	r3, #0
     6c6:	d179      	bne.n	7bc <tc_init+0x158>
	if (config->pwm_channel[1].enabled) {
     6c8:	7f3b      	ldrb	r3, [r7, #28]
     6ca:	2b00      	cmp	r3, #0
     6cc:	d000      	beq.n	6d0 <tc_init+0x6c>
     6ce:	e081      	b.n	7d4 <tc_init+0x170>
			PM->APBCMASK.reg |= mask;
     6d0:	4969      	ldr	r1, [pc, #420]	; (878 <tc_init+0x214>)
     6d2:	6a08      	ldr	r0, [r1, #32]
			inst_pm_apbmask[instance]);
     6d4:	006a      	lsls	r2, r5, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     6d6:	ab03      	add	r3, sp, #12
     6d8:	5ad3      	ldrh	r3, [r2, r3]
     6da:	4303      	orrs	r3, r0
     6dc:	620b      	str	r3, [r1, #32]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
     6de:	78bb      	ldrb	r3, [r7, #2]
     6e0:	2b08      	cmp	r3, #8
     6e2:	d100      	bne.n	6e6 <tc_init+0x82>
     6e4:	e086      	b.n	7f4 <tc_init+0x190>
	gclk_chan_config.source_generator = config->clock_source;
     6e6:	a901      	add	r1, sp, #4
     6e8:	783b      	ldrb	r3, [r7, #0]
     6ea:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
     6ec:	ab05      	add	r3, sp, #20
     6ee:	5d5d      	ldrb	r5, [r3, r5]
     6f0:	0028      	movs	r0, r5
     6f2:	4b62      	ldr	r3, [pc, #392]	; (87c <tc_init+0x218>)
     6f4:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
     6f6:	0028      	movs	r0, r5
     6f8:	4b61      	ldr	r3, [pc, #388]	; (880 <tc_init+0x21c>)
     6fa:	4798      	blx	r3
	ctrla_tmp =
     6fc:	8939      	ldrh	r1, [r7, #8]
     6fe:	88bb      	ldrh	r3, [r7, #4]
     700:	430b      	orrs	r3, r1
			(uint32_t)config->wave_generation |
     702:	78b9      	ldrb	r1, [r7, #2]
     704:	79ba      	ldrb	r2, [r7, #6]
     706:	4311      	orrs	r1, r2
	ctrla_tmp =
     708:	4319      	orrs	r1, r3
	if (config->run_in_standby) {
     70a:	787b      	ldrb	r3, [r7, #1]
     70c:	2b00      	cmp	r3, #0
     70e:	d002      	beq.n	716 <tc_init+0xb2>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
     710:	2380      	movs	r3, #128	; 0x80
     712:	011b      	lsls	r3, r3, #4
     714:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     716:	6832      	ldr	r2, [r6, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     718:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     71a:	b25b      	sxtb	r3, r3
     71c:	2b00      	cmp	r3, #0
     71e:	dbfb      	blt.n	718 <tc_init+0xb4>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
     720:	8021      	strh	r1, [r4, #0]
	if (config->oneshot) {
     722:	7b79      	ldrb	r1, [r7, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
     724:	1e4b      	subs	r3, r1, #1
     726:	4199      	sbcs	r1, r3
     728:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
     72a:	7bbb      	ldrb	r3, [r7, #14]
     72c:	2b00      	cmp	r3, #0
     72e:	d001      	beq.n	734 <tc_init+0xd0>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
     730:	2301      	movs	r3, #1
     732:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     734:	6832      	ldr	r2, [r6, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     736:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     738:	b25b      	sxtb	r3, r3
     73a:	2b00      	cmp	r3, #0
     73c:	dbfb      	blt.n	736 <tc_init+0xd2>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
     73e:	23ff      	movs	r3, #255	; 0xff
     740:	7123      	strb	r3, [r4, #4]
	if (ctrlbset_tmp) {
     742:	2900      	cmp	r1, #0
     744:	d005      	beq.n	752 <tc_init+0xee>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     746:	6832      	ldr	r2, [r6, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     748:	7bd3      	ldrb	r3, [r2, #15]
		while (tc_is_syncing(module_inst)) {
     74a:	b25b      	sxtb	r3, r3
     74c:	2b00      	cmp	r3, #0
     74e:	dbfb      	blt.n	748 <tc_init+0xe4>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
     750:	7161      	strb	r1, [r4, #5]
	ctrlc_tmp = config->waveform_invert_output;
     752:	7ab9      	ldrb	r1, [r7, #10]
		if (config->enable_capture_on_channel[i] == true) {
     754:	7afb      	ldrb	r3, [r7, #11]
     756:	2b00      	cmp	r3, #0
     758:	d001      	beq.n	75e <tc_init+0xfa>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
     75a:	2310      	movs	r3, #16
     75c:	4319      	orrs	r1, r3
		if (config->enable_capture_on_channel[i] == true) {
     75e:	7b3b      	ldrb	r3, [r7, #12]
     760:	2b00      	cmp	r3, #0
     762:	d001      	beq.n	768 <tc_init+0x104>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
     764:	2320      	movs	r3, #32
     766:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     768:	6832      	ldr	r2, [r6, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     76a:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     76c:	b25b      	sxtb	r3, r3
     76e:	2b00      	cmp	r3, #0
     770:	dbfb      	blt.n	76a <tc_init+0x106>
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
     772:	71a1      	strb	r1, [r4, #6]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     774:	6832      	ldr	r2, [r6, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     776:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     778:	b25b      	sxtb	r3, r3
     77a:	2b00      	cmp	r3, #0
     77c:	dbfb      	blt.n	776 <tc_init+0x112>
	switch (module_inst->counter_size) {
     77e:	7933      	ldrb	r3, [r6, #4]
     780:	2b04      	cmp	r3, #4
     782:	d03f      	beq.n	804 <tc_init+0x1a0>
     784:	2b08      	cmp	r3, #8
     786:	d05e      	beq.n	846 <tc_init+0x1e2>
	return STATUS_ERR_INVALID_ARG;
     788:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
     78a:	2b00      	cmp	r3, #0
     78c:	d000      	beq.n	790 <tc_init+0x12c>
     78e:	e78b      	b.n	6a8 <tc_init+0x44>
     790:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     792:	b25b      	sxtb	r3, r3
     794:	2b00      	cmp	r3, #0
     796:	dbfb      	blt.n	790 <tc_init+0x12c>
				= config->counter_16_bit.value;
     798:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
     79a:	8223      	strh	r3, [r4, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     79c:	6832      	ldr	r2, [r6, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     79e:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     7a0:	b25b      	sxtb	r3, r3
     7a2:	2b00      	cmp	r3, #0
     7a4:	dbfb      	blt.n	79e <tc_init+0x13a>
					config->counter_16_bit.compare_capture_channel[0];
     7a6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
     7a8:	8323      	strh	r3, [r4, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     7aa:	6832      	ldr	r2, [r6, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     7ac:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     7ae:	b25b      	sxtb	r3, r3
     7b0:	2b00      	cmp	r3, #0
     7b2:	dbfb      	blt.n	7ac <tc_init+0x148>
					config->counter_16_bit.compare_capture_channel[1];
     7b4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
     7b6:	8363      	strh	r3, [r4, #26]
			return STATUS_OK;
     7b8:	2000      	movs	r0, #0
     7ba:	e775      	b.n	6a8 <tc_init+0x44>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     7bc:	a902      	add	r1, sp, #8
     7be:	2301      	movs	r3, #1
     7c0:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
     7c2:	2200      	movs	r2, #0
     7c4:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
     7c6:	7e3a      	ldrb	r2, [r7, #24]
     7c8:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     7ca:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
     7cc:	7d38      	ldrb	r0, [r7, #20]
     7ce:	4b2d      	ldr	r3, [pc, #180]	; (884 <tc_init+0x220>)
     7d0:	4798      	blx	r3
     7d2:	e779      	b.n	6c8 <tc_init+0x64>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     7d4:	a902      	add	r1, sp, #8
     7d6:	2301      	movs	r3, #1
     7d8:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
     7da:	2200      	movs	r2, #0
     7dc:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
     7de:	3224      	adds	r2, #36	; 0x24
     7e0:	18ba      	adds	r2, r7, r2
     7e2:	7812      	ldrb	r2, [r2, #0]
     7e4:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     7e6:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
     7e8:	331f      	adds	r3, #31
     7ea:	18fb      	adds	r3, r7, r3
     7ec:	7818      	ldrb	r0, [r3, #0]
     7ee:	4b25      	ldr	r3, [pc, #148]	; (884 <tc_init+0x220>)
     7f0:	4798      	blx	r3
     7f2:	e76d      	b.n	6d0 <tc_init+0x6c>
     7f4:	6a08      	ldr	r0, [r1, #32]
				inst_pm_apbmask[instance + 1]);
     7f6:	1c6a      	adds	r2, r5, #1
     7f8:	0052      	lsls	r2, r2, #1
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     7fa:	ab03      	add	r3, sp, #12
     7fc:	5ad3      	ldrh	r3, [r2, r3]
     7fe:	4303      	orrs	r3, r0
     800:	620b      	str	r3, [r1, #32]
     802:	e770      	b.n	6e6 <tc_init+0x82>
     804:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     806:	b25b      	sxtb	r3, r3
     808:	2b00      	cmp	r3, #0
     80a:	dbfb      	blt.n	804 <tc_init+0x1a0>
					config->counter_8_bit.value;
     80c:	2328      	movs	r3, #40	; 0x28
     80e:	5cfb      	ldrb	r3, [r7, r3]
			hw->COUNT8.COUNT.reg =
     810:	7423      	strb	r3, [r4, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     812:	6832      	ldr	r2, [r6, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     814:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     816:	b25b      	sxtb	r3, r3
     818:	2b00      	cmp	r3, #0
     81a:	dbfb      	blt.n	814 <tc_init+0x1b0>
					config->counter_8_bit.period;
     81c:	2329      	movs	r3, #41	; 0x29
     81e:	5cfb      	ldrb	r3, [r7, r3]
			hw->COUNT8.PER.reg =
     820:	7523      	strb	r3, [r4, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     822:	6832      	ldr	r2, [r6, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     824:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     826:	b25b      	sxtb	r3, r3
     828:	2b00      	cmp	r3, #0
     82a:	dbfb      	blt.n	824 <tc_init+0x1c0>
					config->counter_8_bit.compare_capture_channel[0];
     82c:	232a      	movs	r3, #42	; 0x2a
     82e:	5cfb      	ldrb	r3, [r7, r3]
			hw->COUNT8.CC[0].reg =
     830:	7623      	strb	r3, [r4, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     832:	6832      	ldr	r2, [r6, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     834:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     836:	b25b      	sxtb	r3, r3
     838:	2b00      	cmp	r3, #0
     83a:	dbfb      	blt.n	834 <tc_init+0x1d0>
					config->counter_8_bit.compare_capture_channel[1];
     83c:	232b      	movs	r3, #43	; 0x2b
     83e:	5cfb      	ldrb	r3, [r7, r3]
			hw->COUNT8.CC[1].reg =
     840:	7663      	strb	r3, [r4, #25]
			return STATUS_OK;
     842:	2000      	movs	r0, #0
     844:	e730      	b.n	6a8 <tc_init+0x44>
     846:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     848:	b25b      	sxtb	r3, r3
     84a:	2b00      	cmp	r3, #0
     84c:	dbfb      	blt.n	846 <tc_init+0x1e2>
				= config->counter_32_bit.value;
     84e:	6abb      	ldr	r3, [r7, #40]	; 0x28
     850:	6123      	str	r3, [r4, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     852:	6832      	ldr	r2, [r6, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     854:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     856:	b25b      	sxtb	r3, r3
     858:	2b00      	cmp	r3, #0
     85a:	dbfb      	blt.n	854 <tc_init+0x1f0>
			hw->COUNT32.CC[0].reg =
     85c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     85e:	61a3      	str	r3, [r4, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     860:	6832      	ldr	r2, [r6, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     862:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     864:	b25b      	sxtb	r3, r3
     866:	2b00      	cmp	r3, #0
     868:	dbfb      	blt.n	862 <tc_init+0x1fe>
					config->counter_32_bit.compare_capture_channel[1];
     86a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
     86c:	61e3      	str	r3, [r4, #28]
			return STATUS_OK;
     86e:	2000      	movs	r0, #0
     870:	e71a      	b.n	6a8 <tc_init+0x44>
     872:	46c0      	nop			; (mov r8, r8)
     874:	0000062d 	.word	0x0000062d
     878:	40000400 	.word	0x40000400
     87c:	000014c1 	.word	0x000014c1
     880:	00001435 	.word	0x00001435
     884:	000015b9 	.word	0x000015b9

00000888 <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
     888:	6802      	ldr	r2, [r0, #0]
     88a:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
     88c:	b25b      	sxtb	r3, r3
     88e:	2b00      	cmp	r3, #0
     890:	dbfb      	blt.n	88a <tc_get_count_value+0x2>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
     892:	7903      	ldrb	r3, [r0, #4]
     894:	2b04      	cmp	r3, #4
     896:	d005      	beq.n	8a4 <tc_get_count_value+0x1c>
     898:	2b08      	cmp	r3, #8
     89a:	d009      	beq.n	8b0 <tc_get_count_value+0x28>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
     89c:	2000      	movs	r0, #0
	switch (module_inst->counter_size) {
     89e:	2b00      	cmp	r3, #0
     8a0:	d003      	beq.n	8aa <tc_get_count_value+0x22>
}
     8a2:	4770      	bx	lr
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
     8a4:	7c10      	ldrb	r0, [r2, #16]
     8a6:	b2c0      	uxtb	r0, r0
     8a8:	e7fb      	b.n	8a2 <tc_get_count_value+0x1a>
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
     8aa:	8a10      	ldrh	r0, [r2, #16]
     8ac:	b280      	uxth	r0, r0
     8ae:	e7f8      	b.n	8a2 <tc_get_count_value+0x1a>
			return tc_module->COUNT32.COUNT.reg;
     8b0:	6910      	ldr	r0, [r2, #16]
     8b2:	e7f6      	b.n	8a2 <tc_get_count_value+0x1a>

000008b4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
     8b4:	b5f0      	push	{r4, r5, r6, r7, lr}
     8b6:	46c6      	mov	lr, r8
     8b8:	b500      	push	{lr}
     8ba:	000c      	movs	r4, r1
     8bc:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
     8be:	2800      	cmp	r0, #0
     8c0:	d10f      	bne.n	8e2 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
     8c2:	2a00      	cmp	r2, #0
     8c4:	dd11      	ble.n	8ea <_read+0x36>
     8c6:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
     8c8:	4e09      	ldr	r6, [pc, #36]	; (8f0 <_read+0x3c>)
     8ca:	4d0a      	ldr	r5, [pc, #40]	; (8f4 <_read+0x40>)
     8cc:	6830      	ldr	r0, [r6, #0]
     8ce:	0021      	movs	r1, r4
     8d0:	682b      	ldr	r3, [r5, #0]
     8d2:	4798      	blx	r3
		ptr++;
     8d4:	3401      	adds	r4, #1
	for (; len > 0; --len) {
     8d6:	42bc      	cmp	r4, r7
     8d8:	d1f8      	bne.n	8cc <_read+0x18>
		nChars++;
	}
	return nChars;
}
     8da:	4640      	mov	r0, r8
     8dc:	bc04      	pop	{r2}
     8de:	4690      	mov	r8, r2
     8e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
     8e2:	2301      	movs	r3, #1
     8e4:	425b      	negs	r3, r3
     8e6:	4698      	mov	r8, r3
     8e8:	e7f7      	b.n	8da <_read+0x26>
	for (; len > 0; --len) {
     8ea:	4680      	mov	r8, r0
     8ec:	e7f5      	b.n	8da <_read+0x26>
     8ee:	46c0      	nop			; (mov r8, r8)
     8f0:	20000134 	.word	0x20000134
     8f4:	2000012c 	.word	0x2000012c

000008f8 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
     8f8:	b5f0      	push	{r4, r5, r6, r7, lr}
     8fa:	46c6      	mov	lr, r8
     8fc:	b500      	push	{lr}
     8fe:	000e      	movs	r6, r1
     900:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
     902:	3801      	subs	r0, #1
     904:	2802      	cmp	r0, #2
     906:	d810      	bhi.n	92a <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
     908:	2a00      	cmp	r2, #0
     90a:	d011      	beq.n	930 <_write+0x38>
     90c:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
     90e:	4b0c      	ldr	r3, [pc, #48]	; (940 <_write+0x48>)
     910:	4698      	mov	r8, r3
     912:	4f0c      	ldr	r7, [pc, #48]	; (944 <_write+0x4c>)
     914:	4643      	mov	r3, r8
     916:	6818      	ldr	r0, [r3, #0]
     918:	5d31      	ldrb	r1, [r6, r4]
     91a:	683b      	ldr	r3, [r7, #0]
     91c:	4798      	blx	r3
     91e:	2800      	cmp	r0, #0
     920:	db08      	blt.n	934 <_write+0x3c>
			return -1;
		}
		++nChars;
     922:	3401      	adds	r4, #1
	for (; len != 0; --len) {
     924:	42a5      	cmp	r5, r4
     926:	d1f5      	bne.n	914 <_write+0x1c>
     928:	e006      	b.n	938 <_write+0x40>
		return -1;
     92a:	2401      	movs	r4, #1
     92c:	4264      	negs	r4, r4
     92e:	e003      	b.n	938 <_write+0x40>
	for (; len != 0; --len) {
     930:	0014      	movs	r4, r2
     932:	e001      	b.n	938 <_write+0x40>
			return -1;
     934:	2401      	movs	r4, #1
     936:	4264      	negs	r4, r4
	}
	return nChars;
}
     938:	0020      	movs	r0, r4
     93a:	bc04      	pop	{r2}
     93c:	4690      	mov	r8, r2
     93e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     940:	20000134 	.word	0x20000134
     944:	20000130 	.word	0x20000130

00000948 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     948:	b5f0      	push	{r4, r5, r6, r7, lr}
     94a:	46de      	mov	lr, fp
     94c:	4657      	mov	r7, sl
     94e:	464e      	mov	r6, r9
     950:	4645      	mov	r5, r8
     952:	b5e0      	push	{r5, r6, r7, lr}
     954:	b091      	sub	sp, #68	; 0x44
     956:	0005      	movs	r5, r0
     958:	000c      	movs	r4, r1
     95a:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     95c:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     95e:	0008      	movs	r0, r1
     960:	4bbc      	ldr	r3, [pc, #752]	; (c54 <usart_init+0x30c>)
     962:	4798      	blx	r3
     964:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     966:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     968:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     96a:	07db      	lsls	r3, r3, #31
     96c:	d506      	bpl.n	97c <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     96e:	b011      	add	sp, #68	; 0x44
     970:	bc3c      	pop	{r2, r3, r4, r5}
     972:	4690      	mov	r8, r2
     974:	4699      	mov	r9, r3
     976:	46a2      	mov	sl, r4
     978:	46ab      	mov	fp, r5
     97a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     97c:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
     97e:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     980:	079b      	lsls	r3, r3, #30
     982:	d4f4      	bmi.n	96e <usart_init+0x26>
     984:	49b4      	ldr	r1, [pc, #720]	; (c58 <usart_init+0x310>)
     986:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     988:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     98a:	2301      	movs	r3, #1
     98c:	40bb      	lsls	r3, r7
     98e:	4303      	orrs	r3, r0
     990:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     992:	a90f      	add	r1, sp, #60	; 0x3c
     994:	272d      	movs	r7, #45	; 0x2d
     996:	5df3      	ldrb	r3, [r6, r7]
     998:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     99a:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     99c:	b2d3      	uxtb	r3, r2
     99e:	9302      	str	r3, [sp, #8]
     9a0:	0018      	movs	r0, r3
     9a2:	4bae      	ldr	r3, [pc, #696]	; (c5c <usart_init+0x314>)
     9a4:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     9a6:	9802      	ldr	r0, [sp, #8]
     9a8:	4bad      	ldr	r3, [pc, #692]	; (c60 <usart_init+0x318>)
     9aa:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     9ac:	5df0      	ldrb	r0, [r6, r7]
     9ae:	2100      	movs	r1, #0
     9b0:	4bac      	ldr	r3, [pc, #688]	; (c64 <usart_init+0x31c>)
     9b2:	4798      	blx	r3
	module->character_size = config->character_size;
     9b4:	7af3      	ldrb	r3, [r6, #11]
     9b6:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     9b8:	2324      	movs	r3, #36	; 0x24
     9ba:	5cf3      	ldrb	r3, [r6, r3]
     9bc:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     9be:	2325      	movs	r3, #37	; 0x25
     9c0:	5cf3      	ldrb	r3, [r6, r3]
     9c2:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
     9c4:	7ef3      	ldrb	r3, [r6, #27]
     9c6:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     9c8:	7f33      	ldrb	r3, [r6, #28]
     9ca:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
     9cc:	682b      	ldr	r3, [r5, #0]
     9ce:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     9d0:	0018      	movs	r0, r3
     9d2:	4ba0      	ldr	r3, [pc, #640]	; (c54 <usart_init+0x30c>)
     9d4:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     9d6:	3014      	adds	r0, #20
	uint16_t baud  = 0;
     9d8:	2200      	movs	r2, #0
     9da:	230e      	movs	r3, #14
     9dc:	a906      	add	r1, sp, #24
     9de:	468c      	mov	ip, r1
     9e0:	4463      	add	r3, ip
     9e2:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
     9e4:	8a32      	ldrh	r2, [r6, #16]
     9e6:	9202      	str	r2, [sp, #8]
     9e8:	2380      	movs	r3, #128	; 0x80
     9ea:	01db      	lsls	r3, r3, #7
     9ec:	429a      	cmp	r2, r3
     9ee:	d100      	bne.n	9f2 <usart_init+0xaa>
     9f0:	e09e      	b.n	b30 <usart_init+0x1e8>
     9f2:	d90f      	bls.n	a14 <usart_init+0xcc>
     9f4:	23c0      	movs	r3, #192	; 0xc0
     9f6:	01db      	lsls	r3, r3, #7
     9f8:	9a02      	ldr	r2, [sp, #8]
     9fa:	429a      	cmp	r2, r3
     9fc:	d100      	bne.n	a00 <usart_init+0xb8>
     9fe:	e092      	b.n	b26 <usart_init+0x1de>
     a00:	2380      	movs	r3, #128	; 0x80
     a02:	021b      	lsls	r3, r3, #8
     a04:	429a      	cmp	r2, r3
     a06:	d000      	beq.n	a0a <usart_init+0xc2>
     a08:	e11f      	b.n	c4a <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     a0a:	2303      	movs	r3, #3
     a0c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     a0e:	2300      	movs	r3, #0
     a10:	9307      	str	r3, [sp, #28]
     a12:	e008      	b.n	a26 <usart_init+0xde>
	switch (config->sample_rate) {
     a14:	2380      	movs	r3, #128	; 0x80
     a16:	019b      	lsls	r3, r3, #6
     a18:	429a      	cmp	r2, r3
     a1a:	d000      	beq.n	a1e <usart_init+0xd6>
     a1c:	e115      	b.n	c4a <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     a1e:	2310      	movs	r3, #16
     a20:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     a22:	3b0f      	subs	r3, #15
     a24:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
     a26:	6833      	ldr	r3, [r6, #0]
     a28:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     a2a:	68f3      	ldr	r3, [r6, #12]
     a2c:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
     a2e:	6973      	ldr	r3, [r6, #20]
     a30:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     a32:	7e33      	ldrb	r3, [r6, #24]
     a34:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     a36:	2326      	movs	r3, #38	; 0x26
     a38:	5cf3      	ldrb	r3, [r6, r3]
     a3a:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     a3c:	6873      	ldr	r3, [r6, #4]
     a3e:	4699      	mov	r9, r3
	switch (transfer_mode)
     a40:	2b00      	cmp	r3, #0
     a42:	d100      	bne.n	a46 <usart_init+0xfe>
     a44:	e0a0      	b.n	b88 <usart_init+0x240>
     a46:	2380      	movs	r3, #128	; 0x80
     a48:	055b      	lsls	r3, r3, #21
     a4a:	4599      	cmp	r9, r3
     a4c:	d100      	bne.n	a50 <usart_init+0x108>
     a4e:	e084      	b.n	b5a <usart_init+0x212>
	if(config->encoding_format_enable) {
     a50:	7e73      	ldrb	r3, [r6, #25]
     a52:	2b00      	cmp	r3, #0
     a54:	d002      	beq.n	a5c <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     a56:	7eb3      	ldrb	r3, [r6, #26]
     a58:	4642      	mov	r2, r8
     a5a:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     a5c:	682a      	ldr	r2, [r5, #0]
     a5e:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     a60:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     a62:	2b00      	cmp	r3, #0
     a64:	d1fc      	bne.n	a60 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
     a66:	330e      	adds	r3, #14
     a68:	aa06      	add	r2, sp, #24
     a6a:	4694      	mov	ip, r2
     a6c:	4463      	add	r3, ip
     a6e:	881b      	ldrh	r3, [r3, #0]
     a70:	4642      	mov	r2, r8
     a72:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
     a74:	9b05      	ldr	r3, [sp, #20]
     a76:	9a03      	ldr	r2, [sp, #12]
     a78:	4313      	orrs	r3, r2
     a7a:	9a04      	ldr	r2, [sp, #16]
     a7c:	4313      	orrs	r3, r2
     a7e:	464a      	mov	r2, r9
     a80:	4313      	orrs	r3, r2
     a82:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     a84:	465b      	mov	r3, fp
     a86:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
     a88:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     a8a:	4653      	mov	r3, sl
     a8c:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     a8e:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
     a90:	2327      	movs	r3, #39	; 0x27
     a92:	5cf3      	ldrb	r3, [r6, r3]
     a94:	2b00      	cmp	r3, #0
     a96:	d101      	bne.n	a9c <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     a98:	3304      	adds	r3, #4
     a9a:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     a9c:	7e73      	ldrb	r3, [r6, #25]
     a9e:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     aa0:	7f32      	ldrb	r2, [r6, #28]
     aa2:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     aa4:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     aa6:	7f72      	ldrb	r2, [r6, #29]
     aa8:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     aaa:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     aac:	2224      	movs	r2, #36	; 0x24
     aae:	5cb2      	ldrb	r2, [r6, r2]
     ab0:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     ab2:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     ab4:	2225      	movs	r2, #37	; 0x25
     ab6:	5cb2      	ldrb	r2, [r6, r2]
     ab8:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     aba:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
     abc:	7ab1      	ldrb	r1, [r6, #10]
     abe:	7af2      	ldrb	r2, [r6, #11]
     ac0:	4311      	orrs	r1, r2
     ac2:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
     ac4:	8933      	ldrh	r3, [r6, #8]
     ac6:	2bff      	cmp	r3, #255	; 0xff
     ac8:	d100      	bne.n	acc <usart_init+0x184>
     aca:	e081      	b.n	bd0 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     acc:	2280      	movs	r2, #128	; 0x80
     ace:	0452      	lsls	r2, r2, #17
     ad0:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     ad2:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     ad4:	232c      	movs	r3, #44	; 0x2c
     ad6:	5cf3      	ldrb	r3, [r6, r3]
     ad8:	2b00      	cmp	r3, #0
     ada:	d103      	bne.n	ae4 <usart_init+0x19c>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     adc:	4b62      	ldr	r3, [pc, #392]	; (c68 <usart_init+0x320>)
     ade:	789b      	ldrb	r3, [r3, #2]
     ae0:	079b      	lsls	r3, r3, #30
     ae2:	d501      	bpl.n	ae8 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     ae4:	2380      	movs	r3, #128	; 0x80
     ae6:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
     ae8:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     aea:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     aec:	2b00      	cmp	r3, #0
     aee:	d1fc      	bne.n	aea <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
     af0:	4643      	mov	r3, r8
     af2:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     af4:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     af6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     af8:	2b00      	cmp	r3, #0
     afa:	d1fc      	bne.n	af6 <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
     afc:	4643      	mov	r3, r8
     afe:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     b00:	ab0e      	add	r3, sp, #56	; 0x38
     b02:	2280      	movs	r2, #128	; 0x80
     b04:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     b06:	2200      	movs	r2, #0
     b08:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
     b0a:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     b0c:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     b0e:	6b33      	ldr	r3, [r6, #48]	; 0x30
     b10:	930a      	str	r3, [sp, #40]	; 0x28
     b12:	6b73      	ldr	r3, [r6, #52]	; 0x34
     b14:	930b      	str	r3, [sp, #44]	; 0x2c
     b16:	6bb3      	ldr	r3, [r6, #56]	; 0x38
     b18:	930c      	str	r3, [sp, #48]	; 0x30
     b1a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     b1c:	9302      	str	r3, [sp, #8]
     b1e:	930d      	str	r3, [sp, #52]	; 0x34
     b20:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     b22:	ae0a      	add	r6, sp, #40	; 0x28
     b24:	e063      	b.n	bee <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     b26:	2308      	movs	r3, #8
     b28:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     b2a:	3b07      	subs	r3, #7
     b2c:	9307      	str	r3, [sp, #28]
     b2e:	e77a      	b.n	a26 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
     b30:	6833      	ldr	r3, [r6, #0]
     b32:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     b34:	68f3      	ldr	r3, [r6, #12]
     b36:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
     b38:	6973      	ldr	r3, [r6, #20]
     b3a:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     b3c:	7e33      	ldrb	r3, [r6, #24]
     b3e:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     b40:	2326      	movs	r3, #38	; 0x26
     b42:	5cf3      	ldrb	r3, [r6, r3]
     b44:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     b46:	6873      	ldr	r3, [r6, #4]
     b48:	4699      	mov	r9, r3
	switch (transfer_mode)
     b4a:	2b00      	cmp	r3, #0
     b4c:	d018      	beq.n	b80 <usart_init+0x238>
     b4e:	2380      	movs	r3, #128	; 0x80
     b50:	055b      	lsls	r3, r3, #21
     b52:	4599      	cmp	r9, r3
     b54:	d001      	beq.n	b5a <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
     b56:	2000      	movs	r0, #0
     b58:	e025      	b.n	ba6 <usart_init+0x25e>
			if (!config->use_external_clock) {
     b5a:	2327      	movs	r3, #39	; 0x27
     b5c:	5cf3      	ldrb	r3, [r6, r3]
     b5e:	2b00      	cmp	r3, #0
     b60:	d000      	beq.n	b64 <usart_init+0x21c>
     b62:	e775      	b.n	a50 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     b64:	6a33      	ldr	r3, [r6, #32]
     b66:	001f      	movs	r7, r3
     b68:	b2c0      	uxtb	r0, r0
     b6a:	4b40      	ldr	r3, [pc, #256]	; (c6c <usart_init+0x324>)
     b6c:	4798      	blx	r3
     b6e:	0001      	movs	r1, r0
     b70:	220e      	movs	r2, #14
     b72:	ab06      	add	r3, sp, #24
     b74:	469c      	mov	ip, r3
     b76:	4462      	add	r2, ip
     b78:	0038      	movs	r0, r7
     b7a:	4b3d      	ldr	r3, [pc, #244]	; (c70 <usart_init+0x328>)
     b7c:	4798      	blx	r3
     b7e:	e012      	b.n	ba6 <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     b80:	2308      	movs	r3, #8
     b82:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     b84:	2300      	movs	r3, #0
     b86:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
     b88:	2327      	movs	r3, #39	; 0x27
     b8a:	5cf3      	ldrb	r3, [r6, r3]
     b8c:	2b00      	cmp	r3, #0
     b8e:	d00e      	beq.n	bae <usart_init+0x266>
				status_code =
     b90:	9b06      	ldr	r3, [sp, #24]
     b92:	9300      	str	r3, [sp, #0]
     b94:	9b07      	ldr	r3, [sp, #28]
     b96:	220e      	movs	r2, #14
     b98:	a906      	add	r1, sp, #24
     b9a:	468c      	mov	ip, r1
     b9c:	4462      	add	r2, ip
     b9e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     ba0:	6a30      	ldr	r0, [r6, #32]
     ba2:	4f34      	ldr	r7, [pc, #208]	; (c74 <usart_init+0x32c>)
     ba4:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
     ba6:	2800      	cmp	r0, #0
     ba8:	d000      	beq.n	bac <usart_init+0x264>
     baa:	e6e0      	b.n	96e <usart_init+0x26>
     bac:	e750      	b.n	a50 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
     bae:	6a33      	ldr	r3, [r6, #32]
     bb0:	001f      	movs	r7, r3
     bb2:	b2c0      	uxtb	r0, r0
     bb4:	4b2d      	ldr	r3, [pc, #180]	; (c6c <usart_init+0x324>)
     bb6:	4798      	blx	r3
     bb8:	0001      	movs	r1, r0
				status_code =
     bba:	9b06      	ldr	r3, [sp, #24]
     bbc:	9300      	str	r3, [sp, #0]
     bbe:	9b07      	ldr	r3, [sp, #28]
     bc0:	220e      	movs	r2, #14
     bc2:	a806      	add	r0, sp, #24
     bc4:	4684      	mov	ip, r0
     bc6:	4462      	add	r2, ip
     bc8:	0038      	movs	r0, r7
     bca:	4f2a      	ldr	r7, [pc, #168]	; (c74 <usart_init+0x32c>)
     bcc:	47b8      	blx	r7
     bce:	e7ea      	b.n	ba6 <usart_init+0x25e>
		if(config->lin_slave_enable) {
     bd0:	7ef3      	ldrb	r3, [r6, #27]
     bd2:	2b00      	cmp	r3, #0
     bd4:	d100      	bne.n	bd8 <usart_init+0x290>
     bd6:	e77d      	b.n	ad4 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     bd8:	2380      	movs	r3, #128	; 0x80
     bda:	04db      	lsls	r3, r3, #19
     bdc:	431f      	orrs	r7, r3
     bde:	e779      	b.n	ad4 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     be0:	0020      	movs	r0, r4
     be2:	4b25      	ldr	r3, [pc, #148]	; (c78 <usart_init+0x330>)
     be4:	4798      	blx	r3
     be6:	e007      	b.n	bf8 <usart_init+0x2b0>
     be8:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     bea:	2f04      	cmp	r7, #4
     bec:	d00d      	beq.n	c0a <usart_init+0x2c2>
     bee:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     bf0:	00bb      	lsls	r3, r7, #2
     bf2:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
     bf4:	2800      	cmp	r0, #0
     bf6:	d0f3      	beq.n	be0 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
     bf8:	1c43      	adds	r3, r0, #1
     bfa:	d0f5      	beq.n	be8 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     bfc:	a90e      	add	r1, sp, #56	; 0x38
     bfe:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     c00:	0c00      	lsrs	r0, r0, #16
     c02:	b2c0      	uxtb	r0, r0
     c04:	4b1d      	ldr	r3, [pc, #116]	; (c7c <usart_init+0x334>)
     c06:	4798      	blx	r3
     c08:	e7ee      	b.n	be8 <usart_init+0x2a0>
		module->callback[i]            = NULL;
     c0a:	2300      	movs	r3, #0
     c0c:	60eb      	str	r3, [r5, #12]
     c0e:	612b      	str	r3, [r5, #16]
     c10:	616b      	str	r3, [r5, #20]
     c12:	61ab      	str	r3, [r5, #24]
     c14:	61eb      	str	r3, [r5, #28]
     c16:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
     c18:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     c1a:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     c1c:	2200      	movs	r2, #0
     c1e:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     c20:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     c22:	3330      	adds	r3, #48	; 0x30
     c24:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     c26:	3301      	adds	r3, #1
     c28:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     c2a:	3301      	adds	r3, #1
     c2c:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     c2e:	3301      	adds	r3, #1
     c30:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     c32:	6828      	ldr	r0, [r5, #0]
     c34:	4b07      	ldr	r3, [pc, #28]	; (c54 <usart_init+0x30c>)
     c36:	4798      	blx	r3
     c38:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     c3a:	4911      	ldr	r1, [pc, #68]	; (c80 <usart_init+0x338>)
     c3c:	4b11      	ldr	r3, [pc, #68]	; (c84 <usart_init+0x33c>)
     c3e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     c40:	00a4      	lsls	r4, r4, #2
     c42:	4b11      	ldr	r3, [pc, #68]	; (c88 <usart_init+0x340>)
     c44:	50e5      	str	r5, [r4, r3]
	return status_code;
     c46:	2000      	movs	r0, #0
     c48:	e691      	b.n	96e <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     c4a:	2310      	movs	r3, #16
     c4c:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     c4e:	2300      	movs	r3, #0
     c50:	9307      	str	r3, [sp, #28]
     c52:	e6e8      	b.n	a26 <usart_init+0xde>
     c54:	000005f5 	.word	0x000005f5
     c58:	40000400 	.word	0x40000400
     c5c:	000014c1 	.word	0x000014c1
     c60:	00001435 	.word	0x00001435
     c64:	00000431 	.word	0x00000431
     c68:	41002000 	.word	0x41002000
     c6c:	000014dd 	.word	0x000014dd
     c70:	00000373 	.word	0x00000373
     c74:	0000039d 	.word	0x0000039d
     c78:	0000047d 	.word	0x0000047d
     c7c:	000015b9 	.word	0x000015b9
     c80:	00000d29 	.word	0x00000d29
     c84:	00000ec1 	.word	0x00000ec1
     c88:	20000138 	.word	0x20000138

00000c8c <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     c8c:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
     c8e:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
     c90:	2a00      	cmp	r2, #0
     c92:	d101      	bne.n	c98 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
     c94:	0018      	movs	r0, r3
     c96:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
     c98:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
     c9a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     c9c:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
     c9e:	2a00      	cmp	r2, #0
     ca0:	d1f8      	bne.n	c94 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     ca2:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
     ca4:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
     ca6:	2a00      	cmp	r2, #0
     ca8:	d1fc      	bne.n	ca4 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
     caa:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     cac:	2102      	movs	r1, #2
     cae:	7e1a      	ldrb	r2, [r3, #24]
     cb0:	420a      	tst	r2, r1
     cb2:	d0fc      	beq.n	cae <usart_write_wait+0x22>
	return STATUS_OK;
     cb4:	2300      	movs	r3, #0
     cb6:	e7ed      	b.n	c94 <usart_write_wait+0x8>

00000cb8 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     cb8:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
     cba:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
     cbc:	2a00      	cmp	r2, #0
     cbe:	d101      	bne.n	cc4 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
     cc0:	0018      	movs	r0, r3
     cc2:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
     cc4:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
     cc6:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     cc8:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
     cca:	2a00      	cmp	r2, #0
     ccc:	d1f8      	bne.n	cc0 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     cce:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
     cd0:	7e10      	ldrb	r0, [r2, #24]
     cd2:	0740      	lsls	r0, r0, #29
     cd4:	d5f4      	bpl.n	cc0 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
     cd6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     cd8:	2b00      	cmp	r3, #0
     cda:	d1fc      	bne.n	cd6 <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     cdc:	8b53      	ldrh	r3, [r2, #26]
     cde:	b2db      	uxtb	r3, r3
	if (error_code) {
     ce0:	0698      	lsls	r0, r3, #26
     ce2:	d01d      	beq.n	d20 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
     ce4:	0798      	lsls	r0, r3, #30
     ce6:	d503      	bpl.n	cf0 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     ce8:	2302      	movs	r3, #2
     cea:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
     cec:	3318      	adds	r3, #24
     cee:	e7e7      	b.n	cc0 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     cf0:	0758      	lsls	r0, r3, #29
     cf2:	d503      	bpl.n	cfc <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     cf4:	2304      	movs	r3, #4
     cf6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
     cf8:	331a      	adds	r3, #26
     cfa:	e7e1      	b.n	cc0 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
     cfc:	07d8      	lsls	r0, r3, #31
     cfe:	d503      	bpl.n	d08 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     d00:	2301      	movs	r3, #1
     d02:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
     d04:	3312      	adds	r3, #18
     d06:	e7db      	b.n	cc0 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
     d08:	06d8      	lsls	r0, r3, #27
     d0a:	d503      	bpl.n	d14 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     d0c:	2310      	movs	r3, #16
     d0e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
     d10:	3332      	adds	r3, #50	; 0x32
     d12:	e7d5      	b.n	cc0 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
     d14:	069b      	lsls	r3, r3, #26
     d16:	d503      	bpl.n	d20 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     d18:	2320      	movs	r3, #32
     d1a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
     d1c:	3321      	adds	r3, #33	; 0x21
     d1e:	e7cf      	b.n	cc0 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
     d20:	8d13      	ldrh	r3, [r2, #40]	; 0x28
     d22:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
     d24:	2300      	movs	r3, #0
     d26:	e7cb      	b.n	cc0 <usart_read_wait+0x8>

00000d28 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     d2a:	0080      	lsls	r0, r0, #2
     d2c:	4b62      	ldr	r3, [pc, #392]	; (eb8 <_usart_interrupt_handler+0x190>)
     d2e:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     d30:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     d32:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
     d34:	2b00      	cmp	r3, #0
     d36:	d1fc      	bne.n	d32 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     d38:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     d3a:	7da6      	ldrb	r6, [r4, #22]
     d3c:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
     d3e:	2330      	movs	r3, #48	; 0x30
     d40:	5ceb      	ldrb	r3, [r5, r3]
     d42:	2231      	movs	r2, #49	; 0x31
     d44:	5caf      	ldrb	r7, [r5, r2]
     d46:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     d48:	07f3      	lsls	r3, r6, #31
     d4a:	d522      	bpl.n	d92 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
     d4c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     d4e:	b29b      	uxth	r3, r3
     d50:	2b00      	cmp	r3, #0
     d52:	d01c      	beq.n	d8e <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     d54:	6aaa      	ldr	r2, [r5, #40]	; 0x28
     d56:	7813      	ldrb	r3, [r2, #0]
     d58:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     d5a:	1c51      	adds	r1, r2, #1
     d5c:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     d5e:	7969      	ldrb	r1, [r5, #5]
     d60:	2901      	cmp	r1, #1
     d62:	d00e      	beq.n	d82 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     d64:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     d66:	05db      	lsls	r3, r3, #23
     d68:	0ddb      	lsrs	r3, r3, #23
     d6a:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     d6c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     d6e:	3b01      	subs	r3, #1
     d70:	b29b      	uxth	r3, r3
     d72:	85eb      	strh	r3, [r5, #46]	; 0x2e
     d74:	2b00      	cmp	r3, #0
     d76:	d10c      	bne.n	d92 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     d78:	3301      	adds	r3, #1
     d7a:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     d7c:	3301      	adds	r3, #1
     d7e:	75a3      	strb	r3, [r4, #22]
     d80:	e007      	b.n	d92 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     d82:	7851      	ldrb	r1, [r2, #1]
     d84:	0209      	lsls	r1, r1, #8
     d86:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
     d88:	3202      	adds	r2, #2
     d8a:	62aa      	str	r2, [r5, #40]	; 0x28
     d8c:	e7eb      	b.n	d66 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     d8e:	2301      	movs	r3, #1
     d90:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     d92:	07b3      	lsls	r3, r6, #30
     d94:	d506      	bpl.n	da4 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     d96:	2302      	movs	r3, #2
     d98:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
     d9a:	2200      	movs	r2, #0
     d9c:	3331      	adds	r3, #49	; 0x31
     d9e:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     da0:	07fb      	lsls	r3, r7, #31
     da2:	d41a      	bmi.n	dda <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     da4:	0773      	lsls	r3, r6, #29
     da6:	d565      	bpl.n	e74 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
     da8:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     daa:	b29b      	uxth	r3, r3
     dac:	2b00      	cmp	r3, #0
     dae:	d05f      	beq.n	e70 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     db0:	8b63      	ldrh	r3, [r4, #26]
     db2:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     db4:	071a      	lsls	r2, r3, #28
     db6:	d414      	bmi.n	de2 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     db8:	223f      	movs	r2, #63	; 0x3f
     dba:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     dbc:	2b00      	cmp	r3, #0
     dbe:	d034      	beq.n	e2a <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     dc0:	079a      	lsls	r2, r3, #30
     dc2:	d511      	bpl.n	de8 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     dc4:	221a      	movs	r2, #26
     dc6:	2332      	movs	r3, #50	; 0x32
     dc8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     dca:	3b30      	subs	r3, #48	; 0x30
     dcc:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     dce:	077b      	lsls	r3, r7, #29
     dd0:	d550      	bpl.n	e74 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     dd2:	0028      	movs	r0, r5
     dd4:	696b      	ldr	r3, [r5, #20]
     dd6:	4798      	blx	r3
     dd8:	e04c      	b.n	e74 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     dda:	0028      	movs	r0, r5
     ddc:	68eb      	ldr	r3, [r5, #12]
     dde:	4798      	blx	r3
     de0:	e7e0      	b.n	da4 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
     de2:	2237      	movs	r2, #55	; 0x37
     de4:	4013      	ands	r3, r2
     de6:	e7e9      	b.n	dbc <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     de8:	075a      	lsls	r2, r3, #29
     dea:	d505      	bpl.n	df8 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
     dec:	221e      	movs	r2, #30
     dee:	2332      	movs	r3, #50	; 0x32
     df0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     df2:	3b2e      	subs	r3, #46	; 0x2e
     df4:	8363      	strh	r3, [r4, #26]
     df6:	e7ea      	b.n	dce <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     df8:	07da      	lsls	r2, r3, #31
     dfa:	d505      	bpl.n	e08 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
     dfc:	2213      	movs	r2, #19
     dfe:	2332      	movs	r3, #50	; 0x32
     e00:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     e02:	3b31      	subs	r3, #49	; 0x31
     e04:	8363      	strh	r3, [r4, #26]
     e06:	e7e2      	b.n	dce <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     e08:	06da      	lsls	r2, r3, #27
     e0a:	d505      	bpl.n	e18 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
     e0c:	2242      	movs	r2, #66	; 0x42
     e0e:	2332      	movs	r3, #50	; 0x32
     e10:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     e12:	3b22      	subs	r3, #34	; 0x22
     e14:	8363      	strh	r3, [r4, #26]
     e16:	e7da      	b.n	dce <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
     e18:	2220      	movs	r2, #32
     e1a:	421a      	tst	r2, r3
     e1c:	d0d7      	beq.n	dce <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
     e1e:	3221      	adds	r2, #33	; 0x21
     e20:	2332      	movs	r3, #50	; 0x32
     e22:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     e24:	3b12      	subs	r3, #18
     e26:	8363      	strh	r3, [r4, #26]
     e28:	e7d1      	b.n	dce <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     e2a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     e2c:	05db      	lsls	r3, r3, #23
     e2e:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
     e30:	b2da      	uxtb	r2, r3
     e32:	6a69      	ldr	r1, [r5, #36]	; 0x24
     e34:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
     e36:	6a6a      	ldr	r2, [r5, #36]	; 0x24
     e38:	1c51      	adds	r1, r2, #1
     e3a:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     e3c:	7969      	ldrb	r1, [r5, #5]
     e3e:	2901      	cmp	r1, #1
     e40:	d010      	beq.n	e64 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
     e42:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     e44:	3b01      	subs	r3, #1
     e46:	b29b      	uxth	r3, r3
     e48:	85ab      	strh	r3, [r5, #44]	; 0x2c
     e4a:	2b00      	cmp	r3, #0
     e4c:	d112      	bne.n	e74 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     e4e:	3304      	adds	r3, #4
     e50:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
     e52:	2200      	movs	r2, #0
     e54:	332e      	adds	r3, #46	; 0x2e
     e56:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
     e58:	07bb      	lsls	r3, r7, #30
     e5a:	d50b      	bpl.n	e74 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     e5c:	0028      	movs	r0, r5
     e5e:	692b      	ldr	r3, [r5, #16]
     e60:	4798      	blx	r3
     e62:	e007      	b.n	e74 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
     e64:	0a1b      	lsrs	r3, r3, #8
     e66:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
     e68:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     e6a:	3301      	adds	r3, #1
     e6c:	626b      	str	r3, [r5, #36]	; 0x24
     e6e:	e7e8      	b.n	e42 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     e70:	2304      	movs	r3, #4
     e72:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
     e74:	06f3      	lsls	r3, r6, #27
     e76:	d504      	bpl.n	e82 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
     e78:	2310      	movs	r3, #16
     e7a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
     e7c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
     e7e:	06fb      	lsls	r3, r7, #27
     e80:	d40e      	bmi.n	ea0 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
     e82:	06b3      	lsls	r3, r6, #26
     e84:	d504      	bpl.n	e90 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
     e86:	2320      	movs	r3, #32
     e88:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
     e8a:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
     e8c:	073b      	lsls	r3, r7, #28
     e8e:	d40b      	bmi.n	ea8 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
     e90:	0733      	lsls	r3, r6, #28
     e92:	d504      	bpl.n	e9e <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
     e94:	2308      	movs	r3, #8
     e96:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
     e98:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
     e9a:	06bb      	lsls	r3, r7, #26
     e9c:	d408      	bmi.n	eb0 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
     e9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
     ea0:	0028      	movs	r0, r5
     ea2:	69eb      	ldr	r3, [r5, #28]
     ea4:	4798      	blx	r3
     ea6:	e7ec      	b.n	e82 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
     ea8:	0028      	movs	r0, r5
     eaa:	69ab      	ldr	r3, [r5, #24]
     eac:	4798      	blx	r3
     eae:	e7ef      	b.n	e90 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
     eb0:	6a2b      	ldr	r3, [r5, #32]
     eb2:	0028      	movs	r0, r5
     eb4:	4798      	blx	r3
}
     eb6:	e7f2      	b.n	e9e <_usart_interrupt_handler+0x176>
     eb8:	20000138 	.word	0x20000138

00000ebc <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     ebc:	4770      	bx	lr
	...

00000ec0 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     ec2:	4b0a      	ldr	r3, [pc, #40]	; (eec <_sercom_set_handler+0x2c>)
     ec4:	781b      	ldrb	r3, [r3, #0]
     ec6:	2b00      	cmp	r3, #0
     ec8:	d10c      	bne.n	ee4 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     eca:	4f09      	ldr	r7, [pc, #36]	; (ef0 <_sercom_set_handler+0x30>)
     ecc:	4e09      	ldr	r6, [pc, #36]	; (ef4 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     ece:	4d0a      	ldr	r5, [pc, #40]	; (ef8 <_sercom_set_handler+0x38>)
     ed0:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     ed2:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     ed4:	195a      	adds	r2, r3, r5
     ed6:	6014      	str	r4, [r2, #0]
     ed8:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     eda:	2b18      	cmp	r3, #24
     edc:	d1f9      	bne.n	ed2 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     ede:	2201      	movs	r2, #1
     ee0:	4b02      	ldr	r3, [pc, #8]	; (eec <_sercom_set_handler+0x2c>)
     ee2:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     ee4:	0080      	lsls	r0, r0, #2
     ee6:	4b02      	ldr	r3, [pc, #8]	; (ef0 <_sercom_set_handler+0x30>)
     ee8:	50c1      	str	r1, [r0, r3]
}
     eea:	bdf0      	pop	{r4, r5, r6, r7, pc}
     eec:	200000a2 	.word	0x200000a2
     ef0:	200000a4 	.word	0x200000a4
     ef4:	00000ebd 	.word	0x00000ebd
     ef8:	20000138 	.word	0x20000138

00000efc <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     efc:	b500      	push	{lr}
     efe:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     f00:	2309      	movs	r3, #9
     f02:	466a      	mov	r2, sp
     f04:	7013      	strb	r3, [r2, #0]
     f06:	3301      	adds	r3, #1
     f08:	7053      	strb	r3, [r2, #1]
     f0a:	3301      	adds	r3, #1
     f0c:	7093      	strb	r3, [r2, #2]
     f0e:	3301      	adds	r3, #1
     f10:	70d3      	strb	r3, [r2, #3]
     f12:	3301      	adds	r3, #1
     f14:	7113      	strb	r3, [r2, #4]
     f16:	3301      	adds	r3, #1
     f18:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     f1a:	4b03      	ldr	r3, [pc, #12]	; (f28 <_sercom_get_interrupt_vector+0x2c>)
     f1c:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     f1e:	466b      	mov	r3, sp
     f20:	5618      	ldrsb	r0, [r3, r0]
}
     f22:	b003      	add	sp, #12
     f24:	bd00      	pop	{pc}
     f26:	46c0      	nop			; (mov r8, r8)
     f28:	000005f5 	.word	0x000005f5

00000f2c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     f2c:	b510      	push	{r4, lr}
     f2e:	4b02      	ldr	r3, [pc, #8]	; (f38 <SERCOM0_Handler+0xc>)
     f30:	681b      	ldr	r3, [r3, #0]
     f32:	2000      	movs	r0, #0
     f34:	4798      	blx	r3
     f36:	bd10      	pop	{r4, pc}
     f38:	200000a4 	.word	0x200000a4

00000f3c <SERCOM1_Handler>:
     f3c:	b510      	push	{r4, lr}
     f3e:	4b02      	ldr	r3, [pc, #8]	; (f48 <SERCOM1_Handler+0xc>)
     f40:	685b      	ldr	r3, [r3, #4]
     f42:	2001      	movs	r0, #1
     f44:	4798      	blx	r3
     f46:	bd10      	pop	{r4, pc}
     f48:	200000a4 	.word	0x200000a4

00000f4c <SERCOM2_Handler>:
     f4c:	b510      	push	{r4, lr}
     f4e:	4b02      	ldr	r3, [pc, #8]	; (f58 <SERCOM2_Handler+0xc>)
     f50:	689b      	ldr	r3, [r3, #8]
     f52:	2002      	movs	r0, #2
     f54:	4798      	blx	r3
     f56:	bd10      	pop	{r4, pc}
     f58:	200000a4 	.word	0x200000a4

00000f5c <SERCOM3_Handler>:
     f5c:	b510      	push	{r4, lr}
     f5e:	4b02      	ldr	r3, [pc, #8]	; (f68 <SERCOM3_Handler+0xc>)
     f60:	68db      	ldr	r3, [r3, #12]
     f62:	2003      	movs	r0, #3
     f64:	4798      	blx	r3
     f66:	bd10      	pop	{r4, pc}
     f68:	200000a4 	.word	0x200000a4

00000f6c <SERCOM4_Handler>:
     f6c:	b510      	push	{r4, lr}
     f6e:	4b02      	ldr	r3, [pc, #8]	; (f78 <SERCOM4_Handler+0xc>)
     f70:	691b      	ldr	r3, [r3, #16]
     f72:	2004      	movs	r0, #4
     f74:	4798      	blx	r3
     f76:	bd10      	pop	{r4, pc}
     f78:	200000a4 	.word	0x200000a4

00000f7c <SERCOM5_Handler>:
     f7c:	b510      	push	{r4, lr}
     f7e:	4b02      	ldr	r3, [pc, #8]	; (f88 <SERCOM5_Handler+0xc>)
     f80:	695b      	ldr	r3, [r3, #20]
     f82:	2005      	movs	r0, #5
     f84:	4798      	blx	r3
     f86:	bd10      	pop	{r4, pc}
     f88:	200000a4 	.word	0x200000a4

00000f8c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     f8c:	4b0c      	ldr	r3, [pc, #48]	; (fc0 <cpu_irq_enter_critical+0x34>)
     f8e:	681b      	ldr	r3, [r3, #0]
     f90:	2b00      	cmp	r3, #0
     f92:	d106      	bne.n	fa2 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     f94:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     f98:	2b00      	cmp	r3, #0
     f9a:	d007      	beq.n	fac <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     f9c:	2200      	movs	r2, #0
     f9e:	4b09      	ldr	r3, [pc, #36]	; (fc4 <cpu_irq_enter_critical+0x38>)
     fa0:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     fa2:	4a07      	ldr	r2, [pc, #28]	; (fc0 <cpu_irq_enter_critical+0x34>)
     fa4:	6813      	ldr	r3, [r2, #0]
     fa6:	3301      	adds	r3, #1
     fa8:	6013      	str	r3, [r2, #0]
}
     faa:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     fac:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     fae:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     fb2:	2200      	movs	r2, #0
     fb4:	4b04      	ldr	r3, [pc, #16]	; (fc8 <cpu_irq_enter_critical+0x3c>)
     fb6:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     fb8:	3201      	adds	r2, #1
     fba:	4b02      	ldr	r3, [pc, #8]	; (fc4 <cpu_irq_enter_critical+0x38>)
     fbc:	701a      	strb	r2, [r3, #0]
     fbe:	e7f0      	b.n	fa2 <cpu_irq_enter_critical+0x16>
     fc0:	200000bc 	.word	0x200000bc
     fc4:	200000c0 	.word	0x200000c0
     fc8:	2000001c 	.word	0x2000001c

00000fcc <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     fcc:	4b08      	ldr	r3, [pc, #32]	; (ff0 <cpu_irq_leave_critical+0x24>)
     fce:	681a      	ldr	r2, [r3, #0]
     fd0:	3a01      	subs	r2, #1
     fd2:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     fd4:	681b      	ldr	r3, [r3, #0]
     fd6:	2b00      	cmp	r3, #0
     fd8:	d109      	bne.n	fee <cpu_irq_leave_critical+0x22>
     fda:	4b06      	ldr	r3, [pc, #24]	; (ff4 <cpu_irq_leave_critical+0x28>)
     fdc:	781b      	ldrb	r3, [r3, #0]
     fde:	2b00      	cmp	r3, #0
     fe0:	d005      	beq.n	fee <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     fe2:	2201      	movs	r2, #1
     fe4:	4b04      	ldr	r3, [pc, #16]	; (ff8 <cpu_irq_leave_critical+0x2c>)
     fe6:	701a      	strb	r2, [r3, #0]
     fe8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     fec:	b662      	cpsie	i
	}
}
     fee:	4770      	bx	lr
     ff0:	200000bc 	.word	0x200000bc
     ff4:	200000c0 	.word	0x200000c0
     ff8:	2000001c 	.word	0x2000001c

00000ffc <system_board_init>:




void system_board_init(void)
{
     ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
     ffe:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    1000:	ac01      	add	r4, sp, #4
    1002:	2501      	movs	r5, #1
    1004:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    1006:	2700      	movs	r7, #0
    1008:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    100a:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    100c:	0021      	movs	r1, r4
    100e:	2013      	movs	r0, #19
    1010:	4e06      	ldr	r6, [pc, #24]	; (102c <system_board_init+0x30>)
    1012:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1014:	2280      	movs	r2, #128	; 0x80
    1016:	0312      	lsls	r2, r2, #12
    1018:	4b05      	ldr	r3, [pc, #20]	; (1030 <system_board_init+0x34>)
    101a:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    101c:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    101e:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    1020:	0021      	movs	r1, r4
    1022:	201c      	movs	r0, #28
    1024:	47b0      	blx	r6
	config_pinmux.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;	
	system_pinmux_pin_set_config(PIN_RFCTRL1, &config_pinmux);
	system_pinmux_pin_set_config(PIN_RFCTRL2, &config_pinmux);
#endif

}
    1026:	b003      	add	sp, #12
    1028:	bdf0      	pop	{r4, r5, r6, r7, pc}
    102a:	46c0      	nop			; (mov r8, r8)
    102c:	00001035 	.word	0x00001035
    1030:	41004400 	.word	0x41004400

00001034 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1034:	b500      	push	{lr}
    1036:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1038:	ab01      	add	r3, sp, #4
    103a:	2280      	movs	r2, #128	; 0x80
    103c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    103e:	780a      	ldrb	r2, [r1, #0]
    1040:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    1042:	784a      	ldrb	r2, [r1, #1]
    1044:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    1046:	788a      	ldrb	r2, [r1, #2]
    1048:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    104a:	0019      	movs	r1, r3
    104c:	4b01      	ldr	r3, [pc, #4]	; (1054 <port_pin_set_config+0x20>)
    104e:	4798      	blx	r3
}
    1050:	b003      	add	sp, #12
    1052:	bd00      	pop	{pc}
    1054:	000015b9 	.word	0x000015b9

00001058 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1058:	b510      	push	{r4, lr}
	switch (clock_source) {
    105a:	2808      	cmp	r0, #8
    105c:	d803      	bhi.n	1066 <system_clock_source_get_hz+0xe>
    105e:	0080      	lsls	r0, r0, #2
    1060:	4b1b      	ldr	r3, [pc, #108]	; (10d0 <system_clock_source_get_hz+0x78>)
    1062:	581b      	ldr	r3, [r3, r0]
    1064:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    1066:	2000      	movs	r0, #0
    1068:	e030      	b.n	10cc <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    106a:	4b1a      	ldr	r3, [pc, #104]	; (10d4 <system_clock_source_get_hz+0x7c>)
    106c:	6918      	ldr	r0, [r3, #16]
    106e:	e02d      	b.n	10cc <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1070:	4b19      	ldr	r3, [pc, #100]	; (10d8 <system_clock_source_get_hz+0x80>)
    1072:	6a1b      	ldr	r3, [r3, #32]
    1074:	059b      	lsls	r3, r3, #22
    1076:	0f9b      	lsrs	r3, r3, #30
    1078:	4818      	ldr	r0, [pc, #96]	; (10dc <system_clock_source_get_hz+0x84>)
    107a:	40d8      	lsrs	r0, r3
    107c:	e026      	b.n	10cc <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    107e:	4b15      	ldr	r3, [pc, #84]	; (10d4 <system_clock_source_get_hz+0x7c>)
    1080:	6958      	ldr	r0, [r3, #20]
    1082:	e023      	b.n	10cc <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1084:	4b13      	ldr	r3, [pc, #76]	; (10d4 <system_clock_source_get_hz+0x7c>)
    1086:	681b      	ldr	r3, [r3, #0]
			return 0;
    1088:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    108a:	079b      	lsls	r3, r3, #30
    108c:	d51e      	bpl.n	10cc <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    108e:	4912      	ldr	r1, [pc, #72]	; (10d8 <system_clock_source_get_hz+0x80>)
    1090:	2210      	movs	r2, #16
    1092:	68cb      	ldr	r3, [r1, #12]
    1094:	421a      	tst	r2, r3
    1096:	d0fc      	beq.n	1092 <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    1098:	4b0e      	ldr	r3, [pc, #56]	; (10d4 <system_clock_source_get_hz+0x7c>)
    109a:	681b      	ldr	r3, [r3, #0]
    109c:	075b      	lsls	r3, r3, #29
    109e:	d401      	bmi.n	10a4 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    10a0:	480f      	ldr	r0, [pc, #60]	; (10e0 <system_clock_source_get_hz+0x88>)
    10a2:	e013      	b.n	10cc <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    10a4:	2000      	movs	r0, #0
    10a6:	4b0f      	ldr	r3, [pc, #60]	; (10e4 <system_clock_source_get_hz+0x8c>)
    10a8:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    10aa:	4b0a      	ldr	r3, [pc, #40]	; (10d4 <system_clock_source_get_hz+0x7c>)
    10ac:	689b      	ldr	r3, [r3, #8]
    10ae:	041b      	lsls	r3, r3, #16
    10b0:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    10b2:	4358      	muls	r0, r3
    10b4:	e00a      	b.n	10cc <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    10b6:	2350      	movs	r3, #80	; 0x50
    10b8:	4a07      	ldr	r2, [pc, #28]	; (10d8 <system_clock_source_get_hz+0x80>)
    10ba:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    10bc:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    10be:	075b      	lsls	r3, r3, #29
    10c0:	d504      	bpl.n	10cc <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    10c2:	4b04      	ldr	r3, [pc, #16]	; (10d4 <system_clock_source_get_hz+0x7c>)
    10c4:	68d8      	ldr	r0, [r3, #12]
    10c6:	e001      	b.n	10cc <system_clock_source_get_hz+0x74>
		return 32768UL;
    10c8:	2080      	movs	r0, #128	; 0x80
    10ca:	0200      	lsls	r0, r0, #8
	}
}
    10cc:	bd10      	pop	{r4, pc}
    10ce:	46c0      	nop			; (mov r8, r8)
    10d0:	00003960 	.word	0x00003960
    10d4:	200000c4 	.word	0x200000c4
    10d8:	40000800 	.word	0x40000800
    10dc:	007a1200 	.word	0x007a1200
    10e0:	02dc6c00 	.word	0x02dc6c00
    10e4:	000014dd 	.word	0x000014dd

000010e8 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    10e8:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    10ea:	490c      	ldr	r1, [pc, #48]	; (111c <system_clock_source_osc8m_set_config+0x34>)
    10ec:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    10ee:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    10f0:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    10f2:	7840      	ldrb	r0, [r0, #1]
    10f4:	2201      	movs	r2, #1
    10f6:	4010      	ands	r0, r2
    10f8:	0180      	lsls	r0, r0, #6
    10fa:	2640      	movs	r6, #64	; 0x40
    10fc:	43b3      	bics	r3, r6
    10fe:	4303      	orrs	r3, r0
    1100:	402a      	ands	r2, r5
    1102:	01d2      	lsls	r2, r2, #7
    1104:	2080      	movs	r0, #128	; 0x80
    1106:	4383      	bics	r3, r0
    1108:	4313      	orrs	r3, r2
    110a:	2203      	movs	r2, #3
    110c:	4022      	ands	r2, r4
    110e:	0212      	lsls	r2, r2, #8
    1110:	4803      	ldr	r0, [pc, #12]	; (1120 <system_clock_source_osc8m_set_config+0x38>)
    1112:	4003      	ands	r3, r0
    1114:	4313      	orrs	r3, r2
    1116:	620b      	str	r3, [r1, #32]
}
    1118:	bd70      	pop	{r4, r5, r6, pc}
    111a:	46c0      	nop			; (mov r8, r8)
    111c:	40000800 	.word	0x40000800
    1120:	fffffcff 	.word	0xfffffcff

00001124 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1124:	2808      	cmp	r0, #8
    1126:	d803      	bhi.n	1130 <system_clock_source_enable+0xc>
    1128:	0080      	lsls	r0, r0, #2
    112a:	4b25      	ldr	r3, [pc, #148]	; (11c0 <system_clock_source_enable+0x9c>)
    112c:	581b      	ldr	r3, [r3, r0]
    112e:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1130:	2017      	movs	r0, #23
    1132:	e044      	b.n	11be <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1134:	4a23      	ldr	r2, [pc, #140]	; (11c4 <system_clock_source_enable+0xa0>)
    1136:	6a13      	ldr	r3, [r2, #32]
    1138:	2102      	movs	r1, #2
    113a:	430b      	orrs	r3, r1
    113c:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    113e:	2000      	movs	r0, #0
    1140:	e03d      	b.n	11be <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1142:	4a20      	ldr	r2, [pc, #128]	; (11c4 <system_clock_source_enable+0xa0>)
    1144:	6993      	ldr	r3, [r2, #24]
    1146:	2102      	movs	r1, #2
    1148:	430b      	orrs	r3, r1
    114a:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    114c:	2000      	movs	r0, #0
		break;
    114e:	e036      	b.n	11be <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1150:	4a1c      	ldr	r2, [pc, #112]	; (11c4 <system_clock_source_enable+0xa0>)
    1152:	8a13      	ldrh	r3, [r2, #16]
    1154:	2102      	movs	r1, #2
    1156:	430b      	orrs	r3, r1
    1158:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    115a:	2000      	movs	r0, #0
		break;
    115c:	e02f      	b.n	11be <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    115e:	4a19      	ldr	r2, [pc, #100]	; (11c4 <system_clock_source_enable+0xa0>)
    1160:	8a93      	ldrh	r3, [r2, #20]
    1162:	2102      	movs	r1, #2
    1164:	430b      	orrs	r3, r1
    1166:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    1168:	2000      	movs	r0, #0
		break;
    116a:	e028      	b.n	11be <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    116c:	4916      	ldr	r1, [pc, #88]	; (11c8 <system_clock_source_enable+0xa4>)
    116e:	680b      	ldr	r3, [r1, #0]
    1170:	2202      	movs	r2, #2
    1172:	4313      	orrs	r3, r2
    1174:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1176:	4b13      	ldr	r3, [pc, #76]	; (11c4 <system_clock_source_enable+0xa0>)
    1178:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    117a:	0019      	movs	r1, r3
    117c:	320e      	adds	r2, #14
    117e:	68cb      	ldr	r3, [r1, #12]
    1180:	421a      	tst	r2, r3
    1182:	d0fc      	beq.n	117e <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1184:	4a10      	ldr	r2, [pc, #64]	; (11c8 <system_clock_source_enable+0xa4>)
    1186:	6891      	ldr	r1, [r2, #8]
    1188:	4b0e      	ldr	r3, [pc, #56]	; (11c4 <system_clock_source_enable+0xa0>)
    118a:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    118c:	6852      	ldr	r2, [r2, #4]
    118e:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    1190:	2200      	movs	r2, #0
    1192:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1194:	0019      	movs	r1, r3
    1196:	3210      	adds	r2, #16
    1198:	68cb      	ldr	r3, [r1, #12]
    119a:	421a      	tst	r2, r3
    119c:	d0fc      	beq.n	1198 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    119e:	4b0a      	ldr	r3, [pc, #40]	; (11c8 <system_clock_source_enable+0xa4>)
    11a0:	681b      	ldr	r3, [r3, #0]
    11a2:	b29b      	uxth	r3, r3
    11a4:	4a07      	ldr	r2, [pc, #28]	; (11c4 <system_clock_source_enable+0xa0>)
    11a6:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    11a8:	2000      	movs	r0, #0
    11aa:	e008      	b.n	11be <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    11ac:	4905      	ldr	r1, [pc, #20]	; (11c4 <system_clock_source_enable+0xa0>)
    11ae:	2244      	movs	r2, #68	; 0x44
    11b0:	5c8b      	ldrb	r3, [r1, r2]
    11b2:	2002      	movs	r0, #2
    11b4:	4303      	orrs	r3, r0
    11b6:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    11b8:	2000      	movs	r0, #0
		break;
    11ba:	e000      	b.n	11be <system_clock_source_enable+0x9a>
		return STATUS_OK;
    11bc:	2000      	movs	r0, #0
}
    11be:	4770      	bx	lr
    11c0:	00003984 	.word	0x00003984
    11c4:	40000800 	.word	0x40000800
    11c8:	200000c4 	.word	0x200000c4

000011cc <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    11cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    11ce:	46c6      	mov	lr, r8
    11d0:	b500      	push	{lr}
    11d2:	b084      	sub	sp, #16
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    11d4:	22c2      	movs	r2, #194	; 0xc2
    11d6:	00d2      	lsls	r2, r2, #3
    11d8:	4b22      	ldr	r3, [pc, #136]	; (1264 <system_clock_init+0x98>)
    11da:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    11dc:	4a22      	ldr	r2, [pc, #136]	; (1268 <system_clock_init+0x9c>)
    11de:	6853      	ldr	r3, [r2, #4]
    11e0:	211e      	movs	r1, #30
    11e2:	438b      	bics	r3, r1
    11e4:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    11e6:	2301      	movs	r3, #1
    11e8:	466a      	mov	r2, sp
    11ea:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    11ec:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    11ee:	4d1f      	ldr	r5, [pc, #124]	; (126c <system_clock_init+0xa0>)
    11f0:	b2e0      	uxtb	r0, r4
    11f2:	4669      	mov	r1, sp
    11f4:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    11f6:	3401      	adds	r4, #1
    11f8:	2c25      	cmp	r4, #37	; 0x25
    11fa:	d1f9      	bne.n	11f0 <system_clock_init+0x24>
	config->run_in_standby  = false;
    11fc:	a803      	add	r0, sp, #12
    11fe:	2400      	movs	r4, #0
    1200:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    1202:	2501      	movs	r5, #1
    1204:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1206:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1208:	4b19      	ldr	r3, [pc, #100]	; (1270 <system_clock_init+0xa4>)
    120a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    120c:	2006      	movs	r0, #6
    120e:	4b19      	ldr	r3, [pc, #100]	; (1274 <system_clock_init+0xa8>)
    1210:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1212:	4b19      	ldr	r3, [pc, #100]	; (1278 <system_clock_init+0xac>)
    1214:	4798      	blx	r3
	config->division_factor    = 1;
    1216:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    1218:	466b      	mov	r3, sp
    121a:	705c      	strb	r4, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    121c:	2306      	movs	r3, #6
    121e:	4698      	mov	r8, r3
    1220:	466b      	mov	r3, sp
    1222:	4642      	mov	r2, r8
    1224:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    1226:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
    1228:	725c      	strb	r4, [r3, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    122a:	4669      	mov	r1, sp
    122c:	2003      	movs	r0, #3
    122e:	4f13      	ldr	r7, [pc, #76]	; (127c <system_clock_init+0xb0>)
    1230:	47b8      	blx	r7
    1232:	2003      	movs	r0, #3
    1234:	4e12      	ldr	r6, [pc, #72]	; (1280 <system_clock_init+0xb4>)
    1236:	47b0      	blx	r6
	PM->CPUSEL.reg = (uint32_t)divider;
    1238:	4b12      	ldr	r3, [pc, #72]	; (1284 <system_clock_init+0xb8>)
    123a:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    123c:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    123e:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    1240:	72dc      	strb	r4, [r3, #11]
	config->division_factor    = 1;
    1242:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    1244:	466b      	mov	r3, sp
    1246:	705c      	strb	r4, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1248:	4642      	mov	r2, r8
    124a:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    124c:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
    124e:	725c      	strb	r4, [r3, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1250:	4669      	mov	r1, sp
    1252:	2000      	movs	r0, #0
    1254:	47b8      	blx	r7
    1256:	2000      	movs	r0, #0
    1258:	47b0      	blx	r6
#endif
}
    125a:	b004      	add	sp, #16
    125c:	bc04      	pop	{r2}
    125e:	4690      	mov	r8, r2
    1260:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1262:	46c0      	nop			; (mov r8, r8)
    1264:	40000800 	.word	0x40000800
    1268:	41004000 	.word	0x41004000
    126c:	000014c1 	.word	0x000014c1
    1270:	000010e9 	.word	0x000010e9
    1274:	00001125 	.word	0x00001125
    1278:	00001289 	.word	0x00001289
    127c:	000012ad 	.word	0x000012ad
    1280:	00001365 	.word	0x00001365
    1284:	40000400 	.word	0x40000400

00001288 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1288:	4a06      	ldr	r2, [pc, #24]	; (12a4 <system_gclk_init+0x1c>)
    128a:	6993      	ldr	r3, [r2, #24]
    128c:	2108      	movs	r1, #8
    128e:	430b      	orrs	r3, r1
    1290:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1292:	2201      	movs	r2, #1
    1294:	4b04      	ldr	r3, [pc, #16]	; (12a8 <system_gclk_init+0x20>)
    1296:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1298:	0019      	movs	r1, r3
    129a:	780b      	ldrb	r3, [r1, #0]
    129c:	4213      	tst	r3, r2
    129e:	d1fc      	bne.n	129a <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    12a0:	4770      	bx	lr
    12a2:	46c0      	nop			; (mov r8, r8)
    12a4:	40000400 	.word	0x40000400
    12a8:	40000c00 	.word	0x40000c00

000012ac <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    12ac:	b570      	push	{r4, r5, r6, lr}
    12ae:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    12b0:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    12b2:	780d      	ldrb	r5, [r1, #0]
    12b4:	022d      	lsls	r5, r5, #8
    12b6:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    12b8:	784b      	ldrb	r3, [r1, #1]
    12ba:	2b00      	cmp	r3, #0
    12bc:	d002      	beq.n	12c4 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    12be:	2380      	movs	r3, #128	; 0x80
    12c0:	02db      	lsls	r3, r3, #11
    12c2:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    12c4:	7a4b      	ldrb	r3, [r1, #9]
    12c6:	2b00      	cmp	r3, #0
    12c8:	d002      	beq.n	12d0 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    12ca:	2380      	movs	r3, #128	; 0x80
    12cc:	031b      	lsls	r3, r3, #12
    12ce:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    12d0:	6848      	ldr	r0, [r1, #4]
    12d2:	2801      	cmp	r0, #1
    12d4:	d910      	bls.n	12f8 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    12d6:	1e43      	subs	r3, r0, #1
    12d8:	4218      	tst	r0, r3
    12da:	d134      	bne.n	1346 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    12dc:	2802      	cmp	r0, #2
    12de:	d930      	bls.n	1342 <system_gclk_gen_set_config+0x96>
    12e0:	2302      	movs	r3, #2
    12e2:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    12e4:	3201      	adds	r2, #1
						mask <<= 1) {
    12e6:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    12e8:	4298      	cmp	r0, r3
    12ea:	d8fb      	bhi.n	12e4 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    12ec:	0212      	lsls	r2, r2, #8
    12ee:	4332      	orrs	r2, r6
    12f0:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    12f2:	2380      	movs	r3, #128	; 0x80
    12f4:	035b      	lsls	r3, r3, #13
    12f6:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    12f8:	7a0b      	ldrb	r3, [r1, #8]
    12fa:	2b00      	cmp	r3, #0
    12fc:	d002      	beq.n	1304 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    12fe:	2380      	movs	r3, #128	; 0x80
    1300:	039b      	lsls	r3, r3, #14
    1302:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1304:	4a13      	ldr	r2, [pc, #76]	; (1354 <system_gclk_gen_set_config+0xa8>)
    1306:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    1308:	b25b      	sxtb	r3, r3
    130a:	2b00      	cmp	r3, #0
    130c:	dbfb      	blt.n	1306 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    130e:	4b12      	ldr	r3, [pc, #72]	; (1358 <system_gclk_gen_set_config+0xac>)
    1310:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1312:	4b12      	ldr	r3, [pc, #72]	; (135c <system_gclk_gen_set_config+0xb0>)
    1314:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1316:	4a0f      	ldr	r2, [pc, #60]	; (1354 <system_gclk_gen_set_config+0xa8>)
    1318:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    131a:	b25b      	sxtb	r3, r3
    131c:	2b00      	cmp	r3, #0
    131e:	dbfb      	blt.n	1318 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1320:	4b0c      	ldr	r3, [pc, #48]	; (1354 <system_gclk_gen_set_config+0xa8>)
    1322:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1324:	001a      	movs	r2, r3
    1326:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    1328:	b25b      	sxtb	r3, r3
    132a:	2b00      	cmp	r3, #0
    132c:	dbfb      	blt.n	1326 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    132e:	4a09      	ldr	r2, [pc, #36]	; (1354 <system_gclk_gen_set_config+0xa8>)
    1330:	6853      	ldr	r3, [r2, #4]
    1332:	2180      	movs	r1, #128	; 0x80
    1334:	0249      	lsls	r1, r1, #9
    1336:	400b      	ands	r3, r1
    1338:	431d      	orrs	r5, r3
    133a:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    133c:	4b08      	ldr	r3, [pc, #32]	; (1360 <system_gclk_gen_set_config+0xb4>)
    133e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1340:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    1342:	2200      	movs	r2, #0
    1344:	e7d2      	b.n	12ec <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1346:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    1348:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    134a:	2380      	movs	r3, #128	; 0x80
    134c:	029b      	lsls	r3, r3, #10
    134e:	431d      	orrs	r5, r3
    1350:	e7d2      	b.n	12f8 <system_gclk_gen_set_config+0x4c>
    1352:	46c0      	nop			; (mov r8, r8)
    1354:	40000c00 	.word	0x40000c00
    1358:	00000f8d 	.word	0x00000f8d
    135c:	40000c08 	.word	0x40000c08
    1360:	00000fcd 	.word	0x00000fcd

00001364 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1364:	b510      	push	{r4, lr}
    1366:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1368:	4a0b      	ldr	r2, [pc, #44]	; (1398 <system_gclk_gen_enable+0x34>)
    136a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    136c:	b25b      	sxtb	r3, r3
    136e:	2b00      	cmp	r3, #0
    1370:	dbfb      	blt.n	136a <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    1372:	4b0a      	ldr	r3, [pc, #40]	; (139c <system_gclk_gen_enable+0x38>)
    1374:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1376:	4b0a      	ldr	r3, [pc, #40]	; (13a0 <system_gclk_gen_enable+0x3c>)
    1378:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    137a:	4a07      	ldr	r2, [pc, #28]	; (1398 <system_gclk_gen_enable+0x34>)
    137c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    137e:	b25b      	sxtb	r3, r3
    1380:	2b00      	cmp	r3, #0
    1382:	dbfb      	blt.n	137c <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1384:	4a04      	ldr	r2, [pc, #16]	; (1398 <system_gclk_gen_enable+0x34>)
    1386:	6851      	ldr	r1, [r2, #4]
    1388:	2380      	movs	r3, #128	; 0x80
    138a:	025b      	lsls	r3, r3, #9
    138c:	430b      	orrs	r3, r1
    138e:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1390:	4b04      	ldr	r3, [pc, #16]	; (13a4 <system_gclk_gen_enable+0x40>)
    1392:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1394:	bd10      	pop	{r4, pc}
    1396:	46c0      	nop			; (mov r8, r8)
    1398:	40000c00 	.word	0x40000c00
    139c:	00000f8d 	.word	0x00000f8d
    13a0:	40000c04 	.word	0x40000c04
    13a4:	00000fcd 	.word	0x00000fcd

000013a8 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    13a8:	b570      	push	{r4, r5, r6, lr}
    13aa:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    13ac:	4a1a      	ldr	r2, [pc, #104]	; (1418 <system_gclk_gen_get_hz+0x70>)
    13ae:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    13b0:	b25b      	sxtb	r3, r3
    13b2:	2b00      	cmp	r3, #0
    13b4:	dbfb      	blt.n	13ae <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    13b6:	4b19      	ldr	r3, [pc, #100]	; (141c <system_gclk_gen_get_hz+0x74>)
    13b8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    13ba:	4b19      	ldr	r3, [pc, #100]	; (1420 <system_gclk_gen_get_hz+0x78>)
    13bc:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    13be:	4a16      	ldr	r2, [pc, #88]	; (1418 <system_gclk_gen_get_hz+0x70>)
    13c0:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    13c2:	b25b      	sxtb	r3, r3
    13c4:	2b00      	cmp	r3, #0
    13c6:	dbfb      	blt.n	13c0 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    13c8:	4e13      	ldr	r6, [pc, #76]	; (1418 <system_gclk_gen_get_hz+0x70>)
    13ca:	6870      	ldr	r0, [r6, #4]
    13cc:	04c0      	lsls	r0, r0, #19
    13ce:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    13d0:	4b14      	ldr	r3, [pc, #80]	; (1424 <system_gclk_gen_get_hz+0x7c>)
    13d2:	4798      	blx	r3
    13d4:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    13d6:	4b12      	ldr	r3, [pc, #72]	; (1420 <system_gclk_gen_get_hz+0x78>)
    13d8:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    13da:	6876      	ldr	r6, [r6, #4]
    13dc:	02f6      	lsls	r6, r6, #11
    13de:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    13e0:	4b11      	ldr	r3, [pc, #68]	; (1428 <system_gclk_gen_get_hz+0x80>)
    13e2:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    13e4:	4a0c      	ldr	r2, [pc, #48]	; (1418 <system_gclk_gen_get_hz+0x70>)
    13e6:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    13e8:	b25b      	sxtb	r3, r3
    13ea:	2b00      	cmp	r3, #0
    13ec:	dbfb      	blt.n	13e6 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    13ee:	4b0a      	ldr	r3, [pc, #40]	; (1418 <system_gclk_gen_get_hz+0x70>)
    13f0:	689c      	ldr	r4, [r3, #8]
    13f2:	0224      	lsls	r4, r4, #8
    13f4:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    13f6:	4b0d      	ldr	r3, [pc, #52]	; (142c <system_gclk_gen_get_hz+0x84>)
    13f8:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    13fa:	2e00      	cmp	r6, #0
    13fc:	d107      	bne.n	140e <system_gclk_gen_get_hz+0x66>
    13fe:	2c01      	cmp	r4, #1
    1400:	d907      	bls.n	1412 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    1402:	0021      	movs	r1, r4
    1404:	0028      	movs	r0, r5
    1406:	4b0a      	ldr	r3, [pc, #40]	; (1430 <system_gclk_gen_get_hz+0x88>)
    1408:	4798      	blx	r3
    140a:	0005      	movs	r5, r0
    140c:	e001      	b.n	1412 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    140e:	3401      	adds	r4, #1
    1410:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    1412:	0028      	movs	r0, r5
    1414:	bd70      	pop	{r4, r5, r6, pc}
    1416:	46c0      	nop			; (mov r8, r8)
    1418:	40000c00 	.word	0x40000c00
    141c:	00000f8d 	.word	0x00000f8d
    1420:	40000c04 	.word	0x40000c04
    1424:	00001059 	.word	0x00001059
    1428:	40000c08 	.word	0x40000c08
    142c:	00000fcd 	.word	0x00000fcd
    1430:	00001d7d 	.word	0x00001d7d

00001434 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1434:	b510      	push	{r4, lr}
    1436:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1438:	4b06      	ldr	r3, [pc, #24]	; (1454 <system_gclk_chan_enable+0x20>)
    143a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    143c:	4b06      	ldr	r3, [pc, #24]	; (1458 <system_gclk_chan_enable+0x24>)
    143e:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1440:	4a06      	ldr	r2, [pc, #24]	; (145c <system_gclk_chan_enable+0x28>)
    1442:	8853      	ldrh	r3, [r2, #2]
    1444:	2180      	movs	r1, #128	; 0x80
    1446:	01c9      	lsls	r1, r1, #7
    1448:	430b      	orrs	r3, r1
    144a:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    144c:	4b04      	ldr	r3, [pc, #16]	; (1460 <system_gclk_chan_enable+0x2c>)
    144e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1450:	bd10      	pop	{r4, pc}
    1452:	46c0      	nop			; (mov r8, r8)
    1454:	00000f8d 	.word	0x00000f8d
    1458:	40000c02 	.word	0x40000c02
    145c:	40000c00 	.word	0x40000c00
    1460:	00000fcd 	.word	0x00000fcd

00001464 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1464:	b510      	push	{r4, lr}
    1466:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1468:	4b0f      	ldr	r3, [pc, #60]	; (14a8 <system_gclk_chan_disable+0x44>)
    146a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    146c:	4b0f      	ldr	r3, [pc, #60]	; (14ac <system_gclk_chan_disable+0x48>)
    146e:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1470:	4a0f      	ldr	r2, [pc, #60]	; (14b0 <system_gclk_chan_disable+0x4c>)
    1472:	8853      	ldrh	r3, [r2, #2]
    1474:	051b      	lsls	r3, r3, #20
    1476:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1478:	8853      	ldrh	r3, [r2, #2]
    147a:	490e      	ldr	r1, [pc, #56]	; (14b4 <system_gclk_chan_disable+0x50>)
    147c:	400b      	ands	r3, r1
    147e:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1480:	8853      	ldrh	r3, [r2, #2]
    1482:	490d      	ldr	r1, [pc, #52]	; (14b8 <system_gclk_chan_disable+0x54>)
    1484:	400b      	ands	r3, r1
    1486:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1488:	0011      	movs	r1, r2
    148a:	2280      	movs	r2, #128	; 0x80
    148c:	01d2      	lsls	r2, r2, #7
    148e:	884b      	ldrh	r3, [r1, #2]
    1490:	4213      	tst	r3, r2
    1492:	d1fc      	bne.n	148e <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1494:	4906      	ldr	r1, [pc, #24]	; (14b0 <system_gclk_chan_disable+0x4c>)
    1496:	884a      	ldrh	r2, [r1, #2]
    1498:	0203      	lsls	r3, r0, #8
    149a:	4806      	ldr	r0, [pc, #24]	; (14b4 <system_gclk_chan_disable+0x50>)
    149c:	4002      	ands	r2, r0
    149e:	4313      	orrs	r3, r2
    14a0:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    14a2:	4b06      	ldr	r3, [pc, #24]	; (14bc <system_gclk_chan_disable+0x58>)
    14a4:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    14a6:	bd10      	pop	{r4, pc}
    14a8:	00000f8d 	.word	0x00000f8d
    14ac:	40000c02 	.word	0x40000c02
    14b0:	40000c00 	.word	0x40000c00
    14b4:	fffff0ff 	.word	0xfffff0ff
    14b8:	ffffbfff 	.word	0xffffbfff
    14bc:	00000fcd 	.word	0x00000fcd

000014c0 <system_gclk_chan_set_config>:
{
    14c0:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    14c2:	780c      	ldrb	r4, [r1, #0]
    14c4:	0224      	lsls	r4, r4, #8
    14c6:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    14c8:	4b02      	ldr	r3, [pc, #8]	; (14d4 <system_gclk_chan_set_config+0x14>)
    14ca:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    14cc:	b2a4      	uxth	r4, r4
    14ce:	4b02      	ldr	r3, [pc, #8]	; (14d8 <system_gclk_chan_set_config+0x18>)
    14d0:	805c      	strh	r4, [r3, #2]
}
    14d2:	bd10      	pop	{r4, pc}
    14d4:	00001465 	.word	0x00001465
    14d8:	40000c00 	.word	0x40000c00

000014dc <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    14dc:	b510      	push	{r4, lr}
    14de:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    14e0:	4b06      	ldr	r3, [pc, #24]	; (14fc <system_gclk_chan_get_hz+0x20>)
    14e2:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    14e4:	4b06      	ldr	r3, [pc, #24]	; (1500 <system_gclk_chan_get_hz+0x24>)
    14e6:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    14e8:	4b06      	ldr	r3, [pc, #24]	; (1504 <system_gclk_chan_get_hz+0x28>)
    14ea:	885c      	ldrh	r4, [r3, #2]
    14ec:	0524      	lsls	r4, r4, #20
    14ee:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    14f0:	4b05      	ldr	r3, [pc, #20]	; (1508 <system_gclk_chan_get_hz+0x2c>)
    14f2:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    14f4:	0020      	movs	r0, r4
    14f6:	4b05      	ldr	r3, [pc, #20]	; (150c <system_gclk_chan_get_hz+0x30>)
    14f8:	4798      	blx	r3
}
    14fa:	bd10      	pop	{r4, pc}
    14fc:	00000f8d 	.word	0x00000f8d
    1500:	40000c02 	.word	0x40000c02
    1504:	40000c00 	.word	0x40000c00
    1508:	00000fcd 	.word	0x00000fcd
    150c:	000013a9 	.word	0x000013a9

00001510 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1510:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1512:	78d3      	ldrb	r3, [r2, #3]
    1514:	2b00      	cmp	r3, #0
    1516:	d135      	bne.n	1584 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1518:	7813      	ldrb	r3, [r2, #0]
    151a:	2b80      	cmp	r3, #128	; 0x80
    151c:	d029      	beq.n	1572 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    151e:	061b      	lsls	r3, r3, #24
    1520:	2480      	movs	r4, #128	; 0x80
    1522:	0264      	lsls	r4, r4, #9
    1524:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1526:	7854      	ldrb	r4, [r2, #1]
    1528:	2502      	movs	r5, #2
    152a:	43ac      	bics	r4, r5
    152c:	d106      	bne.n	153c <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    152e:	7894      	ldrb	r4, [r2, #2]
    1530:	2c00      	cmp	r4, #0
    1532:	d120      	bne.n	1576 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1534:	2480      	movs	r4, #128	; 0x80
    1536:	02a4      	lsls	r4, r4, #10
    1538:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    153a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    153c:	7854      	ldrb	r4, [r2, #1]
    153e:	3c01      	subs	r4, #1
    1540:	2c01      	cmp	r4, #1
    1542:	d91c      	bls.n	157e <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1544:	040d      	lsls	r5, r1, #16
    1546:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1548:	24a0      	movs	r4, #160	; 0xa0
    154a:	05e4      	lsls	r4, r4, #23
    154c:	432c      	orrs	r4, r5
    154e:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1550:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1552:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1554:	24d0      	movs	r4, #208	; 0xd0
    1556:	0624      	lsls	r4, r4, #24
    1558:	432c      	orrs	r4, r5
    155a:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    155c:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    155e:	78d4      	ldrb	r4, [r2, #3]
    1560:	2c00      	cmp	r4, #0
    1562:	d122      	bne.n	15aa <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1564:	035b      	lsls	r3, r3, #13
    1566:	d51c      	bpl.n	15a2 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1568:	7893      	ldrb	r3, [r2, #2]
    156a:	2b01      	cmp	r3, #1
    156c:	d01e      	beq.n	15ac <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    156e:	6141      	str	r1, [r0, #20]
    1570:	e017      	b.n	15a2 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    1572:	2300      	movs	r3, #0
    1574:	e7d7      	b.n	1526 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1576:	24c0      	movs	r4, #192	; 0xc0
    1578:	02e4      	lsls	r4, r4, #11
    157a:	4323      	orrs	r3, r4
    157c:	e7dd      	b.n	153a <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    157e:	4c0d      	ldr	r4, [pc, #52]	; (15b4 <_system_pinmux_config+0xa4>)
    1580:	4023      	ands	r3, r4
    1582:	e7df      	b.n	1544 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1584:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1586:	040c      	lsls	r4, r1, #16
    1588:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    158a:	23a0      	movs	r3, #160	; 0xa0
    158c:	05db      	lsls	r3, r3, #23
    158e:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1590:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1592:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1594:	23d0      	movs	r3, #208	; 0xd0
    1596:	061b      	lsls	r3, r3, #24
    1598:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    159a:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    159c:	78d3      	ldrb	r3, [r2, #3]
    159e:	2b00      	cmp	r3, #0
    15a0:	d103      	bne.n	15aa <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    15a2:	7853      	ldrb	r3, [r2, #1]
    15a4:	3b01      	subs	r3, #1
    15a6:	2b01      	cmp	r3, #1
    15a8:	d902      	bls.n	15b0 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    15aa:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    15ac:	6181      	str	r1, [r0, #24]
    15ae:	e7f8      	b.n	15a2 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    15b0:	6081      	str	r1, [r0, #8]
}
    15b2:	e7fa      	b.n	15aa <_system_pinmux_config+0x9a>
    15b4:	fffbffff 	.word	0xfffbffff

000015b8 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    15b8:	b510      	push	{r4, lr}
    15ba:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    15bc:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    15be:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    15c0:	2900      	cmp	r1, #0
    15c2:	d104      	bne.n	15ce <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    15c4:	0943      	lsrs	r3, r0, #5
    15c6:	01db      	lsls	r3, r3, #7
    15c8:	4905      	ldr	r1, [pc, #20]	; (15e0 <system_pinmux_pin_set_config+0x28>)
    15ca:	468c      	mov	ip, r1
    15cc:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    15ce:	241f      	movs	r4, #31
    15d0:	4020      	ands	r0, r4
    15d2:	2101      	movs	r1, #1
    15d4:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    15d6:	0018      	movs	r0, r3
    15d8:	4b02      	ldr	r3, [pc, #8]	; (15e4 <system_pinmux_pin_set_config+0x2c>)
    15da:	4798      	blx	r3
}
    15dc:	bd10      	pop	{r4, pc}
    15de:	46c0      	nop			; (mov r8, r8)
    15e0:	41004400 	.word	0x41004400
    15e4:	00001511 	.word	0x00001511

000015e8 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    15e8:	4770      	bx	lr
	...

000015ec <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    15ec:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    15ee:	4b05      	ldr	r3, [pc, #20]	; (1604 <system_init+0x18>)
    15f0:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    15f2:	4b05      	ldr	r3, [pc, #20]	; (1608 <system_init+0x1c>)
    15f4:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    15f6:	4b05      	ldr	r3, [pc, #20]	; (160c <system_init+0x20>)
    15f8:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    15fa:	4b05      	ldr	r3, [pc, #20]	; (1610 <system_init+0x24>)
    15fc:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    15fe:	4b05      	ldr	r3, [pc, #20]	; (1614 <system_init+0x28>)
    1600:	4798      	blx	r3
}
    1602:	bd10      	pop	{r4, pc}
    1604:	000011cd 	.word	0x000011cd
    1608:	00000ffd 	.word	0x00000ffd
    160c:	000001bd 	.word	0x000001bd
    1610:	0000024d 	.word	0x0000024d
    1614:	000015e9 	.word	0x000015e9

00001618 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1618:	e7fe      	b.n	1618 <Dummy_Handler>
	...

0000161c <Reset_Handler>:
{
    161c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    161e:	4a2a      	ldr	r2, [pc, #168]	; (16c8 <Reset_Handler+0xac>)
    1620:	4b2a      	ldr	r3, [pc, #168]	; (16cc <Reset_Handler+0xb0>)
    1622:	429a      	cmp	r2, r3
    1624:	d011      	beq.n	164a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    1626:	001a      	movs	r2, r3
    1628:	4b29      	ldr	r3, [pc, #164]	; (16d0 <Reset_Handler+0xb4>)
    162a:	429a      	cmp	r2, r3
    162c:	d20d      	bcs.n	164a <Reset_Handler+0x2e>
    162e:	4a29      	ldr	r2, [pc, #164]	; (16d4 <Reset_Handler+0xb8>)
    1630:	3303      	adds	r3, #3
    1632:	1a9b      	subs	r3, r3, r2
    1634:	089b      	lsrs	r3, r3, #2
    1636:	3301      	adds	r3, #1
    1638:	009b      	lsls	r3, r3, #2
    163a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    163c:	4823      	ldr	r0, [pc, #140]	; (16cc <Reset_Handler+0xb0>)
    163e:	4922      	ldr	r1, [pc, #136]	; (16c8 <Reset_Handler+0xac>)
    1640:	588c      	ldr	r4, [r1, r2]
    1642:	5084      	str	r4, [r0, r2]
    1644:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    1646:	429a      	cmp	r2, r3
    1648:	d1fa      	bne.n	1640 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    164a:	4a23      	ldr	r2, [pc, #140]	; (16d8 <Reset_Handler+0xbc>)
    164c:	4b23      	ldr	r3, [pc, #140]	; (16dc <Reset_Handler+0xc0>)
    164e:	429a      	cmp	r2, r3
    1650:	d20a      	bcs.n	1668 <Reset_Handler+0x4c>
    1652:	43d3      	mvns	r3, r2
    1654:	4921      	ldr	r1, [pc, #132]	; (16dc <Reset_Handler+0xc0>)
    1656:	185b      	adds	r3, r3, r1
    1658:	2103      	movs	r1, #3
    165a:	438b      	bics	r3, r1
    165c:	3304      	adds	r3, #4
    165e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    1660:	2100      	movs	r1, #0
    1662:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    1664:	4293      	cmp	r3, r2
    1666:	d1fc      	bne.n	1662 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1668:	4a1d      	ldr	r2, [pc, #116]	; (16e0 <Reset_Handler+0xc4>)
    166a:	21ff      	movs	r1, #255	; 0xff
    166c:	4b1d      	ldr	r3, [pc, #116]	; (16e4 <Reset_Handler+0xc8>)
    166e:	438b      	bics	r3, r1
    1670:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1672:	39fd      	subs	r1, #253	; 0xfd
    1674:	2390      	movs	r3, #144	; 0x90
    1676:	005b      	lsls	r3, r3, #1
    1678:	4a1b      	ldr	r2, [pc, #108]	; (16e8 <Reset_Handler+0xcc>)
    167a:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    167c:	4a1b      	ldr	r2, [pc, #108]	; (16ec <Reset_Handler+0xd0>)
    167e:	78d3      	ldrb	r3, [r2, #3]
    1680:	2503      	movs	r5, #3
    1682:	43ab      	bics	r3, r5
    1684:	2402      	movs	r4, #2
    1686:	4323      	orrs	r3, r4
    1688:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    168a:	78d3      	ldrb	r3, [r2, #3]
    168c:	270c      	movs	r7, #12
    168e:	43bb      	bics	r3, r7
    1690:	2608      	movs	r6, #8
    1692:	4333      	orrs	r3, r6
    1694:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    1696:	4b16      	ldr	r3, [pc, #88]	; (16f0 <Reset_Handler+0xd4>)
    1698:	7b98      	ldrb	r0, [r3, #14]
    169a:	2230      	movs	r2, #48	; 0x30
    169c:	4390      	bics	r0, r2
    169e:	2220      	movs	r2, #32
    16a0:	4310      	orrs	r0, r2
    16a2:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    16a4:	7b99      	ldrb	r1, [r3, #14]
    16a6:	43b9      	bics	r1, r7
    16a8:	4331      	orrs	r1, r6
    16aa:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    16ac:	7b9a      	ldrb	r2, [r3, #14]
    16ae:	43aa      	bics	r2, r5
    16b0:	4322      	orrs	r2, r4
    16b2:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    16b4:	4a0f      	ldr	r2, [pc, #60]	; (16f4 <Reset_Handler+0xd8>)
    16b6:	6853      	ldr	r3, [r2, #4]
    16b8:	2180      	movs	r1, #128	; 0x80
    16ba:	430b      	orrs	r3, r1
    16bc:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    16be:	4b0e      	ldr	r3, [pc, #56]	; (16f8 <Reset_Handler+0xdc>)
    16c0:	4798      	blx	r3
        main();
    16c2:	4b0e      	ldr	r3, [pc, #56]	; (16fc <Reset_Handler+0xe0>)
    16c4:	4798      	blx	r3
    16c6:	e7fe      	b.n	16c6 <Reset_Handler+0xaa>
    16c8:	00003b60 	.word	0x00003b60
    16cc:	20000000 	.word	0x20000000
    16d0:	20000084 	.word	0x20000084
    16d4:	20000004 	.word	0x20000004
    16d8:	20000084 	.word	0x20000084
    16dc:	200001c4 	.word	0x200001c4
    16e0:	e000ed00 	.word	0xe000ed00
    16e4:	00000000 	.word	0x00000000
    16e8:	41007000 	.word	0x41007000
    16ec:	41005000 	.word	0x41005000
    16f0:	41004800 	.word	0x41004800
    16f4:	41004000 	.word	0x41004000
    16f8:	0000290d 	.word	0x0000290d
    16fc:	00001c11 	.word	0x00001c11

00001700 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    1700:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    1702:	4a06      	ldr	r2, [pc, #24]	; (171c <_sbrk+0x1c>)
    1704:	6812      	ldr	r2, [r2, #0]
    1706:	2a00      	cmp	r2, #0
    1708:	d004      	beq.n	1714 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    170a:	4a04      	ldr	r2, [pc, #16]	; (171c <_sbrk+0x1c>)
    170c:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    170e:	18c3      	adds	r3, r0, r3
    1710:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    1712:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    1714:	4902      	ldr	r1, [pc, #8]	; (1720 <_sbrk+0x20>)
    1716:	4a01      	ldr	r2, [pc, #4]	; (171c <_sbrk+0x1c>)
    1718:	6011      	str	r1, [r2, #0]
    171a:	e7f6      	b.n	170a <_sbrk+0xa>
    171c:	200000dc 	.word	0x200000dc
    1720:	200021c8 	.word	0x200021c8

00001724 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    1724:	2001      	movs	r0, #1
    1726:	4240      	negs	r0, r0
    1728:	4770      	bx	lr

0000172a <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    172a:	2380      	movs	r3, #128	; 0x80
    172c:	019b      	lsls	r3, r3, #6
    172e:	604b      	str	r3, [r1, #4]

	return 0;
}
    1730:	2000      	movs	r0, #0
    1732:	4770      	bx	lr

00001734 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    1734:	2001      	movs	r0, #1
    1736:	4770      	bx	lr

00001738 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    1738:	2000      	movs	r0, #0
    173a:	4770      	bx	lr

0000173c <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    173c:	b570      	push	{r4, r5, r6, lr}
    173e:	b082      	sub	sp, #8
    1740:	0005      	movs	r5, r0
    1742:	000e      	movs	r6, r1
	uint16_t temp = 0;
    1744:	2200      	movs	r2, #0
    1746:	466b      	mov	r3, sp
    1748:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    174a:	4c06      	ldr	r4, [pc, #24]	; (1764 <usart_serial_getchar+0x28>)
    174c:	466b      	mov	r3, sp
    174e:	1d99      	adds	r1, r3, #6
    1750:	0028      	movs	r0, r5
    1752:	47a0      	blx	r4
    1754:	2800      	cmp	r0, #0
    1756:	d1f9      	bne.n	174c <usart_serial_getchar+0x10>

	*c = temp;
    1758:	466b      	mov	r3, sp
    175a:	3306      	adds	r3, #6
    175c:	881b      	ldrh	r3, [r3, #0]
    175e:	7033      	strb	r3, [r6, #0]
}
    1760:	b002      	add	sp, #8
    1762:	bd70      	pop	{r4, r5, r6, pc}
    1764:	00000cb9 	.word	0x00000cb9

00001768 <usart_serial_putchar>:
{
    1768:	b570      	push	{r4, r5, r6, lr}
    176a:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    176c:	b28c      	uxth	r4, r1
    176e:	4e03      	ldr	r6, [pc, #12]	; (177c <usart_serial_putchar+0x14>)
    1770:	0021      	movs	r1, r4
    1772:	0028      	movs	r0, r5
    1774:	47b0      	blx	r6
    1776:	2800      	cmp	r0, #0
    1778:	d1fa      	bne.n	1770 <usart_serial_putchar+0x8>
}
    177a:	bd70      	pop	{r4, r5, r6, pc}
    177c:	00000c8d 	.word	0x00000c8d

00001780 <get_label>:
	
	}
}

// color -----------------------------------------------------------------
precedence get_label(element i_color, element biggest, element smallest) {
    1780:	b5f0      	push	{r4, r5, r6, r7, lr}
    1782:	b085      	sub	sp, #20
    1784:	1c03      	adds	r3, r0, #0
    1786:	9003      	str	r0, [sp, #12]
    1788:	4668      	mov	r0, sp
    178a:	70c1      	strb	r1, [r0, #3]
    178c:	0a0e      	lsrs	r6, r1, #8
	
	float value = 0.0;
	
	NORM(value, i_color, biggest, smallest);
    178e:	b2d7      	uxtb	r7, r2
    1790:	b2d8      	uxtb	r0, r3
    1792:	1bc0      	subs	r0, r0, r7
    1794:	4c25      	ldr	r4, [pc, #148]	; (182c <get_label+0xac>)
    1796:	47a0      	blx	r4
    1798:	1c05      	adds	r5, r0, #0
    179a:	466b      	mov	r3, sp
    179c:	78d8      	ldrb	r0, [r3, #3]
    179e:	1bc0      	subs	r0, r0, r7
    17a0:	47a0      	blx	r4
    17a2:	1c01      	adds	r1, r0, #0
    17a4:	1c28      	adds	r0, r5, #0
    17a6:	4b22      	ldr	r3, [pc, #136]	; (1830 <get_label+0xb0>)
    17a8:	4798      	blx	r3
    17aa:	1c04      	adds	r4, r0, #0
	
	switch(biggest.color) {
    17ac:	b2f6      	uxtb	r6, r6
    17ae:	2e02      	cmp	r6, #2
    17b0:	d026      	beq.n	1800 <get_label+0x80>
    17b2:	2e03      	cmp	r6, #3
    17b4:	d02f      	beq.n	1816 <get_label+0x96>
    17b6:	2e01      	cmp	r6, #1
    17b8:	d002      	beq.n	17c0 <get_label+0x40>
			if(value > 0.2)
				return MAX;
			else
				return MIN;
	}
}
    17ba:	0018      	movs	r0, r3
    17bc:	b005      	add	sp, #20
    17be:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(i_color.color == GREEN) {
    17c0:	ab03      	add	r3, sp, #12
    17c2:	785b      	ldrb	r3, [r3, #1]
    17c4:	2b02      	cmp	r3, #2
    17c6:	d00a      	beq.n	17de <get_label+0x5e>
				if(value > 0.9)
    17c8:	4b1a      	ldr	r3, [pc, #104]	; (1834 <get_label+0xb4>)
    17ca:	4798      	blx	r3
    17cc:	4a1a      	ldr	r2, [pc, #104]	; (1838 <get_label+0xb8>)
    17ce:	4b1b      	ldr	r3, [pc, #108]	; (183c <get_label+0xbc>)
    17d0:	4c1b      	ldr	r4, [pc, #108]	; (1840 <get_label+0xc0>)
    17d2:	47a0      	blx	r4
					return MAX;
    17d4:	2303      	movs	r3, #3
				if(value > 0.9)
    17d6:	2800      	cmp	r0, #0
    17d8:	d1ef      	bne.n	17ba <get_label+0x3a>
					return MIN;
    17da:	3b02      	subs	r3, #2
    17dc:	e7ed      	b.n	17ba <get_label+0x3a>
				if(value > 0.4)
    17de:	4b15      	ldr	r3, [pc, #84]	; (1834 <get_label+0xb4>)
    17e0:	4798      	blx	r3
    17e2:	4a18      	ldr	r2, [pc, #96]	; (1844 <get_label+0xc4>)
    17e4:	4b18      	ldr	r3, [pc, #96]	; (1848 <get_label+0xc8>)
    17e6:	4d16      	ldr	r5, [pc, #88]	; (1840 <get_label+0xc0>)
    17e8:	47a8      	blx	r5
					return MAX;
    17ea:	2303      	movs	r3, #3
				if(value > 0.4)
    17ec:	2800      	cmp	r0, #0
    17ee:	d1e4      	bne.n	17ba <get_label+0x3a>
				else if (value == 0)
    17f0:	2100      	movs	r1, #0
    17f2:	1c20      	adds	r0, r4, #0
    17f4:	4b15      	ldr	r3, [pc, #84]	; (184c <get_label+0xcc>)
    17f6:	4798      	blx	r3
					return MID;
    17f8:	4243      	negs	r3, r0
    17fa:	4143      	adcs	r3, r0
    17fc:	3301      	adds	r3, #1
    17fe:	e7dc      	b.n	17ba <get_label+0x3a>
			if(value > 0.9)
    1800:	4b0c      	ldr	r3, [pc, #48]	; (1834 <get_label+0xb4>)
    1802:	4798      	blx	r3
    1804:	4a0c      	ldr	r2, [pc, #48]	; (1838 <get_label+0xb8>)
    1806:	4b0d      	ldr	r3, [pc, #52]	; (183c <get_label+0xbc>)
    1808:	4c0d      	ldr	r4, [pc, #52]	; (1840 <get_label+0xc0>)
    180a:	47a0      	blx	r4
				return MAX;
    180c:	2303      	movs	r3, #3
			if(value > 0.9)
    180e:	2800      	cmp	r0, #0
    1810:	d1d3      	bne.n	17ba <get_label+0x3a>
				return MIN;
    1812:	3b02      	subs	r3, #2
    1814:	e7d1      	b.n	17ba <get_label+0x3a>
			if(value > 0.2)
    1816:	4b07      	ldr	r3, [pc, #28]	; (1834 <get_label+0xb4>)
    1818:	4798      	blx	r3
    181a:	4a0a      	ldr	r2, [pc, #40]	; (1844 <get_label+0xc4>)
    181c:	4b0c      	ldr	r3, [pc, #48]	; (1850 <get_label+0xd0>)
    181e:	4c08      	ldr	r4, [pc, #32]	; (1840 <get_label+0xc0>)
    1820:	47a0      	blx	r4
				return MAX;
    1822:	2303      	movs	r3, #3
			if(value > 0.2)
    1824:	2800      	cmp	r0, #0
    1826:	d1c8      	bne.n	17ba <get_label+0x3a>
				return MIN;
    1828:	3b02      	subs	r3, #2
    182a:	e7c6      	b.n	17ba <get_label+0x3a>
    182c:	0000258d 	.word	0x0000258d
    1830:	000021ad 	.word	0x000021ad
    1834:	0000282d 	.word	0x0000282d
    1838:	cccccccd 	.word	0xcccccccd
    183c:	3feccccc 	.word	0x3feccccc
    1840:	000020bd 	.word	0x000020bd
    1844:	9999999a 	.word	0x9999999a
    1848:	3fd99999 	.word	0x3fd99999
    184c:	000020fd 	.word	0x000020fd
    1850:	3fc99999 	.word	0x3fc99999

00001854 <get_max>:
element get_max(element r, element g, element b) {
    1854:	b086      	sub	sp, #24
    1856:	b2c0      	uxtb	r0, r0
    1858:	b2c9      	uxtb	r1, r1
    185a:	b2d2      	uxtb	r2, r2
	
	biggest.rgb_value = r.rgb_value > g.rgb_value ? r.rgb_value : g.rgb_value;
	
	if(r.rgb_value > g.rgb_value) {
		biggest.rgb_value = r.rgb_value;
		biggest.color = RED;
    185c:	2301      	movs	r3, #1
	if(r.rgb_value > g.rgb_value) {
    185e:	4288      	cmp	r0, r1
    1860:	d801      	bhi.n	1866 <get_max+0x12>
		biggest.order = MAX;
	}	
	else {
		biggest.rgb_value = g.rgb_value;
    1862:	0008      	movs	r0, r1
		biggest.color = GREEN;
    1864:	3301      	adds	r3, #1
		biggest.order = MAX;
	}
	
	if(b.rgb_value > biggest.rgb_value) {
    1866:	4290      	cmp	r0, r2
    1868:	d201      	bcs.n	186e <get_max+0x1a>
		biggest.rgb_value = b.rgb_value;
    186a:	0010      	movs	r0, r2
		biggest.color = BLUE;
    186c:	2303      	movs	r3, #3
		biggest.order = MAX;
	}
	
	return biggest;
    186e:	021b      	lsls	r3, r3, #8
    1870:	4318      	orrs	r0, r3
    1872:	23c0      	movs	r3, #192	; 0xc0
    1874:	029b      	lsls	r3, r3, #10
    1876:	4318      	orrs	r0, r3
}
    1878:	b006      	add	sp, #24
    187a:	4770      	bx	lr

0000187c <get_min>:

element get_min(element r, element g, element b) {
    187c:	b086      	sub	sp, #24
    187e:	b2c0      	uxtb	r0, r0
    1880:	b2c9      	uxtb	r1, r1
    1882:	b2d2      	uxtb	r2, r2
	
	smallest.rgb_value = r.rgb_value < g.rgb_value ? r.rgb_value : g.rgb_value;
	
	if(r.rgb_value < g.rgb_value) {
		smallest.rgb_value = r.rgb_value;
		smallest.color = RED;
    1884:	2301      	movs	r3, #1
	if(r.rgb_value < g.rgb_value) {
    1886:	4288      	cmp	r0, r1
    1888:	d301      	bcc.n	188e <get_min+0x12>
		smallest.order = MIN;
	}	
	else {
		smallest.rgb_value = g.rgb_value;
    188a:	0008      	movs	r0, r1
		smallest.color = GREEN;
    188c:	3301      	adds	r3, #1
		smallest.order = MIN;
	}
	
	if(b.rgb_value < smallest.rgb_value) {
    188e:	4290      	cmp	r0, r2
    1890:	d901      	bls.n	1896 <get_min+0x1a>
		smallest.rgb_value = b.rgb_value;
    1892:	0010      	movs	r0, r2
		smallest.color = BLUE;
    1894:	2303      	movs	r3, #3
		smallest.order = MIN;
	}
	
	return smallest;
    1896:	021b      	lsls	r3, r3, #8
    1898:	4318      	orrs	r0, r3
    189a:	2380      	movs	r3, #128	; 0x80
    189c:	025b      	lsls	r3, r3, #9
    189e:	4318      	orrs	r0, r3
}
    18a0:	b006      	add	sp, #24
    18a2:	4770      	bx	lr

000018a4 <transferhz>:

rainbow transferhz(element r, element g, element b, element biggest)
{
    18a4:	b510      	push	{r4, lr}
    18a6:	b084      	sub	sp, #16
    18a8:	0c00      	lsrs	r0, r0, #16
    18aa:	0c09      	lsrs	r1, r1, #16
    18ac:	0c12      	lsrs	r2, r2, #16
    18ae:	0a1b      	lsrs	r3, r3, #8
    18b0:	b2c4      	uxtb	r4, r0
    18b2:	b2c9      	uxtb	r1, r1
    18b4:	b2d2      	uxtb	r2, r2
	rainbow note=none;

	switch(biggest.color) {
    18b6:	b2db      	uxtb	r3, r3
    18b8:	2b02      	cmp	r3, #2
    18ba:	d019      	beq.n	18f0 <transferhz+0x4c>
    18bc:	2b03      	cmp	r3, #3
    18be:	d021      	beq.n	1904 <transferhz+0x60>
	rainbow note=none;
    18c0:	2007      	movs	r0, #7
	switch(biggest.color) {
    18c2:	2b01      	cmp	r3, #1
    18c4:	d001      	beq.n	18ca <transferhz+0x26>
				note = sky;
			else
				note = none;
	}
	return note;
}
    18c6:	b004      	add	sp, #16
    18c8:	bd10      	pop	{r4, pc}
			if(g.order == MIN && b.order == MIN)
    18ca:	2901      	cmp	r1, #1
    18cc:	d008      	beq.n	18e0 <transferhz+0x3c>
			else if(g.order == MID && b.order == MIN)
    18ce:	2902      	cmp	r1, #2
    18d0:	d00a      	beq.n	18e8 <transferhz+0x44>
				note = none;
    18d2:	2007      	movs	r0, #7
			else if(g.order == MAX && b.order == MIN)
    18d4:	2903      	cmp	r1, #3
    18d6:	d1f6      	bne.n	18c6 <transferhz+0x22>
    18d8:	2a01      	cmp	r2, #1
    18da:	d1f4      	bne.n	18c6 <transferhz+0x22>
				note = yellow;
    18dc:	3805      	subs	r0, #5
    18de:	e7f2      	b.n	18c6 <transferhz+0x22>
			if(g.order == MIN && b.order == MIN)
    18e0:	2a01      	cmp	r2, #1
    18e2:	d021      	beq.n	1928 <transferhz+0x84>
				note = none;
    18e4:	2007      	movs	r0, #7
    18e6:	e7ee      	b.n	18c6 <transferhz+0x22>
			else if(g.order == MID && b.order == MIN)
    18e8:	2a01      	cmp	r2, #1
    18ea:	d01f      	beq.n	192c <transferhz+0x88>
				note = none;
    18ec:	2007      	movs	r0, #7
    18ee:	e7ea      	b.n	18c6 <transferhz+0x22>
				note = none;
    18f0:	2007      	movs	r0, #7
			if(r.order == MIN && b.order == MIN)
    18f2:	2c01      	cmp	r4, #1
    18f4:	d1e7      	bne.n	18c6 <transferhz+0x22>
				note = green;
    18f6:	3804      	subs	r0, #4
			if(r.order == MIN && b.order == MIN)
    18f8:	2a01      	cmp	r2, #1
    18fa:	d0e4      	beq.n	18c6 <transferhz+0x22>
			else if(r.order == MIN && b.order == MAX)
    18fc:	2a03      	cmp	r2, #3
    18fe:	d017      	beq.n	1930 <transferhz+0x8c>
				note = none;
    1900:	3004      	adds	r0, #4
    1902:	e7e0      	b.n	18c6 <transferhz+0x22>
			if(r.order == MIN && g.order == MIN)
    1904:	2c01      	cmp	r4, #1
    1906:	d003      	beq.n	1910 <transferhz+0x6c>
			else if (r.order == MAX && g.order == MIN)
    1908:	2c03      	cmp	r4, #3
    190a:	d008      	beq.n	191e <transferhz+0x7a>
				note = none;
    190c:	2007      	movs	r0, #7
	return note;
    190e:	e7da      	b.n	18c6 <transferhz+0x22>
				note = blue;
    1910:	2004      	movs	r0, #4
			if(r.order == MIN && g.order == MIN)
    1912:	2901      	cmp	r1, #1
    1914:	d0d7      	beq.n	18c6 <transferhz+0x22>
			else if (r.order == MIN && g.order == MAX)
    1916:	2903      	cmp	r1, #3
    1918:	d00c      	beq.n	1934 <transferhz+0x90>
				note = none;
    191a:	2007      	movs	r0, #7
    191c:	e7d3      	b.n	18c6 <transferhz+0x22>
    191e:	3901      	subs	r1, #1
    1920:	1e48      	subs	r0, r1, #1
    1922:	4181      	sbcs	r1, r0
    1924:	1d88      	adds	r0, r1, #6
    1926:	e7ce      	b.n	18c6 <transferhz+0x22>
				note = red;
    1928:	2000      	movs	r0, #0
    192a:	e7cc      	b.n	18c6 <transferhz+0x22>
				note = orange;
    192c:	2001      	movs	r0, #1
    192e:	e7ca      	b.n	18c6 <transferhz+0x22>
				note = sky;
    1930:	2005      	movs	r0, #5
    1932:	e7c8      	b.n	18c6 <transferhz+0x22>
				note = sky;
    1934:	2005      	movs	r0, #5
    1936:	e7c6      	b.n	18c6 <transferhz+0x22>

00001938 <get_color_string>:

char* get_color_string(rainbow n) {
	
	switch(n) {
    1938:	2806      	cmp	r0, #6
    193a:	d80f      	bhi.n	195c <get_color_string+0x24>
    193c:	0080      	lsls	r0, r0, #2
    193e:	4b09      	ldr	r3, [pc, #36]	; (1964 <get_color_string+0x2c>)
    1940:	581b      	ldr	r3, [r3, r0]
    1942:	469f      	mov	pc, r3
		case red: return "red";
		case orange: return "orange";
    1944:	4808      	ldr	r0, [pc, #32]	; (1968 <get_color_string+0x30>)
    1946:	e00c      	b.n	1962 <get_color_string+0x2a>
		case yellow: return "yellow";
    1948:	4808      	ldr	r0, [pc, #32]	; (196c <get_color_string+0x34>)
    194a:	e00a      	b.n	1962 <get_color_string+0x2a>
		case green: return "green";
    194c:	4808      	ldr	r0, [pc, #32]	; (1970 <get_color_string+0x38>)
    194e:	e008      	b.n	1962 <get_color_string+0x2a>
		case blue: return "blue";
    1950:	4808      	ldr	r0, [pc, #32]	; (1974 <get_color_string+0x3c>)
    1952:	e006      	b.n	1962 <get_color_string+0x2a>
		case sky: return "sky";
    1954:	4808      	ldr	r0, [pc, #32]	; (1978 <get_color_string+0x40>)
    1956:	e004      	b.n	1962 <get_color_string+0x2a>
		case purple: return "purple";
    1958:	4808      	ldr	r0, [pc, #32]	; (197c <get_color_string+0x44>)
    195a:	e002      	b.n	1962 <get_color_string+0x2a>
		default: return "NONE";
    195c:	4808      	ldr	r0, [pc, #32]	; (1980 <get_color_string+0x48>)
    195e:	e000      	b.n	1962 <get_color_string+0x2a>
		case red: return "red";
    1960:	4808      	ldr	r0, [pc, #32]	; (1984 <get_color_string+0x4c>)
	}
}
    1962:	4770      	bx	lr
    1964:	000039a8 	.word	0x000039a8
    1968:	000039c8 	.word	0x000039c8
    196c:	000039d0 	.word	0x000039d0
    1970:	000039d8 	.word	0x000039d8
    1974:	000039e0 	.word	0x000039e0
    1978:	000039e8 	.word	0x000039e8
    197c:	000039ec 	.word	0x000039ec
    1980:	000039f4 	.word	0x000039f4
    1984:	000039c4 	.word	0x000039c4

00001988 <get_color>:

uint8_t get_color(COLOR color) {
    1988:	b570      	push	{r4, r5, r6, lr}

	uint8_t result = 0x00;
	uint8_t	start  = 0x00;
	uint8_t	end	   = 0x00;

	switch(color) {
    198a:	2802      	cmp	r0, #2
    198c:	d03d      	beq.n	1a0a <get_color+0x82>
    198e:	2803      	cmp	r0, #3
    1990:	d043      	beq.n	1a1a <get_color+0x92>
    1992:	2801      	cmp	r0, #1
    1994:	d031      	beq.n	19fa <get_color+0x72>
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1996:	4b25      	ldr	r3, [pc, #148]	; (1a2c <get_color+0xa4>)
    1998:	681a      	ldr	r2, [r3, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    199a:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    199c:	b25b      	sxtb	r3, r3
    199e:	2b00      	cmp	r3, #0
    19a0:	dbfb      	blt.n	199a <get_color+0x12>
		/* Wait for sync */
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
    19a2:	2300      	movs	r3, #0
    19a4:	7113      	strb	r3, [r2, #4]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    19a6:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    19a8:	b25b      	sxtb	r3, r3
    19aa:	2b00      	cmp	r3, #0
    19ac:	dbfb      	blt.n	19a6 <get_color+0x1e>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_RETRIGGER_Val);
    19ae:	2340      	movs	r3, #64	; 0x40
    19b0:	7153      	strb	r3, [r2, #5]
	return (port_base->IN.reg & pin_mask);
    19b2:	491f      	ldr	r1, [pc, #124]	; (1a30 <get_color+0xa8>)
    19b4:	2280      	movs	r2, #128	; 0x80
    19b6:	0212      	lsls	r2, r2, #8
    19b8:	6a0b      	ldr	r3, [r1, #32]
			break;
	}
	
	tc_start_counter(&tc_instance);
	
	while(port_pin_get_input_level(TERM_OUT));
    19ba:	4213      	tst	r3, r2
    19bc:	d1fc      	bne.n	19b8 <get_color+0x30>
    19be:	491c      	ldr	r1, [pc, #112]	; (1a30 <get_color+0xa8>)
    19c0:	2280      	movs	r2, #128	; 0x80
    19c2:	0212      	lsls	r2, r2, #8
    19c4:	6a0b      	ldr	r3, [r1, #32]
	while(!(port_pin_get_input_level(TERM_OUT)));
    19c6:	4213      	tst	r3, r2
    19c8:	d0fc      	beq.n	19c4 <get_color+0x3c>
	start  = tc_get_count_value(&tc_instance);
    19ca:	4818      	ldr	r0, [pc, #96]	; (1a2c <get_color+0xa4>)
    19cc:	4b19      	ldr	r3, [pc, #100]	; (1a34 <get_color+0xac>)
    19ce:	4798      	blx	r3
    19d0:	b2c4      	uxtb	r4, r0
    19d2:	4917      	ldr	r1, [pc, #92]	; (1a30 <get_color+0xa8>)
    19d4:	2280      	movs	r2, #128	; 0x80
    19d6:	0212      	lsls	r2, r2, #8
    19d8:	6a0b      	ldr	r3, [r1, #32]
	
	while(port_pin_get_input_level(TERM_OUT));
    19da:	4213      	tst	r3, r2
    19dc:	d1fc      	bne.n	19d8 <get_color+0x50>
	end    = tc_get_count_value(&tc_instance);
    19de:	4d13      	ldr	r5, [pc, #76]	; (1a2c <get_color+0xa4>)
    19e0:	0028      	movs	r0, r5
    19e2:	4b14      	ldr	r3, [pc, #80]	; (1a34 <get_color+0xac>)
    19e4:	4798      	blx	r3
	
	result = end - start;
    19e6:	1b00      	subs	r0, r0, r4
    19e8:	b2c0      	uxtb	r0, r0
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    19ea:	682a      	ldr	r2, [r5, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    19ec:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    19ee:	b25b      	sxtb	r3, r3
    19f0:	2b00      	cmp	r3, #0
    19f2:	dbfb      	blt.n	19ec <get_color+0x64>
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_STOP_Val);
    19f4:	2380      	movs	r3, #128	; 0x80
    19f6:	7153      	strb	r3, [r2, #5]
	tc_stop_counter(&tc_instance);
	start = 0;
	end = 0;
	
	return result;
}
    19f8:	bd70      	pop	{r4, r5, r6, pc}
	} else {
		port_base->OUTCLR.reg = pin_mask;
    19fa:	4b0d      	ldr	r3, [pc, #52]	; (1a30 <get_color+0xa8>)
    19fc:	2280      	movs	r2, #128	; 0x80
    19fe:	0192      	lsls	r2, r2, #6
    1a00:	615a      	str	r2, [r3, #20]
    1a02:	2280      	movs	r2, #128	; 0x80
    1a04:	0552      	lsls	r2, r2, #21
    1a06:	615a      	str	r2, [r3, #20]
    1a08:	e7c5      	b.n	1996 <get_color+0xe>
		port_base->OUTSET.reg = pin_mask;
    1a0a:	4b09      	ldr	r3, [pc, #36]	; (1a30 <get_color+0xa8>)
    1a0c:	2280      	movs	r2, #128	; 0x80
    1a0e:	0192      	lsls	r2, r2, #6
    1a10:	619a      	str	r2, [r3, #24]
    1a12:	2280      	movs	r2, #128	; 0x80
    1a14:	0552      	lsls	r2, r2, #21
    1a16:	619a      	str	r2, [r3, #24]
    1a18:	e7bd      	b.n	1996 <get_color+0xe>
		port_base->OUTCLR.reg = pin_mask;
    1a1a:	4b05      	ldr	r3, [pc, #20]	; (1a30 <get_color+0xa8>)
    1a1c:	2280      	movs	r2, #128	; 0x80
    1a1e:	0192      	lsls	r2, r2, #6
    1a20:	615a      	str	r2, [r3, #20]
		port_base->OUTSET.reg = pin_mask;
    1a22:	2280      	movs	r2, #128	; 0x80
    1a24:	0552      	lsls	r2, r2, #21
    1a26:	619a      	str	r2, [r3, #24]
    1a28:	e7b5      	b.n	1996 <get_color+0xe>
    1a2a:	46c0      	nop			; (mov r8, r8)
    1a2c:	200001b8 	.word	0x200001b8
    1a30:	41004400 	.word	0x41004400
    1a34:	00000889 	.word	0x00000889

00001a38 <basic_pin_setting>:

void basic_pin_setting() {
    1a38:	b530      	push	{r4, r5, lr}
    1a3a:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
    1a3c:	ad01      	add	r5, sp, #4
    1a3e:	2200      	movs	r2, #0
    1a40:	702a      	strb	r2, [r5, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    1a42:	2301      	movs	r3, #1
    1a44:	706b      	strb	r3, [r5, #1]
	config->powersave  = false;
    1a46:	70aa      	strb	r2, [r5, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    1a48:	4669      	mov	r1, sp
    1a4a:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
    1a4c:	708a      	strb	r2, [r1, #2]
	port_get_config_defaults(&pin_conf_out);
	
	pin_conf_in.direction	= PORT_PIN_DIR_INPUT;
	pin_conf_in.input_pull	= PORT_PIN_PULL_UP;
	
	pin_conf_out.direction	= PORT_PIN_DIR_OUTPUT;
    1a4e:	700b      	strb	r3, [r1, #0]
	pin_conf_out.input_pull	= PORT_PIN_PULL_UP;
	
	port_pin_set_config(TERM_S0, &pin_conf_out);
    1a50:	200e      	movs	r0, #14
    1a52:	4c11      	ldr	r4, [pc, #68]	; (1a98 <basic_pin_setting+0x60>)
    1a54:	47a0      	blx	r4
	port_pin_set_config(TERM_S1, &pin_conf_out);
    1a56:	4669      	mov	r1, sp
    1a58:	2008      	movs	r0, #8
    1a5a:	47a0      	blx	r4
	port_pin_set_config(TERM_S2, &pin_conf_out);
    1a5c:	4669      	mov	r1, sp
    1a5e:	200d      	movs	r0, #13
    1a60:	47a0      	blx	r4
	port_pin_set_config(TERM_S3, &pin_conf_out);
    1a62:	4669      	mov	r1, sp
    1a64:	201c      	movs	r0, #28
    1a66:	47a0      	blx	r4
	port_pin_set_config(TERM_OUT, &pin_conf_in);
    1a68:	0029      	movs	r1, r5
    1a6a:	200f      	movs	r0, #15
    1a6c:	47a0      	blx	r4
	port_pin_set_config(TERM_LED, &pin_conf_out);
    1a6e:	4669      	mov	r1, sp
    1a70:	2017      	movs	r0, #23
    1a72:	47a0      	blx	r4
		port_base->OUTSET.reg = pin_mask;
    1a74:	4b09      	ldr	r3, [pc, #36]	; (1a9c <basic_pin_setting+0x64>)
    1a76:	2280      	movs	r2, #128	; 0x80
    1a78:	01d2      	lsls	r2, r2, #7
    1a7a:	619a      	str	r2, [r3, #24]
    1a7c:	2280      	movs	r2, #128	; 0x80
    1a7e:	0052      	lsls	r2, r2, #1
    1a80:	619a      	str	r2, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
    1a82:	2280      	movs	r2, #128	; 0x80
    1a84:	0192      	lsls	r2, r2, #6
    1a86:	615a      	str	r2, [r3, #20]
    1a88:	2280      	movs	r2, #128	; 0x80
    1a8a:	0552      	lsls	r2, r2, #21
    1a8c:	615a      	str	r2, [r3, #20]
    1a8e:	2280      	movs	r2, #128	; 0x80
    1a90:	0412      	lsls	r2, r2, #16
    1a92:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(TERM_S0, HIGH);
	port_pin_set_output_level(TERM_S1, HIGH);
	port_pin_set_output_level(TERM_S2, LOW);
	port_pin_set_output_level(TERM_S3, LOW);
	port_pin_set_output_level(TERM_LED, LOW);
}
    1a94:	b003      	add	sp, #12
    1a96:	bd30      	pop	{r4, r5, pc}
    1a98:	00001035 	.word	0x00001035
    1a9c:	41004400 	.word	0x41004400

00001aa0 <configure_usart>:
			port_pin_set_output_level(TERM_S2, HIGH);
			port_pin_set_output_level(TERM_S3, LOW);		
	}
}

void configure_usart(void) {
    1aa0:	b530      	push	{r4, r5, lr}
    1aa2:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    1aa4:	2380      	movs	r3, #128	; 0x80
    1aa6:	05db      	lsls	r3, r3, #23
    1aa8:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    1aaa:	2300      	movs	r3, #0
    1aac:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    1aae:	22ff      	movs	r2, #255	; 0xff
    1ab0:	4669      	mov	r1, sp
    1ab2:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    1ab4:	2200      	movs	r2, #0
    1ab6:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    1ab8:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    1aba:	2101      	movs	r1, #1
    1abc:	2024      	movs	r0, #36	; 0x24
    1abe:	466c      	mov	r4, sp
    1ac0:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    1ac2:	3001      	adds	r0, #1
    1ac4:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    1ac6:	3125      	adds	r1, #37	; 0x25
    1ac8:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    1aca:	3101      	adds	r1, #1
    1acc:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    1ace:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    1ad0:	3105      	adds	r1, #5
    1ad2:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    1ad4:	3101      	adds	r1, #1
    1ad6:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    1ad8:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    1ada:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    1adc:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    1ade:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    1ae0:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    1ae2:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    1ae4:	2313      	movs	r3, #19
    1ae6:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    1ae8:	7762      	strb	r2, [r4, #29]
	
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);
	config_usart.baudrate = 115200; //14400,19200, 115200
    1aea:	23e1      	movs	r3, #225	; 0xe1
    1aec:	025b      	lsls	r3, r3, #9
    1aee:	9308      	str	r3, [sp, #32]
	config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    1af0:	2380      	movs	r3, #128	; 0x80
    1af2:	035b      	lsls	r3, r3, #13
    1af4:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    1af6:	4b1e      	ldr	r3, [pc, #120]	; (1b70 <configure_usart+0xd0>)
    1af8:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    1afa:	4b1e      	ldr	r3, [pc, #120]	; (1b74 <configure_usart+0xd4>)
    1afc:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    1afe:	2301      	movs	r3, #1
    1b00:	425b      	negs	r3, r3
    1b02:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    1b04:	930f      	str	r3, [sp, #60]	; 0x3c
	
	while(usart_init(&usart_instance, EDBG_CDC_MODULE, &config_usart) != STATUS_OK);
    1b06:	4d1c      	ldr	r5, [pc, #112]	; (1b78 <configure_usart+0xd8>)
    1b08:	4c1c      	ldr	r4, [pc, #112]	; (1b7c <configure_usart+0xdc>)
    1b0a:	466a      	mov	r2, sp
    1b0c:	491c      	ldr	r1, [pc, #112]	; (1b80 <configure_usart+0xe0>)
    1b0e:	0028      	movs	r0, r5
    1b10:	47a0      	blx	r4
    1b12:	2800      	cmp	r0, #0
    1b14:	d1f9      	bne.n	1b0a <configure_usart+0x6a>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1b16:	4d18      	ldr	r5, [pc, #96]	; (1b78 <configure_usart+0xd8>)
    1b18:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1b1a:	0020      	movs	r0, r4
    1b1c:	4b19      	ldr	r3, [pc, #100]	; (1b84 <configure_usart+0xe4>)
    1b1e:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1b20:	231f      	movs	r3, #31
    1b22:	4018      	ands	r0, r3
    1b24:	3b1e      	subs	r3, #30
    1b26:	4083      	lsls	r3, r0
    1b28:	4a17      	ldr	r2, [pc, #92]	; (1b88 <configure_usart+0xe8>)
    1b2a:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1b2c:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1b2e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1b30:	2b00      	cmp	r3, #0
    1b32:	d1fc      	bne.n	1b2e <configure_usart+0x8e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1b34:	6823      	ldr	r3, [r4, #0]
    1b36:	2202      	movs	r2, #2
    1b38:	4313      	orrs	r3, r2
    1b3a:	6023      	str	r3, [r4, #0]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    1b3c:	480e      	ldr	r0, [pc, #56]	; (1b78 <configure_usart+0xd8>)
    1b3e:	4b13      	ldr	r3, [pc, #76]	; (1b8c <configure_usart+0xec>)
    1b40:	6018      	str	r0, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    1b42:	4a13      	ldr	r2, [pc, #76]	; (1b90 <configure_usart+0xf0>)
    1b44:	4b13      	ldr	r3, [pc, #76]	; (1b94 <configure_usart+0xf4>)
    1b46:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    1b48:	4a13      	ldr	r2, [pc, #76]	; (1b98 <configure_usart+0xf8>)
    1b4a:	4b14      	ldr	r3, [pc, #80]	; (1b9c <configure_usart+0xfc>)
    1b4c:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    1b4e:	466a      	mov	r2, sp
    1b50:	490b      	ldr	r1, [pc, #44]	; (1b80 <configure_usart+0xe0>)
    1b52:	4b0a      	ldr	r3, [pc, #40]	; (1b7c <configure_usart+0xdc>)
    1b54:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    1b56:	4d12      	ldr	r5, [pc, #72]	; (1ba0 <configure_usart+0x100>)
    1b58:	682b      	ldr	r3, [r5, #0]
    1b5a:	6898      	ldr	r0, [r3, #8]
    1b5c:	2100      	movs	r1, #0
    1b5e:	4c11      	ldr	r4, [pc, #68]	; (1ba4 <configure_usart+0x104>)
    1b60:	47a0      	blx	r4
	setbuf(stdin, NULL);
    1b62:	682b      	ldr	r3, [r5, #0]
    1b64:	6858      	ldr	r0, [r3, #4]
    1b66:	2100      	movs	r1, #0
    1b68:	47a0      	blx	r4
	
	usart_enable(&usart_instance);
	stdio_serial_init(&usart_instance, EDBG_CDC_MODULE, &config_usart );
}
    1b6a:	b011      	add	sp, #68	; 0x44
    1b6c:	bd30      	pop	{r4, r5, pc}
    1b6e:	46c0      	nop			; (mov r8, r8)
    1b70:	00040003 	.word	0x00040003
    1b74:	00050003 	.word	0x00050003
    1b78:	20000150 	.word	0x20000150
    1b7c:	00000949 	.word	0x00000949
    1b80:	42000800 	.word	0x42000800
    1b84:	00000efd 	.word	0x00000efd
    1b88:	e000e100 	.word	0xe000e100
    1b8c:	20000134 	.word	0x20000134
    1b90:	00001769 	.word	0x00001769
    1b94:	20000130 	.word	0x20000130
    1b98:	0000173d 	.word	0x0000173d
    1b9c:	2000012c 	.word	0x2000012c
    1ba0:	20000020 	.word	0x20000020
    1ba4:	00002999 	.word	0x00002999

00001ba8 <configure_tc>:

void configure_tc(void) {
    1ba8:	b510      	push	{r4, lr}
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    1baa:	4a15      	ldr	r2, [pc, #84]	; (1c00 <configure_tc+0x58>)
    1bac:	2300      	movs	r3, #0
    1bae:	2100      	movs	r1, #0
    1bb0:	7093      	strb	r3, [r2, #2]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    1bb2:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    1bb4:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    1bb6:	2000      	movs	r0, #0
    1bb8:	7050      	strb	r0, [r2, #1]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    1bba:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    1bbc:	7311      	strb	r1, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    1bbe:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    1bc0:	7351      	strb	r1, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    1bc2:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    1bc4:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    1bc6:	6193      	str	r3, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    1bc8:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    1bca:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    1bcc:	6253      	str	r3, [r2, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
    1bce:	8513      	strh	r3, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    1bd0:	8553      	strh	r3, [r2, #42]	; 0x2a
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    1bd2:	8593      	strh	r3, [r2, #44]	; 0x2c
	
	tc_get_config_defaults(&config_tc);
	config_tc.counter_size		= TC_COUNTER_SIZE_16BIT;
	config_tc.clock_source		= GCLK_GENERATOR_3;
    1bd4:	3303      	adds	r3, #3
    1bd6:	7013      	strb	r3, [r2, #0]
	config_tc.clock_prescaler	= TC_CLOCK_PRESCALER_DIV8;
    1bd8:	23c0      	movs	r3, #192	; 0xc0
    1bda:	009b      	lsls	r3, r3, #2
    1bdc:	8093      	strh	r3, [r2, #4]
	config_tc.enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = true;
    1bde:	2301      	movs	r3, #1
    1be0:	72d3      	strb	r3, [r2, #11]
	
	tc_init(&tc_instance, TC3, &config_tc);
    1be2:	4c08      	ldr	r4, [pc, #32]	; (1c04 <configure_tc+0x5c>)
    1be4:	4908      	ldr	r1, [pc, #32]	; (1c08 <configure_tc+0x60>)
    1be6:	0020      	movs	r0, r4
    1be8:	4b08      	ldr	r3, [pc, #32]	; (1c0c <configure_tc+0x64>)
    1bea:	4798      	blx	r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1bec:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1bee:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    1bf0:	b25b      	sxtb	r3, r3
    1bf2:	2b00      	cmp	r3, #0
    1bf4:	dbfb      	blt.n	1bee <configure_tc+0x46>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    1bf6:	8813      	ldrh	r3, [r2, #0]
    1bf8:	2102      	movs	r1, #2
    1bfa:	430b      	orrs	r3, r1
    1bfc:	8013      	strh	r3, [r2, #0]
	tc_enable(&tc_instance);

}
    1bfe:	bd10      	pop	{r4, pc}
    1c00:	20000184 	.word	0x20000184
    1c04:	200001b8 	.word	0x200001b8
    1c08:	42002c00 	.word	0x42002c00
    1c0c:	00000665 	.word	0x00000665

00001c10 <main>:
{
    1c10:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c12:	46de      	mov	lr, fp
    1c14:	4657      	mov	r7, sl
    1c16:	464e      	mov	r6, r9
    1c18:	4645      	mov	r5, r8
    1c1a:	b5e0      	push	{r5, r6, r7, lr}
    1c1c:	b091      	sub	sp, #68	; 0x44
	system_init();
    1c1e:	4b47      	ldr	r3, [pc, #284]	; (1d3c <main+0x12c>)
    1c20:	4798      	blx	r3
	delay_init();
    1c22:	4b47      	ldr	r3, [pc, #284]	; (1d40 <main+0x130>)
    1c24:	4798      	blx	r3
	configure_tc();	
    1c26:	4b47      	ldr	r3, [pc, #284]	; (1d44 <main+0x134>)
    1c28:	4798      	blx	r3
	configure_usart();
    1c2a:	4b47      	ldr	r3, [pc, #284]	; (1d48 <main+0x138>)
    1c2c:	4798      	blx	r3
	element r = { 0x00, RED, PRE_NONE };
    1c2e:	2201      	movs	r2, #1
    1c30:	ab0f      	add	r3, sp, #60	; 0x3c
    1c32:	705a      	strb	r2, [r3, #1]
	element g = { 0x00, GREEN, PRE_NONE };
    1c34:	3201      	adds	r2, #1
    1c36:	ab0e      	add	r3, sp, #56	; 0x38
    1c38:	705a      	strb	r2, [r3, #1]
	element b = { 0x00, BLUE, PRE_NONE };
    1c3a:	3201      	adds	r2, #1
    1c3c:	ab0d      	add	r3, sp, #52	; 0x34
    1c3e:	705a      	strb	r2, [r3, #1]
	basic_pin_setting();	
    1c40:	4b42      	ldr	r3, [pc, #264]	; (1d4c <main+0x13c>)
    1c42:	4798      	blx	r3
	element b = { 0x00, BLUE, PRE_NONE };
    1c44:	2300      	movs	r3, #0
    1c46:	4698      	mov	r8, r3
	element g = { 0x00, GREEN, PRE_NONE };
    1c48:	2400      	movs	r4, #0
	element r = { 0x00, RED, PRE_NONE };
    1c4a:	2500      	movs	r5, #0
		r.rgb_value = DURATION / get_color(RED);
    1c4c:	4b40      	ldr	r3, [pc, #256]	; (1d50 <main+0x140>)
    1c4e:	4699      	mov	r9, r3
    1c50:	4b40      	ldr	r3, [pc, #256]	; (1d54 <main+0x144>)
    1c52:	469b      	mov	fp, r3
    1c54:	0026      	movs	r6, r4
    1c56:	2001      	movs	r0, #1
    1c58:	47c8      	blx	r9
    1c5a:	0001      	movs	r1, r0
    1c5c:	483e      	ldr	r0, [pc, #248]	; (1d58 <main+0x148>)
    1c5e:	47d8      	blx	fp
    1c60:	4682      	mov	sl, r0
		delay_ms(100);
    1c62:	2064      	movs	r0, #100	; 0x64
    1c64:	4c3d      	ldr	r4, [pc, #244]	; (1d5c <main+0x14c>)
    1c66:	47a0      	blx	r4
		g.rgb_value = DURATION / get_color(GREEN);
    1c68:	2002      	movs	r0, #2
    1c6a:	47c8      	blx	r9
    1c6c:	0001      	movs	r1, r0
    1c6e:	483a      	ldr	r0, [pc, #232]	; (1d58 <main+0x148>)
    1c70:	47d8      	blx	fp
    1c72:	9007      	str	r0, [sp, #28]
		delay_ms(100);
    1c74:	2064      	movs	r0, #100	; 0x64
    1c76:	47a0      	blx	r4
		b.rgb_value = DURATION / get_color(BLUE);
    1c78:	2003      	movs	r0, #3
    1c7a:	47c8      	blx	r9
    1c7c:	0001      	movs	r1, r0
    1c7e:	4836      	ldr	r0, [pc, #216]	; (1d58 <main+0x148>)
    1c80:	47d8      	blx	fp
    1c82:	9008      	str	r0, [sp, #32]
		delay_ms(100);
    1c84:	2064      	movs	r0, #100	; 0x64
    1c86:	47a0      	blx	r4
		biggest  = get_max(r, g, b);
    1c88:	ac0f      	add	r4, sp, #60	; 0x3c
		r.rgb_value = DURATION / get_color(RED);
    1c8a:	4651      	mov	r1, sl
    1c8c:	7021      	strb	r1, [r4, #0]
		biggest  = get_max(r, g, b);
    1c8e:	70a5      	strb	r5, [r4, #2]
    1c90:	af0e      	add	r7, sp, #56	; 0x38
		g.rgb_value = DURATION / get_color(GREEN);
    1c92:	466b      	mov	r3, sp
    1c94:	7f19      	ldrb	r1, [r3, #28]
    1c96:	7039      	strb	r1, [r7, #0]
		biggest  = get_max(r, g, b);
    1c98:	70be      	strb	r6, [r7, #2]
    1c9a:	ae0d      	add	r6, sp, #52	; 0x34
		b.rgb_value = DURATION / get_color(BLUE);
    1c9c:	2220      	movs	r2, #32
    1c9e:	189b      	adds	r3, r3, r2
    1ca0:	7819      	ldrb	r1, [r3, #0]
    1ca2:	7031      	strb	r1, [r6, #0]
		biggest  = get_max(r, g, b);
    1ca4:	4641      	mov	r1, r8
    1ca6:	70b1      	strb	r1, [r6, #2]
    1ca8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    1caa:	990e      	ldr	r1, [sp, #56]	; 0x38
    1cac:	980f      	ldr	r0, [sp, #60]	; 0x3c
    1cae:	4b2c      	ldr	r3, [pc, #176]	; (1d60 <main+0x150>)
    1cb0:	4798      	blx	r3
    1cb2:	ab0c      	add	r3, sp, #48	; 0x30
    1cb4:	7018      	strb	r0, [r3, #0]
    1cb6:	0a02      	lsrs	r2, r0, #8
    1cb8:	705a      	strb	r2, [r3, #1]
    1cba:	0c00      	lsrs	r0, r0, #16
    1cbc:	7098      	strb	r0, [r3, #2]
		smallest = get_min(r, g, b);
    1cbe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    1cc0:	990e      	ldr	r1, [sp, #56]	; 0x38
    1cc2:	980f      	ldr	r0, [sp, #60]	; 0x3c
    1cc4:	4b27      	ldr	r3, [pc, #156]	; (1d64 <main+0x154>)
    1cc6:	4798      	blx	r3
    1cc8:	ab0b      	add	r3, sp, #44	; 0x2c
    1cca:	7018      	strb	r0, [r3, #0]
    1ccc:	0a02      	lsrs	r2, r0, #8
    1cce:	705a      	strb	r2, [r3, #1]
    1cd0:	0c00      	lsrs	r0, r0, #16
    1cd2:	7098      	strb	r0, [r3, #2]
			r.order = get_label(r, biggest, smallest);
    1cd4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    1cd6:	990c      	ldr	r1, [sp, #48]	; 0x30
    1cd8:	980f      	ldr	r0, [sp, #60]	; 0x3c
    1cda:	4d23      	ldr	r5, [pc, #140]	; (1d68 <main+0x158>)
    1cdc:	46a8      	mov	r8, r5
    1cde:	47a8      	blx	r5
    1ce0:	0005      	movs	r5, r0
			g.order = get_label(g, biggest, smallest);
    1ce2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    1ce4:	990c      	ldr	r1, [sp, #48]	; 0x30
    1ce6:	980e      	ldr	r0, [sp, #56]	; 0x38
    1ce8:	47c0      	blx	r8
    1cea:	9009      	str	r0, [sp, #36]	; 0x24
			b.order = get_label(b, biggest, smallest);
    1cec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    1cee:	990c      	ldr	r1, [sp, #48]	; 0x30
    1cf0:	980d      	ldr	r0, [sp, #52]	; 0x34
    1cf2:	47c0      	blx	r8
    1cf4:	4680      	mov	r8, r0
		n = transferhz(r, g, b, biggest);
    1cf6:	70a5      	strb	r5, [r4, #2]
    1cf8:	466b      	mov	r3, sp
    1cfa:	2224      	movs	r2, #36	; 0x24
    1cfc:	189b      	adds	r3, r3, r2
    1cfe:	7819      	ldrb	r1, [r3, #0]
    1d00:	70b9      	strb	r1, [r7, #2]
    1d02:	70b0      	strb	r0, [r6, #2]
    1d04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1d06:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    1d08:	990e      	ldr	r1, [sp, #56]	; 0x38
    1d0a:	980f      	ldr	r0, [sp, #60]	; 0x3c
    1d0c:	4c17      	ldr	r4, [pc, #92]	; (1d6c <main+0x15c>)
    1d0e:	47a0      	blx	r4
    1d10:	0004      	movs	r4, r0
		printf("%3d, %3d, %3d | %3d, %3d, %3d | %d | %s\n", r.rgb_value, g.rgb_value, b.rgb_value, r.order, g.order, b.order, n, get_color_string(n));
    1d12:	4b17      	ldr	r3, [pc, #92]	; (1d70 <main+0x160>)
    1d14:	4798      	blx	r3
    1d16:	21ff      	movs	r1, #255	; 0xff
    1d18:	9b08      	ldr	r3, [sp, #32]
    1d1a:	400b      	ands	r3, r1
    1d1c:	9a07      	ldr	r2, [sp, #28]
    1d1e:	400a      	ands	r2, r1
    1d20:	4657      	mov	r7, sl
    1d22:	4039      	ands	r1, r7
    1d24:	9004      	str	r0, [sp, #16]
    1d26:	9403      	str	r4, [sp, #12]
    1d28:	4644      	mov	r4, r8
    1d2a:	9402      	str	r4, [sp, #8]
    1d2c:	9e09      	ldr	r6, [sp, #36]	; 0x24
    1d2e:	9601      	str	r6, [sp, #4]
    1d30:	9500      	str	r5, [sp, #0]
    1d32:	4810      	ldr	r0, [pc, #64]	; (1d74 <main+0x164>)
    1d34:	4c10      	ldr	r4, [pc, #64]	; (1d78 <main+0x168>)
    1d36:	47a0      	blx	r4
    1d38:	e78d      	b.n	1c56 <main+0x46>
    1d3a:	46c0      	nop			; (mov r8, r8)
    1d3c:	000015ed 	.word	0x000015ed
    1d40:	00000115 	.word	0x00000115
    1d44:	00001ba9 	.word	0x00001ba9
    1d48:	00001aa1 	.word	0x00001aa1
    1d4c:	00001a39 	.word	0x00001a39
    1d50:	00001989 	.word	0x00001989
    1d54:	00001e91 	.word	0x00001e91
    1d58:	00003a98 	.word	0x00003a98
    1d5c:	00000155 	.word	0x00000155
    1d60:	00001855 	.word	0x00001855
    1d64:	0000187d 	.word	0x0000187d
    1d68:	00001781 	.word	0x00001781
    1d6c:	000018a5 	.word	0x000018a5
    1d70:	00001939 	.word	0x00001939
    1d74:	000039fc 	.word	0x000039fc
    1d78:	00002965 	.word	0x00002965

00001d7c <__udivsi3>:
    1d7c:	2200      	movs	r2, #0
    1d7e:	0843      	lsrs	r3, r0, #1
    1d80:	428b      	cmp	r3, r1
    1d82:	d374      	bcc.n	1e6e <__udivsi3+0xf2>
    1d84:	0903      	lsrs	r3, r0, #4
    1d86:	428b      	cmp	r3, r1
    1d88:	d35f      	bcc.n	1e4a <__udivsi3+0xce>
    1d8a:	0a03      	lsrs	r3, r0, #8
    1d8c:	428b      	cmp	r3, r1
    1d8e:	d344      	bcc.n	1e1a <__udivsi3+0x9e>
    1d90:	0b03      	lsrs	r3, r0, #12
    1d92:	428b      	cmp	r3, r1
    1d94:	d328      	bcc.n	1de8 <__udivsi3+0x6c>
    1d96:	0c03      	lsrs	r3, r0, #16
    1d98:	428b      	cmp	r3, r1
    1d9a:	d30d      	bcc.n	1db8 <__udivsi3+0x3c>
    1d9c:	22ff      	movs	r2, #255	; 0xff
    1d9e:	0209      	lsls	r1, r1, #8
    1da0:	ba12      	rev	r2, r2
    1da2:	0c03      	lsrs	r3, r0, #16
    1da4:	428b      	cmp	r3, r1
    1da6:	d302      	bcc.n	1dae <__udivsi3+0x32>
    1da8:	1212      	asrs	r2, r2, #8
    1daa:	0209      	lsls	r1, r1, #8
    1dac:	d065      	beq.n	1e7a <__udivsi3+0xfe>
    1dae:	0b03      	lsrs	r3, r0, #12
    1db0:	428b      	cmp	r3, r1
    1db2:	d319      	bcc.n	1de8 <__udivsi3+0x6c>
    1db4:	e000      	b.n	1db8 <__udivsi3+0x3c>
    1db6:	0a09      	lsrs	r1, r1, #8
    1db8:	0bc3      	lsrs	r3, r0, #15
    1dba:	428b      	cmp	r3, r1
    1dbc:	d301      	bcc.n	1dc2 <__udivsi3+0x46>
    1dbe:	03cb      	lsls	r3, r1, #15
    1dc0:	1ac0      	subs	r0, r0, r3
    1dc2:	4152      	adcs	r2, r2
    1dc4:	0b83      	lsrs	r3, r0, #14
    1dc6:	428b      	cmp	r3, r1
    1dc8:	d301      	bcc.n	1dce <__udivsi3+0x52>
    1dca:	038b      	lsls	r3, r1, #14
    1dcc:	1ac0      	subs	r0, r0, r3
    1dce:	4152      	adcs	r2, r2
    1dd0:	0b43      	lsrs	r3, r0, #13
    1dd2:	428b      	cmp	r3, r1
    1dd4:	d301      	bcc.n	1dda <__udivsi3+0x5e>
    1dd6:	034b      	lsls	r3, r1, #13
    1dd8:	1ac0      	subs	r0, r0, r3
    1dda:	4152      	adcs	r2, r2
    1ddc:	0b03      	lsrs	r3, r0, #12
    1dde:	428b      	cmp	r3, r1
    1de0:	d301      	bcc.n	1de6 <__udivsi3+0x6a>
    1de2:	030b      	lsls	r3, r1, #12
    1de4:	1ac0      	subs	r0, r0, r3
    1de6:	4152      	adcs	r2, r2
    1de8:	0ac3      	lsrs	r3, r0, #11
    1dea:	428b      	cmp	r3, r1
    1dec:	d301      	bcc.n	1df2 <__udivsi3+0x76>
    1dee:	02cb      	lsls	r3, r1, #11
    1df0:	1ac0      	subs	r0, r0, r3
    1df2:	4152      	adcs	r2, r2
    1df4:	0a83      	lsrs	r3, r0, #10
    1df6:	428b      	cmp	r3, r1
    1df8:	d301      	bcc.n	1dfe <__udivsi3+0x82>
    1dfa:	028b      	lsls	r3, r1, #10
    1dfc:	1ac0      	subs	r0, r0, r3
    1dfe:	4152      	adcs	r2, r2
    1e00:	0a43      	lsrs	r3, r0, #9
    1e02:	428b      	cmp	r3, r1
    1e04:	d301      	bcc.n	1e0a <__udivsi3+0x8e>
    1e06:	024b      	lsls	r3, r1, #9
    1e08:	1ac0      	subs	r0, r0, r3
    1e0a:	4152      	adcs	r2, r2
    1e0c:	0a03      	lsrs	r3, r0, #8
    1e0e:	428b      	cmp	r3, r1
    1e10:	d301      	bcc.n	1e16 <__udivsi3+0x9a>
    1e12:	020b      	lsls	r3, r1, #8
    1e14:	1ac0      	subs	r0, r0, r3
    1e16:	4152      	adcs	r2, r2
    1e18:	d2cd      	bcs.n	1db6 <__udivsi3+0x3a>
    1e1a:	09c3      	lsrs	r3, r0, #7
    1e1c:	428b      	cmp	r3, r1
    1e1e:	d301      	bcc.n	1e24 <__udivsi3+0xa8>
    1e20:	01cb      	lsls	r3, r1, #7
    1e22:	1ac0      	subs	r0, r0, r3
    1e24:	4152      	adcs	r2, r2
    1e26:	0983      	lsrs	r3, r0, #6
    1e28:	428b      	cmp	r3, r1
    1e2a:	d301      	bcc.n	1e30 <__udivsi3+0xb4>
    1e2c:	018b      	lsls	r3, r1, #6
    1e2e:	1ac0      	subs	r0, r0, r3
    1e30:	4152      	adcs	r2, r2
    1e32:	0943      	lsrs	r3, r0, #5
    1e34:	428b      	cmp	r3, r1
    1e36:	d301      	bcc.n	1e3c <__udivsi3+0xc0>
    1e38:	014b      	lsls	r3, r1, #5
    1e3a:	1ac0      	subs	r0, r0, r3
    1e3c:	4152      	adcs	r2, r2
    1e3e:	0903      	lsrs	r3, r0, #4
    1e40:	428b      	cmp	r3, r1
    1e42:	d301      	bcc.n	1e48 <__udivsi3+0xcc>
    1e44:	010b      	lsls	r3, r1, #4
    1e46:	1ac0      	subs	r0, r0, r3
    1e48:	4152      	adcs	r2, r2
    1e4a:	08c3      	lsrs	r3, r0, #3
    1e4c:	428b      	cmp	r3, r1
    1e4e:	d301      	bcc.n	1e54 <__udivsi3+0xd8>
    1e50:	00cb      	lsls	r3, r1, #3
    1e52:	1ac0      	subs	r0, r0, r3
    1e54:	4152      	adcs	r2, r2
    1e56:	0883      	lsrs	r3, r0, #2
    1e58:	428b      	cmp	r3, r1
    1e5a:	d301      	bcc.n	1e60 <__udivsi3+0xe4>
    1e5c:	008b      	lsls	r3, r1, #2
    1e5e:	1ac0      	subs	r0, r0, r3
    1e60:	4152      	adcs	r2, r2
    1e62:	0843      	lsrs	r3, r0, #1
    1e64:	428b      	cmp	r3, r1
    1e66:	d301      	bcc.n	1e6c <__udivsi3+0xf0>
    1e68:	004b      	lsls	r3, r1, #1
    1e6a:	1ac0      	subs	r0, r0, r3
    1e6c:	4152      	adcs	r2, r2
    1e6e:	1a41      	subs	r1, r0, r1
    1e70:	d200      	bcs.n	1e74 <__udivsi3+0xf8>
    1e72:	4601      	mov	r1, r0
    1e74:	4152      	adcs	r2, r2
    1e76:	4610      	mov	r0, r2
    1e78:	4770      	bx	lr
    1e7a:	e7ff      	b.n	1e7c <__udivsi3+0x100>
    1e7c:	b501      	push	{r0, lr}
    1e7e:	2000      	movs	r0, #0
    1e80:	f000 f8f0 	bl	2064 <__aeabi_idiv0>
    1e84:	bd02      	pop	{r1, pc}
    1e86:	46c0      	nop			; (mov r8, r8)

00001e88 <__aeabi_uidivmod>:
    1e88:	2900      	cmp	r1, #0
    1e8a:	d0f7      	beq.n	1e7c <__udivsi3+0x100>
    1e8c:	e776      	b.n	1d7c <__udivsi3>
    1e8e:	4770      	bx	lr

00001e90 <__divsi3>:
    1e90:	4603      	mov	r3, r0
    1e92:	430b      	orrs	r3, r1
    1e94:	d47f      	bmi.n	1f96 <__divsi3+0x106>
    1e96:	2200      	movs	r2, #0
    1e98:	0843      	lsrs	r3, r0, #1
    1e9a:	428b      	cmp	r3, r1
    1e9c:	d374      	bcc.n	1f88 <__divsi3+0xf8>
    1e9e:	0903      	lsrs	r3, r0, #4
    1ea0:	428b      	cmp	r3, r1
    1ea2:	d35f      	bcc.n	1f64 <__divsi3+0xd4>
    1ea4:	0a03      	lsrs	r3, r0, #8
    1ea6:	428b      	cmp	r3, r1
    1ea8:	d344      	bcc.n	1f34 <__divsi3+0xa4>
    1eaa:	0b03      	lsrs	r3, r0, #12
    1eac:	428b      	cmp	r3, r1
    1eae:	d328      	bcc.n	1f02 <__divsi3+0x72>
    1eb0:	0c03      	lsrs	r3, r0, #16
    1eb2:	428b      	cmp	r3, r1
    1eb4:	d30d      	bcc.n	1ed2 <__divsi3+0x42>
    1eb6:	22ff      	movs	r2, #255	; 0xff
    1eb8:	0209      	lsls	r1, r1, #8
    1eba:	ba12      	rev	r2, r2
    1ebc:	0c03      	lsrs	r3, r0, #16
    1ebe:	428b      	cmp	r3, r1
    1ec0:	d302      	bcc.n	1ec8 <__divsi3+0x38>
    1ec2:	1212      	asrs	r2, r2, #8
    1ec4:	0209      	lsls	r1, r1, #8
    1ec6:	d065      	beq.n	1f94 <__divsi3+0x104>
    1ec8:	0b03      	lsrs	r3, r0, #12
    1eca:	428b      	cmp	r3, r1
    1ecc:	d319      	bcc.n	1f02 <__divsi3+0x72>
    1ece:	e000      	b.n	1ed2 <__divsi3+0x42>
    1ed0:	0a09      	lsrs	r1, r1, #8
    1ed2:	0bc3      	lsrs	r3, r0, #15
    1ed4:	428b      	cmp	r3, r1
    1ed6:	d301      	bcc.n	1edc <__divsi3+0x4c>
    1ed8:	03cb      	lsls	r3, r1, #15
    1eda:	1ac0      	subs	r0, r0, r3
    1edc:	4152      	adcs	r2, r2
    1ede:	0b83      	lsrs	r3, r0, #14
    1ee0:	428b      	cmp	r3, r1
    1ee2:	d301      	bcc.n	1ee8 <__divsi3+0x58>
    1ee4:	038b      	lsls	r3, r1, #14
    1ee6:	1ac0      	subs	r0, r0, r3
    1ee8:	4152      	adcs	r2, r2
    1eea:	0b43      	lsrs	r3, r0, #13
    1eec:	428b      	cmp	r3, r1
    1eee:	d301      	bcc.n	1ef4 <__divsi3+0x64>
    1ef0:	034b      	lsls	r3, r1, #13
    1ef2:	1ac0      	subs	r0, r0, r3
    1ef4:	4152      	adcs	r2, r2
    1ef6:	0b03      	lsrs	r3, r0, #12
    1ef8:	428b      	cmp	r3, r1
    1efa:	d301      	bcc.n	1f00 <__divsi3+0x70>
    1efc:	030b      	lsls	r3, r1, #12
    1efe:	1ac0      	subs	r0, r0, r3
    1f00:	4152      	adcs	r2, r2
    1f02:	0ac3      	lsrs	r3, r0, #11
    1f04:	428b      	cmp	r3, r1
    1f06:	d301      	bcc.n	1f0c <__divsi3+0x7c>
    1f08:	02cb      	lsls	r3, r1, #11
    1f0a:	1ac0      	subs	r0, r0, r3
    1f0c:	4152      	adcs	r2, r2
    1f0e:	0a83      	lsrs	r3, r0, #10
    1f10:	428b      	cmp	r3, r1
    1f12:	d301      	bcc.n	1f18 <__divsi3+0x88>
    1f14:	028b      	lsls	r3, r1, #10
    1f16:	1ac0      	subs	r0, r0, r3
    1f18:	4152      	adcs	r2, r2
    1f1a:	0a43      	lsrs	r3, r0, #9
    1f1c:	428b      	cmp	r3, r1
    1f1e:	d301      	bcc.n	1f24 <__divsi3+0x94>
    1f20:	024b      	lsls	r3, r1, #9
    1f22:	1ac0      	subs	r0, r0, r3
    1f24:	4152      	adcs	r2, r2
    1f26:	0a03      	lsrs	r3, r0, #8
    1f28:	428b      	cmp	r3, r1
    1f2a:	d301      	bcc.n	1f30 <__divsi3+0xa0>
    1f2c:	020b      	lsls	r3, r1, #8
    1f2e:	1ac0      	subs	r0, r0, r3
    1f30:	4152      	adcs	r2, r2
    1f32:	d2cd      	bcs.n	1ed0 <__divsi3+0x40>
    1f34:	09c3      	lsrs	r3, r0, #7
    1f36:	428b      	cmp	r3, r1
    1f38:	d301      	bcc.n	1f3e <__divsi3+0xae>
    1f3a:	01cb      	lsls	r3, r1, #7
    1f3c:	1ac0      	subs	r0, r0, r3
    1f3e:	4152      	adcs	r2, r2
    1f40:	0983      	lsrs	r3, r0, #6
    1f42:	428b      	cmp	r3, r1
    1f44:	d301      	bcc.n	1f4a <__divsi3+0xba>
    1f46:	018b      	lsls	r3, r1, #6
    1f48:	1ac0      	subs	r0, r0, r3
    1f4a:	4152      	adcs	r2, r2
    1f4c:	0943      	lsrs	r3, r0, #5
    1f4e:	428b      	cmp	r3, r1
    1f50:	d301      	bcc.n	1f56 <__divsi3+0xc6>
    1f52:	014b      	lsls	r3, r1, #5
    1f54:	1ac0      	subs	r0, r0, r3
    1f56:	4152      	adcs	r2, r2
    1f58:	0903      	lsrs	r3, r0, #4
    1f5a:	428b      	cmp	r3, r1
    1f5c:	d301      	bcc.n	1f62 <__divsi3+0xd2>
    1f5e:	010b      	lsls	r3, r1, #4
    1f60:	1ac0      	subs	r0, r0, r3
    1f62:	4152      	adcs	r2, r2
    1f64:	08c3      	lsrs	r3, r0, #3
    1f66:	428b      	cmp	r3, r1
    1f68:	d301      	bcc.n	1f6e <__divsi3+0xde>
    1f6a:	00cb      	lsls	r3, r1, #3
    1f6c:	1ac0      	subs	r0, r0, r3
    1f6e:	4152      	adcs	r2, r2
    1f70:	0883      	lsrs	r3, r0, #2
    1f72:	428b      	cmp	r3, r1
    1f74:	d301      	bcc.n	1f7a <__divsi3+0xea>
    1f76:	008b      	lsls	r3, r1, #2
    1f78:	1ac0      	subs	r0, r0, r3
    1f7a:	4152      	adcs	r2, r2
    1f7c:	0843      	lsrs	r3, r0, #1
    1f7e:	428b      	cmp	r3, r1
    1f80:	d301      	bcc.n	1f86 <__divsi3+0xf6>
    1f82:	004b      	lsls	r3, r1, #1
    1f84:	1ac0      	subs	r0, r0, r3
    1f86:	4152      	adcs	r2, r2
    1f88:	1a41      	subs	r1, r0, r1
    1f8a:	d200      	bcs.n	1f8e <__divsi3+0xfe>
    1f8c:	4601      	mov	r1, r0
    1f8e:	4152      	adcs	r2, r2
    1f90:	4610      	mov	r0, r2
    1f92:	4770      	bx	lr
    1f94:	e05d      	b.n	2052 <STACK_SIZE+0x52>
    1f96:	0fca      	lsrs	r2, r1, #31
    1f98:	d000      	beq.n	1f9c <__divsi3+0x10c>
    1f9a:	4249      	negs	r1, r1
    1f9c:	1003      	asrs	r3, r0, #32
    1f9e:	d300      	bcc.n	1fa2 <__divsi3+0x112>
    1fa0:	4240      	negs	r0, r0
    1fa2:	4053      	eors	r3, r2
    1fa4:	2200      	movs	r2, #0
    1fa6:	469c      	mov	ip, r3
    1fa8:	0903      	lsrs	r3, r0, #4
    1faa:	428b      	cmp	r3, r1
    1fac:	d32d      	bcc.n	200a <STACK_SIZE+0xa>
    1fae:	0a03      	lsrs	r3, r0, #8
    1fb0:	428b      	cmp	r3, r1
    1fb2:	d312      	bcc.n	1fda <__divsi3+0x14a>
    1fb4:	22fc      	movs	r2, #252	; 0xfc
    1fb6:	0189      	lsls	r1, r1, #6
    1fb8:	ba12      	rev	r2, r2
    1fba:	0a03      	lsrs	r3, r0, #8
    1fbc:	428b      	cmp	r3, r1
    1fbe:	d30c      	bcc.n	1fda <__divsi3+0x14a>
    1fc0:	0189      	lsls	r1, r1, #6
    1fc2:	1192      	asrs	r2, r2, #6
    1fc4:	428b      	cmp	r3, r1
    1fc6:	d308      	bcc.n	1fda <__divsi3+0x14a>
    1fc8:	0189      	lsls	r1, r1, #6
    1fca:	1192      	asrs	r2, r2, #6
    1fcc:	428b      	cmp	r3, r1
    1fce:	d304      	bcc.n	1fda <__divsi3+0x14a>
    1fd0:	0189      	lsls	r1, r1, #6
    1fd2:	d03a      	beq.n	204a <STACK_SIZE+0x4a>
    1fd4:	1192      	asrs	r2, r2, #6
    1fd6:	e000      	b.n	1fda <__divsi3+0x14a>
    1fd8:	0989      	lsrs	r1, r1, #6
    1fda:	09c3      	lsrs	r3, r0, #7
    1fdc:	428b      	cmp	r3, r1
    1fde:	d301      	bcc.n	1fe4 <__divsi3+0x154>
    1fe0:	01cb      	lsls	r3, r1, #7
    1fe2:	1ac0      	subs	r0, r0, r3
    1fe4:	4152      	adcs	r2, r2
    1fe6:	0983      	lsrs	r3, r0, #6
    1fe8:	428b      	cmp	r3, r1
    1fea:	d301      	bcc.n	1ff0 <__divsi3+0x160>
    1fec:	018b      	lsls	r3, r1, #6
    1fee:	1ac0      	subs	r0, r0, r3
    1ff0:	4152      	adcs	r2, r2
    1ff2:	0943      	lsrs	r3, r0, #5
    1ff4:	428b      	cmp	r3, r1
    1ff6:	d301      	bcc.n	1ffc <__divsi3+0x16c>
    1ff8:	014b      	lsls	r3, r1, #5
    1ffa:	1ac0      	subs	r0, r0, r3
    1ffc:	4152      	adcs	r2, r2
    1ffe:	0903      	lsrs	r3, r0, #4
    2000:	428b      	cmp	r3, r1
    2002:	d301      	bcc.n	2008 <STACK_SIZE+0x8>
    2004:	010b      	lsls	r3, r1, #4
    2006:	1ac0      	subs	r0, r0, r3
    2008:	4152      	adcs	r2, r2
    200a:	08c3      	lsrs	r3, r0, #3
    200c:	428b      	cmp	r3, r1
    200e:	d301      	bcc.n	2014 <STACK_SIZE+0x14>
    2010:	00cb      	lsls	r3, r1, #3
    2012:	1ac0      	subs	r0, r0, r3
    2014:	4152      	adcs	r2, r2
    2016:	0883      	lsrs	r3, r0, #2
    2018:	428b      	cmp	r3, r1
    201a:	d301      	bcc.n	2020 <STACK_SIZE+0x20>
    201c:	008b      	lsls	r3, r1, #2
    201e:	1ac0      	subs	r0, r0, r3
    2020:	4152      	adcs	r2, r2
    2022:	d2d9      	bcs.n	1fd8 <__divsi3+0x148>
    2024:	0843      	lsrs	r3, r0, #1
    2026:	428b      	cmp	r3, r1
    2028:	d301      	bcc.n	202e <STACK_SIZE+0x2e>
    202a:	004b      	lsls	r3, r1, #1
    202c:	1ac0      	subs	r0, r0, r3
    202e:	4152      	adcs	r2, r2
    2030:	1a41      	subs	r1, r0, r1
    2032:	d200      	bcs.n	2036 <STACK_SIZE+0x36>
    2034:	4601      	mov	r1, r0
    2036:	4663      	mov	r3, ip
    2038:	4152      	adcs	r2, r2
    203a:	105b      	asrs	r3, r3, #1
    203c:	4610      	mov	r0, r2
    203e:	d301      	bcc.n	2044 <STACK_SIZE+0x44>
    2040:	4240      	negs	r0, r0
    2042:	2b00      	cmp	r3, #0
    2044:	d500      	bpl.n	2048 <STACK_SIZE+0x48>
    2046:	4249      	negs	r1, r1
    2048:	4770      	bx	lr
    204a:	4663      	mov	r3, ip
    204c:	105b      	asrs	r3, r3, #1
    204e:	d300      	bcc.n	2052 <STACK_SIZE+0x52>
    2050:	4240      	negs	r0, r0
    2052:	b501      	push	{r0, lr}
    2054:	2000      	movs	r0, #0
    2056:	f000 f805 	bl	2064 <__aeabi_idiv0>
    205a:	bd02      	pop	{r1, pc}

0000205c <__aeabi_idivmod>:
    205c:	2900      	cmp	r1, #0
    205e:	d0f8      	beq.n	2052 <STACK_SIZE+0x52>
    2060:	e716      	b.n	1e90 <__divsi3>
    2062:	4770      	bx	lr

00002064 <__aeabi_idiv0>:
    2064:	4770      	bx	lr
    2066:	46c0      	nop			; (mov r8, r8)

00002068 <__aeabi_cdrcmple>:
    2068:	4684      	mov	ip, r0
    206a:	1c10      	adds	r0, r2, #0
    206c:	4662      	mov	r2, ip
    206e:	468c      	mov	ip, r1
    2070:	1c19      	adds	r1, r3, #0
    2072:	4663      	mov	r3, ip
    2074:	e000      	b.n	2078 <__aeabi_cdcmpeq>
    2076:	46c0      	nop			; (mov r8, r8)

00002078 <__aeabi_cdcmpeq>:
    2078:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    207a:	f000 fb75 	bl	2768 <__ledf2>
    207e:	2800      	cmp	r0, #0
    2080:	d401      	bmi.n	2086 <__aeabi_cdcmpeq+0xe>
    2082:	2100      	movs	r1, #0
    2084:	42c8      	cmn	r0, r1
    2086:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00002088 <__aeabi_dcmpeq>:
    2088:	b510      	push	{r4, lr}
    208a:	f000 facf 	bl	262c <__eqdf2>
    208e:	4240      	negs	r0, r0
    2090:	3001      	adds	r0, #1
    2092:	bd10      	pop	{r4, pc}

00002094 <__aeabi_dcmplt>:
    2094:	b510      	push	{r4, lr}
    2096:	f000 fb67 	bl	2768 <__ledf2>
    209a:	2800      	cmp	r0, #0
    209c:	db01      	blt.n	20a2 <__aeabi_dcmplt+0xe>
    209e:	2000      	movs	r0, #0
    20a0:	bd10      	pop	{r4, pc}
    20a2:	2001      	movs	r0, #1
    20a4:	bd10      	pop	{r4, pc}
    20a6:	46c0      	nop			; (mov r8, r8)

000020a8 <__aeabi_dcmple>:
    20a8:	b510      	push	{r4, lr}
    20aa:	f000 fb5d 	bl	2768 <__ledf2>
    20ae:	2800      	cmp	r0, #0
    20b0:	dd01      	ble.n	20b6 <__aeabi_dcmple+0xe>
    20b2:	2000      	movs	r0, #0
    20b4:	bd10      	pop	{r4, pc}
    20b6:	2001      	movs	r0, #1
    20b8:	bd10      	pop	{r4, pc}
    20ba:	46c0      	nop			; (mov r8, r8)

000020bc <__aeabi_dcmpgt>:
    20bc:	b510      	push	{r4, lr}
    20be:	f000 faef 	bl	26a0 <__gedf2>
    20c2:	2800      	cmp	r0, #0
    20c4:	dc01      	bgt.n	20ca <__aeabi_dcmpgt+0xe>
    20c6:	2000      	movs	r0, #0
    20c8:	bd10      	pop	{r4, pc}
    20ca:	2001      	movs	r0, #1
    20cc:	bd10      	pop	{r4, pc}
    20ce:	46c0      	nop			; (mov r8, r8)

000020d0 <__aeabi_dcmpge>:
    20d0:	b510      	push	{r4, lr}
    20d2:	f000 fae5 	bl	26a0 <__gedf2>
    20d6:	2800      	cmp	r0, #0
    20d8:	da01      	bge.n	20de <__aeabi_dcmpge+0xe>
    20da:	2000      	movs	r0, #0
    20dc:	bd10      	pop	{r4, pc}
    20de:	2001      	movs	r0, #1
    20e0:	bd10      	pop	{r4, pc}
    20e2:	46c0      	nop			; (mov r8, r8)

000020e4 <__aeabi_cfrcmple>:
    20e4:	4684      	mov	ip, r0
    20e6:	1c08      	adds	r0, r1, #0
    20e8:	4661      	mov	r1, ip
    20ea:	e7ff      	b.n	20ec <__aeabi_cfcmpeq>

000020ec <__aeabi_cfcmpeq>:
    20ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    20ee:	f000 fa0b 	bl	2508 <__lesf2>
    20f2:	2800      	cmp	r0, #0
    20f4:	d401      	bmi.n	20fa <__aeabi_cfcmpeq+0xe>
    20f6:	2100      	movs	r1, #0
    20f8:	42c8      	cmn	r0, r1
    20fa:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000020fc <__aeabi_fcmpeq>:
    20fc:	b510      	push	{r4, lr}
    20fe:	f000 f99d 	bl	243c <__eqsf2>
    2102:	4240      	negs	r0, r0
    2104:	3001      	adds	r0, #1
    2106:	bd10      	pop	{r4, pc}

00002108 <__aeabi_fcmplt>:
    2108:	b510      	push	{r4, lr}
    210a:	f000 f9fd 	bl	2508 <__lesf2>
    210e:	2800      	cmp	r0, #0
    2110:	db01      	blt.n	2116 <__aeabi_fcmplt+0xe>
    2112:	2000      	movs	r0, #0
    2114:	bd10      	pop	{r4, pc}
    2116:	2001      	movs	r0, #1
    2118:	bd10      	pop	{r4, pc}
    211a:	46c0      	nop			; (mov r8, r8)

0000211c <__aeabi_fcmple>:
    211c:	b510      	push	{r4, lr}
    211e:	f000 f9f3 	bl	2508 <__lesf2>
    2122:	2800      	cmp	r0, #0
    2124:	dd01      	ble.n	212a <__aeabi_fcmple+0xe>
    2126:	2000      	movs	r0, #0
    2128:	bd10      	pop	{r4, pc}
    212a:	2001      	movs	r0, #1
    212c:	bd10      	pop	{r4, pc}
    212e:	46c0      	nop			; (mov r8, r8)

00002130 <__aeabi_fcmpgt>:
    2130:	b510      	push	{r4, lr}
    2132:	f000 f9a9 	bl	2488 <__gesf2>
    2136:	2800      	cmp	r0, #0
    2138:	dc01      	bgt.n	213e <__aeabi_fcmpgt+0xe>
    213a:	2000      	movs	r0, #0
    213c:	bd10      	pop	{r4, pc}
    213e:	2001      	movs	r0, #1
    2140:	bd10      	pop	{r4, pc}
    2142:	46c0      	nop			; (mov r8, r8)

00002144 <__aeabi_fcmpge>:
    2144:	b510      	push	{r4, lr}
    2146:	f000 f99f 	bl	2488 <__gesf2>
    214a:	2800      	cmp	r0, #0
    214c:	da01      	bge.n	2152 <__aeabi_fcmpge+0xe>
    214e:	2000      	movs	r0, #0
    2150:	bd10      	pop	{r4, pc}
    2152:	2001      	movs	r0, #1
    2154:	bd10      	pop	{r4, pc}
    2156:	46c0      	nop			; (mov r8, r8)

00002158 <__aeabi_lmul>:
    2158:	b5f0      	push	{r4, r5, r6, r7, lr}
    215a:	46ce      	mov	lr, r9
    215c:	4647      	mov	r7, r8
    215e:	0415      	lsls	r5, r2, #16
    2160:	0c2d      	lsrs	r5, r5, #16
    2162:	002e      	movs	r6, r5
    2164:	b580      	push	{r7, lr}
    2166:	0407      	lsls	r7, r0, #16
    2168:	0c14      	lsrs	r4, r2, #16
    216a:	0c3f      	lsrs	r7, r7, #16
    216c:	4699      	mov	r9, r3
    216e:	0c03      	lsrs	r3, r0, #16
    2170:	437e      	muls	r6, r7
    2172:	435d      	muls	r5, r3
    2174:	4367      	muls	r7, r4
    2176:	4363      	muls	r3, r4
    2178:	197f      	adds	r7, r7, r5
    217a:	0c34      	lsrs	r4, r6, #16
    217c:	19e4      	adds	r4, r4, r7
    217e:	469c      	mov	ip, r3
    2180:	42a5      	cmp	r5, r4
    2182:	d903      	bls.n	218c <__aeabi_lmul+0x34>
    2184:	2380      	movs	r3, #128	; 0x80
    2186:	025b      	lsls	r3, r3, #9
    2188:	4698      	mov	r8, r3
    218a:	44c4      	add	ip, r8
    218c:	464b      	mov	r3, r9
    218e:	4351      	muls	r1, r2
    2190:	4343      	muls	r3, r0
    2192:	0436      	lsls	r6, r6, #16
    2194:	0c36      	lsrs	r6, r6, #16
    2196:	0c25      	lsrs	r5, r4, #16
    2198:	0424      	lsls	r4, r4, #16
    219a:	4465      	add	r5, ip
    219c:	19a4      	adds	r4, r4, r6
    219e:	1859      	adds	r1, r3, r1
    21a0:	1949      	adds	r1, r1, r5
    21a2:	0020      	movs	r0, r4
    21a4:	bc0c      	pop	{r2, r3}
    21a6:	4690      	mov	r8, r2
    21a8:	4699      	mov	r9, r3
    21aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000021ac <__aeabi_fdiv>:
    21ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    21ae:	4657      	mov	r7, sl
    21b0:	464e      	mov	r6, r9
    21b2:	46de      	mov	lr, fp
    21b4:	4645      	mov	r5, r8
    21b6:	b5e0      	push	{r5, r6, r7, lr}
    21b8:	0244      	lsls	r4, r0, #9
    21ba:	0043      	lsls	r3, r0, #1
    21bc:	0fc6      	lsrs	r6, r0, #31
    21be:	b083      	sub	sp, #12
    21c0:	1c0f      	adds	r7, r1, #0
    21c2:	0a64      	lsrs	r4, r4, #9
    21c4:	0e1b      	lsrs	r3, r3, #24
    21c6:	46b2      	mov	sl, r6
    21c8:	d053      	beq.n	2272 <__aeabi_fdiv+0xc6>
    21ca:	2bff      	cmp	r3, #255	; 0xff
    21cc:	d027      	beq.n	221e <__aeabi_fdiv+0x72>
    21ce:	2280      	movs	r2, #128	; 0x80
    21d0:	00e4      	lsls	r4, r4, #3
    21d2:	04d2      	lsls	r2, r2, #19
    21d4:	4314      	orrs	r4, r2
    21d6:	227f      	movs	r2, #127	; 0x7f
    21d8:	4252      	negs	r2, r2
    21da:	4690      	mov	r8, r2
    21dc:	4498      	add	r8, r3
    21de:	2300      	movs	r3, #0
    21e0:	4699      	mov	r9, r3
    21e2:	469b      	mov	fp, r3
    21e4:	027d      	lsls	r5, r7, #9
    21e6:	0078      	lsls	r0, r7, #1
    21e8:	0ffb      	lsrs	r3, r7, #31
    21ea:	0a6d      	lsrs	r5, r5, #9
    21ec:	0e00      	lsrs	r0, r0, #24
    21ee:	9300      	str	r3, [sp, #0]
    21f0:	d024      	beq.n	223c <__aeabi_fdiv+0x90>
    21f2:	28ff      	cmp	r0, #255	; 0xff
    21f4:	d046      	beq.n	2284 <__aeabi_fdiv+0xd8>
    21f6:	2380      	movs	r3, #128	; 0x80
    21f8:	2100      	movs	r1, #0
    21fa:	00ed      	lsls	r5, r5, #3
    21fc:	04db      	lsls	r3, r3, #19
    21fe:	431d      	orrs	r5, r3
    2200:	387f      	subs	r0, #127	; 0x7f
    2202:	4647      	mov	r7, r8
    2204:	1a38      	subs	r0, r7, r0
    2206:	464f      	mov	r7, r9
    2208:	430f      	orrs	r7, r1
    220a:	00bf      	lsls	r7, r7, #2
    220c:	46b9      	mov	r9, r7
    220e:	0033      	movs	r3, r6
    2210:	9a00      	ldr	r2, [sp, #0]
    2212:	4f87      	ldr	r7, [pc, #540]	; (2430 <__aeabi_fdiv+0x284>)
    2214:	4053      	eors	r3, r2
    2216:	464a      	mov	r2, r9
    2218:	58ba      	ldr	r2, [r7, r2]
    221a:	9301      	str	r3, [sp, #4]
    221c:	4697      	mov	pc, r2
    221e:	2c00      	cmp	r4, #0
    2220:	d14e      	bne.n	22c0 <__aeabi_fdiv+0x114>
    2222:	2308      	movs	r3, #8
    2224:	4699      	mov	r9, r3
    2226:	33f7      	adds	r3, #247	; 0xf7
    2228:	4698      	mov	r8, r3
    222a:	3bfd      	subs	r3, #253	; 0xfd
    222c:	469b      	mov	fp, r3
    222e:	027d      	lsls	r5, r7, #9
    2230:	0078      	lsls	r0, r7, #1
    2232:	0ffb      	lsrs	r3, r7, #31
    2234:	0a6d      	lsrs	r5, r5, #9
    2236:	0e00      	lsrs	r0, r0, #24
    2238:	9300      	str	r3, [sp, #0]
    223a:	d1da      	bne.n	21f2 <__aeabi_fdiv+0x46>
    223c:	2d00      	cmp	r5, #0
    223e:	d126      	bne.n	228e <__aeabi_fdiv+0xe2>
    2240:	2000      	movs	r0, #0
    2242:	2101      	movs	r1, #1
    2244:	0033      	movs	r3, r6
    2246:	9a00      	ldr	r2, [sp, #0]
    2248:	4f7a      	ldr	r7, [pc, #488]	; (2434 <__aeabi_fdiv+0x288>)
    224a:	4053      	eors	r3, r2
    224c:	4642      	mov	r2, r8
    224e:	1a10      	subs	r0, r2, r0
    2250:	464a      	mov	r2, r9
    2252:	430a      	orrs	r2, r1
    2254:	0092      	lsls	r2, r2, #2
    2256:	58ba      	ldr	r2, [r7, r2]
    2258:	001d      	movs	r5, r3
    225a:	4697      	mov	pc, r2
    225c:	9b00      	ldr	r3, [sp, #0]
    225e:	002c      	movs	r4, r5
    2260:	469a      	mov	sl, r3
    2262:	468b      	mov	fp, r1
    2264:	465b      	mov	r3, fp
    2266:	2b02      	cmp	r3, #2
    2268:	d131      	bne.n	22ce <__aeabi_fdiv+0x122>
    226a:	4653      	mov	r3, sl
    226c:	21ff      	movs	r1, #255	; 0xff
    226e:	2400      	movs	r4, #0
    2270:	e038      	b.n	22e4 <__aeabi_fdiv+0x138>
    2272:	2c00      	cmp	r4, #0
    2274:	d117      	bne.n	22a6 <__aeabi_fdiv+0xfa>
    2276:	2304      	movs	r3, #4
    2278:	4699      	mov	r9, r3
    227a:	2300      	movs	r3, #0
    227c:	4698      	mov	r8, r3
    227e:	3301      	adds	r3, #1
    2280:	469b      	mov	fp, r3
    2282:	e7af      	b.n	21e4 <__aeabi_fdiv+0x38>
    2284:	20ff      	movs	r0, #255	; 0xff
    2286:	2d00      	cmp	r5, #0
    2288:	d10b      	bne.n	22a2 <__aeabi_fdiv+0xf6>
    228a:	2102      	movs	r1, #2
    228c:	e7da      	b.n	2244 <__aeabi_fdiv+0x98>
    228e:	0028      	movs	r0, r5
    2290:	f000 fb1e 	bl	28d0 <__clzsi2>
    2294:	1f43      	subs	r3, r0, #5
    2296:	409d      	lsls	r5, r3
    2298:	2376      	movs	r3, #118	; 0x76
    229a:	425b      	negs	r3, r3
    229c:	1a18      	subs	r0, r3, r0
    229e:	2100      	movs	r1, #0
    22a0:	e7af      	b.n	2202 <__aeabi_fdiv+0x56>
    22a2:	2103      	movs	r1, #3
    22a4:	e7ad      	b.n	2202 <__aeabi_fdiv+0x56>
    22a6:	0020      	movs	r0, r4
    22a8:	f000 fb12 	bl	28d0 <__clzsi2>
    22ac:	1f43      	subs	r3, r0, #5
    22ae:	409c      	lsls	r4, r3
    22b0:	2376      	movs	r3, #118	; 0x76
    22b2:	425b      	negs	r3, r3
    22b4:	1a1b      	subs	r3, r3, r0
    22b6:	4698      	mov	r8, r3
    22b8:	2300      	movs	r3, #0
    22ba:	4699      	mov	r9, r3
    22bc:	469b      	mov	fp, r3
    22be:	e791      	b.n	21e4 <__aeabi_fdiv+0x38>
    22c0:	230c      	movs	r3, #12
    22c2:	4699      	mov	r9, r3
    22c4:	33f3      	adds	r3, #243	; 0xf3
    22c6:	4698      	mov	r8, r3
    22c8:	3bfc      	subs	r3, #252	; 0xfc
    22ca:	469b      	mov	fp, r3
    22cc:	e78a      	b.n	21e4 <__aeabi_fdiv+0x38>
    22ce:	2b03      	cmp	r3, #3
    22d0:	d100      	bne.n	22d4 <__aeabi_fdiv+0x128>
    22d2:	e0a5      	b.n	2420 <__aeabi_fdiv+0x274>
    22d4:	4655      	mov	r5, sl
    22d6:	2b01      	cmp	r3, #1
    22d8:	d000      	beq.n	22dc <__aeabi_fdiv+0x130>
    22da:	e081      	b.n	23e0 <__aeabi_fdiv+0x234>
    22dc:	2301      	movs	r3, #1
    22de:	2100      	movs	r1, #0
    22e0:	2400      	movs	r4, #0
    22e2:	402b      	ands	r3, r5
    22e4:	0264      	lsls	r4, r4, #9
    22e6:	05c9      	lsls	r1, r1, #23
    22e8:	0a60      	lsrs	r0, r4, #9
    22ea:	07db      	lsls	r3, r3, #31
    22ec:	4308      	orrs	r0, r1
    22ee:	4318      	orrs	r0, r3
    22f0:	b003      	add	sp, #12
    22f2:	bc3c      	pop	{r2, r3, r4, r5}
    22f4:	4690      	mov	r8, r2
    22f6:	4699      	mov	r9, r3
    22f8:	46a2      	mov	sl, r4
    22fa:	46ab      	mov	fp, r5
    22fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    22fe:	2480      	movs	r4, #128	; 0x80
    2300:	2300      	movs	r3, #0
    2302:	03e4      	lsls	r4, r4, #15
    2304:	21ff      	movs	r1, #255	; 0xff
    2306:	e7ed      	b.n	22e4 <__aeabi_fdiv+0x138>
    2308:	21ff      	movs	r1, #255	; 0xff
    230a:	2400      	movs	r4, #0
    230c:	e7ea      	b.n	22e4 <__aeabi_fdiv+0x138>
    230e:	2301      	movs	r3, #1
    2310:	1a59      	subs	r1, r3, r1
    2312:	291b      	cmp	r1, #27
    2314:	dd66      	ble.n	23e4 <__aeabi_fdiv+0x238>
    2316:	9a01      	ldr	r2, [sp, #4]
    2318:	4013      	ands	r3, r2
    231a:	2100      	movs	r1, #0
    231c:	2400      	movs	r4, #0
    231e:	e7e1      	b.n	22e4 <__aeabi_fdiv+0x138>
    2320:	2380      	movs	r3, #128	; 0x80
    2322:	03db      	lsls	r3, r3, #15
    2324:	421c      	tst	r4, r3
    2326:	d038      	beq.n	239a <__aeabi_fdiv+0x1ee>
    2328:	421d      	tst	r5, r3
    232a:	d051      	beq.n	23d0 <__aeabi_fdiv+0x224>
    232c:	431c      	orrs	r4, r3
    232e:	0264      	lsls	r4, r4, #9
    2330:	0a64      	lsrs	r4, r4, #9
    2332:	0033      	movs	r3, r6
    2334:	21ff      	movs	r1, #255	; 0xff
    2336:	e7d5      	b.n	22e4 <__aeabi_fdiv+0x138>
    2338:	0163      	lsls	r3, r4, #5
    233a:	016c      	lsls	r4, r5, #5
    233c:	42a3      	cmp	r3, r4
    233e:	d23b      	bcs.n	23b8 <__aeabi_fdiv+0x20c>
    2340:	261b      	movs	r6, #27
    2342:	2100      	movs	r1, #0
    2344:	3801      	subs	r0, #1
    2346:	2501      	movs	r5, #1
    2348:	001f      	movs	r7, r3
    234a:	0049      	lsls	r1, r1, #1
    234c:	005b      	lsls	r3, r3, #1
    234e:	2f00      	cmp	r7, #0
    2350:	db01      	blt.n	2356 <__aeabi_fdiv+0x1aa>
    2352:	429c      	cmp	r4, r3
    2354:	d801      	bhi.n	235a <__aeabi_fdiv+0x1ae>
    2356:	1b1b      	subs	r3, r3, r4
    2358:	4329      	orrs	r1, r5
    235a:	3e01      	subs	r6, #1
    235c:	2e00      	cmp	r6, #0
    235e:	d1f3      	bne.n	2348 <__aeabi_fdiv+0x19c>
    2360:	001c      	movs	r4, r3
    2362:	1e63      	subs	r3, r4, #1
    2364:	419c      	sbcs	r4, r3
    2366:	430c      	orrs	r4, r1
    2368:	0001      	movs	r1, r0
    236a:	317f      	adds	r1, #127	; 0x7f
    236c:	2900      	cmp	r1, #0
    236e:	ddce      	ble.n	230e <__aeabi_fdiv+0x162>
    2370:	0763      	lsls	r3, r4, #29
    2372:	d004      	beq.n	237e <__aeabi_fdiv+0x1d2>
    2374:	230f      	movs	r3, #15
    2376:	4023      	ands	r3, r4
    2378:	2b04      	cmp	r3, #4
    237a:	d000      	beq.n	237e <__aeabi_fdiv+0x1d2>
    237c:	3404      	adds	r4, #4
    237e:	0123      	lsls	r3, r4, #4
    2380:	d503      	bpl.n	238a <__aeabi_fdiv+0x1de>
    2382:	0001      	movs	r1, r0
    2384:	4b2c      	ldr	r3, [pc, #176]	; (2438 <__aeabi_fdiv+0x28c>)
    2386:	3180      	adds	r1, #128	; 0x80
    2388:	401c      	ands	r4, r3
    238a:	29fe      	cmp	r1, #254	; 0xfe
    238c:	dd0d      	ble.n	23aa <__aeabi_fdiv+0x1fe>
    238e:	2301      	movs	r3, #1
    2390:	9a01      	ldr	r2, [sp, #4]
    2392:	21ff      	movs	r1, #255	; 0xff
    2394:	4013      	ands	r3, r2
    2396:	2400      	movs	r4, #0
    2398:	e7a4      	b.n	22e4 <__aeabi_fdiv+0x138>
    239a:	2380      	movs	r3, #128	; 0x80
    239c:	03db      	lsls	r3, r3, #15
    239e:	431c      	orrs	r4, r3
    23a0:	0264      	lsls	r4, r4, #9
    23a2:	0a64      	lsrs	r4, r4, #9
    23a4:	0033      	movs	r3, r6
    23a6:	21ff      	movs	r1, #255	; 0xff
    23a8:	e79c      	b.n	22e4 <__aeabi_fdiv+0x138>
    23aa:	2301      	movs	r3, #1
    23ac:	9a01      	ldr	r2, [sp, #4]
    23ae:	01a4      	lsls	r4, r4, #6
    23b0:	0a64      	lsrs	r4, r4, #9
    23b2:	b2c9      	uxtb	r1, r1
    23b4:	4013      	ands	r3, r2
    23b6:	e795      	b.n	22e4 <__aeabi_fdiv+0x138>
    23b8:	1b1b      	subs	r3, r3, r4
    23ba:	261a      	movs	r6, #26
    23bc:	2101      	movs	r1, #1
    23be:	e7c2      	b.n	2346 <__aeabi_fdiv+0x19a>
    23c0:	9b00      	ldr	r3, [sp, #0]
    23c2:	468b      	mov	fp, r1
    23c4:	469a      	mov	sl, r3
    23c6:	2400      	movs	r4, #0
    23c8:	e74c      	b.n	2264 <__aeabi_fdiv+0xb8>
    23ca:	0263      	lsls	r3, r4, #9
    23cc:	d5e5      	bpl.n	239a <__aeabi_fdiv+0x1ee>
    23ce:	2500      	movs	r5, #0
    23d0:	2480      	movs	r4, #128	; 0x80
    23d2:	03e4      	lsls	r4, r4, #15
    23d4:	432c      	orrs	r4, r5
    23d6:	0264      	lsls	r4, r4, #9
    23d8:	0a64      	lsrs	r4, r4, #9
    23da:	9b00      	ldr	r3, [sp, #0]
    23dc:	21ff      	movs	r1, #255	; 0xff
    23de:	e781      	b.n	22e4 <__aeabi_fdiv+0x138>
    23e0:	9501      	str	r5, [sp, #4]
    23e2:	e7c1      	b.n	2368 <__aeabi_fdiv+0x1bc>
    23e4:	0023      	movs	r3, r4
    23e6:	2020      	movs	r0, #32
    23e8:	40cb      	lsrs	r3, r1
    23ea:	1a41      	subs	r1, r0, r1
    23ec:	408c      	lsls	r4, r1
    23ee:	1e61      	subs	r1, r4, #1
    23f0:	418c      	sbcs	r4, r1
    23f2:	431c      	orrs	r4, r3
    23f4:	0763      	lsls	r3, r4, #29
    23f6:	d004      	beq.n	2402 <__aeabi_fdiv+0x256>
    23f8:	230f      	movs	r3, #15
    23fa:	4023      	ands	r3, r4
    23fc:	2b04      	cmp	r3, #4
    23fe:	d000      	beq.n	2402 <__aeabi_fdiv+0x256>
    2400:	3404      	adds	r4, #4
    2402:	0163      	lsls	r3, r4, #5
    2404:	d505      	bpl.n	2412 <__aeabi_fdiv+0x266>
    2406:	2301      	movs	r3, #1
    2408:	9a01      	ldr	r2, [sp, #4]
    240a:	2101      	movs	r1, #1
    240c:	4013      	ands	r3, r2
    240e:	2400      	movs	r4, #0
    2410:	e768      	b.n	22e4 <__aeabi_fdiv+0x138>
    2412:	2301      	movs	r3, #1
    2414:	9a01      	ldr	r2, [sp, #4]
    2416:	01a4      	lsls	r4, r4, #6
    2418:	0a64      	lsrs	r4, r4, #9
    241a:	4013      	ands	r3, r2
    241c:	2100      	movs	r1, #0
    241e:	e761      	b.n	22e4 <__aeabi_fdiv+0x138>
    2420:	2380      	movs	r3, #128	; 0x80
    2422:	03db      	lsls	r3, r3, #15
    2424:	431c      	orrs	r4, r3
    2426:	0264      	lsls	r4, r4, #9
    2428:	0a64      	lsrs	r4, r4, #9
    242a:	4653      	mov	r3, sl
    242c:	21ff      	movs	r1, #255	; 0xff
    242e:	e759      	b.n	22e4 <__aeabi_fdiv+0x138>
    2430:	00003a28 	.word	0x00003a28
    2434:	00003a68 	.word	0x00003a68
    2438:	f7ffffff 	.word	0xf7ffffff

0000243c <__eqsf2>:
    243c:	b570      	push	{r4, r5, r6, lr}
    243e:	0042      	lsls	r2, r0, #1
    2440:	0245      	lsls	r5, r0, #9
    2442:	024e      	lsls	r6, r1, #9
    2444:	004c      	lsls	r4, r1, #1
    2446:	0fc3      	lsrs	r3, r0, #31
    2448:	0a6d      	lsrs	r5, r5, #9
    244a:	0e12      	lsrs	r2, r2, #24
    244c:	0a76      	lsrs	r6, r6, #9
    244e:	0e24      	lsrs	r4, r4, #24
    2450:	0fc9      	lsrs	r1, r1, #31
    2452:	2001      	movs	r0, #1
    2454:	2aff      	cmp	r2, #255	; 0xff
    2456:	d006      	beq.n	2466 <__eqsf2+0x2a>
    2458:	2cff      	cmp	r4, #255	; 0xff
    245a:	d003      	beq.n	2464 <__eqsf2+0x28>
    245c:	42a2      	cmp	r2, r4
    245e:	d101      	bne.n	2464 <__eqsf2+0x28>
    2460:	42b5      	cmp	r5, r6
    2462:	d006      	beq.n	2472 <__eqsf2+0x36>
    2464:	bd70      	pop	{r4, r5, r6, pc}
    2466:	2d00      	cmp	r5, #0
    2468:	d1fc      	bne.n	2464 <__eqsf2+0x28>
    246a:	2cff      	cmp	r4, #255	; 0xff
    246c:	d1fa      	bne.n	2464 <__eqsf2+0x28>
    246e:	2e00      	cmp	r6, #0
    2470:	d1f8      	bne.n	2464 <__eqsf2+0x28>
    2472:	428b      	cmp	r3, r1
    2474:	d006      	beq.n	2484 <__eqsf2+0x48>
    2476:	2001      	movs	r0, #1
    2478:	2a00      	cmp	r2, #0
    247a:	d1f3      	bne.n	2464 <__eqsf2+0x28>
    247c:	0028      	movs	r0, r5
    247e:	1e45      	subs	r5, r0, #1
    2480:	41a8      	sbcs	r0, r5
    2482:	e7ef      	b.n	2464 <__eqsf2+0x28>
    2484:	2000      	movs	r0, #0
    2486:	e7ed      	b.n	2464 <__eqsf2+0x28>

00002488 <__gesf2>:
    2488:	b5f0      	push	{r4, r5, r6, r7, lr}
    248a:	0042      	lsls	r2, r0, #1
    248c:	0245      	lsls	r5, r0, #9
    248e:	024c      	lsls	r4, r1, #9
    2490:	0fc3      	lsrs	r3, r0, #31
    2492:	0048      	lsls	r0, r1, #1
    2494:	0a6d      	lsrs	r5, r5, #9
    2496:	0e12      	lsrs	r2, r2, #24
    2498:	0a64      	lsrs	r4, r4, #9
    249a:	0e00      	lsrs	r0, r0, #24
    249c:	0fc9      	lsrs	r1, r1, #31
    249e:	2aff      	cmp	r2, #255	; 0xff
    24a0:	d01e      	beq.n	24e0 <__gesf2+0x58>
    24a2:	28ff      	cmp	r0, #255	; 0xff
    24a4:	d021      	beq.n	24ea <__gesf2+0x62>
    24a6:	2a00      	cmp	r2, #0
    24a8:	d10a      	bne.n	24c0 <__gesf2+0x38>
    24aa:	426e      	negs	r6, r5
    24ac:	416e      	adcs	r6, r5
    24ae:	b2f6      	uxtb	r6, r6
    24b0:	2800      	cmp	r0, #0
    24b2:	d10f      	bne.n	24d4 <__gesf2+0x4c>
    24b4:	2c00      	cmp	r4, #0
    24b6:	d10d      	bne.n	24d4 <__gesf2+0x4c>
    24b8:	2000      	movs	r0, #0
    24ba:	2d00      	cmp	r5, #0
    24bc:	d009      	beq.n	24d2 <__gesf2+0x4a>
    24be:	e005      	b.n	24cc <__gesf2+0x44>
    24c0:	2800      	cmp	r0, #0
    24c2:	d101      	bne.n	24c8 <__gesf2+0x40>
    24c4:	2c00      	cmp	r4, #0
    24c6:	d001      	beq.n	24cc <__gesf2+0x44>
    24c8:	428b      	cmp	r3, r1
    24ca:	d011      	beq.n	24f0 <__gesf2+0x68>
    24cc:	2101      	movs	r1, #1
    24ce:	4258      	negs	r0, r3
    24d0:	4308      	orrs	r0, r1
    24d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    24d4:	2e00      	cmp	r6, #0
    24d6:	d0f7      	beq.n	24c8 <__gesf2+0x40>
    24d8:	2001      	movs	r0, #1
    24da:	3901      	subs	r1, #1
    24dc:	4308      	orrs	r0, r1
    24de:	e7f8      	b.n	24d2 <__gesf2+0x4a>
    24e0:	2d00      	cmp	r5, #0
    24e2:	d0de      	beq.n	24a2 <__gesf2+0x1a>
    24e4:	2002      	movs	r0, #2
    24e6:	4240      	negs	r0, r0
    24e8:	e7f3      	b.n	24d2 <__gesf2+0x4a>
    24ea:	2c00      	cmp	r4, #0
    24ec:	d0db      	beq.n	24a6 <__gesf2+0x1e>
    24ee:	e7f9      	b.n	24e4 <__gesf2+0x5c>
    24f0:	4282      	cmp	r2, r0
    24f2:	dceb      	bgt.n	24cc <__gesf2+0x44>
    24f4:	db04      	blt.n	2500 <__gesf2+0x78>
    24f6:	42a5      	cmp	r5, r4
    24f8:	d8e8      	bhi.n	24cc <__gesf2+0x44>
    24fa:	2000      	movs	r0, #0
    24fc:	42a5      	cmp	r5, r4
    24fe:	d2e8      	bcs.n	24d2 <__gesf2+0x4a>
    2500:	2101      	movs	r1, #1
    2502:	1e58      	subs	r0, r3, #1
    2504:	4308      	orrs	r0, r1
    2506:	e7e4      	b.n	24d2 <__gesf2+0x4a>

00002508 <__lesf2>:
    2508:	b5f0      	push	{r4, r5, r6, r7, lr}
    250a:	0042      	lsls	r2, r0, #1
    250c:	024d      	lsls	r5, r1, #9
    250e:	004c      	lsls	r4, r1, #1
    2510:	0246      	lsls	r6, r0, #9
    2512:	0a76      	lsrs	r6, r6, #9
    2514:	0e12      	lsrs	r2, r2, #24
    2516:	0fc3      	lsrs	r3, r0, #31
    2518:	0a6d      	lsrs	r5, r5, #9
    251a:	0e24      	lsrs	r4, r4, #24
    251c:	0fc9      	lsrs	r1, r1, #31
    251e:	2aff      	cmp	r2, #255	; 0xff
    2520:	d016      	beq.n	2550 <__lesf2+0x48>
    2522:	2cff      	cmp	r4, #255	; 0xff
    2524:	d018      	beq.n	2558 <__lesf2+0x50>
    2526:	2a00      	cmp	r2, #0
    2528:	d10a      	bne.n	2540 <__lesf2+0x38>
    252a:	4270      	negs	r0, r6
    252c:	4170      	adcs	r0, r6
    252e:	b2c0      	uxtb	r0, r0
    2530:	2c00      	cmp	r4, #0
    2532:	d015      	beq.n	2560 <__lesf2+0x58>
    2534:	2800      	cmp	r0, #0
    2536:	d005      	beq.n	2544 <__lesf2+0x3c>
    2538:	2001      	movs	r0, #1
    253a:	3901      	subs	r1, #1
    253c:	4308      	orrs	r0, r1
    253e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2540:	2c00      	cmp	r4, #0
    2542:	d013      	beq.n	256c <__lesf2+0x64>
    2544:	4299      	cmp	r1, r3
    2546:	d014      	beq.n	2572 <__lesf2+0x6a>
    2548:	2001      	movs	r0, #1
    254a:	425b      	negs	r3, r3
    254c:	4318      	orrs	r0, r3
    254e:	e7f6      	b.n	253e <__lesf2+0x36>
    2550:	2002      	movs	r0, #2
    2552:	2e00      	cmp	r6, #0
    2554:	d1f3      	bne.n	253e <__lesf2+0x36>
    2556:	e7e4      	b.n	2522 <__lesf2+0x1a>
    2558:	2002      	movs	r0, #2
    255a:	2d00      	cmp	r5, #0
    255c:	d1ef      	bne.n	253e <__lesf2+0x36>
    255e:	e7e2      	b.n	2526 <__lesf2+0x1e>
    2560:	2d00      	cmp	r5, #0
    2562:	d1e7      	bne.n	2534 <__lesf2+0x2c>
    2564:	2000      	movs	r0, #0
    2566:	2e00      	cmp	r6, #0
    2568:	d0e9      	beq.n	253e <__lesf2+0x36>
    256a:	e7ed      	b.n	2548 <__lesf2+0x40>
    256c:	2d00      	cmp	r5, #0
    256e:	d1e9      	bne.n	2544 <__lesf2+0x3c>
    2570:	e7ea      	b.n	2548 <__lesf2+0x40>
    2572:	42a2      	cmp	r2, r4
    2574:	dc06      	bgt.n	2584 <__lesf2+0x7c>
    2576:	dbdf      	blt.n	2538 <__lesf2+0x30>
    2578:	42ae      	cmp	r6, r5
    257a:	d803      	bhi.n	2584 <__lesf2+0x7c>
    257c:	2000      	movs	r0, #0
    257e:	42ae      	cmp	r6, r5
    2580:	d3da      	bcc.n	2538 <__lesf2+0x30>
    2582:	e7dc      	b.n	253e <__lesf2+0x36>
    2584:	2001      	movs	r0, #1
    2586:	4249      	negs	r1, r1
    2588:	4308      	orrs	r0, r1
    258a:	e7d8      	b.n	253e <__lesf2+0x36>

0000258c <__aeabi_i2f>:
    258c:	b570      	push	{r4, r5, r6, lr}
    258e:	2800      	cmp	r0, #0
    2590:	d030      	beq.n	25f4 <__aeabi_i2f+0x68>
    2592:	17c3      	asrs	r3, r0, #31
    2594:	18c4      	adds	r4, r0, r3
    2596:	405c      	eors	r4, r3
    2598:	0fc5      	lsrs	r5, r0, #31
    259a:	0020      	movs	r0, r4
    259c:	f000 f998 	bl	28d0 <__clzsi2>
    25a0:	239e      	movs	r3, #158	; 0x9e
    25a2:	1a1b      	subs	r3, r3, r0
    25a4:	2b96      	cmp	r3, #150	; 0x96
    25a6:	dc0d      	bgt.n	25c4 <__aeabi_i2f+0x38>
    25a8:	2296      	movs	r2, #150	; 0x96
    25aa:	1ad2      	subs	r2, r2, r3
    25ac:	4094      	lsls	r4, r2
    25ae:	002a      	movs	r2, r5
    25b0:	0264      	lsls	r4, r4, #9
    25b2:	0a64      	lsrs	r4, r4, #9
    25b4:	b2db      	uxtb	r3, r3
    25b6:	0264      	lsls	r4, r4, #9
    25b8:	05db      	lsls	r3, r3, #23
    25ba:	0a60      	lsrs	r0, r4, #9
    25bc:	07d2      	lsls	r2, r2, #31
    25be:	4318      	orrs	r0, r3
    25c0:	4310      	orrs	r0, r2
    25c2:	bd70      	pop	{r4, r5, r6, pc}
    25c4:	2b99      	cmp	r3, #153	; 0x99
    25c6:	dc19      	bgt.n	25fc <__aeabi_i2f+0x70>
    25c8:	2299      	movs	r2, #153	; 0x99
    25ca:	1ad2      	subs	r2, r2, r3
    25cc:	2a00      	cmp	r2, #0
    25ce:	dd29      	ble.n	2624 <__aeabi_i2f+0x98>
    25d0:	4094      	lsls	r4, r2
    25d2:	0022      	movs	r2, r4
    25d4:	4c14      	ldr	r4, [pc, #80]	; (2628 <__aeabi_i2f+0x9c>)
    25d6:	4014      	ands	r4, r2
    25d8:	0751      	lsls	r1, r2, #29
    25da:	d004      	beq.n	25e6 <__aeabi_i2f+0x5a>
    25dc:	210f      	movs	r1, #15
    25de:	400a      	ands	r2, r1
    25e0:	2a04      	cmp	r2, #4
    25e2:	d000      	beq.n	25e6 <__aeabi_i2f+0x5a>
    25e4:	3404      	adds	r4, #4
    25e6:	0162      	lsls	r2, r4, #5
    25e8:	d413      	bmi.n	2612 <__aeabi_i2f+0x86>
    25ea:	01a4      	lsls	r4, r4, #6
    25ec:	0a64      	lsrs	r4, r4, #9
    25ee:	b2db      	uxtb	r3, r3
    25f0:	002a      	movs	r2, r5
    25f2:	e7e0      	b.n	25b6 <__aeabi_i2f+0x2a>
    25f4:	2200      	movs	r2, #0
    25f6:	2300      	movs	r3, #0
    25f8:	2400      	movs	r4, #0
    25fa:	e7dc      	b.n	25b6 <__aeabi_i2f+0x2a>
    25fc:	2205      	movs	r2, #5
    25fe:	0021      	movs	r1, r4
    2600:	1a12      	subs	r2, r2, r0
    2602:	40d1      	lsrs	r1, r2
    2604:	22b9      	movs	r2, #185	; 0xb9
    2606:	1ad2      	subs	r2, r2, r3
    2608:	4094      	lsls	r4, r2
    260a:	1e62      	subs	r2, r4, #1
    260c:	4194      	sbcs	r4, r2
    260e:	430c      	orrs	r4, r1
    2610:	e7da      	b.n	25c8 <__aeabi_i2f+0x3c>
    2612:	4b05      	ldr	r3, [pc, #20]	; (2628 <__aeabi_i2f+0x9c>)
    2614:	002a      	movs	r2, r5
    2616:	401c      	ands	r4, r3
    2618:	239f      	movs	r3, #159	; 0x9f
    261a:	01a4      	lsls	r4, r4, #6
    261c:	1a1b      	subs	r3, r3, r0
    261e:	0a64      	lsrs	r4, r4, #9
    2620:	b2db      	uxtb	r3, r3
    2622:	e7c8      	b.n	25b6 <__aeabi_i2f+0x2a>
    2624:	0022      	movs	r2, r4
    2626:	e7d5      	b.n	25d4 <__aeabi_i2f+0x48>
    2628:	fbffffff 	.word	0xfbffffff

0000262c <__eqdf2>:
    262c:	b5f0      	push	{r4, r5, r6, r7, lr}
    262e:	464f      	mov	r7, r9
    2630:	4646      	mov	r6, r8
    2632:	46d6      	mov	lr, sl
    2634:	005c      	lsls	r4, r3, #1
    2636:	b5c0      	push	{r6, r7, lr}
    2638:	031f      	lsls	r7, r3, #12
    263a:	0fdb      	lsrs	r3, r3, #31
    263c:	469a      	mov	sl, r3
    263e:	4b17      	ldr	r3, [pc, #92]	; (269c <__eqdf2+0x70>)
    2640:	030e      	lsls	r6, r1, #12
    2642:	004d      	lsls	r5, r1, #1
    2644:	4684      	mov	ip, r0
    2646:	4680      	mov	r8, r0
    2648:	0b36      	lsrs	r6, r6, #12
    264a:	0d6d      	lsrs	r5, r5, #21
    264c:	0fc9      	lsrs	r1, r1, #31
    264e:	4691      	mov	r9, r2
    2650:	0b3f      	lsrs	r7, r7, #12
    2652:	0d64      	lsrs	r4, r4, #21
    2654:	2001      	movs	r0, #1
    2656:	429d      	cmp	r5, r3
    2658:	d008      	beq.n	266c <__eqdf2+0x40>
    265a:	429c      	cmp	r4, r3
    265c:	d001      	beq.n	2662 <__eqdf2+0x36>
    265e:	42a5      	cmp	r5, r4
    2660:	d00b      	beq.n	267a <__eqdf2+0x4e>
    2662:	bc1c      	pop	{r2, r3, r4}
    2664:	4690      	mov	r8, r2
    2666:	4699      	mov	r9, r3
    2668:	46a2      	mov	sl, r4
    266a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    266c:	4663      	mov	r3, ip
    266e:	4333      	orrs	r3, r6
    2670:	d1f7      	bne.n	2662 <__eqdf2+0x36>
    2672:	42ac      	cmp	r4, r5
    2674:	d1f5      	bne.n	2662 <__eqdf2+0x36>
    2676:	433a      	orrs	r2, r7
    2678:	d1f3      	bne.n	2662 <__eqdf2+0x36>
    267a:	2001      	movs	r0, #1
    267c:	42be      	cmp	r6, r7
    267e:	d1f0      	bne.n	2662 <__eqdf2+0x36>
    2680:	45c8      	cmp	r8, r9
    2682:	d1ee      	bne.n	2662 <__eqdf2+0x36>
    2684:	4551      	cmp	r1, sl
    2686:	d007      	beq.n	2698 <__eqdf2+0x6c>
    2688:	2d00      	cmp	r5, #0
    268a:	d1ea      	bne.n	2662 <__eqdf2+0x36>
    268c:	4663      	mov	r3, ip
    268e:	431e      	orrs	r6, r3
    2690:	0030      	movs	r0, r6
    2692:	1e46      	subs	r6, r0, #1
    2694:	41b0      	sbcs	r0, r6
    2696:	e7e4      	b.n	2662 <__eqdf2+0x36>
    2698:	2000      	movs	r0, #0
    269a:	e7e2      	b.n	2662 <__eqdf2+0x36>
    269c:	000007ff 	.word	0x000007ff

000026a0 <__gedf2>:
    26a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    26a2:	4645      	mov	r5, r8
    26a4:	46de      	mov	lr, fp
    26a6:	4657      	mov	r7, sl
    26a8:	464e      	mov	r6, r9
    26aa:	b5e0      	push	{r5, r6, r7, lr}
    26ac:	031f      	lsls	r7, r3, #12
    26ae:	0b3d      	lsrs	r5, r7, #12
    26b0:	4f2c      	ldr	r7, [pc, #176]	; (2764 <__gedf2+0xc4>)
    26b2:	030e      	lsls	r6, r1, #12
    26b4:	004c      	lsls	r4, r1, #1
    26b6:	46ab      	mov	fp, r5
    26b8:	005d      	lsls	r5, r3, #1
    26ba:	4684      	mov	ip, r0
    26bc:	0b36      	lsrs	r6, r6, #12
    26be:	0d64      	lsrs	r4, r4, #21
    26c0:	0fc9      	lsrs	r1, r1, #31
    26c2:	4690      	mov	r8, r2
    26c4:	0d6d      	lsrs	r5, r5, #21
    26c6:	0fdb      	lsrs	r3, r3, #31
    26c8:	42bc      	cmp	r4, r7
    26ca:	d02a      	beq.n	2722 <__gedf2+0x82>
    26cc:	4f25      	ldr	r7, [pc, #148]	; (2764 <__gedf2+0xc4>)
    26ce:	42bd      	cmp	r5, r7
    26d0:	d02d      	beq.n	272e <__gedf2+0x8e>
    26d2:	2c00      	cmp	r4, #0
    26d4:	d10f      	bne.n	26f6 <__gedf2+0x56>
    26d6:	4330      	orrs	r0, r6
    26d8:	0007      	movs	r7, r0
    26da:	4681      	mov	r9, r0
    26dc:	4278      	negs	r0, r7
    26de:	4178      	adcs	r0, r7
    26e0:	b2c0      	uxtb	r0, r0
    26e2:	2d00      	cmp	r5, #0
    26e4:	d117      	bne.n	2716 <__gedf2+0x76>
    26e6:	465f      	mov	r7, fp
    26e8:	433a      	orrs	r2, r7
    26ea:	d114      	bne.n	2716 <__gedf2+0x76>
    26ec:	464b      	mov	r3, r9
    26ee:	2000      	movs	r0, #0
    26f0:	2b00      	cmp	r3, #0
    26f2:	d00a      	beq.n	270a <__gedf2+0x6a>
    26f4:	e006      	b.n	2704 <__gedf2+0x64>
    26f6:	2d00      	cmp	r5, #0
    26f8:	d102      	bne.n	2700 <__gedf2+0x60>
    26fa:	4658      	mov	r0, fp
    26fc:	4302      	orrs	r2, r0
    26fe:	d001      	beq.n	2704 <__gedf2+0x64>
    2700:	4299      	cmp	r1, r3
    2702:	d018      	beq.n	2736 <__gedf2+0x96>
    2704:	4248      	negs	r0, r1
    2706:	2101      	movs	r1, #1
    2708:	4308      	orrs	r0, r1
    270a:	bc3c      	pop	{r2, r3, r4, r5}
    270c:	4690      	mov	r8, r2
    270e:	4699      	mov	r9, r3
    2710:	46a2      	mov	sl, r4
    2712:	46ab      	mov	fp, r5
    2714:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2716:	2800      	cmp	r0, #0
    2718:	d0f2      	beq.n	2700 <__gedf2+0x60>
    271a:	2001      	movs	r0, #1
    271c:	3b01      	subs	r3, #1
    271e:	4318      	orrs	r0, r3
    2720:	e7f3      	b.n	270a <__gedf2+0x6a>
    2722:	0037      	movs	r7, r6
    2724:	4307      	orrs	r7, r0
    2726:	d0d1      	beq.n	26cc <__gedf2+0x2c>
    2728:	2002      	movs	r0, #2
    272a:	4240      	negs	r0, r0
    272c:	e7ed      	b.n	270a <__gedf2+0x6a>
    272e:	465f      	mov	r7, fp
    2730:	4317      	orrs	r7, r2
    2732:	d0ce      	beq.n	26d2 <__gedf2+0x32>
    2734:	e7f8      	b.n	2728 <__gedf2+0x88>
    2736:	42ac      	cmp	r4, r5
    2738:	dce4      	bgt.n	2704 <__gedf2+0x64>
    273a:	da03      	bge.n	2744 <__gedf2+0xa4>
    273c:	1e48      	subs	r0, r1, #1
    273e:	2101      	movs	r1, #1
    2740:	4308      	orrs	r0, r1
    2742:	e7e2      	b.n	270a <__gedf2+0x6a>
    2744:	455e      	cmp	r6, fp
    2746:	d8dd      	bhi.n	2704 <__gedf2+0x64>
    2748:	d006      	beq.n	2758 <__gedf2+0xb8>
    274a:	2000      	movs	r0, #0
    274c:	455e      	cmp	r6, fp
    274e:	d2dc      	bcs.n	270a <__gedf2+0x6a>
    2750:	2301      	movs	r3, #1
    2752:	1e48      	subs	r0, r1, #1
    2754:	4318      	orrs	r0, r3
    2756:	e7d8      	b.n	270a <__gedf2+0x6a>
    2758:	45c4      	cmp	ip, r8
    275a:	d8d3      	bhi.n	2704 <__gedf2+0x64>
    275c:	2000      	movs	r0, #0
    275e:	45c4      	cmp	ip, r8
    2760:	d3f6      	bcc.n	2750 <__gedf2+0xb0>
    2762:	e7d2      	b.n	270a <__gedf2+0x6a>
    2764:	000007ff 	.word	0x000007ff

00002768 <__ledf2>:
    2768:	b5f0      	push	{r4, r5, r6, r7, lr}
    276a:	464e      	mov	r6, r9
    276c:	4645      	mov	r5, r8
    276e:	46de      	mov	lr, fp
    2770:	4657      	mov	r7, sl
    2772:	005c      	lsls	r4, r3, #1
    2774:	b5e0      	push	{r5, r6, r7, lr}
    2776:	031f      	lsls	r7, r3, #12
    2778:	0fdb      	lsrs	r3, r3, #31
    277a:	4699      	mov	r9, r3
    277c:	4b2a      	ldr	r3, [pc, #168]	; (2828 <__ledf2+0xc0>)
    277e:	030e      	lsls	r6, r1, #12
    2780:	004d      	lsls	r5, r1, #1
    2782:	0fc9      	lsrs	r1, r1, #31
    2784:	4684      	mov	ip, r0
    2786:	0b36      	lsrs	r6, r6, #12
    2788:	0d6d      	lsrs	r5, r5, #21
    278a:	468b      	mov	fp, r1
    278c:	4690      	mov	r8, r2
    278e:	0b3f      	lsrs	r7, r7, #12
    2790:	0d64      	lsrs	r4, r4, #21
    2792:	429d      	cmp	r5, r3
    2794:	d020      	beq.n	27d8 <__ledf2+0x70>
    2796:	4b24      	ldr	r3, [pc, #144]	; (2828 <__ledf2+0xc0>)
    2798:	429c      	cmp	r4, r3
    279a:	d022      	beq.n	27e2 <__ledf2+0x7a>
    279c:	2d00      	cmp	r5, #0
    279e:	d112      	bne.n	27c6 <__ledf2+0x5e>
    27a0:	4330      	orrs	r0, r6
    27a2:	4243      	negs	r3, r0
    27a4:	4143      	adcs	r3, r0
    27a6:	b2db      	uxtb	r3, r3
    27a8:	2c00      	cmp	r4, #0
    27aa:	d01f      	beq.n	27ec <__ledf2+0x84>
    27ac:	2b00      	cmp	r3, #0
    27ae:	d00c      	beq.n	27ca <__ledf2+0x62>
    27b0:	464b      	mov	r3, r9
    27b2:	2001      	movs	r0, #1
    27b4:	3b01      	subs	r3, #1
    27b6:	4303      	orrs	r3, r0
    27b8:	0018      	movs	r0, r3
    27ba:	bc3c      	pop	{r2, r3, r4, r5}
    27bc:	4690      	mov	r8, r2
    27be:	4699      	mov	r9, r3
    27c0:	46a2      	mov	sl, r4
    27c2:	46ab      	mov	fp, r5
    27c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    27c6:	2c00      	cmp	r4, #0
    27c8:	d016      	beq.n	27f8 <__ledf2+0x90>
    27ca:	45cb      	cmp	fp, r9
    27cc:	d017      	beq.n	27fe <__ledf2+0x96>
    27ce:	465b      	mov	r3, fp
    27d0:	4259      	negs	r1, r3
    27d2:	2301      	movs	r3, #1
    27d4:	430b      	orrs	r3, r1
    27d6:	e7ef      	b.n	27b8 <__ledf2+0x50>
    27d8:	0031      	movs	r1, r6
    27da:	2302      	movs	r3, #2
    27dc:	4301      	orrs	r1, r0
    27de:	d1eb      	bne.n	27b8 <__ledf2+0x50>
    27e0:	e7d9      	b.n	2796 <__ledf2+0x2e>
    27e2:	0039      	movs	r1, r7
    27e4:	2302      	movs	r3, #2
    27e6:	4311      	orrs	r1, r2
    27e8:	d1e6      	bne.n	27b8 <__ledf2+0x50>
    27ea:	e7d7      	b.n	279c <__ledf2+0x34>
    27ec:	433a      	orrs	r2, r7
    27ee:	d1dd      	bne.n	27ac <__ledf2+0x44>
    27f0:	2300      	movs	r3, #0
    27f2:	2800      	cmp	r0, #0
    27f4:	d0e0      	beq.n	27b8 <__ledf2+0x50>
    27f6:	e7ea      	b.n	27ce <__ledf2+0x66>
    27f8:	433a      	orrs	r2, r7
    27fa:	d1e6      	bne.n	27ca <__ledf2+0x62>
    27fc:	e7e7      	b.n	27ce <__ledf2+0x66>
    27fe:	42a5      	cmp	r5, r4
    2800:	dce5      	bgt.n	27ce <__ledf2+0x66>
    2802:	db05      	blt.n	2810 <__ledf2+0xa8>
    2804:	42be      	cmp	r6, r7
    2806:	d8e2      	bhi.n	27ce <__ledf2+0x66>
    2808:	d007      	beq.n	281a <__ledf2+0xb2>
    280a:	2300      	movs	r3, #0
    280c:	42be      	cmp	r6, r7
    280e:	d2d3      	bcs.n	27b8 <__ledf2+0x50>
    2810:	4659      	mov	r1, fp
    2812:	2301      	movs	r3, #1
    2814:	3901      	subs	r1, #1
    2816:	430b      	orrs	r3, r1
    2818:	e7ce      	b.n	27b8 <__ledf2+0x50>
    281a:	45c4      	cmp	ip, r8
    281c:	d8d7      	bhi.n	27ce <__ledf2+0x66>
    281e:	2300      	movs	r3, #0
    2820:	45c4      	cmp	ip, r8
    2822:	d3f5      	bcc.n	2810 <__ledf2+0xa8>
    2824:	e7c8      	b.n	27b8 <__ledf2+0x50>
    2826:	46c0      	nop			; (mov r8, r8)
    2828:	000007ff 	.word	0x000007ff

0000282c <__aeabi_f2d>:
    282c:	0041      	lsls	r1, r0, #1
    282e:	0e09      	lsrs	r1, r1, #24
    2830:	1c4b      	adds	r3, r1, #1
    2832:	b570      	push	{r4, r5, r6, lr}
    2834:	b2db      	uxtb	r3, r3
    2836:	0246      	lsls	r6, r0, #9
    2838:	0a75      	lsrs	r5, r6, #9
    283a:	0fc4      	lsrs	r4, r0, #31
    283c:	2b01      	cmp	r3, #1
    283e:	dd14      	ble.n	286a <__aeabi_f2d+0x3e>
    2840:	23e0      	movs	r3, #224	; 0xe0
    2842:	009b      	lsls	r3, r3, #2
    2844:	076d      	lsls	r5, r5, #29
    2846:	0b36      	lsrs	r6, r6, #12
    2848:	18cb      	adds	r3, r1, r3
    284a:	2100      	movs	r1, #0
    284c:	0d0a      	lsrs	r2, r1, #20
    284e:	0028      	movs	r0, r5
    2850:	0512      	lsls	r2, r2, #20
    2852:	4d1c      	ldr	r5, [pc, #112]	; (28c4 <__aeabi_f2d+0x98>)
    2854:	4332      	orrs	r2, r6
    2856:	055b      	lsls	r3, r3, #21
    2858:	402a      	ands	r2, r5
    285a:	085b      	lsrs	r3, r3, #1
    285c:	4313      	orrs	r3, r2
    285e:	005b      	lsls	r3, r3, #1
    2860:	07e4      	lsls	r4, r4, #31
    2862:	085b      	lsrs	r3, r3, #1
    2864:	4323      	orrs	r3, r4
    2866:	0019      	movs	r1, r3
    2868:	bd70      	pop	{r4, r5, r6, pc}
    286a:	2900      	cmp	r1, #0
    286c:	d114      	bne.n	2898 <__aeabi_f2d+0x6c>
    286e:	2d00      	cmp	r5, #0
    2870:	d01e      	beq.n	28b0 <__aeabi_f2d+0x84>
    2872:	0028      	movs	r0, r5
    2874:	f000 f82c 	bl	28d0 <__clzsi2>
    2878:	280a      	cmp	r0, #10
    287a:	dc1c      	bgt.n	28b6 <__aeabi_f2d+0x8a>
    287c:	230b      	movs	r3, #11
    287e:	002a      	movs	r2, r5
    2880:	1a1b      	subs	r3, r3, r0
    2882:	40da      	lsrs	r2, r3
    2884:	0003      	movs	r3, r0
    2886:	3315      	adds	r3, #21
    2888:	409d      	lsls	r5, r3
    288a:	4b0f      	ldr	r3, [pc, #60]	; (28c8 <__aeabi_f2d+0x9c>)
    288c:	0312      	lsls	r2, r2, #12
    288e:	1a1b      	subs	r3, r3, r0
    2890:	055b      	lsls	r3, r3, #21
    2892:	0b16      	lsrs	r6, r2, #12
    2894:	0d5b      	lsrs	r3, r3, #21
    2896:	e7d8      	b.n	284a <__aeabi_f2d+0x1e>
    2898:	2d00      	cmp	r5, #0
    289a:	d006      	beq.n	28aa <__aeabi_f2d+0x7e>
    289c:	0b32      	lsrs	r2, r6, #12
    289e:	2680      	movs	r6, #128	; 0x80
    28a0:	0336      	lsls	r6, r6, #12
    28a2:	076d      	lsls	r5, r5, #29
    28a4:	4316      	orrs	r6, r2
    28a6:	4b09      	ldr	r3, [pc, #36]	; (28cc <__aeabi_f2d+0xa0>)
    28a8:	e7cf      	b.n	284a <__aeabi_f2d+0x1e>
    28aa:	4b08      	ldr	r3, [pc, #32]	; (28cc <__aeabi_f2d+0xa0>)
    28ac:	2600      	movs	r6, #0
    28ae:	e7cc      	b.n	284a <__aeabi_f2d+0x1e>
    28b0:	2300      	movs	r3, #0
    28b2:	2600      	movs	r6, #0
    28b4:	e7c9      	b.n	284a <__aeabi_f2d+0x1e>
    28b6:	0003      	movs	r3, r0
    28b8:	002a      	movs	r2, r5
    28ba:	3b0b      	subs	r3, #11
    28bc:	409a      	lsls	r2, r3
    28be:	2500      	movs	r5, #0
    28c0:	e7e3      	b.n	288a <__aeabi_f2d+0x5e>
    28c2:	46c0      	nop			; (mov r8, r8)
    28c4:	800fffff 	.word	0x800fffff
    28c8:	00000389 	.word	0x00000389
    28cc:	000007ff 	.word	0x000007ff

000028d0 <__clzsi2>:
    28d0:	211c      	movs	r1, #28
    28d2:	2301      	movs	r3, #1
    28d4:	041b      	lsls	r3, r3, #16
    28d6:	4298      	cmp	r0, r3
    28d8:	d301      	bcc.n	28de <__clzsi2+0xe>
    28da:	0c00      	lsrs	r0, r0, #16
    28dc:	3910      	subs	r1, #16
    28de:	0a1b      	lsrs	r3, r3, #8
    28e0:	4298      	cmp	r0, r3
    28e2:	d301      	bcc.n	28e8 <__clzsi2+0x18>
    28e4:	0a00      	lsrs	r0, r0, #8
    28e6:	3908      	subs	r1, #8
    28e8:	091b      	lsrs	r3, r3, #4
    28ea:	4298      	cmp	r0, r3
    28ec:	d301      	bcc.n	28f2 <__clzsi2+0x22>
    28ee:	0900      	lsrs	r0, r0, #4
    28f0:	3904      	subs	r1, #4
    28f2:	a202      	add	r2, pc, #8	; (adr r2, 28fc <__clzsi2+0x2c>)
    28f4:	5c10      	ldrb	r0, [r2, r0]
    28f6:	1840      	adds	r0, r0, r1
    28f8:	4770      	bx	lr
    28fa:	46c0      	nop			; (mov r8, r8)
    28fc:	02020304 	.word	0x02020304
    2900:	01010101 	.word	0x01010101
	...

0000290c <__libc_init_array>:
    290c:	b570      	push	{r4, r5, r6, lr}
    290e:	2600      	movs	r6, #0
    2910:	4d0c      	ldr	r5, [pc, #48]	; (2944 <__libc_init_array+0x38>)
    2912:	4c0d      	ldr	r4, [pc, #52]	; (2948 <__libc_init_array+0x3c>)
    2914:	1b64      	subs	r4, r4, r5
    2916:	10a4      	asrs	r4, r4, #2
    2918:	42a6      	cmp	r6, r4
    291a:	d109      	bne.n	2930 <__libc_init_array+0x24>
    291c:	2600      	movs	r6, #0
    291e:	f001 f90f 	bl	3b40 <_init>
    2922:	4d0a      	ldr	r5, [pc, #40]	; (294c <__libc_init_array+0x40>)
    2924:	4c0a      	ldr	r4, [pc, #40]	; (2950 <__libc_init_array+0x44>)
    2926:	1b64      	subs	r4, r4, r5
    2928:	10a4      	asrs	r4, r4, #2
    292a:	42a6      	cmp	r6, r4
    292c:	d105      	bne.n	293a <__libc_init_array+0x2e>
    292e:	bd70      	pop	{r4, r5, r6, pc}
    2930:	00b3      	lsls	r3, r6, #2
    2932:	58eb      	ldr	r3, [r5, r3]
    2934:	4798      	blx	r3
    2936:	3601      	adds	r6, #1
    2938:	e7ee      	b.n	2918 <__libc_init_array+0xc>
    293a:	00b3      	lsls	r3, r6, #2
    293c:	58eb      	ldr	r3, [r5, r3]
    293e:	4798      	blx	r3
    2940:	3601      	adds	r6, #1
    2942:	e7f2      	b.n	292a <__libc_init_array+0x1e>
    2944:	00003b4c 	.word	0x00003b4c
    2948:	00003b4c 	.word	0x00003b4c
    294c:	00003b4c 	.word	0x00003b4c
    2950:	00003b50 	.word	0x00003b50

00002954 <memset>:
    2954:	0003      	movs	r3, r0
    2956:	1882      	adds	r2, r0, r2
    2958:	4293      	cmp	r3, r2
    295a:	d100      	bne.n	295e <memset+0xa>
    295c:	4770      	bx	lr
    295e:	7019      	strb	r1, [r3, #0]
    2960:	3301      	adds	r3, #1
    2962:	e7f9      	b.n	2958 <memset+0x4>

00002964 <iprintf>:
    2964:	b40f      	push	{r0, r1, r2, r3}
    2966:	4b0b      	ldr	r3, [pc, #44]	; (2994 <iprintf+0x30>)
    2968:	b513      	push	{r0, r1, r4, lr}
    296a:	681c      	ldr	r4, [r3, #0]
    296c:	2c00      	cmp	r4, #0
    296e:	d005      	beq.n	297c <iprintf+0x18>
    2970:	69a3      	ldr	r3, [r4, #24]
    2972:	2b00      	cmp	r3, #0
    2974:	d102      	bne.n	297c <iprintf+0x18>
    2976:	0020      	movs	r0, r4
    2978:	f000 f9bc 	bl	2cf4 <__sinit>
    297c:	ab05      	add	r3, sp, #20
    297e:	9a04      	ldr	r2, [sp, #16]
    2980:	68a1      	ldr	r1, [r4, #8]
    2982:	0020      	movs	r0, r4
    2984:	9301      	str	r3, [sp, #4]
    2986:	f000 fb8b 	bl	30a0 <_vfiprintf_r>
    298a:	bc16      	pop	{r1, r2, r4}
    298c:	bc08      	pop	{r3}
    298e:	b004      	add	sp, #16
    2990:	4718      	bx	r3
    2992:	46c0      	nop			; (mov r8, r8)
    2994:	20000020 	.word	0x20000020

00002998 <setbuf>:
    2998:	424a      	negs	r2, r1
    299a:	414a      	adcs	r2, r1
    299c:	2380      	movs	r3, #128	; 0x80
    299e:	b510      	push	{r4, lr}
    29a0:	0052      	lsls	r2, r2, #1
    29a2:	00db      	lsls	r3, r3, #3
    29a4:	f000 f802 	bl	29ac <setvbuf>
    29a8:	bd10      	pop	{r4, pc}
	...

000029ac <setvbuf>:
    29ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    29ae:	001d      	movs	r5, r3
    29b0:	4b4f      	ldr	r3, [pc, #316]	; (2af0 <setvbuf+0x144>)
    29b2:	b085      	sub	sp, #20
    29b4:	681e      	ldr	r6, [r3, #0]
    29b6:	0004      	movs	r4, r0
    29b8:	000f      	movs	r7, r1
    29ba:	9200      	str	r2, [sp, #0]
    29bc:	2e00      	cmp	r6, #0
    29be:	d005      	beq.n	29cc <setvbuf+0x20>
    29c0:	69b3      	ldr	r3, [r6, #24]
    29c2:	2b00      	cmp	r3, #0
    29c4:	d102      	bne.n	29cc <setvbuf+0x20>
    29c6:	0030      	movs	r0, r6
    29c8:	f000 f994 	bl	2cf4 <__sinit>
    29cc:	4b49      	ldr	r3, [pc, #292]	; (2af4 <setvbuf+0x148>)
    29ce:	429c      	cmp	r4, r3
    29d0:	d150      	bne.n	2a74 <setvbuf+0xc8>
    29d2:	6874      	ldr	r4, [r6, #4]
    29d4:	9b00      	ldr	r3, [sp, #0]
    29d6:	2b02      	cmp	r3, #2
    29d8:	d005      	beq.n	29e6 <setvbuf+0x3a>
    29da:	2b01      	cmp	r3, #1
    29dc:	d900      	bls.n	29e0 <setvbuf+0x34>
    29de:	e084      	b.n	2aea <setvbuf+0x13e>
    29e0:	2d00      	cmp	r5, #0
    29e2:	da00      	bge.n	29e6 <setvbuf+0x3a>
    29e4:	e081      	b.n	2aea <setvbuf+0x13e>
    29e6:	0021      	movs	r1, r4
    29e8:	0030      	movs	r0, r6
    29ea:	f000 f915 	bl	2c18 <_fflush_r>
    29ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
    29f0:	2900      	cmp	r1, #0
    29f2:	d008      	beq.n	2a06 <setvbuf+0x5a>
    29f4:	0023      	movs	r3, r4
    29f6:	3344      	adds	r3, #68	; 0x44
    29f8:	4299      	cmp	r1, r3
    29fa:	d002      	beq.n	2a02 <setvbuf+0x56>
    29fc:	0030      	movs	r0, r6
    29fe:	f000 fa7f 	bl	2f00 <_free_r>
    2a02:	2300      	movs	r3, #0
    2a04:	6363      	str	r3, [r4, #52]	; 0x34
    2a06:	2300      	movs	r3, #0
    2a08:	61a3      	str	r3, [r4, #24]
    2a0a:	6063      	str	r3, [r4, #4]
    2a0c:	89a3      	ldrh	r3, [r4, #12]
    2a0e:	061b      	lsls	r3, r3, #24
    2a10:	d503      	bpl.n	2a1a <setvbuf+0x6e>
    2a12:	6921      	ldr	r1, [r4, #16]
    2a14:	0030      	movs	r0, r6
    2a16:	f000 fa73 	bl	2f00 <_free_r>
    2a1a:	89a3      	ldrh	r3, [r4, #12]
    2a1c:	4a36      	ldr	r2, [pc, #216]	; (2af8 <setvbuf+0x14c>)
    2a1e:	4013      	ands	r3, r2
    2a20:	81a3      	strh	r3, [r4, #12]
    2a22:	9b00      	ldr	r3, [sp, #0]
    2a24:	2b02      	cmp	r3, #2
    2a26:	d05a      	beq.n	2ade <setvbuf+0x132>
    2a28:	ab03      	add	r3, sp, #12
    2a2a:	aa02      	add	r2, sp, #8
    2a2c:	0021      	movs	r1, r4
    2a2e:	0030      	movs	r0, r6
    2a30:	f000 f9f6 	bl	2e20 <__swhatbuf_r>
    2a34:	89a3      	ldrh	r3, [r4, #12]
    2a36:	4318      	orrs	r0, r3
    2a38:	81a0      	strh	r0, [r4, #12]
    2a3a:	2d00      	cmp	r5, #0
    2a3c:	d124      	bne.n	2a88 <setvbuf+0xdc>
    2a3e:	9d02      	ldr	r5, [sp, #8]
    2a40:	0028      	movs	r0, r5
    2a42:	f000 fa53 	bl	2eec <malloc>
    2a46:	9501      	str	r5, [sp, #4]
    2a48:	1e07      	subs	r7, r0, #0
    2a4a:	d142      	bne.n	2ad2 <setvbuf+0x126>
    2a4c:	9b02      	ldr	r3, [sp, #8]
    2a4e:	9301      	str	r3, [sp, #4]
    2a50:	42ab      	cmp	r3, r5
    2a52:	d139      	bne.n	2ac8 <setvbuf+0x11c>
    2a54:	2001      	movs	r0, #1
    2a56:	4240      	negs	r0, r0
    2a58:	2302      	movs	r3, #2
    2a5a:	89a2      	ldrh	r2, [r4, #12]
    2a5c:	4313      	orrs	r3, r2
    2a5e:	81a3      	strh	r3, [r4, #12]
    2a60:	2300      	movs	r3, #0
    2a62:	60a3      	str	r3, [r4, #8]
    2a64:	0023      	movs	r3, r4
    2a66:	3347      	adds	r3, #71	; 0x47
    2a68:	6023      	str	r3, [r4, #0]
    2a6a:	6123      	str	r3, [r4, #16]
    2a6c:	2301      	movs	r3, #1
    2a6e:	6163      	str	r3, [r4, #20]
    2a70:	b005      	add	sp, #20
    2a72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a74:	4b21      	ldr	r3, [pc, #132]	; (2afc <setvbuf+0x150>)
    2a76:	429c      	cmp	r4, r3
    2a78:	d101      	bne.n	2a7e <setvbuf+0xd2>
    2a7a:	68b4      	ldr	r4, [r6, #8]
    2a7c:	e7aa      	b.n	29d4 <setvbuf+0x28>
    2a7e:	4b20      	ldr	r3, [pc, #128]	; (2b00 <setvbuf+0x154>)
    2a80:	429c      	cmp	r4, r3
    2a82:	d1a7      	bne.n	29d4 <setvbuf+0x28>
    2a84:	68f4      	ldr	r4, [r6, #12]
    2a86:	e7a5      	b.n	29d4 <setvbuf+0x28>
    2a88:	2f00      	cmp	r7, #0
    2a8a:	d0d9      	beq.n	2a40 <setvbuf+0x94>
    2a8c:	69b3      	ldr	r3, [r6, #24]
    2a8e:	2b00      	cmp	r3, #0
    2a90:	d102      	bne.n	2a98 <setvbuf+0xec>
    2a92:	0030      	movs	r0, r6
    2a94:	f000 f92e 	bl	2cf4 <__sinit>
    2a98:	9b00      	ldr	r3, [sp, #0]
    2a9a:	2b01      	cmp	r3, #1
    2a9c:	d103      	bne.n	2aa6 <setvbuf+0xfa>
    2a9e:	89a3      	ldrh	r3, [r4, #12]
    2aa0:	9a00      	ldr	r2, [sp, #0]
    2aa2:	431a      	orrs	r2, r3
    2aa4:	81a2      	strh	r2, [r4, #12]
    2aa6:	2008      	movs	r0, #8
    2aa8:	89a3      	ldrh	r3, [r4, #12]
    2aaa:	6027      	str	r7, [r4, #0]
    2aac:	6127      	str	r7, [r4, #16]
    2aae:	6165      	str	r5, [r4, #20]
    2ab0:	4018      	ands	r0, r3
    2ab2:	d018      	beq.n	2ae6 <setvbuf+0x13a>
    2ab4:	2001      	movs	r0, #1
    2ab6:	4018      	ands	r0, r3
    2ab8:	2300      	movs	r3, #0
    2aba:	4298      	cmp	r0, r3
    2abc:	d011      	beq.n	2ae2 <setvbuf+0x136>
    2abe:	426d      	negs	r5, r5
    2ac0:	60a3      	str	r3, [r4, #8]
    2ac2:	61a5      	str	r5, [r4, #24]
    2ac4:	0018      	movs	r0, r3
    2ac6:	e7d3      	b.n	2a70 <setvbuf+0xc4>
    2ac8:	9801      	ldr	r0, [sp, #4]
    2aca:	f000 fa0f 	bl	2eec <malloc>
    2ace:	1e07      	subs	r7, r0, #0
    2ad0:	d0c0      	beq.n	2a54 <setvbuf+0xa8>
    2ad2:	2380      	movs	r3, #128	; 0x80
    2ad4:	89a2      	ldrh	r2, [r4, #12]
    2ad6:	9d01      	ldr	r5, [sp, #4]
    2ad8:	4313      	orrs	r3, r2
    2ada:	81a3      	strh	r3, [r4, #12]
    2adc:	e7d6      	b.n	2a8c <setvbuf+0xe0>
    2ade:	2000      	movs	r0, #0
    2ae0:	e7ba      	b.n	2a58 <setvbuf+0xac>
    2ae2:	60a5      	str	r5, [r4, #8]
    2ae4:	e7c4      	b.n	2a70 <setvbuf+0xc4>
    2ae6:	60a0      	str	r0, [r4, #8]
    2ae8:	e7c2      	b.n	2a70 <setvbuf+0xc4>
    2aea:	2001      	movs	r0, #1
    2aec:	4240      	negs	r0, r0
    2aee:	e7bf      	b.n	2a70 <setvbuf+0xc4>
    2af0:	20000020 	.word	0x20000020
    2af4:	00003acc 	.word	0x00003acc
    2af8:	fffff35c 	.word	0xfffff35c
    2afc:	00003aec 	.word	0x00003aec
    2b00:	00003aac 	.word	0x00003aac

00002b04 <__sflush_r>:
    2b04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2b06:	898a      	ldrh	r2, [r1, #12]
    2b08:	0005      	movs	r5, r0
    2b0a:	000c      	movs	r4, r1
    2b0c:	0713      	lsls	r3, r2, #28
    2b0e:	d460      	bmi.n	2bd2 <__sflush_r+0xce>
    2b10:	684b      	ldr	r3, [r1, #4]
    2b12:	2b00      	cmp	r3, #0
    2b14:	dc04      	bgt.n	2b20 <__sflush_r+0x1c>
    2b16:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    2b18:	2b00      	cmp	r3, #0
    2b1a:	dc01      	bgt.n	2b20 <__sflush_r+0x1c>
    2b1c:	2000      	movs	r0, #0
    2b1e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2b20:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    2b22:	2f00      	cmp	r7, #0
    2b24:	d0fa      	beq.n	2b1c <__sflush_r+0x18>
    2b26:	2300      	movs	r3, #0
    2b28:	682e      	ldr	r6, [r5, #0]
    2b2a:	602b      	str	r3, [r5, #0]
    2b2c:	2380      	movs	r3, #128	; 0x80
    2b2e:	015b      	lsls	r3, r3, #5
    2b30:	401a      	ands	r2, r3
    2b32:	d034      	beq.n	2b9e <__sflush_r+0x9a>
    2b34:	6d60      	ldr	r0, [r4, #84]	; 0x54
    2b36:	89a3      	ldrh	r3, [r4, #12]
    2b38:	075b      	lsls	r3, r3, #29
    2b3a:	d506      	bpl.n	2b4a <__sflush_r+0x46>
    2b3c:	6863      	ldr	r3, [r4, #4]
    2b3e:	1ac0      	subs	r0, r0, r3
    2b40:	6b63      	ldr	r3, [r4, #52]	; 0x34
    2b42:	2b00      	cmp	r3, #0
    2b44:	d001      	beq.n	2b4a <__sflush_r+0x46>
    2b46:	6c23      	ldr	r3, [r4, #64]	; 0x40
    2b48:	1ac0      	subs	r0, r0, r3
    2b4a:	0002      	movs	r2, r0
    2b4c:	6a21      	ldr	r1, [r4, #32]
    2b4e:	2300      	movs	r3, #0
    2b50:	0028      	movs	r0, r5
    2b52:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    2b54:	47b8      	blx	r7
    2b56:	89a1      	ldrh	r1, [r4, #12]
    2b58:	1c43      	adds	r3, r0, #1
    2b5a:	d106      	bne.n	2b6a <__sflush_r+0x66>
    2b5c:	682b      	ldr	r3, [r5, #0]
    2b5e:	2b1d      	cmp	r3, #29
    2b60:	d831      	bhi.n	2bc6 <__sflush_r+0xc2>
    2b62:	4a2c      	ldr	r2, [pc, #176]	; (2c14 <__sflush_r+0x110>)
    2b64:	40da      	lsrs	r2, r3
    2b66:	07d3      	lsls	r3, r2, #31
    2b68:	d52d      	bpl.n	2bc6 <__sflush_r+0xc2>
    2b6a:	2300      	movs	r3, #0
    2b6c:	6063      	str	r3, [r4, #4]
    2b6e:	6923      	ldr	r3, [r4, #16]
    2b70:	6023      	str	r3, [r4, #0]
    2b72:	04cb      	lsls	r3, r1, #19
    2b74:	d505      	bpl.n	2b82 <__sflush_r+0x7e>
    2b76:	1c43      	adds	r3, r0, #1
    2b78:	d102      	bne.n	2b80 <__sflush_r+0x7c>
    2b7a:	682b      	ldr	r3, [r5, #0]
    2b7c:	2b00      	cmp	r3, #0
    2b7e:	d100      	bne.n	2b82 <__sflush_r+0x7e>
    2b80:	6560      	str	r0, [r4, #84]	; 0x54
    2b82:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2b84:	602e      	str	r6, [r5, #0]
    2b86:	2900      	cmp	r1, #0
    2b88:	d0c8      	beq.n	2b1c <__sflush_r+0x18>
    2b8a:	0023      	movs	r3, r4
    2b8c:	3344      	adds	r3, #68	; 0x44
    2b8e:	4299      	cmp	r1, r3
    2b90:	d002      	beq.n	2b98 <__sflush_r+0x94>
    2b92:	0028      	movs	r0, r5
    2b94:	f000 f9b4 	bl	2f00 <_free_r>
    2b98:	2000      	movs	r0, #0
    2b9a:	6360      	str	r0, [r4, #52]	; 0x34
    2b9c:	e7bf      	b.n	2b1e <__sflush_r+0x1a>
    2b9e:	2301      	movs	r3, #1
    2ba0:	6a21      	ldr	r1, [r4, #32]
    2ba2:	0028      	movs	r0, r5
    2ba4:	47b8      	blx	r7
    2ba6:	1c43      	adds	r3, r0, #1
    2ba8:	d1c5      	bne.n	2b36 <__sflush_r+0x32>
    2baa:	682b      	ldr	r3, [r5, #0]
    2bac:	2b00      	cmp	r3, #0
    2bae:	d0c2      	beq.n	2b36 <__sflush_r+0x32>
    2bb0:	2b1d      	cmp	r3, #29
    2bb2:	d001      	beq.n	2bb8 <__sflush_r+0xb4>
    2bb4:	2b16      	cmp	r3, #22
    2bb6:	d101      	bne.n	2bbc <__sflush_r+0xb8>
    2bb8:	602e      	str	r6, [r5, #0]
    2bba:	e7af      	b.n	2b1c <__sflush_r+0x18>
    2bbc:	2340      	movs	r3, #64	; 0x40
    2bbe:	89a2      	ldrh	r2, [r4, #12]
    2bc0:	4313      	orrs	r3, r2
    2bc2:	81a3      	strh	r3, [r4, #12]
    2bc4:	e7ab      	b.n	2b1e <__sflush_r+0x1a>
    2bc6:	2340      	movs	r3, #64	; 0x40
    2bc8:	430b      	orrs	r3, r1
    2bca:	2001      	movs	r0, #1
    2bcc:	81a3      	strh	r3, [r4, #12]
    2bce:	4240      	negs	r0, r0
    2bd0:	e7a5      	b.n	2b1e <__sflush_r+0x1a>
    2bd2:	690f      	ldr	r7, [r1, #16]
    2bd4:	2f00      	cmp	r7, #0
    2bd6:	d0a1      	beq.n	2b1c <__sflush_r+0x18>
    2bd8:	680b      	ldr	r3, [r1, #0]
    2bda:	600f      	str	r7, [r1, #0]
    2bdc:	1bdb      	subs	r3, r3, r7
    2bde:	9301      	str	r3, [sp, #4]
    2be0:	2300      	movs	r3, #0
    2be2:	0792      	lsls	r2, r2, #30
    2be4:	d100      	bne.n	2be8 <__sflush_r+0xe4>
    2be6:	694b      	ldr	r3, [r1, #20]
    2be8:	60a3      	str	r3, [r4, #8]
    2bea:	9b01      	ldr	r3, [sp, #4]
    2bec:	2b00      	cmp	r3, #0
    2bee:	dc00      	bgt.n	2bf2 <__sflush_r+0xee>
    2bf0:	e794      	b.n	2b1c <__sflush_r+0x18>
    2bf2:	9b01      	ldr	r3, [sp, #4]
    2bf4:	003a      	movs	r2, r7
    2bf6:	6a21      	ldr	r1, [r4, #32]
    2bf8:	0028      	movs	r0, r5
    2bfa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    2bfc:	47b0      	blx	r6
    2bfe:	2800      	cmp	r0, #0
    2c00:	dc03      	bgt.n	2c0a <__sflush_r+0x106>
    2c02:	2340      	movs	r3, #64	; 0x40
    2c04:	89a2      	ldrh	r2, [r4, #12]
    2c06:	4313      	orrs	r3, r2
    2c08:	e7df      	b.n	2bca <__sflush_r+0xc6>
    2c0a:	9b01      	ldr	r3, [sp, #4]
    2c0c:	183f      	adds	r7, r7, r0
    2c0e:	1a1b      	subs	r3, r3, r0
    2c10:	9301      	str	r3, [sp, #4]
    2c12:	e7ea      	b.n	2bea <__sflush_r+0xe6>
    2c14:	20400001 	.word	0x20400001

00002c18 <_fflush_r>:
    2c18:	690b      	ldr	r3, [r1, #16]
    2c1a:	b570      	push	{r4, r5, r6, lr}
    2c1c:	0005      	movs	r5, r0
    2c1e:	000c      	movs	r4, r1
    2c20:	2b00      	cmp	r3, #0
    2c22:	d101      	bne.n	2c28 <_fflush_r+0x10>
    2c24:	2000      	movs	r0, #0
    2c26:	bd70      	pop	{r4, r5, r6, pc}
    2c28:	2800      	cmp	r0, #0
    2c2a:	d004      	beq.n	2c36 <_fflush_r+0x1e>
    2c2c:	6983      	ldr	r3, [r0, #24]
    2c2e:	2b00      	cmp	r3, #0
    2c30:	d101      	bne.n	2c36 <_fflush_r+0x1e>
    2c32:	f000 f85f 	bl	2cf4 <__sinit>
    2c36:	4b0b      	ldr	r3, [pc, #44]	; (2c64 <_fflush_r+0x4c>)
    2c38:	429c      	cmp	r4, r3
    2c3a:	d109      	bne.n	2c50 <_fflush_r+0x38>
    2c3c:	686c      	ldr	r4, [r5, #4]
    2c3e:	220c      	movs	r2, #12
    2c40:	5ea3      	ldrsh	r3, [r4, r2]
    2c42:	2b00      	cmp	r3, #0
    2c44:	d0ee      	beq.n	2c24 <_fflush_r+0xc>
    2c46:	0021      	movs	r1, r4
    2c48:	0028      	movs	r0, r5
    2c4a:	f7ff ff5b 	bl	2b04 <__sflush_r>
    2c4e:	e7ea      	b.n	2c26 <_fflush_r+0xe>
    2c50:	4b05      	ldr	r3, [pc, #20]	; (2c68 <_fflush_r+0x50>)
    2c52:	429c      	cmp	r4, r3
    2c54:	d101      	bne.n	2c5a <_fflush_r+0x42>
    2c56:	68ac      	ldr	r4, [r5, #8]
    2c58:	e7f1      	b.n	2c3e <_fflush_r+0x26>
    2c5a:	4b04      	ldr	r3, [pc, #16]	; (2c6c <_fflush_r+0x54>)
    2c5c:	429c      	cmp	r4, r3
    2c5e:	d1ee      	bne.n	2c3e <_fflush_r+0x26>
    2c60:	68ec      	ldr	r4, [r5, #12]
    2c62:	e7ec      	b.n	2c3e <_fflush_r+0x26>
    2c64:	00003acc 	.word	0x00003acc
    2c68:	00003aec 	.word	0x00003aec
    2c6c:	00003aac 	.word	0x00003aac

00002c70 <_cleanup_r>:
    2c70:	b510      	push	{r4, lr}
    2c72:	4902      	ldr	r1, [pc, #8]	; (2c7c <_cleanup_r+0xc>)
    2c74:	f000 f8b2 	bl	2ddc <_fwalk_reent>
    2c78:	bd10      	pop	{r4, pc}
    2c7a:	46c0      	nop			; (mov r8, r8)
    2c7c:	00002c19 	.word	0x00002c19

00002c80 <std.isra.0>:
    2c80:	2300      	movs	r3, #0
    2c82:	b510      	push	{r4, lr}
    2c84:	0004      	movs	r4, r0
    2c86:	6003      	str	r3, [r0, #0]
    2c88:	6043      	str	r3, [r0, #4]
    2c8a:	6083      	str	r3, [r0, #8]
    2c8c:	8181      	strh	r1, [r0, #12]
    2c8e:	6643      	str	r3, [r0, #100]	; 0x64
    2c90:	81c2      	strh	r2, [r0, #14]
    2c92:	6103      	str	r3, [r0, #16]
    2c94:	6143      	str	r3, [r0, #20]
    2c96:	6183      	str	r3, [r0, #24]
    2c98:	0019      	movs	r1, r3
    2c9a:	2208      	movs	r2, #8
    2c9c:	305c      	adds	r0, #92	; 0x5c
    2c9e:	f7ff fe59 	bl	2954 <memset>
    2ca2:	4b05      	ldr	r3, [pc, #20]	; (2cb8 <std.isra.0+0x38>)
    2ca4:	6224      	str	r4, [r4, #32]
    2ca6:	6263      	str	r3, [r4, #36]	; 0x24
    2ca8:	4b04      	ldr	r3, [pc, #16]	; (2cbc <std.isra.0+0x3c>)
    2caa:	62a3      	str	r3, [r4, #40]	; 0x28
    2cac:	4b04      	ldr	r3, [pc, #16]	; (2cc0 <std.isra.0+0x40>)
    2cae:	62e3      	str	r3, [r4, #44]	; 0x2c
    2cb0:	4b04      	ldr	r3, [pc, #16]	; (2cc4 <std.isra.0+0x44>)
    2cb2:	6323      	str	r3, [r4, #48]	; 0x30
    2cb4:	bd10      	pop	{r4, pc}
    2cb6:	46c0      	nop			; (mov r8, r8)
    2cb8:	0000360d 	.word	0x0000360d
    2cbc:	00003635 	.word	0x00003635
    2cc0:	0000366d 	.word	0x0000366d
    2cc4:	00003699 	.word	0x00003699

00002cc8 <__sfmoreglue>:
    2cc8:	b570      	push	{r4, r5, r6, lr}
    2cca:	2568      	movs	r5, #104	; 0x68
    2ccc:	1e4a      	subs	r2, r1, #1
    2cce:	4355      	muls	r5, r2
    2cd0:	000e      	movs	r6, r1
    2cd2:	0029      	movs	r1, r5
    2cd4:	3174      	adds	r1, #116	; 0x74
    2cd6:	f000 f95d 	bl	2f94 <_malloc_r>
    2cda:	1e04      	subs	r4, r0, #0
    2cdc:	d008      	beq.n	2cf0 <__sfmoreglue+0x28>
    2cde:	2100      	movs	r1, #0
    2ce0:	002a      	movs	r2, r5
    2ce2:	6001      	str	r1, [r0, #0]
    2ce4:	6046      	str	r6, [r0, #4]
    2ce6:	300c      	adds	r0, #12
    2ce8:	60a0      	str	r0, [r4, #8]
    2cea:	3268      	adds	r2, #104	; 0x68
    2cec:	f7ff fe32 	bl	2954 <memset>
    2cf0:	0020      	movs	r0, r4
    2cf2:	bd70      	pop	{r4, r5, r6, pc}

00002cf4 <__sinit>:
    2cf4:	6983      	ldr	r3, [r0, #24]
    2cf6:	b513      	push	{r0, r1, r4, lr}
    2cf8:	0004      	movs	r4, r0
    2cfa:	2b00      	cmp	r3, #0
    2cfc:	d128      	bne.n	2d50 <__sinit+0x5c>
    2cfe:	6483      	str	r3, [r0, #72]	; 0x48
    2d00:	64c3      	str	r3, [r0, #76]	; 0x4c
    2d02:	6503      	str	r3, [r0, #80]	; 0x50
    2d04:	4b13      	ldr	r3, [pc, #76]	; (2d54 <__sinit+0x60>)
    2d06:	4a14      	ldr	r2, [pc, #80]	; (2d58 <__sinit+0x64>)
    2d08:	681b      	ldr	r3, [r3, #0]
    2d0a:	6282      	str	r2, [r0, #40]	; 0x28
    2d0c:	9301      	str	r3, [sp, #4]
    2d0e:	4298      	cmp	r0, r3
    2d10:	d101      	bne.n	2d16 <__sinit+0x22>
    2d12:	2301      	movs	r3, #1
    2d14:	6183      	str	r3, [r0, #24]
    2d16:	0020      	movs	r0, r4
    2d18:	f000 f820 	bl	2d5c <__sfp>
    2d1c:	6060      	str	r0, [r4, #4]
    2d1e:	0020      	movs	r0, r4
    2d20:	f000 f81c 	bl	2d5c <__sfp>
    2d24:	60a0      	str	r0, [r4, #8]
    2d26:	0020      	movs	r0, r4
    2d28:	f000 f818 	bl	2d5c <__sfp>
    2d2c:	2200      	movs	r2, #0
    2d2e:	60e0      	str	r0, [r4, #12]
    2d30:	2104      	movs	r1, #4
    2d32:	6860      	ldr	r0, [r4, #4]
    2d34:	f7ff ffa4 	bl	2c80 <std.isra.0>
    2d38:	2201      	movs	r2, #1
    2d3a:	2109      	movs	r1, #9
    2d3c:	68a0      	ldr	r0, [r4, #8]
    2d3e:	f7ff ff9f 	bl	2c80 <std.isra.0>
    2d42:	2202      	movs	r2, #2
    2d44:	2112      	movs	r1, #18
    2d46:	68e0      	ldr	r0, [r4, #12]
    2d48:	f7ff ff9a 	bl	2c80 <std.isra.0>
    2d4c:	2301      	movs	r3, #1
    2d4e:	61a3      	str	r3, [r4, #24]
    2d50:	bd13      	pop	{r0, r1, r4, pc}
    2d52:	46c0      	nop			; (mov r8, r8)
    2d54:	00003aa8 	.word	0x00003aa8
    2d58:	00002c71 	.word	0x00002c71

00002d5c <__sfp>:
    2d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d5e:	4b1e      	ldr	r3, [pc, #120]	; (2dd8 <__sfp+0x7c>)
    2d60:	0007      	movs	r7, r0
    2d62:	681e      	ldr	r6, [r3, #0]
    2d64:	69b3      	ldr	r3, [r6, #24]
    2d66:	2b00      	cmp	r3, #0
    2d68:	d102      	bne.n	2d70 <__sfp+0x14>
    2d6a:	0030      	movs	r0, r6
    2d6c:	f7ff ffc2 	bl	2cf4 <__sinit>
    2d70:	3648      	adds	r6, #72	; 0x48
    2d72:	68b4      	ldr	r4, [r6, #8]
    2d74:	6873      	ldr	r3, [r6, #4]
    2d76:	3b01      	subs	r3, #1
    2d78:	d504      	bpl.n	2d84 <__sfp+0x28>
    2d7a:	6833      	ldr	r3, [r6, #0]
    2d7c:	2b00      	cmp	r3, #0
    2d7e:	d007      	beq.n	2d90 <__sfp+0x34>
    2d80:	6836      	ldr	r6, [r6, #0]
    2d82:	e7f6      	b.n	2d72 <__sfp+0x16>
    2d84:	220c      	movs	r2, #12
    2d86:	5ea5      	ldrsh	r5, [r4, r2]
    2d88:	2d00      	cmp	r5, #0
    2d8a:	d00d      	beq.n	2da8 <__sfp+0x4c>
    2d8c:	3468      	adds	r4, #104	; 0x68
    2d8e:	e7f2      	b.n	2d76 <__sfp+0x1a>
    2d90:	2104      	movs	r1, #4
    2d92:	0038      	movs	r0, r7
    2d94:	f7ff ff98 	bl	2cc8 <__sfmoreglue>
    2d98:	6030      	str	r0, [r6, #0]
    2d9a:	2800      	cmp	r0, #0
    2d9c:	d1f0      	bne.n	2d80 <__sfp+0x24>
    2d9e:	230c      	movs	r3, #12
    2da0:	0004      	movs	r4, r0
    2da2:	603b      	str	r3, [r7, #0]
    2da4:	0020      	movs	r0, r4
    2da6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2da8:	2301      	movs	r3, #1
    2daa:	0020      	movs	r0, r4
    2dac:	425b      	negs	r3, r3
    2dae:	81e3      	strh	r3, [r4, #14]
    2db0:	3302      	adds	r3, #2
    2db2:	81a3      	strh	r3, [r4, #12]
    2db4:	6665      	str	r5, [r4, #100]	; 0x64
    2db6:	6025      	str	r5, [r4, #0]
    2db8:	60a5      	str	r5, [r4, #8]
    2dba:	6065      	str	r5, [r4, #4]
    2dbc:	6125      	str	r5, [r4, #16]
    2dbe:	6165      	str	r5, [r4, #20]
    2dc0:	61a5      	str	r5, [r4, #24]
    2dc2:	2208      	movs	r2, #8
    2dc4:	0029      	movs	r1, r5
    2dc6:	305c      	adds	r0, #92	; 0x5c
    2dc8:	f7ff fdc4 	bl	2954 <memset>
    2dcc:	6365      	str	r5, [r4, #52]	; 0x34
    2dce:	63a5      	str	r5, [r4, #56]	; 0x38
    2dd0:	64a5      	str	r5, [r4, #72]	; 0x48
    2dd2:	64e5      	str	r5, [r4, #76]	; 0x4c
    2dd4:	e7e6      	b.n	2da4 <__sfp+0x48>
    2dd6:	46c0      	nop			; (mov r8, r8)
    2dd8:	00003aa8 	.word	0x00003aa8

00002ddc <_fwalk_reent>:
    2ddc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2dde:	0004      	movs	r4, r0
    2de0:	0007      	movs	r7, r0
    2de2:	2600      	movs	r6, #0
    2de4:	9101      	str	r1, [sp, #4]
    2de6:	3448      	adds	r4, #72	; 0x48
    2de8:	2c00      	cmp	r4, #0
    2dea:	d101      	bne.n	2df0 <_fwalk_reent+0x14>
    2dec:	0030      	movs	r0, r6
    2dee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2df0:	6863      	ldr	r3, [r4, #4]
    2df2:	68a5      	ldr	r5, [r4, #8]
    2df4:	9300      	str	r3, [sp, #0]
    2df6:	9b00      	ldr	r3, [sp, #0]
    2df8:	3b01      	subs	r3, #1
    2dfa:	9300      	str	r3, [sp, #0]
    2dfc:	d501      	bpl.n	2e02 <_fwalk_reent+0x26>
    2dfe:	6824      	ldr	r4, [r4, #0]
    2e00:	e7f2      	b.n	2de8 <_fwalk_reent+0xc>
    2e02:	89ab      	ldrh	r3, [r5, #12]
    2e04:	2b01      	cmp	r3, #1
    2e06:	d908      	bls.n	2e1a <_fwalk_reent+0x3e>
    2e08:	220e      	movs	r2, #14
    2e0a:	5eab      	ldrsh	r3, [r5, r2]
    2e0c:	3301      	adds	r3, #1
    2e0e:	d004      	beq.n	2e1a <_fwalk_reent+0x3e>
    2e10:	0029      	movs	r1, r5
    2e12:	0038      	movs	r0, r7
    2e14:	9b01      	ldr	r3, [sp, #4]
    2e16:	4798      	blx	r3
    2e18:	4306      	orrs	r6, r0
    2e1a:	3568      	adds	r5, #104	; 0x68
    2e1c:	e7eb      	b.n	2df6 <_fwalk_reent+0x1a>
	...

00002e20 <__swhatbuf_r>:
    2e20:	b570      	push	{r4, r5, r6, lr}
    2e22:	000e      	movs	r6, r1
    2e24:	001d      	movs	r5, r3
    2e26:	230e      	movs	r3, #14
    2e28:	5ec9      	ldrsh	r1, [r1, r3]
    2e2a:	b090      	sub	sp, #64	; 0x40
    2e2c:	0014      	movs	r4, r2
    2e2e:	2900      	cmp	r1, #0
    2e30:	da07      	bge.n	2e42 <__swhatbuf_r+0x22>
    2e32:	2300      	movs	r3, #0
    2e34:	602b      	str	r3, [r5, #0]
    2e36:	89b3      	ldrh	r3, [r6, #12]
    2e38:	061b      	lsls	r3, r3, #24
    2e3a:	d411      	bmi.n	2e60 <__swhatbuf_r+0x40>
    2e3c:	2380      	movs	r3, #128	; 0x80
    2e3e:	00db      	lsls	r3, r3, #3
    2e40:	e00f      	b.n	2e62 <__swhatbuf_r+0x42>
    2e42:	aa01      	add	r2, sp, #4
    2e44:	f000 fd20 	bl	3888 <_fstat_r>
    2e48:	2800      	cmp	r0, #0
    2e4a:	dbf2      	blt.n	2e32 <__swhatbuf_r+0x12>
    2e4c:	22f0      	movs	r2, #240	; 0xf0
    2e4e:	9b02      	ldr	r3, [sp, #8]
    2e50:	0212      	lsls	r2, r2, #8
    2e52:	4013      	ands	r3, r2
    2e54:	4a05      	ldr	r2, [pc, #20]	; (2e6c <__swhatbuf_r+0x4c>)
    2e56:	189b      	adds	r3, r3, r2
    2e58:	425a      	negs	r2, r3
    2e5a:	4153      	adcs	r3, r2
    2e5c:	602b      	str	r3, [r5, #0]
    2e5e:	e7ed      	b.n	2e3c <__swhatbuf_r+0x1c>
    2e60:	2340      	movs	r3, #64	; 0x40
    2e62:	2000      	movs	r0, #0
    2e64:	6023      	str	r3, [r4, #0]
    2e66:	b010      	add	sp, #64	; 0x40
    2e68:	bd70      	pop	{r4, r5, r6, pc}
    2e6a:	46c0      	nop			; (mov r8, r8)
    2e6c:	ffffe000 	.word	0xffffe000

00002e70 <__smakebuf_r>:
    2e70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2e72:	2602      	movs	r6, #2
    2e74:	898b      	ldrh	r3, [r1, #12]
    2e76:	0005      	movs	r5, r0
    2e78:	000c      	movs	r4, r1
    2e7a:	4233      	tst	r3, r6
    2e7c:	d006      	beq.n	2e8c <__smakebuf_r+0x1c>
    2e7e:	0023      	movs	r3, r4
    2e80:	3347      	adds	r3, #71	; 0x47
    2e82:	6023      	str	r3, [r4, #0]
    2e84:	6123      	str	r3, [r4, #16]
    2e86:	2301      	movs	r3, #1
    2e88:	6163      	str	r3, [r4, #20]
    2e8a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    2e8c:	ab01      	add	r3, sp, #4
    2e8e:	466a      	mov	r2, sp
    2e90:	f7ff ffc6 	bl	2e20 <__swhatbuf_r>
    2e94:	9900      	ldr	r1, [sp, #0]
    2e96:	0007      	movs	r7, r0
    2e98:	0028      	movs	r0, r5
    2e9a:	f000 f87b 	bl	2f94 <_malloc_r>
    2e9e:	2800      	cmp	r0, #0
    2ea0:	d106      	bne.n	2eb0 <__smakebuf_r+0x40>
    2ea2:	220c      	movs	r2, #12
    2ea4:	5ea3      	ldrsh	r3, [r4, r2]
    2ea6:	059a      	lsls	r2, r3, #22
    2ea8:	d4ef      	bmi.n	2e8a <__smakebuf_r+0x1a>
    2eaa:	431e      	orrs	r6, r3
    2eac:	81a6      	strh	r6, [r4, #12]
    2eae:	e7e6      	b.n	2e7e <__smakebuf_r+0xe>
    2eb0:	4b0d      	ldr	r3, [pc, #52]	; (2ee8 <__smakebuf_r+0x78>)
    2eb2:	62ab      	str	r3, [r5, #40]	; 0x28
    2eb4:	2380      	movs	r3, #128	; 0x80
    2eb6:	89a2      	ldrh	r2, [r4, #12]
    2eb8:	6020      	str	r0, [r4, #0]
    2eba:	4313      	orrs	r3, r2
    2ebc:	81a3      	strh	r3, [r4, #12]
    2ebe:	9b00      	ldr	r3, [sp, #0]
    2ec0:	6120      	str	r0, [r4, #16]
    2ec2:	6163      	str	r3, [r4, #20]
    2ec4:	9b01      	ldr	r3, [sp, #4]
    2ec6:	2b00      	cmp	r3, #0
    2ec8:	d00a      	beq.n	2ee0 <__smakebuf_r+0x70>
    2eca:	230e      	movs	r3, #14
    2ecc:	5ee1      	ldrsh	r1, [r4, r3]
    2ece:	0028      	movs	r0, r5
    2ed0:	f000 fcec 	bl	38ac <_isatty_r>
    2ed4:	2800      	cmp	r0, #0
    2ed6:	d003      	beq.n	2ee0 <__smakebuf_r+0x70>
    2ed8:	2301      	movs	r3, #1
    2eda:	89a2      	ldrh	r2, [r4, #12]
    2edc:	4313      	orrs	r3, r2
    2ede:	81a3      	strh	r3, [r4, #12]
    2ee0:	89a0      	ldrh	r0, [r4, #12]
    2ee2:	4338      	orrs	r0, r7
    2ee4:	81a0      	strh	r0, [r4, #12]
    2ee6:	e7d0      	b.n	2e8a <__smakebuf_r+0x1a>
    2ee8:	00002c71 	.word	0x00002c71

00002eec <malloc>:
    2eec:	b510      	push	{r4, lr}
    2eee:	4b03      	ldr	r3, [pc, #12]	; (2efc <malloc+0x10>)
    2ef0:	0001      	movs	r1, r0
    2ef2:	6818      	ldr	r0, [r3, #0]
    2ef4:	f000 f84e 	bl	2f94 <_malloc_r>
    2ef8:	bd10      	pop	{r4, pc}
    2efa:	46c0      	nop			; (mov r8, r8)
    2efc:	20000020 	.word	0x20000020

00002f00 <_free_r>:
    2f00:	b570      	push	{r4, r5, r6, lr}
    2f02:	0005      	movs	r5, r0
    2f04:	2900      	cmp	r1, #0
    2f06:	d010      	beq.n	2f2a <_free_r+0x2a>
    2f08:	1f0c      	subs	r4, r1, #4
    2f0a:	6823      	ldr	r3, [r4, #0]
    2f0c:	2b00      	cmp	r3, #0
    2f0e:	da00      	bge.n	2f12 <_free_r+0x12>
    2f10:	18e4      	adds	r4, r4, r3
    2f12:	0028      	movs	r0, r5
    2f14:	f000 fcfb 	bl	390e <__malloc_lock>
    2f18:	4a1d      	ldr	r2, [pc, #116]	; (2f90 <_free_r+0x90>)
    2f1a:	6813      	ldr	r3, [r2, #0]
    2f1c:	2b00      	cmp	r3, #0
    2f1e:	d105      	bne.n	2f2c <_free_r+0x2c>
    2f20:	6063      	str	r3, [r4, #4]
    2f22:	6014      	str	r4, [r2, #0]
    2f24:	0028      	movs	r0, r5
    2f26:	f000 fcf3 	bl	3910 <__malloc_unlock>
    2f2a:	bd70      	pop	{r4, r5, r6, pc}
    2f2c:	42a3      	cmp	r3, r4
    2f2e:	d909      	bls.n	2f44 <_free_r+0x44>
    2f30:	6821      	ldr	r1, [r4, #0]
    2f32:	1860      	adds	r0, r4, r1
    2f34:	4283      	cmp	r3, r0
    2f36:	d1f3      	bne.n	2f20 <_free_r+0x20>
    2f38:	6818      	ldr	r0, [r3, #0]
    2f3a:	685b      	ldr	r3, [r3, #4]
    2f3c:	1841      	adds	r1, r0, r1
    2f3e:	6021      	str	r1, [r4, #0]
    2f40:	e7ee      	b.n	2f20 <_free_r+0x20>
    2f42:	0013      	movs	r3, r2
    2f44:	685a      	ldr	r2, [r3, #4]
    2f46:	2a00      	cmp	r2, #0
    2f48:	d001      	beq.n	2f4e <_free_r+0x4e>
    2f4a:	42a2      	cmp	r2, r4
    2f4c:	d9f9      	bls.n	2f42 <_free_r+0x42>
    2f4e:	6819      	ldr	r1, [r3, #0]
    2f50:	1858      	adds	r0, r3, r1
    2f52:	42a0      	cmp	r0, r4
    2f54:	d10b      	bne.n	2f6e <_free_r+0x6e>
    2f56:	6820      	ldr	r0, [r4, #0]
    2f58:	1809      	adds	r1, r1, r0
    2f5a:	1858      	adds	r0, r3, r1
    2f5c:	6019      	str	r1, [r3, #0]
    2f5e:	4282      	cmp	r2, r0
    2f60:	d1e0      	bne.n	2f24 <_free_r+0x24>
    2f62:	6810      	ldr	r0, [r2, #0]
    2f64:	6852      	ldr	r2, [r2, #4]
    2f66:	1841      	adds	r1, r0, r1
    2f68:	6019      	str	r1, [r3, #0]
    2f6a:	605a      	str	r2, [r3, #4]
    2f6c:	e7da      	b.n	2f24 <_free_r+0x24>
    2f6e:	42a0      	cmp	r0, r4
    2f70:	d902      	bls.n	2f78 <_free_r+0x78>
    2f72:	230c      	movs	r3, #12
    2f74:	602b      	str	r3, [r5, #0]
    2f76:	e7d5      	b.n	2f24 <_free_r+0x24>
    2f78:	6821      	ldr	r1, [r4, #0]
    2f7a:	1860      	adds	r0, r4, r1
    2f7c:	4282      	cmp	r2, r0
    2f7e:	d103      	bne.n	2f88 <_free_r+0x88>
    2f80:	6810      	ldr	r0, [r2, #0]
    2f82:	6852      	ldr	r2, [r2, #4]
    2f84:	1841      	adds	r1, r0, r1
    2f86:	6021      	str	r1, [r4, #0]
    2f88:	6062      	str	r2, [r4, #4]
    2f8a:	605c      	str	r4, [r3, #4]
    2f8c:	e7ca      	b.n	2f24 <_free_r+0x24>
    2f8e:	46c0      	nop			; (mov r8, r8)
    2f90:	200000e0 	.word	0x200000e0

00002f94 <_malloc_r>:
    2f94:	2303      	movs	r3, #3
    2f96:	b570      	push	{r4, r5, r6, lr}
    2f98:	1ccd      	adds	r5, r1, #3
    2f9a:	439d      	bics	r5, r3
    2f9c:	3508      	adds	r5, #8
    2f9e:	0006      	movs	r6, r0
    2fa0:	2d0c      	cmp	r5, #12
    2fa2:	d21e      	bcs.n	2fe2 <_malloc_r+0x4e>
    2fa4:	250c      	movs	r5, #12
    2fa6:	42a9      	cmp	r1, r5
    2fa8:	d81d      	bhi.n	2fe6 <_malloc_r+0x52>
    2faa:	0030      	movs	r0, r6
    2fac:	f000 fcaf 	bl	390e <__malloc_lock>
    2fb0:	4a25      	ldr	r2, [pc, #148]	; (3048 <_malloc_r+0xb4>)
    2fb2:	6814      	ldr	r4, [r2, #0]
    2fb4:	0021      	movs	r1, r4
    2fb6:	2900      	cmp	r1, #0
    2fb8:	d119      	bne.n	2fee <_malloc_r+0x5a>
    2fba:	4c24      	ldr	r4, [pc, #144]	; (304c <_malloc_r+0xb8>)
    2fbc:	6823      	ldr	r3, [r4, #0]
    2fbe:	2b00      	cmp	r3, #0
    2fc0:	d103      	bne.n	2fca <_malloc_r+0x36>
    2fc2:	0030      	movs	r0, r6
    2fc4:	f000 fb10 	bl	35e8 <_sbrk_r>
    2fc8:	6020      	str	r0, [r4, #0]
    2fca:	0029      	movs	r1, r5
    2fcc:	0030      	movs	r0, r6
    2fce:	f000 fb0b 	bl	35e8 <_sbrk_r>
    2fd2:	1c43      	adds	r3, r0, #1
    2fd4:	d12c      	bne.n	3030 <_malloc_r+0x9c>
    2fd6:	230c      	movs	r3, #12
    2fd8:	0030      	movs	r0, r6
    2fda:	6033      	str	r3, [r6, #0]
    2fdc:	f000 fc98 	bl	3910 <__malloc_unlock>
    2fe0:	e003      	b.n	2fea <_malloc_r+0x56>
    2fe2:	2d00      	cmp	r5, #0
    2fe4:	dadf      	bge.n	2fa6 <_malloc_r+0x12>
    2fe6:	230c      	movs	r3, #12
    2fe8:	6033      	str	r3, [r6, #0]
    2fea:	2000      	movs	r0, #0
    2fec:	bd70      	pop	{r4, r5, r6, pc}
    2fee:	680b      	ldr	r3, [r1, #0]
    2ff0:	1b5b      	subs	r3, r3, r5
    2ff2:	d41a      	bmi.n	302a <_malloc_r+0x96>
    2ff4:	2b0b      	cmp	r3, #11
    2ff6:	d903      	bls.n	3000 <_malloc_r+0x6c>
    2ff8:	600b      	str	r3, [r1, #0]
    2ffa:	18cc      	adds	r4, r1, r3
    2ffc:	6025      	str	r5, [r4, #0]
    2ffe:	e003      	b.n	3008 <_malloc_r+0x74>
    3000:	428c      	cmp	r4, r1
    3002:	d10e      	bne.n	3022 <_malloc_r+0x8e>
    3004:	6863      	ldr	r3, [r4, #4]
    3006:	6013      	str	r3, [r2, #0]
    3008:	0030      	movs	r0, r6
    300a:	f000 fc81 	bl	3910 <__malloc_unlock>
    300e:	0020      	movs	r0, r4
    3010:	2207      	movs	r2, #7
    3012:	300b      	adds	r0, #11
    3014:	1d23      	adds	r3, r4, #4
    3016:	4390      	bics	r0, r2
    3018:	1ac3      	subs	r3, r0, r3
    301a:	d0e7      	beq.n	2fec <_malloc_r+0x58>
    301c:	425a      	negs	r2, r3
    301e:	50e2      	str	r2, [r4, r3]
    3020:	e7e4      	b.n	2fec <_malloc_r+0x58>
    3022:	684b      	ldr	r3, [r1, #4]
    3024:	6063      	str	r3, [r4, #4]
    3026:	000c      	movs	r4, r1
    3028:	e7ee      	b.n	3008 <_malloc_r+0x74>
    302a:	000c      	movs	r4, r1
    302c:	6849      	ldr	r1, [r1, #4]
    302e:	e7c2      	b.n	2fb6 <_malloc_r+0x22>
    3030:	2303      	movs	r3, #3
    3032:	1cc4      	adds	r4, r0, #3
    3034:	439c      	bics	r4, r3
    3036:	42a0      	cmp	r0, r4
    3038:	d0e0      	beq.n	2ffc <_malloc_r+0x68>
    303a:	1a21      	subs	r1, r4, r0
    303c:	0030      	movs	r0, r6
    303e:	f000 fad3 	bl	35e8 <_sbrk_r>
    3042:	1c43      	adds	r3, r0, #1
    3044:	d1da      	bne.n	2ffc <_malloc_r+0x68>
    3046:	e7c6      	b.n	2fd6 <_malloc_r+0x42>
    3048:	200000e0 	.word	0x200000e0
    304c:	200000e4 	.word	0x200000e4

00003050 <__sfputc_r>:
    3050:	6893      	ldr	r3, [r2, #8]
    3052:	b510      	push	{r4, lr}
    3054:	3b01      	subs	r3, #1
    3056:	6093      	str	r3, [r2, #8]
    3058:	2b00      	cmp	r3, #0
    305a:	da05      	bge.n	3068 <__sfputc_r+0x18>
    305c:	6994      	ldr	r4, [r2, #24]
    305e:	42a3      	cmp	r3, r4
    3060:	db08      	blt.n	3074 <__sfputc_r+0x24>
    3062:	b2cb      	uxtb	r3, r1
    3064:	2b0a      	cmp	r3, #10
    3066:	d005      	beq.n	3074 <__sfputc_r+0x24>
    3068:	6813      	ldr	r3, [r2, #0]
    306a:	1c58      	adds	r0, r3, #1
    306c:	6010      	str	r0, [r2, #0]
    306e:	7019      	strb	r1, [r3, #0]
    3070:	b2c8      	uxtb	r0, r1
    3072:	bd10      	pop	{r4, pc}
    3074:	f000 fb16 	bl	36a4 <__swbuf_r>
    3078:	e7fb      	b.n	3072 <__sfputc_r+0x22>

0000307a <__sfputs_r>:
    307a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    307c:	0006      	movs	r6, r0
    307e:	000f      	movs	r7, r1
    3080:	0014      	movs	r4, r2
    3082:	18d5      	adds	r5, r2, r3
    3084:	42ac      	cmp	r4, r5
    3086:	d101      	bne.n	308c <__sfputs_r+0x12>
    3088:	2000      	movs	r0, #0
    308a:	e007      	b.n	309c <__sfputs_r+0x22>
    308c:	7821      	ldrb	r1, [r4, #0]
    308e:	003a      	movs	r2, r7
    3090:	0030      	movs	r0, r6
    3092:	f7ff ffdd 	bl	3050 <__sfputc_r>
    3096:	3401      	adds	r4, #1
    3098:	1c43      	adds	r3, r0, #1
    309a:	d1f3      	bne.n	3084 <__sfputs_r+0xa>
    309c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000030a0 <_vfiprintf_r>:
    30a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    30a2:	b09f      	sub	sp, #124	; 0x7c
    30a4:	0006      	movs	r6, r0
    30a6:	000f      	movs	r7, r1
    30a8:	0014      	movs	r4, r2
    30aa:	9305      	str	r3, [sp, #20]
    30ac:	2800      	cmp	r0, #0
    30ae:	d004      	beq.n	30ba <_vfiprintf_r+0x1a>
    30b0:	6983      	ldr	r3, [r0, #24]
    30b2:	2b00      	cmp	r3, #0
    30b4:	d101      	bne.n	30ba <_vfiprintf_r+0x1a>
    30b6:	f7ff fe1d 	bl	2cf4 <__sinit>
    30ba:	4b7f      	ldr	r3, [pc, #508]	; (32b8 <_vfiprintf_r+0x218>)
    30bc:	429f      	cmp	r7, r3
    30be:	d15c      	bne.n	317a <_vfiprintf_r+0xda>
    30c0:	6877      	ldr	r7, [r6, #4]
    30c2:	89bb      	ldrh	r3, [r7, #12]
    30c4:	071b      	lsls	r3, r3, #28
    30c6:	d562      	bpl.n	318e <_vfiprintf_r+0xee>
    30c8:	693b      	ldr	r3, [r7, #16]
    30ca:	2b00      	cmp	r3, #0
    30cc:	d05f      	beq.n	318e <_vfiprintf_r+0xee>
    30ce:	2300      	movs	r3, #0
    30d0:	ad06      	add	r5, sp, #24
    30d2:	616b      	str	r3, [r5, #20]
    30d4:	3320      	adds	r3, #32
    30d6:	766b      	strb	r3, [r5, #25]
    30d8:	3310      	adds	r3, #16
    30da:	76ab      	strb	r3, [r5, #26]
    30dc:	9402      	str	r4, [sp, #8]
    30de:	9c02      	ldr	r4, [sp, #8]
    30e0:	7823      	ldrb	r3, [r4, #0]
    30e2:	2b00      	cmp	r3, #0
    30e4:	d15d      	bne.n	31a2 <_vfiprintf_r+0x102>
    30e6:	9b02      	ldr	r3, [sp, #8]
    30e8:	1ae3      	subs	r3, r4, r3
    30ea:	9304      	str	r3, [sp, #16]
    30ec:	d00d      	beq.n	310a <_vfiprintf_r+0x6a>
    30ee:	9b04      	ldr	r3, [sp, #16]
    30f0:	9a02      	ldr	r2, [sp, #8]
    30f2:	0039      	movs	r1, r7
    30f4:	0030      	movs	r0, r6
    30f6:	f7ff ffc0 	bl	307a <__sfputs_r>
    30fa:	1c43      	adds	r3, r0, #1
    30fc:	d100      	bne.n	3100 <_vfiprintf_r+0x60>
    30fe:	e0cc      	b.n	329a <_vfiprintf_r+0x1fa>
    3100:	696a      	ldr	r2, [r5, #20]
    3102:	9b04      	ldr	r3, [sp, #16]
    3104:	4694      	mov	ip, r2
    3106:	4463      	add	r3, ip
    3108:	616b      	str	r3, [r5, #20]
    310a:	7823      	ldrb	r3, [r4, #0]
    310c:	2b00      	cmp	r3, #0
    310e:	d100      	bne.n	3112 <_vfiprintf_r+0x72>
    3110:	e0c3      	b.n	329a <_vfiprintf_r+0x1fa>
    3112:	2201      	movs	r2, #1
    3114:	2300      	movs	r3, #0
    3116:	4252      	negs	r2, r2
    3118:	606a      	str	r2, [r5, #4]
    311a:	a902      	add	r1, sp, #8
    311c:	3254      	adds	r2, #84	; 0x54
    311e:	1852      	adds	r2, r2, r1
    3120:	3401      	adds	r4, #1
    3122:	602b      	str	r3, [r5, #0]
    3124:	60eb      	str	r3, [r5, #12]
    3126:	60ab      	str	r3, [r5, #8]
    3128:	7013      	strb	r3, [r2, #0]
    312a:	65ab      	str	r3, [r5, #88]	; 0x58
    312c:	7821      	ldrb	r1, [r4, #0]
    312e:	2205      	movs	r2, #5
    3130:	4862      	ldr	r0, [pc, #392]	; (32bc <_vfiprintf_r+0x21c>)
    3132:	f000 fbe1 	bl	38f8 <memchr>
    3136:	1c63      	adds	r3, r4, #1
    3138:	469c      	mov	ip, r3
    313a:	2800      	cmp	r0, #0
    313c:	d135      	bne.n	31aa <_vfiprintf_r+0x10a>
    313e:	6829      	ldr	r1, [r5, #0]
    3140:	06cb      	lsls	r3, r1, #27
    3142:	d504      	bpl.n	314e <_vfiprintf_r+0xae>
    3144:	2353      	movs	r3, #83	; 0x53
    3146:	aa02      	add	r2, sp, #8
    3148:	3020      	adds	r0, #32
    314a:	189b      	adds	r3, r3, r2
    314c:	7018      	strb	r0, [r3, #0]
    314e:	070b      	lsls	r3, r1, #28
    3150:	d504      	bpl.n	315c <_vfiprintf_r+0xbc>
    3152:	2353      	movs	r3, #83	; 0x53
    3154:	202b      	movs	r0, #43	; 0x2b
    3156:	aa02      	add	r2, sp, #8
    3158:	189b      	adds	r3, r3, r2
    315a:	7018      	strb	r0, [r3, #0]
    315c:	7823      	ldrb	r3, [r4, #0]
    315e:	2b2a      	cmp	r3, #42	; 0x2a
    3160:	d02c      	beq.n	31bc <_vfiprintf_r+0x11c>
    3162:	2000      	movs	r0, #0
    3164:	210a      	movs	r1, #10
    3166:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3168:	7822      	ldrb	r2, [r4, #0]
    316a:	3a30      	subs	r2, #48	; 0x30
    316c:	2a09      	cmp	r2, #9
    316e:	d800      	bhi.n	3172 <_vfiprintf_r+0xd2>
    3170:	e06b      	b.n	324a <_vfiprintf_r+0x1aa>
    3172:	2800      	cmp	r0, #0
    3174:	d02a      	beq.n	31cc <_vfiprintf_r+0x12c>
    3176:	9309      	str	r3, [sp, #36]	; 0x24
    3178:	e028      	b.n	31cc <_vfiprintf_r+0x12c>
    317a:	4b51      	ldr	r3, [pc, #324]	; (32c0 <_vfiprintf_r+0x220>)
    317c:	429f      	cmp	r7, r3
    317e:	d101      	bne.n	3184 <_vfiprintf_r+0xe4>
    3180:	68b7      	ldr	r7, [r6, #8]
    3182:	e79e      	b.n	30c2 <_vfiprintf_r+0x22>
    3184:	4b4f      	ldr	r3, [pc, #316]	; (32c4 <_vfiprintf_r+0x224>)
    3186:	429f      	cmp	r7, r3
    3188:	d19b      	bne.n	30c2 <_vfiprintf_r+0x22>
    318a:	68f7      	ldr	r7, [r6, #12]
    318c:	e799      	b.n	30c2 <_vfiprintf_r+0x22>
    318e:	0039      	movs	r1, r7
    3190:	0030      	movs	r0, r6
    3192:	f000 faf1 	bl	3778 <__swsetup_r>
    3196:	2800      	cmp	r0, #0
    3198:	d099      	beq.n	30ce <_vfiprintf_r+0x2e>
    319a:	2001      	movs	r0, #1
    319c:	4240      	negs	r0, r0
    319e:	b01f      	add	sp, #124	; 0x7c
    31a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    31a2:	2b25      	cmp	r3, #37	; 0x25
    31a4:	d09f      	beq.n	30e6 <_vfiprintf_r+0x46>
    31a6:	3401      	adds	r4, #1
    31a8:	e79a      	b.n	30e0 <_vfiprintf_r+0x40>
    31aa:	4b44      	ldr	r3, [pc, #272]	; (32bc <_vfiprintf_r+0x21c>)
    31ac:	6829      	ldr	r1, [r5, #0]
    31ae:	1ac0      	subs	r0, r0, r3
    31b0:	2301      	movs	r3, #1
    31b2:	4083      	lsls	r3, r0
    31b4:	430b      	orrs	r3, r1
    31b6:	602b      	str	r3, [r5, #0]
    31b8:	4664      	mov	r4, ip
    31ba:	e7b7      	b.n	312c <_vfiprintf_r+0x8c>
    31bc:	9b05      	ldr	r3, [sp, #20]
    31be:	1d18      	adds	r0, r3, #4
    31c0:	681b      	ldr	r3, [r3, #0]
    31c2:	9005      	str	r0, [sp, #20]
    31c4:	2b00      	cmp	r3, #0
    31c6:	db3a      	blt.n	323e <_vfiprintf_r+0x19e>
    31c8:	9309      	str	r3, [sp, #36]	; 0x24
    31ca:	4664      	mov	r4, ip
    31cc:	7823      	ldrb	r3, [r4, #0]
    31ce:	2b2e      	cmp	r3, #46	; 0x2e
    31d0:	d10b      	bne.n	31ea <_vfiprintf_r+0x14a>
    31d2:	7863      	ldrb	r3, [r4, #1]
    31d4:	1c62      	adds	r2, r4, #1
    31d6:	2b2a      	cmp	r3, #42	; 0x2a
    31d8:	d13f      	bne.n	325a <_vfiprintf_r+0x1ba>
    31da:	9b05      	ldr	r3, [sp, #20]
    31dc:	3402      	adds	r4, #2
    31de:	1d1a      	adds	r2, r3, #4
    31e0:	681b      	ldr	r3, [r3, #0]
    31e2:	9205      	str	r2, [sp, #20]
    31e4:	2b00      	cmp	r3, #0
    31e6:	db35      	blt.n	3254 <_vfiprintf_r+0x1b4>
    31e8:	9307      	str	r3, [sp, #28]
    31ea:	7821      	ldrb	r1, [r4, #0]
    31ec:	2203      	movs	r2, #3
    31ee:	4836      	ldr	r0, [pc, #216]	; (32c8 <_vfiprintf_r+0x228>)
    31f0:	f000 fb82 	bl	38f8 <memchr>
    31f4:	2800      	cmp	r0, #0
    31f6:	d007      	beq.n	3208 <_vfiprintf_r+0x168>
    31f8:	4b33      	ldr	r3, [pc, #204]	; (32c8 <_vfiprintf_r+0x228>)
    31fa:	682a      	ldr	r2, [r5, #0]
    31fc:	1ac0      	subs	r0, r0, r3
    31fe:	2340      	movs	r3, #64	; 0x40
    3200:	4083      	lsls	r3, r0
    3202:	4313      	orrs	r3, r2
    3204:	602b      	str	r3, [r5, #0]
    3206:	3401      	adds	r4, #1
    3208:	7821      	ldrb	r1, [r4, #0]
    320a:	1c63      	adds	r3, r4, #1
    320c:	2206      	movs	r2, #6
    320e:	482f      	ldr	r0, [pc, #188]	; (32cc <_vfiprintf_r+0x22c>)
    3210:	9302      	str	r3, [sp, #8]
    3212:	7629      	strb	r1, [r5, #24]
    3214:	f000 fb70 	bl	38f8 <memchr>
    3218:	2800      	cmp	r0, #0
    321a:	d044      	beq.n	32a6 <_vfiprintf_r+0x206>
    321c:	4b2c      	ldr	r3, [pc, #176]	; (32d0 <_vfiprintf_r+0x230>)
    321e:	2b00      	cmp	r3, #0
    3220:	d12f      	bne.n	3282 <_vfiprintf_r+0x1e2>
    3222:	6829      	ldr	r1, [r5, #0]
    3224:	9b05      	ldr	r3, [sp, #20]
    3226:	2207      	movs	r2, #7
    3228:	05c9      	lsls	r1, r1, #23
    322a:	d528      	bpl.n	327e <_vfiprintf_r+0x1de>
    322c:	189b      	adds	r3, r3, r2
    322e:	4393      	bics	r3, r2
    3230:	3308      	adds	r3, #8
    3232:	9305      	str	r3, [sp, #20]
    3234:	696b      	ldr	r3, [r5, #20]
    3236:	9a03      	ldr	r2, [sp, #12]
    3238:	189b      	adds	r3, r3, r2
    323a:	616b      	str	r3, [r5, #20]
    323c:	e74f      	b.n	30de <_vfiprintf_r+0x3e>
    323e:	425b      	negs	r3, r3
    3240:	60eb      	str	r3, [r5, #12]
    3242:	2302      	movs	r3, #2
    3244:	430b      	orrs	r3, r1
    3246:	602b      	str	r3, [r5, #0]
    3248:	e7bf      	b.n	31ca <_vfiprintf_r+0x12a>
    324a:	434b      	muls	r3, r1
    324c:	3401      	adds	r4, #1
    324e:	189b      	adds	r3, r3, r2
    3250:	2001      	movs	r0, #1
    3252:	e789      	b.n	3168 <_vfiprintf_r+0xc8>
    3254:	2301      	movs	r3, #1
    3256:	425b      	negs	r3, r3
    3258:	e7c6      	b.n	31e8 <_vfiprintf_r+0x148>
    325a:	2300      	movs	r3, #0
    325c:	0014      	movs	r4, r2
    325e:	200a      	movs	r0, #10
    3260:	001a      	movs	r2, r3
    3262:	606b      	str	r3, [r5, #4]
    3264:	7821      	ldrb	r1, [r4, #0]
    3266:	3930      	subs	r1, #48	; 0x30
    3268:	2909      	cmp	r1, #9
    326a:	d903      	bls.n	3274 <_vfiprintf_r+0x1d4>
    326c:	2b00      	cmp	r3, #0
    326e:	d0bc      	beq.n	31ea <_vfiprintf_r+0x14a>
    3270:	9207      	str	r2, [sp, #28]
    3272:	e7ba      	b.n	31ea <_vfiprintf_r+0x14a>
    3274:	4342      	muls	r2, r0
    3276:	3401      	adds	r4, #1
    3278:	1852      	adds	r2, r2, r1
    327a:	2301      	movs	r3, #1
    327c:	e7f2      	b.n	3264 <_vfiprintf_r+0x1c4>
    327e:	3307      	adds	r3, #7
    3280:	e7d5      	b.n	322e <_vfiprintf_r+0x18e>
    3282:	ab05      	add	r3, sp, #20
    3284:	9300      	str	r3, [sp, #0]
    3286:	003a      	movs	r2, r7
    3288:	4b12      	ldr	r3, [pc, #72]	; (32d4 <_vfiprintf_r+0x234>)
    328a:	0029      	movs	r1, r5
    328c:	0030      	movs	r0, r6
    328e:	e000      	b.n	3292 <_vfiprintf_r+0x1f2>
    3290:	bf00      	nop
    3292:	9003      	str	r0, [sp, #12]
    3294:	9b03      	ldr	r3, [sp, #12]
    3296:	3301      	adds	r3, #1
    3298:	d1cc      	bne.n	3234 <_vfiprintf_r+0x194>
    329a:	89bb      	ldrh	r3, [r7, #12]
    329c:	065b      	lsls	r3, r3, #25
    329e:	d500      	bpl.n	32a2 <_vfiprintf_r+0x202>
    32a0:	e77b      	b.n	319a <_vfiprintf_r+0xfa>
    32a2:	980b      	ldr	r0, [sp, #44]	; 0x2c
    32a4:	e77b      	b.n	319e <_vfiprintf_r+0xfe>
    32a6:	ab05      	add	r3, sp, #20
    32a8:	9300      	str	r3, [sp, #0]
    32aa:	003a      	movs	r2, r7
    32ac:	4b09      	ldr	r3, [pc, #36]	; (32d4 <_vfiprintf_r+0x234>)
    32ae:	0029      	movs	r1, r5
    32b0:	0030      	movs	r0, r6
    32b2:	f000 f87f 	bl	33b4 <_printf_i>
    32b6:	e7ec      	b.n	3292 <_vfiprintf_r+0x1f2>
    32b8:	00003acc 	.word	0x00003acc
    32bc:	00003b0c 	.word	0x00003b0c
    32c0:	00003aec 	.word	0x00003aec
    32c4:	00003aac 	.word	0x00003aac
    32c8:	00003b12 	.word	0x00003b12
    32cc:	00003b16 	.word	0x00003b16
    32d0:	00000000 	.word	0x00000000
    32d4:	0000307b 	.word	0x0000307b

000032d8 <_printf_common>:
    32d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    32da:	0015      	movs	r5, r2
    32dc:	9301      	str	r3, [sp, #4]
    32de:	688a      	ldr	r2, [r1, #8]
    32e0:	690b      	ldr	r3, [r1, #16]
    32e2:	9000      	str	r0, [sp, #0]
    32e4:	000c      	movs	r4, r1
    32e6:	4293      	cmp	r3, r2
    32e8:	da00      	bge.n	32ec <_printf_common+0x14>
    32ea:	0013      	movs	r3, r2
    32ec:	0022      	movs	r2, r4
    32ee:	602b      	str	r3, [r5, #0]
    32f0:	3243      	adds	r2, #67	; 0x43
    32f2:	7812      	ldrb	r2, [r2, #0]
    32f4:	2a00      	cmp	r2, #0
    32f6:	d001      	beq.n	32fc <_printf_common+0x24>
    32f8:	3301      	adds	r3, #1
    32fa:	602b      	str	r3, [r5, #0]
    32fc:	6823      	ldr	r3, [r4, #0]
    32fe:	069b      	lsls	r3, r3, #26
    3300:	d502      	bpl.n	3308 <_printf_common+0x30>
    3302:	682b      	ldr	r3, [r5, #0]
    3304:	3302      	adds	r3, #2
    3306:	602b      	str	r3, [r5, #0]
    3308:	2706      	movs	r7, #6
    330a:	6823      	ldr	r3, [r4, #0]
    330c:	401f      	ands	r7, r3
    330e:	d027      	beq.n	3360 <_printf_common+0x88>
    3310:	0023      	movs	r3, r4
    3312:	3343      	adds	r3, #67	; 0x43
    3314:	781b      	ldrb	r3, [r3, #0]
    3316:	1e5a      	subs	r2, r3, #1
    3318:	4193      	sbcs	r3, r2
    331a:	6822      	ldr	r2, [r4, #0]
    331c:	0692      	lsls	r2, r2, #26
    331e:	d430      	bmi.n	3382 <_printf_common+0xaa>
    3320:	0022      	movs	r2, r4
    3322:	9901      	ldr	r1, [sp, #4]
    3324:	3243      	adds	r2, #67	; 0x43
    3326:	9800      	ldr	r0, [sp, #0]
    3328:	9e08      	ldr	r6, [sp, #32]
    332a:	47b0      	blx	r6
    332c:	1c43      	adds	r3, r0, #1
    332e:	d025      	beq.n	337c <_printf_common+0xa4>
    3330:	2306      	movs	r3, #6
    3332:	6820      	ldr	r0, [r4, #0]
    3334:	682a      	ldr	r2, [r5, #0]
    3336:	68e1      	ldr	r1, [r4, #12]
    3338:	4003      	ands	r3, r0
    333a:	2500      	movs	r5, #0
    333c:	2b04      	cmp	r3, #4
    333e:	d103      	bne.n	3348 <_printf_common+0x70>
    3340:	1a8d      	subs	r5, r1, r2
    3342:	43eb      	mvns	r3, r5
    3344:	17db      	asrs	r3, r3, #31
    3346:	401d      	ands	r5, r3
    3348:	68a3      	ldr	r3, [r4, #8]
    334a:	6922      	ldr	r2, [r4, #16]
    334c:	4293      	cmp	r3, r2
    334e:	dd01      	ble.n	3354 <_printf_common+0x7c>
    3350:	1a9b      	subs	r3, r3, r2
    3352:	18ed      	adds	r5, r5, r3
    3354:	2700      	movs	r7, #0
    3356:	42bd      	cmp	r5, r7
    3358:	d120      	bne.n	339c <_printf_common+0xc4>
    335a:	2000      	movs	r0, #0
    335c:	e010      	b.n	3380 <_printf_common+0xa8>
    335e:	3701      	adds	r7, #1
    3360:	68e3      	ldr	r3, [r4, #12]
    3362:	682a      	ldr	r2, [r5, #0]
    3364:	1a9b      	subs	r3, r3, r2
    3366:	429f      	cmp	r7, r3
    3368:	dad2      	bge.n	3310 <_printf_common+0x38>
    336a:	0022      	movs	r2, r4
    336c:	2301      	movs	r3, #1
    336e:	3219      	adds	r2, #25
    3370:	9901      	ldr	r1, [sp, #4]
    3372:	9800      	ldr	r0, [sp, #0]
    3374:	9e08      	ldr	r6, [sp, #32]
    3376:	47b0      	blx	r6
    3378:	1c43      	adds	r3, r0, #1
    337a:	d1f0      	bne.n	335e <_printf_common+0x86>
    337c:	2001      	movs	r0, #1
    337e:	4240      	negs	r0, r0
    3380:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3382:	2030      	movs	r0, #48	; 0x30
    3384:	18e1      	adds	r1, r4, r3
    3386:	3143      	adds	r1, #67	; 0x43
    3388:	7008      	strb	r0, [r1, #0]
    338a:	0021      	movs	r1, r4
    338c:	1c5a      	adds	r2, r3, #1
    338e:	3145      	adds	r1, #69	; 0x45
    3390:	7809      	ldrb	r1, [r1, #0]
    3392:	18a2      	adds	r2, r4, r2
    3394:	3243      	adds	r2, #67	; 0x43
    3396:	3302      	adds	r3, #2
    3398:	7011      	strb	r1, [r2, #0]
    339a:	e7c1      	b.n	3320 <_printf_common+0x48>
    339c:	0022      	movs	r2, r4
    339e:	2301      	movs	r3, #1
    33a0:	321a      	adds	r2, #26
    33a2:	9901      	ldr	r1, [sp, #4]
    33a4:	9800      	ldr	r0, [sp, #0]
    33a6:	9e08      	ldr	r6, [sp, #32]
    33a8:	47b0      	blx	r6
    33aa:	1c43      	adds	r3, r0, #1
    33ac:	d0e6      	beq.n	337c <_printf_common+0xa4>
    33ae:	3701      	adds	r7, #1
    33b0:	e7d1      	b.n	3356 <_printf_common+0x7e>
	...

000033b4 <_printf_i>:
    33b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    33b6:	b08b      	sub	sp, #44	; 0x2c
    33b8:	9206      	str	r2, [sp, #24]
    33ba:	000a      	movs	r2, r1
    33bc:	3243      	adds	r2, #67	; 0x43
    33be:	9307      	str	r3, [sp, #28]
    33c0:	9005      	str	r0, [sp, #20]
    33c2:	9204      	str	r2, [sp, #16]
    33c4:	7e0a      	ldrb	r2, [r1, #24]
    33c6:	000c      	movs	r4, r1
    33c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    33ca:	2a6e      	cmp	r2, #110	; 0x6e
    33cc:	d100      	bne.n	33d0 <_printf_i+0x1c>
    33ce:	e08f      	b.n	34f0 <_printf_i+0x13c>
    33d0:	d817      	bhi.n	3402 <_printf_i+0x4e>
    33d2:	2a63      	cmp	r2, #99	; 0x63
    33d4:	d02c      	beq.n	3430 <_printf_i+0x7c>
    33d6:	d808      	bhi.n	33ea <_printf_i+0x36>
    33d8:	2a00      	cmp	r2, #0
    33da:	d100      	bne.n	33de <_printf_i+0x2a>
    33dc:	e099      	b.n	3512 <_printf_i+0x15e>
    33de:	2a58      	cmp	r2, #88	; 0x58
    33e0:	d054      	beq.n	348c <_printf_i+0xd8>
    33e2:	0026      	movs	r6, r4
    33e4:	3642      	adds	r6, #66	; 0x42
    33e6:	7032      	strb	r2, [r6, #0]
    33e8:	e029      	b.n	343e <_printf_i+0x8a>
    33ea:	2a64      	cmp	r2, #100	; 0x64
    33ec:	d001      	beq.n	33f2 <_printf_i+0x3e>
    33ee:	2a69      	cmp	r2, #105	; 0x69
    33f0:	d1f7      	bne.n	33e2 <_printf_i+0x2e>
    33f2:	6821      	ldr	r1, [r4, #0]
    33f4:	681a      	ldr	r2, [r3, #0]
    33f6:	0608      	lsls	r0, r1, #24
    33f8:	d523      	bpl.n	3442 <_printf_i+0x8e>
    33fa:	1d11      	adds	r1, r2, #4
    33fc:	6019      	str	r1, [r3, #0]
    33fe:	6815      	ldr	r5, [r2, #0]
    3400:	e025      	b.n	344e <_printf_i+0x9a>
    3402:	2a73      	cmp	r2, #115	; 0x73
    3404:	d100      	bne.n	3408 <_printf_i+0x54>
    3406:	e088      	b.n	351a <_printf_i+0x166>
    3408:	d808      	bhi.n	341c <_printf_i+0x68>
    340a:	2a6f      	cmp	r2, #111	; 0x6f
    340c:	d029      	beq.n	3462 <_printf_i+0xae>
    340e:	2a70      	cmp	r2, #112	; 0x70
    3410:	d1e7      	bne.n	33e2 <_printf_i+0x2e>
    3412:	2220      	movs	r2, #32
    3414:	6809      	ldr	r1, [r1, #0]
    3416:	430a      	orrs	r2, r1
    3418:	6022      	str	r2, [r4, #0]
    341a:	e003      	b.n	3424 <_printf_i+0x70>
    341c:	2a75      	cmp	r2, #117	; 0x75
    341e:	d020      	beq.n	3462 <_printf_i+0xae>
    3420:	2a78      	cmp	r2, #120	; 0x78
    3422:	d1de      	bne.n	33e2 <_printf_i+0x2e>
    3424:	0022      	movs	r2, r4
    3426:	2178      	movs	r1, #120	; 0x78
    3428:	3245      	adds	r2, #69	; 0x45
    342a:	7011      	strb	r1, [r2, #0]
    342c:	4a6c      	ldr	r2, [pc, #432]	; (35e0 <_printf_i+0x22c>)
    342e:	e030      	b.n	3492 <_printf_i+0xde>
    3430:	000e      	movs	r6, r1
    3432:	681a      	ldr	r2, [r3, #0]
    3434:	3642      	adds	r6, #66	; 0x42
    3436:	1d11      	adds	r1, r2, #4
    3438:	6019      	str	r1, [r3, #0]
    343a:	6813      	ldr	r3, [r2, #0]
    343c:	7033      	strb	r3, [r6, #0]
    343e:	2301      	movs	r3, #1
    3440:	e079      	b.n	3536 <_printf_i+0x182>
    3442:	0649      	lsls	r1, r1, #25
    3444:	d5d9      	bpl.n	33fa <_printf_i+0x46>
    3446:	1d11      	adds	r1, r2, #4
    3448:	6019      	str	r1, [r3, #0]
    344a:	2300      	movs	r3, #0
    344c:	5ed5      	ldrsh	r5, [r2, r3]
    344e:	2d00      	cmp	r5, #0
    3450:	da03      	bge.n	345a <_printf_i+0xa6>
    3452:	232d      	movs	r3, #45	; 0x2d
    3454:	9a04      	ldr	r2, [sp, #16]
    3456:	426d      	negs	r5, r5
    3458:	7013      	strb	r3, [r2, #0]
    345a:	4b62      	ldr	r3, [pc, #392]	; (35e4 <_printf_i+0x230>)
    345c:	270a      	movs	r7, #10
    345e:	9303      	str	r3, [sp, #12]
    3460:	e02f      	b.n	34c2 <_printf_i+0x10e>
    3462:	6820      	ldr	r0, [r4, #0]
    3464:	6819      	ldr	r1, [r3, #0]
    3466:	0605      	lsls	r5, r0, #24
    3468:	d503      	bpl.n	3472 <_printf_i+0xbe>
    346a:	1d08      	adds	r0, r1, #4
    346c:	6018      	str	r0, [r3, #0]
    346e:	680d      	ldr	r5, [r1, #0]
    3470:	e005      	b.n	347e <_printf_i+0xca>
    3472:	0640      	lsls	r0, r0, #25
    3474:	d5f9      	bpl.n	346a <_printf_i+0xb6>
    3476:	680d      	ldr	r5, [r1, #0]
    3478:	1d08      	adds	r0, r1, #4
    347a:	6018      	str	r0, [r3, #0]
    347c:	b2ad      	uxth	r5, r5
    347e:	4b59      	ldr	r3, [pc, #356]	; (35e4 <_printf_i+0x230>)
    3480:	2708      	movs	r7, #8
    3482:	9303      	str	r3, [sp, #12]
    3484:	2a6f      	cmp	r2, #111	; 0x6f
    3486:	d018      	beq.n	34ba <_printf_i+0x106>
    3488:	270a      	movs	r7, #10
    348a:	e016      	b.n	34ba <_printf_i+0x106>
    348c:	3145      	adds	r1, #69	; 0x45
    348e:	700a      	strb	r2, [r1, #0]
    3490:	4a54      	ldr	r2, [pc, #336]	; (35e4 <_printf_i+0x230>)
    3492:	9203      	str	r2, [sp, #12]
    3494:	681a      	ldr	r2, [r3, #0]
    3496:	6821      	ldr	r1, [r4, #0]
    3498:	1d10      	adds	r0, r2, #4
    349a:	6018      	str	r0, [r3, #0]
    349c:	6815      	ldr	r5, [r2, #0]
    349e:	0608      	lsls	r0, r1, #24
    34a0:	d522      	bpl.n	34e8 <_printf_i+0x134>
    34a2:	07cb      	lsls	r3, r1, #31
    34a4:	d502      	bpl.n	34ac <_printf_i+0xf8>
    34a6:	2320      	movs	r3, #32
    34a8:	4319      	orrs	r1, r3
    34aa:	6021      	str	r1, [r4, #0]
    34ac:	2710      	movs	r7, #16
    34ae:	2d00      	cmp	r5, #0
    34b0:	d103      	bne.n	34ba <_printf_i+0x106>
    34b2:	2320      	movs	r3, #32
    34b4:	6822      	ldr	r2, [r4, #0]
    34b6:	439a      	bics	r2, r3
    34b8:	6022      	str	r2, [r4, #0]
    34ba:	0023      	movs	r3, r4
    34bc:	2200      	movs	r2, #0
    34be:	3343      	adds	r3, #67	; 0x43
    34c0:	701a      	strb	r2, [r3, #0]
    34c2:	6863      	ldr	r3, [r4, #4]
    34c4:	60a3      	str	r3, [r4, #8]
    34c6:	2b00      	cmp	r3, #0
    34c8:	db5c      	blt.n	3584 <_printf_i+0x1d0>
    34ca:	2204      	movs	r2, #4
    34cc:	6821      	ldr	r1, [r4, #0]
    34ce:	4391      	bics	r1, r2
    34d0:	6021      	str	r1, [r4, #0]
    34d2:	2d00      	cmp	r5, #0
    34d4:	d158      	bne.n	3588 <_printf_i+0x1d4>
    34d6:	9e04      	ldr	r6, [sp, #16]
    34d8:	2b00      	cmp	r3, #0
    34da:	d064      	beq.n	35a6 <_printf_i+0x1f2>
    34dc:	0026      	movs	r6, r4
    34de:	9b03      	ldr	r3, [sp, #12]
    34e0:	3642      	adds	r6, #66	; 0x42
    34e2:	781b      	ldrb	r3, [r3, #0]
    34e4:	7033      	strb	r3, [r6, #0]
    34e6:	e05e      	b.n	35a6 <_printf_i+0x1f2>
    34e8:	0648      	lsls	r0, r1, #25
    34ea:	d5da      	bpl.n	34a2 <_printf_i+0xee>
    34ec:	b2ad      	uxth	r5, r5
    34ee:	e7d8      	b.n	34a2 <_printf_i+0xee>
    34f0:	6809      	ldr	r1, [r1, #0]
    34f2:	681a      	ldr	r2, [r3, #0]
    34f4:	0608      	lsls	r0, r1, #24
    34f6:	d505      	bpl.n	3504 <_printf_i+0x150>
    34f8:	1d11      	adds	r1, r2, #4
    34fa:	6019      	str	r1, [r3, #0]
    34fc:	6813      	ldr	r3, [r2, #0]
    34fe:	6962      	ldr	r2, [r4, #20]
    3500:	601a      	str	r2, [r3, #0]
    3502:	e006      	b.n	3512 <_printf_i+0x15e>
    3504:	0649      	lsls	r1, r1, #25
    3506:	d5f7      	bpl.n	34f8 <_printf_i+0x144>
    3508:	1d11      	adds	r1, r2, #4
    350a:	6019      	str	r1, [r3, #0]
    350c:	6813      	ldr	r3, [r2, #0]
    350e:	8aa2      	ldrh	r2, [r4, #20]
    3510:	801a      	strh	r2, [r3, #0]
    3512:	2300      	movs	r3, #0
    3514:	9e04      	ldr	r6, [sp, #16]
    3516:	6123      	str	r3, [r4, #16]
    3518:	e054      	b.n	35c4 <_printf_i+0x210>
    351a:	681a      	ldr	r2, [r3, #0]
    351c:	1d11      	adds	r1, r2, #4
    351e:	6019      	str	r1, [r3, #0]
    3520:	6816      	ldr	r6, [r2, #0]
    3522:	2100      	movs	r1, #0
    3524:	6862      	ldr	r2, [r4, #4]
    3526:	0030      	movs	r0, r6
    3528:	f000 f9e6 	bl	38f8 <memchr>
    352c:	2800      	cmp	r0, #0
    352e:	d001      	beq.n	3534 <_printf_i+0x180>
    3530:	1b80      	subs	r0, r0, r6
    3532:	6060      	str	r0, [r4, #4]
    3534:	6863      	ldr	r3, [r4, #4]
    3536:	6123      	str	r3, [r4, #16]
    3538:	2300      	movs	r3, #0
    353a:	9a04      	ldr	r2, [sp, #16]
    353c:	7013      	strb	r3, [r2, #0]
    353e:	e041      	b.n	35c4 <_printf_i+0x210>
    3540:	6923      	ldr	r3, [r4, #16]
    3542:	0032      	movs	r2, r6
    3544:	9906      	ldr	r1, [sp, #24]
    3546:	9805      	ldr	r0, [sp, #20]
    3548:	9d07      	ldr	r5, [sp, #28]
    354a:	47a8      	blx	r5
    354c:	1c43      	adds	r3, r0, #1
    354e:	d043      	beq.n	35d8 <_printf_i+0x224>
    3550:	6823      	ldr	r3, [r4, #0]
    3552:	2500      	movs	r5, #0
    3554:	079b      	lsls	r3, r3, #30
    3556:	d40f      	bmi.n	3578 <_printf_i+0x1c4>
    3558:	9b09      	ldr	r3, [sp, #36]	; 0x24
    355a:	68e0      	ldr	r0, [r4, #12]
    355c:	4298      	cmp	r0, r3
    355e:	da3d      	bge.n	35dc <_printf_i+0x228>
    3560:	0018      	movs	r0, r3
    3562:	e03b      	b.n	35dc <_printf_i+0x228>
    3564:	0022      	movs	r2, r4
    3566:	2301      	movs	r3, #1
    3568:	3219      	adds	r2, #25
    356a:	9906      	ldr	r1, [sp, #24]
    356c:	9805      	ldr	r0, [sp, #20]
    356e:	9e07      	ldr	r6, [sp, #28]
    3570:	47b0      	blx	r6
    3572:	1c43      	adds	r3, r0, #1
    3574:	d030      	beq.n	35d8 <_printf_i+0x224>
    3576:	3501      	adds	r5, #1
    3578:	68e3      	ldr	r3, [r4, #12]
    357a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    357c:	1a9b      	subs	r3, r3, r2
    357e:	429d      	cmp	r5, r3
    3580:	dbf0      	blt.n	3564 <_printf_i+0x1b0>
    3582:	e7e9      	b.n	3558 <_printf_i+0x1a4>
    3584:	2d00      	cmp	r5, #0
    3586:	d0a9      	beq.n	34dc <_printf_i+0x128>
    3588:	9e04      	ldr	r6, [sp, #16]
    358a:	0028      	movs	r0, r5
    358c:	0039      	movs	r1, r7
    358e:	f7fe fc7b 	bl	1e88 <__aeabi_uidivmod>
    3592:	9b03      	ldr	r3, [sp, #12]
    3594:	3e01      	subs	r6, #1
    3596:	5c5b      	ldrb	r3, [r3, r1]
    3598:	0028      	movs	r0, r5
    359a:	7033      	strb	r3, [r6, #0]
    359c:	0039      	movs	r1, r7
    359e:	f7fe fbed 	bl	1d7c <__udivsi3>
    35a2:	1e05      	subs	r5, r0, #0
    35a4:	d1f1      	bne.n	358a <_printf_i+0x1d6>
    35a6:	2f08      	cmp	r7, #8
    35a8:	d109      	bne.n	35be <_printf_i+0x20a>
    35aa:	6823      	ldr	r3, [r4, #0]
    35ac:	07db      	lsls	r3, r3, #31
    35ae:	d506      	bpl.n	35be <_printf_i+0x20a>
    35b0:	6863      	ldr	r3, [r4, #4]
    35b2:	6922      	ldr	r2, [r4, #16]
    35b4:	4293      	cmp	r3, r2
    35b6:	dc02      	bgt.n	35be <_printf_i+0x20a>
    35b8:	2330      	movs	r3, #48	; 0x30
    35ba:	3e01      	subs	r6, #1
    35bc:	7033      	strb	r3, [r6, #0]
    35be:	9b04      	ldr	r3, [sp, #16]
    35c0:	1b9b      	subs	r3, r3, r6
    35c2:	6123      	str	r3, [r4, #16]
    35c4:	9b07      	ldr	r3, [sp, #28]
    35c6:	aa09      	add	r2, sp, #36	; 0x24
    35c8:	9300      	str	r3, [sp, #0]
    35ca:	0021      	movs	r1, r4
    35cc:	9b06      	ldr	r3, [sp, #24]
    35ce:	9805      	ldr	r0, [sp, #20]
    35d0:	f7ff fe82 	bl	32d8 <_printf_common>
    35d4:	1c43      	adds	r3, r0, #1
    35d6:	d1b3      	bne.n	3540 <_printf_i+0x18c>
    35d8:	2001      	movs	r0, #1
    35da:	4240      	negs	r0, r0
    35dc:	b00b      	add	sp, #44	; 0x2c
    35de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    35e0:	00003b2e 	.word	0x00003b2e
    35e4:	00003b1d 	.word	0x00003b1d

000035e8 <_sbrk_r>:
    35e8:	2300      	movs	r3, #0
    35ea:	b570      	push	{r4, r5, r6, lr}
    35ec:	4c06      	ldr	r4, [pc, #24]	; (3608 <_sbrk_r+0x20>)
    35ee:	0005      	movs	r5, r0
    35f0:	0008      	movs	r0, r1
    35f2:	6023      	str	r3, [r4, #0]
    35f4:	f7fe f884 	bl	1700 <_sbrk>
    35f8:	1c43      	adds	r3, r0, #1
    35fa:	d103      	bne.n	3604 <_sbrk_r+0x1c>
    35fc:	6823      	ldr	r3, [r4, #0]
    35fe:	2b00      	cmp	r3, #0
    3600:	d000      	beq.n	3604 <_sbrk_r+0x1c>
    3602:	602b      	str	r3, [r5, #0]
    3604:	bd70      	pop	{r4, r5, r6, pc}
    3606:	46c0      	nop			; (mov r8, r8)
    3608:	200001c0 	.word	0x200001c0

0000360c <__sread>:
    360c:	b570      	push	{r4, r5, r6, lr}
    360e:	000c      	movs	r4, r1
    3610:	250e      	movs	r5, #14
    3612:	5f49      	ldrsh	r1, [r1, r5]
    3614:	f000 f97e 	bl	3914 <_read_r>
    3618:	2800      	cmp	r0, #0
    361a:	db03      	blt.n	3624 <__sread+0x18>
    361c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    361e:	181b      	adds	r3, r3, r0
    3620:	6563      	str	r3, [r4, #84]	; 0x54
    3622:	bd70      	pop	{r4, r5, r6, pc}
    3624:	89a3      	ldrh	r3, [r4, #12]
    3626:	4a02      	ldr	r2, [pc, #8]	; (3630 <__sread+0x24>)
    3628:	4013      	ands	r3, r2
    362a:	81a3      	strh	r3, [r4, #12]
    362c:	e7f9      	b.n	3622 <__sread+0x16>
    362e:	46c0      	nop			; (mov r8, r8)
    3630:	ffffefff 	.word	0xffffefff

00003634 <__swrite>:
    3634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3636:	001f      	movs	r7, r3
    3638:	898b      	ldrh	r3, [r1, #12]
    363a:	0005      	movs	r5, r0
    363c:	000c      	movs	r4, r1
    363e:	0016      	movs	r6, r2
    3640:	05db      	lsls	r3, r3, #23
    3642:	d505      	bpl.n	3650 <__swrite+0x1c>
    3644:	230e      	movs	r3, #14
    3646:	5ec9      	ldrsh	r1, [r1, r3]
    3648:	2200      	movs	r2, #0
    364a:	2302      	movs	r3, #2
    364c:	f000 f940 	bl	38d0 <_lseek_r>
    3650:	89a3      	ldrh	r3, [r4, #12]
    3652:	4a05      	ldr	r2, [pc, #20]	; (3668 <__swrite+0x34>)
    3654:	0028      	movs	r0, r5
    3656:	4013      	ands	r3, r2
    3658:	81a3      	strh	r3, [r4, #12]
    365a:	0032      	movs	r2, r6
    365c:	230e      	movs	r3, #14
    365e:	5ee1      	ldrsh	r1, [r4, r3]
    3660:	003b      	movs	r3, r7
    3662:	f000 f875 	bl	3750 <_write_r>
    3666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3668:	ffffefff 	.word	0xffffefff

0000366c <__sseek>:
    366c:	b570      	push	{r4, r5, r6, lr}
    366e:	000c      	movs	r4, r1
    3670:	250e      	movs	r5, #14
    3672:	5f49      	ldrsh	r1, [r1, r5]
    3674:	f000 f92c 	bl	38d0 <_lseek_r>
    3678:	89a3      	ldrh	r3, [r4, #12]
    367a:	1c42      	adds	r2, r0, #1
    367c:	d103      	bne.n	3686 <__sseek+0x1a>
    367e:	4a05      	ldr	r2, [pc, #20]	; (3694 <__sseek+0x28>)
    3680:	4013      	ands	r3, r2
    3682:	81a3      	strh	r3, [r4, #12]
    3684:	bd70      	pop	{r4, r5, r6, pc}
    3686:	2280      	movs	r2, #128	; 0x80
    3688:	0152      	lsls	r2, r2, #5
    368a:	4313      	orrs	r3, r2
    368c:	81a3      	strh	r3, [r4, #12]
    368e:	6560      	str	r0, [r4, #84]	; 0x54
    3690:	e7f8      	b.n	3684 <__sseek+0x18>
    3692:	46c0      	nop			; (mov r8, r8)
    3694:	ffffefff 	.word	0xffffefff

00003698 <__sclose>:
    3698:	b510      	push	{r4, lr}
    369a:	230e      	movs	r3, #14
    369c:	5ec9      	ldrsh	r1, [r1, r3]
    369e:	f000 f8e1 	bl	3864 <_close_r>
    36a2:	bd10      	pop	{r4, pc}

000036a4 <__swbuf_r>:
    36a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    36a6:	0005      	movs	r5, r0
    36a8:	000e      	movs	r6, r1
    36aa:	0014      	movs	r4, r2
    36ac:	2800      	cmp	r0, #0
    36ae:	d004      	beq.n	36ba <__swbuf_r+0x16>
    36b0:	6983      	ldr	r3, [r0, #24]
    36b2:	2b00      	cmp	r3, #0
    36b4:	d101      	bne.n	36ba <__swbuf_r+0x16>
    36b6:	f7ff fb1d 	bl	2cf4 <__sinit>
    36ba:	4b22      	ldr	r3, [pc, #136]	; (3744 <__swbuf_r+0xa0>)
    36bc:	429c      	cmp	r4, r3
    36be:	d12d      	bne.n	371c <__swbuf_r+0x78>
    36c0:	686c      	ldr	r4, [r5, #4]
    36c2:	69a3      	ldr	r3, [r4, #24]
    36c4:	60a3      	str	r3, [r4, #8]
    36c6:	89a3      	ldrh	r3, [r4, #12]
    36c8:	071b      	lsls	r3, r3, #28
    36ca:	d531      	bpl.n	3730 <__swbuf_r+0x8c>
    36cc:	6923      	ldr	r3, [r4, #16]
    36ce:	2b00      	cmp	r3, #0
    36d0:	d02e      	beq.n	3730 <__swbuf_r+0x8c>
    36d2:	6823      	ldr	r3, [r4, #0]
    36d4:	6922      	ldr	r2, [r4, #16]
    36d6:	b2f7      	uxtb	r7, r6
    36d8:	1a98      	subs	r0, r3, r2
    36da:	6963      	ldr	r3, [r4, #20]
    36dc:	b2f6      	uxtb	r6, r6
    36de:	4298      	cmp	r0, r3
    36e0:	db05      	blt.n	36ee <__swbuf_r+0x4a>
    36e2:	0021      	movs	r1, r4
    36e4:	0028      	movs	r0, r5
    36e6:	f7ff fa97 	bl	2c18 <_fflush_r>
    36ea:	2800      	cmp	r0, #0
    36ec:	d126      	bne.n	373c <__swbuf_r+0x98>
    36ee:	68a3      	ldr	r3, [r4, #8]
    36f0:	3001      	adds	r0, #1
    36f2:	3b01      	subs	r3, #1
    36f4:	60a3      	str	r3, [r4, #8]
    36f6:	6823      	ldr	r3, [r4, #0]
    36f8:	1c5a      	adds	r2, r3, #1
    36fa:	6022      	str	r2, [r4, #0]
    36fc:	701f      	strb	r7, [r3, #0]
    36fe:	6963      	ldr	r3, [r4, #20]
    3700:	4298      	cmp	r0, r3
    3702:	d004      	beq.n	370e <__swbuf_r+0x6a>
    3704:	89a3      	ldrh	r3, [r4, #12]
    3706:	07db      	lsls	r3, r3, #31
    3708:	d51a      	bpl.n	3740 <__swbuf_r+0x9c>
    370a:	2e0a      	cmp	r6, #10
    370c:	d118      	bne.n	3740 <__swbuf_r+0x9c>
    370e:	0021      	movs	r1, r4
    3710:	0028      	movs	r0, r5
    3712:	f7ff fa81 	bl	2c18 <_fflush_r>
    3716:	2800      	cmp	r0, #0
    3718:	d012      	beq.n	3740 <__swbuf_r+0x9c>
    371a:	e00f      	b.n	373c <__swbuf_r+0x98>
    371c:	4b0a      	ldr	r3, [pc, #40]	; (3748 <__swbuf_r+0xa4>)
    371e:	429c      	cmp	r4, r3
    3720:	d101      	bne.n	3726 <__swbuf_r+0x82>
    3722:	68ac      	ldr	r4, [r5, #8]
    3724:	e7cd      	b.n	36c2 <__swbuf_r+0x1e>
    3726:	4b09      	ldr	r3, [pc, #36]	; (374c <__swbuf_r+0xa8>)
    3728:	429c      	cmp	r4, r3
    372a:	d1ca      	bne.n	36c2 <__swbuf_r+0x1e>
    372c:	68ec      	ldr	r4, [r5, #12]
    372e:	e7c8      	b.n	36c2 <__swbuf_r+0x1e>
    3730:	0021      	movs	r1, r4
    3732:	0028      	movs	r0, r5
    3734:	f000 f820 	bl	3778 <__swsetup_r>
    3738:	2800      	cmp	r0, #0
    373a:	d0ca      	beq.n	36d2 <__swbuf_r+0x2e>
    373c:	2601      	movs	r6, #1
    373e:	4276      	negs	r6, r6
    3740:	0030      	movs	r0, r6
    3742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3744:	00003acc 	.word	0x00003acc
    3748:	00003aec 	.word	0x00003aec
    374c:	00003aac 	.word	0x00003aac

00003750 <_write_r>:
    3750:	b570      	push	{r4, r5, r6, lr}
    3752:	0005      	movs	r5, r0
    3754:	0008      	movs	r0, r1
    3756:	0011      	movs	r1, r2
    3758:	2200      	movs	r2, #0
    375a:	4c06      	ldr	r4, [pc, #24]	; (3774 <_write_r+0x24>)
    375c:	6022      	str	r2, [r4, #0]
    375e:	001a      	movs	r2, r3
    3760:	f7fd f8ca 	bl	8f8 <_write>
    3764:	1c43      	adds	r3, r0, #1
    3766:	d103      	bne.n	3770 <_write_r+0x20>
    3768:	6823      	ldr	r3, [r4, #0]
    376a:	2b00      	cmp	r3, #0
    376c:	d000      	beq.n	3770 <_write_r+0x20>
    376e:	602b      	str	r3, [r5, #0]
    3770:	bd70      	pop	{r4, r5, r6, pc}
    3772:	46c0      	nop			; (mov r8, r8)
    3774:	200001c0 	.word	0x200001c0

00003778 <__swsetup_r>:
    3778:	4b36      	ldr	r3, [pc, #216]	; (3854 <__swsetup_r+0xdc>)
    377a:	b570      	push	{r4, r5, r6, lr}
    377c:	681d      	ldr	r5, [r3, #0]
    377e:	0006      	movs	r6, r0
    3780:	000c      	movs	r4, r1
    3782:	2d00      	cmp	r5, #0
    3784:	d005      	beq.n	3792 <__swsetup_r+0x1a>
    3786:	69ab      	ldr	r3, [r5, #24]
    3788:	2b00      	cmp	r3, #0
    378a:	d102      	bne.n	3792 <__swsetup_r+0x1a>
    378c:	0028      	movs	r0, r5
    378e:	f7ff fab1 	bl	2cf4 <__sinit>
    3792:	4b31      	ldr	r3, [pc, #196]	; (3858 <__swsetup_r+0xe0>)
    3794:	429c      	cmp	r4, r3
    3796:	d10f      	bne.n	37b8 <__swsetup_r+0x40>
    3798:	686c      	ldr	r4, [r5, #4]
    379a:	230c      	movs	r3, #12
    379c:	5ee2      	ldrsh	r2, [r4, r3]
    379e:	b293      	uxth	r3, r2
    37a0:	0719      	lsls	r1, r3, #28
    37a2:	d42d      	bmi.n	3800 <__swsetup_r+0x88>
    37a4:	06d9      	lsls	r1, r3, #27
    37a6:	d411      	bmi.n	37cc <__swsetup_r+0x54>
    37a8:	2309      	movs	r3, #9
    37aa:	2001      	movs	r0, #1
    37ac:	6033      	str	r3, [r6, #0]
    37ae:	3337      	adds	r3, #55	; 0x37
    37b0:	4313      	orrs	r3, r2
    37b2:	81a3      	strh	r3, [r4, #12]
    37b4:	4240      	negs	r0, r0
    37b6:	bd70      	pop	{r4, r5, r6, pc}
    37b8:	4b28      	ldr	r3, [pc, #160]	; (385c <__swsetup_r+0xe4>)
    37ba:	429c      	cmp	r4, r3
    37bc:	d101      	bne.n	37c2 <__swsetup_r+0x4a>
    37be:	68ac      	ldr	r4, [r5, #8]
    37c0:	e7eb      	b.n	379a <__swsetup_r+0x22>
    37c2:	4b27      	ldr	r3, [pc, #156]	; (3860 <__swsetup_r+0xe8>)
    37c4:	429c      	cmp	r4, r3
    37c6:	d1e8      	bne.n	379a <__swsetup_r+0x22>
    37c8:	68ec      	ldr	r4, [r5, #12]
    37ca:	e7e6      	b.n	379a <__swsetup_r+0x22>
    37cc:	075b      	lsls	r3, r3, #29
    37ce:	d513      	bpl.n	37f8 <__swsetup_r+0x80>
    37d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
    37d2:	2900      	cmp	r1, #0
    37d4:	d008      	beq.n	37e8 <__swsetup_r+0x70>
    37d6:	0023      	movs	r3, r4
    37d8:	3344      	adds	r3, #68	; 0x44
    37da:	4299      	cmp	r1, r3
    37dc:	d002      	beq.n	37e4 <__swsetup_r+0x6c>
    37de:	0030      	movs	r0, r6
    37e0:	f7ff fb8e 	bl	2f00 <_free_r>
    37e4:	2300      	movs	r3, #0
    37e6:	6363      	str	r3, [r4, #52]	; 0x34
    37e8:	2224      	movs	r2, #36	; 0x24
    37ea:	89a3      	ldrh	r3, [r4, #12]
    37ec:	4393      	bics	r3, r2
    37ee:	81a3      	strh	r3, [r4, #12]
    37f0:	2300      	movs	r3, #0
    37f2:	6063      	str	r3, [r4, #4]
    37f4:	6923      	ldr	r3, [r4, #16]
    37f6:	6023      	str	r3, [r4, #0]
    37f8:	2308      	movs	r3, #8
    37fa:	89a2      	ldrh	r2, [r4, #12]
    37fc:	4313      	orrs	r3, r2
    37fe:	81a3      	strh	r3, [r4, #12]
    3800:	6923      	ldr	r3, [r4, #16]
    3802:	2b00      	cmp	r3, #0
    3804:	d10b      	bne.n	381e <__swsetup_r+0xa6>
    3806:	21a0      	movs	r1, #160	; 0xa0
    3808:	2280      	movs	r2, #128	; 0x80
    380a:	89a3      	ldrh	r3, [r4, #12]
    380c:	0089      	lsls	r1, r1, #2
    380e:	0092      	lsls	r2, r2, #2
    3810:	400b      	ands	r3, r1
    3812:	4293      	cmp	r3, r2
    3814:	d003      	beq.n	381e <__swsetup_r+0xa6>
    3816:	0021      	movs	r1, r4
    3818:	0030      	movs	r0, r6
    381a:	f7ff fb29 	bl	2e70 <__smakebuf_r>
    381e:	2301      	movs	r3, #1
    3820:	89a2      	ldrh	r2, [r4, #12]
    3822:	4013      	ands	r3, r2
    3824:	d011      	beq.n	384a <__swsetup_r+0xd2>
    3826:	2300      	movs	r3, #0
    3828:	60a3      	str	r3, [r4, #8]
    382a:	6963      	ldr	r3, [r4, #20]
    382c:	425b      	negs	r3, r3
    382e:	61a3      	str	r3, [r4, #24]
    3830:	2000      	movs	r0, #0
    3832:	6923      	ldr	r3, [r4, #16]
    3834:	4283      	cmp	r3, r0
    3836:	d1be      	bne.n	37b6 <__swsetup_r+0x3e>
    3838:	230c      	movs	r3, #12
    383a:	5ee2      	ldrsh	r2, [r4, r3]
    383c:	0613      	lsls	r3, r2, #24
    383e:	d5ba      	bpl.n	37b6 <__swsetup_r+0x3e>
    3840:	2340      	movs	r3, #64	; 0x40
    3842:	4313      	orrs	r3, r2
    3844:	81a3      	strh	r3, [r4, #12]
    3846:	3801      	subs	r0, #1
    3848:	e7b5      	b.n	37b6 <__swsetup_r+0x3e>
    384a:	0792      	lsls	r2, r2, #30
    384c:	d400      	bmi.n	3850 <__swsetup_r+0xd8>
    384e:	6963      	ldr	r3, [r4, #20]
    3850:	60a3      	str	r3, [r4, #8]
    3852:	e7ed      	b.n	3830 <__swsetup_r+0xb8>
    3854:	20000020 	.word	0x20000020
    3858:	00003acc 	.word	0x00003acc
    385c:	00003aec 	.word	0x00003aec
    3860:	00003aac 	.word	0x00003aac

00003864 <_close_r>:
    3864:	2300      	movs	r3, #0
    3866:	b570      	push	{r4, r5, r6, lr}
    3868:	4c06      	ldr	r4, [pc, #24]	; (3884 <_close_r+0x20>)
    386a:	0005      	movs	r5, r0
    386c:	0008      	movs	r0, r1
    386e:	6023      	str	r3, [r4, #0]
    3870:	f7fd ff58 	bl	1724 <_close>
    3874:	1c43      	adds	r3, r0, #1
    3876:	d103      	bne.n	3880 <_close_r+0x1c>
    3878:	6823      	ldr	r3, [r4, #0]
    387a:	2b00      	cmp	r3, #0
    387c:	d000      	beq.n	3880 <_close_r+0x1c>
    387e:	602b      	str	r3, [r5, #0]
    3880:	bd70      	pop	{r4, r5, r6, pc}
    3882:	46c0      	nop			; (mov r8, r8)
    3884:	200001c0 	.word	0x200001c0

00003888 <_fstat_r>:
    3888:	2300      	movs	r3, #0
    388a:	b570      	push	{r4, r5, r6, lr}
    388c:	4c06      	ldr	r4, [pc, #24]	; (38a8 <_fstat_r+0x20>)
    388e:	0005      	movs	r5, r0
    3890:	0008      	movs	r0, r1
    3892:	0011      	movs	r1, r2
    3894:	6023      	str	r3, [r4, #0]
    3896:	f7fd ff48 	bl	172a <_fstat>
    389a:	1c43      	adds	r3, r0, #1
    389c:	d103      	bne.n	38a6 <_fstat_r+0x1e>
    389e:	6823      	ldr	r3, [r4, #0]
    38a0:	2b00      	cmp	r3, #0
    38a2:	d000      	beq.n	38a6 <_fstat_r+0x1e>
    38a4:	602b      	str	r3, [r5, #0]
    38a6:	bd70      	pop	{r4, r5, r6, pc}
    38a8:	200001c0 	.word	0x200001c0

000038ac <_isatty_r>:
    38ac:	2300      	movs	r3, #0
    38ae:	b570      	push	{r4, r5, r6, lr}
    38b0:	4c06      	ldr	r4, [pc, #24]	; (38cc <_isatty_r+0x20>)
    38b2:	0005      	movs	r5, r0
    38b4:	0008      	movs	r0, r1
    38b6:	6023      	str	r3, [r4, #0]
    38b8:	f7fd ff3c 	bl	1734 <_isatty>
    38bc:	1c43      	adds	r3, r0, #1
    38be:	d103      	bne.n	38c8 <_isatty_r+0x1c>
    38c0:	6823      	ldr	r3, [r4, #0]
    38c2:	2b00      	cmp	r3, #0
    38c4:	d000      	beq.n	38c8 <_isatty_r+0x1c>
    38c6:	602b      	str	r3, [r5, #0]
    38c8:	bd70      	pop	{r4, r5, r6, pc}
    38ca:	46c0      	nop			; (mov r8, r8)
    38cc:	200001c0 	.word	0x200001c0

000038d0 <_lseek_r>:
    38d0:	b570      	push	{r4, r5, r6, lr}
    38d2:	0005      	movs	r5, r0
    38d4:	0008      	movs	r0, r1
    38d6:	0011      	movs	r1, r2
    38d8:	2200      	movs	r2, #0
    38da:	4c06      	ldr	r4, [pc, #24]	; (38f4 <_lseek_r+0x24>)
    38dc:	6022      	str	r2, [r4, #0]
    38de:	001a      	movs	r2, r3
    38e0:	f7fd ff2a 	bl	1738 <_lseek>
    38e4:	1c43      	adds	r3, r0, #1
    38e6:	d103      	bne.n	38f0 <_lseek_r+0x20>
    38e8:	6823      	ldr	r3, [r4, #0]
    38ea:	2b00      	cmp	r3, #0
    38ec:	d000      	beq.n	38f0 <_lseek_r+0x20>
    38ee:	602b      	str	r3, [r5, #0]
    38f0:	bd70      	pop	{r4, r5, r6, pc}
    38f2:	46c0      	nop			; (mov r8, r8)
    38f4:	200001c0 	.word	0x200001c0

000038f8 <memchr>:
    38f8:	b2c9      	uxtb	r1, r1
    38fa:	1882      	adds	r2, r0, r2
    38fc:	4290      	cmp	r0, r2
    38fe:	d101      	bne.n	3904 <memchr+0xc>
    3900:	2000      	movs	r0, #0
    3902:	4770      	bx	lr
    3904:	7803      	ldrb	r3, [r0, #0]
    3906:	428b      	cmp	r3, r1
    3908:	d0fb      	beq.n	3902 <memchr+0xa>
    390a:	3001      	adds	r0, #1
    390c:	e7f6      	b.n	38fc <memchr+0x4>

0000390e <__malloc_lock>:
    390e:	4770      	bx	lr

00003910 <__malloc_unlock>:
    3910:	4770      	bx	lr
	...

00003914 <_read_r>:
    3914:	b570      	push	{r4, r5, r6, lr}
    3916:	0005      	movs	r5, r0
    3918:	0008      	movs	r0, r1
    391a:	0011      	movs	r1, r2
    391c:	2200      	movs	r2, #0
    391e:	4c06      	ldr	r4, [pc, #24]	; (3938 <_read_r+0x24>)
    3920:	6022      	str	r2, [r4, #0]
    3922:	001a      	movs	r2, r3
    3924:	f7fc ffc6 	bl	8b4 <_read>
    3928:	1c43      	adds	r3, r0, #1
    392a:	d103      	bne.n	3934 <_read_r+0x20>
    392c:	6823      	ldr	r3, [r4, #0]
    392e:	2b00      	cmp	r3, #0
    3930:	d000      	beq.n	3934 <_read_r+0x20>
    3932:	602b      	str	r3, [r5, #0]
    3934:	bd70      	pop	{r4, r5, r6, pc}
    3936:	46c0      	nop			; (mov r8, r8)
    3938:	200001c0 	.word	0x200001c0
    393c:	42000800 	.word	0x42000800
    3940:	42000c00 	.word	0x42000c00
    3944:	42001000 	.word	0x42001000
    3948:	42001400 	.word	0x42001400
    394c:	42001800 	.word	0x42001800
    3950:	42001c00 	.word	0x42001c00
    3954:	42002c00 	.word	0x42002c00
    3958:	42003000 	.word	0x42003000
    395c:	42003400 	.word	0x42003400
    3960:	0000106a 	.word	0x0000106a
    3964:	00001066 	.word	0x00001066
    3968:	00001066 	.word	0x00001066
    396c:	000010c8 	.word	0x000010c8
    3970:	000010c8 	.word	0x000010c8
    3974:	0000107e 	.word	0x0000107e
    3978:	00001070 	.word	0x00001070
    397c:	00001084 	.word	0x00001084
    3980:	000010b6 	.word	0x000010b6
    3984:	00001150 	.word	0x00001150
    3988:	00001130 	.word	0x00001130
    398c:	00001130 	.word	0x00001130
    3990:	000011bc 	.word	0x000011bc
    3994:	00001142 	.word	0x00001142
    3998:	0000115e 	.word	0x0000115e
    399c:	00001134 	.word	0x00001134
    39a0:	0000116c 	.word	0x0000116c
    39a4:	000011ac 	.word	0x000011ac
    39a8:	00001960 	.word	0x00001960
    39ac:	00001944 	.word	0x00001944
    39b0:	00001948 	.word	0x00001948
    39b4:	0000194c 	.word	0x0000194c
    39b8:	00001950 	.word	0x00001950
    39bc:	00001954 	.word	0x00001954
    39c0:	00001958 	.word	0x00001958
    39c4:	00646572 	.word	0x00646572
    39c8:	6e61726f 	.word	0x6e61726f
    39cc:	00006567 	.word	0x00006567
    39d0:	6c6c6579 	.word	0x6c6c6579
    39d4:	0000776f 	.word	0x0000776f
    39d8:	65657267 	.word	0x65657267
    39dc:	0000006e 	.word	0x0000006e
    39e0:	65756c62 	.word	0x65756c62
    39e4:	00000000 	.word	0x00000000
    39e8:	00796b73 	.word	0x00796b73
    39ec:	70727570 	.word	0x70727570
    39f0:	0000656c 	.word	0x0000656c
    39f4:	454e4f4e 	.word	0x454e4f4e
    39f8:	00000000 	.word	0x00000000
    39fc:	2c643325 	.word	0x2c643325
    3a00:	64332520 	.word	0x64332520
    3a04:	3325202c 	.word	0x3325202c
    3a08:	207c2064 	.word	0x207c2064
    3a0c:	2c643325 	.word	0x2c643325
    3a10:	64332520 	.word	0x64332520
    3a14:	3325202c 	.word	0x3325202c
    3a18:	207c2064 	.word	0x207c2064
    3a1c:	7c206425 	.word	0x7c206425
    3a20:	0a732520 	.word	0x0a732520
    3a24:	00000000 	.word	0x00000000
    3a28:	00002338 	.word	0x00002338
    3a2c:	00002308 	.word	0x00002308
    3a30:	0000231a 	.word	0x0000231a
    3a34:	0000225c 	.word	0x0000225c
    3a38:	0000231a 	.word	0x0000231a
    3a3c:	000022fe 	.word	0x000022fe
    3a40:	0000231a 	.word	0x0000231a
    3a44:	0000225c 	.word	0x0000225c
    3a48:	00002308 	.word	0x00002308
    3a4c:	00002308 	.word	0x00002308
    3a50:	000022fe 	.word	0x000022fe
    3a54:	0000225c 	.word	0x0000225c
    3a58:	00002264 	.word	0x00002264
    3a5c:	00002264 	.word	0x00002264
    3a60:	00002264 	.word	0x00002264
    3a64:	00002320 	.word	0x00002320
    3a68:	00002308 	.word	0x00002308
    3a6c:	00002308 	.word	0x00002308
    3a70:	000022dc 	.word	0x000022dc
    3a74:	000023c0 	.word	0x000023c0
    3a78:	000022dc 	.word	0x000022dc
    3a7c:	000022fe 	.word	0x000022fe
    3a80:	000022dc 	.word	0x000022dc
    3a84:	000023c0 	.word	0x000023c0
    3a88:	00002308 	.word	0x00002308
    3a8c:	00002308 	.word	0x00002308
    3a90:	000022fe 	.word	0x000022fe
    3a94:	000023c0 	.word	0x000023c0
    3a98:	00002264 	.word	0x00002264
    3a9c:	00002264 	.word	0x00002264
    3aa0:	00002264 	.word	0x00002264
    3aa4:	000023ca 	.word	0x000023ca

00003aa8 <_global_impure_ptr>:
    3aa8:	20000024                                $.. 

00003aac <__sf_fake_stderr>:
	...

00003acc <__sf_fake_stdin>:
	...

00003aec <__sf_fake_stdout>:
	...
    3b0c:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    3b1c:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    3b2c:	31300046 35343332 39383736 64636261     F.0123456789abcd
    3b3c:	00006665                                ef..

00003b40 <_init>:
    3b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3b42:	46c0      	nop			; (mov r8, r8)
    3b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3b46:	bc08      	pop	{r3}
    3b48:	469e      	mov	lr, r3
    3b4a:	4770      	bx	lr

00003b4c <__init_array_start>:
    3b4c:	000000dd 	.word	0x000000dd

00003b50 <_fini>:
    3b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3b52:	46c0      	nop			; (mov r8, r8)
    3b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3b56:	bc08      	pop	{r3}
    3b58:	469e      	mov	lr, r3
    3b5a:	4770      	bx	lr

00003b5c <__fini_array_start>:
    3b5c:	000000b5 	.word	0x000000b5
