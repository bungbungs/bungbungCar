
SPI_QUICK_START_SLAVE_CALLBACK3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d8c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000070  20000000  00002d8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000118  20000070  00002dfc  00020070  2**2
                  ALLOC
  3 .stack        00002000  20000188  00002f14  00020070  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
  6 .debug_info   000221a0  00000000  00000000  000200f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002ecb  00000000  00000000  00042291  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000068db  00000000  00000000  0004515c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000508  00000000  00000000  0004ba37  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000828  00000000  00000000  0004bf3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000193e7  00000000  00000000  0004c767  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000c685  00000000  00000000  00065b4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00083871  00000000  00000000  000721d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001368  00000000  00000000  000f5a44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002188 	.word	0x20002188
       4:	00001675 	.word	0x00001675
       8:	00001671 	.word	0x00001671
       c:	00001671 	.word	0x00001671
	...
      2c:	00001671 	.word	0x00001671
	...
      38:	00001671 	.word	0x00001671
      3c:	00001671 	.word	0x00001671
      40:	00001671 	.word	0x00001671
      44:	00001671 	.word	0x00001671
      48:	00001671 	.word	0x00001671
      4c:	00001671 	.word	0x00001671
      50:	00001671 	.word	0x00001671
      54:	00001671 	.word	0x00001671
      58:	00001671 	.word	0x00001671
      5c:	00001671 	.word	0x00001671
      60:	00001671 	.word	0x00001671
      64:	00000ca9 	.word	0x00000ca9
      68:	00000cb9 	.word	0x00000cb9
      6c:	00000cc9 	.word	0x00000cc9
      70:	00000cd9 	.word	0x00000cd9
      74:	00000ce9 	.word	0x00000ce9
      78:	00000cf9 	.word	0x00000cf9
      7c:	00001671 	.word	0x00001671
      80:	00001671 	.word	0x00001671
      84:	00001671 	.word	0x00001671
      88:	00001671 	.word	0x00001671
      8c:	00001671 	.word	0x00001671
      90:	00001671 	.word	0x00001671
	...
      9c:	00001671 	.word	0x00001671
      a0:	00001671 	.word	0x00001671
      a4:	00000000 	.word	0x00000000
      a8:	00001671 	.word	0x00001671
	...

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000070 	.word	0x20000070
      d4:	00000000 	.word	0x00000000
      d8:	00002d8c 	.word	0x00002d8c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000074 	.word	0x20000074
     108:	00002d8c 	.word	0x00002d8c
     10c:	00002d8c 	.word	0x00002d8c
     110:	00000000 	.word	0x00000000

00000114 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     114:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     116:	2000      	movs	r0, #0
     118:	4b08      	ldr	r3, [pc, #32]	; (13c <delay_init+0x28>)
     11a:	4798      	blx	r3
     11c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     11e:	4c08      	ldr	r4, [pc, #32]	; (140 <delay_init+0x2c>)
     120:	21fa      	movs	r1, #250	; 0xfa
     122:	0089      	lsls	r1, r1, #2
     124:	47a0      	blx	r4
     126:	4b07      	ldr	r3, [pc, #28]	; (144 <delay_init+0x30>)
     128:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     12a:	4907      	ldr	r1, [pc, #28]	; (148 <delay_init+0x34>)
     12c:	0028      	movs	r0, r5
     12e:	47a0      	blx	r4
     130:	4b06      	ldr	r3, [pc, #24]	; (14c <delay_init+0x38>)
     132:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     134:	2205      	movs	r2, #5
     136:	4b06      	ldr	r3, [pc, #24]	; (150 <delay_init+0x3c>)
     138:	601a      	str	r2, [r3, #0]
}
     13a:	bd70      	pop	{r4, r5, r6, pc}
     13c:	00001401 	.word	0x00001401
     140:	00001aa9 	.word	0x00001aa9
     144:	20000004 	.word	0x20000004
     148:	000f4240 	.word	0x000f4240
     14c:	20000000 	.word	0x20000000
     150:	e000e010 	.word	0xe000e010

00000154 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     154:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     156:	4b08      	ldr	r3, [pc, #32]	; (178 <delay_cycles_ms+0x24>)
     158:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     15a:	4a08      	ldr	r2, [pc, #32]	; (17c <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     15c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     15e:	2180      	movs	r1, #128	; 0x80
     160:	0249      	lsls	r1, r1, #9
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
	while (n--) {
     162:	e006      	b.n	172 <delay_cycles_ms+0x1e>
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
     164:	2c00      	cmp	r4, #0
     166:	d004      	beq.n	172 <delay_cycles_ms+0x1e>
		SysTick->LOAD = n;
     168:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     16a:	6095      	str	r5, [r2, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     16c:	6813      	ldr	r3, [r2, #0]
     16e:	420b      	tst	r3, r1
     170:	d0fc      	beq.n	16c <delay_cycles_ms+0x18>
     172:	3801      	subs	r0, #1
     174:	d2f6      	bcs.n	164 <delay_cycles_ms+0x10>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
}
     176:	bd30      	pop	{r4, r5, pc}
     178:	20000004 	.word	0x20000004
     17c:	e000e010 	.word	0xe000e010

00000180 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
     180:	b5f0      	push	{r4, r5, r6, r7, lr}
     182:	4647      	mov	r7, r8
     184:	b480      	push	{r7}
     186:	000c      	movs	r4, r1
     188:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
     18a:	2800      	cmp	r0, #0
     18c:	d10d      	bne.n	1aa <_read+0x2a>
		return -1;
	}

	for (; len > 0; --len) {
     18e:	2a00      	cmp	r2, #0
     190:	dd0e      	ble.n	1b0 <_read+0x30>
     192:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
     194:	4e08      	ldr	r6, [pc, #32]	; (1b8 <_read+0x38>)
     196:	4d09      	ldr	r5, [pc, #36]	; (1bc <_read+0x3c>)
     198:	6830      	ldr	r0, [r6, #0]
     19a:	0021      	movs	r1, r4
     19c:	682b      	ldr	r3, [r5, #0]
     19e:	4798      	blx	r3
		ptr++;
     1a0:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
     1a2:	42a7      	cmp	r7, r4
     1a4:	d1f8      	bne.n	198 <_read+0x18>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
     1a6:	4640      	mov	r0, r8
     1a8:	e003      	b.n	1b2 <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
     1aa:	2001      	movs	r0, #1
     1ac:	4240      	negs	r0, r0
     1ae:	e000      	b.n	1b2 <_read+0x32>
	}

	for (; len > 0; --len) {
     1b0:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
     1b2:	bc04      	pop	{r2}
     1b4:	4690      	mov	r8, r2
     1b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     1b8:	200000f4 	.word	0x200000f4
     1bc:	200000ec 	.word	0x200000ec

000001c0 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
     1c0:	b5f0      	push	{r4, r5, r6, r7, lr}
     1c2:	4647      	mov	r7, r8
     1c4:	b480      	push	{r7}
     1c6:	000e      	movs	r6, r1
     1c8:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
     1ca:	3801      	subs	r0, #1
     1cc:	2802      	cmp	r0, #2
     1ce:	d811      	bhi.n	1f4 <_write+0x34>
		return -1;
	}

	for (; len != 0; --len) {
     1d0:	2a00      	cmp	r2, #0
     1d2:	d012      	beq.n	1fa <_write+0x3a>
     1d4:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
     1d6:	4b0c      	ldr	r3, [pc, #48]	; (208 <_write+0x48>)
     1d8:	4698      	mov	r8, r3
     1da:	4f0c      	ldr	r7, [pc, #48]	; (20c <_write+0x4c>)
     1dc:	4643      	mov	r3, r8
     1de:	6818      	ldr	r0, [r3, #0]
     1e0:	5d31      	ldrb	r1, [r6, r4]
     1e2:	683b      	ldr	r3, [r7, #0]
     1e4:	4798      	blx	r3
     1e6:	2800      	cmp	r0, #0
     1e8:	db09      	blt.n	1fe <_write+0x3e>
			return -1;
		}
		++nChars;
     1ea:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
     1ec:	42a5      	cmp	r5, r4
     1ee:	d1f5      	bne.n	1dc <_write+0x1c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
     1f0:	0020      	movs	r0, r4
     1f2:	e006      	b.n	202 <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
     1f4:	2001      	movs	r0, #1
     1f6:	4240      	negs	r0, r0
     1f8:	e003      	b.n	202 <_write+0x42>
	}

	for (; len != 0; --len) {
     1fa:	2000      	movs	r0, #0
     1fc:	e001      	b.n	202 <_write+0x42>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
     1fe:	2001      	movs	r0, #1
     200:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
     202:	bc04      	pop	{r2}
     204:	4690      	mov	r8, r2
     206:	bdf0      	pop	{r4, r5, r6, r7, pc}
     208:	200000f4 	.word	0x200000f4
     20c:	200000f0 	.word	0x200000f0

00000210 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     210:	b5f0      	push	{r4, r5, r6, r7, lr}
     212:	465f      	mov	r7, fp
     214:	4656      	mov	r6, sl
     216:	464d      	mov	r5, r9
     218:	4644      	mov	r4, r8
     21a:	b4f0      	push	{r4, r5, r6, r7}
     21c:	b091      	sub	sp, #68	; 0x44
     21e:	0005      	movs	r5, r0
     220:	000c      	movs	r4, r1
     222:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     224:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     226:	0008      	movs	r0, r1
     228:	4bb9      	ldr	r3, [pc, #740]	; (510 <usart_init+0x300>)
     22a:	4798      	blx	r3
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     22c:	6822      	ldr	r2, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     22e:	2305      	movs	r3, #5
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     230:	07d2      	lsls	r2, r2, #31
     232:	d500      	bpl.n	236 <usart_init+0x26>
     234:	e164      	b.n	500 <usart_init+0x2f0>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     236:	6822      	ldr	r2, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
     238:	3317      	adds	r3, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     23a:	0792      	lsls	r2, r2, #30
     23c:	d500      	bpl.n	240 <usart_init+0x30>
     23e:	e15f      	b.n	500 <usart_init+0x2f0>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     240:	49b4      	ldr	r1, [pc, #720]	; (514 <usart_init+0x304>)
     242:	6a0a      	ldr	r2, [r1, #32]
     244:	1c87      	adds	r7, r0, #2
     246:	3b1b      	subs	r3, #27
     248:	40bb      	lsls	r3, r7
     24a:	4313      	orrs	r3, r2
     24c:	620b      	str	r3, [r1, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     24e:	a90f      	add	r1, sp, #60	; 0x3c
     250:	272d      	movs	r7, #45	; 0x2d
     252:	5df3      	ldrb	r3, [r6, r7]
     254:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     256:	3014      	adds	r0, #20
     258:	b2c3      	uxtb	r3, r0
     25a:	9302      	str	r3, [sp, #8]
     25c:	0018      	movs	r0, r3
     25e:	4bae      	ldr	r3, [pc, #696]	; (518 <usart_init+0x308>)
     260:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     262:	9802      	ldr	r0, [sp, #8]
     264:	4bad      	ldr	r3, [pc, #692]	; (51c <usart_init+0x30c>)
     266:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     268:	5df0      	ldrb	r0, [r6, r7]
     26a:	2100      	movs	r1, #0
     26c:	4bac      	ldr	r3, [pc, #688]	; (520 <usart_init+0x310>)
     26e:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
     270:	7af3      	ldrb	r3, [r6, #11]
     272:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
     274:	2324      	movs	r3, #36	; 0x24
     276:	5cf3      	ldrb	r3, [r6, r3]
     278:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     27a:	2325      	movs	r3, #37	; 0x25
     27c:	5cf3      	ldrb	r3, [r6, r3]
     27e:	71eb      	strb	r3, [r5, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
     280:	7ef3      	ldrb	r3, [r6, #27]
     282:	722b      	strb	r3, [r5, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     284:	7f33      	ldrb	r3, [r6, #28]
     286:	726b      	strb	r3, [r5, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     288:	682b      	ldr	r3, [r5, #0]
     28a:	4699      	mov	r9, r3

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     28c:	0018      	movs	r0, r3
     28e:	4ba0      	ldr	r3, [pc, #640]	; (510 <usart_init+0x300>)
     290:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     292:	3014      	adds	r0, #20
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
     294:	2200      	movs	r2, #0
     296:	230e      	movs	r3, #14
     298:	a906      	add	r1, sp, #24
     29a:	468c      	mov	ip, r1
     29c:	4463      	add	r3, ip
     29e:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
     2a0:	8a32      	ldrh	r2, [r6, #16]
     2a2:	9202      	str	r2, [sp, #8]
     2a4:	2380      	movs	r3, #128	; 0x80
     2a6:	01db      	lsls	r3, r3, #7
     2a8:	429a      	cmp	r2, r3
     2aa:	d01a      	beq.n	2e2 <usart_init+0xd2>
     2ac:	d804      	bhi.n	2b8 <usart_init+0xa8>
     2ae:	2380      	movs	r3, #128	; 0x80
     2b0:	019b      	lsls	r3, r3, #6
     2b2:	429a      	cmp	r2, r3
     2b4:	d00b      	beq.n	2ce <usart_init+0xbe>
     2b6:	e104      	b.n	4c2 <usart_init+0x2b2>
     2b8:	23c0      	movs	r3, #192	; 0xc0
     2ba:	01db      	lsls	r3, r3, #7
     2bc:	9a02      	ldr	r2, [sp, #8]
     2be:	429a      	cmp	r2, r3
     2c0:	d00a      	beq.n	2d8 <usart_init+0xc8>
     2c2:	2380      	movs	r3, #128	; 0x80
     2c4:	021b      	lsls	r3, r3, #8
     2c6:	429a      	cmp	r2, r3
     2c8:	d100      	bne.n	2cc <usart_init+0xbc>
     2ca:	e0ff      	b.n	4cc <usart_init+0x2bc>
     2cc:	e0f9      	b.n	4c2 <usart_init+0x2b2>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     2ce:	2310      	movs	r3, #16
     2d0:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     2d2:	3b0f      	subs	r3, #15
     2d4:	9307      	str	r3, [sp, #28]
     2d6:	e0fd      	b.n	4d4 <usart_init+0x2c4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     2d8:	2308      	movs	r3, #8
     2da:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     2dc:	3b07      	subs	r3, #7
     2de:	9307      	str	r3, [sp, #28]
     2e0:	e0f8      	b.n	4d4 <usart_init+0x2c4>
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     2e2:	6833      	ldr	r3, [r6, #0]
     2e4:	9304      	str	r3, [sp, #16]
		(uint32_t)config->mux_setting |
     2e6:	68f3      	ldr	r3, [r6, #12]
     2e8:	469b      	mov	fp, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     2ea:	6973      	ldr	r3, [r6, #20]
     2ec:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     2ee:	7e33      	ldrb	r3, [r6, #24]
     2f0:	4698      	mov	r8, r3
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     2f2:	2326      	movs	r3, #38	; 0x26
     2f4:	5cf3      	ldrb	r3, [r6, r3]
     2f6:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
     2f8:	6873      	ldr	r3, [r6, #4]
     2fa:	469a      	mov	sl, r3
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
     2fc:	2b00      	cmp	r3, #0
     2fe:	d015      	beq.n	32c <usart_init+0x11c>
     300:	2380      	movs	r3, #128	; 0x80
     302:	055b      	lsls	r3, r3, #21
     304:	459a      	cmp	sl, r3
     306:	d136      	bne.n	376 <usart_init+0x166>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
     308:	2327      	movs	r3, #39	; 0x27
     30a:	5cf3      	ldrb	r3, [r6, r3]
     30c:	2b00      	cmp	r3, #0
     30e:	d136      	bne.n	37e <usart_init+0x16e>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     310:	6a33      	ldr	r3, [r6, #32]
     312:	001f      	movs	r7, r3
     314:	b2c0      	uxtb	r0, r0
     316:	4b83      	ldr	r3, [pc, #524]	; (524 <usart_init+0x314>)
     318:	4798      	blx	r3
     31a:	0001      	movs	r1, r0
     31c:	220e      	movs	r2, #14
     31e:	ab06      	add	r3, sp, #24
     320:	469c      	mov	ip, r3
     322:	4462      	add	r2, ip
     324:	0038      	movs	r0, r7
     326:	4b80      	ldr	r3, [pc, #512]	; (528 <usart_init+0x318>)
     328:	4798      	blx	r3
     32a:	e025      	b.n	378 <usart_init+0x168>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     32c:	2308      	movs	r3, #8
     32e:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     330:	2300      	movs	r3, #0
     332:	9307      	str	r3, [sp, #28]
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
     334:	2327      	movs	r3, #39	; 0x27
     336:	5cf3      	ldrb	r3, [r6, r3]
     338:	2b00      	cmp	r3, #0
     33a:	d00b      	beq.n	354 <usart_init+0x144>
				status_code =
     33c:	9b06      	ldr	r3, [sp, #24]
     33e:	9300      	str	r3, [sp, #0]
     340:	9b07      	ldr	r3, [sp, #28]
     342:	220e      	movs	r2, #14
     344:	a906      	add	r1, sp, #24
     346:	468c      	mov	ip, r1
     348:	4462      	add	r2, ip
     34a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     34c:	6a30      	ldr	r0, [r6, #32]
     34e:	4f77      	ldr	r7, [pc, #476]	; (52c <usart_init+0x31c>)
     350:	47b8      	blx	r7
     352:	e011      	b.n	378 <usart_init+0x168>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
     354:	6a33      	ldr	r3, [r6, #32]
     356:	001f      	movs	r7, r3
     358:	b2c0      	uxtb	r0, r0
     35a:	4b72      	ldr	r3, [pc, #456]	; (524 <usart_init+0x314>)
     35c:	4798      	blx	r3
     35e:	0001      	movs	r1, r0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
     360:	9b06      	ldr	r3, [sp, #24]
     362:	9300      	str	r3, [sp, #0]
     364:	9b07      	ldr	r3, [sp, #28]
     366:	220e      	movs	r2, #14
     368:	a806      	add	r0, sp, #24
     36a:	4684      	mov	ip, r0
     36c:	4462      	add	r2, ip
     36e:	0038      	movs	r0, r7
     370:	4f6e      	ldr	r7, [pc, #440]	; (52c <usart_init+0x31c>)
     372:	47b8      	blx	r7
     374:	e000      	b.n	378 <usart_init+0x168>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
     376:	2000      	movs	r0, #0
     378:	1e03      	subs	r3, r0, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
     37a:	d000      	beq.n	37e <usart_init+0x16e>
     37c:	e0c0      	b.n	500 <usart_init+0x2f0>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
     37e:	7e73      	ldrb	r3, [r6, #25]
     380:	2b00      	cmp	r3, #0
     382:	d002      	beq.n	38a <usart_init+0x17a>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     384:	7eb3      	ldrb	r3, [r6, #26]
     386:	464a      	mov	r2, r9
     388:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     38a:	682a      	ldr	r2, [r5, #0]
     38c:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     38e:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     390:	2b00      	cmp	r3, #0
     392:	d1fc      	bne.n	38e <usart_init+0x17e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
     394:	330e      	adds	r3, #14
     396:	aa06      	add	r2, sp, #24
     398:	4694      	mov	ip, r2
     39a:	4463      	add	r3, ip
     39c:	881b      	ldrh	r3, [r3, #0]
     39e:	464a      	mov	r2, r9
     3a0:	8193      	strh	r3, [r2, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
     3a2:	9b04      	ldr	r3, [sp, #16]
     3a4:	465a      	mov	r2, fp
     3a6:	4313      	orrs	r3, r2
     3a8:	9a03      	ldr	r2, [sp, #12]
     3aa:	4313      	orrs	r3, r2
     3ac:	4652      	mov	r2, sl
     3ae:	4313      	orrs	r3, r2
     3b0:	433b      	orrs	r3, r7
     3b2:	4642      	mov	r2, r8
     3b4:	0212      	lsls	r2, r2, #8
     3b6:	4313      	orrs	r3, r2
     3b8:	9a05      	ldr	r2, [sp, #20]
     3ba:	0757      	lsls	r7, r2, #29
     3bc:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
     3be:	2327      	movs	r3, #39	; 0x27
     3c0:	5cf3      	ldrb	r3, [r6, r3]
     3c2:	2b00      	cmp	r3, #0
     3c4:	d101      	bne.n	3ca <usart_init+0x1ba>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     3c6:	3304      	adds	r3, #4
     3c8:	431f      	orrs	r7, r3
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
     3ca:	7e71      	ldrb	r1, [r6, #25]
     3cc:	0289      	lsls	r1, r1, #10
     3ce:	7f33      	ldrb	r3, [r6, #28]
     3d0:	025b      	lsls	r3, r3, #9
     3d2:	4319      	orrs	r1, r3
     3d4:	7f73      	ldrb	r3, [r6, #29]
     3d6:	021b      	lsls	r3, r3, #8
     3d8:	4319      	orrs	r1, r3
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     3da:	2324      	movs	r3, #36	; 0x24
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
     3dc:	5cf3      	ldrb	r3, [r6, r3]
     3de:	045b      	lsls	r3, r3, #17
     3e0:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     3e2:	2325      	movs	r3, #37	; 0x25
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
     3e4:	5cf2      	ldrb	r2, [r6, r3]
     3e6:	0412      	lsls	r2, r2, #16
     3e8:	4311      	orrs	r1, r2
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->character_size;
     3ea:	7af3      	ldrb	r3, [r6, #11]
     3ec:	4319      	orrs	r1, r3
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
     3ee:	8933      	ldrh	r3, [r6, #8]
     3f0:	2bff      	cmp	r3, #255	; 0xff
     3f2:	d004      	beq.n	3fe <usart_init+0x1ee>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     3f4:	2280      	movs	r2, #128	; 0x80
     3f6:	0452      	lsls	r2, r2, #17
     3f8:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     3fa:	4319      	orrs	r1, r3
     3fc:	e005      	b.n	40a <usart_init+0x1fa>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
     3fe:	7ef3      	ldrb	r3, [r6, #27]
     400:	2b00      	cmp	r3, #0
     402:	d002      	beq.n	40a <usart_init+0x1fa>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     404:	2380      	movs	r3, #128	; 0x80
     406:	04db      	lsls	r3, r3, #19
     408:	431f      	orrs	r7, r3
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     40a:	232c      	movs	r3, #44	; 0x2c
     40c:	5cf3      	ldrb	r3, [r6, r3]
     40e:	2b00      	cmp	r3, #0
     410:	d103      	bne.n	41a <usart_init+0x20a>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     412:	4b47      	ldr	r3, [pc, #284]	; (530 <usart_init+0x320>)
     414:	789b      	ldrb	r3, [r3, #2]
     416:	079b      	lsls	r3, r3, #30
     418:	d501      	bpl.n	41e <usart_init+0x20e>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     41a:	2380      	movs	r3, #128	; 0x80
     41c:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     41e:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     420:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     422:	2b00      	cmp	r3, #0
     424:	d1fc      	bne.n	420 <usart_init+0x210>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
     426:	464b      	mov	r3, r9
     428:	6059      	str	r1, [r3, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     42a:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     42c:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     42e:	2b00      	cmp	r3, #0
     430:	d1fc      	bne.n	42c <usart_init+0x21c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
     432:	464b      	mov	r3, r9
     434:	601f      	str	r7, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     436:	ab0e      	add	r3, sp, #56	; 0x38
     438:	2280      	movs	r2, #128	; 0x80
     43a:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     43c:	2200      	movs	r2, #0
     43e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     440:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     442:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
     444:	6b33      	ldr	r3, [r6, #48]	; 0x30
     446:	930a      	str	r3, [sp, #40]	; 0x28
     448:	6b73      	ldr	r3, [r6, #52]	; 0x34
     44a:	930b      	str	r3, [sp, #44]	; 0x2c
     44c:	6bb3      	ldr	r3, [r6, #56]	; 0x38
     44e:	930c      	str	r3, [sp, #48]	; 0x30
     450:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     452:	9302      	str	r3, [sp, #8]
     454:	930d      	str	r3, [sp, #52]	; 0x34
     456:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     458:	ae0e      	add	r6, sp, #56	; 0x38
     45a:	b2f9      	uxtb	r1, r7
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
     45c:	00bb      	lsls	r3, r7, #2
     45e:	aa0a      	add	r2, sp, #40	; 0x28
     460:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
     462:	2800      	cmp	r0, #0
     464:	d102      	bne.n	46c <usart_init+0x25c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     466:	0020      	movs	r0, r4
     468:	4b32      	ldr	r3, [pc, #200]	; (534 <usart_init+0x324>)
     46a:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
     46c:	1c43      	adds	r3, r0, #1
     46e:	d005      	beq.n	47c <usart_init+0x26c>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     470:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     472:	0c00      	lsrs	r0, r0, #16
     474:	b2c0      	uxtb	r0, r0
     476:	0031      	movs	r1, r6
     478:	4b2f      	ldr	r3, [pc, #188]	; (538 <usart_init+0x328>)
     47a:	4798      	blx	r3
     47c:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     47e:	2f04      	cmp	r7, #4
     480:	d1eb      	bne.n	45a <usart_init+0x24a>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
     482:	2300      	movs	r3, #0
     484:	60eb      	str	r3, [r5, #12]
     486:	612b      	str	r3, [r5, #16]
     488:	616b      	str	r3, [r5, #20]
     48a:	61ab      	str	r3, [r5, #24]
     48c:	61eb      	str	r3, [r5, #28]
     48e:	622b      	str	r3, [r5, #32]
	}

	module->tx_buffer_ptr              = NULL;
     490:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     492:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     494:	2200      	movs	r2, #0
     496:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     498:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     49a:	3330      	adds	r3, #48	; 0x30
     49c:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     49e:	3301      	adds	r3, #1
     4a0:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     4a2:	3301      	adds	r3, #1
     4a4:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     4a6:	3301      	adds	r3, #1
     4a8:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     4aa:	6828      	ldr	r0, [r5, #0]
     4ac:	4b18      	ldr	r3, [pc, #96]	; (510 <usart_init+0x300>)
     4ae:	4798      	blx	r3
     4b0:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     4b2:	4922      	ldr	r1, [pc, #136]	; (53c <usart_init+0x32c>)
     4b4:	4b22      	ldr	r3, [pc, #136]	; (540 <usart_init+0x330>)
     4b6:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     4b8:	00a4      	lsls	r4, r4, #2
     4ba:	4b22      	ldr	r3, [pc, #136]	; (544 <usart_init+0x334>)
     4bc:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
     4be:	2300      	movs	r3, #0
     4c0:	e01e      	b.n	500 <usart_init+0x2f0>
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     4c2:	2310      	movs	r3, #16
     4c4:	9306      	str	r3, [sp, #24]
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     4c6:	2300      	movs	r3, #0
     4c8:	9307      	str	r3, [sp, #28]
     4ca:	e003      	b.n	4d4 <usart_init+0x2c4>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     4cc:	2303      	movs	r3, #3
     4ce:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     4d0:	2300      	movs	r3, #0
     4d2:	9307      	str	r3, [sp, #28]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     4d4:	6833      	ldr	r3, [r6, #0]
     4d6:	9304      	str	r3, [sp, #16]
		(uint32_t)config->mux_setting |
     4d8:	68f3      	ldr	r3, [r6, #12]
     4da:	469b      	mov	fp, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     4dc:	6973      	ldr	r3, [r6, #20]
     4de:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     4e0:	7e33      	ldrb	r3, [r6, #24]
     4e2:	4698      	mov	r8, r3
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     4e4:	2326      	movs	r3, #38	; 0x26
     4e6:	5cf3      	ldrb	r3, [r6, r3]
     4e8:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
     4ea:	6873      	ldr	r3, [r6, #4]
     4ec:	469a      	mov	sl, r3
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
     4ee:	2b00      	cmp	r3, #0
     4f0:	d100      	bne.n	4f4 <usart_init+0x2e4>
     4f2:	e71f      	b.n	334 <usart_init+0x124>
     4f4:	2380      	movs	r3, #128	; 0x80
     4f6:	055b      	lsls	r3, r3, #21
     4f8:	459a      	cmp	sl, r3
     4fa:	d100      	bne.n	4fe <usart_init+0x2ee>
     4fc:	e704      	b.n	308 <usart_init+0xf8>
     4fe:	e73e      	b.n	37e <usart_init+0x16e>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     500:	0018      	movs	r0, r3
     502:	b011      	add	sp, #68	; 0x44
     504:	bc3c      	pop	{r2, r3, r4, r5}
     506:	4690      	mov	r8, r2
     508:	4699      	mov	r9, r3
     50a:	46a2      	mov	sl, r4
     50c:	46ab      	mov	fp, r5
     50e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     510:	00000c01 	.word	0x00000c01
     514:	40000400 	.word	0x40000400
     518:	00001519 	.word	0x00001519
     51c:	0000148d 	.word	0x0000148d
     520:	00000a2d 	.word	0x00000a2d
     524:	00001535 	.word	0x00001535
     528:	0000083d 	.word	0x0000083d
     52c:	00000865 	.word	0x00000865
     530:	41002000 	.word	0x41002000
     534:	00000a79 	.word	0x00000a79
     538:	00001611 	.word	0x00001611
     53c:	000005e5 	.word	0x000005e5
     540:	00000c41 	.word	0x00000c41
     544:	200000f8 	.word	0x200000f8

00000548 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     548:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
     54a:	231c      	movs	r3, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     54c:	2a00      	cmp	r2, #0
     54e:	d00e      	beq.n	56e <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
     550:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
     552:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     554:	3b17      	subs	r3, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
     556:	2a00      	cmp	r2, #0
     558:	d109      	bne.n	56e <usart_write_wait+0x26>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     55a:	6803      	ldr	r3, [r0, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     55c:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     55e:	2a00      	cmp	r2, #0
     560:	d1fc      	bne.n	55c <usart_write_wait+0x14>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
     562:	8519      	strh	r1, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     564:	2102      	movs	r1, #2
     566:	7e1a      	ldrb	r2, [r3, #24]
     568:	420a      	tst	r2, r1
     56a:	d0fc      	beq.n	566 <usart_write_wait+0x1e>
		/* Wait until data is sent */
	}

	return STATUS_OK;
     56c:	2300      	movs	r3, #0
}
     56e:	0018      	movs	r0, r3
     570:	4770      	bx	lr
     572:	46c0      	nop			; (mov r8, r8)

00000574 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     574:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
     576:	231c      	movs	r3, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     578:	2a00      	cmp	r2, #0
     57a:	d030      	beq.n	5de <usart_read_wait+0x6a>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
     57c:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
     57e:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     580:	3b17      	subs	r3, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
     582:	2a00      	cmp	r2, #0
     584:	d12b      	bne.n	5de <usart_read_wait+0x6a>

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     586:	6802      	ldr	r2, [r0, #0]
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
     588:	7e10      	ldrb	r0, [r2, #24]
     58a:	0740      	lsls	r0, r0, #29
     58c:	d527      	bpl.n	5de <usart_read_wait+0x6a>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     58e:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     590:	2b00      	cmp	r3, #0
     592:	d1fc      	bne.n	58e <usart_read_wait+0x1a>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     594:	8b53      	ldrh	r3, [r2, #26]
     596:	b2db      	uxtb	r3, r3

	/* Check if an error has occurred during the receiving */
	if (error_code) {
     598:	0698      	lsls	r0, r3, #26
     59a:	d01d      	beq.n	5d8 <usart_read_wait+0x64>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
     59c:	0798      	lsls	r0, r3, #30
     59e:	d503      	bpl.n	5a8 <usart_read_wait+0x34>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     5a0:	2302      	movs	r3, #2
     5a2:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_BAD_FORMAT;
     5a4:	3318      	adds	r3, #24
     5a6:	e01a      	b.n	5de <usart_read_wait+0x6a>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     5a8:	0758      	lsls	r0, r3, #29
     5aa:	d503      	bpl.n	5b4 <usart_read_wait+0x40>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     5ac:	2304      	movs	r3, #4
     5ae:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_OVERFLOW;
     5b0:	331a      	adds	r3, #26
     5b2:	e014      	b.n	5de <usart_read_wait+0x6a>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
     5b4:	07d8      	lsls	r0, r3, #31
     5b6:	d503      	bpl.n	5c0 <usart_read_wait+0x4c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     5b8:	2301      	movs	r3, #1
     5ba:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_BAD_DATA;
     5bc:	3312      	adds	r3, #18
     5be:	e00e      	b.n	5de <usart_read_wait+0x6a>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
     5c0:	06d8      	lsls	r0, r3, #27
     5c2:	d503      	bpl.n	5cc <usart_read_wait+0x58>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     5c4:	2310      	movs	r3, #16
     5c6:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_PROTOCOL;
     5c8:	3332      	adds	r3, #50	; 0x32
     5ca:	e008      	b.n	5de <usart_read_wait+0x6a>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
     5cc:	069b      	lsls	r3, r3, #26
     5ce:	d503      	bpl.n	5d8 <usart_read_wait+0x64>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     5d0:	2320      	movs	r3, #32
     5d2:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_PACKET_COLLISION;
     5d4:	3321      	adds	r3, #33	; 0x21
     5d6:	e002      	b.n	5de <usart_read_wait+0x6a>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
     5d8:	8d13      	ldrh	r3, [r2, #40]	; 0x28
     5da:	800b      	strh	r3, [r1, #0]

	return STATUS_OK;
     5dc:	2300      	movs	r3, #0
}
     5de:	0018      	movs	r0, r3
     5e0:	4770      	bx	lr
     5e2:	46c0      	nop			; (mov r8, r8)

000005e4 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     5e6:	0080      	lsls	r0, r0, #2
     5e8:	4b60      	ldr	r3, [pc, #384]	; (76c <_usart_interrupt_handler+0x188>)
     5ea:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     5ec:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     5ee:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     5f0:	2b00      	cmp	r3, #0
     5f2:	d1fc      	bne.n	5ee <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     5f4:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     5f6:	7da6      	ldrb	r6, [r4, #22]
     5f8:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
     5fa:	2330      	movs	r3, #48	; 0x30
     5fc:	5ceb      	ldrb	r3, [r5, r3]
     5fe:	2231      	movs	r2, #49	; 0x31
     600:	5caf      	ldrb	r7, [r5, r2]
     602:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     604:	07f3      	lsls	r3, r6, #31
     606:	d522      	bpl.n	64e <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
     608:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     60a:	b29b      	uxth	r3, r3
     60c:	2b00      	cmp	r3, #0
     60e:	d01c      	beq.n	64a <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     610:	6aaa      	ldr	r2, [r5, #40]	; 0x28
     612:	7813      	ldrb	r3, [r2, #0]
     614:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     616:	1c51      	adds	r1, r2, #1
     618:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     61a:	7969      	ldrb	r1, [r5, #5]
     61c:	2901      	cmp	r1, #1
     61e:	d001      	beq.n	624 <_usart_interrupt_handler+0x40>
	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
		if (module->remaining_tx_buffer_length) {
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     620:	b29b      	uxth	r3, r3
     622:	e004      	b.n	62e <_usart_interrupt_handler+0x4a>
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     624:	7851      	ldrb	r1, [r2, #1]
     626:	0209      	lsls	r1, r1, #8
     628:	430b      	orrs	r3, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
     62a:	3202      	adds	r2, #2
     62c:	62aa      	str	r2, [r5, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     62e:	05db      	lsls	r3, r3, #23
     630:	0ddb      	lsrs	r3, r3, #23
     632:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     634:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     636:	3b01      	subs	r3, #1
     638:	b29b      	uxth	r3, r3
     63a:	85eb      	strh	r3, [r5, #46]	; 0x2e
     63c:	2b00      	cmp	r3, #0
     63e:	d106      	bne.n	64e <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     640:	3301      	adds	r3, #1
     642:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     644:	3301      	adds	r3, #1
     646:	75a3      	strb	r3, [r4, #22]
     648:	e001      	b.n	64e <_usart_interrupt_handler+0x6a>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     64a:	2301      	movs	r3, #1
     64c:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     64e:	07b3      	lsls	r3, r6, #30
     650:	d509      	bpl.n	666 <_usart_interrupt_handler+0x82>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     652:	2302      	movs	r3, #2
     654:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
     656:	2200      	movs	r2, #0
     658:	3331      	adds	r3, #49	; 0x31
     65a:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     65c:	07fb      	lsls	r3, r7, #31
     65e:	d502      	bpl.n	666 <_usart_interrupt_handler+0x82>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     660:	0028      	movs	r0, r5
     662:	68eb      	ldr	r3, [r5, #12]
     664:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     666:	0773      	lsls	r3, r6, #29
     668:	d560      	bpl.n	72c <_usart_interrupt_handler+0x148>

		if (module->remaining_rx_buffer_length) {
     66a:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     66c:	b29b      	uxth	r3, r3
     66e:	2b00      	cmp	r3, #0
     670:	d05a      	beq.n	728 <_usart_interrupt_handler+0x144>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     672:	8b63      	ldrh	r3, [r4, #26]
     674:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     676:	071a      	lsls	r2, r3, #28
     678:	d402      	bmi.n	680 <_usart_interrupt_handler+0x9c>
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {

		if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     67a:	223f      	movs	r2, #63	; 0x3f
     67c:	4013      	ands	r3, r2
     67e:	e001      	b.n	684 <_usart_interrupt_handler+0xa0>
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
				error_code &= ~SERCOM_USART_STATUS_CTS;
     680:	2237      	movs	r2, #55	; 0x37
     682:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     684:	2b00      	cmp	r3, #0
     686:	d02d      	beq.n	6e4 <_usart_interrupt_handler+0x100>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     688:	079a      	lsls	r2, r3, #30
     68a:	d505      	bpl.n	698 <_usart_interrupt_handler+0xb4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     68c:	221a      	movs	r2, #26
     68e:	2332      	movs	r3, #50	; 0x32
     690:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     692:	3b30      	subs	r3, #48	; 0x30
     694:	8363      	strh	r3, [r4, #26]
     696:	e01f      	b.n	6d8 <_usart_interrupt_handler+0xf4>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     698:	075a      	lsls	r2, r3, #29
     69a:	d505      	bpl.n	6a8 <_usart_interrupt_handler+0xc4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
     69c:	221e      	movs	r2, #30
     69e:	2332      	movs	r3, #50	; 0x32
     6a0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     6a2:	3b2e      	subs	r3, #46	; 0x2e
     6a4:	8363      	strh	r3, [r4, #26]
     6a6:	e017      	b.n	6d8 <_usart_interrupt_handler+0xf4>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     6a8:	07da      	lsls	r2, r3, #31
     6aa:	d505      	bpl.n	6b8 <_usart_interrupt_handler+0xd4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
     6ac:	2213      	movs	r2, #19
     6ae:	2332      	movs	r3, #50	; 0x32
     6b0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     6b2:	3b31      	subs	r3, #49	; 0x31
     6b4:	8363      	strh	r3, [r4, #26]
     6b6:	e00f      	b.n	6d8 <_usart_interrupt_handler+0xf4>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     6b8:	06da      	lsls	r2, r3, #27
     6ba:	d505      	bpl.n	6c8 <_usart_interrupt_handler+0xe4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
     6bc:	2242      	movs	r2, #66	; 0x42
     6be:	2332      	movs	r3, #50	; 0x32
     6c0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     6c2:	3b22      	subs	r3, #34	; 0x22
     6c4:	8363      	strh	r3, [r4, #26]
     6c6:	e007      	b.n	6d8 <_usart_interrupt_handler+0xf4>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
     6c8:	2220      	movs	r2, #32
     6ca:	421a      	tst	r2, r3
     6cc:	d004      	beq.n	6d8 <_usart_interrupt_handler+0xf4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
     6ce:	3221      	adds	r2, #33	; 0x21
     6d0:	2332      	movs	r3, #50	; 0x32
     6d2:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     6d4:	3b12      	subs	r3, #18
     6d6:	8363      	strh	r3, [r4, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     6d8:	077b      	lsls	r3, r7, #29
     6da:	d527      	bpl.n	72c <_usart_interrupt_handler+0x148>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     6dc:	0028      	movs	r0, r5
     6de:	696b      	ldr	r3, [r5, #20]
     6e0:	4798      	blx	r3
     6e2:	e023      	b.n	72c <_usart_interrupt_handler+0x148>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     6e4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     6e6:	05db      	lsls	r3, r3, #23
     6e8:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
     6ea:	b2da      	uxtb	r2, r3
     6ec:	6a69      	ldr	r1, [r5, #36]	; 0x24
     6ee:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
     6f0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
     6f2:	1c51      	adds	r1, r2, #1
     6f4:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     6f6:	7969      	ldrb	r1, [r5, #5]
     6f8:	2901      	cmp	r1, #1
     6fa:	d104      	bne.n	706 <_usart_interrupt_handler+0x122>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
     6fc:	0a1b      	lsrs	r3, r3, #8
     6fe:	7053      	strb	r3, [r2, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
     700:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     702:	3301      	adds	r3, #1
     704:	626b      	str	r3, [r5, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
     706:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     708:	3b01      	subs	r3, #1
     70a:	b29b      	uxth	r3, r3
     70c:	85ab      	strh	r3, [r5, #44]	; 0x2c
     70e:	2b00      	cmp	r3, #0
     710:	d10c      	bne.n	72c <_usart_interrupt_handler+0x148>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     712:	3304      	adds	r3, #4
     714:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
     716:	2200      	movs	r2, #0
     718:	332e      	adds	r3, #46	; 0x2e
     71a:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
     71c:	07bb      	lsls	r3, r7, #30
     71e:	d505      	bpl.n	72c <_usart_interrupt_handler+0x148>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     720:	0028      	movs	r0, r5
     722:	692b      	ldr	r3, [r5, #16]
     724:	4798      	blx	r3
     726:	e001      	b.n	72c <_usart_interrupt_handler+0x148>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     728:	2304      	movs	r3, #4
     72a:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
     72c:	06f3      	lsls	r3, r6, #27
     72e:	d507      	bpl.n	740 <_usart_interrupt_handler+0x15c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
     730:	2310      	movs	r3, #16
     732:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
     734:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
     736:	06fb      	lsls	r3, r7, #27
     738:	d502      	bpl.n	740 <_usart_interrupt_handler+0x15c>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
     73a:	0028      	movs	r0, r5
     73c:	69eb      	ldr	r3, [r5, #28]
     73e:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
     740:	06b3      	lsls	r3, r6, #26
     742:	d507      	bpl.n	754 <_usart_interrupt_handler+0x170>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
     744:	2320      	movs	r3, #32
     746:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
     748:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
     74a:	073b      	lsls	r3, r7, #28
     74c:	d502      	bpl.n	754 <_usart_interrupt_handler+0x170>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
     74e:	0028      	movs	r0, r5
     750:	69ab      	ldr	r3, [r5, #24]
     752:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
     754:	0733      	lsls	r3, r6, #28
     756:	d507      	bpl.n	768 <_usart_interrupt_handler+0x184>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
     758:	2308      	movs	r3, #8
     75a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
     75c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
     75e:	06bb      	lsls	r3, r7, #26
     760:	d502      	bpl.n	768 <_usart_interrupt_handler+0x184>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
     762:	6a2b      	ldr	r3, [r5, #32]
     764:	0028      	movs	r0, r5
     766:	4798      	blx	r3
		}
	}
#endif
}
     768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     76a:	46c0      	nop			; (mov r8, r8)
     76c:	200000f8 	.word	0x200000f8

00000770 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     770:	4b0c      	ldr	r3, [pc, #48]	; (7a4 <cpu_irq_enter_critical+0x34>)
     772:	681b      	ldr	r3, [r3, #0]
     774:	2b00      	cmp	r3, #0
     776:	d110      	bne.n	79a <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     778:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     77c:	2b00      	cmp	r3, #0
     77e:	d109      	bne.n	794 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     780:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     782:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     786:	2200      	movs	r2, #0
     788:	4b07      	ldr	r3, [pc, #28]	; (7a8 <cpu_irq_enter_critical+0x38>)
     78a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     78c:	3201      	adds	r2, #1
     78e:	4b07      	ldr	r3, [pc, #28]	; (7ac <cpu_irq_enter_critical+0x3c>)
     790:	701a      	strb	r2, [r3, #0]
     792:	e002      	b.n	79a <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     794:	2200      	movs	r2, #0
     796:	4b05      	ldr	r3, [pc, #20]	; (7ac <cpu_irq_enter_critical+0x3c>)
     798:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     79a:	4a02      	ldr	r2, [pc, #8]	; (7a4 <cpu_irq_enter_critical+0x34>)
     79c:	6813      	ldr	r3, [r2, #0]
     79e:	3301      	adds	r3, #1
     7a0:	6013      	str	r3, [r2, #0]
}
     7a2:	4770      	bx	lr
     7a4:	2000008c 	.word	0x2000008c
     7a8:	20000008 	.word	0x20000008
     7ac:	20000090 	.word	0x20000090

000007b0 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     7b0:	4b08      	ldr	r3, [pc, #32]	; (7d4 <cpu_irq_leave_critical+0x24>)
     7b2:	681a      	ldr	r2, [r3, #0]
     7b4:	3a01      	subs	r2, #1
     7b6:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     7b8:	681b      	ldr	r3, [r3, #0]
     7ba:	2b00      	cmp	r3, #0
     7bc:	d109      	bne.n	7d2 <cpu_irq_leave_critical+0x22>
     7be:	4b06      	ldr	r3, [pc, #24]	; (7d8 <cpu_irq_leave_critical+0x28>)
     7c0:	781b      	ldrb	r3, [r3, #0]
     7c2:	2b00      	cmp	r3, #0
     7c4:	d005      	beq.n	7d2 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     7c6:	2201      	movs	r2, #1
     7c8:	4b04      	ldr	r3, [pc, #16]	; (7dc <cpu_irq_leave_critical+0x2c>)
     7ca:	701a      	strb	r2, [r3, #0]
     7cc:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     7d0:	b662      	cpsie	i
	}
}
     7d2:	4770      	bx	lr
     7d4:	2000008c 	.word	0x2000008c
     7d8:	20000090 	.word	0x20000090
     7dc:	20000008 	.word	0x20000008

000007e0 <system_board_init>:




void system_board_init(void)
{
     7e0:	b5f0      	push	{r4, r5, r6, r7, lr}
     7e2:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     7e4:	ac01      	add	r4, sp, #4
     7e6:	2501      	movs	r5, #1
     7e8:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     7ea:	2700      	movs	r7, #0
     7ec:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     7ee:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     7f0:	0021      	movs	r1, r4
     7f2:	2013      	movs	r0, #19
     7f4:	4e06      	ldr	r6, [pc, #24]	; (810 <system_board_init+0x30>)
     7f6:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     7f8:	2280      	movs	r2, #128	; 0x80
     7fa:	0312      	lsls	r2, r2, #12
     7fc:	4b05      	ldr	r3, [pc, #20]	; (814 <system_board_init+0x34>)
     7fe:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     800:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     802:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     804:	0021      	movs	r1, r4
     806:	201c      	movs	r0, #28
     808:	47b0      	blx	r6
	config_pinmux.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;	
	system_pinmux_pin_set_config(PIN_RFCTRL1, &config_pinmux);
	system_pinmux_pin_set_config(PIN_RFCTRL2, &config_pinmux);
#endif

}
     80a:	b003      	add	sp, #12
     80c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     80e:	46c0      	nop			; (mov r8, r8)
     810:	00000819 	.word	0x00000819
     814:	41004400 	.word	0x41004400

00000818 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     818:	b500      	push	{lr}
     81a:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     81c:	ab01      	add	r3, sp, #4
     81e:	2280      	movs	r2, #128	; 0x80
     820:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     822:	780a      	ldrb	r2, [r1, #0]
     824:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     826:	784a      	ldrb	r2, [r1, #1]
     828:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     82a:	788a      	ldrb	r2, [r1, #2]
     82c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     82e:	0019      	movs	r1, r3
     830:	4b01      	ldr	r3, [pc, #4]	; (838 <port_pin_set_config+0x20>)
     832:	4798      	blx	r3
}
     834:	b003      	add	sp, #12
     836:	bd00      	pop	{pc}
     838:	00001611 	.word	0x00001611

0000083c <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     83c:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     83e:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     840:	2340      	movs	r3, #64	; 0x40
     842:	2400      	movs	r4, #0
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     844:	4281      	cmp	r1, r0
     846:	d201      	bcs.n	84c <_sercom_get_sync_baud_val+0x10>
     848:	e00a      	b.n	860 <_sercom_get_sync_baud_val+0x24>

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
		baud_calculated++;
     84a:	001c      	movs	r4, r3
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
     84c:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     84e:	1c63      	adds	r3, r4, #1
     850:	b29b      	uxth	r3, r3
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     852:	4288      	cmp	r0, r1
     854:	d9f9      	bls.n	84a <_sercom_get_sync_baud_val+0xe>

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     856:	2340      	movs	r3, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     858:	2cff      	cmp	r4, #255	; 0xff
     85a:	d801      	bhi.n	860 <_sercom_get_sync_baud_val+0x24>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
     85c:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     85e:	2300      	movs	r3, #0
	}
}
     860:	0018      	movs	r0, r3
     862:	bd10      	pop	{r4, pc}

00000864 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     864:	b5f0      	push	{r4, r5, r6, r7, lr}
     866:	465f      	mov	r7, fp
     868:	4656      	mov	r6, sl
     86a:	464d      	mov	r5, r9
     86c:	4644      	mov	r4, r8
     86e:	b4f0      	push	{r4, r5, r6, r7}
     870:	b089      	sub	sp, #36	; 0x24
     872:	000c      	movs	r4, r1
     874:	9205      	str	r2, [sp, #20]
     876:	aa12      	add	r2, sp, #72	; 0x48
     878:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     87a:	0002      	movs	r2, r0
     87c:	434a      	muls	r2, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     87e:	2540      	movs	r5, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     880:	42a2      	cmp	r2, r4
     882:	d900      	bls.n	886 <_sercom_get_async_baud_val+0x22>
     884:	e0c6      	b.n	a14 <_sercom_get_async_baud_val+0x1b0>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     886:	2b00      	cmp	r3, #0
     888:	d151      	bne.n	92e <_sercom_get_async_baud_val+0xca>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     88a:	0002      	movs	r2, r0
     88c:	0008      	movs	r0, r1
     88e:	2100      	movs	r1, #0
     890:	4d64      	ldr	r5, [pc, #400]	; (a24 <_sercom_get_async_baud_val+0x1c0>)
     892:	47a8      	blx	r5
     894:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
     896:	0026      	movs	r6, r4
     898:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     89a:	2300      	movs	r3, #0
     89c:	2400      	movs	r4, #0
     89e:	9300      	str	r3, [sp, #0]
     8a0:	9401      	str	r4, [sp, #4]
     8a2:	2200      	movs	r2, #0
     8a4:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     8a6:	203f      	movs	r0, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     8a8:	2120      	movs	r1, #32
     8aa:	468c      	mov	ip, r1
     8ac:	391f      	subs	r1, #31
     8ae:	9602      	str	r6, [sp, #8]
     8b0:	9703      	str	r7, [sp, #12]
     8b2:	2420      	movs	r4, #32
     8b4:	4264      	negs	r4, r4
     8b6:	1904      	adds	r4, r0, r4
     8b8:	d403      	bmi.n	8c2 <_sercom_get_async_baud_val+0x5e>
     8ba:	000d      	movs	r5, r1
     8bc:	40a5      	lsls	r5, r4
     8be:	46a8      	mov	r8, r5
     8c0:	e004      	b.n	8cc <_sercom_get_async_baud_val+0x68>
     8c2:	4664      	mov	r4, ip
     8c4:	1a24      	subs	r4, r4, r0
     8c6:	000d      	movs	r5, r1
     8c8:	40e5      	lsrs	r5, r4
     8ca:	46a8      	mov	r8, r5
     8cc:	000c      	movs	r4, r1
     8ce:	4084      	lsls	r4, r0
     8d0:	46a1      	mov	r9, r4

		r = r << 1;
     8d2:	0014      	movs	r4, r2
     8d4:	001d      	movs	r5, r3
     8d6:	18a4      	adds	r4, r4, r2
     8d8:	415d      	adcs	r5, r3
     8da:	0022      	movs	r2, r4
     8dc:	002b      	movs	r3, r5

		if (n & bit_shift) {
     8de:	4646      	mov	r6, r8
     8e0:	465f      	mov	r7, fp
     8e2:	423e      	tst	r6, r7
     8e4:	d003      	beq.n	8ee <_sercom_get_async_baud_val+0x8a>
			r |= 0x01;
     8e6:	000e      	movs	r6, r1
     8e8:	4326      	orrs	r6, r4
     8ea:	0032      	movs	r2, r6
     8ec:	002b      	movs	r3, r5
		}

		if (r >= d) {
     8ee:	9c02      	ldr	r4, [sp, #8]
     8f0:	9d03      	ldr	r5, [sp, #12]
     8f2:	429d      	cmp	r5, r3
     8f4:	d80f      	bhi.n	916 <_sercom_get_async_baud_val+0xb2>
     8f6:	d101      	bne.n	8fc <_sercom_get_async_baud_val+0x98>
     8f8:	4294      	cmp	r4, r2
     8fa:	d80c      	bhi.n	916 <_sercom_get_async_baud_val+0xb2>
			r = r - d;
     8fc:	9c02      	ldr	r4, [sp, #8]
     8fe:	9d03      	ldr	r5, [sp, #12]
     900:	1b12      	subs	r2, r2, r4
     902:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     904:	464d      	mov	r5, r9
     906:	9e00      	ldr	r6, [sp, #0]
     908:	9f01      	ldr	r7, [sp, #4]
     90a:	4335      	orrs	r5, r6
     90c:	003c      	movs	r4, r7
     90e:	4646      	mov	r6, r8
     910:	4334      	orrs	r4, r6
     912:	9500      	str	r5, [sp, #0]
     914:	9401      	str	r4, [sp, #4]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     916:	3801      	subs	r0, #1
     918:	d2cb      	bcs.n	8b2 <_sercom_get_async_baud_val+0x4e>
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
     91a:	2200      	movs	r2, #0
     91c:	2301      	movs	r3, #1
     91e:	9800      	ldr	r0, [sp, #0]
     920:	9901      	ldr	r1, [sp, #4]
     922:	1a12      	subs	r2, r2, r0
     924:	418b      	sbcs	r3, r1
     926:	0c12      	lsrs	r2, r2, #16
     928:	041b      	lsls	r3, r3, #16
     92a:	431a      	orrs	r2, r3
     92c:	e06f      	b.n	a0e <_sercom_get_async_baud_val+0x1aa>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
     92e:	2200      	movs	r2, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     930:	2b01      	cmp	r3, #1
     932:	d16c      	bne.n	a0e <_sercom_get_async_baud_val+0x1aa>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     934:	0f63      	lsrs	r3, r4, #29
     936:	9304      	str	r3, [sp, #16]
     938:	00e3      	lsls	r3, r4, #3
     93a:	4698      	mov	r8, r3
			temp2 = ((uint64_t)baudrate * sample_num);
     93c:	000a      	movs	r2, r1
     93e:	2300      	movs	r3, #0
     940:	2100      	movs	r1, #0
     942:	4c38      	ldr	r4, [pc, #224]	; (a24 <_sercom_get_async_baud_val+0x1c0>)
     944:	47a0      	blx	r4
     946:	0004      	movs	r4, r0
     948:	000d      	movs	r5, r1
     94a:	2300      	movs	r3, #0
     94c:	469c      	mov	ip, r3
     94e:	9306      	str	r3, [sp, #24]
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
     950:	3320      	adds	r3, #32
     952:	469b      	mov	fp, r3
     954:	2601      	movs	r6, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
     956:	4663      	mov	r3, ip
     958:	9307      	str	r3, [sp, #28]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     95a:	2300      	movs	r3, #0
     95c:	9302      	str	r3, [sp, #8]
     95e:	2200      	movs	r2, #0
     960:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     962:	213f      	movs	r1, #63	; 0x3f
     964:	9400      	str	r4, [sp, #0]
     966:	9501      	str	r5, [sp, #4]
     968:	000f      	movs	r7, r1
		bit_shift = (uint64_t)1 << i;
     96a:	2120      	movs	r1, #32
     96c:	4249      	negs	r1, r1
     96e:	1879      	adds	r1, r7, r1
     970:	d403      	bmi.n	97a <_sercom_get_async_baud_val+0x116>
     972:	0030      	movs	r0, r6
     974:	4088      	lsls	r0, r1
     976:	4684      	mov	ip, r0
     978:	e004      	b.n	984 <_sercom_get_async_baud_val+0x120>
     97a:	4659      	mov	r1, fp
     97c:	1bc9      	subs	r1, r1, r7
     97e:	0030      	movs	r0, r6
     980:	40c8      	lsrs	r0, r1
     982:	4684      	mov	ip, r0
     984:	0031      	movs	r1, r6
     986:	40b9      	lsls	r1, r7
     988:	4689      	mov	r9, r1

		r = r << 1;
     98a:	0010      	movs	r0, r2
     98c:	0019      	movs	r1, r3
     98e:	1880      	adds	r0, r0, r2
     990:	4159      	adcs	r1, r3
     992:	0002      	movs	r2, r0
     994:	000b      	movs	r3, r1

		if (n & bit_shift) {
     996:	4644      	mov	r4, r8
     998:	464d      	mov	r5, r9
     99a:	402c      	ands	r4, r5
     99c:	46a2      	mov	sl, r4
     99e:	4664      	mov	r4, ip
     9a0:	9d04      	ldr	r5, [sp, #16]
     9a2:	402c      	ands	r4, r5
     9a4:	46a4      	mov	ip, r4
     9a6:	4654      	mov	r4, sl
     9a8:	4665      	mov	r5, ip
     9aa:	432c      	orrs	r4, r5
     9ac:	d003      	beq.n	9b6 <_sercom_get_async_baud_val+0x152>
			r |= 0x01;
     9ae:	0034      	movs	r4, r6
     9b0:	4304      	orrs	r4, r0
     9b2:	0022      	movs	r2, r4
     9b4:	000b      	movs	r3, r1
		}

		if (r >= d) {
     9b6:	9800      	ldr	r0, [sp, #0]
     9b8:	9901      	ldr	r1, [sp, #4]
     9ba:	4299      	cmp	r1, r3
     9bc:	d80a      	bhi.n	9d4 <_sercom_get_async_baud_val+0x170>
     9be:	d101      	bne.n	9c4 <_sercom_get_async_baud_val+0x160>
     9c0:	4290      	cmp	r0, r2
     9c2:	d807      	bhi.n	9d4 <_sercom_get_async_baud_val+0x170>
			r = r - d;
     9c4:	9800      	ldr	r0, [sp, #0]
     9c6:	9901      	ldr	r1, [sp, #4]
     9c8:	1a12      	subs	r2, r2, r0
     9ca:	418b      	sbcs	r3, r1
			q |= bit_shift;
     9cc:	9902      	ldr	r1, [sp, #8]
     9ce:	4648      	mov	r0, r9
     9d0:	4301      	orrs	r1, r0
     9d2:	9102      	str	r1, [sp, #8]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     9d4:	3f01      	subs	r7, #1
     9d6:	d2c8      	bcs.n	96a <_sercom_get_async_baud_val+0x106>
     9d8:	9c00      	ldr	r4, [sp, #0]
     9da:	9d01      	ldr	r5, [sp, #4]
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
     9dc:	9902      	ldr	r1, [sp, #8]
     9de:	9a07      	ldr	r2, [sp, #28]
     9e0:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
     9e2:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
     9e4:	4910      	ldr	r1, [pc, #64]	; (a28 <_sercom_get_async_baud_val+0x1c4>)
     9e6:	428b      	cmp	r3, r1
     9e8:	d90b      	bls.n	a02 <_sercom_get_async_baud_val+0x19e>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     9ea:	9b06      	ldr	r3, [sp, #24]
     9ec:	3301      	adds	r3, #1
     9ee:	b2db      	uxtb	r3, r3
     9f0:	0019      	movs	r1, r3
     9f2:	9306      	str	r3, [sp, #24]
     9f4:	0013      	movs	r3, r2
     9f6:	3301      	adds	r3, #1
     9f8:	9307      	str	r3, [sp, #28]
     9fa:	2908      	cmp	r1, #8
     9fc:	d1ad      	bne.n	95a <_sercom_get_async_baud_val+0xf6>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     9fe:	2540      	movs	r5, #64	; 0x40
     a00:	e008      	b.n	a14 <_sercom_get_async_baud_val+0x1b0>
     a02:	2540      	movs	r5, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
     a04:	9a06      	ldr	r2, [sp, #24]
     a06:	2a08      	cmp	r2, #8
     a08:	d004      	beq.n	a14 <_sercom_get_async_baud_val+0x1b0>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
     a0a:	0352      	lsls	r2, r2, #13
     a0c:	431a      	orrs	r2, r3
	}

	*baudval = baud_calculated;
     a0e:	9b05      	ldr	r3, [sp, #20]
     a10:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
     a12:	2500      	movs	r5, #0
}
     a14:	0028      	movs	r0, r5
     a16:	b009      	add	sp, #36	; 0x24
     a18:	bc3c      	pop	{r2, r3, r4, r5}
     a1a:	4690      	mov	r8, r2
     a1c:	4699      	mov	r9, r3
     a1e:	46a2      	mov	sl, r4
     a20:	46ab      	mov	fp, r5
     a22:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a24:	00001bc1 	.word	0x00001bc1
     a28:	00001fff 	.word	0x00001fff

00000a2c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     a2c:	b510      	push	{r4, lr}
     a2e:	b082      	sub	sp, #8
     a30:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     a32:	4b0e      	ldr	r3, [pc, #56]	; (a6c <sercom_set_gclk_generator+0x40>)
     a34:	781b      	ldrb	r3, [r3, #0]
     a36:	2b00      	cmp	r3, #0
     a38:	d001      	beq.n	a3e <sercom_set_gclk_generator+0x12>
     a3a:	2900      	cmp	r1, #0
     a3c:	d00d      	beq.n	a5a <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     a3e:	a901      	add	r1, sp, #4
     a40:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     a42:	2013      	movs	r0, #19
     a44:	4b0a      	ldr	r3, [pc, #40]	; (a70 <sercom_set_gclk_generator+0x44>)
     a46:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     a48:	2013      	movs	r0, #19
     a4a:	4b0a      	ldr	r3, [pc, #40]	; (a74 <sercom_set_gclk_generator+0x48>)
     a4c:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
     a4e:	4b07      	ldr	r3, [pc, #28]	; (a6c <sercom_set_gclk_generator+0x40>)
     a50:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     a52:	2201      	movs	r2, #1
     a54:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     a56:	2000      	movs	r0, #0
     a58:	e006      	b.n	a68 <sercom_set_gclk_generator+0x3c>
	} else if (generator_source == _sercom_config.generator_source) {
     a5a:	4b04      	ldr	r3, [pc, #16]	; (a6c <sercom_set_gclk_generator+0x40>)
     a5c:	785b      	ldrb	r3, [r3, #1]
     a5e:	4283      	cmp	r3, r0
     a60:	d001      	beq.n	a66 <sercom_set_gclk_generator+0x3a>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     a62:	201d      	movs	r0, #29
     a64:	e000      	b.n	a68 <sercom_set_gclk_generator+0x3c>
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config */
		return STATUS_OK;
     a66:	2000      	movs	r0, #0
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     a68:	b002      	add	sp, #8
     a6a:	bd10      	pop	{r4, pc}
     a6c:	20000094 	.word	0x20000094
     a70:	00001519 	.word	0x00001519
     a74:	0000148d 	.word	0x0000148d

00000a78 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     a78:	4b44      	ldr	r3, [pc, #272]	; (b8c <_sercom_get_default_pad+0x114>)
     a7a:	4298      	cmp	r0, r3
     a7c:	d033      	beq.n	ae6 <_sercom_get_default_pad+0x6e>
     a7e:	d806      	bhi.n	a8e <_sercom_get_default_pad+0x16>
     a80:	4b43      	ldr	r3, [pc, #268]	; (b90 <_sercom_get_default_pad+0x118>)
     a82:	4298      	cmp	r0, r3
     a84:	d00d      	beq.n	aa2 <_sercom_get_default_pad+0x2a>
     a86:	4b43      	ldr	r3, [pc, #268]	; (b94 <_sercom_get_default_pad+0x11c>)
     a88:	4298      	cmp	r0, r3
     a8a:	d01b      	beq.n	ac4 <_sercom_get_default_pad+0x4c>
     a8c:	e06f      	b.n	b6e <_sercom_get_default_pad+0xf6>
     a8e:	4b42      	ldr	r3, [pc, #264]	; (b98 <_sercom_get_default_pad+0x120>)
     a90:	4298      	cmp	r0, r3
     a92:	d04a      	beq.n	b2a <_sercom_get_default_pad+0xb2>
     a94:	4b41      	ldr	r3, [pc, #260]	; (b9c <_sercom_get_default_pad+0x124>)
     a96:	4298      	cmp	r0, r3
     a98:	d058      	beq.n	b4c <_sercom_get_default_pad+0xd4>
     a9a:	4b41      	ldr	r3, [pc, #260]	; (ba0 <_sercom_get_default_pad+0x128>)
     a9c:	4298      	cmp	r0, r3
     a9e:	d166      	bne.n	b6e <_sercom_get_default_pad+0xf6>
     aa0:	e032      	b.n	b08 <_sercom_get_default_pad+0x90>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     aa2:	2901      	cmp	r1, #1
     aa4:	d006      	beq.n	ab4 <_sercom_get_default_pad+0x3c>
     aa6:	2900      	cmp	r1, #0
     aa8:	d063      	beq.n	b72 <_sercom_get_default_pad+0xfa>
     aaa:	2902      	cmp	r1, #2
     aac:	d006      	beq.n	abc <_sercom_get_default_pad+0x44>
     aae:	2903      	cmp	r1, #3
     ab0:	d006      	beq.n	ac0 <_sercom_get_default_pad+0x48>
     ab2:	e001      	b.n	ab8 <_sercom_get_default_pad+0x40>
     ab4:	483b      	ldr	r0, [pc, #236]	; (ba4 <_sercom_get_default_pad+0x12c>)
     ab6:	e067      	b.n	b88 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     ab8:	2000      	movs	r0, #0
     aba:	e065      	b.n	b88 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     abc:	483a      	ldr	r0, [pc, #232]	; (ba8 <_sercom_get_default_pad+0x130>)
     abe:	e063      	b.n	b88 <_sercom_get_default_pad+0x110>
     ac0:	483a      	ldr	r0, [pc, #232]	; (bac <_sercom_get_default_pad+0x134>)
     ac2:	e061      	b.n	b88 <_sercom_get_default_pad+0x110>
     ac4:	2901      	cmp	r1, #1
     ac6:	d006      	beq.n	ad6 <_sercom_get_default_pad+0x5e>
     ac8:	2900      	cmp	r1, #0
     aca:	d054      	beq.n	b76 <_sercom_get_default_pad+0xfe>
     acc:	2902      	cmp	r1, #2
     ace:	d006      	beq.n	ade <_sercom_get_default_pad+0x66>
     ad0:	2903      	cmp	r1, #3
     ad2:	d006      	beq.n	ae2 <_sercom_get_default_pad+0x6a>
     ad4:	e001      	b.n	ada <_sercom_get_default_pad+0x62>
     ad6:	4836      	ldr	r0, [pc, #216]	; (bb0 <_sercom_get_default_pad+0x138>)
     ad8:	e056      	b.n	b88 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     ada:	2000      	movs	r0, #0
     adc:	e054      	b.n	b88 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     ade:	4835      	ldr	r0, [pc, #212]	; (bb4 <_sercom_get_default_pad+0x13c>)
     ae0:	e052      	b.n	b88 <_sercom_get_default_pad+0x110>
     ae2:	4835      	ldr	r0, [pc, #212]	; (bb8 <_sercom_get_default_pad+0x140>)
     ae4:	e050      	b.n	b88 <_sercom_get_default_pad+0x110>
     ae6:	2901      	cmp	r1, #1
     ae8:	d006      	beq.n	af8 <_sercom_get_default_pad+0x80>
     aea:	2900      	cmp	r1, #0
     aec:	d045      	beq.n	b7a <_sercom_get_default_pad+0x102>
     aee:	2902      	cmp	r1, #2
     af0:	d006      	beq.n	b00 <_sercom_get_default_pad+0x88>
     af2:	2903      	cmp	r1, #3
     af4:	d006      	beq.n	b04 <_sercom_get_default_pad+0x8c>
     af6:	e001      	b.n	afc <_sercom_get_default_pad+0x84>
     af8:	4830      	ldr	r0, [pc, #192]	; (bbc <_sercom_get_default_pad+0x144>)
     afa:	e045      	b.n	b88 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     afc:	2000      	movs	r0, #0
     afe:	e043      	b.n	b88 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     b00:	482f      	ldr	r0, [pc, #188]	; (bc0 <_sercom_get_default_pad+0x148>)
     b02:	e041      	b.n	b88 <_sercom_get_default_pad+0x110>
     b04:	482f      	ldr	r0, [pc, #188]	; (bc4 <_sercom_get_default_pad+0x14c>)
     b06:	e03f      	b.n	b88 <_sercom_get_default_pad+0x110>
     b08:	2901      	cmp	r1, #1
     b0a:	d006      	beq.n	b1a <_sercom_get_default_pad+0xa2>
     b0c:	2900      	cmp	r1, #0
     b0e:	d036      	beq.n	b7e <_sercom_get_default_pad+0x106>
     b10:	2902      	cmp	r1, #2
     b12:	d006      	beq.n	b22 <_sercom_get_default_pad+0xaa>
     b14:	2903      	cmp	r1, #3
     b16:	d006      	beq.n	b26 <_sercom_get_default_pad+0xae>
     b18:	e001      	b.n	b1e <_sercom_get_default_pad+0xa6>
     b1a:	482b      	ldr	r0, [pc, #172]	; (bc8 <_sercom_get_default_pad+0x150>)
     b1c:	e034      	b.n	b88 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     b1e:	2000      	movs	r0, #0
     b20:	e032      	b.n	b88 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     b22:	482a      	ldr	r0, [pc, #168]	; (bcc <_sercom_get_default_pad+0x154>)
     b24:	e030      	b.n	b88 <_sercom_get_default_pad+0x110>
     b26:	482a      	ldr	r0, [pc, #168]	; (bd0 <_sercom_get_default_pad+0x158>)
     b28:	e02e      	b.n	b88 <_sercom_get_default_pad+0x110>
     b2a:	2901      	cmp	r1, #1
     b2c:	d006      	beq.n	b3c <_sercom_get_default_pad+0xc4>
     b2e:	2900      	cmp	r1, #0
     b30:	d027      	beq.n	b82 <_sercom_get_default_pad+0x10a>
     b32:	2902      	cmp	r1, #2
     b34:	d006      	beq.n	b44 <_sercom_get_default_pad+0xcc>
     b36:	2903      	cmp	r1, #3
     b38:	d006      	beq.n	b48 <_sercom_get_default_pad+0xd0>
     b3a:	e001      	b.n	b40 <_sercom_get_default_pad+0xc8>
     b3c:	4825      	ldr	r0, [pc, #148]	; (bd4 <_sercom_get_default_pad+0x15c>)
     b3e:	e023      	b.n	b88 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     b40:	2000      	movs	r0, #0
     b42:	e021      	b.n	b88 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     b44:	4824      	ldr	r0, [pc, #144]	; (bd8 <_sercom_get_default_pad+0x160>)
     b46:	e01f      	b.n	b88 <_sercom_get_default_pad+0x110>
     b48:	4824      	ldr	r0, [pc, #144]	; (bdc <_sercom_get_default_pad+0x164>)
     b4a:	e01d      	b.n	b88 <_sercom_get_default_pad+0x110>
     b4c:	2901      	cmp	r1, #1
     b4e:	d006      	beq.n	b5e <_sercom_get_default_pad+0xe6>
     b50:	2900      	cmp	r1, #0
     b52:	d018      	beq.n	b86 <_sercom_get_default_pad+0x10e>
     b54:	2902      	cmp	r1, #2
     b56:	d006      	beq.n	b66 <_sercom_get_default_pad+0xee>
     b58:	2903      	cmp	r1, #3
     b5a:	d006      	beq.n	b6a <_sercom_get_default_pad+0xf2>
     b5c:	e001      	b.n	b62 <_sercom_get_default_pad+0xea>
     b5e:	4820      	ldr	r0, [pc, #128]	; (be0 <_sercom_get_default_pad+0x168>)
     b60:	e012      	b.n	b88 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     b62:	2000      	movs	r0, #0
     b64:	e010      	b.n	b88 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     b66:	481f      	ldr	r0, [pc, #124]	; (be4 <_sercom_get_default_pad+0x16c>)
     b68:	e00e      	b.n	b88 <_sercom_get_default_pad+0x110>
     b6a:	481f      	ldr	r0, [pc, #124]	; (be8 <_sercom_get_default_pad+0x170>)
     b6c:	e00c      	b.n	b88 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     b6e:	2000      	movs	r0, #0
     b70:	e00a      	b.n	b88 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     b72:	481e      	ldr	r0, [pc, #120]	; (bec <_sercom_get_default_pad+0x174>)
     b74:	e008      	b.n	b88 <_sercom_get_default_pad+0x110>
     b76:	2003      	movs	r0, #3
     b78:	e006      	b.n	b88 <_sercom_get_default_pad+0x110>
     b7a:	481d      	ldr	r0, [pc, #116]	; (bf0 <_sercom_get_default_pad+0x178>)
     b7c:	e004      	b.n	b88 <_sercom_get_default_pad+0x110>
     b7e:	481d      	ldr	r0, [pc, #116]	; (bf4 <_sercom_get_default_pad+0x17c>)
     b80:	e002      	b.n	b88 <_sercom_get_default_pad+0x110>
     b82:	481d      	ldr	r0, [pc, #116]	; (bf8 <_sercom_get_default_pad+0x180>)
     b84:	e000      	b.n	b88 <_sercom_get_default_pad+0x110>
     b86:	481d      	ldr	r0, [pc, #116]	; (bfc <_sercom_get_default_pad+0x184>)
	}

	Assert(false);
	return 0;
}
     b88:	4770      	bx	lr
     b8a:	46c0      	nop			; (mov r8, r8)
     b8c:	42001000 	.word	0x42001000
     b90:	42000800 	.word	0x42000800
     b94:	42000c00 	.word	0x42000c00
     b98:	42001800 	.word	0x42001800
     b9c:	42001c00 	.word	0x42001c00
     ba0:	42001400 	.word	0x42001400
     ba4:	00050003 	.word	0x00050003
     ba8:	00060003 	.word	0x00060003
     bac:	00070003 	.word	0x00070003
     bb0:	00010003 	.word	0x00010003
     bb4:	001e0003 	.word	0x001e0003
     bb8:	001f0003 	.word	0x001f0003
     bbc:	000d0002 	.word	0x000d0002
     bc0:	000e0002 	.word	0x000e0002
     bc4:	000f0002 	.word	0x000f0002
     bc8:	00110003 	.word	0x00110003
     bcc:	00120003 	.word	0x00120003
     bd0:	00130003 	.word	0x00130003
     bd4:	003f0005 	.word	0x003f0005
     bd8:	003e0005 	.word	0x003e0005
     bdc:	00520005 	.word	0x00520005
     be0:	00170003 	.word	0x00170003
     be4:	00180003 	.word	0x00180003
     be8:	00190003 	.word	0x00190003
     bec:	00040003 	.word	0x00040003
     bf0:	000c0002 	.word	0x000c0002
     bf4:	00100003 	.word	0x00100003
     bf8:	00530005 	.word	0x00530005
     bfc:	00160003 	.word	0x00160003

00000c00 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     c00:	b530      	push	{r4, r5, lr}
     c02:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     c04:	4b0c      	ldr	r3, [pc, #48]	; (c38 <_sercom_get_sercom_inst_index+0x38>)
     c06:	466a      	mov	r2, sp
     c08:	cb32      	ldmia	r3!, {r1, r4, r5}
     c0a:	c232      	stmia	r2!, {r1, r4, r5}
     c0c:	cb32      	ldmia	r3!, {r1, r4, r5}
     c0e:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     c10:	9b00      	ldr	r3, [sp, #0]
     c12:	4283      	cmp	r3, r0
     c14:	d006      	beq.n	c24 <_sercom_get_sercom_inst_index+0x24>
     c16:	2301      	movs	r3, #1
     c18:	009a      	lsls	r2, r3, #2
     c1a:	4669      	mov	r1, sp
     c1c:	5852      	ldr	r2, [r2, r1]
     c1e:	4282      	cmp	r2, r0
     c20:	d103      	bne.n	c2a <_sercom_get_sercom_inst_index+0x2a>
     c22:	e000      	b.n	c26 <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     c24:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
     c26:	b2d8      	uxtb	r0, r3
     c28:	e003      	b.n	c32 <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     c2a:	3301      	adds	r3, #1
     c2c:	2b06      	cmp	r3, #6
     c2e:	d1f3      	bne.n	c18 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     c30:	2000      	movs	r0, #0
}
     c32:	b007      	add	sp, #28
     c34:	bd30      	pop	{r4, r5, pc}
     c36:	46c0      	nop			; (mov r8, r8)
     c38:	00002c50 	.word	0x00002c50

00000c3c <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     c3c:	4770      	bx	lr
     c3e:	46c0      	nop			; (mov r8, r8)

00000c40 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     c40:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     c42:	4b0a      	ldr	r3, [pc, #40]	; (c6c <_sercom_set_handler+0x2c>)
     c44:	781b      	ldrb	r3, [r3, #0]
     c46:	2b00      	cmp	r3, #0
     c48:	d10c      	bne.n	c64 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     c4a:	4f09      	ldr	r7, [pc, #36]	; (c70 <_sercom_set_handler+0x30>)
     c4c:	4e09      	ldr	r6, [pc, #36]	; (c74 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     c4e:	4d0a      	ldr	r5, [pc, #40]	; (c78 <_sercom_set_handler+0x38>)
     c50:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     c52:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     c54:	195a      	adds	r2, r3, r5
     c56:	6014      	str	r4, [r2, #0]
     c58:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     c5a:	2b18      	cmp	r3, #24
     c5c:	d1f9      	bne.n	c52 <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
     c5e:	2201      	movs	r2, #1
     c60:	4b02      	ldr	r3, [pc, #8]	; (c6c <_sercom_set_handler+0x2c>)
     c62:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     c64:	0080      	lsls	r0, r0, #2
     c66:	4b02      	ldr	r3, [pc, #8]	; (c70 <_sercom_set_handler+0x30>)
     c68:	50c1      	str	r1, [r0, r3]
}
     c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c6c:	20000096 	.word	0x20000096
     c70:	20000098 	.word	0x20000098
     c74:	00000c3d 	.word	0x00000c3d
     c78:	200000f8 	.word	0x200000f8

00000c7c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     c7c:	b510      	push	{r4, lr}
     c7e:	b082      	sub	sp, #8
     c80:	0004      	movs	r4, r0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     c82:	2206      	movs	r2, #6
     c84:	4905      	ldr	r1, [pc, #20]	; (c9c <_sercom_get_interrupt_vector+0x20>)
     c86:	4668      	mov	r0, sp
     c88:	4b05      	ldr	r3, [pc, #20]	; (ca0 <_sercom_get_interrupt_vector+0x24>)
     c8a:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     c8c:	0020      	movs	r0, r4
     c8e:	4b05      	ldr	r3, [pc, #20]	; (ca4 <_sercom_get_interrupt_vector+0x28>)
     c90:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     c92:	466b      	mov	r3, sp
     c94:	5618      	ldrsb	r0, [r3, r0]
}
     c96:	b002      	add	sp, #8
     c98:	bd10      	pop	{r4, pc}
     c9a:	46c0      	nop			; (mov r8, r8)
     c9c:	00002c68 	.word	0x00002c68
     ca0:	00001c65 	.word	0x00001c65
     ca4:	00000c01 	.word	0x00000c01

00000ca8 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     ca8:	b510      	push	{r4, lr}
     caa:	4b02      	ldr	r3, [pc, #8]	; (cb4 <SERCOM0_Handler+0xc>)
     cac:	681b      	ldr	r3, [r3, #0]
     cae:	2000      	movs	r0, #0
     cb0:	4798      	blx	r3
     cb2:	bd10      	pop	{r4, pc}
     cb4:	20000098 	.word	0x20000098

00000cb8 <SERCOM1_Handler>:
     cb8:	b510      	push	{r4, lr}
     cba:	4b02      	ldr	r3, [pc, #8]	; (cc4 <SERCOM1_Handler+0xc>)
     cbc:	685b      	ldr	r3, [r3, #4]
     cbe:	2001      	movs	r0, #1
     cc0:	4798      	blx	r3
     cc2:	bd10      	pop	{r4, pc}
     cc4:	20000098 	.word	0x20000098

00000cc8 <SERCOM2_Handler>:
     cc8:	b510      	push	{r4, lr}
     cca:	4b02      	ldr	r3, [pc, #8]	; (cd4 <SERCOM2_Handler+0xc>)
     ccc:	689b      	ldr	r3, [r3, #8]
     cce:	2002      	movs	r0, #2
     cd0:	4798      	blx	r3
     cd2:	bd10      	pop	{r4, pc}
     cd4:	20000098 	.word	0x20000098

00000cd8 <SERCOM3_Handler>:
     cd8:	b510      	push	{r4, lr}
     cda:	4b02      	ldr	r3, [pc, #8]	; (ce4 <SERCOM3_Handler+0xc>)
     cdc:	68db      	ldr	r3, [r3, #12]
     cde:	2003      	movs	r0, #3
     ce0:	4798      	blx	r3
     ce2:	bd10      	pop	{r4, pc}
     ce4:	20000098 	.word	0x20000098

00000ce8 <SERCOM4_Handler>:
     ce8:	b510      	push	{r4, lr}
     cea:	4b02      	ldr	r3, [pc, #8]	; (cf4 <SERCOM4_Handler+0xc>)
     cec:	691b      	ldr	r3, [r3, #16]
     cee:	2004      	movs	r0, #4
     cf0:	4798      	blx	r3
     cf2:	bd10      	pop	{r4, pc}
     cf4:	20000098 	.word	0x20000098

00000cf8 <SERCOM5_Handler>:
     cf8:	b510      	push	{r4, lr}
     cfa:	4b02      	ldr	r3, [pc, #8]	; (d04 <SERCOM5_Handler+0xc>)
     cfc:	695b      	ldr	r3, [r3, #20]
     cfe:	2005      	movs	r0, #5
     d00:	4798      	blx	r3
     d02:	bd10      	pop	{r4, pc}
     d04:	20000098 	.word	0x20000098

00000d08 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     d08:	b5f0      	push	{r4, r5, r6, r7, lr}
     d0a:	4647      	mov	r7, r8
     d0c:	b480      	push	{r7}
     d0e:	b088      	sub	sp, #32
     d10:	0005      	movs	r5, r0
     d12:	000c      	movs	r4, r1
     d14:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     d16:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     d18:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
     d1a:	201c      	movs	r0, #28
	module->hw = hw;

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     d1c:	079b      	lsls	r3, r3, #30
     d1e:	d500      	bpl.n	d22 <spi_init+0x1a>
     d20:	e0bd      	b.n	e9e <spi_init+0x196>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     d22:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
     d24:	3817      	subs	r0, #23
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     d26:	07db      	lsls	r3, r3, #31
     d28:	d500      	bpl.n	d2c <spi_init+0x24>
     d2a:	e0b8      	b.n	e9e <spi_init+0x196>
		return STATUS_BUSY;
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     d2c:	0008      	movs	r0, r1
     d2e:	4b5e      	ldr	r3, [pc, #376]	; (ea8 <spi_init+0x1a0>)
     d30:	4798      	blx	r3
     d32:	495e      	ldr	r1, [pc, #376]	; (eac <spi_init+0x1a4>)
     d34:	6a0a      	ldr	r2, [r1, #32]
     d36:	1c87      	adds	r7, r0, #2
     d38:	2301      	movs	r3, #1
     d3a:	40bb      	lsls	r3, r7
     d3c:	4313      	orrs	r3, r2
     d3e:	620b      	str	r3, [r1, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     d40:	a907      	add	r1, sp, #28
     d42:	2724      	movs	r7, #36	; 0x24
     d44:	5df3      	ldrb	r3, [r6, r7]
     d46:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     d48:	3014      	adds	r0, #20
     d4a:	b2c3      	uxtb	r3, r0
     d4c:	9301      	str	r3, [sp, #4]
     d4e:	0018      	movs	r0, r3
     d50:	4b57      	ldr	r3, [pc, #348]	; (eb0 <spi_init+0x1a8>)
     d52:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     d54:	9801      	ldr	r0, [sp, #4]
     d56:	4b57      	ldr	r3, [pc, #348]	; (eb4 <spi_init+0x1ac>)
     d58:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     d5a:	5df0      	ldrb	r0, [r6, r7]
     d5c:	2100      	movs	r1, #0
     d5e:	4b56      	ldr	r3, [pc, #344]	; (eb8 <spi_init+0x1b0>)
     d60:	4798      	blx	r3
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
     d62:	7833      	ldrb	r3, [r6, #0]
     d64:	2b00      	cmp	r3, #0
     d66:	d103      	bne.n	d70 <spi_init+0x68>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
     d68:	6822      	ldr	r2, [r4, #0]
     d6a:	3308      	adds	r3, #8
     d6c:	4313      	orrs	r3, r2
     d6e:	6023      	str	r3, [r4, #0]
     d70:	002b      	movs	r3, r5
     d72:	330c      	adds	r3, #12
     d74:	0029      	movs	r1, r5
     d76:	3128      	adds	r1, #40	; 0x28
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
		module->callback[i]        = NULL;
     d78:	2200      	movs	r2, #0
     d7a:	c304      	stmia	r3!, {r2}
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
     d7c:	428b      	cmp	r3, r1
     d7e:	d1fc      	bne.n	d7a <spi_init+0x72>
		module->callback[i]        = NULL;
	}
	module->tx_buffer_ptr              = NULL;
     d80:	2300      	movs	r3, #0
     d82:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
     d84:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
     d86:	2400      	movs	r4, #0
     d88:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
     d8a:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
     d8c:	3336      	adds	r3, #54	; 0x36
     d8e:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
     d90:	3301      	adds	r3, #1
     d92:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
     d94:	3301      	adds	r3, #1
     d96:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
     d98:	3b35      	subs	r3, #53	; 0x35
     d9a:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
     d9c:	712c      	strb	r4, [r5, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
     d9e:	6828      	ldr	r0, [r5, #0]
     da0:	4b41      	ldr	r3, [pc, #260]	; (ea8 <spi_init+0x1a0>)
     da2:	4798      	blx	r3
     da4:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
     da6:	4945      	ldr	r1, [pc, #276]	; (ebc <spi_init+0x1b4>)
     da8:	4b45      	ldr	r3, [pc, #276]	; (ec0 <spi_init+0x1b8>)
     daa:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     dac:	00b8      	lsls	r0, r7, #2
     dae:	4b45      	ldr	r3, [pc, #276]	; (ec4 <spi_init+0x1bc>)
     db0:	50c5      	str	r5, [r0, r3]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     db2:	682b      	ldr	r3, [r5, #0]
     db4:	4698      	mov	r8, r3
     db6:	2380      	movs	r3, #128	; 0x80
     db8:	aa02      	add	r2, sp, #8
     dba:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     dbc:	7054      	strb	r4, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     dbe:	2301      	movs	r3, #1
     dc0:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
     dc2:	70d4      	strb	r4, [r2, #3]
	Sercom *const hw = module->hw;

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
     dc4:	7833      	ldrb	r3, [r6, #0]
     dc6:	2b00      	cmp	r3, #0
     dc8:	d100      	bne.n	dcc <spi_init+0xc4>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     dca:	7093      	strb	r3, [r2, #2]
	}

	uint32_t pad_pinmuxes[] = {
     dcc:	6ab3      	ldr	r3, [r6, #40]	; 0x28
     dce:	9303      	str	r3, [sp, #12]
     dd0:	6af3      	ldr	r3, [r6, #44]	; 0x2c
     dd2:	9304      	str	r3, [sp, #16]
     dd4:	6b33      	ldr	r3, [r6, #48]	; 0x30
     dd6:	9305      	str	r3, [sp, #20]
     dd8:	6b73      	ldr	r3, [r6, #52]	; 0x34
     dda:	9306      	str	r3, [sp, #24]
     ddc:	2700      	movs	r7, #0
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     dde:	4c3a      	ldr	r4, [pc, #232]	; (ec8 <spi_init+0x1c0>)
     de0:	b2f9      	uxtb	r1, r7
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
     de2:	00bb      	lsls	r3, r7, #2
     de4:	aa03      	add	r2, sp, #12
     de6:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
     de8:	2800      	cmp	r0, #0
     dea:	d102      	bne.n	df2 <spi_init+0xea>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     dec:	4640      	mov	r0, r8
     dee:	4b37      	ldr	r3, [pc, #220]	; (ecc <spi_init+0x1c4>)
     df0:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
     df2:	1c43      	adds	r3, r0, #1
     df4:	d005      	beq.n	e02 <spi_init+0xfa>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     df6:	ab02      	add	r3, sp, #8
     df8:	7018      	strb	r0, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     dfa:	0c00      	lsrs	r0, r0, #16
     dfc:	b2c0      	uxtb	r0, r0
     dfe:	0019      	movs	r1, r3
     e00:	47a0      	blx	r4
     e02:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     e04:	2f04      	cmp	r7, #4
     e06:	d1eb      	bne.n	de0 <spi_init+0xd8>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
     e08:	7833      	ldrb	r3, [r6, #0]
     e0a:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
     e0c:	7c33      	ldrb	r3, [r6, #16]
     e0e:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
     e10:	7cb3      	ldrb	r3, [r6, #18]
     e12:	71eb      	strb	r3, [r5, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
     e14:	7d33      	ldrb	r3, [r6, #20]
     e16:	722b      	strb	r3, [r5, #8]

		spi_module->BAUD.reg = (uint8_t)baud;
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
     e18:	7833      	ldrb	r3, [r6, #0]
     e1a:	2b00      	cmp	r3, #0
     e1c:	d111      	bne.n	e42 <spi_init+0x13a>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
     e1e:	69b0      	ldr	r0, [r6, #24]

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
     e20:	8bb3      	ldrh	r3, [r6, #28]

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
     e22:	4642      	mov	r2, r8
     e24:	6a51      	ldr	r1, [r2, #36]	; 0x24
     e26:	7ff2      	ldrb	r2, [r6, #31]
     e28:	0412      	lsls	r2, r2, #16
     e2a:	7fb4      	ldrb	r4, [r6, #30]
     e2c:	4322      	orrs	r2, r4
     e2e:	430a      	orrs	r2, r1
     e30:	4641      	mov	r1, r8
     e32:	624a      	str	r2, [r1, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);

		if (config->mode_specific.slave.preload_enable) {
     e34:	2220      	movs	r2, #32
     e36:	5cb2      	ldrb	r2, [r6, r2]
     e38:	2a00      	cmp	r2, #0
     e3a:	d004      	beq.n	e46 <spi_init+0x13e>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
     e3c:	2140      	movs	r1, #64	; 0x40
     e3e:	430b      	orrs	r3, r1
     e40:	e001      	b.n	e46 <spi_init+0x13e>
	uint16_t baud = 0;
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
     e42:	2300      	movs	r3, #0
#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
     e44:	2000      	movs	r0, #0

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;

	/* Set MUX setting */
	ctrla |= config->mux_setting;
     e46:	6872      	ldr	r2, [r6, #4]
     e48:	68b1      	ldr	r1, [r6, #8]
     e4a:	430a      	orrs	r2, r1
     e4c:	68f1      	ldr	r1, [r6, #12]
     e4e:	430a      	orrs	r2, r1
     e50:	4302      	orrs	r2, r0

	/* Set SPI character size */
	ctrlb |= config->character_size;
     e52:	7c31      	ldrb	r1, [r6, #16]
     e54:	430b      	orrs	r3, r1

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     e56:	7c71      	ldrb	r1, [r6, #17]
     e58:	2900      	cmp	r1, #0
     e5a:	d103      	bne.n	e64 <spi_init+0x15c>
     e5c:	491c      	ldr	r1, [pc, #112]	; (ed0 <spi_init+0x1c8>)
     e5e:	7889      	ldrb	r1, [r1, #2]
     e60:	0789      	lsls	r1, r1, #30
     e62:	d501      	bpl.n	e68 <spi_init+0x160>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     e64:	2180      	movs	r1, #128	; 0x80
     e66:	430a      	orrs	r2, r1
	}

	if (config->receiver_enable) {
     e68:	7cb1      	ldrb	r1, [r6, #18]
     e6a:	2900      	cmp	r1, #0
     e6c:	d002      	beq.n	e74 <spi_init+0x16c>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     e6e:	2180      	movs	r1, #128	; 0x80
     e70:	0289      	lsls	r1, r1, #10
     e72:	430b      	orrs	r3, r1
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
     e74:	7cf1      	ldrb	r1, [r6, #19]
     e76:	2900      	cmp	r1, #0
     e78:	d002      	beq.n	e80 <spi_init+0x178>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     e7a:	2180      	movs	r1, #128	; 0x80
     e7c:	0089      	lsls	r1, r1, #2
     e7e:	430b      	orrs	r3, r1
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
     e80:	7d31      	ldrb	r1, [r6, #20]
     e82:	2900      	cmp	r1, #0
     e84:	d002      	beq.n	e8c <spi_init+0x184>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     e86:	2180      	movs	r1, #128	; 0x80
     e88:	0189      	lsls	r1, r1, #6
     e8a:	430b      	orrs	r3, r1
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
     e8c:	4641      	mov	r1, r8
     e8e:	6809      	ldr	r1, [r1, #0]
     e90:	430a      	orrs	r2, r1
     e92:	4641      	mov	r1, r8
     e94:	600a      	str	r2, [r1, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
     e96:	684a      	ldr	r2, [r1, #4]
     e98:	4313      	orrs	r3, r2
     e9a:	604b      	str	r3, [r1, #4]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
     e9c:	2000      	movs	r0, #0
}
     e9e:	b008      	add	sp, #32
     ea0:	bc04      	pop	{r2}
     ea2:	4690      	mov	r8, r2
     ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ea6:	46c0      	nop			; (mov r8, r8)
     ea8:	00000c01 	.word	0x00000c01
     eac:	40000400 	.word	0x40000400
     eb0:	00001519 	.word	0x00001519
     eb4:	0000148d 	.word	0x0000148d
     eb8:	00000a2d 	.word	0x00000a2d
     ebc:	00000f3d 	.word	0x00000f3d
     ec0:	00000c41 	.word	0x00000c41
     ec4:	200000f8 	.word	0x200000f8
     ec8:	00001611 	.word	0x00001611
     ecc:	00000a79 	.word	0x00000a79
     ed0:	41002000 	.word	0x41002000

00000ed4 <spi_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     ed4:	1c93      	adds	r3, r2, #2
     ed6:	009b      	lsls	r3, r3, #2
     ed8:	18c3      	adds	r3, r0, r3
     eda:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->registered_callback |= (1 << callback_type);
     edc:	2136      	movs	r1, #54	; 0x36
     ede:	2301      	movs	r3, #1
     ee0:	4093      	lsls	r3, r2
     ee2:	5c42      	ldrb	r2, [r0, r1]
     ee4:	4313      	orrs	r3, r2
     ee6:	5443      	strb	r3, [r0, r1]
}
     ee8:	4770      	bx	lr
     eea:	46c0      	nop			; (mov r8, r8)

00000eec <spi_read_buffer_job>:
enum status_code spi_read_buffer_job(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
     eec:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     eee:	2417      	movs	r4, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
     ef0:	2a00      	cmp	r2, #0
     ef2:	d01e      	beq.n	f32 <spi_read_buffer_job+0x46>
		return STATUS_ERR_INVALID_ARG;
	}

	if (!(module->receiver_enabled)) {
     ef4:	79c5      	ldrb	r5, [r0, #7]
		return STATUS_ERR_DENIED;
     ef6:	3405      	adds	r4, #5

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	if (!(module->receiver_enabled)) {
     ef8:	2d00      	cmp	r5, #0
     efa:	d01a      	beq.n	f32 <spi_read_buffer_job+0x46>
		return STATUS_ERR_DENIED;
	}

	/* Check if the SPI is busy transmitting or slave waiting for TXC*/
	if (module->status == STATUS_BUSY) {
     efc:	341c      	adds	r4, #28
     efe:	5d04      	ldrb	r4, [r0, r4]
     f00:	b2e4      	uxtb	r4, r4
     f02:	2c05      	cmp	r4, #5
     f04:	d015      	beq.n	f32 <spi_read_buffer_job+0x46>
		return STATUS_BUSY;
	}

	dummy_write = dummy;
     f06:	4c0c      	ldr	r4, [pc, #48]	; (f38 <spi_read_buffer_job+0x4c>)
     f08:	8023      	strh	r3, [r4, #0]

	uint8_t tmp_intenset = 0;

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
     f0a:	8602      	strh	r2, [r0, #48]	; 0x30
	module->remaining_dummy_buffer_length = length;
     f0c:	8642      	strh	r2, [r0, #50]	; 0x32
	module->rx_buffer_ptr = rx_data;
     f0e:	6281      	str	r1, [r0, #40]	; 0x28
	module->status = STATUS_BUSY;
     f10:	2205      	movs	r2, #5
     f12:	2338      	movs	r3, #56	; 0x38
     f14:	54c2      	strb	r2, [r0, r3]

	module->dir = SPI_DIRECTION_READ;
     f16:	2300      	movs	r3, #0
     f18:	7243      	strb	r3, [r0, #9]

	/* Get a pointer to the hardware module instance */
	SercomSpi *const hw = &(module->hw->SPI);
     f1a:	6803      	ldr	r3, [r0, #0]
		/* Enable Data Register Empty interrupt for master */
		tmp_intenset |= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
	}
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
     f1c:	7941      	ldrb	r1, [r0, #5]

	/* Get a pointer to the hardware module instance */
	SercomSpi *const hw = &(module->hw->SPI);

	/* Enable the RX Complete Interrupt */
	tmp_intenset = SPI_INTERRUPT_FLAG_RX_COMPLETE;
     f1e:	3a01      	subs	r2, #1
		/* Enable Data Register Empty interrupt for master */
		tmp_intenset |= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
	}
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
     f20:	2900      	cmp	r1, #0
     f22:	d104      	bne.n	f2e <spi_read_buffer_job+0x42>
		/* Clear TXC flag if set */
		hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     f24:	3a02      	subs	r2, #2
     f26:	761a      	strb	r2, [r3, #24]
		tmp_intenset |= SPI_INTERRUPT_FLAG_TX_COMPLETE;

		/* Workaround for SSL flag enable */
#ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
		/* Clear SSL flag if set */
		hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
     f28:	3206      	adds	r2, #6
     f2a:	761a      	strb	r2, [r3, #24]
		/* Enable Slave Select Low Interrupt for slave */
		tmp_intenset |= SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
     f2c:	3206      	adds	r2, #6
#endif
	}
#  endif

	/* Enable all interrupts simultaneously */
	hw->INTENSET.reg = tmp_intenset;
     f2e:	759a      	strb	r2, [r3, #22]
	}

	dummy_write = dummy;
	/* Issue internal read */
	_spi_read_buffer(module, rx_data, length);
	return STATUS_OK;
     f30:	2400      	movs	r4, #0
}
     f32:	0020      	movs	r0, r4
     f34:	bd30      	pop	{r4, r5, pc}
     f36:	46c0      	nop			; (mov r8, r8)
     f38:	20000110 	.word	0x20000110

00000f3c <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
     f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
     f3e:	0080      	lsls	r0, r0, #2
     f40:	4b63      	ldr	r3, [pc, #396]	; (10d0 <_spi_interrupt_handler+0x194>)
     f42:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
     f44:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
     f46:	2337      	movs	r3, #55	; 0x37

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
     f48:	5ce3      	ldrb	r3, [r4, r3]
     f4a:	2236      	movs	r2, #54	; 0x36
     f4c:	5ca7      	ldrb	r7, [r4, r2]
     f4e:	401f      	ands	r7, r3
			module->enabled_callback & module->registered_callback;

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
     f50:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
     f52:	7db5      	ldrb	r5, [r6, #22]
     f54:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
     f56:	07eb      	lsls	r3, r5, #31
     f58:	d529      	bpl.n	fae <_spi_interrupt_handler+0x72>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			}
		}
#  endif

		if (0
     f5a:	7963      	ldrb	r3, [r4, #5]
     f5c:	2b00      	cmp	r3, #0
     f5e:	d126      	bne.n	fae <_spi_interrupt_handler+0x72>
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
     f60:	7a63      	ldrb	r3, [r4, #9]
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
     f62:	2b00      	cmp	r3, #0
     f64:	d023      	beq.n	fae <_spi_interrupt_handler+0x72>
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
     f66:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
     f68:	780b      	ldrb	r3, [r1, #0]
     f6a:	b2da      	uxtb	r2, r3
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
     f6c:	1c4b      	adds	r3, r1, #1
     f6e:	62e3      	str	r3, [r4, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     f70:	79a3      	ldrb	r3, [r4, #6]
     f72:	2b01      	cmp	r3, #1
     f74:	d001      	beq.n	f7a <_spi_interrupt_handler+0x3e>
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
     f76:	b293      	uxth	r3, r2
     f78:	e004      	b.n	f84 <_spi_interrupt_handler+0x48>
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
     f7a:	784b      	ldrb	r3, [r1, #1]
     f7c:	021b      	lsls	r3, r3, #8
     f7e:	4313      	orrs	r3, r2
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
     f80:	3102      	adds	r1, #2
     f82:	62e1      	str	r1, [r4, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
     f84:	05db      	lsls	r3, r3, #23
     f86:	0ddb      	lsrs	r3, r3, #23
     f88:	62b3      	str	r3, [r6, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
     f8a:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
     f8c:	3b01      	subs	r3, #1
     f8e:	b29b      	uxth	r3, r3
     f90:	86a3      	strh	r3, [r4, #52]	; 0x34
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
			if (module->remaining_tx_buffer_length == 0) {
     f92:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
     f94:	b29b      	uxth	r3, r3
     f96:	2b00      	cmp	r3, #0
     f98:	d109      	bne.n	fae <_spi_interrupt_handler+0x72>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
     f9a:	3301      	adds	r3, #1
     f9c:	7533      	strb	r3, [r6, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
     f9e:	7a63      	ldrb	r3, [r4, #9]
     fa0:	2b01      	cmp	r3, #1
     fa2:	d104      	bne.n	fae <_spi_interrupt_handler+0x72>
     fa4:	79e3      	ldrb	r3, [r4, #7]
     fa6:	2b00      	cmp	r3, #0
     fa8:	d101      	bne.n	fae <_spi_interrupt_handler+0x72>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     faa:	3302      	adds	r3, #2
     fac:	75b3      	strb	r3, [r6, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
     fae:	076b      	lsls	r3, r5, #29
     fb0:	d55f      	bpl.n	1072 <_spi_interrupt_handler+0x136>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     fb2:	8b73      	ldrh	r3, [r6, #26]
     fb4:	075b      	lsls	r3, r3, #29
     fb6:	d512      	bpl.n	fde <_spi_interrupt_handler+0xa2>
			if (module->dir != SPI_DIRECTION_WRITE) {
     fb8:	7a63      	ldrb	r3, [r4, #9]
     fba:	2b01      	cmp	r3, #1
     fbc:	d00b      	beq.n	fd6 <_spi_interrupt_handler+0x9a>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
     fbe:	221e      	movs	r2, #30
     fc0:	2338      	movs	r3, #56	; 0x38
     fc2:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
     fc4:	3b35      	subs	r3, #53	; 0x35
     fc6:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
     fc8:	3302      	adds	r3, #2
     fca:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
     fcc:	073b      	lsls	r3, r7, #28
     fce:	d502      	bpl.n	fd6 <_spi_interrupt_handler+0x9a>
					(module->callback[SPI_CALLBACK_ERROR])(module);
     fd0:	0020      	movs	r0, r4
     fd2:	69a3      	ldr	r3, [r4, #24]
     fd4:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
     fd6:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     fd8:	2304      	movs	r3, #4
     fda:	8373      	strh	r3, [r6, #26]
     fdc:	e049      	b.n	1072 <_spi_interrupt_handler+0x136>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
     fde:	7a63      	ldrb	r3, [r4, #9]
     fe0:	2b01      	cmp	r3, #1
     fe2:	d116      	bne.n	1012 <_spi_interrupt_handler+0xd6>
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
     fe4:	6823      	ldr	r3, [r4, #0]
	uint16_t flush = 0;

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
     fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
     fe8:	8e63      	ldrh	r3, [r4, #50]	; 0x32
     fea:	3b01      	subs	r3, #1
     fec:	b29b      	uxth	r3, r3
     fee:	8663      	strh	r3, [r4, #50]	; 0x32
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
				if (module->remaining_dummy_buffer_length == 0) {
     ff0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
     ff2:	b29b      	uxth	r3, r3
     ff4:	2b00      	cmp	r3, #0
     ff6:	d13c      	bne.n	1072 <_spi_interrupt_handler+0x136>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
     ff8:	3304      	adds	r3, #4
     ffa:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
     ffc:	2200      	movs	r2, #0
     ffe:	3334      	adds	r3, #52	; 0x34
    1000:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    1002:	3b35      	subs	r3, #53	; 0x35
    1004:	7263      	strb	r3, [r4, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
    1006:	07fb      	lsls	r3, r7, #31
    1008:	d533      	bpl.n	1072 <_spi_interrupt_handler+0x136>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    100a:	0020      	movs	r0, r4
    100c:	68e3      	ldr	r3, [r4, #12]
    100e:	4798      	blx	r3
    1010:	e02f      	b.n	1072 <_spi_interrupt_handler+0x136>
 */
static void _spi_read(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1012:	6823      	ldr	r3, [r4, #0]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    1014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1016:	05db      	lsls	r3, r3, #23
    1018:	0ddb      	lsrs	r3, r3, #23

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    101a:	b2da      	uxtb	r2, r3
    101c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    101e:	700a      	strb	r2, [r1, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    1020:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1022:	1c51      	adds	r1, r2, #1
    1024:	62a1      	str	r1, [r4, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1026:	79a1      	ldrb	r1, [r4, #6]
    1028:	2901      	cmp	r1, #1
    102a:	d104      	bne.n	1036 <_spi_interrupt_handler+0xfa>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
    102c:	0a1b      	lsrs	r3, r3, #8
    102e:	7053      	strb	r3, [r2, #1]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
    1030:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1032:	3301      	adds	r3, #1
    1034:	62a3      	str	r3, [r4, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    1036:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    1038:	3b01      	subs	r3, #1
    103a:	b29b      	uxth	r3, r3
    103c:	8623      	strh	r3, [r4, #48]	; 0x30
			} else {
				/* Read data register */
				_spi_read(module);

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    103e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    1040:	b29b      	uxth	r3, r3
    1042:	2b00      	cmp	r3, #0
    1044:	d115      	bne.n	1072 <_spi_interrupt_handler+0x136>
					module->status = STATUS_OK;
    1046:	2200      	movs	r2, #0
    1048:	3338      	adds	r3, #56	; 0x38
    104a:	54e2      	strb	r2, [r4, r3]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    104c:	3b34      	subs	r3, #52	; 0x34
    104e:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    1050:	7a63      	ldrb	r3, [r4, #9]
    1052:	2b02      	cmp	r3, #2
    1054:	d105      	bne.n	1062 <_spi_interrupt_handler+0x126>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    1056:	077b      	lsls	r3, r7, #29
    1058:	d50b      	bpl.n	1072 <_spi_interrupt_handler+0x136>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    105a:	0020      	movs	r0, r4
    105c:	6963      	ldr	r3, [r4, #20]
    105e:	4798      	blx	r3
    1060:	e007      	b.n	1072 <_spi_interrupt_handler+0x136>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    1062:	7a63      	ldrb	r3, [r4, #9]
    1064:	2b00      	cmp	r3, #0
    1066:	d104      	bne.n	1072 <_spi_interrupt_handler+0x136>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    1068:	07bb      	lsls	r3, r7, #30
    106a:	d502      	bpl.n	1072 <_spi_interrupt_handler+0x136>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    106c:	0020      	movs	r0, r4
    106e:	6923      	ldr	r3, [r4, #16]
    1070:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    1072:	07ab      	lsls	r3, r5, #30
    1074:	d513      	bpl.n	109e <_spi_interrupt_handler+0x162>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    1076:	7963      	ldrb	r3, [r4, #5]
    1078:	2b00      	cmp	r3, #0
    107a:	d11d      	bne.n	10b8 <_spi_interrupt_handler+0x17c>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    107c:	3307      	adds	r3, #7
    107e:	7533      	strb	r3, [r6, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1080:	3b05      	subs	r3, #5
    1082:	7633      	strb	r3, [r6, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    1084:	3301      	adds	r3, #1
    1086:	7263      	strb	r3, [r4, #9]
			module->remaining_tx_buffer_length = 0;
    1088:	2300      	movs	r3, #0
    108a:	86a3      	strh	r3, [r4, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    108c:	8623      	strh	r3, [r4, #48]	; 0x30
			module->status = STATUS_OK;
    108e:	3338      	adds	r3, #56	; 0x38
    1090:	2200      	movs	r2, #0
    1092:	54e2      	strb	r2, [r4, r3]

			if (callback_mask &
    1094:	06fb      	lsls	r3, r7, #27
    1096:	d502      	bpl.n	109e <_spi_interrupt_handler+0x162>
					(1 << SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE)) {
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    1098:	0020      	movs	r0, r4
    109a:	69e3      	ldr	r3, [r4, #28]
    109c:	4798      	blx	r3
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    109e:	072b      	lsls	r3, r5, #28
    10a0:	d50a      	bpl.n	10b8 <_spi_interrupt_handler+0x17c>
			if (module->mode == SPI_MODE_SLAVE) {
    10a2:	7963      	ldrb	r3, [r4, #5]
    10a4:	2b00      	cmp	r3, #0
    10a6:	d107      	bne.n	10b8 <_spi_interrupt_handler+0x17c>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    10a8:	3308      	adds	r3, #8
    10aa:	7533      	strb	r3, [r6, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    10ac:	7633      	strb	r3, [r6, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    10ae:	06bb      	lsls	r3, r7, #26
    10b0:	d502      	bpl.n	10b8 <_spi_interrupt_handler+0x17c>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    10b2:	0020      	movs	r0, r4
    10b4:	6a23      	ldr	r3, [r4, #32]
    10b6:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    10b8:	09ed      	lsrs	r5, r5, #7
    10ba:	d007      	beq.n	10cc <_spi_interrupt_handler+0x190>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    10bc:	2380      	movs	r3, #128	; 0x80
    10be:	7533      	strb	r3, [r6, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    10c0:	7633      	strb	r3, [r6, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    10c2:	067b      	lsls	r3, r7, #25
    10c4:	d502      	bpl.n	10cc <_spi_interrupt_handler+0x190>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    10c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    10c8:	0020      	movs	r0, r4
    10ca:	4798      	blx	r3
		}
	}
#  endif
}
    10cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    10ce:	46c0      	nop			; (mov r8, r8)
    10d0:	200000f8 	.word	0x200000f8

000010d4 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    10d4:	b510      	push	{r4, lr}
	switch (clock_source) {
    10d6:	2808      	cmp	r0, #8
    10d8:	d803      	bhi.n	10e2 <system_clock_source_get_hz+0xe>
    10da:	0080      	lsls	r0, r0, #2
    10dc:	4b1b      	ldr	r3, [pc, #108]	; (114c <system_clock_source_get_hz+0x78>)
    10de:	581b      	ldr	r3, [r3, r0]
    10e0:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    10e2:	2000      	movs	r0, #0
    10e4:	e030      	b.n	1148 <system_clock_source_get_hz+0x74>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    10e6:	4b1a      	ldr	r3, [pc, #104]	; (1150 <system_clock_source_get_hz+0x7c>)
    10e8:	6918      	ldr	r0, [r3, #16]
    10ea:	e02d      	b.n	1148 <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    10ec:	4b19      	ldr	r3, [pc, #100]	; (1154 <system_clock_source_get_hz+0x80>)
    10ee:	6a1b      	ldr	r3, [r3, #32]
    10f0:	059b      	lsls	r3, r3, #22
    10f2:	0f9b      	lsrs	r3, r3, #30
    10f4:	4818      	ldr	r0, [pc, #96]	; (1158 <system_clock_source_get_hz+0x84>)
    10f6:	40d8      	lsrs	r0, r3
    10f8:	e026      	b.n	1148 <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    10fa:	4b15      	ldr	r3, [pc, #84]	; (1150 <system_clock_source_get_hz+0x7c>)
    10fc:	6958      	ldr	r0, [r3, #20]
    10fe:	e023      	b.n	1148 <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1100:	4b13      	ldr	r3, [pc, #76]	; (1150 <system_clock_source_get_hz+0x7c>)
    1102:	681b      	ldr	r3, [r3, #0]
    1104:	2002      	movs	r0, #2
    1106:	4018      	ands	r0, r3
    1108:	d01e      	beq.n	1148 <system_clock_source_get_hz+0x74>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    110a:	4912      	ldr	r1, [pc, #72]	; (1154 <system_clock_source_get_hz+0x80>)
    110c:	2210      	movs	r2, #16
    110e:	68cb      	ldr	r3, [r1, #12]
    1110:	421a      	tst	r2, r3
    1112:	d0fc      	beq.n	110e <system_clock_source_get_hz+0x3a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    1114:	4b0e      	ldr	r3, [pc, #56]	; (1150 <system_clock_source_get_hz+0x7c>)
    1116:	681b      	ldr	r3, [r3, #0]
    1118:	075b      	lsls	r3, r3, #29
    111a:	d514      	bpl.n	1146 <system_clock_source_get_hz+0x72>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    111c:	2000      	movs	r0, #0
    111e:	4b0f      	ldr	r3, [pc, #60]	; (115c <system_clock_source_get_hz+0x88>)
    1120:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1122:	4b0b      	ldr	r3, [pc, #44]	; (1150 <system_clock_source_get_hz+0x7c>)
    1124:	689b      	ldr	r3, [r3, #8]
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1126:	041b      	lsls	r3, r3, #16
    1128:	0c1b      	lsrs	r3, r3, #16
    112a:	4358      	muls	r0, r3
    112c:	e00c      	b.n	1148 <system_clock_source_get_hz+0x74>

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    112e:	2350      	movs	r3, #80	; 0x50
    1130:	4a08      	ldr	r2, [pc, #32]	; (1154 <system_clock_source_get_hz+0x80>)
    1132:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1134:	2000      	movs	r0, #0

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1136:	075b      	lsls	r3, r3, #29
    1138:	d506      	bpl.n	1148 <system_clock_source_get_hz+0x74>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    113a:	4b05      	ldr	r3, [pc, #20]	; (1150 <system_clock_source_get_hz+0x7c>)
    113c:	68d8      	ldr	r0, [r3, #12]
    113e:	e003      	b.n	1148 <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    1140:	2080      	movs	r0, #128	; 0x80
    1142:	0200      	lsls	r0, r0, #8
    1144:	e000      	b.n	1148 <system_clock_source_get_hz+0x74>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    1146:	4806      	ldr	r0, [pc, #24]	; (1160 <system_clock_source_get_hz+0x8c>)
#endif

	default:
		return 0;
	}
}
    1148:	bd10      	pop	{r4, pc}
    114a:	46c0      	nop			; (mov r8, r8)
    114c:	00002c70 	.word	0x00002c70
    1150:	200000b0 	.word	0x200000b0
    1154:	40000800 	.word	0x40000800
    1158:	007a1200 	.word	0x007a1200
    115c:	00001535 	.word	0x00001535
    1160:	02dc6c00 	.word	0x02dc6c00

00001164 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1164:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1166:	4c0c      	ldr	r4, [pc, #48]	; (1198 <system_clock_source_osc8m_set_config+0x34>)
    1168:	6a23      	ldr	r3, [r4, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    116a:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    116c:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    116e:	7842      	ldrb	r2, [r0, #1]
    1170:	2001      	movs	r0, #1
    1172:	4002      	ands	r2, r0
    1174:	0192      	lsls	r2, r2, #6
    1176:	2640      	movs	r6, #64	; 0x40
    1178:	43b3      	bics	r3, r6
    117a:	4313      	orrs	r3, r2
    117c:	0002      	movs	r2, r0
    117e:	402a      	ands	r2, r5
    1180:	01d2      	lsls	r2, r2, #7
    1182:	307f      	adds	r0, #127	; 0x7f
    1184:	4383      	bics	r3, r0
    1186:	4313      	orrs	r3, r2
    1188:	2203      	movs	r2, #3
    118a:	400a      	ands	r2, r1
    118c:	0212      	lsls	r2, r2, #8
    118e:	4903      	ldr	r1, [pc, #12]	; (119c <system_clock_source_osc8m_set_config+0x38>)
    1190:	400b      	ands	r3, r1
    1192:	4313      	orrs	r3, r2
    1194:	6223      	str	r3, [r4, #32]
}
    1196:	bd70      	pop	{r4, r5, r6, pc}
    1198:	40000800 	.word	0x40000800
    119c:	fffffcff 	.word	0xfffffcff

000011a0 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    11a0:	2808      	cmp	r0, #8
    11a2:	d803      	bhi.n	11ac <system_clock_source_enable+0xc>
    11a4:	0080      	lsls	r0, r0, #2
    11a6:	4b25      	ldr	r3, [pc, #148]	; (123c <system_clock_source_enable+0x9c>)
    11a8:	581b      	ldr	r3, [r3, r0]
    11aa:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    11ac:	2017      	movs	r0, #23
    11ae:	e044      	b.n	123a <system_clock_source_enable+0x9a>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    11b0:	4a23      	ldr	r2, [pc, #140]	; (1240 <system_clock_source_enable+0xa0>)
    11b2:	6a11      	ldr	r1, [r2, #32]
    11b4:	2302      	movs	r3, #2
    11b6:	430b      	orrs	r3, r1
    11b8:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    11ba:	2000      	movs	r0, #0
    11bc:	e03d      	b.n	123a <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    11be:	4a20      	ldr	r2, [pc, #128]	; (1240 <system_clock_source_enable+0xa0>)
    11c0:	6991      	ldr	r1, [r2, #24]
    11c2:	2302      	movs	r3, #2
    11c4:	430b      	orrs	r3, r1
    11c6:	6193      	str	r3, [r2, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    11c8:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
    11ca:	e036      	b.n	123a <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    11cc:	4a1c      	ldr	r2, [pc, #112]	; (1240 <system_clock_source_enable+0xa0>)
    11ce:	8a11      	ldrh	r1, [r2, #16]
    11d0:	2302      	movs	r3, #2
    11d2:	430b      	orrs	r3, r1
    11d4:	8213      	strh	r3, [r2, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    11d6:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
    11d8:	e02f      	b.n	123a <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    11da:	4a19      	ldr	r2, [pc, #100]	; (1240 <system_clock_source_enable+0xa0>)
    11dc:	8a91      	ldrh	r1, [r2, #20]
    11de:	2302      	movs	r3, #2
    11e0:	430b      	orrs	r3, r1
    11e2:	8293      	strh	r3, [r2, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    11e4:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
    11e6:	e028      	b.n	123a <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    11e8:	4916      	ldr	r1, [pc, #88]	; (1244 <system_clock_source_enable+0xa4>)
    11ea:	680b      	ldr	r3, [r1, #0]
    11ec:	2202      	movs	r2, #2
    11ee:	4313      	orrs	r3, r2
    11f0:	600b      	str	r3, [r1, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    11f2:	4b13      	ldr	r3, [pc, #76]	; (1240 <system_clock_source_enable+0xa0>)
    11f4:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    11f6:	0019      	movs	r1, r3
    11f8:	320e      	adds	r2, #14
    11fa:	68cb      	ldr	r3, [r1, #12]
    11fc:	421a      	tst	r2, r3
    11fe:	d0fc      	beq.n	11fa <system_clock_source_enable+0x5a>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1200:	4a10      	ldr	r2, [pc, #64]	; (1244 <system_clock_source_enable+0xa4>)
    1202:	6891      	ldr	r1, [r2, #8]
    1204:	4b0e      	ldr	r3, [pc, #56]	; (1240 <system_clock_source_enable+0xa0>)
    1206:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1208:	6852      	ldr	r2, [r2, #4]
    120a:	629a      	str	r2, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    120c:	2200      	movs	r2, #0
    120e:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1210:	0019      	movs	r1, r3
    1212:	3210      	adds	r2, #16
    1214:	68cb      	ldr	r3, [r1, #12]
    1216:	421a      	tst	r2, r3
    1218:	d0fc      	beq.n	1214 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
	_system_dfll_wait_for_sync();
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    121a:	4b0a      	ldr	r3, [pc, #40]	; (1244 <system_clock_source_enable+0xa4>)
    121c:	681b      	ldr	r3, [r3, #0]
    121e:	b29b      	uxth	r3, r3
    1220:	4a07      	ldr	r2, [pc, #28]	; (1240 <system_clock_source_enable+0xa0>)
    1222:	8493      	strh	r3, [r2, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1224:	2000      	movs	r0, #0
    1226:	e008      	b.n	123a <system_clock_source_enable+0x9a>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1228:	4905      	ldr	r1, [pc, #20]	; (1240 <system_clock_source_enable+0xa0>)
    122a:	2244      	movs	r2, #68	; 0x44
    122c:	5c88      	ldrb	r0, [r1, r2]
    122e:	2302      	movs	r3, #2
    1230:	4303      	orrs	r3, r0
    1232:	548b      	strb	r3, [r1, r2]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1234:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
    1236:	e000      	b.n	123a <system_clock_source_enable+0x9a>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    1238:	2000      	movs	r0, #0
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
    123a:	4770      	bx	lr
    123c:	00002c94 	.word	0x00002c94
    1240:	40000800 	.word	0x40000800
    1244:	200000b0 	.word	0x200000b0

00001248 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1248:	b530      	push	{r4, r5, lr}
    124a:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    124c:	22c2      	movs	r2, #194	; 0xc2
    124e:	00d2      	lsls	r2, r2, #3
    1250:	4b1a      	ldr	r3, [pc, #104]	; (12bc <system_clock_init+0x74>)
    1252:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1254:	4a1a      	ldr	r2, [pc, #104]	; (12c0 <system_clock_init+0x78>)
    1256:	6853      	ldr	r3, [r2, #4]
    1258:	211e      	movs	r1, #30
    125a:	438b      	bics	r3, r1
    125c:	6053      	str	r3, [r2, #4]
{
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    125e:	2301      	movs	r3, #1
    1260:	466a      	mov	r2, sp
    1262:	7013      	strb	r3, [r2, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1264:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1266:	4d17      	ldr	r5, [pc, #92]	; (12c4 <system_clock_init+0x7c>)
    1268:	b2e0      	uxtb	r0, r4
    126a:	4669      	mov	r1, sp
    126c:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    126e:	3401      	adds	r4, #1
    1270:	2c25      	cmp	r4, #37	; 0x25
    1272:	d1f9      	bne.n	1268 <system_clock_init+0x20>
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
    1274:	a803      	add	r0, sp, #12
    1276:	2400      	movs	r4, #0
    1278:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    127a:	2501      	movs	r5, #1
    127c:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    127e:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1280:	4b11      	ldr	r3, [pc, #68]	; (12c8 <system_clock_init+0x80>)
    1282:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1284:	2006      	movs	r0, #6
    1286:	4b11      	ldr	r3, [pc, #68]	; (12cc <system_clock_init+0x84>)
    1288:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    128a:	4b11      	ldr	r3, [pc, #68]	; (12d0 <system_clock_init+0x88>)
    128c:	4798      	blx	r3
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    128e:	4b11      	ldr	r3, [pc, #68]	; (12d4 <system_clock_init+0x8c>)
    1290:	721c      	strb	r4, [r3, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    1292:	725c      	strb	r4, [r3, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    1294:	729c      	strb	r4, [r3, #10]
			break;
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    1296:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1298:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    129a:	466b      	mov	r3, sp
    129c:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    129e:	2306      	movs	r3, #6
    12a0:	466a      	mov	r2, sp
    12a2:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
    12a4:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    12a6:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    12a8:	4669      	mov	r1, sp
    12aa:	2000      	movs	r0, #0
    12ac:	4b0a      	ldr	r3, [pc, #40]	; (12d8 <system_clock_init+0x90>)
    12ae:	4798      	blx	r3
    12b0:	2000      	movs	r0, #0
    12b2:	4b0a      	ldr	r3, [pc, #40]	; (12dc <system_clock_init+0x94>)
    12b4:	4798      	blx	r3
#endif
}
    12b6:	b005      	add	sp, #20
    12b8:	bd30      	pop	{r4, r5, pc}
    12ba:	46c0      	nop			; (mov r8, r8)
    12bc:	40000800 	.word	0x40000800
    12c0:	41004000 	.word	0x41004000
    12c4:	00001519 	.word	0x00001519
    12c8:	00001165 	.word	0x00001165
    12cc:	000011a1 	.word	0x000011a1
    12d0:	000012e1 	.word	0x000012e1
    12d4:	40000400 	.word	0x40000400
    12d8:	00001305 	.word	0x00001305
    12dc:	000013bd 	.word	0x000013bd

000012e0 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    12e0:	4a06      	ldr	r2, [pc, #24]	; (12fc <system_gclk_init+0x1c>)
    12e2:	6991      	ldr	r1, [r2, #24]
    12e4:	2308      	movs	r3, #8
    12e6:	430b      	orrs	r3, r1
    12e8:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    12ea:	2201      	movs	r2, #1
    12ec:	4b04      	ldr	r3, [pc, #16]	; (1300 <system_gclk_init+0x20>)
    12ee:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    12f0:	0019      	movs	r1, r3
    12f2:	780b      	ldrb	r3, [r1, #0]
    12f4:	4213      	tst	r3, r2
    12f6:	d1fc      	bne.n	12f2 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    12f8:	4770      	bx	lr
    12fa:	46c0      	nop			; (mov r8, r8)
    12fc:	40000400 	.word	0x40000400
    1300:	40000c00 	.word	0x40000c00

00001304 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1304:	b570      	push	{r4, r5, r6, lr}
    1306:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1308:	0005      	movs	r5, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    130a:	780c      	ldrb	r4, [r1, #0]
    130c:	0224      	lsls	r4, r4, #8
    130e:	4304      	orrs	r4, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1310:	784b      	ldrb	r3, [r1, #1]
    1312:	2b00      	cmp	r3, #0
    1314:	d002      	beq.n	131c <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1316:	2380      	movs	r3, #128	; 0x80
    1318:	02db      	lsls	r3, r3, #11
    131a:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    131c:	7a4b      	ldrb	r3, [r1, #9]
    131e:	2b00      	cmp	r3, #0
    1320:	d002      	beq.n	1328 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1322:	2380      	movs	r3, #128	; 0x80
    1324:	031b      	lsls	r3, r3, #12
    1326:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1328:	6848      	ldr	r0, [r1, #4]
    132a:	2801      	cmp	r0, #1
    132c:	d918      	bls.n	1360 <system_gclk_gen_set_config+0x5c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    132e:	1e43      	subs	r3, r0, #1
    1330:	4218      	tst	r0, r3
    1332:	d110      	bne.n	1356 <system_gclk_gen_set_config+0x52>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1334:	2802      	cmp	r0, #2
    1336:	d906      	bls.n	1346 <system_gclk_gen_set_config+0x42>
    1338:	2302      	movs	r3, #2
    133a:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    133c:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    133e:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1340:	4298      	cmp	r0, r3
    1342:	d8fb      	bhi.n	133c <system_gclk_gen_set_config+0x38>
    1344:	e000      	b.n	1348 <system_gclk_gen_set_config+0x44>
    1346:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1348:	0212      	lsls	r2, r2, #8
    134a:	4332      	orrs	r2, r6
    134c:	0015      	movs	r5, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    134e:	2380      	movs	r3, #128	; 0x80
    1350:	035b      	lsls	r3, r3, #13
    1352:	431c      	orrs	r4, r3
    1354:	e004      	b.n	1360 <system_gclk_gen_set_config+0x5c>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    1356:	0205      	lsls	r5, r0, #8
    1358:	4335      	orrs	r5, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    135a:	2380      	movs	r3, #128	; 0x80
    135c:	029b      	lsls	r3, r3, #10
    135e:	431c      	orrs	r4, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1360:	7a0b      	ldrb	r3, [r1, #8]
    1362:	2b00      	cmp	r3, #0
    1364:	d002      	beq.n	136c <system_gclk_gen_set_config+0x68>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1366:	2380      	movs	r3, #128	; 0x80
    1368:	039b      	lsls	r3, r3, #14
    136a:	431c      	orrs	r4, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    136c:	4a0f      	ldr	r2, [pc, #60]	; (13ac <system_gclk_gen_set_config+0xa8>)
    136e:	7853      	ldrb	r3, [r2, #1]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing()) {
    1370:	b25b      	sxtb	r3, r3
    1372:	2b00      	cmp	r3, #0
    1374:	dbfb      	blt.n	136e <system_gclk_gen_set_config+0x6a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1376:	4b0e      	ldr	r3, [pc, #56]	; (13b0 <system_gclk_gen_set_config+0xac>)
    1378:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    137a:	4b0e      	ldr	r3, [pc, #56]	; (13b4 <system_gclk_gen_set_config+0xb0>)
    137c:	701e      	strb	r6, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    137e:	4a0b      	ldr	r2, [pc, #44]	; (13ac <system_gclk_gen_set_config+0xa8>)
    1380:	7853      	ldrb	r3, [r2, #1]

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1382:	b25b      	sxtb	r3, r3
    1384:	2b00      	cmp	r3, #0
    1386:	dbfb      	blt.n	1380 <system_gclk_gen_set_config+0x7c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1388:	4b08      	ldr	r3, [pc, #32]	; (13ac <system_gclk_gen_set_config+0xa8>)
    138a:	609d      	str	r5, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    138c:	001a      	movs	r2, r3
    138e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
    1390:	b25b      	sxtb	r3, r3
    1392:	2b00      	cmp	r3, #0
    1394:	dbfb      	blt.n	138e <system_gclk_gen_set_config+0x8a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1396:	4a05      	ldr	r2, [pc, #20]	; (13ac <system_gclk_gen_set_config+0xa8>)
    1398:	6851      	ldr	r1, [r2, #4]
    139a:	2380      	movs	r3, #128	; 0x80
    139c:	025b      	lsls	r3, r3, #9
    139e:	400b      	ands	r3, r1
    13a0:	431c      	orrs	r4, r3
    13a2:	6054      	str	r4, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    13a4:	4b04      	ldr	r3, [pc, #16]	; (13b8 <system_gclk_gen_set_config+0xb4>)
    13a6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    13a8:	bd70      	pop	{r4, r5, r6, pc}
    13aa:	46c0      	nop			; (mov r8, r8)
    13ac:	40000c00 	.word	0x40000c00
    13b0:	00000771 	.word	0x00000771
    13b4:	40000c08 	.word	0x40000c08
    13b8:	000007b1 	.word	0x000007b1

000013bc <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    13bc:	b510      	push	{r4, lr}
    13be:	0004      	movs	r4, r0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    13c0:	4a0b      	ldr	r2, [pc, #44]	; (13f0 <system_gclk_gen_enable+0x34>)
    13c2:	7853      	ldrb	r3, [r2, #1]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    13c4:	b25b      	sxtb	r3, r3
    13c6:	2b00      	cmp	r3, #0
    13c8:	dbfb      	blt.n	13c2 <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    13ca:	4b0a      	ldr	r3, [pc, #40]	; (13f4 <system_gclk_gen_enable+0x38>)
    13cc:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    13ce:	4b0a      	ldr	r3, [pc, #40]	; (13f8 <system_gclk_gen_enable+0x3c>)
    13d0:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    13d2:	4a07      	ldr	r2, [pc, #28]	; (13f0 <system_gclk_gen_enable+0x34>)
    13d4:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    13d6:	b25b      	sxtb	r3, r3
    13d8:	2b00      	cmp	r3, #0
    13da:	dbfb      	blt.n	13d4 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    13dc:	4a04      	ldr	r2, [pc, #16]	; (13f0 <system_gclk_gen_enable+0x34>)
    13de:	6853      	ldr	r3, [r2, #4]
    13e0:	2180      	movs	r1, #128	; 0x80
    13e2:	0249      	lsls	r1, r1, #9
    13e4:	430b      	orrs	r3, r1
    13e6:	6053      	str	r3, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    13e8:	4b04      	ldr	r3, [pc, #16]	; (13fc <system_gclk_gen_enable+0x40>)
    13ea:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    13ec:	bd10      	pop	{r4, pc}
    13ee:	46c0      	nop			; (mov r8, r8)
    13f0:	40000c00 	.word	0x40000c00
    13f4:	00000771 	.word	0x00000771
    13f8:	40000c04 	.word	0x40000c04
    13fc:	000007b1 	.word	0x000007b1

00001400 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1400:	b570      	push	{r4, r5, r6, lr}
    1402:	0004      	movs	r4, r0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1404:	4a1a      	ldr	r2, [pc, #104]	; (1470 <system_gclk_gen_get_hz+0x70>)
    1406:	7853      	ldrb	r3, [r2, #1]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    1408:	b25b      	sxtb	r3, r3
    140a:	2b00      	cmp	r3, #0
    140c:	dbfb      	blt.n	1406 <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    140e:	4b19      	ldr	r3, [pc, #100]	; (1474 <system_gclk_gen_get_hz+0x74>)
    1410:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1412:	4b19      	ldr	r3, [pc, #100]	; (1478 <system_gclk_gen_get_hz+0x78>)
    1414:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1416:	4a16      	ldr	r2, [pc, #88]	; (1470 <system_gclk_gen_get_hz+0x70>)
    1418:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    141a:	b25b      	sxtb	r3, r3
    141c:	2b00      	cmp	r3, #0
    141e:	dbfb      	blt.n	1418 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1420:	4e13      	ldr	r6, [pc, #76]	; (1470 <system_gclk_gen_get_hz+0x70>)
    1422:	6870      	ldr	r0, [r6, #4]
    1424:	04c0      	lsls	r0, r0, #19
    1426:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1428:	4b14      	ldr	r3, [pc, #80]	; (147c <system_gclk_gen_get_hz+0x7c>)
    142a:	4798      	blx	r3
    142c:	0005      	movs	r5, r0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    142e:	4b12      	ldr	r3, [pc, #72]	; (1478 <system_gclk_gen_get_hz+0x78>)
    1430:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1432:	6876      	ldr	r6, [r6, #4]
    1434:	02f6      	lsls	r6, r6, #11
    1436:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1438:	4b11      	ldr	r3, [pc, #68]	; (1480 <system_gclk_gen_get_hz+0x80>)
    143a:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    143c:	4a0c      	ldr	r2, [pc, #48]	; (1470 <system_gclk_gen_get_hz+0x70>)
    143e:	7853      	ldrb	r3, [r2, #1]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
	while (system_gclk_is_syncing()) {
    1440:	b25b      	sxtb	r3, r3
    1442:	2b00      	cmp	r3, #0
    1444:	dbfb      	blt.n	143e <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1446:	4b0a      	ldr	r3, [pc, #40]	; (1470 <system_gclk_gen_get_hz+0x70>)
    1448:	689c      	ldr	r4, [r3, #8]
    144a:	0224      	lsls	r4, r4, #8
    144c:	0c24      	lsrs	r4, r4, #16
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    144e:	4b0d      	ldr	r3, [pc, #52]	; (1484 <system_gclk_gen_get_hz+0x84>)
    1450:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1452:	2e00      	cmp	r6, #0
    1454:	d107      	bne.n	1466 <system_gclk_gen_get_hz+0x66>
    1456:	2c01      	cmp	r4, #1
    1458:	d907      	bls.n	146a <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    145a:	0021      	movs	r1, r4
    145c:	0028      	movs	r0, r5
    145e:	4b0a      	ldr	r3, [pc, #40]	; (1488 <system_gclk_gen_get_hz+0x88>)
    1460:	4798      	blx	r3
    1462:	0005      	movs	r5, r0
    1464:	e001      	b.n	146a <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1466:	3401      	adds	r4, #1
    1468:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    146a:	0028      	movs	r0, r5
    146c:	bd70      	pop	{r4, r5, r6, pc}
    146e:	46c0      	nop			; (mov r8, r8)
    1470:	40000c00 	.word	0x40000c00
    1474:	00000771 	.word	0x00000771
    1478:	40000c04 	.word	0x40000c04
    147c:	000010d5 	.word	0x000010d5
    1480:	40000c08 	.word	0x40000c08
    1484:	000007b1 	.word	0x000007b1
    1488:	00001aa9 	.word	0x00001aa9

0000148c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    148c:	b510      	push	{r4, lr}
    148e:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1490:	4b06      	ldr	r3, [pc, #24]	; (14ac <system_gclk_chan_enable+0x20>)
    1492:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1494:	4b06      	ldr	r3, [pc, #24]	; (14b0 <system_gclk_chan_enable+0x24>)
    1496:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1498:	4a06      	ldr	r2, [pc, #24]	; (14b4 <system_gclk_chan_enable+0x28>)
    149a:	8851      	ldrh	r1, [r2, #2]
    149c:	2380      	movs	r3, #128	; 0x80
    149e:	01db      	lsls	r3, r3, #7
    14a0:	430b      	orrs	r3, r1
    14a2:	8053      	strh	r3, [r2, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    14a4:	4b04      	ldr	r3, [pc, #16]	; (14b8 <system_gclk_chan_enable+0x2c>)
    14a6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    14a8:	bd10      	pop	{r4, pc}
    14aa:	46c0      	nop			; (mov r8, r8)
    14ac:	00000771 	.word	0x00000771
    14b0:	40000c02 	.word	0x40000c02
    14b4:	40000c00 	.word	0x40000c00
    14b8:	000007b1 	.word	0x000007b1

000014bc <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    14bc:	b510      	push	{r4, lr}
    14be:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    14c0:	4b0f      	ldr	r3, [pc, #60]	; (1500 <system_gclk_chan_disable+0x44>)
    14c2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    14c4:	4b0f      	ldr	r3, [pc, #60]	; (1504 <system_gclk_chan_disable+0x48>)
    14c6:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    14c8:	4b0f      	ldr	r3, [pc, #60]	; (1508 <system_gclk_chan_disable+0x4c>)
    14ca:	885a      	ldrh	r2, [r3, #2]
    14cc:	0512      	lsls	r2, r2, #20
    14ce:	0f10      	lsrs	r0, r2, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    14d0:	8859      	ldrh	r1, [r3, #2]
    14d2:	4a0e      	ldr	r2, [pc, #56]	; (150c <system_gclk_chan_disable+0x50>)
    14d4:	400a      	ands	r2, r1
    14d6:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    14d8:	8859      	ldrh	r1, [r3, #2]
    14da:	4a0d      	ldr	r2, [pc, #52]	; (1510 <system_gclk_chan_disable+0x54>)
    14dc:	400a      	ands	r2, r1
    14de:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    14e0:	0019      	movs	r1, r3
    14e2:	2280      	movs	r2, #128	; 0x80
    14e4:	01d2      	lsls	r2, r2, #7
    14e6:	884b      	ldrh	r3, [r1, #2]
    14e8:	4213      	tst	r3, r2
    14ea:	d1fc      	bne.n	14e6 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    14ec:	4906      	ldr	r1, [pc, #24]	; (1508 <system_gclk_chan_disable+0x4c>)
    14ee:	884c      	ldrh	r4, [r1, #2]
    14f0:	0202      	lsls	r2, r0, #8
    14f2:	4b06      	ldr	r3, [pc, #24]	; (150c <system_gclk_chan_disable+0x50>)
    14f4:	4023      	ands	r3, r4
    14f6:	4313      	orrs	r3, r2
    14f8:	804b      	strh	r3, [r1, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    14fa:	4b06      	ldr	r3, [pc, #24]	; (1514 <system_gclk_chan_disable+0x58>)
    14fc:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    14fe:	bd10      	pop	{r4, pc}
    1500:	00000771 	.word	0x00000771
    1504:	40000c02 	.word	0x40000c02
    1508:	40000c00 	.word	0x40000c00
    150c:	fffff0ff 	.word	0xfffff0ff
    1510:	ffffbfff 	.word	0xffffbfff
    1514:	000007b1 	.word	0x000007b1

00001518 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    1518:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    151a:	780c      	ldrb	r4, [r1, #0]
    151c:	0224      	lsls	r4, r4, #8
    151e:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    1520:	4b02      	ldr	r3, [pc, #8]	; (152c <system_gclk_chan_set_config+0x14>)
    1522:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1524:	b2a4      	uxth	r4, r4
    1526:	4b02      	ldr	r3, [pc, #8]	; (1530 <system_gclk_chan_set_config+0x18>)
    1528:	805c      	strh	r4, [r3, #2]
}
    152a:	bd10      	pop	{r4, pc}
    152c:	000014bd 	.word	0x000014bd
    1530:	40000c00 	.word	0x40000c00

00001534 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1534:	b510      	push	{r4, lr}
    1536:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1538:	4b06      	ldr	r3, [pc, #24]	; (1554 <system_gclk_chan_get_hz+0x20>)
    153a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    153c:	4b06      	ldr	r3, [pc, #24]	; (1558 <system_gclk_chan_get_hz+0x24>)
    153e:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1540:	4b06      	ldr	r3, [pc, #24]	; (155c <system_gclk_chan_get_hz+0x28>)
    1542:	885c      	ldrh	r4, [r3, #2]
    1544:	0524      	lsls	r4, r4, #20
    1546:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1548:	4b05      	ldr	r3, [pc, #20]	; (1560 <system_gclk_chan_get_hz+0x2c>)
    154a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    154c:	0020      	movs	r0, r4
    154e:	4b05      	ldr	r3, [pc, #20]	; (1564 <system_gclk_chan_get_hz+0x30>)
    1550:	4798      	blx	r3
}
    1552:	bd10      	pop	{r4, pc}
    1554:	00000771 	.word	0x00000771
    1558:	40000c02 	.word	0x40000c02
    155c:	40000c00 	.word	0x40000c00
    1560:	000007b1 	.word	0x000007b1
    1564:	00001401 	.word	0x00001401

00001568 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1568:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    156a:	78d3      	ldrb	r3, [r2, #3]
    156c:	2b00      	cmp	r3, #0
    156e:	d11e      	bne.n	15ae <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1570:	7813      	ldrb	r3, [r2, #0]
    1572:	2b80      	cmp	r3, #128	; 0x80
    1574:	d004      	beq.n	1580 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1576:	061b      	lsls	r3, r3, #24
    1578:	2480      	movs	r4, #128	; 0x80
    157a:	0264      	lsls	r4, r4, #9
    157c:	4323      	orrs	r3, r4
    157e:	e000      	b.n	1582 <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    1580:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1582:	7854      	ldrb	r4, [r2, #1]
    1584:	2502      	movs	r5, #2
    1586:	43ac      	bics	r4, r5
    1588:	d10a      	bne.n	15a0 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    158a:	7894      	ldrb	r4, [r2, #2]
    158c:	2c00      	cmp	r4, #0
    158e:	d103      	bne.n	1598 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    1590:	2480      	movs	r4, #128	; 0x80
    1592:	02a4      	lsls	r4, r4, #10
    1594:	4323      	orrs	r3, r4
    1596:	e002      	b.n	159e <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1598:	24c0      	movs	r4, #192	; 0xc0
    159a:	02e4      	lsls	r4, r4, #11
    159c:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    159e:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    15a0:	7854      	ldrb	r4, [r2, #1]
    15a2:	3c01      	subs	r4, #1
    15a4:	2c01      	cmp	r4, #1
    15a6:	d812      	bhi.n	15ce <_system_pinmux_config+0x66>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    15a8:	4c18      	ldr	r4, [pc, #96]	; (160c <_system_pinmux_config+0xa4>)
    15aa:	4023      	ands	r3, r4
    15ac:	e00f      	b.n	15ce <_system_pinmux_config+0x66>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    15ae:	6041      	str	r1, [r0, #4]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    15b0:	040b      	lsls	r3, r1, #16
    15b2:	0c1b      	lsrs	r3, r3, #16
    15b4:	24a0      	movs	r4, #160	; 0xa0
    15b6:	05e4      	lsls	r4, r4, #23
    15b8:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    15ba:	6283      	str	r3, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    15bc:	0c0b      	lsrs	r3, r1, #16
    15be:	24d0      	movs	r4, #208	; 0xd0
    15c0:	0624      	lsls	r4, r4, #24
    15c2:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    15c4:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    15c6:	78d3      	ldrb	r3, [r2, #3]
    15c8:	2b00      	cmp	r3, #0
    15ca:	d018      	beq.n	15fe <_system_pinmux_config+0x96>
    15cc:	e01c      	b.n	1608 <_system_pinmux_config+0xa0>

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    15ce:	040c      	lsls	r4, r1, #16
    15d0:	0c24      	lsrs	r4, r4, #16
    15d2:	25a0      	movs	r5, #160	; 0xa0
    15d4:	05ed      	lsls	r5, r5, #23
    15d6:	432c      	orrs	r4, r5
    15d8:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    15da:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    15dc:	0c0c      	lsrs	r4, r1, #16
    15de:	25d0      	movs	r5, #208	; 0xd0
    15e0:	062d      	lsls	r5, r5, #24
    15e2:	432c      	orrs	r4, r5
    15e4:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    15e6:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    15e8:	78d4      	ldrb	r4, [r2, #3]
    15ea:	2c00      	cmp	r4, #0
    15ec:	d10c      	bne.n	1608 <_system_pinmux_config+0xa0>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    15ee:	035b      	lsls	r3, r3, #13
    15f0:	d505      	bpl.n	15fe <_system_pinmux_config+0x96>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    15f2:	7893      	ldrb	r3, [r2, #2]
    15f4:	2b01      	cmp	r3, #1
    15f6:	d101      	bne.n	15fc <_system_pinmux_config+0x94>
				port->OUTSET.reg = pin_mask;
    15f8:	6181      	str	r1, [r0, #24]
    15fa:	e000      	b.n	15fe <_system_pinmux_config+0x96>
			} else {
				port->OUTCLR.reg = pin_mask;
    15fc:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    15fe:	7853      	ldrb	r3, [r2, #1]
    1600:	3b01      	subs	r3, #1
    1602:	2b01      	cmp	r3, #1
    1604:	d800      	bhi.n	1608 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    1606:	6081      	str	r1, [r0, #8]
		}
	}
}
    1608:	bd30      	pop	{r4, r5, pc}
    160a:	46c0      	nop			; (mov r8, r8)
    160c:	fffbffff 	.word	0xfffbffff

00001610 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1610:	b510      	push	{r4, lr}
    1612:	0003      	movs	r3, r0
    1614:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1616:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1618:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    161a:	2900      	cmp	r1, #0
    161c:	d104      	bne.n	1628 <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
    161e:	0958      	lsrs	r0, r3, #5
    1620:	01c0      	lsls	r0, r0, #7
    1622:	4905      	ldr	r1, [pc, #20]	; (1638 <system_pinmux_pin_set_config+0x28>)
    1624:	468c      	mov	ip, r1
    1626:	4460      	add	r0, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));

	_system_pinmux_config(port, pin_mask, config);
    1628:	211f      	movs	r1, #31
    162a:	400b      	ands	r3, r1
    162c:	391e      	subs	r1, #30
    162e:	4099      	lsls	r1, r3
    1630:	4b02      	ldr	r3, [pc, #8]	; (163c <system_pinmux_pin_set_config+0x2c>)
    1632:	4798      	blx	r3
}
    1634:	bd10      	pop	{r4, pc}
    1636:	46c0      	nop			; (mov r8, r8)
    1638:	41004400 	.word	0x41004400
    163c:	00001569 	.word	0x00001569

00001640 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1640:	4770      	bx	lr
    1642:	46c0      	nop			; (mov r8, r8)

00001644 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1644:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1646:	4b05      	ldr	r3, [pc, #20]	; (165c <system_init+0x18>)
    1648:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    164a:	4b05      	ldr	r3, [pc, #20]	; (1660 <system_init+0x1c>)
    164c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    164e:	4b05      	ldr	r3, [pc, #20]	; (1664 <system_init+0x20>)
    1650:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1652:	4b05      	ldr	r3, [pc, #20]	; (1668 <system_init+0x24>)
    1654:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1656:	4b05      	ldr	r3, [pc, #20]	; (166c <system_init+0x28>)
    1658:	4798      	blx	r3
}
    165a:	bd10      	pop	{r4, pc}
    165c:	00001249 	.word	0x00001249
    1660:	000007e1 	.word	0x000007e1
    1664:	00001641 	.word	0x00001641
    1668:	00001641 	.word	0x00001641
    166c:	00001641 	.word	0x00001641

00001670 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1670:	e7fe      	b.n	1670 <Dummy_Handler>
    1672:	46c0      	nop			; (mov r8, r8)

00001674 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    1674:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    1676:	4b2e      	ldr	r3, [pc, #184]	; (1730 <Reset_Handler+0xbc>)
    1678:	4a2e      	ldr	r2, [pc, #184]	; (1734 <Reset_Handler+0xc0>)
    167a:	429a      	cmp	r2, r3
    167c:	d003      	beq.n	1686 <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    167e:	4b2e      	ldr	r3, [pc, #184]	; (1738 <Reset_Handler+0xc4>)
    1680:	4a2b      	ldr	r2, [pc, #172]	; (1730 <Reset_Handler+0xbc>)
    1682:	429a      	cmp	r2, r3
    1684:	d304      	bcc.n	1690 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1686:	4b2d      	ldr	r3, [pc, #180]	; (173c <Reset_Handler+0xc8>)
    1688:	4a2d      	ldr	r2, [pc, #180]	; (1740 <Reset_Handler+0xcc>)
    168a:	429a      	cmp	r2, r3
    168c:	d310      	bcc.n	16b0 <Reset_Handler+0x3c>
    168e:	e01e      	b.n	16ce <Reset_Handler+0x5a>
    1690:	4a2c      	ldr	r2, [pc, #176]	; (1744 <Reset_Handler+0xd0>)
    1692:	4b29      	ldr	r3, [pc, #164]	; (1738 <Reset_Handler+0xc4>)
    1694:	3303      	adds	r3, #3
    1696:	1a9b      	subs	r3, r3, r2
    1698:	089b      	lsrs	r3, r3, #2
    169a:	3301      	adds	r3, #1
    169c:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    169e:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    16a0:	4823      	ldr	r0, [pc, #140]	; (1730 <Reset_Handler+0xbc>)
    16a2:	4924      	ldr	r1, [pc, #144]	; (1734 <Reset_Handler+0xc0>)
    16a4:	588c      	ldr	r4, [r1, r2]
    16a6:	5084      	str	r4, [r0, r2]
    16a8:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    16aa:	429a      	cmp	r2, r3
    16ac:	d1fa      	bne.n	16a4 <Reset_Handler+0x30>
    16ae:	e7ea      	b.n	1686 <Reset_Handler+0x12>
    16b0:	4a25      	ldr	r2, [pc, #148]	; (1748 <Reset_Handler+0xd4>)
    16b2:	4b22      	ldr	r3, [pc, #136]	; (173c <Reset_Handler+0xc8>)
    16b4:	3303      	adds	r3, #3
    16b6:	1a9b      	subs	r3, r3, r2
    16b8:	089b      	lsrs	r3, r3, #2
    16ba:	3301      	adds	r3, #1
    16bc:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    16be:	2200      	movs	r2, #0
                *pDest++ = 0;
    16c0:	481f      	ldr	r0, [pc, #124]	; (1740 <Reset_Handler+0xcc>)
    16c2:	2100      	movs	r1, #0
    16c4:	1814      	adds	r4, r2, r0
    16c6:	6021      	str	r1, [r4, #0]
    16c8:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    16ca:	429a      	cmp	r2, r3
    16cc:	d1fa      	bne.n	16c4 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    16ce:	4a1f      	ldr	r2, [pc, #124]	; (174c <Reset_Handler+0xd8>)
    16d0:	21ff      	movs	r1, #255	; 0xff
    16d2:	4b1f      	ldr	r3, [pc, #124]	; (1750 <Reset_Handler+0xdc>)
    16d4:	438b      	bics	r3, r1
    16d6:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    16d8:	39fd      	subs	r1, #253	; 0xfd
    16da:	2390      	movs	r3, #144	; 0x90
    16dc:	005b      	lsls	r3, r3, #1
    16de:	4a1d      	ldr	r2, [pc, #116]	; (1754 <Reset_Handler+0xe0>)
    16e0:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    16e2:	481d      	ldr	r0, [pc, #116]	; (1758 <Reset_Handler+0xe4>)
    16e4:	78c3      	ldrb	r3, [r0, #3]
    16e6:	2403      	movs	r4, #3
    16e8:	43a3      	bics	r3, r4
    16ea:	2202      	movs	r2, #2
    16ec:	4313      	orrs	r3, r2
    16ee:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    16f0:	78c3      	ldrb	r3, [r0, #3]
    16f2:	260c      	movs	r6, #12
    16f4:	43b3      	bics	r3, r6
    16f6:	2108      	movs	r1, #8
    16f8:	430b      	orrs	r3, r1
    16fa:	70c3      	strb	r3, [r0, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    16fc:	4b17      	ldr	r3, [pc, #92]	; (175c <Reset_Handler+0xe8>)
    16fe:	7b98      	ldrb	r0, [r3, #14]
    1700:	2530      	movs	r5, #48	; 0x30
    1702:	43a8      	bics	r0, r5
    1704:	0005      	movs	r5, r0
    1706:	2020      	movs	r0, #32
    1708:	4328      	orrs	r0, r5
    170a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    170c:	7b98      	ldrb	r0, [r3, #14]
    170e:	43b0      	bics	r0, r6
    1710:	4301      	orrs	r1, r0
    1712:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1714:	7b99      	ldrb	r1, [r3, #14]
    1716:	43a1      	bics	r1, r4
    1718:	430a      	orrs	r2, r1
    171a:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    171c:	4a10      	ldr	r2, [pc, #64]	; (1760 <Reset_Handler+0xec>)
    171e:	6851      	ldr	r1, [r2, #4]
    1720:	2380      	movs	r3, #128	; 0x80
    1722:	430b      	orrs	r3, r1
    1724:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    1726:	4b0f      	ldr	r3, [pc, #60]	; (1764 <Reset_Handler+0xf0>)
    1728:	4798      	blx	r3

        /* Branch to main function */
        main();
    172a:	4b0f      	ldr	r3, [pc, #60]	; (1768 <Reset_Handler+0xf4>)
    172c:	4798      	blx	r3
    172e:	e7fe      	b.n	172e <Reset_Handler+0xba>
    1730:	20000000 	.word	0x20000000
    1734:	00002d8c 	.word	0x00002d8c
    1738:	20000070 	.word	0x20000070
    173c:	20000188 	.word	0x20000188
    1740:	20000070 	.word	0x20000070
    1744:	20000004 	.word	0x20000004
    1748:	20000074 	.word	0x20000074
    174c:	e000ed00 	.word	0xe000ed00
    1750:	00000000 	.word	0x00000000
    1754:	41007000 	.word	0x41007000
    1758:	41005000 	.word	0x41005000
    175c:	41004800 	.word	0x41004800
    1760:	41004000 	.word	0x41004000
    1764:	00001c19 	.word	0x00001c19
    1768:	000019d1 	.word	0x000019d1

0000176c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    176c:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    176e:	4a06      	ldr	r2, [pc, #24]	; (1788 <_sbrk+0x1c>)
    1770:	6812      	ldr	r2, [r2, #0]
    1772:	2a00      	cmp	r2, #0
    1774:	d102      	bne.n	177c <_sbrk+0x10>
		heap = (unsigned char *)&_end;
    1776:	4905      	ldr	r1, [pc, #20]	; (178c <_sbrk+0x20>)
    1778:	4a03      	ldr	r2, [pc, #12]	; (1788 <_sbrk+0x1c>)
    177a:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
    177c:	4a02      	ldr	r2, [pc, #8]	; (1788 <_sbrk+0x1c>)
    177e:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    1780:	18c3      	adds	r3, r0, r3
    1782:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    1784:	4770      	bx	lr
    1786:	46c0      	nop			; (mov r8, r8)
    1788:	200000c8 	.word	0x200000c8
    178c:	20002188 	.word	0x20002188

00001790 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    1790:	2001      	movs	r0, #1
    1792:	4240      	negs	r0, r0
    1794:	4770      	bx	lr
    1796:	46c0      	nop			; (mov r8, r8)

00001798 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    1798:	2380      	movs	r3, #128	; 0x80
    179a:	019b      	lsls	r3, r3, #6
    179c:	604b      	str	r3, [r1, #4]

	return 0;
}
    179e:	2000      	movs	r0, #0
    17a0:	4770      	bx	lr
    17a2:	46c0      	nop			; (mov r8, r8)

000017a4 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    17a4:	2001      	movs	r0, #1
    17a6:	4770      	bx	lr

000017a8 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    17a8:	2000      	movs	r0, #0
    17aa:	4770      	bx	lr

000017ac <spi_slave_callback>:

//! [callback]
static void spi_slave_callback(struct spi_module *const module)
{
//! [callback_var]
	transfer_complete_spi_slave = true;
    17ac:	2201      	movs	r2, #1
    17ae:	4b01      	ldr	r3, [pc, #4]	; (17b4 <spi_slave_callback+0x8>)
    17b0:	701a      	strb	r2, [r3, #0]
//! [callback_var]
}
    17b2:	4770      	bx	lr
    17b4:	200000e0 	.word	0x200000e0

000017b8 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    17b8:	b570      	push	{r4, r5, r6, lr}
    17ba:	b082      	sub	sp, #8
    17bc:	0005      	movs	r5, r0
    17be:	000e      	movs	r6, r1
	uint16_t temp = 0;
    17c0:	2200      	movs	r2, #0
    17c2:	466b      	mov	r3, sp
    17c4:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    17c6:	4c06      	ldr	r4, [pc, #24]	; (17e0 <usart_serial_getchar+0x28>)
    17c8:	466b      	mov	r3, sp
    17ca:	1d99      	adds	r1, r3, #6
    17cc:	0028      	movs	r0, r5
    17ce:	47a0      	blx	r4
    17d0:	2800      	cmp	r0, #0
    17d2:	d1f9      	bne.n	17c8 <usart_serial_getchar+0x10>

	*c = temp;
    17d4:	466b      	mov	r3, sp
    17d6:	3306      	adds	r3, #6
    17d8:	881b      	ldrh	r3, [r3, #0]
    17da:	7033      	strb	r3, [r6, #0]
}
    17dc:	b002      	add	sp, #8
    17de:	bd70      	pop	{r4, r5, r6, pc}
    17e0:	00000575 	.word	0x00000575

000017e4 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    17e4:	b570      	push	{r4, r5, r6, lr}
    17e6:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    17e8:	b28c      	uxth	r4, r1
    17ea:	4e03      	ldr	r6, [pc, #12]	; (17f8 <usart_serial_putchar+0x14>)
    17ec:	0021      	movs	r1, r4
    17ee:	0028      	movs	r0, r5
    17f0:	47b0      	blx	r6
    17f2:	2800      	cmp	r0, #0
    17f4:	d1fa      	bne.n	17ec <usart_serial_putchar+0x8>

	return STATUS_OK;
}
    17f6:	bd70      	pop	{r4, r5, r6, pc}
    17f8:	00000549 	.word	0x00000549

000017fc <configure_spi_slave_callbacks>:
//! [callback]

//! [conf_callback]
void configure_spi_slave_callbacks(void)
{
    17fc:	b510      	push	{r4, lr}
//! [reg_callback]
	spi_register_callback(&spi_slave_instance, spi_slave_callback,
    17fe:	4c06      	ldr	r4, [pc, #24]	; (1818 <configure_spi_slave_callbacks+0x1c>)
    1800:	2201      	movs	r2, #1
    1802:	4906      	ldr	r1, [pc, #24]	; (181c <configure_spi_slave_callbacks+0x20>)
    1804:	0020      	movs	r0, r4
    1806:	4b06      	ldr	r3, [pc, #24]	; (1820 <configure_spi_slave_callbacks+0x24>)
    1808:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->enabled_callback |= (1 << callback_type);
    180a:	2237      	movs	r2, #55	; 0x37
    180c:	5ca1      	ldrb	r1, [r4, r2]
    180e:	2302      	movs	r3, #2
    1810:	430b      	orrs	r3, r1
    1812:	54a3      	strb	r3, [r4, r2]
			SPI_CALLBACK_BUFFER_RECEIVED);
//! [reg_callback]
//! [en_callback]
	spi_enable_callback(&spi_slave_instance, SPI_CALLBACK_BUFFER_RECEIVED);
//! [en_callback]
}
    1814:	bd10      	pop	{r4, pc}
    1816:	46c0      	nop			; (mov r8, r8)
    1818:	20000114 	.word	0x20000114
    181c:	000017ad 	.word	0x000017ad
    1820:	00000ed5 	.word	0x00000ed5

00001824 <configure_spi_slave>:
//! [conf_callback]

//! [configure_spi]
void configure_spi_slave(void)
{
    1824:	b570      	push	{r4, r5, r6, lr}
    1826:	b08e      	sub	sp, #56	; 0x38
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
	config->data_order       = SPI_DATA_ORDER_MSB;
    1828:	2400      	movs	r4, #0
    182a:	9401      	str	r4, [sp, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    182c:	9402      	str	r4, [sp, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    182e:	466b      	mov	r3, sp
    1830:	741c      	strb	r4, [r3, #16]
	config->run_in_standby   = false;
    1832:	745c      	strb	r4, [r3, #17]
	config->receiver_enable  = true;
    1834:	2501      	movs	r5, #1
    1836:	749d      	strb	r5, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    1838:	74dd      	strb	r5, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    183a:	751c      	strb	r4, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    183c:	2324      	movs	r3, #36	; 0x24
    183e:	466a      	mov	r2, sp
    1840:	54d4      	strb	r4, [r2, r3]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    1842:	220c      	movs	r2, #12
    1844:	2100      	movs	r1, #0
    1846:	a806      	add	r0, sp, #24
    1848:	4b15      	ldr	r3, [pc, #84]	; (18a0 <configure_spi_slave+0x7c>)
    184a:	4798      	blx	r3
	/* Configure, initialize and enable SERCOM SPI module */
//! [conf_defaults]
	spi_get_config_defaults(&config_spi_slave);
//! [conf_defaults]
//! [conf_spi_slave_instance]
	config_spi_slave.mode = SPI_MODE_SLAVE;
    184c:	466b      	mov	r3, sp
    184e:	701c      	strb	r4, [r3, #0]
//! [conf_spi_slave_instance]
//! [conf_preload]
	config_spi_slave.mode_specific.slave.preload_enable = true;
    1850:	2320      	movs	r3, #32
    1852:	466a      	mov	r2, sp
    1854:	54d5      	strb	r5, [r2, r3]
//! [conf_preload]
//! [conf_format]
	config_spi_slave.mode_specific.slave.frame_format = SPI_FRAME_FORMAT_SPI_FRAME;
    1856:	9406      	str	r4, [sp, #24]
//! [conf_format]
//! [mux_setting]
	config_spi_slave.mux_setting = CONF_SLAVE_MUX_SETTING;
    1858:	2380      	movs	r3, #128	; 0x80
    185a:	025b      	lsls	r3, r3, #9
    185c:	9303      	str	r3, [sp, #12]
//! [mux_setting]

	config_spi_slave.pinmux_pad0 = CONF_SLAVE_PINMUX_PAD0;
    185e:	4b11      	ldr	r3, [pc, #68]	; (18a4 <configure_spi_slave+0x80>)
    1860:	930a      	str	r3, [sp, #40]	; 0x28
	config_spi_slave.pinmux_pad1 = CONF_SLAVE_PINMUX_PAD1;
    1862:	4b11      	ldr	r3, [pc, #68]	; (18a8 <configure_spi_slave+0x84>)
    1864:	930b      	str	r3, [sp, #44]	; 0x2c
	config_spi_slave.pinmux_pad2 = CONF_SLAVE_PINMUX_PAD2;
    1866:	4b11      	ldr	r3, [pc, #68]	; (18ac <configure_spi_slave+0x88>)
    1868:	930c      	str	r3, [sp, #48]	; 0x30
	config_spi_slave.pinmux_pad3 = CONF_SLAVE_PINMUX_PAD3;
    186a:	4b11      	ldr	r3, [pc, #68]	; (18b0 <configure_spi_slave+0x8c>)
    186c:	930d      	str	r3, [sp, #52]	; 0x34

//! [init]
	spi_init(&spi_slave_instance, CONF_SLAVE_SPI_MODULE, &config_spi_slave);
    186e:	4e11      	ldr	r6, [pc, #68]	; (18b4 <configure_spi_slave+0x90>)
    1870:	4911      	ldr	r1, [pc, #68]	; (18b8 <configure_spi_slave+0x94>)
    1872:	0030      	movs	r0, r6
    1874:	4b11      	ldr	r3, [pc, #68]	; (18bc <configure_spi_slave+0x98>)
    1876:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1878:	6834      	ldr	r4, [r6, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    187a:	0020      	movs	r0, r4
    187c:	4b10      	ldr	r3, [pc, #64]	; (18c0 <configure_spi_slave+0x9c>)
    187e:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1880:	231f      	movs	r3, #31
    1882:	4018      	ands	r0, r3
    1884:	4085      	lsls	r5, r0
    1886:	4b0f      	ldr	r3, [pc, #60]	; (18c4 <configure_spi_slave+0xa0>)
    1888:	601d      	str	r5, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    188a:	6832      	ldr	r2, [r6, #0]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    188c:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    188e:	2b00      	cmp	r3, #0
    1890:	d1fc      	bne.n	188c <configure_spi_slave+0x68>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    1892:	6822      	ldr	r2, [r4, #0]
    1894:	3302      	adds	r3, #2
    1896:	4313      	orrs	r3, r2
    1898:	6023      	str	r3, [r4, #0]

//! [enable]
	spi_enable(&spi_slave_instance);
//! [enable]

}
    189a:	b00e      	add	sp, #56	; 0x38
    189c:	bd70      	pop	{r4, r5, r6, pc}
    189e:	46c0      	nop			; (mov r8, r8)
    18a0:	00001c77 	.word	0x00001c77
    18a4:	00220003 	.word	0x00220003
    18a8:	00230003 	.word	0x00230003
    18ac:	00360003 	.word	0x00360003
    18b0:	00370003 	.word	0x00370003
    18b4:	20000114 	.word	0x20000114
    18b8:	42001c00 	.word	0x42001c00
    18bc:	00000d09 	.word	0x00000d09
    18c0:	00000c7d 	.word	0x00000c7d
    18c4:	e000e100 	.word	0xe000e100

000018c8 <configuration_usart>:
//! [configure_spi]

void configuration_usart(void){
    18c8:	b530      	push	{r4, r5, lr}
    18ca:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    18cc:	2380      	movs	r3, #128	; 0x80
    18ce:	05db      	lsls	r3, r3, #23
    18d0:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    18d2:	2300      	movs	r3, #0
    18d4:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    18d6:	22ff      	movs	r2, #255	; 0xff
    18d8:	4669      	mov	r1, sp
    18da:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    18dc:	2200      	movs	r2, #0
    18de:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    18e0:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    18e2:	2101      	movs	r1, #1
    18e4:	2024      	movs	r0, #36	; 0x24
    18e6:	466c      	mov	r4, sp
    18e8:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    18ea:	3001      	adds	r0, #1
    18ec:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    18ee:	3125      	adds	r1, #37	; 0x25
    18f0:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    18f2:	3101      	adds	r1, #1
    18f4:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    18f6:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    18f8:	3105      	adds	r1, #5
    18fa:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    18fc:	3101      	adds	r1, #1
    18fe:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    1900:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    1902:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    1904:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    1906:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    1908:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    190a:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    190c:	2313      	movs	r3, #19
    190e:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    1910:	7762      	strb	r2, [r4, #29]
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);
	config_usart.baudrate=115200;
    1912:	23e1      	movs	r3, #225	; 0xe1
    1914:	025b      	lsls	r3, r3, #9
    1916:	9308      	str	r3, [sp, #32]
	config_usart.mux_setting=EDBG_CDC_SERCOM_MUX_SETTING;
    1918:	2380      	movs	r3, #128	; 0x80
    191a:	035b      	lsls	r3, r3, #13
    191c:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0=EDBG_CDC_SERCOM_PINMUX_PAD0;
    191e:	4b1e      	ldr	r3, [pc, #120]	; (1998 <configuration_usart+0xd0>)
    1920:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1=EDBG_CDC_SERCOM_PINMUX_PAD1;
    1922:	4b1e      	ldr	r3, [pc, #120]	; (199c <configuration_usart+0xd4>)
    1924:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2=EDBG_CDC_SERCOM_PINMUX_PAD2;
    1926:	2301      	movs	r3, #1
    1928:	425b      	negs	r3, r3
    192a:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3=EDBG_CDC_SERCOM_PINMUX_PAD3;
    192c:	930f      	str	r3, [sp, #60]	; 0x3c
	
	while (usart_init(&usart_instance, EDBG_CDC_MODULE, &config_usart)!= STATUS_OK);
    192e:	4d1c      	ldr	r5, [pc, #112]	; (19a0 <configuration_usart+0xd8>)
    1930:	4c1c      	ldr	r4, [pc, #112]	; (19a4 <configuration_usart+0xdc>)
    1932:	466a      	mov	r2, sp
    1934:	491c      	ldr	r1, [pc, #112]	; (19a8 <configuration_usart+0xe0>)
    1936:	0028      	movs	r0, r5
    1938:	47a0      	blx	r4
    193a:	2800      	cmp	r0, #0
    193c:	d1f9      	bne.n	1932 <configuration_usart+0x6a>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    193e:	4d18      	ldr	r5, [pc, #96]	; (19a0 <configuration_usart+0xd8>)
    1940:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1942:	0020      	movs	r0, r4
    1944:	4b19      	ldr	r3, [pc, #100]	; (19ac <configuration_usart+0xe4>)
    1946:	4798      	blx	r3
    1948:	231f      	movs	r3, #31
    194a:	4018      	ands	r0, r3
    194c:	3b1e      	subs	r3, #30
    194e:	4083      	lsls	r3, r0
    1950:	4a17      	ldr	r2, [pc, #92]	; (19b0 <configuration_usart+0xe8>)
    1952:	6013      	str	r3, [r2, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1954:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1956:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1958:	2b00      	cmp	r3, #0
    195a:	d1fc      	bne.n	1956 <configuration_usart+0x8e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    195c:	6822      	ldr	r2, [r4, #0]
    195e:	3302      	adds	r3, #2
    1960:	4313      	orrs	r3, r2
    1962:	6023      	str	r3, [r4, #0]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    1964:	480e      	ldr	r0, [pc, #56]	; (19a0 <configuration_usart+0xd8>)
    1966:	4b13      	ldr	r3, [pc, #76]	; (19b4 <configuration_usart+0xec>)
    1968:	6018      	str	r0, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    196a:	4a13      	ldr	r2, [pc, #76]	; (19b8 <configuration_usart+0xf0>)
    196c:	4b13      	ldr	r3, [pc, #76]	; (19bc <configuration_usart+0xf4>)
    196e:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    1970:	4a13      	ldr	r2, [pc, #76]	; (19c0 <configuration_usart+0xf8>)
    1972:	4b14      	ldr	r3, [pc, #80]	; (19c4 <configuration_usart+0xfc>)
    1974:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
    1976:	466a      	mov	r2, sp
    1978:	490b      	ldr	r1, [pc, #44]	; (19a8 <configuration_usart+0xe0>)
    197a:	4b0a      	ldr	r3, [pc, #40]	; (19a4 <configuration_usart+0xdc>)
    197c:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    197e:	4d12      	ldr	r5, [pc, #72]	; (19c8 <configuration_usart+0x100>)
    1980:	682b      	ldr	r3, [r5, #0]
    1982:	6898      	ldr	r0, [r3, #8]
    1984:	2100      	movs	r1, #0
    1986:	4c11      	ldr	r4, [pc, #68]	; (19cc <configuration_usart+0x104>)
    1988:	47a0      	blx	r4
	setbuf(stdin, NULL);
    198a:	682b      	ldr	r3, [r5, #0]
    198c:	6858      	ldr	r0, [r3, #4]
    198e:	2100      	movs	r1, #0
    1990:	47a0      	blx	r4
	usart_enable(&usart_instance);
	stdio_serial_init(&usart_instance,EDBG_CDC_MODULE,&config_usart);
}
    1992:	b011      	add	sp, #68	; 0x44
    1994:	bd30      	pop	{r4, r5, pc}
    1996:	46c0      	nop			; (mov r8, r8)
    1998:	00040003 	.word	0x00040003
    199c:	00050003 	.word	0x00050003
    19a0:	20000150 	.word	0x20000150
    19a4:	00000211 	.word	0x00000211
    19a8:	42000800 	.word	0x42000800
    19ac:	00000c7d 	.word	0x00000c7d
    19b0:	e000e100 	.word	0xe000e100
    19b4:	200000f4 	.word	0x200000f4
    19b8:	000017e5 	.word	0x000017e5
    19bc:	200000f0 	.word	0x200000f0
    19c0:	000017b9 	.word	0x000017b9
    19c4:	200000ec 	.word	0x200000ec
    19c8:	2000006c 	.word	0x2000006c
    19cc:	00001cbd 	.word	0x00001cbd

000019d0 <main>:


int main(void)
{
    19d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    19d2:	4647      	mov	r7, r8
    19d4:	b480      	push	{r7}
    19d6:	b082      	sub	sp, #8
//! [main_start]
	uint8_t result = 0;
	
	/* Initialize system */
//! [system_init]
	system_init();
    19d8:	4b23      	ldr	r3, [pc, #140]	; (1a68 <main+0x98>)
    19da:	4798      	blx	r3
	delay_init();
    19dc:	4b23      	ldr	r3, [pc, #140]	; (1a6c <main+0x9c>)
    19de:	4798      	blx	r3
//! [system_init]

//! [run_config]
	configure_spi_slave();
    19e0:	4b23      	ldr	r3, [pc, #140]	; (1a70 <main+0xa0>)
    19e2:	4798      	blx	r3
//! [run_config]
//! [run_callback_config]
	configure_spi_slave_callbacks();
    19e4:	4b23      	ldr	r3, [pc, #140]	; (1a74 <main+0xa4>)
    19e6:	4798      	blx	r3
//! [run_callback_config]
//! [main_start]
	configuration_usart();
    19e8:	4b23      	ldr	r3, [pc, #140]	; (1a78 <main+0xa8>)
    19ea:	4798      	blx	r3

//! [main_use_case]
//! [read]
	spi_read_buffer_job(&spi_slave_instance, buffer_rx, BUF_LENGTH, 0x00);
    19ec:	2300      	movs	r3, #0
    19ee:	2214      	movs	r2, #20
    19f0:	4922      	ldr	r1, [pc, #136]	; (1a7c <main+0xac>)
    19f2:	4823      	ldr	r0, [pc, #140]	; (1a80 <main+0xb0>)
    19f4:	4c23      	ldr	r4, [pc, #140]	; (1a84 <main+0xb4>)
    19f6:	47a0      	blx	r4
//! [read]
//! [transf_complete]
	while(!transfer_complete_spi_slave) {
    19f8:	4b23      	ldr	r3, [pc, #140]	; (1a88 <main+0xb8>)
    19fa:	781a      	ldrb	r2, [r3, #0]
    19fc:	2a00      	cmp	r2, #0
    19fe:	d0fc      	beq.n	19fa <main+0x2a>
    1a00:	2300      	movs	r3, #0
    1a02:	2600      	movs	r6, #0

	//printf("%d", buffer_rx[1]);

//! [compare]
	for (uint8_t i = 0; i < BUF_LENGTH; i++) {
		if(buffer_rx[i] != buffer_expect[i]) {
    1a04:	491d      	ldr	r1, [pc, #116]	; (1a7c <main+0xac>)
    1a06:	4a21      	ldr	r2, [pc, #132]	; (1a8c <main+0xbc>)
    1a08:	5c5c      	ldrb	r4, [r3, r1]
    1a0a:	5c98      	ldrb	r0, [r3, r2]
    1a0c:	4284      	cmp	r4, r0
    1a0e:	d001      	beq.n	1a14 <main+0x44>
			result++;
    1a10:	3601      	adds	r6, #1
    1a12:	b2f6      	uxtb	r6, r6
    1a14:	3301      	adds	r3, #1
//! [transf_complete]

	//printf("%d", buffer_rx[1]);

//! [compare]
	for (uint8_t i = 0; i < BUF_LENGTH; i++) {
    1a16:	2b14      	cmp	r3, #20
    1a18:	d1f6      	bne.n	1a08 <main+0x38>
    1a1a:	4c18      	ldr	r4, [pc, #96]	; (1a7c <main+0xac>)
    1a1c:	4698      	mov	r8, r3
    1a1e:	44a0      	add	r8, r4
			result++;
		}
	}

	for(uint8_t i = 0; i < 20; i++ )
		printf("%d", buffer_rx[i]);
    1a20:	4f1b      	ldr	r7, [pc, #108]	; (1a90 <main+0xc0>)
    1a22:	4d1c      	ldr	r5, [pc, #112]	; (1a94 <main+0xc4>)
    1a24:	7821      	ldrb	r1, [r4, #0]
    1a26:	0038      	movs	r0, r7
    1a28:	47a8      	blx	r5
    1a2a:	3401      	adds	r4, #1
		if(buffer_rx[i] != buffer_expect[i]) {
			result++;
		}
	}

	for(uint8_t i = 0; i < 20; i++ )
    1a2c:	4544      	cmp	r4, r8
    1a2e:	d1f9      	bne.n	1a24 <main+0x54>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1a30:	4d19      	ldr	r5, [pc, #100]	; (1a98 <main+0xc8>)
    1a32:	2480      	movs	r4, #128	; 0x80
    1a34:	0324      	lsls	r4, r4, #12
			volatile uint32_t delay = 30000;
			while(delay--) {
			}
		} else {
			port_pin_set_output_level(LED_0_PIN, LED_0_ACTIVE);
			delay_ms(100);
    1a36:	4f19      	ldr	r7, [pc, #100]	; (1a9c <main+0xcc>)
//! [compare]

//! [inf_loop]
	while (true) {
		/* Infinite loop */
		if (result) {
    1a38:	2e00      	cmp	r6, #0
    1a3a:	d008      	beq.n	1a4e <main+0x7e>
    1a3c:	616c      	str	r4, [r5, #20]
			port_pin_set_output_level(LED_0_PIN, LED_0_ACTIVE);
			/* Add a short delay to see LED toggle */
			volatile uint32_t delay = 30000;
    1a3e:	4b18      	ldr	r3, [pc, #96]	; (1aa0 <main+0xd0>)
    1a40:	9300      	str	r3, [sp, #0]
			while(delay--) {
    1a42:	9b00      	ldr	r3, [sp, #0]
    1a44:	1e5a      	subs	r2, r3, #1
    1a46:	9200      	str	r2, [sp, #0]
    1a48:	2b00      	cmp	r3, #0
    1a4a:	d1fa      	bne.n	1a42 <main+0x72>
    1a4c:	e7f4      	b.n	1a38 <main+0x68>
    1a4e:	616c      	str	r4, [r5, #20]
			}
		} else {
			port_pin_set_output_level(LED_0_PIN, LED_0_ACTIVE);
			delay_ms(100);
    1a50:	2064      	movs	r0, #100	; 0x64
    1a52:	47b8      	blx	r7
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1a54:	61ac      	str	r4, [r5, #24]
			port_pin_set_output_level(LED_0_PIN, !LED_0_ACTIVE);
			//printf("A");
			/* Add a short delay to see LED toggle */
			volatile uint32_t delay = 600000;
    1a56:	4b13      	ldr	r3, [pc, #76]	; (1aa4 <main+0xd4>)
    1a58:	9301      	str	r3, [sp, #4]
			while(delay--) {
    1a5a:	9b01      	ldr	r3, [sp, #4]
    1a5c:	1e5a      	subs	r2, r3, #1
    1a5e:	9201      	str	r2, [sp, #4]
    1a60:	2b00      	cmp	r3, #0
    1a62:	d1fa      	bne.n	1a5a <main+0x8a>
    1a64:	e7e8      	b.n	1a38 <main+0x68>
    1a66:	46c0      	nop			; (mov r8, r8)
    1a68:	00001645 	.word	0x00001645
    1a6c:	00000115 	.word	0x00000115
    1a70:	00001825 	.word	0x00001825
    1a74:	000017fd 	.word	0x000017fd
    1a78:	000018c9 	.word	0x000018c9
    1a7c:	200000cc 	.word	0x200000cc
    1a80:	20000114 	.word	0x20000114
    1a84:	00000eed 	.word	0x00000eed
    1a88:	200000e0 	.word	0x200000e0
    1a8c:	00002cb8 	.word	0x00002cb8
    1a90:	00002ccc 	.word	0x00002ccc
    1a94:	00001c89 	.word	0x00001c89
    1a98:	41004400 	.word	0x41004400
    1a9c:	00000155 	.word	0x00000155
    1aa0:	00007530 	.word	0x00007530
    1aa4:	000927c0 	.word	0x000927c0

00001aa8 <__aeabi_uidiv>:
    1aa8:	2200      	movs	r2, #0
    1aaa:	0843      	lsrs	r3, r0, #1
    1aac:	428b      	cmp	r3, r1
    1aae:	d374      	bcc.n	1b9a <__aeabi_uidiv+0xf2>
    1ab0:	0903      	lsrs	r3, r0, #4
    1ab2:	428b      	cmp	r3, r1
    1ab4:	d35f      	bcc.n	1b76 <__aeabi_uidiv+0xce>
    1ab6:	0a03      	lsrs	r3, r0, #8
    1ab8:	428b      	cmp	r3, r1
    1aba:	d344      	bcc.n	1b46 <__aeabi_uidiv+0x9e>
    1abc:	0b03      	lsrs	r3, r0, #12
    1abe:	428b      	cmp	r3, r1
    1ac0:	d328      	bcc.n	1b14 <__aeabi_uidiv+0x6c>
    1ac2:	0c03      	lsrs	r3, r0, #16
    1ac4:	428b      	cmp	r3, r1
    1ac6:	d30d      	bcc.n	1ae4 <__aeabi_uidiv+0x3c>
    1ac8:	22ff      	movs	r2, #255	; 0xff
    1aca:	0209      	lsls	r1, r1, #8
    1acc:	ba12      	rev	r2, r2
    1ace:	0c03      	lsrs	r3, r0, #16
    1ad0:	428b      	cmp	r3, r1
    1ad2:	d302      	bcc.n	1ada <__aeabi_uidiv+0x32>
    1ad4:	1212      	asrs	r2, r2, #8
    1ad6:	0209      	lsls	r1, r1, #8
    1ad8:	d065      	beq.n	1ba6 <__aeabi_uidiv+0xfe>
    1ada:	0b03      	lsrs	r3, r0, #12
    1adc:	428b      	cmp	r3, r1
    1ade:	d319      	bcc.n	1b14 <__aeabi_uidiv+0x6c>
    1ae0:	e000      	b.n	1ae4 <__aeabi_uidiv+0x3c>
    1ae2:	0a09      	lsrs	r1, r1, #8
    1ae4:	0bc3      	lsrs	r3, r0, #15
    1ae6:	428b      	cmp	r3, r1
    1ae8:	d301      	bcc.n	1aee <__aeabi_uidiv+0x46>
    1aea:	03cb      	lsls	r3, r1, #15
    1aec:	1ac0      	subs	r0, r0, r3
    1aee:	4152      	adcs	r2, r2
    1af0:	0b83      	lsrs	r3, r0, #14
    1af2:	428b      	cmp	r3, r1
    1af4:	d301      	bcc.n	1afa <__aeabi_uidiv+0x52>
    1af6:	038b      	lsls	r3, r1, #14
    1af8:	1ac0      	subs	r0, r0, r3
    1afa:	4152      	adcs	r2, r2
    1afc:	0b43      	lsrs	r3, r0, #13
    1afe:	428b      	cmp	r3, r1
    1b00:	d301      	bcc.n	1b06 <__aeabi_uidiv+0x5e>
    1b02:	034b      	lsls	r3, r1, #13
    1b04:	1ac0      	subs	r0, r0, r3
    1b06:	4152      	adcs	r2, r2
    1b08:	0b03      	lsrs	r3, r0, #12
    1b0a:	428b      	cmp	r3, r1
    1b0c:	d301      	bcc.n	1b12 <__aeabi_uidiv+0x6a>
    1b0e:	030b      	lsls	r3, r1, #12
    1b10:	1ac0      	subs	r0, r0, r3
    1b12:	4152      	adcs	r2, r2
    1b14:	0ac3      	lsrs	r3, r0, #11
    1b16:	428b      	cmp	r3, r1
    1b18:	d301      	bcc.n	1b1e <__aeabi_uidiv+0x76>
    1b1a:	02cb      	lsls	r3, r1, #11
    1b1c:	1ac0      	subs	r0, r0, r3
    1b1e:	4152      	adcs	r2, r2
    1b20:	0a83      	lsrs	r3, r0, #10
    1b22:	428b      	cmp	r3, r1
    1b24:	d301      	bcc.n	1b2a <__aeabi_uidiv+0x82>
    1b26:	028b      	lsls	r3, r1, #10
    1b28:	1ac0      	subs	r0, r0, r3
    1b2a:	4152      	adcs	r2, r2
    1b2c:	0a43      	lsrs	r3, r0, #9
    1b2e:	428b      	cmp	r3, r1
    1b30:	d301      	bcc.n	1b36 <__aeabi_uidiv+0x8e>
    1b32:	024b      	lsls	r3, r1, #9
    1b34:	1ac0      	subs	r0, r0, r3
    1b36:	4152      	adcs	r2, r2
    1b38:	0a03      	lsrs	r3, r0, #8
    1b3a:	428b      	cmp	r3, r1
    1b3c:	d301      	bcc.n	1b42 <__aeabi_uidiv+0x9a>
    1b3e:	020b      	lsls	r3, r1, #8
    1b40:	1ac0      	subs	r0, r0, r3
    1b42:	4152      	adcs	r2, r2
    1b44:	d2cd      	bcs.n	1ae2 <__aeabi_uidiv+0x3a>
    1b46:	09c3      	lsrs	r3, r0, #7
    1b48:	428b      	cmp	r3, r1
    1b4a:	d301      	bcc.n	1b50 <__aeabi_uidiv+0xa8>
    1b4c:	01cb      	lsls	r3, r1, #7
    1b4e:	1ac0      	subs	r0, r0, r3
    1b50:	4152      	adcs	r2, r2
    1b52:	0983      	lsrs	r3, r0, #6
    1b54:	428b      	cmp	r3, r1
    1b56:	d301      	bcc.n	1b5c <__aeabi_uidiv+0xb4>
    1b58:	018b      	lsls	r3, r1, #6
    1b5a:	1ac0      	subs	r0, r0, r3
    1b5c:	4152      	adcs	r2, r2
    1b5e:	0943      	lsrs	r3, r0, #5
    1b60:	428b      	cmp	r3, r1
    1b62:	d301      	bcc.n	1b68 <__aeabi_uidiv+0xc0>
    1b64:	014b      	lsls	r3, r1, #5
    1b66:	1ac0      	subs	r0, r0, r3
    1b68:	4152      	adcs	r2, r2
    1b6a:	0903      	lsrs	r3, r0, #4
    1b6c:	428b      	cmp	r3, r1
    1b6e:	d301      	bcc.n	1b74 <__aeabi_uidiv+0xcc>
    1b70:	010b      	lsls	r3, r1, #4
    1b72:	1ac0      	subs	r0, r0, r3
    1b74:	4152      	adcs	r2, r2
    1b76:	08c3      	lsrs	r3, r0, #3
    1b78:	428b      	cmp	r3, r1
    1b7a:	d301      	bcc.n	1b80 <__aeabi_uidiv+0xd8>
    1b7c:	00cb      	lsls	r3, r1, #3
    1b7e:	1ac0      	subs	r0, r0, r3
    1b80:	4152      	adcs	r2, r2
    1b82:	0883      	lsrs	r3, r0, #2
    1b84:	428b      	cmp	r3, r1
    1b86:	d301      	bcc.n	1b8c <__aeabi_uidiv+0xe4>
    1b88:	008b      	lsls	r3, r1, #2
    1b8a:	1ac0      	subs	r0, r0, r3
    1b8c:	4152      	adcs	r2, r2
    1b8e:	0843      	lsrs	r3, r0, #1
    1b90:	428b      	cmp	r3, r1
    1b92:	d301      	bcc.n	1b98 <__aeabi_uidiv+0xf0>
    1b94:	004b      	lsls	r3, r1, #1
    1b96:	1ac0      	subs	r0, r0, r3
    1b98:	4152      	adcs	r2, r2
    1b9a:	1a41      	subs	r1, r0, r1
    1b9c:	d200      	bcs.n	1ba0 <__aeabi_uidiv+0xf8>
    1b9e:	4601      	mov	r1, r0
    1ba0:	4152      	adcs	r2, r2
    1ba2:	4610      	mov	r0, r2
    1ba4:	4770      	bx	lr
    1ba6:	e7ff      	b.n	1ba8 <__aeabi_uidiv+0x100>
    1ba8:	b501      	push	{r0, lr}
    1baa:	2000      	movs	r0, #0
    1bac:	f000 f806 	bl	1bbc <__aeabi_idiv0>
    1bb0:	bd02      	pop	{r1, pc}
    1bb2:	46c0      	nop			; (mov r8, r8)

00001bb4 <__aeabi_uidivmod>:
    1bb4:	2900      	cmp	r1, #0
    1bb6:	d0f7      	beq.n	1ba8 <__aeabi_uidiv+0x100>
    1bb8:	e776      	b.n	1aa8 <__aeabi_uidiv>
    1bba:	4770      	bx	lr

00001bbc <__aeabi_idiv0>:
    1bbc:	4770      	bx	lr
    1bbe:	46c0      	nop			; (mov r8, r8)

00001bc0 <__aeabi_lmul>:
    1bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1bc2:	464f      	mov	r7, r9
    1bc4:	4646      	mov	r6, r8
    1bc6:	b4c0      	push	{r6, r7}
    1bc8:	0416      	lsls	r6, r2, #16
    1bca:	0c36      	lsrs	r6, r6, #16
    1bcc:	4699      	mov	r9, r3
    1bce:	0033      	movs	r3, r6
    1bd0:	0405      	lsls	r5, r0, #16
    1bd2:	0c2c      	lsrs	r4, r5, #16
    1bd4:	0c07      	lsrs	r7, r0, #16
    1bd6:	0c15      	lsrs	r5, r2, #16
    1bd8:	4363      	muls	r3, r4
    1bda:	437e      	muls	r6, r7
    1bdc:	436f      	muls	r7, r5
    1bde:	4365      	muls	r5, r4
    1be0:	0c1c      	lsrs	r4, r3, #16
    1be2:	19ad      	adds	r5, r5, r6
    1be4:	1964      	adds	r4, r4, r5
    1be6:	469c      	mov	ip, r3
    1be8:	42a6      	cmp	r6, r4
    1bea:	d903      	bls.n	1bf4 <__aeabi_lmul+0x34>
    1bec:	2380      	movs	r3, #128	; 0x80
    1bee:	025b      	lsls	r3, r3, #9
    1bf0:	4698      	mov	r8, r3
    1bf2:	4447      	add	r7, r8
    1bf4:	4663      	mov	r3, ip
    1bf6:	0c25      	lsrs	r5, r4, #16
    1bf8:	19ef      	adds	r7, r5, r7
    1bfa:	041d      	lsls	r5, r3, #16
    1bfc:	464b      	mov	r3, r9
    1bfe:	434a      	muls	r2, r1
    1c00:	4343      	muls	r3, r0
    1c02:	0c2d      	lsrs	r5, r5, #16
    1c04:	0424      	lsls	r4, r4, #16
    1c06:	1964      	adds	r4, r4, r5
    1c08:	1899      	adds	r1, r3, r2
    1c0a:	19c9      	adds	r1, r1, r7
    1c0c:	0020      	movs	r0, r4
    1c0e:	bc0c      	pop	{r2, r3}
    1c10:	4690      	mov	r8, r2
    1c12:	4699      	mov	r9, r3
    1c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c16:	46c0      	nop			; (mov r8, r8)

00001c18 <__libc_init_array>:
    1c18:	4b0e      	ldr	r3, [pc, #56]	; (1c54 <__libc_init_array+0x3c>)
    1c1a:	b570      	push	{r4, r5, r6, lr}
    1c1c:	2500      	movs	r5, #0
    1c1e:	001e      	movs	r6, r3
    1c20:	4c0d      	ldr	r4, [pc, #52]	; (1c58 <__libc_init_array+0x40>)
    1c22:	1ae4      	subs	r4, r4, r3
    1c24:	10a4      	asrs	r4, r4, #2
    1c26:	42a5      	cmp	r5, r4
    1c28:	d004      	beq.n	1c34 <__libc_init_array+0x1c>
    1c2a:	00ab      	lsls	r3, r5, #2
    1c2c:	58f3      	ldr	r3, [r6, r3]
    1c2e:	4798      	blx	r3
    1c30:	3501      	adds	r5, #1
    1c32:	e7f8      	b.n	1c26 <__libc_init_array+0xe>
    1c34:	f001 f89a 	bl	2d6c <_init>
    1c38:	4b08      	ldr	r3, [pc, #32]	; (1c5c <__libc_init_array+0x44>)
    1c3a:	2500      	movs	r5, #0
    1c3c:	001e      	movs	r6, r3
    1c3e:	4c08      	ldr	r4, [pc, #32]	; (1c60 <__libc_init_array+0x48>)
    1c40:	1ae4      	subs	r4, r4, r3
    1c42:	10a4      	asrs	r4, r4, #2
    1c44:	42a5      	cmp	r5, r4
    1c46:	d004      	beq.n	1c52 <__libc_init_array+0x3a>
    1c48:	00ab      	lsls	r3, r5, #2
    1c4a:	58f3      	ldr	r3, [r6, r3]
    1c4c:	4798      	blx	r3
    1c4e:	3501      	adds	r5, #1
    1c50:	e7f8      	b.n	1c44 <__libc_init_array+0x2c>
    1c52:	bd70      	pop	{r4, r5, r6, pc}
    1c54:	00002d78 	.word	0x00002d78
    1c58:	00002d78 	.word	0x00002d78
    1c5c:	00002d78 	.word	0x00002d78
    1c60:	00002d7c 	.word	0x00002d7c

00001c64 <memcpy>:
    1c64:	2300      	movs	r3, #0
    1c66:	b510      	push	{r4, lr}
    1c68:	429a      	cmp	r2, r3
    1c6a:	d003      	beq.n	1c74 <memcpy+0x10>
    1c6c:	5ccc      	ldrb	r4, [r1, r3]
    1c6e:	54c4      	strb	r4, [r0, r3]
    1c70:	3301      	adds	r3, #1
    1c72:	e7f9      	b.n	1c68 <memcpy+0x4>
    1c74:	bd10      	pop	{r4, pc}

00001c76 <memset>:
    1c76:	0003      	movs	r3, r0
    1c78:	1882      	adds	r2, r0, r2
    1c7a:	4293      	cmp	r3, r2
    1c7c:	d002      	beq.n	1c84 <memset+0xe>
    1c7e:	7019      	strb	r1, [r3, #0]
    1c80:	3301      	adds	r3, #1
    1c82:	e7fa      	b.n	1c7a <memset+0x4>
    1c84:	4770      	bx	lr
	...

00001c88 <iprintf>:
    1c88:	b40f      	push	{r0, r1, r2, r3}
    1c8a:	4b0b      	ldr	r3, [pc, #44]	; (1cb8 <iprintf+0x30>)
    1c8c:	b513      	push	{r0, r1, r4, lr}
    1c8e:	681c      	ldr	r4, [r3, #0]
    1c90:	2c00      	cmp	r4, #0
    1c92:	d005      	beq.n	1ca0 <iprintf+0x18>
    1c94:	69a3      	ldr	r3, [r4, #24]
    1c96:	2b00      	cmp	r3, #0
    1c98:	d102      	bne.n	1ca0 <iprintf+0x18>
    1c9a:	0020      	movs	r0, r4
    1c9c:	f000 f9bc 	bl	2018 <__sinit>
    1ca0:	ab05      	add	r3, sp, #20
    1ca2:	9a04      	ldr	r2, [sp, #16]
    1ca4:	68a1      	ldr	r1, [r4, #8]
    1ca6:	0020      	movs	r0, r4
    1ca8:	9301      	str	r3, [sp, #4]
    1caa:	f000 fb7b 	bl	23a4 <_vfiprintf_r>
    1cae:	bc16      	pop	{r1, r2, r4}
    1cb0:	bc08      	pop	{r3}
    1cb2:	b004      	add	sp, #16
    1cb4:	4718      	bx	r3
    1cb6:	46c0      	nop			; (mov r8, r8)
    1cb8:	2000006c 	.word	0x2000006c

00001cbc <setbuf>:
    1cbc:	424a      	negs	r2, r1
    1cbe:	414a      	adcs	r2, r1
    1cc0:	2380      	movs	r3, #128	; 0x80
    1cc2:	b510      	push	{r4, lr}
    1cc4:	0052      	lsls	r2, r2, #1
    1cc6:	00db      	lsls	r3, r3, #3
    1cc8:	f000 f802 	bl	1cd0 <setvbuf>
    1ccc:	bd10      	pop	{r4, pc}
	...

00001cd0 <setvbuf>:
    1cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1cd2:	001d      	movs	r5, r3
    1cd4:	4b51      	ldr	r3, [pc, #324]	; (1e1c <setvbuf+0x14c>)
    1cd6:	b085      	sub	sp, #20
    1cd8:	681e      	ldr	r6, [r3, #0]
    1cda:	0004      	movs	r4, r0
    1cdc:	000f      	movs	r7, r1
    1cde:	9200      	str	r2, [sp, #0]
    1ce0:	2e00      	cmp	r6, #0
    1ce2:	d005      	beq.n	1cf0 <setvbuf+0x20>
    1ce4:	69b3      	ldr	r3, [r6, #24]
    1ce6:	2b00      	cmp	r3, #0
    1ce8:	d102      	bne.n	1cf0 <setvbuf+0x20>
    1cea:	0030      	movs	r0, r6
    1cec:	f000 f994 	bl	2018 <__sinit>
    1cf0:	4b4b      	ldr	r3, [pc, #300]	; (1e20 <setvbuf+0x150>)
    1cf2:	429c      	cmp	r4, r3
    1cf4:	d101      	bne.n	1cfa <setvbuf+0x2a>
    1cf6:	6874      	ldr	r4, [r6, #4]
    1cf8:	e008      	b.n	1d0c <setvbuf+0x3c>
    1cfa:	4b4a      	ldr	r3, [pc, #296]	; (1e24 <setvbuf+0x154>)
    1cfc:	429c      	cmp	r4, r3
    1cfe:	d101      	bne.n	1d04 <setvbuf+0x34>
    1d00:	68b4      	ldr	r4, [r6, #8]
    1d02:	e003      	b.n	1d0c <setvbuf+0x3c>
    1d04:	4b48      	ldr	r3, [pc, #288]	; (1e28 <setvbuf+0x158>)
    1d06:	429c      	cmp	r4, r3
    1d08:	d100      	bne.n	1d0c <setvbuf+0x3c>
    1d0a:	68f4      	ldr	r4, [r6, #12]
    1d0c:	9b00      	ldr	r3, [sp, #0]
    1d0e:	2b02      	cmp	r3, #2
    1d10:	d005      	beq.n	1d1e <setvbuf+0x4e>
    1d12:	2b01      	cmp	r3, #1
    1d14:	d900      	bls.n	1d18 <setvbuf+0x48>
    1d16:	e07c      	b.n	1e12 <setvbuf+0x142>
    1d18:	2d00      	cmp	r5, #0
    1d1a:	da00      	bge.n	1d1e <setvbuf+0x4e>
    1d1c:	e079      	b.n	1e12 <setvbuf+0x142>
    1d1e:	0021      	movs	r1, r4
    1d20:	0030      	movs	r0, r6
    1d22:	f000 f90b 	bl	1f3c <_fflush_r>
    1d26:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1d28:	2900      	cmp	r1, #0
    1d2a:	d008      	beq.n	1d3e <setvbuf+0x6e>
    1d2c:	0023      	movs	r3, r4
    1d2e:	3344      	adds	r3, #68	; 0x44
    1d30:	4299      	cmp	r1, r3
    1d32:	d002      	beq.n	1d3a <setvbuf+0x6a>
    1d34:	0030      	movs	r0, r6
    1d36:	f000 fa71 	bl	221c <_free_r>
    1d3a:	2300      	movs	r3, #0
    1d3c:	6363      	str	r3, [r4, #52]	; 0x34
    1d3e:	2300      	movs	r3, #0
    1d40:	61a3      	str	r3, [r4, #24]
    1d42:	6063      	str	r3, [r4, #4]
    1d44:	89a3      	ldrh	r3, [r4, #12]
    1d46:	061b      	lsls	r3, r3, #24
    1d48:	d503      	bpl.n	1d52 <setvbuf+0x82>
    1d4a:	6921      	ldr	r1, [r4, #16]
    1d4c:	0030      	movs	r0, r6
    1d4e:	f000 fa65 	bl	221c <_free_r>
    1d52:	89a2      	ldrh	r2, [r4, #12]
    1d54:	4b35      	ldr	r3, [pc, #212]	; (1e2c <setvbuf+0x15c>)
    1d56:	4013      	ands	r3, r2
    1d58:	81a3      	strh	r3, [r4, #12]
    1d5a:	9b00      	ldr	r3, [sp, #0]
    1d5c:	2b02      	cmp	r3, #2
    1d5e:	d021      	beq.n	1da4 <setvbuf+0xd4>
    1d60:	ab03      	add	r3, sp, #12
    1d62:	aa02      	add	r2, sp, #8
    1d64:	0021      	movs	r1, r4
    1d66:	0030      	movs	r0, r6
    1d68:	f000 f9ea 	bl	2140 <__swhatbuf_r>
    1d6c:	89a3      	ldrh	r3, [r4, #12]
    1d6e:	4318      	orrs	r0, r3
    1d70:	81a0      	strh	r0, [r4, #12]
    1d72:	2d00      	cmp	r5, #0
    1d74:	d101      	bne.n	1d7a <setvbuf+0xaa>
    1d76:	9d02      	ldr	r5, [sp, #8]
    1d78:	e001      	b.n	1d7e <setvbuf+0xae>
    1d7a:	2f00      	cmp	r7, #0
    1d7c:	d125      	bne.n	1dca <setvbuf+0xfa>
    1d7e:	0028      	movs	r0, r5
    1d80:	f000 fa42 	bl	2208 <malloc>
    1d84:	9501      	str	r5, [sp, #4]
    1d86:	1e07      	subs	r7, r0, #0
    1d88:	d11a      	bne.n	1dc0 <setvbuf+0xf0>
    1d8a:	9b02      	ldr	r3, [sp, #8]
    1d8c:	9301      	str	r3, [sp, #4]
    1d8e:	42ab      	cmp	r3, r5
    1d90:	d102      	bne.n	1d98 <setvbuf+0xc8>
    1d92:	2001      	movs	r0, #1
    1d94:	4240      	negs	r0, r0
    1d96:	e006      	b.n	1da6 <setvbuf+0xd6>
    1d98:	9801      	ldr	r0, [sp, #4]
    1d9a:	f000 fa35 	bl	2208 <malloc>
    1d9e:	1e07      	subs	r7, r0, #0
    1da0:	d10e      	bne.n	1dc0 <setvbuf+0xf0>
    1da2:	e7f6      	b.n	1d92 <setvbuf+0xc2>
    1da4:	2000      	movs	r0, #0
    1da6:	2202      	movs	r2, #2
    1da8:	89a3      	ldrh	r3, [r4, #12]
    1daa:	4313      	orrs	r3, r2
    1dac:	81a3      	strh	r3, [r4, #12]
    1dae:	2300      	movs	r3, #0
    1db0:	60a3      	str	r3, [r4, #8]
    1db2:	0023      	movs	r3, r4
    1db4:	3347      	adds	r3, #71	; 0x47
    1db6:	6023      	str	r3, [r4, #0]
    1db8:	6123      	str	r3, [r4, #16]
    1dba:	2301      	movs	r3, #1
    1dbc:	6163      	str	r3, [r4, #20]
    1dbe:	e02a      	b.n	1e16 <setvbuf+0x146>
    1dc0:	2280      	movs	r2, #128	; 0x80
    1dc2:	89a3      	ldrh	r3, [r4, #12]
    1dc4:	9d01      	ldr	r5, [sp, #4]
    1dc6:	4313      	orrs	r3, r2
    1dc8:	81a3      	strh	r3, [r4, #12]
    1dca:	69b3      	ldr	r3, [r6, #24]
    1dcc:	2b00      	cmp	r3, #0
    1dce:	d102      	bne.n	1dd6 <setvbuf+0x106>
    1dd0:	0030      	movs	r0, r6
    1dd2:	f000 f921 	bl	2018 <__sinit>
    1dd6:	9b00      	ldr	r3, [sp, #0]
    1dd8:	2b01      	cmp	r3, #1
    1dda:	d103      	bne.n	1de4 <setvbuf+0x114>
    1ddc:	89a3      	ldrh	r3, [r4, #12]
    1dde:	9a00      	ldr	r2, [sp, #0]
    1de0:	431a      	orrs	r2, r3
    1de2:	81a2      	strh	r2, [r4, #12]
    1de4:	2308      	movs	r3, #8
    1de6:	89a2      	ldrh	r2, [r4, #12]
    1de8:	6027      	str	r7, [r4, #0]
    1dea:	4013      	ands	r3, r2
    1dec:	6127      	str	r7, [r4, #16]
    1dee:	6165      	str	r5, [r4, #20]
    1df0:	1e18      	subs	r0, r3, #0
    1df2:	d00c      	beq.n	1e0e <setvbuf+0x13e>
    1df4:	2301      	movs	r3, #1
    1df6:	401a      	ands	r2, r3
    1df8:	2300      	movs	r3, #0
    1dfa:	1e10      	subs	r0, r2, #0
    1dfc:	4298      	cmp	r0, r3
    1dfe:	d004      	beq.n	1e0a <setvbuf+0x13a>
    1e00:	426d      	negs	r5, r5
    1e02:	60a3      	str	r3, [r4, #8]
    1e04:	61a5      	str	r5, [r4, #24]
    1e06:	0018      	movs	r0, r3
    1e08:	e005      	b.n	1e16 <setvbuf+0x146>
    1e0a:	60a5      	str	r5, [r4, #8]
    1e0c:	e003      	b.n	1e16 <setvbuf+0x146>
    1e0e:	60a3      	str	r3, [r4, #8]
    1e10:	e001      	b.n	1e16 <setvbuf+0x146>
    1e12:	2001      	movs	r0, #1
    1e14:	4240      	negs	r0, r0
    1e16:	b005      	add	sp, #20
    1e18:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e1a:	46c0      	nop			; (mov r8, r8)
    1e1c:	2000006c 	.word	0x2000006c
    1e20:	00002cd8 	.word	0x00002cd8
    1e24:	00002cf8 	.word	0x00002cf8
    1e28:	00002d18 	.word	0x00002d18
    1e2c:	fffff35c 	.word	0xfffff35c

00001e30 <__sflush_r>:
    1e30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1e32:	898a      	ldrh	r2, [r1, #12]
    1e34:	0005      	movs	r5, r0
    1e36:	000c      	movs	r4, r1
    1e38:	0713      	lsls	r3, r2, #28
    1e3a:	d45a      	bmi.n	1ef2 <__sflush_r+0xc2>
    1e3c:	684b      	ldr	r3, [r1, #4]
    1e3e:	2b00      	cmp	r3, #0
    1e40:	dc02      	bgt.n	1e48 <__sflush_r+0x18>
    1e42:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    1e44:	2b00      	cmp	r3, #0
    1e46:	dd19      	ble.n	1e7c <__sflush_r+0x4c>
    1e48:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    1e4a:	2f00      	cmp	r7, #0
    1e4c:	d016      	beq.n	1e7c <__sflush_r+0x4c>
    1e4e:	2300      	movs	r3, #0
    1e50:	682e      	ldr	r6, [r5, #0]
    1e52:	602b      	str	r3, [r5, #0]
    1e54:	2380      	movs	r3, #128	; 0x80
    1e56:	015b      	lsls	r3, r3, #5
    1e58:	401a      	ands	r2, r3
    1e5a:	d001      	beq.n	1e60 <__sflush_r+0x30>
    1e5c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    1e5e:	e014      	b.n	1e8a <__sflush_r+0x5a>
    1e60:	2301      	movs	r3, #1
    1e62:	6a21      	ldr	r1, [r4, #32]
    1e64:	0028      	movs	r0, r5
    1e66:	47b8      	blx	r7
    1e68:	1c43      	adds	r3, r0, #1
    1e6a:	d10e      	bne.n	1e8a <__sflush_r+0x5a>
    1e6c:	682b      	ldr	r3, [r5, #0]
    1e6e:	2b00      	cmp	r3, #0
    1e70:	d00b      	beq.n	1e8a <__sflush_r+0x5a>
    1e72:	2b1d      	cmp	r3, #29
    1e74:	d001      	beq.n	1e7a <__sflush_r+0x4a>
    1e76:	2b16      	cmp	r3, #22
    1e78:	d102      	bne.n	1e80 <__sflush_r+0x50>
    1e7a:	602e      	str	r6, [r5, #0]
    1e7c:	2000      	movs	r0, #0
    1e7e:	e05a      	b.n	1f36 <__sflush_r+0x106>
    1e80:	2240      	movs	r2, #64	; 0x40
    1e82:	89a3      	ldrh	r3, [r4, #12]
    1e84:	4313      	orrs	r3, r2
    1e86:	81a3      	strh	r3, [r4, #12]
    1e88:	e055      	b.n	1f36 <__sflush_r+0x106>
    1e8a:	89a3      	ldrh	r3, [r4, #12]
    1e8c:	075b      	lsls	r3, r3, #29
    1e8e:	d506      	bpl.n	1e9e <__sflush_r+0x6e>
    1e90:	6863      	ldr	r3, [r4, #4]
    1e92:	1ac0      	subs	r0, r0, r3
    1e94:	6b63      	ldr	r3, [r4, #52]	; 0x34
    1e96:	2b00      	cmp	r3, #0
    1e98:	d001      	beq.n	1e9e <__sflush_r+0x6e>
    1e9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    1e9c:	1ac0      	subs	r0, r0, r3
    1e9e:	2300      	movs	r3, #0
    1ea0:	0002      	movs	r2, r0
    1ea2:	6a21      	ldr	r1, [r4, #32]
    1ea4:	0028      	movs	r0, r5
    1ea6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    1ea8:	47b8      	blx	r7
    1eaa:	89a3      	ldrh	r3, [r4, #12]
    1eac:	1c42      	adds	r2, r0, #1
    1eae:	d106      	bne.n	1ebe <__sflush_r+0x8e>
    1eb0:	6829      	ldr	r1, [r5, #0]
    1eb2:	291d      	cmp	r1, #29
    1eb4:	d83a      	bhi.n	1f2c <__sflush_r+0xfc>
    1eb6:	4a20      	ldr	r2, [pc, #128]	; (1f38 <__sflush_r+0x108>)
    1eb8:	40ca      	lsrs	r2, r1
    1eba:	07d2      	lsls	r2, r2, #31
    1ebc:	d536      	bpl.n	1f2c <__sflush_r+0xfc>
    1ebe:	2200      	movs	r2, #0
    1ec0:	6062      	str	r2, [r4, #4]
    1ec2:	6922      	ldr	r2, [r4, #16]
    1ec4:	6022      	str	r2, [r4, #0]
    1ec6:	04db      	lsls	r3, r3, #19
    1ec8:	d505      	bpl.n	1ed6 <__sflush_r+0xa6>
    1eca:	1c43      	adds	r3, r0, #1
    1ecc:	d102      	bne.n	1ed4 <__sflush_r+0xa4>
    1ece:	682b      	ldr	r3, [r5, #0]
    1ed0:	2b00      	cmp	r3, #0
    1ed2:	d100      	bne.n	1ed6 <__sflush_r+0xa6>
    1ed4:	6560      	str	r0, [r4, #84]	; 0x54
    1ed6:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1ed8:	602e      	str	r6, [r5, #0]
    1eda:	2900      	cmp	r1, #0
    1edc:	d0ce      	beq.n	1e7c <__sflush_r+0x4c>
    1ede:	0023      	movs	r3, r4
    1ee0:	3344      	adds	r3, #68	; 0x44
    1ee2:	4299      	cmp	r1, r3
    1ee4:	d002      	beq.n	1eec <__sflush_r+0xbc>
    1ee6:	0028      	movs	r0, r5
    1ee8:	f000 f998 	bl	221c <_free_r>
    1eec:	2000      	movs	r0, #0
    1eee:	6360      	str	r0, [r4, #52]	; 0x34
    1ef0:	e021      	b.n	1f36 <__sflush_r+0x106>
    1ef2:	690f      	ldr	r7, [r1, #16]
    1ef4:	2f00      	cmp	r7, #0
    1ef6:	d0c1      	beq.n	1e7c <__sflush_r+0x4c>
    1ef8:	680b      	ldr	r3, [r1, #0]
    1efa:	600f      	str	r7, [r1, #0]
    1efc:	1bdb      	subs	r3, r3, r7
    1efe:	9301      	str	r3, [sp, #4]
    1f00:	2300      	movs	r3, #0
    1f02:	0792      	lsls	r2, r2, #30
    1f04:	d100      	bne.n	1f08 <__sflush_r+0xd8>
    1f06:	694b      	ldr	r3, [r1, #20]
    1f08:	60a3      	str	r3, [r4, #8]
    1f0a:	e003      	b.n	1f14 <__sflush_r+0xe4>
    1f0c:	9b01      	ldr	r3, [sp, #4]
    1f0e:	183f      	adds	r7, r7, r0
    1f10:	1a1b      	subs	r3, r3, r0
    1f12:	9301      	str	r3, [sp, #4]
    1f14:	9b01      	ldr	r3, [sp, #4]
    1f16:	2b00      	cmp	r3, #0
    1f18:	ddb0      	ble.n	1e7c <__sflush_r+0x4c>
    1f1a:	9b01      	ldr	r3, [sp, #4]
    1f1c:	003a      	movs	r2, r7
    1f1e:	6a21      	ldr	r1, [r4, #32]
    1f20:	0028      	movs	r0, r5
    1f22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    1f24:	47b0      	blx	r6
    1f26:	2800      	cmp	r0, #0
    1f28:	dcf0      	bgt.n	1f0c <__sflush_r+0xdc>
    1f2a:	89a3      	ldrh	r3, [r4, #12]
    1f2c:	2240      	movs	r2, #64	; 0x40
    1f2e:	2001      	movs	r0, #1
    1f30:	4313      	orrs	r3, r2
    1f32:	81a3      	strh	r3, [r4, #12]
    1f34:	4240      	negs	r0, r0
    1f36:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1f38:	20400001 	.word	0x20400001

00001f3c <_fflush_r>:
    1f3c:	690b      	ldr	r3, [r1, #16]
    1f3e:	b570      	push	{r4, r5, r6, lr}
    1f40:	0005      	movs	r5, r0
    1f42:	000c      	movs	r4, r1
    1f44:	2b00      	cmp	r3, #0
    1f46:	d101      	bne.n	1f4c <_fflush_r+0x10>
    1f48:	2000      	movs	r0, #0
    1f4a:	e01c      	b.n	1f86 <_fflush_r+0x4a>
    1f4c:	2800      	cmp	r0, #0
    1f4e:	d004      	beq.n	1f5a <_fflush_r+0x1e>
    1f50:	6983      	ldr	r3, [r0, #24]
    1f52:	2b00      	cmp	r3, #0
    1f54:	d101      	bne.n	1f5a <_fflush_r+0x1e>
    1f56:	f000 f85f 	bl	2018 <__sinit>
    1f5a:	4b0b      	ldr	r3, [pc, #44]	; (1f88 <_fflush_r+0x4c>)
    1f5c:	429c      	cmp	r4, r3
    1f5e:	d101      	bne.n	1f64 <_fflush_r+0x28>
    1f60:	686c      	ldr	r4, [r5, #4]
    1f62:	e008      	b.n	1f76 <_fflush_r+0x3a>
    1f64:	4b09      	ldr	r3, [pc, #36]	; (1f8c <_fflush_r+0x50>)
    1f66:	429c      	cmp	r4, r3
    1f68:	d101      	bne.n	1f6e <_fflush_r+0x32>
    1f6a:	68ac      	ldr	r4, [r5, #8]
    1f6c:	e003      	b.n	1f76 <_fflush_r+0x3a>
    1f6e:	4b08      	ldr	r3, [pc, #32]	; (1f90 <_fflush_r+0x54>)
    1f70:	429c      	cmp	r4, r3
    1f72:	d100      	bne.n	1f76 <_fflush_r+0x3a>
    1f74:	68ec      	ldr	r4, [r5, #12]
    1f76:	220c      	movs	r2, #12
    1f78:	5ea3      	ldrsh	r3, [r4, r2]
    1f7a:	2b00      	cmp	r3, #0
    1f7c:	d0e4      	beq.n	1f48 <_fflush_r+0xc>
    1f7e:	0021      	movs	r1, r4
    1f80:	0028      	movs	r0, r5
    1f82:	f7ff ff55 	bl	1e30 <__sflush_r>
    1f86:	bd70      	pop	{r4, r5, r6, pc}
    1f88:	00002cd8 	.word	0x00002cd8
    1f8c:	00002cf8 	.word	0x00002cf8
    1f90:	00002d18 	.word	0x00002d18

00001f94 <_cleanup_r>:
    1f94:	b510      	push	{r4, lr}
    1f96:	4902      	ldr	r1, [pc, #8]	; (1fa0 <_cleanup_r+0xc>)
    1f98:	f000 f8b0 	bl	20fc <_fwalk_reent>
    1f9c:	bd10      	pop	{r4, pc}
    1f9e:	46c0      	nop			; (mov r8, r8)
    1fa0:	00001f3d 	.word	0x00001f3d

00001fa4 <std.isra.0>:
    1fa4:	2300      	movs	r3, #0
    1fa6:	b510      	push	{r4, lr}
    1fa8:	0004      	movs	r4, r0
    1faa:	6003      	str	r3, [r0, #0]
    1fac:	6043      	str	r3, [r0, #4]
    1fae:	6083      	str	r3, [r0, #8]
    1fb0:	8181      	strh	r1, [r0, #12]
    1fb2:	6643      	str	r3, [r0, #100]	; 0x64
    1fb4:	81c2      	strh	r2, [r0, #14]
    1fb6:	6103      	str	r3, [r0, #16]
    1fb8:	6143      	str	r3, [r0, #20]
    1fba:	6183      	str	r3, [r0, #24]
    1fbc:	0019      	movs	r1, r3
    1fbe:	2208      	movs	r2, #8
    1fc0:	305c      	adds	r0, #92	; 0x5c
    1fc2:	f7ff fe58 	bl	1c76 <memset>
    1fc6:	4b05      	ldr	r3, [pc, #20]	; (1fdc <std.isra.0+0x38>)
    1fc8:	6224      	str	r4, [r4, #32]
    1fca:	6263      	str	r3, [r4, #36]	; 0x24
    1fcc:	4b04      	ldr	r3, [pc, #16]	; (1fe0 <std.isra.0+0x3c>)
    1fce:	62a3      	str	r3, [r4, #40]	; 0x28
    1fd0:	4b04      	ldr	r3, [pc, #16]	; (1fe4 <std.isra.0+0x40>)
    1fd2:	62e3      	str	r3, [r4, #44]	; 0x2c
    1fd4:	4b04      	ldr	r3, [pc, #16]	; (1fe8 <std.isra.0+0x44>)
    1fd6:	6323      	str	r3, [r4, #48]	; 0x30
    1fd8:	bd10      	pop	{r4, pc}
    1fda:	46c0      	nop			; (mov r8, r8)
    1fdc:	00002921 	.word	0x00002921
    1fe0:	00002949 	.word	0x00002949
    1fe4:	00002981 	.word	0x00002981
    1fe8:	000029ad 	.word	0x000029ad

00001fec <__sfmoreglue>:
    1fec:	b570      	push	{r4, r5, r6, lr}
    1fee:	2568      	movs	r5, #104	; 0x68
    1ff0:	1e4b      	subs	r3, r1, #1
    1ff2:	435d      	muls	r5, r3
    1ff4:	000e      	movs	r6, r1
    1ff6:	0029      	movs	r1, r5
    1ff8:	3174      	adds	r1, #116	; 0x74
    1ffa:	f000 f955 	bl	22a8 <_malloc_r>
    1ffe:	1e04      	subs	r4, r0, #0
    2000:	d008      	beq.n	2014 <STACK_SIZE+0x14>
    2002:	2100      	movs	r1, #0
    2004:	002a      	movs	r2, r5
    2006:	6001      	str	r1, [r0, #0]
    2008:	6046      	str	r6, [r0, #4]
    200a:	300c      	adds	r0, #12
    200c:	60a0      	str	r0, [r4, #8]
    200e:	3268      	adds	r2, #104	; 0x68
    2010:	f7ff fe31 	bl	1c76 <memset>
    2014:	0020      	movs	r0, r4
    2016:	bd70      	pop	{r4, r5, r6, pc}

00002018 <__sinit>:
    2018:	6983      	ldr	r3, [r0, #24]
    201a:	b513      	push	{r0, r1, r4, lr}
    201c:	0004      	movs	r4, r0
    201e:	2b00      	cmp	r3, #0
    2020:	d128      	bne.n	2074 <__sinit+0x5c>
    2022:	6483      	str	r3, [r0, #72]	; 0x48
    2024:	64c3      	str	r3, [r0, #76]	; 0x4c
    2026:	6503      	str	r3, [r0, #80]	; 0x50
    2028:	4b13      	ldr	r3, [pc, #76]	; (2078 <__sinit+0x60>)
    202a:	4a14      	ldr	r2, [pc, #80]	; (207c <__sinit+0x64>)
    202c:	681b      	ldr	r3, [r3, #0]
    202e:	6282      	str	r2, [r0, #40]	; 0x28
    2030:	9301      	str	r3, [sp, #4]
    2032:	4298      	cmp	r0, r3
    2034:	d101      	bne.n	203a <__sinit+0x22>
    2036:	2301      	movs	r3, #1
    2038:	6183      	str	r3, [r0, #24]
    203a:	0020      	movs	r0, r4
    203c:	f000 f820 	bl	2080 <__sfp>
    2040:	6060      	str	r0, [r4, #4]
    2042:	0020      	movs	r0, r4
    2044:	f000 f81c 	bl	2080 <__sfp>
    2048:	60a0      	str	r0, [r4, #8]
    204a:	0020      	movs	r0, r4
    204c:	f000 f818 	bl	2080 <__sfp>
    2050:	2200      	movs	r2, #0
    2052:	60e0      	str	r0, [r4, #12]
    2054:	2104      	movs	r1, #4
    2056:	6860      	ldr	r0, [r4, #4]
    2058:	f7ff ffa4 	bl	1fa4 <std.isra.0>
    205c:	2201      	movs	r2, #1
    205e:	2109      	movs	r1, #9
    2060:	68a0      	ldr	r0, [r4, #8]
    2062:	f7ff ff9f 	bl	1fa4 <std.isra.0>
    2066:	2202      	movs	r2, #2
    2068:	2112      	movs	r1, #18
    206a:	68e0      	ldr	r0, [r4, #12]
    206c:	f7ff ff9a 	bl	1fa4 <std.isra.0>
    2070:	2301      	movs	r3, #1
    2072:	61a3      	str	r3, [r4, #24]
    2074:	bd13      	pop	{r0, r1, r4, pc}
    2076:	46c0      	nop			; (mov r8, r8)
    2078:	00002cd4 	.word	0x00002cd4
    207c:	00001f95 	.word	0x00001f95

00002080 <__sfp>:
    2080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2082:	4b1d      	ldr	r3, [pc, #116]	; (20f8 <__sfp+0x78>)
    2084:	0006      	movs	r6, r0
    2086:	681d      	ldr	r5, [r3, #0]
    2088:	69ab      	ldr	r3, [r5, #24]
    208a:	2b00      	cmp	r3, #0
    208c:	d102      	bne.n	2094 <__sfp+0x14>
    208e:	0028      	movs	r0, r5
    2090:	f7ff ffc2 	bl	2018 <__sinit>
    2094:	3548      	adds	r5, #72	; 0x48
    2096:	68ac      	ldr	r4, [r5, #8]
    2098:	686b      	ldr	r3, [r5, #4]
    209a:	3b01      	subs	r3, #1
    209c:	d405      	bmi.n	20aa <__sfp+0x2a>
    209e:	220c      	movs	r2, #12
    20a0:	5ea7      	ldrsh	r7, [r4, r2]
    20a2:	2f00      	cmp	r7, #0
    20a4:	d010      	beq.n	20c8 <__sfp+0x48>
    20a6:	3468      	adds	r4, #104	; 0x68
    20a8:	e7f7      	b.n	209a <__sfp+0x1a>
    20aa:	682b      	ldr	r3, [r5, #0]
    20ac:	2b00      	cmp	r3, #0
    20ae:	d001      	beq.n	20b4 <__sfp+0x34>
    20b0:	682d      	ldr	r5, [r5, #0]
    20b2:	e7f0      	b.n	2096 <__sfp+0x16>
    20b4:	2104      	movs	r1, #4
    20b6:	0030      	movs	r0, r6
    20b8:	f7ff ff98 	bl	1fec <__sfmoreglue>
    20bc:	6028      	str	r0, [r5, #0]
    20be:	2800      	cmp	r0, #0
    20c0:	d1f6      	bne.n	20b0 <__sfp+0x30>
    20c2:	230c      	movs	r3, #12
    20c4:	6033      	str	r3, [r6, #0]
    20c6:	e016      	b.n	20f6 <__sfp+0x76>
    20c8:	2301      	movs	r3, #1
    20ca:	0020      	movs	r0, r4
    20cc:	425b      	negs	r3, r3
    20ce:	81e3      	strh	r3, [r4, #14]
    20d0:	3302      	adds	r3, #2
    20d2:	81a3      	strh	r3, [r4, #12]
    20d4:	6667      	str	r7, [r4, #100]	; 0x64
    20d6:	6027      	str	r7, [r4, #0]
    20d8:	60a7      	str	r7, [r4, #8]
    20da:	6067      	str	r7, [r4, #4]
    20dc:	6127      	str	r7, [r4, #16]
    20de:	6167      	str	r7, [r4, #20]
    20e0:	61a7      	str	r7, [r4, #24]
    20e2:	305c      	adds	r0, #92	; 0x5c
    20e4:	2208      	movs	r2, #8
    20e6:	0039      	movs	r1, r7
    20e8:	f7ff fdc5 	bl	1c76 <memset>
    20ec:	0020      	movs	r0, r4
    20ee:	6367      	str	r7, [r4, #52]	; 0x34
    20f0:	63a7      	str	r7, [r4, #56]	; 0x38
    20f2:	64a7      	str	r7, [r4, #72]	; 0x48
    20f4:	64e7      	str	r7, [r4, #76]	; 0x4c
    20f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    20f8:	00002cd4 	.word	0x00002cd4

000020fc <_fwalk_reent>:
    20fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    20fe:	0004      	movs	r4, r0
    2100:	0007      	movs	r7, r0
    2102:	2600      	movs	r6, #0
    2104:	9101      	str	r1, [sp, #4]
    2106:	3448      	adds	r4, #72	; 0x48
    2108:	2c00      	cmp	r4, #0
    210a:	d016      	beq.n	213a <_fwalk_reent+0x3e>
    210c:	6863      	ldr	r3, [r4, #4]
    210e:	68a5      	ldr	r5, [r4, #8]
    2110:	9300      	str	r3, [sp, #0]
    2112:	9b00      	ldr	r3, [sp, #0]
    2114:	3b01      	subs	r3, #1
    2116:	9300      	str	r3, [sp, #0]
    2118:	d40d      	bmi.n	2136 <_fwalk_reent+0x3a>
    211a:	89ab      	ldrh	r3, [r5, #12]
    211c:	2b01      	cmp	r3, #1
    211e:	d908      	bls.n	2132 <_fwalk_reent+0x36>
    2120:	220e      	movs	r2, #14
    2122:	5eab      	ldrsh	r3, [r5, r2]
    2124:	3301      	adds	r3, #1
    2126:	d004      	beq.n	2132 <_fwalk_reent+0x36>
    2128:	0029      	movs	r1, r5
    212a:	0038      	movs	r0, r7
    212c:	9b01      	ldr	r3, [sp, #4]
    212e:	4798      	blx	r3
    2130:	4306      	orrs	r6, r0
    2132:	3568      	adds	r5, #104	; 0x68
    2134:	e7ed      	b.n	2112 <_fwalk_reent+0x16>
    2136:	6824      	ldr	r4, [r4, #0]
    2138:	e7e6      	b.n	2108 <_fwalk_reent+0xc>
    213a:	0030      	movs	r0, r6
    213c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00002140 <__swhatbuf_r>:
    2140:	b570      	push	{r4, r5, r6, lr}
    2142:	000e      	movs	r6, r1
    2144:	001d      	movs	r5, r3
    2146:	230e      	movs	r3, #14
    2148:	5ec9      	ldrsh	r1, [r1, r3]
    214a:	b090      	sub	sp, #64	; 0x40
    214c:	0014      	movs	r4, r2
    214e:	2900      	cmp	r1, #0
    2150:	da06      	bge.n	2160 <__swhatbuf_r+0x20>
    2152:	2300      	movs	r3, #0
    2154:	602b      	str	r3, [r5, #0]
    2156:	89b3      	ldrh	r3, [r6, #12]
    2158:	061b      	lsls	r3, r3, #24
    215a:	d50f      	bpl.n	217c <__swhatbuf_r+0x3c>
    215c:	2340      	movs	r3, #64	; 0x40
    215e:	e00f      	b.n	2180 <__swhatbuf_r+0x40>
    2160:	aa01      	add	r2, sp, #4
    2162:	f000 fd1d 	bl	2ba0 <_fstat_r>
    2166:	2800      	cmp	r0, #0
    2168:	dbf3      	blt.n	2152 <__swhatbuf_r+0x12>
    216a:	23f0      	movs	r3, #240	; 0xf0
    216c:	9a02      	ldr	r2, [sp, #8]
    216e:	021b      	lsls	r3, r3, #8
    2170:	4013      	ands	r3, r2
    2172:	4a05      	ldr	r2, [pc, #20]	; (2188 <__swhatbuf_r+0x48>)
    2174:	189b      	adds	r3, r3, r2
    2176:	425a      	negs	r2, r3
    2178:	4153      	adcs	r3, r2
    217a:	602b      	str	r3, [r5, #0]
    217c:	2380      	movs	r3, #128	; 0x80
    217e:	00db      	lsls	r3, r3, #3
    2180:	2000      	movs	r0, #0
    2182:	6023      	str	r3, [r4, #0]
    2184:	b010      	add	sp, #64	; 0x40
    2186:	bd70      	pop	{r4, r5, r6, pc}
    2188:	ffffe000 	.word	0xffffe000

0000218c <__smakebuf_r>:
    218c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    218e:	2602      	movs	r6, #2
    2190:	898b      	ldrh	r3, [r1, #12]
    2192:	0005      	movs	r5, r0
    2194:	000c      	movs	r4, r1
    2196:	4233      	tst	r3, r6
    2198:	d110      	bne.n	21bc <__smakebuf_r+0x30>
    219a:	ab01      	add	r3, sp, #4
    219c:	466a      	mov	r2, sp
    219e:	f7ff ffcf 	bl	2140 <__swhatbuf_r>
    21a2:	9900      	ldr	r1, [sp, #0]
    21a4:	0007      	movs	r7, r0
    21a6:	0028      	movs	r0, r5
    21a8:	f000 f87e 	bl	22a8 <_malloc_r>
    21ac:	2800      	cmp	r0, #0
    21ae:	d10c      	bne.n	21ca <__smakebuf_r+0x3e>
    21b0:	220c      	movs	r2, #12
    21b2:	5ea3      	ldrsh	r3, [r4, r2]
    21b4:	059a      	lsls	r2, r3, #22
    21b6:	d423      	bmi.n	2200 <__smakebuf_r+0x74>
    21b8:	4333      	orrs	r3, r6
    21ba:	81a3      	strh	r3, [r4, #12]
    21bc:	0023      	movs	r3, r4
    21be:	3347      	adds	r3, #71	; 0x47
    21c0:	6023      	str	r3, [r4, #0]
    21c2:	6123      	str	r3, [r4, #16]
    21c4:	2301      	movs	r3, #1
    21c6:	6163      	str	r3, [r4, #20]
    21c8:	e01a      	b.n	2200 <__smakebuf_r+0x74>
    21ca:	2280      	movs	r2, #128	; 0x80
    21cc:	4b0d      	ldr	r3, [pc, #52]	; (2204 <__smakebuf_r+0x78>)
    21ce:	62ab      	str	r3, [r5, #40]	; 0x28
    21d0:	89a3      	ldrh	r3, [r4, #12]
    21d2:	6020      	str	r0, [r4, #0]
    21d4:	4313      	orrs	r3, r2
    21d6:	81a3      	strh	r3, [r4, #12]
    21d8:	9b00      	ldr	r3, [sp, #0]
    21da:	6120      	str	r0, [r4, #16]
    21dc:	6163      	str	r3, [r4, #20]
    21de:	9b01      	ldr	r3, [sp, #4]
    21e0:	2b00      	cmp	r3, #0
    21e2:	d00a      	beq.n	21fa <__smakebuf_r+0x6e>
    21e4:	230e      	movs	r3, #14
    21e6:	5ee1      	ldrsh	r1, [r4, r3]
    21e8:	0028      	movs	r0, r5
    21ea:	f000 fceb 	bl	2bc4 <_isatty_r>
    21ee:	2800      	cmp	r0, #0
    21f0:	d003      	beq.n	21fa <__smakebuf_r+0x6e>
    21f2:	2201      	movs	r2, #1
    21f4:	89a3      	ldrh	r3, [r4, #12]
    21f6:	4313      	orrs	r3, r2
    21f8:	81a3      	strh	r3, [r4, #12]
    21fa:	89a3      	ldrh	r3, [r4, #12]
    21fc:	431f      	orrs	r7, r3
    21fe:	81a7      	strh	r7, [r4, #12]
    2200:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    2202:	46c0      	nop			; (mov r8, r8)
    2204:	00001f95 	.word	0x00001f95

00002208 <malloc>:
    2208:	b510      	push	{r4, lr}
    220a:	4b03      	ldr	r3, [pc, #12]	; (2218 <malloc+0x10>)
    220c:	0001      	movs	r1, r0
    220e:	6818      	ldr	r0, [r3, #0]
    2210:	f000 f84a 	bl	22a8 <_malloc_r>
    2214:	bd10      	pop	{r4, pc}
    2216:	46c0      	nop			; (mov r8, r8)
    2218:	2000006c 	.word	0x2000006c

0000221c <_free_r>:
    221c:	b530      	push	{r4, r5, lr}
    221e:	2900      	cmp	r1, #0
    2220:	d03e      	beq.n	22a0 <_free_r+0x84>
    2222:	3904      	subs	r1, #4
    2224:	680b      	ldr	r3, [r1, #0]
    2226:	2b00      	cmp	r3, #0
    2228:	da00      	bge.n	222c <_free_r+0x10>
    222a:	18c9      	adds	r1, r1, r3
    222c:	4a1d      	ldr	r2, [pc, #116]	; (22a4 <_free_r+0x88>)
    222e:	6813      	ldr	r3, [r2, #0]
    2230:	0014      	movs	r4, r2
    2232:	2b00      	cmp	r3, #0
    2234:	d102      	bne.n	223c <_free_r+0x20>
    2236:	604b      	str	r3, [r1, #4]
    2238:	6011      	str	r1, [r2, #0]
    223a:	e031      	b.n	22a0 <_free_r+0x84>
    223c:	428b      	cmp	r3, r1
    223e:	d90d      	bls.n	225c <_free_r+0x40>
    2240:	680a      	ldr	r2, [r1, #0]
    2242:	1888      	adds	r0, r1, r2
    2244:	4283      	cmp	r3, r0
    2246:	d103      	bne.n	2250 <_free_r+0x34>
    2248:	6818      	ldr	r0, [r3, #0]
    224a:	685b      	ldr	r3, [r3, #4]
    224c:	1882      	adds	r2, r0, r2
    224e:	600a      	str	r2, [r1, #0]
    2250:	604b      	str	r3, [r1, #4]
    2252:	6021      	str	r1, [r4, #0]
    2254:	e024      	b.n	22a0 <_free_r+0x84>
    2256:	428a      	cmp	r2, r1
    2258:	d803      	bhi.n	2262 <_free_r+0x46>
    225a:	0013      	movs	r3, r2
    225c:	685a      	ldr	r2, [r3, #4]
    225e:	2a00      	cmp	r2, #0
    2260:	d1f9      	bne.n	2256 <_free_r+0x3a>
    2262:	681d      	ldr	r5, [r3, #0]
    2264:	195c      	adds	r4, r3, r5
    2266:	428c      	cmp	r4, r1
    2268:	d10b      	bne.n	2282 <_free_r+0x66>
    226a:	6809      	ldr	r1, [r1, #0]
    226c:	1869      	adds	r1, r5, r1
    226e:	1858      	adds	r0, r3, r1
    2270:	6019      	str	r1, [r3, #0]
    2272:	4282      	cmp	r2, r0
    2274:	d114      	bne.n	22a0 <_free_r+0x84>
    2276:	6810      	ldr	r0, [r2, #0]
    2278:	6852      	ldr	r2, [r2, #4]
    227a:	1841      	adds	r1, r0, r1
    227c:	6019      	str	r1, [r3, #0]
    227e:	605a      	str	r2, [r3, #4]
    2280:	e00e      	b.n	22a0 <_free_r+0x84>
    2282:	428c      	cmp	r4, r1
    2284:	d902      	bls.n	228c <_free_r+0x70>
    2286:	230c      	movs	r3, #12
    2288:	6003      	str	r3, [r0, #0]
    228a:	e009      	b.n	22a0 <_free_r+0x84>
    228c:	6808      	ldr	r0, [r1, #0]
    228e:	180c      	adds	r4, r1, r0
    2290:	42a2      	cmp	r2, r4
    2292:	d103      	bne.n	229c <_free_r+0x80>
    2294:	6814      	ldr	r4, [r2, #0]
    2296:	6852      	ldr	r2, [r2, #4]
    2298:	1820      	adds	r0, r4, r0
    229a:	6008      	str	r0, [r1, #0]
    229c:	604a      	str	r2, [r1, #4]
    229e:	6059      	str	r1, [r3, #4]
    22a0:	bd30      	pop	{r4, r5, pc}
    22a2:	46c0      	nop			; (mov r8, r8)
    22a4:	200000e8 	.word	0x200000e8

000022a8 <_malloc_r>:
    22a8:	2303      	movs	r3, #3
    22aa:	b570      	push	{r4, r5, r6, lr}
    22ac:	1ccd      	adds	r5, r1, #3
    22ae:	439d      	bics	r5, r3
    22b0:	3508      	adds	r5, #8
    22b2:	0006      	movs	r6, r0
    22b4:	2d0c      	cmp	r5, #12
    22b6:	d201      	bcs.n	22bc <_malloc_r+0x14>
    22b8:	250c      	movs	r5, #12
    22ba:	e005      	b.n	22c8 <_malloc_r+0x20>
    22bc:	2d00      	cmp	r5, #0
    22be:	da03      	bge.n	22c8 <_malloc_r+0x20>
    22c0:	230c      	movs	r3, #12
    22c2:	2000      	movs	r0, #0
    22c4:	6033      	str	r3, [r6, #0]
    22c6:	e040      	b.n	234a <_malloc_r+0xa2>
    22c8:	42a9      	cmp	r1, r5
    22ca:	d8f9      	bhi.n	22c0 <_malloc_r+0x18>
    22cc:	4b1f      	ldr	r3, [pc, #124]	; (234c <_malloc_r+0xa4>)
    22ce:	681c      	ldr	r4, [r3, #0]
    22d0:	001a      	movs	r2, r3
    22d2:	0021      	movs	r1, r4
    22d4:	2900      	cmp	r1, #0
    22d6:	d013      	beq.n	2300 <_malloc_r+0x58>
    22d8:	680b      	ldr	r3, [r1, #0]
    22da:	1b5b      	subs	r3, r3, r5
    22dc:	d40d      	bmi.n	22fa <_malloc_r+0x52>
    22de:	2b0b      	cmp	r3, #11
    22e0:	d902      	bls.n	22e8 <_malloc_r+0x40>
    22e2:	600b      	str	r3, [r1, #0]
    22e4:	18cc      	adds	r4, r1, r3
    22e6:	e01e      	b.n	2326 <_malloc_r+0x7e>
    22e8:	428c      	cmp	r4, r1
    22ea:	d102      	bne.n	22f2 <_malloc_r+0x4a>
    22ec:	6863      	ldr	r3, [r4, #4]
    22ee:	6013      	str	r3, [r2, #0]
    22f0:	e01a      	b.n	2328 <_malloc_r+0x80>
    22f2:	684b      	ldr	r3, [r1, #4]
    22f4:	6063      	str	r3, [r4, #4]
    22f6:	000c      	movs	r4, r1
    22f8:	e016      	b.n	2328 <_malloc_r+0x80>
    22fa:	000c      	movs	r4, r1
    22fc:	6849      	ldr	r1, [r1, #4]
    22fe:	e7e9      	b.n	22d4 <_malloc_r+0x2c>
    2300:	4c13      	ldr	r4, [pc, #76]	; (2350 <_malloc_r+0xa8>)
    2302:	6823      	ldr	r3, [r4, #0]
    2304:	2b00      	cmp	r3, #0
    2306:	d103      	bne.n	2310 <_malloc_r+0x68>
    2308:	0030      	movs	r0, r6
    230a:	f000 faf7 	bl	28fc <_sbrk_r>
    230e:	6020      	str	r0, [r4, #0]
    2310:	0029      	movs	r1, r5
    2312:	0030      	movs	r0, r6
    2314:	f000 faf2 	bl	28fc <_sbrk_r>
    2318:	1c43      	adds	r3, r0, #1
    231a:	d0d1      	beq.n	22c0 <_malloc_r+0x18>
    231c:	2303      	movs	r3, #3
    231e:	1cc4      	adds	r4, r0, #3
    2320:	439c      	bics	r4, r3
    2322:	42a0      	cmp	r0, r4
    2324:	d10a      	bne.n	233c <_malloc_r+0x94>
    2326:	6025      	str	r5, [r4, #0]
    2328:	0020      	movs	r0, r4
    232a:	2207      	movs	r2, #7
    232c:	300b      	adds	r0, #11
    232e:	1d23      	adds	r3, r4, #4
    2330:	4390      	bics	r0, r2
    2332:	1ac3      	subs	r3, r0, r3
    2334:	d009      	beq.n	234a <_malloc_r+0xa2>
    2336:	425a      	negs	r2, r3
    2338:	50e2      	str	r2, [r4, r3]
    233a:	e006      	b.n	234a <_malloc_r+0xa2>
    233c:	1a21      	subs	r1, r4, r0
    233e:	0030      	movs	r0, r6
    2340:	f000 fadc 	bl	28fc <_sbrk_r>
    2344:	1c43      	adds	r3, r0, #1
    2346:	d1ee      	bne.n	2326 <_malloc_r+0x7e>
    2348:	e7ba      	b.n	22c0 <_malloc_r+0x18>
    234a:	bd70      	pop	{r4, r5, r6, pc}
    234c:	200000e8 	.word	0x200000e8
    2350:	200000e4 	.word	0x200000e4

00002354 <__sfputc_r>:
    2354:	6893      	ldr	r3, [r2, #8]
    2356:	b510      	push	{r4, lr}
    2358:	3b01      	subs	r3, #1
    235a:	6093      	str	r3, [r2, #8]
    235c:	2b00      	cmp	r3, #0
    235e:	da05      	bge.n	236c <__sfputc_r+0x18>
    2360:	6994      	ldr	r4, [r2, #24]
    2362:	42a3      	cmp	r3, r4
    2364:	db08      	blt.n	2378 <__sfputc_r+0x24>
    2366:	b2cb      	uxtb	r3, r1
    2368:	2b0a      	cmp	r3, #10
    236a:	d005      	beq.n	2378 <__sfputc_r+0x24>
    236c:	6813      	ldr	r3, [r2, #0]
    236e:	1c58      	adds	r0, r3, #1
    2370:	6010      	str	r0, [r2, #0]
    2372:	7019      	strb	r1, [r3, #0]
    2374:	b2c8      	uxtb	r0, r1
    2376:	e001      	b.n	237c <__sfputc_r+0x28>
    2378:	f000 fb1e 	bl	29b8 <__swbuf_r>
    237c:	bd10      	pop	{r4, pc}

0000237e <__sfputs_r>:
    237e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2380:	0006      	movs	r6, r0
    2382:	000f      	movs	r7, r1
    2384:	0014      	movs	r4, r2
    2386:	18d5      	adds	r5, r2, r3
    2388:	42ac      	cmp	r4, r5
    238a:	d008      	beq.n	239e <__sfputs_r+0x20>
    238c:	7821      	ldrb	r1, [r4, #0]
    238e:	003a      	movs	r2, r7
    2390:	0030      	movs	r0, r6
    2392:	f7ff ffdf 	bl	2354 <__sfputc_r>
    2396:	3401      	adds	r4, #1
    2398:	1c43      	adds	r3, r0, #1
    239a:	d1f5      	bne.n	2388 <__sfputs_r+0xa>
    239c:	e000      	b.n	23a0 <__sfputs_r+0x22>
    239e:	2000      	movs	r0, #0
    23a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000023a4 <_vfiprintf_r>:
    23a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    23a6:	b09f      	sub	sp, #124	; 0x7c
    23a8:	0006      	movs	r6, r0
    23aa:	000f      	movs	r7, r1
    23ac:	9202      	str	r2, [sp, #8]
    23ae:	9305      	str	r3, [sp, #20]
    23b0:	2800      	cmp	r0, #0
    23b2:	d004      	beq.n	23be <_vfiprintf_r+0x1a>
    23b4:	6983      	ldr	r3, [r0, #24]
    23b6:	2b00      	cmp	r3, #0
    23b8:	d101      	bne.n	23be <_vfiprintf_r+0x1a>
    23ba:	f7ff fe2d 	bl	2018 <__sinit>
    23be:	4b7f      	ldr	r3, [pc, #508]	; (25bc <_vfiprintf_r+0x218>)
    23c0:	429f      	cmp	r7, r3
    23c2:	d101      	bne.n	23c8 <_vfiprintf_r+0x24>
    23c4:	6877      	ldr	r7, [r6, #4]
    23c6:	e008      	b.n	23da <_vfiprintf_r+0x36>
    23c8:	4b7d      	ldr	r3, [pc, #500]	; (25c0 <_vfiprintf_r+0x21c>)
    23ca:	429f      	cmp	r7, r3
    23cc:	d101      	bne.n	23d2 <_vfiprintf_r+0x2e>
    23ce:	68b7      	ldr	r7, [r6, #8]
    23d0:	e003      	b.n	23da <_vfiprintf_r+0x36>
    23d2:	4b7c      	ldr	r3, [pc, #496]	; (25c4 <_vfiprintf_r+0x220>)
    23d4:	429f      	cmp	r7, r3
    23d6:	d100      	bne.n	23da <_vfiprintf_r+0x36>
    23d8:	68f7      	ldr	r7, [r6, #12]
    23da:	89bb      	ldrh	r3, [r7, #12]
    23dc:	071b      	lsls	r3, r3, #28
    23de:	d50a      	bpl.n	23f6 <_vfiprintf_r+0x52>
    23e0:	693b      	ldr	r3, [r7, #16]
    23e2:	2b00      	cmp	r3, #0
    23e4:	d007      	beq.n	23f6 <_vfiprintf_r+0x52>
    23e6:	2300      	movs	r3, #0
    23e8:	ad06      	add	r5, sp, #24
    23ea:	616b      	str	r3, [r5, #20]
    23ec:	3320      	adds	r3, #32
    23ee:	766b      	strb	r3, [r5, #25]
    23f0:	3310      	adds	r3, #16
    23f2:	76ab      	strb	r3, [r5, #26]
    23f4:	e03d      	b.n	2472 <_vfiprintf_r+0xce>
    23f6:	0039      	movs	r1, r7
    23f8:	0030      	movs	r0, r6
    23fa:	f000 fb49 	bl	2a90 <__swsetup_r>
    23fe:	2800      	cmp	r0, #0
    2400:	d0f1      	beq.n	23e6 <_vfiprintf_r+0x42>
    2402:	2001      	movs	r0, #1
    2404:	4240      	negs	r0, r0
    2406:	e0d6      	b.n	25b6 <_vfiprintf_r+0x212>
    2408:	9a05      	ldr	r2, [sp, #20]
    240a:	1d11      	adds	r1, r2, #4
    240c:	6812      	ldr	r2, [r2, #0]
    240e:	9105      	str	r1, [sp, #20]
    2410:	2a00      	cmp	r2, #0
    2412:	da00      	bge.n	2416 <_vfiprintf_r+0x72>
    2414:	e07f      	b.n	2516 <_vfiprintf_r+0x172>
    2416:	9209      	str	r2, [sp, #36]	; 0x24
    2418:	3401      	adds	r4, #1
    241a:	7823      	ldrb	r3, [r4, #0]
    241c:	2b2e      	cmp	r3, #46	; 0x2e
    241e:	d100      	bne.n	2422 <_vfiprintf_r+0x7e>
    2420:	e08d      	b.n	253e <_vfiprintf_r+0x19a>
    2422:	7821      	ldrb	r1, [r4, #0]
    2424:	2203      	movs	r2, #3
    2426:	4868      	ldr	r0, [pc, #416]	; (25c8 <_vfiprintf_r+0x224>)
    2428:	f000 fbf2 	bl	2c10 <memchr>
    242c:	2800      	cmp	r0, #0
    242e:	d007      	beq.n	2440 <_vfiprintf_r+0x9c>
    2430:	4b65      	ldr	r3, [pc, #404]	; (25c8 <_vfiprintf_r+0x224>)
    2432:	682a      	ldr	r2, [r5, #0]
    2434:	1ac0      	subs	r0, r0, r3
    2436:	2340      	movs	r3, #64	; 0x40
    2438:	4083      	lsls	r3, r0
    243a:	4313      	orrs	r3, r2
    243c:	602b      	str	r3, [r5, #0]
    243e:	3401      	adds	r4, #1
    2440:	7821      	ldrb	r1, [r4, #0]
    2442:	1c63      	adds	r3, r4, #1
    2444:	2206      	movs	r2, #6
    2446:	4861      	ldr	r0, [pc, #388]	; (25cc <_vfiprintf_r+0x228>)
    2448:	9302      	str	r3, [sp, #8]
    244a:	7629      	strb	r1, [r5, #24]
    244c:	f000 fbe0 	bl	2c10 <memchr>
    2450:	2800      	cmp	r0, #0
    2452:	d100      	bne.n	2456 <_vfiprintf_r+0xb2>
    2454:	e09d      	b.n	2592 <_vfiprintf_r+0x1ee>
    2456:	4b5e      	ldr	r3, [pc, #376]	; (25d0 <_vfiprintf_r+0x22c>)
    2458:	2b00      	cmp	r3, #0
    245a:	d000      	beq.n	245e <_vfiprintf_r+0xba>
    245c:	e090      	b.n	2580 <_vfiprintf_r+0x1dc>
    245e:	2207      	movs	r2, #7
    2460:	9b05      	ldr	r3, [sp, #20]
    2462:	3307      	adds	r3, #7
    2464:	4393      	bics	r3, r2
    2466:	3308      	adds	r3, #8
    2468:	9305      	str	r3, [sp, #20]
    246a:	696b      	ldr	r3, [r5, #20]
    246c:	9a03      	ldr	r2, [sp, #12]
    246e:	189b      	adds	r3, r3, r2
    2470:	616b      	str	r3, [r5, #20]
    2472:	9c02      	ldr	r4, [sp, #8]
    2474:	7823      	ldrb	r3, [r4, #0]
    2476:	2b00      	cmp	r3, #0
    2478:	d104      	bne.n	2484 <_vfiprintf_r+0xe0>
    247a:	9b02      	ldr	r3, [sp, #8]
    247c:	1ae3      	subs	r3, r4, r3
    247e:	9304      	str	r3, [sp, #16]
    2480:	d012      	beq.n	24a8 <_vfiprintf_r+0x104>
    2482:	e003      	b.n	248c <_vfiprintf_r+0xe8>
    2484:	2b25      	cmp	r3, #37	; 0x25
    2486:	d0f8      	beq.n	247a <_vfiprintf_r+0xd6>
    2488:	3401      	adds	r4, #1
    248a:	e7f3      	b.n	2474 <_vfiprintf_r+0xd0>
    248c:	9b04      	ldr	r3, [sp, #16]
    248e:	9a02      	ldr	r2, [sp, #8]
    2490:	0039      	movs	r1, r7
    2492:	0030      	movs	r0, r6
    2494:	f7ff ff73 	bl	237e <__sfputs_r>
    2498:	1c43      	adds	r3, r0, #1
    249a:	d100      	bne.n	249e <_vfiprintf_r+0xfa>
    249c:	e086      	b.n	25ac <_vfiprintf_r+0x208>
    249e:	696a      	ldr	r2, [r5, #20]
    24a0:	9b04      	ldr	r3, [sp, #16]
    24a2:	4694      	mov	ip, r2
    24a4:	4463      	add	r3, ip
    24a6:	616b      	str	r3, [r5, #20]
    24a8:	7823      	ldrb	r3, [r4, #0]
    24aa:	2b00      	cmp	r3, #0
    24ac:	d07e      	beq.n	25ac <_vfiprintf_r+0x208>
    24ae:	2201      	movs	r2, #1
    24b0:	2300      	movs	r3, #0
    24b2:	4252      	negs	r2, r2
    24b4:	606a      	str	r2, [r5, #4]
    24b6:	a902      	add	r1, sp, #8
    24b8:	3254      	adds	r2, #84	; 0x54
    24ba:	1852      	adds	r2, r2, r1
    24bc:	3401      	adds	r4, #1
    24be:	602b      	str	r3, [r5, #0]
    24c0:	60eb      	str	r3, [r5, #12]
    24c2:	60ab      	str	r3, [r5, #8]
    24c4:	7013      	strb	r3, [r2, #0]
    24c6:	65ab      	str	r3, [r5, #88]	; 0x58
    24c8:	7821      	ldrb	r1, [r4, #0]
    24ca:	2205      	movs	r2, #5
    24cc:	4841      	ldr	r0, [pc, #260]	; (25d4 <_vfiprintf_r+0x230>)
    24ce:	f000 fb9f 	bl	2c10 <memchr>
    24d2:	2800      	cmp	r0, #0
    24d4:	d008      	beq.n	24e8 <_vfiprintf_r+0x144>
    24d6:	4b3f      	ldr	r3, [pc, #252]	; (25d4 <_vfiprintf_r+0x230>)
    24d8:	682a      	ldr	r2, [r5, #0]
    24da:	1ac0      	subs	r0, r0, r3
    24dc:	2301      	movs	r3, #1
    24de:	4083      	lsls	r3, r0
    24e0:	4313      	orrs	r3, r2
    24e2:	602b      	str	r3, [r5, #0]
    24e4:	3401      	adds	r4, #1
    24e6:	e7ef      	b.n	24c8 <_vfiprintf_r+0x124>
    24e8:	682b      	ldr	r3, [r5, #0]
    24ea:	06da      	lsls	r2, r3, #27
    24ec:	d504      	bpl.n	24f8 <_vfiprintf_r+0x154>
    24ee:	2253      	movs	r2, #83	; 0x53
    24f0:	2120      	movs	r1, #32
    24f2:	a802      	add	r0, sp, #8
    24f4:	1812      	adds	r2, r2, r0
    24f6:	7011      	strb	r1, [r2, #0]
    24f8:	071a      	lsls	r2, r3, #28
    24fa:	d504      	bpl.n	2506 <_vfiprintf_r+0x162>
    24fc:	2253      	movs	r2, #83	; 0x53
    24fe:	212b      	movs	r1, #43	; 0x2b
    2500:	a802      	add	r0, sp, #8
    2502:	1812      	adds	r2, r2, r0
    2504:	7011      	strb	r1, [r2, #0]
    2506:	7822      	ldrb	r2, [r4, #0]
    2508:	2a2a      	cmp	r2, #42	; 0x2a
    250a:	d100      	bne.n	250e <_vfiprintf_r+0x16a>
    250c:	e77c      	b.n	2408 <_vfiprintf_r+0x64>
    250e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2510:	2000      	movs	r0, #0
    2512:	210a      	movs	r1, #10
    2514:	e005      	b.n	2522 <_vfiprintf_r+0x17e>
    2516:	4252      	negs	r2, r2
    2518:	60ea      	str	r2, [r5, #12]
    251a:	2202      	movs	r2, #2
    251c:	4313      	orrs	r3, r2
    251e:	602b      	str	r3, [r5, #0]
    2520:	e77a      	b.n	2418 <_vfiprintf_r+0x74>
    2522:	7822      	ldrb	r2, [r4, #0]
    2524:	3a30      	subs	r2, #48	; 0x30
    2526:	2a09      	cmp	r2, #9
    2528:	d804      	bhi.n	2534 <_vfiprintf_r+0x190>
    252a:	434b      	muls	r3, r1
    252c:	3401      	adds	r4, #1
    252e:	189b      	adds	r3, r3, r2
    2530:	2001      	movs	r0, #1
    2532:	e7f6      	b.n	2522 <_vfiprintf_r+0x17e>
    2534:	2800      	cmp	r0, #0
    2536:	d100      	bne.n	253a <_vfiprintf_r+0x196>
    2538:	e76f      	b.n	241a <_vfiprintf_r+0x76>
    253a:	9309      	str	r3, [sp, #36]	; 0x24
    253c:	e76d      	b.n	241a <_vfiprintf_r+0x76>
    253e:	7863      	ldrb	r3, [r4, #1]
    2540:	2b2a      	cmp	r3, #42	; 0x2a
    2542:	d10a      	bne.n	255a <_vfiprintf_r+0x1b6>
    2544:	9b05      	ldr	r3, [sp, #20]
    2546:	3402      	adds	r4, #2
    2548:	1d1a      	adds	r2, r3, #4
    254a:	681b      	ldr	r3, [r3, #0]
    254c:	9205      	str	r2, [sp, #20]
    254e:	2b00      	cmp	r3, #0
    2550:	da01      	bge.n	2556 <_vfiprintf_r+0x1b2>
    2552:	2301      	movs	r3, #1
    2554:	425b      	negs	r3, r3
    2556:	9307      	str	r3, [sp, #28]
    2558:	e763      	b.n	2422 <_vfiprintf_r+0x7e>
    255a:	2300      	movs	r3, #0
    255c:	200a      	movs	r0, #10
    255e:	001a      	movs	r2, r3
    2560:	3401      	adds	r4, #1
    2562:	606b      	str	r3, [r5, #4]
    2564:	7821      	ldrb	r1, [r4, #0]
    2566:	3930      	subs	r1, #48	; 0x30
    2568:	2909      	cmp	r1, #9
    256a:	d804      	bhi.n	2576 <_vfiprintf_r+0x1d2>
    256c:	4342      	muls	r2, r0
    256e:	3401      	adds	r4, #1
    2570:	1852      	adds	r2, r2, r1
    2572:	2301      	movs	r3, #1
    2574:	e7f6      	b.n	2564 <_vfiprintf_r+0x1c0>
    2576:	2b00      	cmp	r3, #0
    2578:	d100      	bne.n	257c <_vfiprintf_r+0x1d8>
    257a:	e752      	b.n	2422 <_vfiprintf_r+0x7e>
    257c:	9207      	str	r2, [sp, #28]
    257e:	e750      	b.n	2422 <_vfiprintf_r+0x7e>
    2580:	ab05      	add	r3, sp, #20
    2582:	9300      	str	r3, [sp, #0]
    2584:	003a      	movs	r2, r7
    2586:	4b14      	ldr	r3, [pc, #80]	; (25d8 <_vfiprintf_r+0x234>)
    2588:	0029      	movs	r1, r5
    258a:	0030      	movs	r0, r6
    258c:	e000      	b.n	2590 <_vfiprintf_r+0x1ec>
    258e:	bf00      	nop
    2590:	e007      	b.n	25a2 <_vfiprintf_r+0x1fe>
    2592:	ab05      	add	r3, sp, #20
    2594:	9300      	str	r3, [sp, #0]
    2596:	003a      	movs	r2, r7
    2598:	4b0f      	ldr	r3, [pc, #60]	; (25d8 <_vfiprintf_r+0x234>)
    259a:	0029      	movs	r1, r5
    259c:	0030      	movs	r0, r6
    259e:	f000 f88b 	bl	26b8 <_printf_i>
    25a2:	9003      	str	r0, [sp, #12]
    25a4:	9b03      	ldr	r3, [sp, #12]
    25a6:	3301      	adds	r3, #1
    25a8:	d000      	beq.n	25ac <_vfiprintf_r+0x208>
    25aa:	e75e      	b.n	246a <_vfiprintf_r+0xc6>
    25ac:	89bb      	ldrh	r3, [r7, #12]
    25ae:	065b      	lsls	r3, r3, #25
    25b0:	d500      	bpl.n	25b4 <_vfiprintf_r+0x210>
    25b2:	e726      	b.n	2402 <_vfiprintf_r+0x5e>
    25b4:	980b      	ldr	r0, [sp, #44]	; 0x2c
    25b6:	b01f      	add	sp, #124	; 0x7c
    25b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    25ba:	46c0      	nop			; (mov r8, r8)
    25bc:	00002cd8 	.word	0x00002cd8
    25c0:	00002cf8 	.word	0x00002cf8
    25c4:	00002d18 	.word	0x00002d18
    25c8:	00002d3e 	.word	0x00002d3e
    25cc:	00002d42 	.word	0x00002d42
    25d0:	00000000 	.word	0x00000000
    25d4:	00002d38 	.word	0x00002d38
    25d8:	0000237f 	.word	0x0000237f

000025dc <_printf_common>:
    25dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    25de:	0017      	movs	r7, r2
    25e0:	9301      	str	r3, [sp, #4]
    25e2:	688a      	ldr	r2, [r1, #8]
    25e4:	690b      	ldr	r3, [r1, #16]
    25e6:	9000      	str	r0, [sp, #0]
    25e8:	000c      	movs	r4, r1
    25ea:	4293      	cmp	r3, r2
    25ec:	da00      	bge.n	25f0 <_printf_common+0x14>
    25ee:	0013      	movs	r3, r2
    25f0:	0022      	movs	r2, r4
    25f2:	603b      	str	r3, [r7, #0]
    25f4:	3243      	adds	r2, #67	; 0x43
    25f6:	7812      	ldrb	r2, [r2, #0]
    25f8:	2a00      	cmp	r2, #0
    25fa:	d001      	beq.n	2600 <_printf_common+0x24>
    25fc:	3301      	adds	r3, #1
    25fe:	603b      	str	r3, [r7, #0]
    2600:	6823      	ldr	r3, [r4, #0]
    2602:	069b      	lsls	r3, r3, #26
    2604:	d502      	bpl.n	260c <_printf_common+0x30>
    2606:	683b      	ldr	r3, [r7, #0]
    2608:	3302      	adds	r3, #2
    260a:	603b      	str	r3, [r7, #0]
    260c:	2506      	movs	r5, #6
    260e:	6823      	ldr	r3, [r4, #0]
    2610:	401d      	ands	r5, r3
    2612:	d01e      	beq.n	2652 <_printf_common+0x76>
    2614:	0023      	movs	r3, r4
    2616:	3343      	adds	r3, #67	; 0x43
    2618:	781b      	ldrb	r3, [r3, #0]
    261a:	1e5a      	subs	r2, r3, #1
    261c:	4193      	sbcs	r3, r2
    261e:	6822      	ldr	r2, [r4, #0]
    2620:	0692      	lsls	r2, r2, #26
    2622:	d51c      	bpl.n	265e <_printf_common+0x82>
    2624:	2030      	movs	r0, #48	; 0x30
    2626:	18e1      	adds	r1, r4, r3
    2628:	3143      	adds	r1, #67	; 0x43
    262a:	7008      	strb	r0, [r1, #0]
    262c:	0021      	movs	r1, r4
    262e:	1c5a      	adds	r2, r3, #1
    2630:	3145      	adds	r1, #69	; 0x45
    2632:	7809      	ldrb	r1, [r1, #0]
    2634:	18a2      	adds	r2, r4, r2
    2636:	3243      	adds	r2, #67	; 0x43
    2638:	3302      	adds	r3, #2
    263a:	7011      	strb	r1, [r2, #0]
    263c:	e00f      	b.n	265e <_printf_common+0x82>
    263e:	0022      	movs	r2, r4
    2640:	2301      	movs	r3, #1
    2642:	3219      	adds	r2, #25
    2644:	9901      	ldr	r1, [sp, #4]
    2646:	9800      	ldr	r0, [sp, #0]
    2648:	9e08      	ldr	r6, [sp, #32]
    264a:	47b0      	blx	r6
    264c:	1c43      	adds	r3, r0, #1
    264e:	d00e      	beq.n	266e <_printf_common+0x92>
    2650:	3501      	adds	r5, #1
    2652:	68e3      	ldr	r3, [r4, #12]
    2654:	683a      	ldr	r2, [r7, #0]
    2656:	1a9b      	subs	r3, r3, r2
    2658:	429d      	cmp	r5, r3
    265a:	dbf0      	blt.n	263e <_printf_common+0x62>
    265c:	e7da      	b.n	2614 <_printf_common+0x38>
    265e:	0022      	movs	r2, r4
    2660:	9901      	ldr	r1, [sp, #4]
    2662:	3243      	adds	r2, #67	; 0x43
    2664:	9800      	ldr	r0, [sp, #0]
    2666:	9d08      	ldr	r5, [sp, #32]
    2668:	47a8      	blx	r5
    266a:	1c43      	adds	r3, r0, #1
    266c:	d102      	bne.n	2674 <_printf_common+0x98>
    266e:	2001      	movs	r0, #1
    2670:	4240      	negs	r0, r0
    2672:	e020      	b.n	26b6 <_printf_common+0xda>
    2674:	2306      	movs	r3, #6
    2676:	6820      	ldr	r0, [r4, #0]
    2678:	68e1      	ldr	r1, [r4, #12]
    267a:	683a      	ldr	r2, [r7, #0]
    267c:	4003      	ands	r3, r0
    267e:	2500      	movs	r5, #0
    2680:	2b04      	cmp	r3, #4
    2682:	d103      	bne.n	268c <_printf_common+0xb0>
    2684:	1a8d      	subs	r5, r1, r2
    2686:	43eb      	mvns	r3, r5
    2688:	17db      	asrs	r3, r3, #31
    268a:	401d      	ands	r5, r3
    268c:	68a3      	ldr	r3, [r4, #8]
    268e:	6922      	ldr	r2, [r4, #16]
    2690:	4293      	cmp	r3, r2
    2692:	dd01      	ble.n	2698 <_printf_common+0xbc>
    2694:	1a9b      	subs	r3, r3, r2
    2696:	18ed      	adds	r5, r5, r3
    2698:	2700      	movs	r7, #0
    269a:	42bd      	cmp	r5, r7
    269c:	d00a      	beq.n	26b4 <_printf_common+0xd8>
    269e:	0022      	movs	r2, r4
    26a0:	2301      	movs	r3, #1
    26a2:	321a      	adds	r2, #26
    26a4:	9901      	ldr	r1, [sp, #4]
    26a6:	9800      	ldr	r0, [sp, #0]
    26a8:	9e08      	ldr	r6, [sp, #32]
    26aa:	47b0      	blx	r6
    26ac:	1c43      	adds	r3, r0, #1
    26ae:	d0de      	beq.n	266e <_printf_common+0x92>
    26b0:	3701      	adds	r7, #1
    26b2:	e7f2      	b.n	269a <_printf_common+0xbe>
    26b4:	2000      	movs	r0, #0
    26b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

000026b8 <_printf_i>:
    26b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    26ba:	b08b      	sub	sp, #44	; 0x2c
    26bc:	9206      	str	r2, [sp, #24]
    26be:	000a      	movs	r2, r1
    26c0:	3243      	adds	r2, #67	; 0x43
    26c2:	9307      	str	r3, [sp, #28]
    26c4:	9005      	str	r0, [sp, #20]
    26c6:	9204      	str	r2, [sp, #16]
    26c8:	7e0a      	ldrb	r2, [r1, #24]
    26ca:	000c      	movs	r4, r1
    26cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
    26ce:	2a6e      	cmp	r2, #110	; 0x6e
    26d0:	d100      	bne.n	26d4 <_printf_i+0x1c>
    26d2:	e0ab      	b.n	282c <_printf_i+0x174>
    26d4:	d811      	bhi.n	26fa <_printf_i+0x42>
    26d6:	2a63      	cmp	r2, #99	; 0x63
    26d8:	d022      	beq.n	2720 <_printf_i+0x68>
    26da:	d809      	bhi.n	26f0 <_printf_i+0x38>
    26dc:	2a00      	cmp	r2, #0
    26de:	d100      	bne.n	26e2 <_printf_i+0x2a>
    26e0:	e0b5      	b.n	284e <_printf_i+0x196>
    26e2:	2a58      	cmp	r2, #88	; 0x58
    26e4:	d000      	beq.n	26e8 <_printf_i+0x30>
    26e6:	e0c5      	b.n	2874 <_printf_i+0x1bc>
    26e8:	3145      	adds	r1, #69	; 0x45
    26ea:	700a      	strb	r2, [r1, #0]
    26ec:	4a81      	ldr	r2, [pc, #516]	; (28f4 <_printf_i+0x23c>)
    26ee:	e04f      	b.n	2790 <_printf_i+0xd8>
    26f0:	2a64      	cmp	r2, #100	; 0x64
    26f2:	d01d      	beq.n	2730 <_printf_i+0x78>
    26f4:	2a69      	cmp	r2, #105	; 0x69
    26f6:	d01b      	beq.n	2730 <_printf_i+0x78>
    26f8:	e0bc      	b.n	2874 <_printf_i+0x1bc>
    26fa:	2a73      	cmp	r2, #115	; 0x73
    26fc:	d100      	bne.n	2700 <_printf_i+0x48>
    26fe:	e0aa      	b.n	2856 <_printf_i+0x19e>
    2700:	d809      	bhi.n	2716 <_printf_i+0x5e>
    2702:	2a6f      	cmp	r2, #111	; 0x6f
    2704:	d029      	beq.n	275a <_printf_i+0xa2>
    2706:	2a70      	cmp	r2, #112	; 0x70
    2708:	d000      	beq.n	270c <_printf_i+0x54>
    270a:	e0b3      	b.n	2874 <_printf_i+0x1bc>
    270c:	2220      	movs	r2, #32
    270e:	6809      	ldr	r1, [r1, #0]
    2710:	430a      	orrs	r2, r1
    2712:	6022      	str	r2, [r4, #0]
    2714:	e037      	b.n	2786 <_printf_i+0xce>
    2716:	2a75      	cmp	r2, #117	; 0x75
    2718:	d01f      	beq.n	275a <_printf_i+0xa2>
    271a:	2a78      	cmp	r2, #120	; 0x78
    271c:	d033      	beq.n	2786 <_printf_i+0xce>
    271e:	e0a9      	b.n	2874 <_printf_i+0x1bc>
    2720:	000e      	movs	r6, r1
    2722:	681a      	ldr	r2, [r3, #0]
    2724:	3642      	adds	r6, #66	; 0x42
    2726:	1d11      	adds	r1, r2, #4
    2728:	6019      	str	r1, [r3, #0]
    272a:	6813      	ldr	r3, [r2, #0]
    272c:	7033      	strb	r3, [r6, #0]
    272e:	e0a4      	b.n	287a <_printf_i+0x1c2>
    2730:	6821      	ldr	r1, [r4, #0]
    2732:	681a      	ldr	r2, [r3, #0]
    2734:	0608      	lsls	r0, r1, #24
    2736:	d406      	bmi.n	2746 <_printf_i+0x8e>
    2738:	0649      	lsls	r1, r1, #25
    273a:	d504      	bpl.n	2746 <_printf_i+0x8e>
    273c:	1d11      	adds	r1, r2, #4
    273e:	6019      	str	r1, [r3, #0]
    2740:	2300      	movs	r3, #0
    2742:	5ed5      	ldrsh	r5, [r2, r3]
    2744:	e002      	b.n	274c <_printf_i+0x94>
    2746:	1d11      	adds	r1, r2, #4
    2748:	6019      	str	r1, [r3, #0]
    274a:	6815      	ldr	r5, [r2, #0]
    274c:	2d00      	cmp	r5, #0
    274e:	da3b      	bge.n	27c8 <_printf_i+0x110>
    2750:	232d      	movs	r3, #45	; 0x2d
    2752:	9a04      	ldr	r2, [sp, #16]
    2754:	426d      	negs	r5, r5
    2756:	7013      	strb	r3, [r2, #0]
    2758:	e036      	b.n	27c8 <_printf_i+0x110>
    275a:	6821      	ldr	r1, [r4, #0]
    275c:	681a      	ldr	r2, [r3, #0]
    275e:	0608      	lsls	r0, r1, #24
    2760:	d406      	bmi.n	2770 <_printf_i+0xb8>
    2762:	0649      	lsls	r1, r1, #25
    2764:	d504      	bpl.n	2770 <_printf_i+0xb8>
    2766:	6815      	ldr	r5, [r2, #0]
    2768:	1d11      	adds	r1, r2, #4
    276a:	6019      	str	r1, [r3, #0]
    276c:	b2ad      	uxth	r5, r5
    276e:	e002      	b.n	2776 <_printf_i+0xbe>
    2770:	1d11      	adds	r1, r2, #4
    2772:	6019      	str	r1, [r3, #0]
    2774:	6815      	ldr	r5, [r2, #0]
    2776:	4b5f      	ldr	r3, [pc, #380]	; (28f4 <_printf_i+0x23c>)
    2778:	7e22      	ldrb	r2, [r4, #24]
    277a:	9303      	str	r3, [sp, #12]
    277c:	2708      	movs	r7, #8
    277e:	2a6f      	cmp	r2, #111	; 0x6f
    2780:	d01d      	beq.n	27be <_printf_i+0x106>
    2782:	270a      	movs	r7, #10
    2784:	e01b      	b.n	27be <_printf_i+0x106>
    2786:	0022      	movs	r2, r4
    2788:	2178      	movs	r1, #120	; 0x78
    278a:	3245      	adds	r2, #69	; 0x45
    278c:	7011      	strb	r1, [r2, #0]
    278e:	4a5a      	ldr	r2, [pc, #360]	; (28f8 <_printf_i+0x240>)
    2790:	6819      	ldr	r1, [r3, #0]
    2792:	9203      	str	r2, [sp, #12]
    2794:	1d08      	adds	r0, r1, #4
    2796:	6822      	ldr	r2, [r4, #0]
    2798:	6018      	str	r0, [r3, #0]
    279a:	680d      	ldr	r5, [r1, #0]
    279c:	0610      	lsls	r0, r2, #24
    279e:	d402      	bmi.n	27a6 <_printf_i+0xee>
    27a0:	0650      	lsls	r0, r2, #25
    27a2:	d500      	bpl.n	27a6 <_printf_i+0xee>
    27a4:	b2ad      	uxth	r5, r5
    27a6:	07d3      	lsls	r3, r2, #31
    27a8:	d502      	bpl.n	27b0 <_printf_i+0xf8>
    27aa:	2320      	movs	r3, #32
    27ac:	431a      	orrs	r2, r3
    27ae:	6022      	str	r2, [r4, #0]
    27b0:	2710      	movs	r7, #16
    27b2:	2d00      	cmp	r5, #0
    27b4:	d103      	bne.n	27be <_printf_i+0x106>
    27b6:	2320      	movs	r3, #32
    27b8:	6822      	ldr	r2, [r4, #0]
    27ba:	439a      	bics	r2, r3
    27bc:	6022      	str	r2, [r4, #0]
    27be:	0023      	movs	r3, r4
    27c0:	2200      	movs	r2, #0
    27c2:	3343      	adds	r3, #67	; 0x43
    27c4:	701a      	strb	r2, [r3, #0]
    27c6:	e002      	b.n	27ce <_printf_i+0x116>
    27c8:	270a      	movs	r7, #10
    27ca:	4b4a      	ldr	r3, [pc, #296]	; (28f4 <_printf_i+0x23c>)
    27cc:	9303      	str	r3, [sp, #12]
    27ce:	6863      	ldr	r3, [r4, #4]
    27d0:	60a3      	str	r3, [r4, #8]
    27d2:	2b00      	cmp	r3, #0
    27d4:	db09      	blt.n	27ea <_printf_i+0x132>
    27d6:	2204      	movs	r2, #4
    27d8:	6821      	ldr	r1, [r4, #0]
    27da:	4391      	bics	r1, r2
    27dc:	6021      	str	r1, [r4, #0]
    27de:	2d00      	cmp	r5, #0
    27e0:	d105      	bne.n	27ee <_printf_i+0x136>
    27e2:	9e04      	ldr	r6, [sp, #16]
    27e4:	2b00      	cmp	r3, #0
    27e6:	d011      	beq.n	280c <_printf_i+0x154>
    27e8:	e07b      	b.n	28e2 <_printf_i+0x22a>
    27ea:	2d00      	cmp	r5, #0
    27ec:	d079      	beq.n	28e2 <_printf_i+0x22a>
    27ee:	9e04      	ldr	r6, [sp, #16]
    27f0:	0028      	movs	r0, r5
    27f2:	0039      	movs	r1, r7
    27f4:	f7ff f9de 	bl	1bb4 <__aeabi_uidivmod>
    27f8:	9b03      	ldr	r3, [sp, #12]
    27fa:	3e01      	subs	r6, #1
    27fc:	5c5b      	ldrb	r3, [r3, r1]
    27fe:	0028      	movs	r0, r5
    2800:	7033      	strb	r3, [r6, #0]
    2802:	0039      	movs	r1, r7
    2804:	f7ff f950 	bl	1aa8 <__aeabi_uidiv>
    2808:	1e05      	subs	r5, r0, #0
    280a:	d1f1      	bne.n	27f0 <_printf_i+0x138>
    280c:	2f08      	cmp	r7, #8
    280e:	d109      	bne.n	2824 <_printf_i+0x16c>
    2810:	6823      	ldr	r3, [r4, #0]
    2812:	07db      	lsls	r3, r3, #31
    2814:	d506      	bpl.n	2824 <_printf_i+0x16c>
    2816:	6863      	ldr	r3, [r4, #4]
    2818:	6922      	ldr	r2, [r4, #16]
    281a:	4293      	cmp	r3, r2
    281c:	dc02      	bgt.n	2824 <_printf_i+0x16c>
    281e:	2330      	movs	r3, #48	; 0x30
    2820:	3e01      	subs	r6, #1
    2822:	7033      	strb	r3, [r6, #0]
    2824:	9b04      	ldr	r3, [sp, #16]
    2826:	1b9b      	subs	r3, r3, r6
    2828:	6123      	str	r3, [r4, #16]
    282a:	e02b      	b.n	2884 <_printf_i+0x1cc>
    282c:	6809      	ldr	r1, [r1, #0]
    282e:	681a      	ldr	r2, [r3, #0]
    2830:	0608      	lsls	r0, r1, #24
    2832:	d407      	bmi.n	2844 <_printf_i+0x18c>
    2834:	0649      	lsls	r1, r1, #25
    2836:	d505      	bpl.n	2844 <_printf_i+0x18c>
    2838:	1d11      	adds	r1, r2, #4
    283a:	6019      	str	r1, [r3, #0]
    283c:	6813      	ldr	r3, [r2, #0]
    283e:	8aa2      	ldrh	r2, [r4, #20]
    2840:	801a      	strh	r2, [r3, #0]
    2842:	e004      	b.n	284e <_printf_i+0x196>
    2844:	1d11      	adds	r1, r2, #4
    2846:	6019      	str	r1, [r3, #0]
    2848:	6813      	ldr	r3, [r2, #0]
    284a:	6962      	ldr	r2, [r4, #20]
    284c:	601a      	str	r2, [r3, #0]
    284e:	2300      	movs	r3, #0
    2850:	9e04      	ldr	r6, [sp, #16]
    2852:	6123      	str	r3, [r4, #16]
    2854:	e016      	b.n	2884 <_printf_i+0x1cc>
    2856:	681a      	ldr	r2, [r3, #0]
    2858:	1d11      	adds	r1, r2, #4
    285a:	6019      	str	r1, [r3, #0]
    285c:	6816      	ldr	r6, [r2, #0]
    285e:	2100      	movs	r1, #0
    2860:	6862      	ldr	r2, [r4, #4]
    2862:	0030      	movs	r0, r6
    2864:	f000 f9d4 	bl	2c10 <memchr>
    2868:	2800      	cmp	r0, #0
    286a:	d001      	beq.n	2870 <_printf_i+0x1b8>
    286c:	1b80      	subs	r0, r0, r6
    286e:	6060      	str	r0, [r4, #4]
    2870:	6863      	ldr	r3, [r4, #4]
    2872:	e003      	b.n	287c <_printf_i+0x1c4>
    2874:	0026      	movs	r6, r4
    2876:	3642      	adds	r6, #66	; 0x42
    2878:	7032      	strb	r2, [r6, #0]
    287a:	2301      	movs	r3, #1
    287c:	6123      	str	r3, [r4, #16]
    287e:	2300      	movs	r3, #0
    2880:	9a04      	ldr	r2, [sp, #16]
    2882:	7013      	strb	r3, [r2, #0]
    2884:	9b07      	ldr	r3, [sp, #28]
    2886:	aa09      	add	r2, sp, #36	; 0x24
    2888:	9300      	str	r3, [sp, #0]
    288a:	0021      	movs	r1, r4
    288c:	9b06      	ldr	r3, [sp, #24]
    288e:	9805      	ldr	r0, [sp, #20]
    2890:	f7ff fea4 	bl	25dc <_printf_common>
    2894:	1c43      	adds	r3, r0, #1
    2896:	d102      	bne.n	289e <_printf_i+0x1e6>
    2898:	2001      	movs	r0, #1
    289a:	4240      	negs	r0, r0
    289c:	e027      	b.n	28ee <_printf_i+0x236>
    289e:	6923      	ldr	r3, [r4, #16]
    28a0:	0032      	movs	r2, r6
    28a2:	9906      	ldr	r1, [sp, #24]
    28a4:	9805      	ldr	r0, [sp, #20]
    28a6:	9d07      	ldr	r5, [sp, #28]
    28a8:	47a8      	blx	r5
    28aa:	1c43      	adds	r3, r0, #1
    28ac:	d0f4      	beq.n	2898 <_printf_i+0x1e0>
    28ae:	6823      	ldr	r3, [r4, #0]
    28b0:	2500      	movs	r5, #0
    28b2:	079b      	lsls	r3, r3, #30
    28b4:	d40f      	bmi.n	28d6 <_printf_i+0x21e>
    28b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    28b8:	68e0      	ldr	r0, [r4, #12]
    28ba:	4298      	cmp	r0, r3
    28bc:	da17      	bge.n	28ee <_printf_i+0x236>
    28be:	0018      	movs	r0, r3
    28c0:	e015      	b.n	28ee <_printf_i+0x236>
    28c2:	0022      	movs	r2, r4
    28c4:	2301      	movs	r3, #1
    28c6:	3219      	adds	r2, #25
    28c8:	9906      	ldr	r1, [sp, #24]
    28ca:	9805      	ldr	r0, [sp, #20]
    28cc:	9e07      	ldr	r6, [sp, #28]
    28ce:	47b0      	blx	r6
    28d0:	1c43      	adds	r3, r0, #1
    28d2:	d0e1      	beq.n	2898 <_printf_i+0x1e0>
    28d4:	3501      	adds	r5, #1
    28d6:	68e3      	ldr	r3, [r4, #12]
    28d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    28da:	1a9b      	subs	r3, r3, r2
    28dc:	429d      	cmp	r5, r3
    28de:	dbf0      	blt.n	28c2 <_printf_i+0x20a>
    28e0:	e7e9      	b.n	28b6 <_printf_i+0x1fe>
    28e2:	0026      	movs	r6, r4
    28e4:	9b03      	ldr	r3, [sp, #12]
    28e6:	3642      	adds	r6, #66	; 0x42
    28e8:	781b      	ldrb	r3, [r3, #0]
    28ea:	7033      	strb	r3, [r6, #0]
    28ec:	e78e      	b.n	280c <_printf_i+0x154>
    28ee:	b00b      	add	sp, #44	; 0x2c
    28f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    28f2:	46c0      	nop			; (mov r8, r8)
    28f4:	00002d49 	.word	0x00002d49
    28f8:	00002d5a 	.word	0x00002d5a

000028fc <_sbrk_r>:
    28fc:	2300      	movs	r3, #0
    28fe:	b570      	push	{r4, r5, r6, lr}
    2900:	4c06      	ldr	r4, [pc, #24]	; (291c <_sbrk_r+0x20>)
    2902:	0005      	movs	r5, r0
    2904:	0008      	movs	r0, r1
    2906:	6023      	str	r3, [r4, #0]
    2908:	f7fe ff30 	bl	176c <_sbrk>
    290c:	1c43      	adds	r3, r0, #1
    290e:	d103      	bne.n	2918 <_sbrk_r+0x1c>
    2910:	6823      	ldr	r3, [r4, #0]
    2912:	2b00      	cmp	r3, #0
    2914:	d000      	beq.n	2918 <_sbrk_r+0x1c>
    2916:	602b      	str	r3, [r5, #0]
    2918:	bd70      	pop	{r4, r5, r6, pc}
    291a:	46c0      	nop			; (mov r8, r8)
    291c:	20000184 	.word	0x20000184

00002920 <__sread>:
    2920:	b570      	push	{r4, r5, r6, lr}
    2922:	000c      	movs	r4, r1
    2924:	250e      	movs	r5, #14
    2926:	5f49      	ldrsh	r1, [r1, r5]
    2928:	f000 f97e 	bl	2c28 <_read_r>
    292c:	2800      	cmp	r0, #0
    292e:	db03      	blt.n	2938 <__sread+0x18>
    2930:	6d63      	ldr	r3, [r4, #84]	; 0x54
    2932:	181b      	adds	r3, r3, r0
    2934:	6563      	str	r3, [r4, #84]	; 0x54
    2936:	e003      	b.n	2940 <__sread+0x20>
    2938:	89a2      	ldrh	r2, [r4, #12]
    293a:	4b02      	ldr	r3, [pc, #8]	; (2944 <__sread+0x24>)
    293c:	4013      	ands	r3, r2
    293e:	81a3      	strh	r3, [r4, #12]
    2940:	bd70      	pop	{r4, r5, r6, pc}
    2942:	46c0      	nop			; (mov r8, r8)
    2944:	ffffefff 	.word	0xffffefff

00002948 <__swrite>:
    2948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    294a:	001f      	movs	r7, r3
    294c:	898b      	ldrh	r3, [r1, #12]
    294e:	0005      	movs	r5, r0
    2950:	000c      	movs	r4, r1
    2952:	0016      	movs	r6, r2
    2954:	05db      	lsls	r3, r3, #23
    2956:	d505      	bpl.n	2964 <__swrite+0x1c>
    2958:	230e      	movs	r3, #14
    295a:	5ec9      	ldrsh	r1, [r1, r3]
    295c:	2200      	movs	r2, #0
    295e:	2302      	movs	r3, #2
    2960:	f000 f942 	bl	2be8 <_lseek_r>
    2964:	89a2      	ldrh	r2, [r4, #12]
    2966:	4b05      	ldr	r3, [pc, #20]	; (297c <__swrite+0x34>)
    2968:	0028      	movs	r0, r5
    296a:	4013      	ands	r3, r2
    296c:	81a3      	strh	r3, [r4, #12]
    296e:	0032      	movs	r2, r6
    2970:	230e      	movs	r3, #14
    2972:	5ee1      	ldrsh	r1, [r4, r3]
    2974:	003b      	movs	r3, r7
    2976:	f000 f877 	bl	2a68 <_write_r>
    297a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    297c:	ffffefff 	.word	0xffffefff

00002980 <__sseek>:
    2980:	b570      	push	{r4, r5, r6, lr}
    2982:	000c      	movs	r4, r1
    2984:	250e      	movs	r5, #14
    2986:	5f49      	ldrsh	r1, [r1, r5]
    2988:	f000 f92e 	bl	2be8 <_lseek_r>
    298c:	89a3      	ldrh	r3, [r4, #12]
    298e:	1c42      	adds	r2, r0, #1
    2990:	d103      	bne.n	299a <__sseek+0x1a>
    2992:	4a05      	ldr	r2, [pc, #20]	; (29a8 <__sseek+0x28>)
    2994:	4013      	ands	r3, r2
    2996:	81a3      	strh	r3, [r4, #12]
    2998:	e004      	b.n	29a4 <__sseek+0x24>
    299a:	2280      	movs	r2, #128	; 0x80
    299c:	0152      	lsls	r2, r2, #5
    299e:	4313      	orrs	r3, r2
    29a0:	81a3      	strh	r3, [r4, #12]
    29a2:	6560      	str	r0, [r4, #84]	; 0x54
    29a4:	bd70      	pop	{r4, r5, r6, pc}
    29a6:	46c0      	nop			; (mov r8, r8)
    29a8:	ffffefff 	.word	0xffffefff

000029ac <__sclose>:
    29ac:	b510      	push	{r4, lr}
    29ae:	230e      	movs	r3, #14
    29b0:	5ec9      	ldrsh	r1, [r1, r3]
    29b2:	f000 f8e3 	bl	2b7c <_close_r>
    29b6:	bd10      	pop	{r4, pc}

000029b8 <__swbuf_r>:
    29b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    29ba:	0005      	movs	r5, r0
    29bc:	000f      	movs	r7, r1
    29be:	0014      	movs	r4, r2
    29c0:	2800      	cmp	r0, #0
    29c2:	d004      	beq.n	29ce <__swbuf_r+0x16>
    29c4:	6983      	ldr	r3, [r0, #24]
    29c6:	2b00      	cmp	r3, #0
    29c8:	d101      	bne.n	29ce <__swbuf_r+0x16>
    29ca:	f7ff fb25 	bl	2018 <__sinit>
    29ce:	4b23      	ldr	r3, [pc, #140]	; (2a5c <__swbuf_r+0xa4>)
    29d0:	429c      	cmp	r4, r3
    29d2:	d101      	bne.n	29d8 <__swbuf_r+0x20>
    29d4:	686c      	ldr	r4, [r5, #4]
    29d6:	e008      	b.n	29ea <__swbuf_r+0x32>
    29d8:	4b21      	ldr	r3, [pc, #132]	; (2a60 <__swbuf_r+0xa8>)
    29da:	429c      	cmp	r4, r3
    29dc:	d101      	bne.n	29e2 <__swbuf_r+0x2a>
    29de:	68ac      	ldr	r4, [r5, #8]
    29e0:	e003      	b.n	29ea <__swbuf_r+0x32>
    29e2:	4b20      	ldr	r3, [pc, #128]	; (2a64 <__swbuf_r+0xac>)
    29e4:	429c      	cmp	r4, r3
    29e6:	d100      	bne.n	29ea <__swbuf_r+0x32>
    29e8:	68ec      	ldr	r4, [r5, #12]
    29ea:	69a3      	ldr	r3, [r4, #24]
    29ec:	60a3      	str	r3, [r4, #8]
    29ee:	89a3      	ldrh	r3, [r4, #12]
    29f0:	071b      	lsls	r3, r3, #28
    29f2:	d50a      	bpl.n	2a0a <__swbuf_r+0x52>
    29f4:	6923      	ldr	r3, [r4, #16]
    29f6:	2b00      	cmp	r3, #0
    29f8:	d007      	beq.n	2a0a <__swbuf_r+0x52>
    29fa:	6823      	ldr	r3, [r4, #0]
    29fc:	6922      	ldr	r2, [r4, #16]
    29fe:	b2fe      	uxtb	r6, r7
    2a00:	1a98      	subs	r0, r3, r2
    2a02:	6963      	ldr	r3, [r4, #20]
    2a04:	4298      	cmp	r0, r3
    2a06:	db0f      	blt.n	2a28 <__swbuf_r+0x70>
    2a08:	e008      	b.n	2a1c <__swbuf_r+0x64>
    2a0a:	0021      	movs	r1, r4
    2a0c:	0028      	movs	r0, r5
    2a0e:	f000 f83f 	bl	2a90 <__swsetup_r>
    2a12:	2800      	cmp	r0, #0
    2a14:	d0f1      	beq.n	29fa <__swbuf_r+0x42>
    2a16:	2001      	movs	r0, #1
    2a18:	4240      	negs	r0, r0
    2a1a:	e01d      	b.n	2a58 <__swbuf_r+0xa0>
    2a1c:	0021      	movs	r1, r4
    2a1e:	0028      	movs	r0, r5
    2a20:	f7ff fa8c 	bl	1f3c <_fflush_r>
    2a24:	2800      	cmp	r0, #0
    2a26:	d1f6      	bne.n	2a16 <__swbuf_r+0x5e>
    2a28:	68a3      	ldr	r3, [r4, #8]
    2a2a:	3001      	adds	r0, #1
    2a2c:	3b01      	subs	r3, #1
    2a2e:	60a3      	str	r3, [r4, #8]
    2a30:	6823      	ldr	r3, [r4, #0]
    2a32:	1c5a      	adds	r2, r3, #1
    2a34:	6022      	str	r2, [r4, #0]
    2a36:	701f      	strb	r7, [r3, #0]
    2a38:	6963      	ldr	r3, [r4, #20]
    2a3a:	4298      	cmp	r0, r3
    2a3c:	d005      	beq.n	2a4a <__swbuf_r+0x92>
    2a3e:	89a3      	ldrh	r3, [r4, #12]
    2a40:	0030      	movs	r0, r6
    2a42:	07db      	lsls	r3, r3, #31
    2a44:	d508      	bpl.n	2a58 <__swbuf_r+0xa0>
    2a46:	2e0a      	cmp	r6, #10
    2a48:	d106      	bne.n	2a58 <__swbuf_r+0xa0>
    2a4a:	0021      	movs	r1, r4
    2a4c:	0028      	movs	r0, r5
    2a4e:	f7ff fa75 	bl	1f3c <_fflush_r>
    2a52:	2800      	cmp	r0, #0
    2a54:	d1df      	bne.n	2a16 <__swbuf_r+0x5e>
    2a56:	0030      	movs	r0, r6
    2a58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2a5a:	46c0      	nop			; (mov r8, r8)
    2a5c:	00002cd8 	.word	0x00002cd8
    2a60:	00002cf8 	.word	0x00002cf8
    2a64:	00002d18 	.word	0x00002d18

00002a68 <_write_r>:
    2a68:	b570      	push	{r4, r5, r6, lr}
    2a6a:	0005      	movs	r5, r0
    2a6c:	0008      	movs	r0, r1
    2a6e:	0011      	movs	r1, r2
    2a70:	2200      	movs	r2, #0
    2a72:	4c06      	ldr	r4, [pc, #24]	; (2a8c <_write_r+0x24>)
    2a74:	6022      	str	r2, [r4, #0]
    2a76:	001a      	movs	r2, r3
    2a78:	f7fd fba2 	bl	1c0 <_write>
    2a7c:	1c43      	adds	r3, r0, #1
    2a7e:	d103      	bne.n	2a88 <_write_r+0x20>
    2a80:	6823      	ldr	r3, [r4, #0]
    2a82:	2b00      	cmp	r3, #0
    2a84:	d000      	beq.n	2a88 <_write_r+0x20>
    2a86:	602b      	str	r3, [r5, #0]
    2a88:	bd70      	pop	{r4, r5, r6, pc}
    2a8a:	46c0      	nop			; (mov r8, r8)
    2a8c:	20000184 	.word	0x20000184

00002a90 <__swsetup_r>:
    2a90:	4b36      	ldr	r3, [pc, #216]	; (2b6c <__swsetup_r+0xdc>)
    2a92:	b570      	push	{r4, r5, r6, lr}
    2a94:	681d      	ldr	r5, [r3, #0]
    2a96:	0006      	movs	r6, r0
    2a98:	000c      	movs	r4, r1
    2a9a:	2d00      	cmp	r5, #0
    2a9c:	d005      	beq.n	2aaa <__swsetup_r+0x1a>
    2a9e:	69ab      	ldr	r3, [r5, #24]
    2aa0:	2b00      	cmp	r3, #0
    2aa2:	d102      	bne.n	2aaa <__swsetup_r+0x1a>
    2aa4:	0028      	movs	r0, r5
    2aa6:	f7ff fab7 	bl	2018 <__sinit>
    2aaa:	4b31      	ldr	r3, [pc, #196]	; (2b70 <__swsetup_r+0xe0>)
    2aac:	429c      	cmp	r4, r3
    2aae:	d101      	bne.n	2ab4 <__swsetup_r+0x24>
    2ab0:	686c      	ldr	r4, [r5, #4]
    2ab2:	e008      	b.n	2ac6 <__swsetup_r+0x36>
    2ab4:	4b2f      	ldr	r3, [pc, #188]	; (2b74 <__swsetup_r+0xe4>)
    2ab6:	429c      	cmp	r4, r3
    2ab8:	d101      	bne.n	2abe <__swsetup_r+0x2e>
    2aba:	68ac      	ldr	r4, [r5, #8]
    2abc:	e003      	b.n	2ac6 <__swsetup_r+0x36>
    2abe:	4b2e      	ldr	r3, [pc, #184]	; (2b78 <__swsetup_r+0xe8>)
    2ac0:	429c      	cmp	r4, r3
    2ac2:	d100      	bne.n	2ac6 <__swsetup_r+0x36>
    2ac4:	68ec      	ldr	r4, [r5, #12]
    2ac6:	220c      	movs	r2, #12
    2ac8:	5ea3      	ldrsh	r3, [r4, r2]
    2aca:	b29a      	uxth	r2, r3
    2acc:	0711      	lsls	r1, r2, #28
    2ace:	d423      	bmi.n	2b18 <__swsetup_r+0x88>
    2ad0:	06d1      	lsls	r1, r2, #27
    2ad2:	d407      	bmi.n	2ae4 <__swsetup_r+0x54>
    2ad4:	2209      	movs	r2, #9
    2ad6:	2001      	movs	r0, #1
    2ad8:	6032      	str	r2, [r6, #0]
    2ada:	3237      	adds	r2, #55	; 0x37
    2adc:	4313      	orrs	r3, r2
    2ade:	81a3      	strh	r3, [r4, #12]
    2ae0:	4240      	negs	r0, r0
    2ae2:	e042      	b.n	2b6a <__swsetup_r+0xda>
    2ae4:	0753      	lsls	r3, r2, #29
    2ae6:	d513      	bpl.n	2b10 <__swsetup_r+0x80>
    2ae8:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2aea:	2900      	cmp	r1, #0
    2aec:	d008      	beq.n	2b00 <__swsetup_r+0x70>
    2aee:	0023      	movs	r3, r4
    2af0:	3344      	adds	r3, #68	; 0x44
    2af2:	4299      	cmp	r1, r3
    2af4:	d002      	beq.n	2afc <__swsetup_r+0x6c>
    2af6:	0030      	movs	r0, r6
    2af8:	f7ff fb90 	bl	221c <_free_r>
    2afc:	2300      	movs	r3, #0
    2afe:	6363      	str	r3, [r4, #52]	; 0x34
    2b00:	2224      	movs	r2, #36	; 0x24
    2b02:	89a3      	ldrh	r3, [r4, #12]
    2b04:	4393      	bics	r3, r2
    2b06:	81a3      	strh	r3, [r4, #12]
    2b08:	2300      	movs	r3, #0
    2b0a:	6063      	str	r3, [r4, #4]
    2b0c:	6923      	ldr	r3, [r4, #16]
    2b0e:	6023      	str	r3, [r4, #0]
    2b10:	2208      	movs	r2, #8
    2b12:	89a3      	ldrh	r3, [r4, #12]
    2b14:	4313      	orrs	r3, r2
    2b16:	81a3      	strh	r3, [r4, #12]
    2b18:	6923      	ldr	r3, [r4, #16]
    2b1a:	2b00      	cmp	r3, #0
    2b1c:	d10b      	bne.n	2b36 <__swsetup_r+0xa6>
    2b1e:	23a0      	movs	r3, #160	; 0xa0
    2b20:	89a2      	ldrh	r2, [r4, #12]
    2b22:	009b      	lsls	r3, r3, #2
    2b24:	4013      	ands	r3, r2
    2b26:	2280      	movs	r2, #128	; 0x80
    2b28:	0092      	lsls	r2, r2, #2
    2b2a:	4293      	cmp	r3, r2
    2b2c:	d003      	beq.n	2b36 <__swsetup_r+0xa6>
    2b2e:	0021      	movs	r1, r4
    2b30:	0030      	movs	r0, r6
    2b32:	f7ff fb2b 	bl	218c <__smakebuf_r>
    2b36:	2301      	movs	r3, #1
    2b38:	89a2      	ldrh	r2, [r4, #12]
    2b3a:	4013      	ands	r3, r2
    2b3c:	d005      	beq.n	2b4a <__swsetup_r+0xba>
    2b3e:	2300      	movs	r3, #0
    2b40:	60a3      	str	r3, [r4, #8]
    2b42:	6963      	ldr	r3, [r4, #20]
    2b44:	425b      	negs	r3, r3
    2b46:	61a3      	str	r3, [r4, #24]
    2b48:	e003      	b.n	2b52 <__swsetup_r+0xc2>
    2b4a:	0792      	lsls	r2, r2, #30
    2b4c:	d400      	bmi.n	2b50 <__swsetup_r+0xc0>
    2b4e:	6963      	ldr	r3, [r4, #20]
    2b50:	60a3      	str	r3, [r4, #8]
    2b52:	2000      	movs	r0, #0
    2b54:	6923      	ldr	r3, [r4, #16]
    2b56:	4283      	cmp	r3, r0
    2b58:	d107      	bne.n	2b6a <__swsetup_r+0xda>
    2b5a:	220c      	movs	r2, #12
    2b5c:	5ea3      	ldrsh	r3, [r4, r2]
    2b5e:	061a      	lsls	r2, r3, #24
    2b60:	d503      	bpl.n	2b6a <__swsetup_r+0xda>
    2b62:	2240      	movs	r2, #64	; 0x40
    2b64:	4313      	orrs	r3, r2
    2b66:	81a3      	strh	r3, [r4, #12]
    2b68:	3801      	subs	r0, #1
    2b6a:	bd70      	pop	{r4, r5, r6, pc}
    2b6c:	2000006c 	.word	0x2000006c
    2b70:	00002cd8 	.word	0x00002cd8
    2b74:	00002cf8 	.word	0x00002cf8
    2b78:	00002d18 	.word	0x00002d18

00002b7c <_close_r>:
    2b7c:	2300      	movs	r3, #0
    2b7e:	b570      	push	{r4, r5, r6, lr}
    2b80:	4c06      	ldr	r4, [pc, #24]	; (2b9c <_close_r+0x20>)
    2b82:	0005      	movs	r5, r0
    2b84:	0008      	movs	r0, r1
    2b86:	6023      	str	r3, [r4, #0]
    2b88:	f7fe fe02 	bl	1790 <_close>
    2b8c:	1c43      	adds	r3, r0, #1
    2b8e:	d103      	bne.n	2b98 <_close_r+0x1c>
    2b90:	6823      	ldr	r3, [r4, #0]
    2b92:	2b00      	cmp	r3, #0
    2b94:	d000      	beq.n	2b98 <_close_r+0x1c>
    2b96:	602b      	str	r3, [r5, #0]
    2b98:	bd70      	pop	{r4, r5, r6, pc}
    2b9a:	46c0      	nop			; (mov r8, r8)
    2b9c:	20000184 	.word	0x20000184

00002ba0 <_fstat_r>:
    2ba0:	2300      	movs	r3, #0
    2ba2:	b570      	push	{r4, r5, r6, lr}
    2ba4:	4c06      	ldr	r4, [pc, #24]	; (2bc0 <_fstat_r+0x20>)
    2ba6:	0005      	movs	r5, r0
    2ba8:	0008      	movs	r0, r1
    2baa:	0011      	movs	r1, r2
    2bac:	6023      	str	r3, [r4, #0]
    2bae:	f7fe fdf3 	bl	1798 <_fstat>
    2bb2:	1c43      	adds	r3, r0, #1
    2bb4:	d103      	bne.n	2bbe <_fstat_r+0x1e>
    2bb6:	6823      	ldr	r3, [r4, #0]
    2bb8:	2b00      	cmp	r3, #0
    2bba:	d000      	beq.n	2bbe <_fstat_r+0x1e>
    2bbc:	602b      	str	r3, [r5, #0]
    2bbe:	bd70      	pop	{r4, r5, r6, pc}
    2bc0:	20000184 	.word	0x20000184

00002bc4 <_isatty_r>:
    2bc4:	2300      	movs	r3, #0
    2bc6:	b570      	push	{r4, r5, r6, lr}
    2bc8:	4c06      	ldr	r4, [pc, #24]	; (2be4 <_isatty_r+0x20>)
    2bca:	0005      	movs	r5, r0
    2bcc:	0008      	movs	r0, r1
    2bce:	6023      	str	r3, [r4, #0]
    2bd0:	f7fe fde8 	bl	17a4 <_isatty>
    2bd4:	1c43      	adds	r3, r0, #1
    2bd6:	d103      	bne.n	2be0 <_isatty_r+0x1c>
    2bd8:	6823      	ldr	r3, [r4, #0]
    2bda:	2b00      	cmp	r3, #0
    2bdc:	d000      	beq.n	2be0 <_isatty_r+0x1c>
    2bde:	602b      	str	r3, [r5, #0]
    2be0:	bd70      	pop	{r4, r5, r6, pc}
    2be2:	46c0      	nop			; (mov r8, r8)
    2be4:	20000184 	.word	0x20000184

00002be8 <_lseek_r>:
    2be8:	b570      	push	{r4, r5, r6, lr}
    2bea:	0005      	movs	r5, r0
    2bec:	0008      	movs	r0, r1
    2bee:	0011      	movs	r1, r2
    2bf0:	2200      	movs	r2, #0
    2bf2:	4c06      	ldr	r4, [pc, #24]	; (2c0c <_lseek_r+0x24>)
    2bf4:	6022      	str	r2, [r4, #0]
    2bf6:	001a      	movs	r2, r3
    2bf8:	f7fe fdd6 	bl	17a8 <_lseek>
    2bfc:	1c43      	adds	r3, r0, #1
    2bfe:	d103      	bne.n	2c08 <_lseek_r+0x20>
    2c00:	6823      	ldr	r3, [r4, #0]
    2c02:	2b00      	cmp	r3, #0
    2c04:	d000      	beq.n	2c08 <_lseek_r+0x20>
    2c06:	602b      	str	r3, [r5, #0]
    2c08:	bd70      	pop	{r4, r5, r6, pc}
    2c0a:	46c0      	nop			; (mov r8, r8)
    2c0c:	20000184 	.word	0x20000184

00002c10 <memchr>:
    2c10:	b2c9      	uxtb	r1, r1
    2c12:	1882      	adds	r2, r0, r2
    2c14:	4290      	cmp	r0, r2
    2c16:	d004      	beq.n	2c22 <memchr+0x12>
    2c18:	7803      	ldrb	r3, [r0, #0]
    2c1a:	428b      	cmp	r3, r1
    2c1c:	d002      	beq.n	2c24 <memchr+0x14>
    2c1e:	3001      	adds	r0, #1
    2c20:	e7f8      	b.n	2c14 <memchr+0x4>
    2c22:	2000      	movs	r0, #0
    2c24:	4770      	bx	lr
	...

00002c28 <_read_r>:
    2c28:	b570      	push	{r4, r5, r6, lr}
    2c2a:	0005      	movs	r5, r0
    2c2c:	0008      	movs	r0, r1
    2c2e:	0011      	movs	r1, r2
    2c30:	2200      	movs	r2, #0
    2c32:	4c06      	ldr	r4, [pc, #24]	; (2c4c <_read_r+0x24>)
    2c34:	6022      	str	r2, [r4, #0]
    2c36:	001a      	movs	r2, r3
    2c38:	f7fd faa2 	bl	180 <_read>
    2c3c:	1c43      	adds	r3, r0, #1
    2c3e:	d103      	bne.n	2c48 <_read_r+0x20>
    2c40:	6823      	ldr	r3, [r4, #0]
    2c42:	2b00      	cmp	r3, #0
    2c44:	d000      	beq.n	2c48 <_read_r+0x20>
    2c46:	602b      	str	r3, [r5, #0]
    2c48:	bd70      	pop	{r4, r5, r6, pc}
    2c4a:	46c0      	nop			; (mov r8, r8)
    2c4c:	20000184 	.word	0x20000184
    2c50:	42000800 	.word	0x42000800
    2c54:	42000c00 	.word	0x42000c00
    2c58:	42001000 	.word	0x42001000
    2c5c:	42001400 	.word	0x42001400
    2c60:	42001800 	.word	0x42001800
    2c64:	42001c00 	.word	0x42001c00
    2c68:	0c0b0a09 	.word	0x0c0b0a09
    2c6c:	00000e0d 	.word	0x00000e0d
    2c70:	000010e6 	.word	0x000010e6
    2c74:	000010e2 	.word	0x000010e2
    2c78:	000010e2 	.word	0x000010e2
    2c7c:	00001140 	.word	0x00001140
    2c80:	00001140 	.word	0x00001140
    2c84:	000010fa 	.word	0x000010fa
    2c88:	000010ec 	.word	0x000010ec
    2c8c:	00001100 	.word	0x00001100
    2c90:	0000112e 	.word	0x0000112e
    2c94:	000011cc 	.word	0x000011cc
    2c98:	000011ac 	.word	0x000011ac
    2c9c:	000011ac 	.word	0x000011ac
    2ca0:	00001238 	.word	0x00001238
    2ca4:	000011be 	.word	0x000011be
    2ca8:	000011da 	.word	0x000011da
    2cac:	000011b0 	.word	0x000011b0
    2cb0:	000011e8 	.word	0x000011e8
    2cb4:	00001228 	.word	0x00001228

00002cb8 <buffer_expect>:
    2cb8:	03020100 07060504 0b0a0908 0f0e0d0c     ................
    2cc8:	13121110 00006425 00000043              ....%d..C...

00002cd4 <_global_impure_ptr>:
    2cd4:	2000000c                                ... 

00002cd8 <__sf_fake_stdin>:
	...

00002cf8 <__sf_fake_stdout>:
	...

00002d18 <__sf_fake_stderr>:
	...
    2d38:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    2d48:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    2d58:	31300046 35343332 39383736 64636261     F.0123456789abcd
    2d68:	00006665                                ef..

00002d6c <_init>:
    2d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d6e:	46c0      	nop			; (mov r8, r8)
    2d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2d72:	bc08      	pop	{r3}
    2d74:	469e      	mov	lr, r3
    2d76:	4770      	bx	lr

00002d78 <__init_array_start>:
    2d78:	000000dd 	.word	0x000000dd

00002d7c <_fini>:
    2d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d7e:	46c0      	nop			; (mov r8, r8)
    2d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2d82:	bc08      	pop	{r3}
    2d84:	469e      	mov	lr, r3
    2d86:	4770      	bx	lr

00002d88 <__fini_array_start>:
    2d88:	000000b5 	.word	0x000000b5
