1.	ASF Wizard에 추가 할 목록

Generic board support (driver)
Delay routines (service) : systick
EVINT - External Interrupt (driver)
EXTINT - External Interrupt (driver)
PORT - GPIO Pin Control (driver)
SERCOM SPI - Serial Peripheral Interface (driver) : callback
SERCOM USART -Serial Communications (driver) : callback
SYSTEM - Core System Driver (driver)
TC - Timer Counter (driver) : callback
TCC - Timer Counter for Control Applications(driver) : callback
Standard serial I/O (stdio) (driver)

2.	.h 파일의 변경사항 

<config_spi.h>

/**
 * \file
 *
 * \brief SAM SPI configuration
 *
 * Copyright (C) 2013-2015 Atmel Corporation. All rights reserved.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * 3. The name of Atmel may not be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * 4. This software may only be redistributed and used in connection with an
 *    Atmel microcontroller product.
 *
 * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
 * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * \asf_license_stop
 *
 */
/*
 * Support and FAQ: visit <a href="http://www.atmel.com/design-support/">Atmel Support</a>
 */


#ifndef CONF_SPI_H_INCLUDED
#  define CONF_SPI_H_INCLUDED

#  define CONF_SPI_MASTER_ENABLE     true
#  define CONF_SPI_SLAVE_ENABLE      false
//[definition_master]
#define CONF_MASTER_SPI_MODULE  EXT1_SPI_MODULE
#define CONF_MASTER_SS_PIN      EXT1_PIN_SPI_SS_0
#define CONF_MASTER_MUX_SETTING EXT1_SPI_SERCOM_MUX_SETTING
#define CONF_MASTER_PINMUX_PAD0 EXT1_SPI_SERCOM_PINMUX_PAD0
#define CONF_MASTER_PINMUX_PAD1 PINMUX_UNUSED
#define CONF_MASTER_PINMUX_PAD2 EXT1_SPI_SERCOM_PINMUX_PAD2
#define CONF_MASTER_PINMUX_PAD3 EXT1_SPI_SERCOM_PINMUX_PAD3
//[definition_master]

#endif /* CONF_SPI_H_INCLUDED */



3.	전체 코드



#include <asf.h>

//spi------------------------------------------------------------------------------------------------------
#define BUF_LENGTH 5
#define SLAVE_SELECT_PIN CONF_MASTER_SS_PIN

//static uint8_t wr_buffer[BUF_LENGTH] = {
	//0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
	//0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13
//};
static uint8_t wr_buffer[BUF_LENGTH] = {
	0x00, 0x01, 0x02, 0x03, 0x04
};

static uint8_t infrared_buffer[BUF_LENGTH] = {0x00};

static uint8_t rd_buffer[BUF_LENGTH];

struct spi_module spi_master_instance;
struct spi_slave_inst slave;

void configure_spi_master(void);

//usart----------------------------------------------------------------------------------
struct usart_module usart_instance;

void configure_usart(void);

//infrared sensor-----------------------------------------------------------------------------
#define GPIO_PIN_INFRARED1 PIN_PA08
#define GPIO_PIN_INFRARED2 PIN_PA14
#define GPIO_PIN_INFRARED3 PIN_PA22

void line_sensor_init(void);
bool get_infrared_signal(const uint8_t);

//main----------------------------------------------------------------------------------------
int main(void)
{
	//infrared signals
	bool infrared_signal1, infrared_signal2, infrared_signal3;

	
	system_init();
	delay_init();
	
	configure_spi_master();

	configure_usart();

	printf("Hi this is MASTER\n");
	
	while (true) {
		if(!port_pin_get_input_level(BUTTON_0_PIN)) {
			spi_select_slave(&spi_master_instance, &slave, true);

			printf("Before write\n");
			line_sensor_init();

			for(int i = 0; i < BUF_LENGTH; i++)
				printf("%d", infrared_buffer[i]);
			printf("\n");
			
			spi_write_buffer_wait(&spi_master_instance, infrared_buffer, BUF_LENGTH);
			printf("After write\n");
			spi_select_slave(&spi_master_instance, &slave, false);
			port_pin_set_output_level(LED_0_PIN, LED0_ACTIVE);
		}
	}
	
}

//spi---------------------------------------------------------------------------------

void configure_spi_master(void)
{
	struct spi_config config_spi_master;
	struct spi_slave_inst_config slave_dev_config;

	spi_slave_inst_get_config_defaults(&slave_dev_config);

	slave_dev_config.ss_pin = SLAVE_SELECT_PIN;

	spi_attach_slave(&slave, &slave_dev_config);
	spi_get_config_defaults(&config_spi_master);

	config_spi_master.mux_setting = CONF_MASTER_MUX_SETTING;

	config_spi_master.pinmux_pad0 = CONF_MASTER_PINMUX_PAD0;
	config_spi_master.pinmux_pad1 = CONF_MASTER_PINMUX_PAD1;
	config_spi_master.pinmux_pad2 = CONF_MASTER_PINMUX_PAD2;
	config_spi_master.pinmux_pad3 = CONF_MASTER_PINMUX_PAD3;

	spi_init(&spi_master_instance, CONF_MASTER_SPI_MODULE, &config_spi_master);

	spi_enable(&spi_master_instance);
}

//usart---------------------------------------------------------------------------
void configure_usart(void)
{
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);
	config_usart.baudrate = 9600; //14400,19200, 115200
	config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
	
	while(usart_init(&usart_instance, EDBG_CDC_MODULE, &config_usart) != STATUS_OK)
	{}
	usart_enable(&usart_instance);
	stdio_serial_init(&usart_instance, EDBG_CDC_MODULE, &config_usart );
}

//infrared sensor-----------------------------------------------------------------
bool get_infrared_signal(const uint8_t pin_num)
{
	return port_pin_get_input_level(pin_num) == HIGH;
}

void line_sensor_init(void)
{
	struct port_config signal_pin1;
	port_get_config_defaults(&signal_pin1);
	
	signal_pin1.direction = PORT_PIN_DIR_INPUT;
	signal_pin1.input_pull = PORT_PIN_PULL_DOWN;
	
	port_pin_set_config(PIN_PA13, &signal_pin1);
	
	struct port_config signal_pin2;
	port_get_config_defaults(&signal_pin2);
	
	signal_pin2.direction = PORT_PIN_DIR_INPUT;
	signal_pin2.input_pull = PORT_PIN_PULL_DOWN;
	
	port_pin_set_config(PIN_PA14, &signal_pin2);
	
	struct port_config signal_pin3;
	port_get_config_defaults(&signal_pin3);
	
	signal_pin3.direction = PORT_PIN_DIR_INPUT;
	signal_pin3.input_pull = PORT_PIN_PULL_DOWN;
	
	port_pin_set_config(PIN_PA15, &signal_pin3);
	
	struct port_config signal_pin4;
	port_get_config_defaults(&signal_pin4);
	
	signal_pin4.direction = PORT_PIN_DIR_INPUT;
	signal_pin4.input_pull = PORT_PIN_PULL_DOWN;
	
	port_pin_set_config(PIN_PA22, &signal_pin4);
	
	struct port_config signal_pin5;
	port_get_config_defaults(&signal_pin5);
	
	signal_pin5.direction = PORT_PIN_DIR_INPUT;
	signal_pin5.input_pull = PORT_PIN_PULL_DOWN;
	
	port_pin_set_config(PIN_PA23, &signal_pin5);
		
	//infrared_buffer[0] = port_pin_get_input_level(PIN_PA13),
	//infrared_buffer[0] = port_pin_get_input_level(PIN_PA14),
	//infrared_buffer[0] = port_pin_get_input_level(PIN_PA15),
	//infrared_buffer[0] = port_pin_get_input_level(PIN_PA23),
	//infrared_buffer[0] = port_pin_get_input_level(PIN_PA28)
	//
	infrared_buffer[0] = 0;
	infrared_buffer[1] = 1;
	infrared_buffer[2] = 0;
	infrared_buffer[3] = 1;
	infrared_buffer[4] = 1;
	
	//printf("%d, %d, %d, %d, %d\n",
	//port_pin_get_input_level(PIN_PA13),
	//port_pin_get_input_level(PIN_PA14),
	//port_pin_get_input_level(PIN_PA15),
	//port_pin_get_input_level(PIN_PA23),
	//port_pin_get_input_level(PIN_PA28));
}

