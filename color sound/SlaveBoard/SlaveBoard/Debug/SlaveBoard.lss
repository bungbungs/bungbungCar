
SlaveBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007420  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000a8  20000000  00007420  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000298  200000a8  000074c8  000200a8  2**2
                  ALLOC
  3 .stack        00002000  20000340  00007760  000200a8  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
  6 .debug_info   0003e6ba  00000000  00000000  00020129  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004cd7  00000000  00000000  0005e7e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00007907  00000000  00000000  000634ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000007b8  00000000  00000000  0006adc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000009d0  00000000  00000000  0006b579  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001cc66  00000000  00000000  0006bf49  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00013497  00000000  00000000  00088baf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00087adf  00000000  00000000  0009c046  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000020a0  00000000  00000000  00123b28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002340 	.word	0x20002340
       4:	00002381 	.word	0x00002381
       8:	0000237d 	.word	0x0000237d
       c:	0000237d 	.word	0x0000237d
	...
      2c:	0000237d 	.word	0x0000237d
	...
      38:	0000237d 	.word	0x0000237d
      3c:	0000237d 	.word	0x0000237d
      40:	0000237d 	.word	0x0000237d
      44:	0000237d 	.word	0x0000237d
      48:	0000237d 	.word	0x0000237d
      4c:	0000237d 	.word	0x0000237d
      50:	000007f9 	.word	0x000007f9
      54:	0000237d 	.word	0x0000237d
      58:	0000237d 	.word	0x0000237d
      5c:	0000237d 	.word	0x0000237d
      60:	0000237d 	.word	0x0000237d
      64:	00001c75 	.word	0x00001c75
      68:	00001c85 	.word	0x00001c85
      6c:	00001c95 	.word	0x00001c95
      70:	00001ca5 	.word	0x00001ca5
      74:	00001cb5 	.word	0x00001cb5
      78:	00001cc5 	.word	0x00001cc5
      7c:	000012a9 	.word	0x000012a9
      80:	000012b9 	.word	0x000012b9
      84:	000012c9 	.word	0x000012c9
      88:	00001335 	.word	0x00001335
      8c:	00001345 	.word	0x00001345
      90:	00001355 	.word	0x00001355
	...
      9c:	0000237d 	.word	0x0000237d
      a0:	0000237d 	.word	0x0000237d
      a4:	00000000 	.word	0x00000000
      a8:	0000237d 	.word	0x0000237d
	...

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200000a8 	.word	0x200000a8
      d4:	00000000 	.word	0x00000000
      d8:	00007420 	.word	0x00007420

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200000ac 	.word	0x200000ac
     108:	00007420 	.word	0x00007420
     10c:	00007420 	.word	0x00007420
     110:	00000000 	.word	0x00000000

00000114 <_i2c_slave_wait_for_sync>:

	/* Release line */
	i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_CMD(0x02);

	return STATUS_OK;
}
     114:	6801      	ldr	r1, [r0, #0]
     116:	2203      	movs	r2, #3

	/* Return sync status */
#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CS_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CS_SYNCBUSY_MASK);
     118:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_slave_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_slave_is_syncing(module)) {
     11a:	421a      	tst	r2, r3
     11c:	d1fc      	bne.n	118 <_i2c_slave_wait_for_sync+0x4>
		/* Wait for I<SUP>2</SUP>C module to sync */
	}
}
     11e:	4770      	bx	lr

00000120 <_i2c_slave_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
static enum status_code _i2c_slave_wait_for_bus(
		struct i2c_slave_module *const module)
{
     120:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     122:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply */
	uint16_t timeout_counter = 0;
     124:	2300      	movs	r3, #0
	while ((!(i2c_module->INTFLAG.reg & SERCOM_I2CS_INTFLAG_DRDY)) &&
     126:	2404      	movs	r4, #4
     128:	2501      	movs	r5, #1
			(!(i2c_module->INTFLAG.reg & SERCOM_I2CS_INTFLAG_PREC)) &&
     12a:	2602      	movs	r6, #2

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply */
	uint16_t timeout_counter = 0;
	while ((!(i2c_module->INTFLAG.reg & SERCOM_I2CS_INTFLAG_DRDY)) &&
     12c:	e004      	b.n	138 <_i2c_slave_wait_for_bus+0x18>
			(!(i2c_module->INTFLAG.reg & SERCOM_I2CS_INTFLAG_PREC)) &&
			(!(i2c_module->INTFLAG.reg & SERCOM_I2CS_INTFLAG_AMATCH))) {

		/* Check timeout condition */
		if (++timeout_counter >= module->buffer_timeout) {
     12e:	3301      	adds	r3, #1
     130:	b29b      	uxth	r3, r3
     132:	88c1      	ldrh	r1, [r0, #6]
     134:	4299      	cmp	r1, r3
     136:	d90a      	bls.n	14e <_i2c_slave_wait_for_bus+0x2e>

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply */
	uint16_t timeout_counter = 0;
	while ((!(i2c_module->INTFLAG.reg & SERCOM_I2CS_INTFLAG_DRDY)) &&
     138:	7e11      	ldrb	r1, [r2, #24]
     13a:	4221      	tst	r1, r4
     13c:	d109      	bne.n	152 <_i2c_slave_wait_for_bus+0x32>
			(!(i2c_module->INTFLAG.reg & SERCOM_I2CS_INTFLAG_PREC)) &&
     13e:	7e11      	ldrb	r1, [r2, #24]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply */
	uint16_t timeout_counter = 0;
	while ((!(i2c_module->INTFLAG.reg & SERCOM_I2CS_INTFLAG_DRDY)) &&
     140:	4229      	tst	r1, r5
     142:	d108      	bne.n	156 <_i2c_slave_wait_for_bus+0x36>
			(!(i2c_module->INTFLAG.reg & SERCOM_I2CS_INTFLAG_PREC)) &&
			(!(i2c_module->INTFLAG.reg & SERCOM_I2CS_INTFLAG_AMATCH))) {
     144:	7e11      	ldrb	r1, [r2, #24]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply */
	uint16_t timeout_counter = 0;
	while ((!(i2c_module->INTFLAG.reg & SERCOM_I2CS_INTFLAG_DRDY)) &&
			(!(i2c_module->INTFLAG.reg & SERCOM_I2CS_INTFLAG_PREC)) &&
     146:	4231      	tst	r1, r6
     148:	d0f1      	beq.n	12e <_i2c_slave_wait_for_bus+0xe>
		/* Check timeout condition */
		if (++timeout_counter >= module->buffer_timeout) {
			return STATUS_ERR_TIMEOUT;
		}
	}
	return STATUS_OK;
     14a:	2000      	movs	r0, #0
     14c:	e004      	b.n	158 <_i2c_slave_wait_for_bus+0x38>
			(!(i2c_module->INTFLAG.reg & SERCOM_I2CS_INTFLAG_PREC)) &&
			(!(i2c_module->INTFLAG.reg & SERCOM_I2CS_INTFLAG_AMATCH))) {

		/* Check timeout condition */
		if (++timeout_counter >= module->buffer_timeout) {
			return STATUS_ERR_TIMEOUT;
     14e:	2012      	movs	r0, #18
     150:	e002      	b.n	158 <_i2c_slave_wait_for_bus+0x38>
		}
	}
	return STATUS_OK;
     152:	2000      	movs	r0, #0
     154:	e000      	b.n	158 <_i2c_slave_wait_for_bus+0x38>
     156:	2000      	movs	r0, #0
}
     158:	bd70      	pop	{r4, r5, r6, pc}
     15a:	46c0      	nop			; (mov r8, r8)

0000015c <i2c_slave_init>:
 */
enum status_code i2c_slave_init(
		struct i2c_slave_module *const module,
		Sercom *const hw,
		const struct i2c_slave_config *const config)
{
     15c:	b5f0      	push	{r4, r5, r6, r7, lr}
     15e:	464f      	mov	r7, r9
     160:	4646      	mov	r6, r8
     162:	b4c0      	push	{r6, r7}
     164:	b083      	sub	sp, #12
     166:	0005      	movs	r5, r0
     168:	000c      	movs	r4, r1
     16a:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     16c:	6029      	str	r1, [r5, #0]

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);

	/* Check if module is enabled */
	if (i2c_hw->CTRLA.reg & SERCOM_I2CS_CTRLA_ENABLE) {
     16e:	680b      	ldr	r3, [r1, #0]
		return STATUS_ERR_DENIED;
     170:	201c      	movs	r0, #28
	module->hw = hw;

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);

	/* Check if module is enabled */
	if (i2c_hw->CTRLA.reg & SERCOM_I2CS_CTRLA_ENABLE) {
     172:	079b      	lsls	r3, r3, #30
     174:	d500      	bpl.n	178 <i2c_slave_init+0x1c>
     176:	e09b      	b.n	2b0 <i2c_slave_init+0x154>
		return STATUS_ERR_DENIED;
	}

	/* Check if reset is in progress */
	if (i2c_hw->CTRLA.reg & SERCOM_I2CS_CTRLA_SWRST) {
     178:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
     17a:	3817      	subs	r0, #23
	if (i2c_hw->CTRLA.reg & SERCOM_I2CS_CTRLA_ENABLE) {
		return STATUS_ERR_DENIED;
	}

	/* Check if reset is in progress */
	if (i2c_hw->CTRLA.reg & SERCOM_I2CS_CTRLA_SWRST) {
     17c:	07db      	lsls	r3, r3, #31
     17e:	d500      	bpl.n	182 <i2c_slave_init+0x26>
     180:	e096      	b.n	2b0 <i2c_slave_init+0x154>
		return STATUS_BUSY;
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     182:	0008      	movs	r0, r1
     184:	4b4d      	ldr	r3, [pc, #308]	; (2bc <i2c_slave_init+0x160>)
     186:	4699      	mov	r9, r3
     188:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     18a:	4a4d      	ldr	r2, [pc, #308]	; (2c0 <i2c_slave_init+0x164>)
     18c:	6a13      	ldr	r3, [r2, #32]
     18e:	1c81      	adds	r1, r0, #2
     190:	2701      	movs	r7, #1
     192:	46b8      	mov	r8, r7
     194:	408f      	lsls	r7, r1
     196:	433b      	orrs	r3, r7
     198:	6213      	str	r3, [r2, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     19a:	a901      	add	r1, sp, #4
     19c:	7e73      	ldrb	r3, [r6, #25]
     19e:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     1a0:	3014      	adds	r0, #20
     1a2:	b2c3      	uxtb	r3, r0
     1a4:	001f      	movs	r7, r3
     1a6:	0018      	movs	r0, r3
     1a8:	4b46      	ldr	r3, [pc, #280]	; (2c4 <i2c_slave_init+0x168>)
     1aa:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     1ac:	0038      	movs	r0, r7
     1ae:	4b46      	ldr	r3, [pc, #280]	; (2c8 <i2c_slave_init+0x16c>)
     1b0:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     1b2:	7e70      	ldrb	r0, [r6, #25]
     1b4:	2100      	movs	r1, #0
     1b6:	4b45      	ldr	r3, [pc, #276]	; (2cc <i2c_slave_init+0x170>)
     1b8:	4798      	blx	r3

#if I2C_SLAVE_CALLBACK_MODE == true
	/* Get sercom instance index */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     1ba:	6828      	ldr	r0, [r5, #0]
     1bc:	47c8      	blx	r9
     1be:	0007      	movs	r7, r0

	/* Save software module in interrupt handler */
	_sercom_set_handler(instance_index, _i2c_slave_interrupt_handler);
     1c0:	4943      	ldr	r1, [pc, #268]	; (2d0 <i2c_slave_init+0x174>)
     1c2:	4b44      	ldr	r3, [pc, #272]	; (2d4 <i2c_slave_init+0x178>)
     1c4:	4798      	blx	r3

	/* Save software module */
	_sercom_instances[instance_index] = module;
     1c6:	00bf      	lsls	r7, r7, #2
     1c8:	4b43      	ldr	r3, [pc, #268]	; (2d8 <i2c_slave_init+0x17c>)
     1ca:	50fd      	str	r5, [r7, r3]

	/* Initialize values in module */
	module->registered_callback = 0;
     1cc:	2300      	movs	r3, #0
     1ce:	2224      	movs	r2, #36	; 0x24
     1d0:	54ab      	strb	r3, [r5, r2]
	module->enabled_callback = 0;
     1d2:	3201      	adds	r2, #1
     1d4:	54ab      	strb	r3, [r5, r2]
	module->buffer_length = 0;
     1d6:	84eb      	strh	r3, [r5, #38]	; 0x26
	module->nack_on_address = config->enable_nack_on_address;
     1d8:	7e33      	ldrb	r3, [r6, #24]
     1da:	726b      	strb	r3, [r5, #9]
#endif

	/* Set SERCOM module to operate in I2C slave mode */
	i2c_hw->CTRLA.reg = SERCOM_I2CS_CTRLA_MODE(0x4);
     1dc:	2310      	movs	r3, #16
     1de:	6023      	str	r3, [r4, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(config);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     1e0:	682f      	ldr	r7, [r5, #0]
	Sercom *const sercom_hw = module->hw;

	module->buffer_timeout = config->buffer_timeout;
     1e2:	8933      	ldrh	r3, [r6, #8]
     1e4:	80eb      	strh	r3, [r5, #6]
	module->ten_bit_address = config->ten_bit_address;
     1e6:	7c33      	ldrb	r3, [r6, #16]
     1e8:	722b      	strb	r3, [r5, #8]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     1ea:	2380      	movs	r3, #128	; 0x80
     1ec:	466a      	mov	r2, sp
     1ee:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     1f0:	2300      	movs	r3, #0
     1f2:	7053      	strb	r3, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     1f4:	466b      	mov	r3, sp
     1f6:	4642      	mov	r2, r8
     1f8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     1fa:	2300      	movs	r3, #0
     1fc:	466a      	mov	r2, sp
     1fe:	70d3      	strb	r3, [r2, #3]

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);

	uint32_t pad0 = config->pinmux_pad0;
     200:	69f0      	ldr	r0, [r6, #28]
	uint32_t pad1 = config->pinmux_pad1;
     202:	6a34      	ldr	r4, [r6, #32]

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
     204:	2800      	cmp	r0, #0
     206:	d103      	bne.n	210 <i2c_slave_init+0xb4>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     208:	2100      	movs	r1, #0
     20a:	0038      	movs	r0, r7
     20c:	4b33      	ldr	r3, [pc, #204]	; (2dc <i2c_slave_init+0x180>)
     20e:	4798      	blx	r3
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
     210:	466b      	mov	r3, sp
     212:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     214:	2302      	movs	r3, #2
     216:	466a      	mov	r2, sp
     218:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     21a:	0c00      	lsrs	r0, r0, #16
     21c:	b2c0      	uxtb	r0, r0
     21e:	4669      	mov	r1, sp
     220:	4b2f      	ldr	r3, [pc, #188]	; (2e0 <i2c_slave_init+0x184>)
     222:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
     224:	2c00      	cmp	r4, #0
     226:	d104      	bne.n	232 <i2c_slave_init+0xd6>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     228:	2101      	movs	r1, #1
     22a:	0038      	movs	r0, r7
     22c:	4b2b      	ldr	r3, [pc, #172]	; (2dc <i2c_slave_init+0x180>)
     22e:	4798      	blx	r3
     230:	0004      	movs	r4, r0
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
     232:	466b      	mov	r3, sp
     234:	701c      	strb	r4, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     236:	2302      	movs	r3, #2
     238:	466a      	mov	r2, sp
     23a:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     23c:	0c24      	lsrs	r4, r4, #16
     23e:	b2e0      	uxtb	r0, r4
     240:	4669      	mov	r1, sp
     242:	4b27      	ldr	r3, [pc, #156]	; (2e0 <i2c_slave_init+0x184>)
     244:	4798      	blx	r3

	/* Prepare config to write to register CTRLA */
	if (config->run_in_standby || system_is_debugger_present()) {
     246:	7eb2      	ldrb	r2, [r6, #26]
		tmp_ctrla = SERCOM_I2CS_CTRLA_RUNSTDBY;
     248:	2380      	movs	r3, #128	; 0x80
	pin_conf.mux_position = pad1 & 0xFFFF;
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);

	/* Prepare config to write to register CTRLA */
	if (config->run_in_standby || system_is_debugger_present()) {
     24a:	2a00      	cmp	r2, #0
     24c:	d104      	bne.n	258 <i2c_slave_init+0xfc>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     24e:	4b25      	ldr	r3, [pc, #148]	; (2e4 <i2c_slave_init+0x188>)
     250:	789b      	ldrb	r3, [r3, #2]
     252:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CS_CTRLA_RUNSTDBY;
     254:	0fdb      	lsrs	r3, r3, #31
     256:	01db      	lsls	r3, r3, #7
	} else {
		tmp_ctrla = 0;
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_SLAVE_SPEED_HIGH_SPEED)) {
     258:	2225      	movs	r2, #37	; 0x25
     25a:	5cb2      	ldrb	r2, [r6, r2]
     25c:	2a00      	cmp	r2, #0
     25e:	d104      	bne.n	26a <i2c_slave_init+0x10e>
     260:	2280      	movs	r2, #128	; 0x80
     262:	0492      	lsls	r2, r2, #18
     264:	6971      	ldr	r1, [r6, #20]
     266:	4291      	cmp	r1, r2
     268:	d102      	bne.n	270 <i2c_slave_init+0x114>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     26a:	2280      	movs	r2, #128	; 0x80
     26c:	0512      	lsls	r2, r2, #20
     26e:	4313      	orrs	r3, r2
	tmp_ctrla |= ((uint32_t)config->sda_hold_time |
			config->transfer_speed |
			(config->scl_low_timeout << SERCOM_I2CS_CTRLA_LOWTOUTEN_Pos) |
			(config->slave_scl_low_extend_timeout << SERCOM_I2CS_CTRLA_SEXTTOEN_Pos));

	i2c_hw->CTRLA.reg |= tmp_ctrla;
     270:	683a      	ldr	r2, [r7, #0]
     272:	6871      	ldr	r1, [r6, #4]
     274:	6970      	ldr	r0, [r6, #20]
     276:	4301      	orrs	r1, r0
     278:	430a      	orrs	r2, r1
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
	}
	
	tmp_ctrla |= ((uint32_t)config->sda_hold_time |
			config->transfer_speed |
			(config->scl_low_timeout << SERCOM_I2CS_CTRLA_LOWTOUTEN_Pos) |
     27a:	2124      	movs	r1, #36	; 0x24
			(config->slave_scl_low_extend_timeout << SERCOM_I2CS_CTRLA_SEXTTOEN_Pos));

	i2c_hw->CTRLA.reg |= tmp_ctrla;
     27c:	5c71      	ldrb	r1, [r6, r1]
     27e:	0789      	lsls	r1, r1, #30
     280:	430a      	orrs	r2, r1
	}
	
	tmp_ctrla |= ((uint32_t)config->sda_hold_time |
			config->transfer_speed |
			(config->scl_low_timeout << SERCOM_I2CS_CTRLA_LOWTOUTEN_Pos) |
			(config->slave_scl_low_extend_timeout << SERCOM_I2CS_CTRLA_SEXTTOEN_Pos));
     282:	2126      	movs	r1, #38	; 0x26

	i2c_hw->CTRLA.reg |= tmp_ctrla;
     284:	5c71      	ldrb	r1, [r6, r1]
     286:	05c9      	lsls	r1, r1, #23
     288:	430a      	orrs	r2, r1
     28a:	4313      	orrs	r3, r2
     28c:	603b      	str	r3, [r7, #0]

	/* Set CTRLB configuration */
	i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_SMEN | config->address_mode;
     28e:	8973      	ldrh	r3, [r6, #10]
     290:	2280      	movs	r2, #128	; 0x80
     292:	0052      	lsls	r2, r2, #1
     294:	4313      	orrs	r3, r2
     296:	607b      	str	r3, [r7, #4]

	i2c_hw->ADDR.reg = config->address << SERCOM_I2CS_ADDR_ADDR_Pos |
     298:	89b3      	ldrh	r3, [r6, #12]
     29a:	005a      	lsls	r2, r3, #1
     29c:	89f3      	ldrh	r3, [r6, #14]
     29e:	045b      	lsls	r3, r3, #17
     2a0:	4313      	orrs	r3, r2
     2a2:	7c72      	ldrb	r2, [r6, #17]
     2a4:	4313      	orrs	r3, r2
     2a6:	7c32      	ldrb	r2, [r6, #16]
     2a8:	03d2      	lsls	r2, r2, #15
     2aa:	4313      	orrs	r3, r2
     2ac:	627b      	str	r3, [r7, #36]	; 0x24

	/* Set SERCOM module to operate in I2C slave mode */
	i2c_hw->CTRLA.reg = SERCOM_I2CS_CTRLA_MODE(0x4);

	/* Set config and return status */
	return _i2c_slave_set_config(module, config);
     2ae:	2000      	movs	r0, #0
}
     2b0:	b003      	add	sp, #12
     2b2:	bc0c      	pop	{r2, r3}
     2b4:	4690      	mov	r8, r2
     2b6:	4699      	mov	r9, r3
     2b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     2ba:	46c0      	nop			; (mov r8, r8)
     2bc:	00000ca9 	.word	0x00000ca9
     2c0:	40000400 	.word	0x40000400
     2c4:	00002225 	.word	0x00002225
     2c8:	00002199 	.word	0x00002199
     2cc:	00000ad5 	.word	0x00000ad5
     2d0:	000003e5 	.word	0x000003e5
     2d4:	00001c0d 	.word	0x00001c0d
     2d8:	200002f0 	.word	0x200002f0
     2dc:	00000b21 	.word	0x00000b21
     2e0:	0000231d 	.word	0x0000231d
     2e4:	41002000 	.word	0x41002000

000002e8 <i2c_slave_read_packet_wait>:
 * \retval STATUS_ERR_ERR_OVERFLOW  Last byte received overflows buffer
 */
enum status_code i2c_slave_read_packet_wait(
		struct i2c_slave_module *const module,
		struct i2c_slave_packet *const packet)
{
     2e8:	b5f0      	push	{r4, r5, r6, r7, lr}
     2ea:	465f      	mov	r7, fp
     2ec:	4656      	mov	r6, sl
     2ee:	4645      	mov	r5, r8
     2f0:	b4e0      	push	{r5, r6, r7}
     2f2:	0005      	movs	r5, r0
     2f4:	000e      	movs	r6, r1
	Assert(module->hw);
	Assert(packet);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);

	uint16_t length = packet->data_length;
     2f6:	880c      	ldrh	r4, [r1, #0]

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     2f8:	2017      	movs	r0, #23

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);

	uint16_t length = packet->data_length;

	if (length == 0) {
     2fa:	2c00      	cmp	r4, #0
     2fc:	d067      	beq.n	3ce <i2c_slave_read_packet_wait+0xe6>
		return STATUS_ERR_INVALID_ARG;
	}

#if I2C_SLAVE_CALLBACK_MODE == true
	/* Check if the module is busy with a job or AMATCH is enabled */
	if (module->buffer_remaining > 0 ||
     2fe:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
			(i2c_hw->INTENSET.reg & SERCOM_I2CS_INTFLAG_AMATCH)) {
		return STATUS_BUSY;
     300:	3812      	subs	r0, #18
		return STATUS_ERR_INVALID_ARG;
	}

#if I2C_SLAVE_CALLBACK_MODE == true
	/* Check if the module is busy with a job or AMATCH is enabled */
	if (module->buffer_remaining > 0 ||
     302:	2b00      	cmp	r3, #0
     304:	d163      	bne.n	3ce <i2c_slave_read_packet_wait+0xe6>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     306:	682f      	ldr	r7, [r5, #0]
	}

#if I2C_SLAVE_CALLBACK_MODE == true
	/* Check if the module is busy with a job or AMATCH is enabled */
	if (module->buffer_remaining > 0 ||
			(i2c_hw->INTENSET.reg & SERCOM_I2CS_INTFLAG_AMATCH)) {
     308:	7dbb      	ldrb	r3, [r7, #22]
		return STATUS_ERR_INVALID_ARG;
	}

#if I2C_SLAVE_CALLBACK_MODE == true
	/* Check if the module is busy with a job or AMATCH is enabled */
	if (module->buffer_remaining > 0 ||
     30a:	079b      	lsls	r3, r3, #30
     30c:	d45f      	bmi.n	3ce <i2c_slave_read_packet_wait+0xe6>
#endif

	enum status_code status;

	/* Wait for master to send address packet */
	status = _i2c_slave_wait_for_bus(module);
     30e:	0028      	movs	r0, r5
     310:	4b31      	ldr	r3, [pc, #196]	; (3d8 <i2c_slave_read_packet_wait+0xf0>)
     312:	4798      	blx	r3
	if (status != STATUS_OK) {
     314:	2800      	cmp	r0, #0
     316:	d15a      	bne.n	3ce <i2c_slave_read_packet_wait+0xe6>
		/* Timeout, return */
		return status;
	}

	if (!(i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_AMATCH)) {
     318:	7e3b      	ldrb	r3, [r7, #24]
		/* Not address interrupt, something is wrong */
		return STATUS_ERR_DENIED;
     31a:	201c      	movs	r0, #28
	if (status != STATUS_OK) {
		/* Timeout, return */
		return status;
	}

	if (!(i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_AMATCH)) {
     31c:	079b      	lsls	r3, r3, #30
     31e:	d556      	bpl.n	3ce <i2c_slave_read_packet_wait+0xe6>
		/* Not address interrupt, something is wrong */
		return STATUS_ERR_DENIED;
	}

	/* Check if there was an error in the last transfer */
	if (i2c_hw->STATUS.reg & (SERCOM_I2CS_STATUS_BUSERR |
     320:	8b7a      	ldrh	r2, [r7, #26]
			SERCOM_I2CS_STATUS_COLL | SERCOM_I2CS_STATUS_LOWTOUT)) {
		return STATUS_ERR_IO;
     322:	380c      	subs	r0, #12
		/* Not address interrupt, something is wrong */
		return STATUS_ERR_DENIED;
	}

	/* Check if there was an error in the last transfer */
	if (i2c_hw->STATUS.reg & (SERCOM_I2CS_STATUS_BUSERR |
     324:	2343      	movs	r3, #67	; 0x43
     326:	421a      	tst	r2, r3
     328:	d151      	bne.n	3ce <i2c_slave_read_packet_wait+0xe6>
			SERCOM_I2CS_STATUS_COLL | SERCOM_I2CS_STATUS_LOWTOUT)) {
		return STATUS_ERR_IO;
	}
	/* Check direction */
	if ((i2c_hw->STATUS.reg & SERCOM_I2CS_STATUS_DIR)) {
     32a:	8b7b      	ldrh	r3, [r7, #26]
     32c:	071b      	lsls	r3, r3, #28
     32e:	d50b      	bpl.n	348 <i2c_slave_read_packet_wait+0x60>
		/* Read request from master, send NACK and return */
		i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_ACKACT;
     330:	687b      	ldr	r3, [r7, #4]
     332:	2280      	movs	r2, #128	; 0x80
     334:	02d2      	lsls	r2, r2, #11
     336:	4313      	orrs	r3, r2
     338:	607b      	str	r3, [r7, #4]
		i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_CMD(0x3);
     33a:	687b      	ldr	r3, [r7, #4]
     33c:	22c0      	movs	r2, #192	; 0xc0
     33e:	0292      	lsls	r2, r2, #10
     340:	4313      	orrs	r3, r2
     342:	607b      	str	r3, [r7, #4]
		return STATUS_ERR_BAD_FORMAT;
     344:	300a      	adds	r0, #10
     346:	e042      	b.n	3ce <i2c_slave_read_packet_wait+0xe6>
	}

	/* Write request from master, ACK address */
	i2c_hw->CTRLB.reg &= ~SERCOM_I2CS_CTRLB_ACKACT;
     348:	687a      	ldr	r2, [r7, #4]
     34a:	4b24      	ldr	r3, [pc, #144]	; (3dc <i2c_slave_read_packet_wait+0xf4>)
     34c:	4013      	ands	r3, r2
     34e:	607b      	str	r3, [r7, #4]
	i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_CMD(0x3);
     350:	687b      	ldr	r3, [r7, #4]
     352:	22c0      	movs	r2, #192	; 0xc0
     354:	0292      	lsls	r2, r2, #10
     356:	4313      	orrs	r3, r2
     358:	607b      	str	r3, [r7, #4]
     35a:	3c01      	subs	r4, #1
     35c:	b2a4      	uxth	r4, r4
     35e:	1c63      	adds	r3, r4, #1
     360:	4698      	mov	r8, r3

	uint16_t i = 0;
	while (length--) {
     362:	2400      	movs	r4, #0

		/* Wait for next byte or stop condition */
		status = _i2c_slave_wait_for_bus(module);
     364:	4b1c      	ldr	r3, [pc, #112]	; (3d8 <i2c_slave_read_packet_wait+0xf0>)
     366:	469b      	mov	fp, r3
		if (status != STATUS_OK) {
			/* Timeout, return */
			return status;
		}

		if ((i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_PREC) ||
     368:	2301      	movs	r3, #1
     36a:	469a      	mov	sl, r3

	uint16_t i = 0;
	while (length--) {

		/* Wait for next byte or stop condition */
		status = _i2c_slave_wait_for_bus(module);
     36c:	0028      	movs	r0, r5
     36e:	47d8      	blx	fp
		if (status != STATUS_OK) {
     370:	2800      	cmp	r0, #0
     372:	d12c      	bne.n	3ce <i2c_slave_read_packet_wait+0xe6>
			/* Timeout, return */
			return status;
		}

		if ((i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_PREC) ||
     374:	7e3b      	ldrb	r3, [r7, #24]
     376:	4652      	mov	r2, sl
     378:	4213      	tst	r3, r2
     37a:	d102      	bne.n	382 <i2c_slave_read_packet_wait+0x9a>
				i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_AMATCH) {
     37c:	7e3b      	ldrb	r3, [r7, #24]
		if (status != STATUS_OK) {
			/* Timeout, return */
			return status;
		}

		if ((i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_PREC) ||
     37e:	079b      	lsls	r3, r3, #30
     380:	d503      	bpl.n	38a <i2c_slave_read_packet_wait+0xa2>
				i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_AMATCH) {
			/* Master sent stop condition, or repeated start, read done */
			/* Clear stop flag */
			i2c_hw->INTFLAG.reg = SERCOM_I2CS_INTFLAG_PREC;
     382:	2301      	movs	r3, #1
     384:	763b      	strb	r3, [r7, #24]
			return STATUS_ABORTED;
     386:	2004      	movs	r0, #4
     388:	e021      	b.n	3ce <i2c_slave_read_packet_wait+0xe6>
		}

		/* Read data */
		_i2c_slave_wait_for_sync(module);
     38a:	0028      	movs	r0, r5
     38c:	4b14      	ldr	r3, [pc, #80]	; (3e0 <i2c_slave_read_packet_wait+0xf8>)
     38e:	4798      	blx	r3
		packet->data[i++] = i2c_hw->DATA.reg;
     390:	2328      	movs	r3, #40	; 0x28
     392:	5cfa      	ldrb	r2, [r7, r3]
     394:	0423      	lsls	r3, r4, #16
     396:	0c1b      	lsrs	r3, r3, #16
     398:	6871      	ldr	r1, [r6, #4]
     39a:	54ca      	strb	r2, [r1, r3]
     39c:	3401      	adds	r4, #1
	/* Write request from master, ACK address */
	i2c_hw->CTRLB.reg &= ~SERCOM_I2CS_CTRLB_ACKACT;
	i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_CMD(0x3);

	uint16_t i = 0;
	while (length--) {
     39e:	4544      	cmp	r4, r8
     3a0:	d1e4      	bne.n	36c <i2c_slave_read_packet_wait+0x84>
		packet->data[i++] = i2c_hw->DATA.reg;

	}

	/* Packet read done, wait for packet to NACK, Stop or repeated start */
	status = _i2c_slave_wait_for_bus(module);
     3a2:	0028      	movs	r0, r5
     3a4:	4b0c      	ldr	r3, [pc, #48]	; (3d8 <i2c_slave_read_packet_wait+0xf0>)
     3a6:	4798      	blx	r3

	if (i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_DRDY) {
     3a8:	7e3b      	ldrb	r3, [r7, #24]
     3aa:	075b      	lsls	r3, r3, #29
     3ac:	d509      	bpl.n	3c2 <i2c_slave_read_packet_wait+0xda>
		/* Buffer is full, send NACK */
		i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_ACKACT;
     3ae:	687b      	ldr	r3, [r7, #4]
     3b0:	2280      	movs	r2, #128	; 0x80
     3b2:	02d2      	lsls	r2, r2, #11
     3b4:	4313      	orrs	r3, r2
     3b6:	607b      	str	r3, [r7, #4]
		i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_CMD(0x2);
     3b8:	687b      	ldr	r3, [r7, #4]
     3ba:	2280      	movs	r2, #128	; 0x80
     3bc:	0292      	lsls	r2, r2, #10
     3be:	4313      	orrs	r3, r2
     3c0:	607b      	str	r3, [r7, #4]
	}
	if (i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_PREC) {
     3c2:	7e3b      	ldrb	r3, [r7, #24]
		/* Clear stop flag */
		i2c_hw->INTFLAG.reg = SERCOM_I2CS_INTFLAG_PREC;
	}
	return STATUS_OK;
     3c4:	2000      	movs	r0, #0
	if (i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_DRDY) {
		/* Buffer is full, send NACK */
		i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_ACKACT;
		i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_CMD(0x2);
	}
	if (i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_PREC) {
     3c6:	07db      	lsls	r3, r3, #31
     3c8:	d501      	bpl.n	3ce <i2c_slave_read_packet_wait+0xe6>
		/* Clear stop flag */
		i2c_hw->INTFLAG.reg = SERCOM_I2CS_INTFLAG_PREC;
     3ca:	2301      	movs	r3, #1
     3cc:	763b      	strb	r3, [r7, #24]
	}
	return STATUS_OK;
}
     3ce:	bc1c      	pop	{r2, r3, r4}
     3d0:	4690      	mov	r8, r2
     3d2:	469a      	mov	sl, r3
     3d4:	46a3      	mov	fp, r4
     3d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     3d8:	00000121 	.word	0x00000121
     3dc:	fffbffff 	.word	0xfffbffff
     3e0:	00000115 	.word	0x00000115

000003e4 <_i2c_slave_interrupt_handler>:
 *
 * \param[in] instance Sercom instance that triggered the interrupt
 */
void _i2c_slave_interrupt_handler(
		uint8_t instance)
{
     3e4:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling. */
	struct i2c_slave_module *module =
     3e6:	0080      	lsls	r0, r0, #2
     3e8:	4b87      	ldr	r3, [pc, #540]	; (608 <_i2c_slave_interrupt_handler+0x224>)
     3ea:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_slave_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     3ec:	6825      	ldr	r5, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask = module->enabled_callback;
     3ee:	2325      	movs	r3, #37	; 0x25
     3f0:	5ce3      	ldrb	r3, [r4, r3]
	callback_mask &= module->registered_callback;
     3f2:	2224      	movs	r2, #36	; 0x24
     3f4:	5ca6      	ldrb	r6, [r4, r2]
     3f6:	401e      	ands	r6, r3


	if (i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_AMATCH) {
     3f8:	7e2b      	ldrb	r3, [r5, #24]
     3fa:	079b      	lsls	r3, r3, #30
     3fc:	d578      	bpl.n	4f0 <_i2c_slave_interrupt_handler+0x10c>
	/* Address match */
		/* Check if last transfer is done - repeated start */
		if (module->buffer_length != module->buffer_remaining &&
     3fe:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
     400:	b29b      	uxth	r3, r3
     402:	8d22      	ldrh	r2, [r4, #40]	; 0x28
     404:	4293      	cmp	r3, r2
     406:	d00d      	beq.n	424 <_i2c_slave_interrupt_handler+0x40>
				module->transfer_direction == I2C_TRANSFER_WRITE) {
     408:	2330      	movs	r3, #48	; 0x30
     40a:	5ce3      	ldrb	r3, [r4, r3]


	if (i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_AMATCH) {
	/* Address match */
		/* Check if last transfer is done - repeated start */
		if (module->buffer_length != module->buffer_remaining &&
     40c:	2b00      	cmp	r3, #0
     40e:	d109      	bne.n	424 <_i2c_slave_interrupt_handler+0x40>
				module->transfer_direction == I2C_TRANSFER_WRITE) {

			module->status = STATUS_OK;
     410:	2231      	movs	r2, #49	; 0x31
     412:	54a3      	strb	r3, [r4, r2]
			module->buffer_length = 0;
     414:	84e3      	strh	r3, [r4, #38]	; 0x26
			module->buffer_remaining = 0;
     416:	8523      	strh	r3, [r4, #40]	; 0x28

			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_READ_COMPLETE))) {
     418:	07b3      	lsls	r3, r6, #30
     41a:	d515      	bpl.n	448 <_i2c_slave_interrupt_handler+0x64>
				module->callbacks[I2C_SLAVE_CALLBACK_READ_COMPLETE](module);
     41c:	6923      	ldr	r3, [r4, #16]
     41e:	0020      	movs	r0, r4
     420:	4798      	blx	r3
     422:	e011      	b.n	448 <_i2c_slave_interrupt_handler+0x64>
			}
		} else if (module->buffer_length != module->buffer_remaining &&
     424:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
     426:	b29b      	uxth	r3, r3
     428:	429a      	cmp	r2, r3
     42a:	d00d      	beq.n	448 <_i2c_slave_interrupt_handler+0x64>
				module->transfer_direction == I2C_TRANSFER_READ) {
     42c:	2330      	movs	r3, #48	; 0x30
     42e:	5ce3      	ldrb	r3, [r4, r3]
			module->buffer_remaining = 0;

			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_READ_COMPLETE))) {
				module->callbacks[I2C_SLAVE_CALLBACK_READ_COMPLETE](module);
			}
		} else if (module->buffer_length != module->buffer_remaining &&
     430:	2b01      	cmp	r3, #1
     432:	d109      	bne.n	448 <_i2c_slave_interrupt_handler+0x64>
				module->transfer_direction == I2C_TRANSFER_READ) {
			module->status = STATUS_OK;
     434:	2300      	movs	r3, #0
     436:	2231      	movs	r2, #49	; 0x31
     438:	54a3      	strb	r3, [r4, r2]
			module->buffer_length = 0;
     43a:	84e3      	strh	r3, [r4, #38]	; 0x26
			module->buffer_remaining = 0;
     43c:	8523      	strh	r3, [r4, #40]	; 0x28

			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_WRITE_COMPLETE))) {
     43e:	07f3      	lsls	r3, r6, #31
     440:	d502      	bpl.n	448 <_i2c_slave_interrupt_handler+0x64>
				module->callbacks[I2C_SLAVE_CALLBACK_WRITE_COMPLETE](module);
     442:	68e3      	ldr	r3, [r4, #12]
     444:	0020      	movs	r0, r4
     446:	4798      	blx	r3
			}
		}

		if (i2c_hw->STATUS.reg & (SERCOM_I2CS_STATUS_BUSERR |
     448:	8b6a      	ldrh	r2, [r5, #26]
     44a:	2343      	movs	r3, #67	; 0x43
     44c:	421a      	tst	r2, r3
     44e:	d007      	beq.n	460 <_i2c_slave_interrupt_handler+0x7c>
				SERCOM_I2CS_STATUS_COLL | SERCOM_I2CS_STATUS_LOWTOUT)) {
			/* An error occurred in last packet transfer */
			module->status = STATUS_ERR_IO;
     450:	2210      	movs	r2, #16
     452:	3b12      	subs	r3, #18
     454:	54e2      	strb	r2, [r4, r3]

			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_ERROR_LAST_TRANSFER))) {
     456:	06b3      	lsls	r3, r6, #26
     458:	d502      	bpl.n	460 <_i2c_slave_interrupt_handler+0x7c>
				module->callbacks[I2C_SLAVE_CALLBACK_ERROR_LAST_TRANSFER](module);
     45a:	6a23      	ldr	r3, [r4, #32]
     45c:	0020      	movs	r0, r4
     45e:	4798      	blx	r3
			}
		}
		if (module->nack_on_address) {
     460:	7a63      	ldrb	r3, [r4, #9]
     462:	2b00      	cmp	r3, #0
     464:	d006      	beq.n	474 <_i2c_slave_interrupt_handler+0x90>
		bool send_ack)
{
	Assert(module);
	Assert(module->hw);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     466:	6822      	ldr	r2, [r4, #0]
	/* Normal operation */
	if (send_ack == true) {
		i2c_hw->CTRLB.reg &= ~SERCOM_I2CS_CTRLB_ACKACT;
	}
	else {
		i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_ACKACT;
     468:	6853      	ldr	r3, [r2, #4]
     46a:	2180      	movs	r1, #128	; 0x80
     46c:	02c9      	lsls	r1, r1, #11
     46e:	430b      	orrs	r3, r1
     470:	6053      	str	r3, [r2, #4]
     472:	e033      	b.n	4dc <_i2c_slave_interrupt_handler+0xf8>
			/* NACK address, workaround 13574 */
			_i2c_slave_set_ctrlb_ackact(module, false);
		} else if (i2c_hw->STATUS.reg & SERCOM_I2CS_STATUS_DIR) {
     474:	8b6b      	ldrh	r3, [r5, #26]
     476:	071b      	lsls	r3, r3, #28
     478:	d518      	bpl.n	4ac <_i2c_slave_interrupt_handler+0xc8>
			/* Set transfer direction in module instance */
			module->transfer_direction = I2C_TRANSFER_READ;
     47a:	2201      	movs	r2, #1
     47c:	2330      	movs	r3, #48	; 0x30
     47e:	54e2      	strb	r2, [r4, r3]

			/* Read request from master */
			if (callback_mask & (1 << I2C_SLAVE_CALLBACK_READ_REQUEST)) {
     480:	0773      	lsls	r3, r6, #29
     482:	d502      	bpl.n	48a <_i2c_slave_interrupt_handler+0xa6>
				module->callbacks[I2C_SLAVE_CALLBACK_READ_REQUEST](module);
     484:	6963      	ldr	r3, [r4, #20]
     486:	0020      	movs	r0, r4
     488:	4798      	blx	r3
			}

			if (module->buffer_length == 0) {
     48a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
     48c:	b29b      	uxth	r3, r3
     48e:	2b00      	cmp	r3, #0
     490:	d106      	bne.n	4a0 <_i2c_slave_interrupt_handler+0xbc>
		bool send_ack)
{
	Assert(module);
	Assert(module->hw);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     492:	6822      	ldr	r2, [r4, #0]
	/* Normal operation */
	if (send_ack == true) {
		i2c_hw->CTRLB.reg &= ~SERCOM_I2CS_CTRLB_ACKACT;
	}
	else {
		i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_ACKACT;
     494:	6853      	ldr	r3, [r2, #4]
     496:	2180      	movs	r1, #128	; 0x80
     498:	02c9      	lsls	r1, r1, #11
     49a:	430b      	orrs	r3, r1
     49c:	6053      	str	r3, [r2, #4]
     49e:	e01d      	b.n	4dc <_i2c_slave_interrupt_handler+0xf8>
		bool send_ack)
{
	Assert(module);
	Assert(module->hw);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     4a0:	6822      	ldr	r2, [r4, #0]
	}
	system_interrupt_leave_critical_section();
#else
	/* Normal operation */
	if (send_ack == true) {
		i2c_hw->CTRLB.reg &= ~SERCOM_I2CS_CTRLB_ACKACT;
     4a2:	6851      	ldr	r1, [r2, #4]
     4a4:	4b59      	ldr	r3, [pc, #356]	; (60c <_i2c_slave_interrupt_handler+0x228>)
     4a6:	400b      	ands	r3, r1
     4a8:	6053      	str	r3, [r2, #4]
     4aa:	e017      	b.n	4dc <_i2c_slave_interrupt_handler+0xf8>
				/* ACK address, workaround 13574 */
				_i2c_slave_set_ctrlb_ackact(module, true);
			}
		} else {
			/* Set transfer direction in dev inst */
			module->transfer_direction = I2C_TRANSFER_WRITE;
     4ac:	2200      	movs	r2, #0
     4ae:	2330      	movs	r3, #48	; 0x30
     4b0:	54e2      	strb	r2, [r4, r3]

			/* Write request from master */
			if (callback_mask & (1 << I2C_SLAVE_CALLBACK_WRITE_REQUEST)) {
     4b2:	0733      	lsls	r3, r6, #28
     4b4:	d502      	bpl.n	4bc <_i2c_slave_interrupt_handler+0xd8>
				module->callbacks[I2C_SLAVE_CALLBACK_WRITE_REQUEST](module);
     4b6:	69a3      	ldr	r3, [r4, #24]
     4b8:	0020      	movs	r0, r4
     4ba:	4798      	blx	r3
			}

			if (module->buffer_length == 0) {
     4bc:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
     4be:	b29b      	uxth	r3, r3
     4c0:	2b00      	cmp	r3, #0
     4c2:	d106      	bne.n	4d2 <_i2c_slave_interrupt_handler+0xee>
		bool send_ack)
{
	Assert(module);
	Assert(module->hw);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     4c4:	6822      	ldr	r2, [r4, #0]
	/* Normal operation */
	if (send_ack == true) {
		i2c_hw->CTRLB.reg &= ~SERCOM_I2CS_CTRLB_ACKACT;
	}
	else {
		i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_ACKACT;
     4c6:	6853      	ldr	r3, [r2, #4]
     4c8:	2180      	movs	r1, #128	; 0x80
     4ca:	02c9      	lsls	r1, r1, #11
     4cc:	430b      	orrs	r3, r1
     4ce:	6053      	str	r3, [r2, #4]
     4d0:	e004      	b.n	4dc <_i2c_slave_interrupt_handler+0xf8>
		bool send_ack)
{
	Assert(module);
	Assert(module->hw);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     4d2:	6822      	ldr	r2, [r4, #0]
	}
	system_interrupt_leave_critical_section();
#else
	/* Normal operation */
	if (send_ack == true) {
		i2c_hw->CTRLB.reg &= ~SERCOM_I2CS_CTRLB_ACKACT;
     4d4:	6851      	ldr	r1, [r2, #4]
     4d6:	4b4d      	ldr	r3, [pc, #308]	; (60c <_i2c_slave_interrupt_handler+0x228>)
     4d8:	400b      	ands	r3, r1
     4da:	6053      	str	r3, [r2, #4]
		struct i2c_slave_module *const module)
{
	Assert(module);
	Assert(module->hw);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     4dc:	6823      	ldr	r3, [r4, #0]
		i2c_hw->INTFLAG.reg = SERCOM_I2CS_INTFLAG_PREC;
	}
	i2c_hw->INTFLAG.reg = SERCOM_I2CS_INTFLAG_AMATCH;
#else
	/* Normal operation */
	i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_CMD(0x3);
     4de:	22c0      	movs	r2, #192	; 0xc0
     4e0:	0292      	lsls	r2, r2, #10
     4e2:	605a      	str	r2, [r3, #4]
		bool send_ack)
{
	Assert(module);
	Assert(module->hw);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     4e4:	6822      	ldr	r2, [r4, #0]
	}
	system_interrupt_leave_critical_section();
#else
	/* Normal operation */
	if (send_ack == true) {
		i2c_hw->CTRLB.reg &= ~SERCOM_I2CS_CTRLB_ACKACT;
     4e6:	6851      	ldr	r1, [r2, #4]
     4e8:	4b48      	ldr	r3, [pc, #288]	; (60c <_i2c_slave_interrupt_handler+0x228>)
     4ea:	400b      	ands	r3, r1
     4ec:	6053      	str	r3, [r2, #4]
     4ee:	e08a      	b.n	606 <_i2c_slave_interrupt_handler+0x222>
		_i2c_slave_set_ctrlb_cmd3(module);

		/* ACK next incoming packet, workaround 13574 */
		_i2c_slave_set_ctrlb_ackact(module, true);

	} else if (i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_PREC) {
     4f0:	7e2b      	ldrb	r3, [r5, #24]
     4f2:	07db      	lsls	r3, r3, #31
     4f4:	d52e      	bpl.n	554 <_i2c_slave_interrupt_handler+0x170>
		/* Stop condition on bus - current transfer done */

		/* Clear Stop interrupt */
		i2c_hw->INTFLAG.reg = SERCOM_I2CS_INTFLAG_PREC;
     4f6:	2301      	movs	r3, #1
     4f8:	762b      	strb	r3, [r5, #24]

		/* Disable interrupts */
		i2c_hw->INTENCLR.reg = SERCOM_I2CS_INTFLAG_PREC | SERCOM_I2CS_INTFLAG_DRDY;
     4fa:	3304      	adds	r3, #4
     4fc:	752b      	strb	r3, [r5, #20]

		if (!((module->enabled_callback & (1 << I2C_SLAVE_CALLBACK_READ_REQUEST))
     4fe:	3320      	adds	r3, #32
     500:	5ce3      	ldrb	r3, [r4, r3]
     502:	075b      	lsls	r3, r3, #29
     504:	d405      	bmi.n	512 <_i2c_slave_interrupt_handler+0x12e>
				|| (module->enabled_callback == (1 << I2C_SLAVE_CALLBACK_WRITE_REQUEST)))) {
     506:	2325      	movs	r3, #37	; 0x25
     508:	5ce3      	ldrb	r3, [r4, r3]
		i2c_hw->INTFLAG.reg = SERCOM_I2CS_INTFLAG_PREC;

		/* Disable interrupts */
		i2c_hw->INTENCLR.reg = SERCOM_I2CS_INTFLAG_PREC | SERCOM_I2CS_INTFLAG_DRDY;

		if (!((module->enabled_callback & (1 << I2C_SLAVE_CALLBACK_READ_REQUEST))
     50a:	2b08      	cmp	r3, #8
     50c:	d001      	beq.n	512 <_i2c_slave_interrupt_handler+0x12e>
				|| (module->enabled_callback == (1 << I2C_SLAVE_CALLBACK_WRITE_REQUEST)))) {
			/* Disable address match if read/write request is not enabled */
			i2c_hw->INTENCLR.reg = SERCOM_I2CS_INTFLAG_AMATCH;
     50e:	2302      	movs	r3, #2
     510:	752b      	strb	r3, [r5, #20]
		}

		if (!(module->status == STATUS_ERR_OVERFLOW || module->status == STATUS_ERR_IO)) {
     512:	2331      	movs	r3, #49	; 0x31
     514:	5ce3      	ldrb	r3, [r4, r3]
     516:	2b1e      	cmp	r3, #30
     518:	d075      	beq.n	606 <_i2c_slave_interrupt_handler+0x222>
     51a:	2331      	movs	r3, #49	; 0x31
     51c:	5ce3      	ldrb	r3, [r4, r3]
     51e:	2b10      	cmp	r3, #16
     520:	d071      	beq.n	606 <_i2c_slave_interrupt_handler+0x222>
			module->status = STATUS_OK;
     522:	2300      	movs	r3, #0
     524:	2231      	movs	r2, #49	; 0x31
     526:	54a3      	strb	r3, [r4, r2]
			module->buffer_length = 0;
     528:	84e3      	strh	r3, [r4, #38]	; 0x26
			module->buffer_remaining = 0;
     52a:	8523      	strh	r3, [r4, #40]	; 0x28

			/* Call appropriate callback if enabled and registered */
			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_READ_COMPLETE))
     52c:	07b3      	lsls	r3, r6, #30
     52e:	d507      	bpl.n	540 <_i2c_slave_interrupt_handler+0x15c>
					&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
     530:	2330      	movs	r3, #48	; 0x30
     532:	5ce3      	ldrb	r3, [r4, r3]
     534:	2b00      	cmp	r3, #0
     536:	d103      	bne.n	540 <_i2c_slave_interrupt_handler+0x15c>
				/* Read from master complete */
				module->callbacks[I2C_SLAVE_CALLBACK_READ_COMPLETE](module);
     538:	6923      	ldr	r3, [r4, #16]
     53a:	0020      	movs	r0, r4
     53c:	4798      	blx	r3
     53e:	e062      	b.n	606 <_i2c_slave_interrupt_handler+0x222>
			} else if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_WRITE_COMPLETE))
     540:	07f3      	lsls	r3, r6, #31
     542:	d560      	bpl.n	606 <_i2c_slave_interrupt_handler+0x222>
					&& (module->transfer_direction == I2C_TRANSFER_READ)) {
     544:	2330      	movs	r3, #48	; 0x30
     546:	5ce3      	ldrb	r3, [r4, r3]
     548:	2b01      	cmp	r3, #1
     54a:	d15c      	bne.n	606 <_i2c_slave_interrupt_handler+0x222>
				/* Write to master complete */
				module->callbacks[I2C_SLAVE_CALLBACK_WRITE_COMPLETE](module);
     54c:	68e3      	ldr	r3, [r4, #12]
     54e:	0020      	movs	r0, r4
     550:	4798      	blx	r3
     552:	e058      	b.n	606 <_i2c_slave_interrupt_handler+0x222>
			}
					}
	} else if (i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_DRDY) {
     554:	7e2b      	ldrb	r3, [r5, #24]
     556:	075b      	lsls	r3, r3, #29
     558:	d555      	bpl.n	606 <_i2c_slave_interrupt_handler+0x222>
		/* Check if buffer is full, or NACK from master */
		if (module->buffer_remaining <= 0 ||
     55a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     55c:	2b00      	cmp	r3, #0
     55e:	d00a      	beq.n	576 <_i2c_slave_interrupt_handler+0x192>
				(module->transfer_direction == I2C_TRANSFER_READ &&
     560:	2230      	movs	r2, #48	; 0x30
     562:	5ca2      	ldrb	r2, [r4, r2]
				module->callbacks[I2C_SLAVE_CALLBACK_WRITE_COMPLETE](module);
			}
					}
	} else if (i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_DRDY) {
		/* Check if buffer is full, or NACK from master */
		if (module->buffer_remaining <= 0 ||
     564:	2a01      	cmp	r2, #1
     566:	d14a      	bne.n	5fe <_i2c_slave_interrupt_handler+0x21a>
				(module->transfer_direction == I2C_TRANSFER_READ &&
				(module->buffer_length > module->buffer_remaining) &&
     568:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
     56a:	b292      	uxth	r2, r2
			}
					}
	} else if (i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_DRDY) {
		/* Check if buffer is full, or NACK from master */
		if (module->buffer_remaining <= 0 ||
				(module->transfer_direction == I2C_TRANSFER_READ &&
     56c:	4293      	cmp	r3, r2
     56e:	d246      	bcs.n	5fe <_i2c_slave_interrupt_handler+0x21a>
				(module->buffer_length > module->buffer_remaining) &&
				(i2c_hw->STATUS.reg & SERCOM_I2CS_STATUS_RXNACK))) {
     570:	8b6b      	ldrh	r3, [r5, #26]
					}
	} else if (i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_DRDY) {
		/* Check if buffer is full, or NACK from master */
		if (module->buffer_remaining <= 0 ||
				(module->transfer_direction == I2C_TRANSFER_READ &&
				(module->buffer_length > module->buffer_remaining) &&
     572:	075b      	lsls	r3, r3, #29
     574:	d543      	bpl.n	5fe <_i2c_slave_interrupt_handler+0x21a>
				(i2c_hw->STATUS.reg & SERCOM_I2CS_STATUS_RXNACK))) {

			module->buffer_remaining = 0;
     576:	2300      	movs	r3, #0
     578:	8523      	strh	r3, [r4, #40]	; 0x28
			module->buffer_length = 0;
     57a:	84e3      	strh	r3, [r4, #38]	; 0x26

			if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     57c:	3330      	adds	r3, #48	; 0x30
     57e:	5ce3      	ldrb	r3, [r4, r3]
     580:	2b00      	cmp	r3, #0
     582:	d112      	bne.n	5aa <_i2c_slave_interrupt_handler+0x1c6>
	}
	else {
		i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_ACKACT;
     584:	686b      	ldr	r3, [r5, #4]
     586:	2280      	movs	r2, #128	; 0x80
     588:	02d2      	lsls	r2, r2, #11
     58a:	4313      	orrs	r3, r2
     58c:	606b      	str	r3, [r5, #4]
				/* Buffer is full, send NACK, workaround 13574 */
				_i2c_slave_set_ctrlb_ackact(module, false);
				i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_CMD(0x2);
     58e:	686b      	ldr	r3, [r5, #4]
     590:	2280      	movs	r2, #128	; 0x80
     592:	0292      	lsls	r2, r2, #10
     594:	4313      	orrs	r3, r2
     596:	606b      	str	r3, [r5, #4]

				/* Set status, new character in DATA register will overflow
				 * buffer */
				module->status = STATUS_ERR_OVERFLOW;
     598:	221e      	movs	r2, #30
     59a:	2331      	movs	r3, #49	; 0x31
     59c:	54e2      	strb	r2, [r4, r3]

				if (callback_mask & (1 << I2C_SLAVE_CALLBACK_ERROR)) {
     59e:	06f3      	lsls	r3, r6, #27
     5a0:	d531      	bpl.n	606 <_i2c_slave_interrupt_handler+0x222>
					/* Read complete */
					module->callbacks[I2C_SLAVE_CALLBACK_ERROR](module);
     5a2:	69e3      	ldr	r3, [r4, #28]
     5a4:	0020      	movs	r0, r4
     5a6:	4798      	blx	r3
     5a8:	e02d      	b.n	606 <_i2c_slave_interrupt_handler+0x222>
     5aa:	686b      	ldr	r3, [r5, #4]
     5ac:	2280      	movs	r2, #128	; 0x80
     5ae:	02d2      	lsls	r2, r2, #11
     5b0:	4313      	orrs	r3, r2
     5b2:	606b      	str	r3, [r5, #4]
				}
			} else {
				/* Release SCL and wait for new start condition */
				_i2c_slave_set_ctrlb_ackact(module, false);
				i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_CMD(0x2);
     5b4:	686b      	ldr	r3, [r5, #4]
     5b6:	2280      	movs	r2, #128	; 0x80
     5b8:	0292      	lsls	r2, r2, #10
     5ba:	4313      	orrs	r3, r2
     5bc:	606b      	str	r3, [r5, #4]

				/* Transfer successful */
				module->status = STATUS_OK;
     5be:	2200      	movs	r2, #0
     5c0:	2331      	movs	r3, #49	; 0x31
     5c2:	54e2      	strb	r2, [r4, r3]

				/* Disable interrupts */
				i2c_hw->INTENCLR.reg = SERCOM_I2CS_INTFLAG_DRDY;
     5c4:	3b2d      	subs	r3, #45	; 0x2d
     5c6:	752b      	strb	r3, [r5, #20]
     5c8:	e01d      	b.n	606 <_i2c_slave_interrupt_handler+0x222>
			}

		/* Continue buffer write/read */
		} else if (module->buffer_length > 0 && module->buffer_remaining > 0) {
			/* Call function based on transfer direction */
			if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     5ca:	2330      	movs	r3, #48	; 0x30
     5cc:	5ce3      	ldrb	r3, [r4, r3]
     5ce:	2b00      	cmp	r3, #0
     5d0:	d10a      	bne.n	5e8 <_i2c_slave_interrupt_handler+0x204>
		struct i2c_slave_module *const module)
{
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);

	/* Read byte from master and put in buffer. */
	*(module->buffer++) = i2c_hw->DATA.reg;
     5d2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
     5d4:	1c53      	adds	r3, r2, #1
     5d6:	62e3      	str	r3, [r4, #44]	; 0x2c
     5d8:	2328      	movs	r3, #40	; 0x28
     5da:	5ceb      	ldrb	r3, [r5, r3]
     5dc:	b2db      	uxtb	r3, r3
     5de:	7013      	strb	r3, [r2, #0]

	/*Decrement remaining buffer length */
	module->buffer_remaining--;
     5e0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     5e2:	3b01      	subs	r3, #1
     5e4:	8523      	strh	r3, [r4, #40]	; 0x28
     5e6:	e00e      	b.n	606 <_i2c_slave_interrupt_handler+0x222>
		struct i2c_slave_module *const module)
{
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);

	/* Write byte from buffer to master */
	i2c_hw->DATA.reg = *(module->buffer++);
     5e8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     5ea:	1c5a      	adds	r2, r3, #1
     5ec:	62e2      	str	r2, [r4, #44]	; 0x2c
     5ee:	781b      	ldrb	r3, [r3, #0]
     5f0:	b2db      	uxtb	r3, r3
     5f2:	2228      	movs	r2, #40	; 0x28
     5f4:	54ab      	strb	r3, [r5, r2]

	/*Decrement remaining buffer length */
	module->buffer_remaining--;
     5f6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     5f8:	3b01      	subs	r3, #1
     5fa:	8523      	strh	r3, [r4, #40]	; 0x28
			} else {
				_i2c_slave_write(module);
			}
		}
	}
}
     5fc:	e003      	b.n	606 <_i2c_slave_interrupt_handler+0x222>
				/* Disable interrupts */
				i2c_hw->INTENCLR.reg = SERCOM_I2CS_INTFLAG_DRDY;
			}

		/* Continue buffer write/read */
		} else if (module->buffer_length > 0 && module->buffer_remaining > 0) {
     5fe:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
     600:	b29b      	uxth	r3, r3
     602:	2b00      	cmp	r3, #0
     604:	d1e1      	bne.n	5ca <_i2c_slave_interrupt_handler+0x1e6>
			} else {
				_i2c_slave_write(module);
			}
		}
	}
}
     606:	bd70      	pop	{r4, r5, r6, pc}
     608:	200002f0 	.word	0x200002f0
     60c:	fffbffff 	.word	0xfffbffff

00000610 <configure_i2c_slave>:
#include "i2c_slave.h"

uint8_t read_buffer[DATA_LENGTH];

void configure_i2c_slave(void)
{
     610:	b530      	push	{r4, r5, lr}
     612:	b08b      	sub	sp, #44	; 0x2c
static inline void i2c_slave_get_config_defaults(
		struct i2c_slave_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->enable_scl_low_timeout = false;
     614:	2200      	movs	r2, #0
     616:	466b      	mov	r3, sp
     618:	701a      	strb	r2, [r3, #0]
	config->sda_hold_time = I2C_SLAVE_SDA_HOLD_TIME_300NS_600NS;
     61a:	2380      	movs	r3, #128	; 0x80
     61c:	039b      	lsls	r3, r3, #14
     61e:	9301      	str	r3, [sp, #4]
	config->buffer_timeout = 65535;
	config->address_mode = I2C_SLAVE_ADDRESS_MODE_MASK;
     620:	2300      	movs	r3, #0
     622:	4669      	mov	r1, sp
     624:	814a      	strh	r2, [r1, #10]
	config->address = 0;
	config->address_mask = 0;
     626:	81ca      	strh	r2, [r1, #14]
#ifdef FEATURE_I2C_10_BIT_ADDRESS
	config->ten_bit_address = false;
     628:	740b      	strb	r3, [r1, #16]
#endif
	config->enable_general_call_address = false;
     62a:	744b      	strb	r3, [r1, #17]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->transfer_speed = I2C_SLAVE_SPEED_STANDARD_AND_FAST;
     62c:	9205      	str	r2, [sp, #20]
#endif
#if I2C_SLAVE_CALLBACK_MODE == true
	config->enable_nack_on_address = false;
     62e:	760b      	strb	r3, [r1, #24]
#endif
	config->generator_source = GCLK_GENERATOR_0;
     630:	764b      	strb	r3, [r1, #25]
	config->run_in_standby = false;
     632:	768b      	strb	r3, [r1, #26]
	config->pinmux_pad0 = PINMUX_DEFAULT;
	config->pinmux_pad1 = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
     634:	2224      	movs	r2, #36	; 0x24
     636:	548b      	strb	r3, [r1, r2]
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
     638:	3201      	adds	r2, #1
     63a:	548b      	strb	r3, [r1, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
     63c:	3201      	adds	r2, #1
     63e:	548b      	strb	r3, [r1, r2]
	struct i2c_slave_config config_i2c_slave;
	i2c_slave_get_config_defaults(&config_i2c_slave);

	config_i2c_slave.address        = SLAVE_ADDRESS;
     640:	2312      	movs	r3, #18
     642:	466a      	mov	r2, sp
     644:	818b      	strh	r3, [r1, #12]
	config_i2c_slave.address_mode   = I2C_SLAVE_ADDRESS_MODE_MASK;

	config_i2c_slave.pinmux_pad0    = EDBG_I2C_SERCOM_PINMUX_PAD0 ;
     646:	4b10      	ldr	r3, [pc, #64]	; (688 <configure_i2c_slave+0x78>)
     648:	9307      	str	r3, [sp, #28]
	config_i2c_slave.pinmux_pad1    = EDBG_I2C_SERCOM_PINMUX_PAD1;
     64a:	4b10      	ldr	r3, [pc, #64]	; (68c <configure_i2c_slave+0x7c>)
     64c:	9308      	str	r3, [sp, #32]

	config_i2c_slave.buffer_timeout = 1000;
     64e:	23fa      	movs	r3, #250	; 0xfa
     650:	009b      	lsls	r3, r3, #2
     652:	810b      	strh	r3, [r1, #8]

	i2c_slave_init(&i2c_slave_instance, CONF_I2C_SLAVE_MODULE, &config_i2c_slave);
     654:	4d0e      	ldr	r5, [pc, #56]	; (690 <configure_i2c_slave+0x80>)
     656:	490f      	ldr	r1, [pc, #60]	; (694 <configure_i2c_slave+0x84>)
     658:	0028      	movs	r0, r5
     65a:	4b0f      	ldr	r3, [pc, #60]	; (698 <configure_i2c_slave+0x88>)
     65c:	4798      	blx	r3
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     65e:	682c      	ldr	r4, [r5, #0]

#if I2C_SLAVE_CALLBACK_MODE == true
	/* Enable global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     660:	0020      	movs	r0, r4
     662:	4b0e      	ldr	r3, [pc, #56]	; (69c <configure_i2c_slave+0x8c>)
     664:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     666:	231f      	movs	r3, #31
     668:	4018      	ands	r0, r3
     66a:	3b1e      	subs	r3, #30
     66c:	4083      	lsls	r3, r0
     66e:	4a0c      	ldr	r2, [pc, #48]	; (6a0 <configure_i2c_slave+0x90>)
     670:	6013      	str	r3, [r2, #0]
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     672:	6829      	ldr	r1, [r5, #0]
		const struct i2c_slave_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_slave_is_syncing(module)) {
     674:	2203      	movs	r2, #3

	/* Return sync status */
#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CS_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CS_SYNCBUSY_MASK);
     676:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_slave_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_slave_is_syncing(module)) {
     678:	421a      	tst	r2, r3
     67a:	d1fc      	bne.n	676 <configure_i2c_slave+0x66>

	/* Wait for module to sync */
	_i2c_slave_wait_for_sync(module);

	/* Enable module */
	i2c_hw->CTRLA.reg |= SERCOM_I2CS_CTRLA_ENABLE;
     67c:	6822      	ldr	r2, [r4, #0]
     67e:	2302      	movs	r3, #2
     680:	4313      	orrs	r3, r2
     682:	6023      	str	r3, [r4, #0]
	i2c_slave_enable(&i2c_slave_instance);
     684:	b00b      	add	sp, #44	; 0x2c
     686:	bd30      	pop	{r4, r5, pc}
     688:	00100002 	.word	0x00100002
     68c:	00110002 	.word	0x00110002
     690:	2000010c 	.word	0x2000010c
     694:	42000c00 	.word	0x42000c00
     698:	0000015d 	.word	0x0000015d
     69c:	00001c49 	.word	0x00001c49
     6a0:	e000e100 	.word	0xe000e100

000006a4 <configure_tcc>:
#include "motor.h"

bool direction=false, find=false;

void configure_tcc(void)
{
     6a4:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments  */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module hardware instance */
	Tcc *const tcc_module = module_inst->hw;
     6a6:	4b21      	ldr	r3, [pc, #132]	; (72c <configure_tcc+0x88>)
     6a8:	681a      	ldr	r2, [r3, #0]

	/* Disable this module if it is running */
	if (tcc_module->CTRLA.reg & TCC_CTRLA_ENABLE) {
     6aa:	6813      	ldr	r3, [r2, #0]
     6ac:	079b      	lsls	r3, r3, #30
     6ae:	d50f      	bpl.n	6d0 <configure_tcc+0x2c>
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
     6b0:	2102      	movs	r1, #2
     6b2:	6893      	ldr	r3, [r2, #8]
     6b4:	4219      	tst	r1, r3
     6b6:	d1fc      	bne.n	6b2 <configure_tcc+0xe>
		/* Wait for sync */
	}

	/* Disbale interrupt */
	tcc_module->INTENCLR.reg = TCC_INTENCLR_MASK;
     6b8:	4b1d      	ldr	r3, [pc, #116]	; (730 <configure_tcc+0x8c>)
     6ba:	6253      	str	r3, [r2, #36]	; 0x24
	/* Clear interrupt flag */
	tcc_module->INTFLAG.reg = TCC_INTFLAG_MASK;
     6bc:	62d3      	str	r3, [r2, #44]	; 0x2c

	/* Disable the TCC module */
	tcc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
     6be:	6813      	ldr	r3, [r2, #0]
     6c0:	2102      	movs	r1, #2
     6c2:	438b      	bics	r3, r1
     6c4:	6013      	str	r3, [r2, #0]
{
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	return (module_inst->hw->SYNCBUSY.reg > 0);
     6c6:	4b19      	ldr	r3, [pc, #100]	; (72c <configure_tcc+0x88>)
     6c8:	6819      	ldr	r1, [r3, #0]
     6ca:	688b      	ldr	r3, [r1, #8]
	Tcc *const tcc_module = module_inst->hw;

	/* Disable this module if it is running */
	if (tcc_module->CTRLA.reg & TCC_CTRLA_ENABLE) {
		tcc_disable(module_inst);
		while (tcc_is_syncing(module_inst)) {
     6cc:	2b00      	cmp	r3, #0
     6ce:	d1fc      	bne.n	6ca <configure_tcc+0x26>
			/* wait while module is disabling */
		}
	}

	/* Reset this TC module */
	tcc_module->CTRLA.reg  |= TCC_CTRLA_SWRST;
     6d0:	6813      	ldr	r3, [r2, #0]
     6d2:	2501      	movs	r5, #1
     6d4:	432b      	orrs	r3, r5
     6d6:	6013      	str	r3, [r2, #0]
	tcc_reset(&tcc_instance);
	tcc_get_config_defaults(&config_tcc,TCC0);
     6d8:	4e16      	ldr	r6, [pc, #88]	; (734 <configure_tcc+0x90>)
     6da:	4c17      	ldr	r4, [pc, #92]	; (738 <configure_tcc+0x94>)
     6dc:	0031      	movs	r1, r6
     6de:	0020      	movs	r0, r4
     6e0:	4b16      	ldr	r3, [pc, #88]	; (73c <configure_tcc+0x98>)
     6e2:	4798      	blx	r3
	
	config_tcc.counter.clock_source = GCLK_GENERATOR_0;
     6e4:	2300      	movs	r3, #0
     6e6:	72a3      	strb	r3, [r4, #10]
	config_tcc.counter.period = 0xFFFF;
     6e8:	4b15      	ldr	r3, [pc, #84]	; (740 <configure_tcc+0x9c>)
     6ea:	6063      	str	r3, [r4, #4]
	config_tcc.counter.clock_prescaler = 1;
     6ec:	72e5      	strb	r5, [r4, #11]
	config_tcc.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
     6ee:	2302      	movs	r3, #2
     6f0:	7623      	strb	r3, [r4, #24]
	
	//config_tcc.compare.match[CONF_PWM_CHANNEL] = left;
	//config_tcc.compare.match[CONF_PWM_CHANNEL1] =right;


	config_tcc.pins.enable_wave_out_pin[CONF_PWM_OUTPUT] = true;
     6f2:	3398      	adds	r3, #152	; 0x98
     6f4:	54e5      	strb	r5, [r4, r3]
	config_tcc.pins.wave_out_pin[CONF_PWM_OUTPUT] = PIN_PA18F_TCC0_WO2;
     6f6:	3b88      	subs	r3, #136	; 0x88
     6f8:	6623      	str	r3, [r4, #96]	; 0x60
	config_tcc.pins.wave_out_pin_mux[CONF_PWM_OUTPUT] = MUX_PA18F_TCC0_WO2;
     6fa:	3b0d      	subs	r3, #13
     6fc:	2280      	movs	r2, #128	; 0x80
     6fe:	50a3      	str	r3, [r4, r2]

	config_tcc.pins.enable_wave_out_pin[CONF_PWM_OUTPUT1] = true;
     700:	321b      	adds	r2, #27
     702:	54a5      	strb	r5, [r4, r2]
	config_tcc.pins.wave_out_pin[CONF_PWM_OUTPUT1] = PIN_PA19F_TCC0_WO3;
     704:	3a88      	subs	r2, #136	; 0x88
     706:	6662      	str	r2, [r4, #100]	; 0x64
	config_tcc.pins.wave_out_pin_mux[CONF_PWM_OUTPUT1] = MUX_PA19F_TCC0_WO3;
     708:	3271      	adds	r2, #113	; 0x71
     70a:	50a3      	str	r3, [r4, r2]

	
	tcc_init(&tcc_instance, TCC0, &config_tcc);
     70c:	4d07      	ldr	r5, [pc, #28]	; (72c <configure_tcc+0x88>)
     70e:	0022      	movs	r2, r4
     710:	0031      	movs	r1, r6
     712:	0028      	movs	r0, r5
     714:	4b0b      	ldr	r3, [pc, #44]	; (744 <configure_tcc+0xa0>)
     716:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
     718:	682a      	ldr	r2, [r5, #0]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
     71a:	2102      	movs	r1, #2
     71c:	6893      	ldr	r3, [r2, #8]
     71e:	4219      	tst	r1, r3
     720:	d1fc      	bne.n	71c <configure_tcc+0x78>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
     722:	6811      	ldr	r1, [r2, #0]
     724:	2302      	movs	r3, #2
     726:	430b      	orrs	r3, r1
     728:	6013      	str	r3, [r2, #0]
	tcc_enable(&tcc_instance);
	
}
     72a:	bd70      	pop	{r4, r5, r6, pc}
     72c:	2000014c 	.word	0x2000014c
     730:	000ff80f 	.word	0x000ff80f
     734:	42002000 	.word	0x42002000
     738:	200001c4 	.word	0x200001c4
     73c:	00000d15 	.word	0x00000d15
     740:	0000ffff 	.word	0x0000ffff
     744:	00000e61 	.word	0x00000e61

00000748 <configure_tc>:
 */ 

#include <asf.h>
#include "ultrasonic.h"

void configure_tc(void){
     748:	b510      	push	{r4, lr}
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
     74a:	4a15      	ldr	r2, [pc, #84]	; (7a0 <configure_tc+0x58>)
     74c:	2300      	movs	r3, #0
     74e:	2100      	movs	r1, #0
     750:	7013      	strb	r3, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
     752:	7093      	strb	r3, [r2, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
     754:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
     756:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
     758:	2000      	movs	r0, #0
     75a:	7050      	strb	r0, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
     75c:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
     75e:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
     760:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
     762:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
     764:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
     766:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
     768:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
     76a:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
     76c:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
     76e:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
     770:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
     772:	8553      	strh	r3, [r2, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
     774:	8593      	strh	r3, [r2, #44]	; 0x2c
	tc_get_config_defaults(&config_tc);
	config_tc.counter_size = TC_COUNTER_SIZE_16BIT;
	config_tc.clock_source = GCLK_GENERATOR_0;
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER_DIV8;
     776:	23c0      	movs	r3, #192	; 0xc0
     778:	009b      	lsls	r3, r3, #2
     77a:	8093      	strh	r3, [r2, #4]
	config_tc.enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = true;
     77c:	2301      	movs	r3, #1
     77e:	72d3      	strb	r3, [r2, #11]
	tc_init(&tc_instance, TC3, &config_tc);
     780:	4c08      	ldr	r4, [pc, #32]	; (7a4 <configure_tc+0x5c>)
     782:	4909      	ldr	r1, [pc, #36]	; (7a8 <configure_tc+0x60>)
     784:	0020      	movs	r0, r4
     786:	4b09      	ldr	r3, [pc, #36]	; (7ac <configure_tc+0x64>)
     788:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     78a:	6822      	ldr	r2, [r4, #0]

	while (tc_is_syncing(module_inst)) {
     78c:	217f      	movs	r1, #127	; 0x7f
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     78e:	7bd3      	ldrb	r3, [r2, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
     790:	438b      	bics	r3, r1
     792:	d1fc      	bne.n	78e <configure_tc+0x46>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
     794:	8811      	ldrh	r1, [r2, #0]
     796:	3302      	adds	r3, #2
     798:	430b      	orrs	r3, r1
     79a:	8013      	strh	r3, [r2, #0]
	tc_enable(&tc_instance);
}
     79c:	bd10      	pop	{r4, pc}
     79e:	46c0      	nop			; (mov r8, r8)
     7a0:	2000018c 	.word	0x2000018c
     7a4:	20000268 	.word	0x20000268
     7a8:	42002c00 	.word	0x42002c00
     7ac:	0000139d 	.word	0x0000139d

000007b0 <HC_SR04_init>:

void HC_SR04_init(void){
     7b0:	b530      	push	{r4, r5, lr}
     7b2:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     7b4:	ad01      	add	r5, sp, #4
     7b6:	2301      	movs	r3, #1
     7b8:	706b      	strb	r3, [r5, #1]
	config->powersave  = false;
     7ba:	2200      	movs	r2, #0
     7bc:	70aa      	strb	r2, [r5, #2]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     7be:	4669      	mov	r1, sp
     7c0:	700a      	strb	r2, [r1, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     7c2:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
     7c4:	708a      	strb	r2, [r1, #2]
	port_get_config_defaults(&pin_conf_trig);
	
	struct port_config pin_conf_echo;
	port_get_config_defaults(&pin_conf_echo);
	
	pin_conf_trig.direction = PORT_PIN_DIR_OUTPUT;
     7c6:	702b      	strb	r3, [r5, #0]
	
	pin_conf_echo.direction = PORT_PIN_DIR_INPUT;
	pin_conf_echo.input_pull = PORT_PIN_PULL_UP;
	
	//Head
	port_pin_set_config(GPIO_PIN_ULTRA11, &pin_conf_trig);
     7c8:	0029      	movs	r1, r5
     7ca:	201c      	movs	r0, #28
     7cc:	4c09      	ldr	r4, [pc, #36]	; (7f4 <HC_SR04_init+0x44>)
     7ce:	47a0      	blx	r4
	port_pin_set_config(GPIO_PIN_ULTRA12, &pin_conf_echo);
     7d0:	4669      	mov	r1, sp
     7d2:	200d      	movs	r0, #13
     7d4:	47a0      	blx	r4
	
	//Left
	port_pin_set_config(GPIO_PIN_ULTRA21, &pin_conf_echo);
     7d6:	4669      	mov	r1, sp
     7d8:	2008      	movs	r0, #8
     7da:	47a0      	blx	r4
	port_pin_set_config(GPIO_PIN_ULTRA22, &pin_conf_trig);
     7dc:	0029      	movs	r1, r5
     7de:	200e      	movs	r0, #14
     7e0:	47a0      	blx	r4
	
	//Right
	port_pin_set_config(GPIO_PIN_ULTRA31, &pin_conf_echo);
     7e2:	4669      	mov	r1, sp
     7e4:	200f      	movs	r0, #15
     7e6:	47a0      	blx	r4
	port_pin_set_config(GPIO_PIN_ULTRA32, &pin_conf_trig);
     7e8:	0029      	movs	r1, r5
     7ea:	2017      	movs	r0, #23
     7ec:	47a0      	blx	r4
	
}
     7ee:	b003      	add	sp, #12
     7f0:	bd30      	pop	{r4, r5, pc}
     7f2:	46c0      	nop			; (mov r8, r8)
     7f4:	00001dbd 	.word	0x00001dbd

000007f8 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     7f8:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     7fa:	2200      	movs	r2, #0
     7fc:	4b15      	ldr	r3, [pc, #84]	; (854 <EIC_Handler+0x5c>)
     7fe:	701a      	strb	r2, [r3, #0]
     800:	2300      	movs	r3, #0
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     802:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     804:	4e14      	ldr	r6, [pc, #80]	; (858 <EIC_Handler+0x60>)

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     806:	4c13      	ldr	r4, [pc, #76]	; (854 <EIC_Handler+0x5c>)
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     808:	2b1f      	cmp	r3, #31
     80a:	d919      	bls.n	840 <EIC_Handler+0x48>
     80c:	e00f      	b.n	82e <EIC_Handler+0x36>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     80e:	2100      	movs	r1, #0
     810:	e000      	b.n	814 <EIC_Handler+0x1c>

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     812:	4912      	ldr	r1, [pc, #72]	; (85c <EIC_Handler+0x64>)
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     814:	610a      	str	r2, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     816:	009b      	lsls	r3, r3, #2
     818:	599b      	ldr	r3, [r3, r6]
     81a:	2b00      	cmp	r3, #0
     81c:	d000      	beq.n	820 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     81e:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     820:	7823      	ldrb	r3, [r4, #0]
     822:	3301      	adds	r3, #1
     824:	b2db      	uxtb	r3, r3
     826:	7023      	strb	r3, [r4, #0]
     828:	2b0f      	cmp	r3, #15
     82a:	d9ed      	bls.n	808 <EIC_Handler+0x10>
     82c:	e011      	b.n	852 <EIC_Handler+0x5a>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     82e:	0029      	movs	r1, r5
     830:	4019      	ands	r1, r3
     832:	2201      	movs	r2, #1
     834:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
     836:	2100      	movs	r1, #0
     838:	6909      	ldr	r1, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     83a:	4211      	tst	r1, r2
     83c:	d1e7      	bne.n	80e <EIC_Handler+0x16>
     83e:	e7ef      	b.n	820 <EIC_Handler+0x28>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     840:	0029      	movs	r1, r5
     842:	4019      	ands	r1, r3
     844:	2201      	movs	r2, #1
     846:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
     848:	4904      	ldr	r1, [pc, #16]	; (85c <EIC_Handler+0x64>)
     84a:	6909      	ldr	r1, [r1, #16]
     84c:	4211      	tst	r1, r2
     84e:	d1e0      	bne.n	812 <EIC_Handler+0x1a>
     850:	e7e6      	b.n	820 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
     852:	bd70      	pop	{r4, r5, r6, pc}
     854:	20000288 	.word	0x20000288
     858:	2000028c 	.word	0x2000028c
     85c:	40001800 	.word	0x40001800

00000860 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     860:	4a04      	ldr	r2, [pc, #16]	; (874 <_extint_enable+0x14>)
     862:	7811      	ldrb	r1, [r2, #0]
     864:	2302      	movs	r3, #2
     866:	430b      	orrs	r3, r1
     868:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     86a:	7853      	ldrb	r3, [r2, #1]
     86c:	b25b      	sxtb	r3, r3
     86e:	2b00      	cmp	r3, #0
     870:	dbfb      	blt.n	86a <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     872:	4770      	bx	lr
     874:	40001800 	.word	0x40001800

00000878 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
     878:	b500      	push	{lr}
     87a:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     87c:	4a12      	ldr	r2, [pc, #72]	; (8c8 <_system_extint_init+0x50>)
     87e:	6991      	ldr	r1, [r2, #24]
     880:	2340      	movs	r3, #64	; 0x40
     882:	430b      	orrs	r3, r1
     884:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     886:	a901      	add	r1, sp, #4
     888:	2300      	movs	r3, #0
     88a:	700b      	strb	r3, [r1, #0]

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     88c:	2005      	movs	r0, #5
     88e:	4b0f      	ldr	r3, [pc, #60]	; (8cc <_system_extint_init+0x54>)
     890:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
     892:	2005      	movs	r0, #5
     894:	4b0e      	ldr	r3, [pc, #56]	; (8d0 <_system_extint_init+0x58>)
     896:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     898:	4a0e      	ldr	r2, [pc, #56]	; (8d4 <_system_extint_init+0x5c>)
     89a:	7811      	ldrb	r1, [r2, #0]
     89c:	2301      	movs	r3, #1
     89e:	430b      	orrs	r3, r1
     8a0:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     8a2:	7853      	ldrb	r3, [r2, #1]
     8a4:	b25b      	sxtb	r3, r3
     8a6:	2b00      	cmp	r3, #0
     8a8:	dbfb      	blt.n	8a2 <_system_extint_init+0x2a>
     8aa:	4b0b      	ldr	r3, [pc, #44]	; (8d8 <_system_extint_init+0x60>)
     8ac:	0019      	movs	r1, r3
     8ae:	3140      	adds	r1, #64	; 0x40

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
     8b0:	2200      	movs	r2, #0
     8b2:	c304      	stmia	r3!, {r2}
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     8b4:	4299      	cmp	r1, r3
     8b6:	d1fc      	bne.n	8b2 <_system_extint_init+0x3a>
     8b8:	2210      	movs	r2, #16
     8ba:	4b08      	ldr	r3, [pc, #32]	; (8dc <_system_extint_init+0x64>)
     8bc:	601a      	str	r2, [r3, #0]
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
     8be:	4b08      	ldr	r3, [pc, #32]	; (8e0 <_system_extint_init+0x68>)
     8c0:	4798      	blx	r3
}
     8c2:	b003      	add	sp, #12
     8c4:	bd00      	pop	{pc}
     8c6:	46c0      	nop			; (mov r8, r8)
     8c8:	40000400 	.word	0x40000400
     8cc:	00002225 	.word	0x00002225
     8d0:	00002199 	.word	0x00002199
     8d4:	40001800 	.word	0x40001800
     8d8:	2000028c 	.word	0x2000028c
     8dc:	e000e100 	.word	0xe000e100
     8e0:	00000861 	.word	0x00000861

000008e4 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     8e4:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     8e6:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     8e8:	2340      	movs	r3, #64	; 0x40
     8ea:	2400      	movs	r4, #0
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     8ec:	4281      	cmp	r1, r0
     8ee:	d201      	bcs.n	8f4 <_sercom_get_sync_baud_val+0x10>
     8f0:	e00a      	b.n	908 <_sercom_get_sync_baud_val+0x24>

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
		baud_calculated++;
     8f2:	001c      	movs	r4, r3
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
     8f4:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     8f6:	1c63      	adds	r3, r4, #1
     8f8:	b29b      	uxth	r3, r3
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     8fa:	4288      	cmp	r0, r1
     8fc:	d9f9      	bls.n	8f2 <_sercom_get_sync_baud_val+0xe>

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     8fe:	2340      	movs	r3, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     900:	2cff      	cmp	r4, #255	; 0xff
     902:	d801      	bhi.n	908 <_sercom_get_sync_baud_val+0x24>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
     904:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     906:	2300      	movs	r3, #0
	}
}
     908:	0018      	movs	r0, r3
     90a:	bd10      	pop	{r4, pc}

0000090c <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     90c:	b5f0      	push	{r4, r5, r6, r7, lr}
     90e:	465f      	mov	r7, fp
     910:	4656      	mov	r6, sl
     912:	464d      	mov	r5, r9
     914:	4644      	mov	r4, r8
     916:	b4f0      	push	{r4, r5, r6, r7}
     918:	b089      	sub	sp, #36	; 0x24
     91a:	000c      	movs	r4, r1
     91c:	9205      	str	r2, [sp, #20]
     91e:	aa12      	add	r2, sp, #72	; 0x48
     920:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     922:	0002      	movs	r2, r0
     924:	434a      	muls	r2, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     926:	2540      	movs	r5, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     928:	42a2      	cmp	r2, r4
     92a:	d900      	bls.n	92e <_sercom_get_async_baud_val+0x22>
     92c:	e0c6      	b.n	abc <_sercom_get_async_baud_val+0x1b0>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     92e:	2b00      	cmp	r3, #0
     930:	d151      	bne.n	9d6 <_sercom_get_async_baud_val+0xca>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     932:	0002      	movs	r2, r0
     934:	0008      	movs	r0, r1
     936:	2100      	movs	r1, #0
     938:	4d64      	ldr	r5, [pc, #400]	; (acc <_sercom_get_async_baud_val+0x1c0>)
     93a:	47a8      	blx	r5
     93c:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
     93e:	0026      	movs	r6, r4
     940:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     942:	2300      	movs	r3, #0
     944:	2400      	movs	r4, #0
     946:	9300      	str	r3, [sp, #0]
     948:	9401      	str	r4, [sp, #4]
     94a:	2200      	movs	r2, #0
     94c:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     94e:	203f      	movs	r0, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     950:	2120      	movs	r1, #32
     952:	468c      	mov	ip, r1
     954:	391f      	subs	r1, #31
     956:	9602      	str	r6, [sp, #8]
     958:	9703      	str	r7, [sp, #12]
     95a:	2420      	movs	r4, #32
     95c:	4264      	negs	r4, r4
     95e:	1904      	adds	r4, r0, r4
     960:	d403      	bmi.n	96a <_sercom_get_async_baud_val+0x5e>
     962:	000d      	movs	r5, r1
     964:	40a5      	lsls	r5, r4
     966:	46a8      	mov	r8, r5
     968:	e004      	b.n	974 <_sercom_get_async_baud_val+0x68>
     96a:	4664      	mov	r4, ip
     96c:	1a24      	subs	r4, r4, r0
     96e:	000d      	movs	r5, r1
     970:	40e5      	lsrs	r5, r4
     972:	46a8      	mov	r8, r5
     974:	000c      	movs	r4, r1
     976:	4084      	lsls	r4, r0
     978:	46a1      	mov	r9, r4

		r = r << 1;
     97a:	0014      	movs	r4, r2
     97c:	001d      	movs	r5, r3
     97e:	18a4      	adds	r4, r4, r2
     980:	415d      	adcs	r5, r3
     982:	0022      	movs	r2, r4
     984:	002b      	movs	r3, r5

		if (n & bit_shift) {
     986:	4646      	mov	r6, r8
     988:	465f      	mov	r7, fp
     98a:	423e      	tst	r6, r7
     98c:	d003      	beq.n	996 <_sercom_get_async_baud_val+0x8a>
			r |= 0x01;
     98e:	000e      	movs	r6, r1
     990:	4326      	orrs	r6, r4
     992:	0032      	movs	r2, r6
     994:	002b      	movs	r3, r5
		}

		if (r >= d) {
     996:	9c02      	ldr	r4, [sp, #8]
     998:	9d03      	ldr	r5, [sp, #12]
     99a:	429d      	cmp	r5, r3
     99c:	d80f      	bhi.n	9be <_sercom_get_async_baud_val+0xb2>
     99e:	d101      	bne.n	9a4 <_sercom_get_async_baud_val+0x98>
     9a0:	4294      	cmp	r4, r2
     9a2:	d80c      	bhi.n	9be <_sercom_get_async_baud_val+0xb2>
			r = r - d;
     9a4:	9c02      	ldr	r4, [sp, #8]
     9a6:	9d03      	ldr	r5, [sp, #12]
     9a8:	1b12      	subs	r2, r2, r4
     9aa:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     9ac:	464d      	mov	r5, r9
     9ae:	9e00      	ldr	r6, [sp, #0]
     9b0:	9f01      	ldr	r7, [sp, #4]
     9b2:	4335      	orrs	r5, r6
     9b4:	003c      	movs	r4, r7
     9b6:	4646      	mov	r6, r8
     9b8:	4334      	orrs	r4, r6
     9ba:	9500      	str	r5, [sp, #0]
     9bc:	9401      	str	r4, [sp, #4]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     9be:	3801      	subs	r0, #1
     9c0:	d2cb      	bcs.n	95a <_sercom_get_async_baud_val+0x4e>
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
     9c2:	2200      	movs	r2, #0
     9c4:	2301      	movs	r3, #1
     9c6:	9800      	ldr	r0, [sp, #0]
     9c8:	9901      	ldr	r1, [sp, #4]
     9ca:	1a12      	subs	r2, r2, r0
     9cc:	418b      	sbcs	r3, r1
     9ce:	0c12      	lsrs	r2, r2, #16
     9d0:	041b      	lsls	r3, r3, #16
     9d2:	431a      	orrs	r2, r3
     9d4:	e06f      	b.n	ab6 <_sercom_get_async_baud_val+0x1aa>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
     9d6:	2200      	movs	r2, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     9d8:	2b01      	cmp	r3, #1
     9da:	d16c      	bne.n	ab6 <_sercom_get_async_baud_val+0x1aa>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     9dc:	0f63      	lsrs	r3, r4, #29
     9de:	9304      	str	r3, [sp, #16]
     9e0:	00e3      	lsls	r3, r4, #3
     9e2:	4698      	mov	r8, r3
			temp2 = ((uint64_t)baudrate * sample_num);
     9e4:	000a      	movs	r2, r1
     9e6:	2300      	movs	r3, #0
     9e8:	2100      	movs	r1, #0
     9ea:	4c38      	ldr	r4, [pc, #224]	; (acc <_sercom_get_async_baud_val+0x1c0>)
     9ec:	47a0      	blx	r4
     9ee:	0004      	movs	r4, r0
     9f0:	000d      	movs	r5, r1
     9f2:	2300      	movs	r3, #0
     9f4:	469c      	mov	ip, r3
     9f6:	9306      	str	r3, [sp, #24]
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
     9f8:	3320      	adds	r3, #32
     9fa:	469b      	mov	fp, r3
     9fc:	2601      	movs	r6, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
     9fe:	4663      	mov	r3, ip
     a00:	9307      	str	r3, [sp, #28]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     a02:	2300      	movs	r3, #0
     a04:	9302      	str	r3, [sp, #8]
     a06:	2200      	movs	r2, #0
     a08:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     a0a:	213f      	movs	r1, #63	; 0x3f
     a0c:	9400      	str	r4, [sp, #0]
     a0e:	9501      	str	r5, [sp, #4]
     a10:	000f      	movs	r7, r1
		bit_shift = (uint64_t)1 << i;
     a12:	2120      	movs	r1, #32
     a14:	4249      	negs	r1, r1
     a16:	1879      	adds	r1, r7, r1
     a18:	d403      	bmi.n	a22 <_sercom_get_async_baud_val+0x116>
     a1a:	0030      	movs	r0, r6
     a1c:	4088      	lsls	r0, r1
     a1e:	4684      	mov	ip, r0
     a20:	e004      	b.n	a2c <_sercom_get_async_baud_val+0x120>
     a22:	4659      	mov	r1, fp
     a24:	1bc9      	subs	r1, r1, r7
     a26:	0030      	movs	r0, r6
     a28:	40c8      	lsrs	r0, r1
     a2a:	4684      	mov	ip, r0
     a2c:	0031      	movs	r1, r6
     a2e:	40b9      	lsls	r1, r7
     a30:	4689      	mov	r9, r1

		r = r << 1;
     a32:	0010      	movs	r0, r2
     a34:	0019      	movs	r1, r3
     a36:	1880      	adds	r0, r0, r2
     a38:	4159      	adcs	r1, r3
     a3a:	0002      	movs	r2, r0
     a3c:	000b      	movs	r3, r1

		if (n & bit_shift) {
     a3e:	4644      	mov	r4, r8
     a40:	464d      	mov	r5, r9
     a42:	402c      	ands	r4, r5
     a44:	46a2      	mov	sl, r4
     a46:	4664      	mov	r4, ip
     a48:	9d04      	ldr	r5, [sp, #16]
     a4a:	402c      	ands	r4, r5
     a4c:	46a4      	mov	ip, r4
     a4e:	4654      	mov	r4, sl
     a50:	4665      	mov	r5, ip
     a52:	432c      	orrs	r4, r5
     a54:	d003      	beq.n	a5e <_sercom_get_async_baud_val+0x152>
			r |= 0x01;
     a56:	0034      	movs	r4, r6
     a58:	4304      	orrs	r4, r0
     a5a:	0022      	movs	r2, r4
     a5c:	000b      	movs	r3, r1
		}

		if (r >= d) {
     a5e:	9800      	ldr	r0, [sp, #0]
     a60:	9901      	ldr	r1, [sp, #4]
     a62:	4299      	cmp	r1, r3
     a64:	d80a      	bhi.n	a7c <_sercom_get_async_baud_val+0x170>
     a66:	d101      	bne.n	a6c <_sercom_get_async_baud_val+0x160>
     a68:	4290      	cmp	r0, r2
     a6a:	d807      	bhi.n	a7c <_sercom_get_async_baud_val+0x170>
			r = r - d;
     a6c:	9800      	ldr	r0, [sp, #0]
     a6e:	9901      	ldr	r1, [sp, #4]
     a70:	1a12      	subs	r2, r2, r0
     a72:	418b      	sbcs	r3, r1
			q |= bit_shift;
     a74:	9902      	ldr	r1, [sp, #8]
     a76:	4648      	mov	r0, r9
     a78:	4301      	orrs	r1, r0
     a7a:	9102      	str	r1, [sp, #8]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     a7c:	3f01      	subs	r7, #1
     a7e:	d2c8      	bcs.n	a12 <_sercom_get_async_baud_val+0x106>
     a80:	9c00      	ldr	r4, [sp, #0]
     a82:	9d01      	ldr	r5, [sp, #4]
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
     a84:	9902      	ldr	r1, [sp, #8]
     a86:	9a07      	ldr	r2, [sp, #28]
     a88:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
     a8a:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
     a8c:	4910      	ldr	r1, [pc, #64]	; (ad0 <_sercom_get_async_baud_val+0x1c4>)
     a8e:	428b      	cmp	r3, r1
     a90:	d90b      	bls.n	aaa <_sercom_get_async_baud_val+0x19e>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     a92:	9b06      	ldr	r3, [sp, #24]
     a94:	3301      	adds	r3, #1
     a96:	b2db      	uxtb	r3, r3
     a98:	0019      	movs	r1, r3
     a9a:	9306      	str	r3, [sp, #24]
     a9c:	0013      	movs	r3, r2
     a9e:	3301      	adds	r3, #1
     aa0:	9307      	str	r3, [sp, #28]
     aa2:	2908      	cmp	r1, #8
     aa4:	d1ad      	bne.n	a02 <_sercom_get_async_baud_val+0xf6>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     aa6:	2540      	movs	r5, #64	; 0x40
     aa8:	e008      	b.n	abc <_sercom_get_async_baud_val+0x1b0>
     aaa:	2540      	movs	r5, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
     aac:	9a06      	ldr	r2, [sp, #24]
     aae:	2a08      	cmp	r2, #8
     ab0:	d004      	beq.n	abc <_sercom_get_async_baud_val+0x1b0>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
     ab2:	0352      	lsls	r2, r2, #13
     ab4:	431a      	orrs	r2, r3
	}

	*baudval = baud_calculated;
     ab6:	9b05      	ldr	r3, [sp, #20]
     ab8:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
     aba:	2500      	movs	r5, #0
}
     abc:	0028      	movs	r0, r5
     abe:	b009      	add	sp, #36	; 0x24
     ac0:	bc3c      	pop	{r2, r3, r4, r5}
     ac2:	4690      	mov	r8, r2
     ac4:	4699      	mov	r9, r3
     ac6:	46a2      	mov	sl, r4
     ac8:	46ab      	mov	fp, r5
     aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
     acc:	00005441 	.word	0x00005441
     ad0:	00001fff 	.word	0x00001fff

00000ad4 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     ad4:	b510      	push	{r4, lr}
     ad6:	b082      	sub	sp, #8
     ad8:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     ada:	4b0e      	ldr	r3, [pc, #56]	; (b14 <sercom_set_gclk_generator+0x40>)
     adc:	781b      	ldrb	r3, [r3, #0]
     ade:	2b00      	cmp	r3, #0
     ae0:	d001      	beq.n	ae6 <sercom_set_gclk_generator+0x12>
     ae2:	2900      	cmp	r1, #0
     ae4:	d00d      	beq.n	b02 <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     ae6:	a901      	add	r1, sp, #4
     ae8:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     aea:	2013      	movs	r0, #19
     aec:	4b0a      	ldr	r3, [pc, #40]	; (b18 <sercom_set_gclk_generator+0x44>)
     aee:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     af0:	2013      	movs	r0, #19
     af2:	4b0a      	ldr	r3, [pc, #40]	; (b1c <sercom_set_gclk_generator+0x48>)
     af4:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
     af6:	4b07      	ldr	r3, [pc, #28]	; (b14 <sercom_set_gclk_generator+0x40>)
     af8:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     afa:	2201      	movs	r2, #1
     afc:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     afe:	2000      	movs	r0, #0
     b00:	e006      	b.n	b10 <sercom_set_gclk_generator+0x3c>
	} else if (generator_source == _sercom_config.generator_source) {
     b02:	4b04      	ldr	r3, [pc, #16]	; (b14 <sercom_set_gclk_generator+0x40>)
     b04:	785b      	ldrb	r3, [r3, #1]
     b06:	4283      	cmp	r3, r0
     b08:	d001      	beq.n	b0e <sercom_set_gclk_generator+0x3a>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     b0a:	201d      	movs	r0, #29
     b0c:	e000      	b.n	b10 <sercom_set_gclk_generator+0x3c>
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config */
		return STATUS_OK;
     b0e:	2000      	movs	r0, #0
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     b10:	b002      	add	sp, #8
     b12:	bd10      	pop	{r4, pc}
     b14:	200000c4 	.word	0x200000c4
     b18:	00002225 	.word	0x00002225
     b1c:	00002199 	.word	0x00002199

00000b20 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     b20:	4b44      	ldr	r3, [pc, #272]	; (c34 <_sercom_get_default_pad+0x114>)
     b22:	4298      	cmp	r0, r3
     b24:	d033      	beq.n	b8e <_sercom_get_default_pad+0x6e>
     b26:	d806      	bhi.n	b36 <_sercom_get_default_pad+0x16>
     b28:	4b43      	ldr	r3, [pc, #268]	; (c38 <_sercom_get_default_pad+0x118>)
     b2a:	4298      	cmp	r0, r3
     b2c:	d00d      	beq.n	b4a <_sercom_get_default_pad+0x2a>
     b2e:	4b43      	ldr	r3, [pc, #268]	; (c3c <_sercom_get_default_pad+0x11c>)
     b30:	4298      	cmp	r0, r3
     b32:	d01b      	beq.n	b6c <_sercom_get_default_pad+0x4c>
     b34:	e06f      	b.n	c16 <_sercom_get_default_pad+0xf6>
     b36:	4b42      	ldr	r3, [pc, #264]	; (c40 <_sercom_get_default_pad+0x120>)
     b38:	4298      	cmp	r0, r3
     b3a:	d04a      	beq.n	bd2 <_sercom_get_default_pad+0xb2>
     b3c:	4b41      	ldr	r3, [pc, #260]	; (c44 <_sercom_get_default_pad+0x124>)
     b3e:	4298      	cmp	r0, r3
     b40:	d058      	beq.n	bf4 <_sercom_get_default_pad+0xd4>
     b42:	4b41      	ldr	r3, [pc, #260]	; (c48 <_sercom_get_default_pad+0x128>)
     b44:	4298      	cmp	r0, r3
     b46:	d166      	bne.n	c16 <_sercom_get_default_pad+0xf6>
     b48:	e032      	b.n	bb0 <_sercom_get_default_pad+0x90>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     b4a:	2901      	cmp	r1, #1
     b4c:	d006      	beq.n	b5c <_sercom_get_default_pad+0x3c>
     b4e:	2900      	cmp	r1, #0
     b50:	d063      	beq.n	c1a <_sercom_get_default_pad+0xfa>
     b52:	2902      	cmp	r1, #2
     b54:	d006      	beq.n	b64 <_sercom_get_default_pad+0x44>
     b56:	2903      	cmp	r1, #3
     b58:	d006      	beq.n	b68 <_sercom_get_default_pad+0x48>
     b5a:	e001      	b.n	b60 <_sercom_get_default_pad+0x40>
     b5c:	483b      	ldr	r0, [pc, #236]	; (c4c <_sercom_get_default_pad+0x12c>)
     b5e:	e067      	b.n	c30 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     b60:	2000      	movs	r0, #0
     b62:	e065      	b.n	c30 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     b64:	483a      	ldr	r0, [pc, #232]	; (c50 <_sercom_get_default_pad+0x130>)
     b66:	e063      	b.n	c30 <_sercom_get_default_pad+0x110>
     b68:	483a      	ldr	r0, [pc, #232]	; (c54 <_sercom_get_default_pad+0x134>)
     b6a:	e061      	b.n	c30 <_sercom_get_default_pad+0x110>
     b6c:	2901      	cmp	r1, #1
     b6e:	d006      	beq.n	b7e <_sercom_get_default_pad+0x5e>
     b70:	2900      	cmp	r1, #0
     b72:	d054      	beq.n	c1e <_sercom_get_default_pad+0xfe>
     b74:	2902      	cmp	r1, #2
     b76:	d006      	beq.n	b86 <_sercom_get_default_pad+0x66>
     b78:	2903      	cmp	r1, #3
     b7a:	d006      	beq.n	b8a <_sercom_get_default_pad+0x6a>
     b7c:	e001      	b.n	b82 <_sercom_get_default_pad+0x62>
     b7e:	4836      	ldr	r0, [pc, #216]	; (c58 <_sercom_get_default_pad+0x138>)
     b80:	e056      	b.n	c30 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     b82:	2000      	movs	r0, #0
     b84:	e054      	b.n	c30 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     b86:	4835      	ldr	r0, [pc, #212]	; (c5c <_sercom_get_default_pad+0x13c>)
     b88:	e052      	b.n	c30 <_sercom_get_default_pad+0x110>
     b8a:	4835      	ldr	r0, [pc, #212]	; (c60 <_sercom_get_default_pad+0x140>)
     b8c:	e050      	b.n	c30 <_sercom_get_default_pad+0x110>
     b8e:	2901      	cmp	r1, #1
     b90:	d006      	beq.n	ba0 <_sercom_get_default_pad+0x80>
     b92:	2900      	cmp	r1, #0
     b94:	d045      	beq.n	c22 <_sercom_get_default_pad+0x102>
     b96:	2902      	cmp	r1, #2
     b98:	d006      	beq.n	ba8 <_sercom_get_default_pad+0x88>
     b9a:	2903      	cmp	r1, #3
     b9c:	d006      	beq.n	bac <_sercom_get_default_pad+0x8c>
     b9e:	e001      	b.n	ba4 <_sercom_get_default_pad+0x84>
     ba0:	4830      	ldr	r0, [pc, #192]	; (c64 <_sercom_get_default_pad+0x144>)
     ba2:	e045      	b.n	c30 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     ba4:	2000      	movs	r0, #0
     ba6:	e043      	b.n	c30 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     ba8:	482f      	ldr	r0, [pc, #188]	; (c68 <_sercom_get_default_pad+0x148>)
     baa:	e041      	b.n	c30 <_sercom_get_default_pad+0x110>
     bac:	482f      	ldr	r0, [pc, #188]	; (c6c <_sercom_get_default_pad+0x14c>)
     bae:	e03f      	b.n	c30 <_sercom_get_default_pad+0x110>
     bb0:	2901      	cmp	r1, #1
     bb2:	d006      	beq.n	bc2 <_sercom_get_default_pad+0xa2>
     bb4:	2900      	cmp	r1, #0
     bb6:	d036      	beq.n	c26 <_sercom_get_default_pad+0x106>
     bb8:	2902      	cmp	r1, #2
     bba:	d006      	beq.n	bca <_sercom_get_default_pad+0xaa>
     bbc:	2903      	cmp	r1, #3
     bbe:	d006      	beq.n	bce <_sercom_get_default_pad+0xae>
     bc0:	e001      	b.n	bc6 <_sercom_get_default_pad+0xa6>
     bc2:	482b      	ldr	r0, [pc, #172]	; (c70 <_sercom_get_default_pad+0x150>)
     bc4:	e034      	b.n	c30 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     bc6:	2000      	movs	r0, #0
     bc8:	e032      	b.n	c30 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     bca:	482a      	ldr	r0, [pc, #168]	; (c74 <_sercom_get_default_pad+0x154>)
     bcc:	e030      	b.n	c30 <_sercom_get_default_pad+0x110>
     bce:	482a      	ldr	r0, [pc, #168]	; (c78 <_sercom_get_default_pad+0x158>)
     bd0:	e02e      	b.n	c30 <_sercom_get_default_pad+0x110>
     bd2:	2901      	cmp	r1, #1
     bd4:	d006      	beq.n	be4 <_sercom_get_default_pad+0xc4>
     bd6:	2900      	cmp	r1, #0
     bd8:	d027      	beq.n	c2a <_sercom_get_default_pad+0x10a>
     bda:	2902      	cmp	r1, #2
     bdc:	d006      	beq.n	bec <_sercom_get_default_pad+0xcc>
     bde:	2903      	cmp	r1, #3
     be0:	d006      	beq.n	bf0 <_sercom_get_default_pad+0xd0>
     be2:	e001      	b.n	be8 <_sercom_get_default_pad+0xc8>
     be4:	4825      	ldr	r0, [pc, #148]	; (c7c <_sercom_get_default_pad+0x15c>)
     be6:	e023      	b.n	c30 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     be8:	2000      	movs	r0, #0
     bea:	e021      	b.n	c30 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     bec:	4824      	ldr	r0, [pc, #144]	; (c80 <_sercom_get_default_pad+0x160>)
     bee:	e01f      	b.n	c30 <_sercom_get_default_pad+0x110>
     bf0:	4824      	ldr	r0, [pc, #144]	; (c84 <_sercom_get_default_pad+0x164>)
     bf2:	e01d      	b.n	c30 <_sercom_get_default_pad+0x110>
     bf4:	2901      	cmp	r1, #1
     bf6:	d006      	beq.n	c06 <_sercom_get_default_pad+0xe6>
     bf8:	2900      	cmp	r1, #0
     bfa:	d018      	beq.n	c2e <_sercom_get_default_pad+0x10e>
     bfc:	2902      	cmp	r1, #2
     bfe:	d006      	beq.n	c0e <_sercom_get_default_pad+0xee>
     c00:	2903      	cmp	r1, #3
     c02:	d006      	beq.n	c12 <_sercom_get_default_pad+0xf2>
     c04:	e001      	b.n	c0a <_sercom_get_default_pad+0xea>
     c06:	4820      	ldr	r0, [pc, #128]	; (c88 <_sercom_get_default_pad+0x168>)
     c08:	e012      	b.n	c30 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     c0a:	2000      	movs	r0, #0
     c0c:	e010      	b.n	c30 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     c0e:	481f      	ldr	r0, [pc, #124]	; (c8c <_sercom_get_default_pad+0x16c>)
     c10:	e00e      	b.n	c30 <_sercom_get_default_pad+0x110>
     c12:	481f      	ldr	r0, [pc, #124]	; (c90 <_sercom_get_default_pad+0x170>)
     c14:	e00c      	b.n	c30 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     c16:	2000      	movs	r0, #0
     c18:	e00a      	b.n	c30 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     c1a:	481e      	ldr	r0, [pc, #120]	; (c94 <_sercom_get_default_pad+0x174>)
     c1c:	e008      	b.n	c30 <_sercom_get_default_pad+0x110>
     c1e:	2003      	movs	r0, #3
     c20:	e006      	b.n	c30 <_sercom_get_default_pad+0x110>
     c22:	481d      	ldr	r0, [pc, #116]	; (c98 <_sercom_get_default_pad+0x178>)
     c24:	e004      	b.n	c30 <_sercom_get_default_pad+0x110>
     c26:	481d      	ldr	r0, [pc, #116]	; (c9c <_sercom_get_default_pad+0x17c>)
     c28:	e002      	b.n	c30 <_sercom_get_default_pad+0x110>
     c2a:	481d      	ldr	r0, [pc, #116]	; (ca0 <_sercom_get_default_pad+0x180>)
     c2c:	e000      	b.n	c30 <_sercom_get_default_pad+0x110>
     c2e:	481d      	ldr	r0, [pc, #116]	; (ca4 <_sercom_get_default_pad+0x184>)
	}

	Assert(false);
	return 0;
}
     c30:	4770      	bx	lr
     c32:	46c0      	nop			; (mov r8, r8)
     c34:	42001000 	.word	0x42001000
     c38:	42000800 	.word	0x42000800
     c3c:	42000c00 	.word	0x42000c00
     c40:	42001800 	.word	0x42001800
     c44:	42001c00 	.word	0x42001c00
     c48:	42001400 	.word	0x42001400
     c4c:	00050003 	.word	0x00050003
     c50:	00060003 	.word	0x00060003
     c54:	00070003 	.word	0x00070003
     c58:	00010003 	.word	0x00010003
     c5c:	001e0003 	.word	0x001e0003
     c60:	001f0003 	.word	0x001f0003
     c64:	000d0002 	.word	0x000d0002
     c68:	000e0002 	.word	0x000e0002
     c6c:	000f0002 	.word	0x000f0002
     c70:	00110003 	.word	0x00110003
     c74:	00120003 	.word	0x00120003
     c78:	00130003 	.word	0x00130003
     c7c:	003f0005 	.word	0x003f0005
     c80:	003e0005 	.word	0x003e0005
     c84:	00520005 	.word	0x00520005
     c88:	00170003 	.word	0x00170003
     c8c:	00180003 	.word	0x00180003
     c90:	00190003 	.word	0x00190003
     c94:	00040003 	.word	0x00040003
     c98:	000c0002 	.word	0x000c0002
     c9c:	00100003 	.word	0x00100003
     ca0:	00530005 	.word	0x00530005
     ca4:	00160003 	.word	0x00160003

00000ca8 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     ca8:	b530      	push	{r4, r5, lr}
     caa:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     cac:	4b0c      	ldr	r3, [pc, #48]	; (ce0 <_sercom_get_sercom_inst_index+0x38>)
     cae:	466a      	mov	r2, sp
     cb0:	cb32      	ldmia	r3!, {r1, r4, r5}
     cb2:	c232      	stmia	r2!, {r1, r4, r5}
     cb4:	cb32      	ldmia	r3!, {r1, r4, r5}
     cb6:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     cb8:	9b00      	ldr	r3, [sp, #0]
     cba:	4283      	cmp	r3, r0
     cbc:	d006      	beq.n	ccc <_sercom_get_sercom_inst_index+0x24>
     cbe:	2301      	movs	r3, #1
     cc0:	009a      	lsls	r2, r3, #2
     cc2:	4669      	mov	r1, sp
     cc4:	5852      	ldr	r2, [r2, r1]
     cc6:	4282      	cmp	r2, r0
     cc8:	d103      	bne.n	cd2 <_sercom_get_sercom_inst_index+0x2a>
     cca:	e000      	b.n	cce <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     ccc:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
     cce:	b2d8      	uxtb	r0, r3
     cd0:	e003      	b.n	cda <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     cd2:	3301      	adds	r3, #1
     cd4:	2b06      	cmp	r3, #6
     cd6:	d1f3      	bne.n	cc0 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     cd8:	2000      	movs	r0, #0
}
     cda:	b007      	add	sp, #28
     cdc:	bd30      	pop	{r4, r5, pc}
     cde:	46c0      	nop			; (mov r8, r8)
     ce0:	000070b0 	.word	0x000070b0

00000ce4 <_tcc_get_inst_index>:
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if (hw == tcc_modules[i]) {
     ce4:	4b08      	ldr	r3, [pc, #32]	; (d08 <_tcc_get_inst_index+0x24>)
     ce6:	4298      	cmp	r0, r3
     ce8:	d00a      	beq.n	d00 <_tcc_get_inst_index+0x1c>
     cea:	4b08      	ldr	r3, [pc, #32]	; (d0c <_tcc_get_inst_index+0x28>)
     cec:	4298      	cmp	r0, r3
     cee:	d005      	beq.n	cfc <_tcc_get_inst_index+0x18>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     cf0:	2300      	movs	r3, #0
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if (hw == tcc_modules[i]) {
     cf2:	4a07      	ldr	r2, [pc, #28]	; (d10 <_tcc_get_inst_index+0x2c>)
     cf4:	4290      	cmp	r0, r2
     cf6:	d105      	bne.n	d04 <_tcc_get_inst_index+0x20>
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
     cf8:	3302      	adds	r3, #2
     cfa:	e002      	b.n	d02 <_tcc_get_inst_index+0x1e>
     cfc:	2301      	movs	r3, #1
     cfe:	e000      	b.n	d02 <_tcc_get_inst_index+0x1e>
     d00:	2300      	movs	r3, #0
		if (hw == tcc_modules[i]) {
			return i;
     d02:	b2db      	uxtb	r3, r3
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
     d04:	0018      	movs	r0, r3
     d06:	4770      	bx	lr
     d08:	42002000 	.word	0x42002000
     d0c:	42002400 	.word	0x42002400
     d10:	42002800 	.word	0x42002800

00000d14 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
     d14:	b510      	push	{r4, lr}
     d16:	0004      	movs	r4, r0
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
     d18:	0008      	movs	r0, r1
     d1a:	4b4f      	ldr	r3, [pc, #316]	; (e58 <tcc_get_config_defaults+0x144>)
     d1c:	4798      	blx	r3

	/* Base counter defaults */
	config->counter.count                  = 0;
     d1e:	2300      	movs	r3, #0
     d20:	6023      	str	r3, [r4, #0]

	config->counter.period                 = _tcc_maxs[module_index];
     d22:	0080      	lsls	r0, r0, #2
     d24:	4a4d      	ldr	r2, [pc, #308]	; (e5c <tcc_get_config_defaults+0x148>)
     d26:	5882      	ldr	r2, [r0, r2]
     d28:	6062      	str	r2, [r4, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
     d2a:	72a3      	strb	r3, [r4, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
     d2c:	72e3      	strb	r3, [r4, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
     d2e:	7323      	strb	r3, [r4, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
     d30:	7263      	strb	r3, [r4, #9]
	config->counter.oneshot                = false;
     d32:	7223      	strb	r3, [r4, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
     d34:	61e3      	str	r3, [r4, #28]
     d36:	6223      	str	r3, [r4, #32]
     d38:	6263      	str	r3, [r4, #36]	; 0x24
     d3a:	62a3      	str	r3, [r4, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
     d3c:	7523      	strb	r3, [r4, #20]
     d3e:	7563      	strb	r3, [r4, #21]
     d40:	75a3      	strb	r3, [r4, #22]
     d42:	75e3      	strb	r3, [r4, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
     d44:	7623      	strb	r3, [r4, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
     d46:	7663      	strb	r3, [r4, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
     d48:	7423      	strb	r3, [r4, #16]
     d4a:	7463      	strb	r3, [r4, #17]
     d4c:	74a3      	strb	r3, [r4, #18]
     d4e:	74e3      	strb	r3, [r4, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
     d50:	222c      	movs	r2, #44	; 0x2c
     d52:	54a3      	strb	r3, [r4, r2]
     d54:	3201      	adds	r2, #1
     d56:	54a3      	strb	r3, [r4, r2]
     d58:	3201      	adds	r2, #1
     d5a:	54a3      	strb	r3, [r4, r2]
     d5c:	3201      	adds	r2, #1
     d5e:	54a3      	strb	r3, [r4, r2]
     d60:	3201      	adds	r2, #1
     d62:	54a3      	strb	r3, [r4, r2]
     d64:	3201      	adds	r2, #1
     d66:	54a3      	strb	r3, [r4, r2]
     d68:	3201      	adds	r2, #1
     d6a:	54a3      	strb	r3, [r4, r2]
     d6c:	3201      	adds	r2, #1
     d6e:	54a3      	strb	r3, [r4, r2]
     d70:	3201      	adds	r2, #1
     d72:	54a3      	strb	r3, [r4, r2]
     d74:	3201      	adds	r2, #1
     d76:	54a3      	strb	r3, [r4, r2]
     d78:	3201      	adds	r2, #1
     d7a:	54a3      	strb	r3, [r4, r2]
     d7c:	3201      	adds	r2, #1
     d7e:	54a3      	strb	r3, [r4, r2]
     d80:	3201      	adds	r2, #1
     d82:	54a3      	strb	r3, [r4, r2]
     d84:	3201      	adds	r2, #1
     d86:	54a3      	strb	r3, [r4, r2]
     d88:	3201      	adds	r2, #1
     d8a:	54a3      	strb	r3, [r4, r2]
     d8c:	3201      	adds	r2, #1
     d8e:	54a3      	strb	r3, [r4, r2]
     d90:	3201      	adds	r2, #1
     d92:	54a3      	strb	r3, [r4, r2]
     d94:	3201      	adds	r2, #1
     d96:	54a3      	strb	r3, [r4, r2]
     d98:	3201      	adds	r2, #1
     d9a:	54a3      	strb	r3, [r4, r2]
     d9c:	3201      	adds	r2, #1
     d9e:	54a3      	strb	r3, [r4, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
     da0:	3201      	adds	r2, #1
     da2:	54a3      	strb	r3, [r4, r2]
     da4:	3201      	adds	r2, #1
     da6:	54a3      	strb	r3, [r4, r2]
     da8:	3201      	adds	r2, #1
     daa:	54a3      	strb	r3, [r4, r2]
     dac:	3201      	adds	r2, #1
     dae:	54a3      	strb	r3, [r4, r2]
     db0:	3201      	adds	r2, #1
     db2:	54a3      	strb	r3, [r4, r2]
     db4:	3201      	adds	r2, #1
     db6:	54a3      	strb	r3, [r4, r2]
     db8:	3201      	adds	r2, #1
     dba:	54a3      	strb	r3, [r4, r2]
     dbc:	3201      	adds	r2, #1
     dbe:	54a3      	strb	r3, [r4, r2]
     dc0:	3201      	adds	r2, #1
     dc2:	54a3      	strb	r3, [r4, r2]
     dc4:	3201      	adds	r2, #1
     dc6:	54a3      	strb	r3, [r4, r2]
     dc8:	3201      	adds	r2, #1
     dca:	54a3      	strb	r3, [r4, r2]
     dcc:	3201      	adds	r2, #1
     dce:	54a3      	strb	r3, [r4, r2]
     dd0:	3201      	adds	r2, #1
     dd2:	54a3      	strb	r3, [r4, r2]
     dd4:	3201      	adds	r2, #1
     dd6:	54a3      	strb	r3, [r4, r2]
     dd8:	3201      	adds	r2, #1
     dda:	54a3      	strb	r3, [r4, r2]
     ddc:	3201      	adds	r2, #1
     dde:	54a3      	strb	r3, [r4, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
     de0:	3201      	adds	r2, #1
     de2:	54a3      	strb	r3, [r4, r2]
     de4:	3201      	adds	r2, #1
     de6:	54a3      	strb	r3, [r4, r2]
     de8:	3201      	adds	r2, #1
     dea:	54a3      	strb	r3, [r4, r2]
     dec:	3201      	adds	r2, #1
     dee:	54a3      	strb	r3, [r4, r2]
     df0:	3201      	adds	r2, #1
     df2:	54a3      	strb	r3, [r4, r2]
     df4:	3201      	adds	r2, #1
     df6:	54a3      	strb	r3, [r4, r2]
     df8:	3201      	adds	r2, #1
     dfa:	54a3      	strb	r3, [r4, r2]
     dfc:	3201      	adds	r2, #1
     dfe:	54a3      	strb	r3, [r4, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
     e00:	3241      	adds	r2, #65	; 0x41
     e02:	54a3      	strb	r3, [r4, r2]
     e04:	65a3      	str	r3, [r4, #88]	; 0x58
     e06:	67a3      	str	r3, [r4, #120]	; 0x78
     e08:	3201      	adds	r2, #1
     e0a:	54a3      	strb	r3, [r4, r2]
     e0c:	65e3      	str	r3, [r4, #92]	; 0x5c
     e0e:	67e3      	str	r3, [r4, #124]	; 0x7c
     e10:	3201      	adds	r2, #1
     e12:	54a3      	strb	r3, [r4, r2]
     e14:	6623      	str	r3, [r4, #96]	; 0x60
     e16:	3a1a      	subs	r2, #26
     e18:	50a3      	str	r3, [r4, r2]
     e1a:	321b      	adds	r2, #27
     e1c:	54a3      	strb	r3, [r4, r2]
     e1e:	6663      	str	r3, [r4, #100]	; 0x64
     e20:	3a17      	subs	r2, #23
     e22:	50a3      	str	r3, [r4, r2]
     e24:	3218      	adds	r2, #24
     e26:	54a3      	strb	r3, [r4, r2]
     e28:	66a3      	str	r3, [r4, #104]	; 0x68
     e2a:	3a14      	subs	r2, #20
     e2c:	50a3      	str	r3, [r4, r2]
     e2e:	3215      	adds	r2, #21
     e30:	54a3      	strb	r3, [r4, r2]
     e32:	66e3      	str	r3, [r4, #108]	; 0x6c
     e34:	3a11      	subs	r2, #17
     e36:	50a3      	str	r3, [r4, r2]
     e38:	3212      	adds	r2, #18
     e3a:	54a3      	strb	r3, [r4, r2]
     e3c:	6723      	str	r3, [r4, #112]	; 0x70
     e3e:	3a0e      	subs	r2, #14
     e40:	50a3      	str	r3, [r4, r2]
     e42:	320f      	adds	r2, #15
     e44:	54a3      	strb	r3, [r4, r2]
     e46:	6763      	str	r3, [r4, #116]	; 0x74
     e48:	3a0b      	subs	r2, #11
     e4a:	50a3      	str	r3, [r4, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
     e4c:	2101      	movs	r1, #1
     e4e:	320c      	adds	r2, #12
     e50:	54a1      	strb	r1, [r4, r2]
	config->run_in_standby            = false;
     e52:	3201      	adds	r2, #1
     e54:	54a3      	strb	r3, [r4, r2]
}
     e56:	bd10      	pop	{r4, pc}
     e58:	00000ce5 	.word	0x00000ce5
     e5c:	000070d8 	.word	0x000070d8

00000e60 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
     e60:	b5f0      	push	{r4, r5, r6, r7, lr}
     e62:	465f      	mov	r7, fp
     e64:	4656      	mov	r6, sl
     e66:	464d      	mov	r5, r9
     e68:	4644      	mov	r4, r8
     e6a:	b4f0      	push	{r4, r5, r6, r7}
     e6c:	b08f      	sub	sp, #60	; 0x3c
     e6e:	9001      	str	r0, [sp, #4]
     e70:	000c      	movs	r4, r1
     e72:	0016      	movs	r6, r2
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
     e74:	0008      	movs	r0, r1
     e76:	4b83      	ldr	r3, [pc, #524]	; (1084 <tcc_init+0x224>)
     e78:	4798      	blx	r3
     e7a:	0003      	movs	r3, r0

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     e7c:	0001      	movs	r1, r0
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     e7e:	4882      	ldr	r0, [pc, #520]	; (1088 <tcc_init+0x228>)
     e80:	6a07      	ldr	r7, [r0, #32]
     e82:	009d      	lsls	r5, r3, #2
     e84:	4a81      	ldr	r2, [pc, #516]	; (108c <tcc_init+0x22c>)
     e86:	58aa      	ldr	r2, [r5, r2]
     e88:	433a      	orrs	r2, r7
     e8a:	6202      	str	r2, [r0, #32]
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
     e8c:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
     e8e:	201c      	movs	r0, #28
	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
     e90:	0792      	lsls	r2, r2, #30
     e92:	d500      	bpl.n	e96 <tcc_init+0x36>
     e94:	e1c5      	b.n	1222 <tcc_init+0x3c2>
		return STATUS_ERR_DENIED;
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
     e96:	6822      	ldr	r2, [r4, #0]
     e98:	381b      	subs	r0, #27
     e9a:	4002      	ands	r2, r0
		return STATUS_ERR_DENIED;
     e9c:	301b      	adds	r0, #27
	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
		return STATUS_ERR_DENIED;
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
     e9e:	2a00      	cmp	r2, #0
     ea0:	d000      	beq.n	ea4 <tcc_init+0x44>
     ea2:	e1be      	b.n	1222 <tcc_init+0x3c2>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
     ea4:	4f7a      	ldr	r7, [pc, #488]	; (1090 <tcc_init+0x230>)
     ea6:	59ef      	ldr	r7, [r5, r7]

	/* Check all counter values */
	if ((config->counter.count > count_max)
		|| (config->counter.period > count_max)
		) {
		return STATUS_ERR_INVALID_ARG;
     ea8:	2017      	movs	r0, #23

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];

	/* Check all counter values */
	if ((config->counter.count > count_max)
     eaa:	6835      	ldr	r5, [r6, #0]
     eac:	42af      	cmp	r7, r5
     eae:	d200      	bcs.n	eb2 <tcc_init+0x52>
     eb0:	e1b7      	b.n	1222 <tcc_init+0x3c2>
		|| (config->counter.period > count_max)
     eb2:	6875      	ldr	r5, [r6, #4]
     eb4:	42af      	cmp	r7, r5
     eb6:	d200      	bcs.n	eba <tcc_init+0x5a>
     eb8:	e1b3      	b.n	1222 <tcc_init+0x3c2>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
		if ((config->compare.match[i] > count_max)
     eba:	69f0      	ldr	r0, [r6, #28]
     ebc:	4287      	cmp	r7, r0
     ebe:	d200      	bcs.n	ec2 <tcc_init+0x62>
     ec0:	e19a      	b.n	11f8 <tcc_init+0x398>
     ec2:	6a30      	ldr	r0, [r6, #32]
     ec4:	4287      	cmp	r7, r0
     ec6:	d200      	bcs.n	eca <tcc_init+0x6a>
     ec8:	e198      	b.n	11fc <tcc_init+0x39c>
     eca:	6a70      	ldr	r0, [r6, #36]	; 0x24
     ecc:	4287      	cmp	r7, r0
     ece:	d200      	bcs.n	ed2 <tcc_init+0x72>
     ed0:	e196      	b.n	1200 <tcc_init+0x3a0>
     ed2:	6ab0      	ldr	r0, [r6, #40]	; 0x28
     ed4:	4287      	cmp	r7, r0
     ed6:	d200      	bcs.n	eda <tcc_init+0x7a>
     ed8:	e194      	b.n	1204 <tcc_init+0x3a4>
     eda:	2098      	movs	r0, #152	; 0x98
     edc:	4684      	mov	ip, r0
     ede:	44b4      	add	ip, r6
     ee0:	4660      	mov	r0, ip
     ee2:	9006      	str	r0, [sp, #24]
     ee4:	2700      	movs	r7, #0
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
		if (!config->pins.enable_wave_out_pin[i]) {
     ee6:	7805      	ldrb	r5, [r0, #0]
     ee8:	2d00      	cmp	r5, #0
     eea:	d004      	beq.n	ef6 <tcc_init+0x96>
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
     eec:	4d69      	ldr	r5, [pc, #420]	; (1094 <tcc_init+0x234>)
     eee:	5c6d      	ldrb	r5, [r5, r1]
     ef0:	42bd      	cmp	r5, r7
     ef2:	dc00      	bgt.n	ef6 <tcc_init+0x96>
     ef4:	e188      	b.n	1208 <tcc_init+0x3a8>
			return STATUS_ERR_INVALID_ARG;
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
     ef6:	3701      	adds	r7, #1
     ef8:	3001      	adds	r0, #1
     efa:	2f08      	cmp	r7, #8
     efc:	d1f3      	bne.n	ee6 <tcc_init+0x86>
     efe:	2000      	movs	r0, #0
     f00:	9002      	str	r0, [sp, #8]

			if (i > _tcc_cc_nums[module_index]) {
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
     f02:	2580      	movs	r5, #128	; 0x80
     f04:	046d      	lsls	r5, r5, #17
     f06:	46ac      	mov	ip, r5
{
	uint32_t ctrla = 0;

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
		if (config->capture.channel_function[i] ==
     f08:	1835      	adds	r5, r6, r0
     f0a:	7c2d      	ldrb	r5, [r5, #16]
     f0c:	2d01      	cmp	r5, #1
     f0e:	d109      	bne.n	f24 <tcc_init+0xc4>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
     f10:	4d61      	ldr	r5, [pc, #388]	; (1098 <tcc_init+0x238>)
     f12:	5c6d      	ldrb	r5, [r5, r1]
     f14:	4285      	cmp	r5, r0
     f16:	da00      	bge.n	f1a <tcc_init+0xba>
     f18:	e178      	b.n	120c <tcc_init+0x3ac>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
     f1a:	4665      	mov	r5, ip
     f1c:	4085      	lsls	r5, r0
     f1e:	9f02      	ldr	r7, [sp, #8]
     f20:	432f      	orrs	r7, r5
     f22:	9702      	str	r7, [sp, #8]
		uint32_t *value_buffer)
{
	uint32_t ctrla = 0;

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
     f24:	3001      	adds	r0, #1
     f26:	2804      	cmp	r0, #4
     f28:	d1ee      	bne.n	f08 <tcc_init+0xa8>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
		}
	}

	if (config->run_in_standby) {
     f2a:	21a1      	movs	r1, #161	; 0xa1
     f2c:	5c71      	ldrb	r1, [r6, r1]
     f2e:	2900      	cmp	r1, #0
     f30:	d004      	beq.n	f3c <tcc_init+0xdc>
		ctrla |= TCC_CTRLA_RUNSTDBY;
     f32:	2180      	movs	r1, #128	; 0x80
     f34:	0109      	lsls	r1, r1, #4
     f36:	9802      	ldr	r0, [sp, #8]
     f38:	4308      	orrs	r0, r1
     f3a:	9002      	str	r0, [sp, #8]
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
	uint8_t ctrlb = 0;

	if (config->counter.oneshot) {
     f3c:	7a31      	ldrb	r1, [r6, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
     f3e:	1e48      	subs	r0, r1, #1
     f40:	4181      	sbcs	r1, r0
     f42:	0089      	lsls	r1, r1, #2
     f44:	9105      	str	r1, [sp, #20]
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
     f46:	7a71      	ldrb	r1, [r6, #9]
     f48:	2901      	cmp	r1, #1
     f4a:	d102      	bne.n	f52 <tcc_init+0xf2>
		ctrlb |= TCC_CTRLBSET_DIR;
     f4c:	9805      	ldr	r0, [sp, #20]
     f4e:	4308      	orrs	r0, r1
     f50:	9005      	str	r0, [sp, #20]
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
     f52:	4951      	ldr	r1, [pc, #324]	; (1098 <tcc_init+0x238>)
     f54:	5cc9      	ldrb	r1, [r1, r3]
     f56:	0008      	movs	r0, r1
     f58:	9104      	str	r1, [sp, #16]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
		cfg = (struct tcc_recoverable_fault_config *)
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
     f5a:	2135      	movs	r1, #53	; 0x35
     f5c:	5c77      	ldrb	r7, [r6, r1]
     f5e:	4287      	cmp	r7, r0
     f60:	d300      	bcc.n	f64 <tcc_init+0x104>
     f62:	e15d      	b.n	1220 <tcc_init+0x3c0>
			return STATUS_ERR_INVALID_ARG;
		}
		if (cfg->filter_value > 0xF) {
     f64:	212c      	movs	r1, #44	; 0x2c
     f66:	5c71      	ldrb	r1, [r6, r1]
     f68:	290f      	cmp	r1, #15
     f6a:	d900      	bls.n	f6e <tcc_init+0x10e>
     f6c:	e158      	b.n	1220 <tcc_init+0x3c0>
	}

	if (config->run_in_standby) {
		ctrla |= TCC_CTRLA_RUNSTDBY;
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
     f6e:	7b30      	ldrb	r0, [r6, #12]
     f70:	9008      	str	r0, [sp, #32]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
     f72:	7af0      	ldrb	r0, [r6, #11]
     f74:	9009      	str	r0, [sp, #36]	; 0x24
     f76:	0030      	movs	r0, r6
     f78:	302d      	adds	r0, #45	; 0x2d
     f7a:	2500      	movs	r5, #0
     f7c:	4690      	mov	r8, r2
     f7e:	46a1      	mov	r9, r4
     f80:	002c      	movs	r4, r5
     f82:	46b3      	mov	fp, r6
     f84:	0006      	movs	r6, r0
     f86:	9307      	str	r3, [sp, #28]
     f88:	e00a      	b.n	fa0 <tcc_init+0x140>
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
		cfg = (struct tcc_recoverable_fault_config *)
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
     f8a:	7c9f      	ldrb	r7, [r3, #18]
     f8c:	9a04      	ldr	r2, [sp, #16]
     f8e:	42ba      	cmp	r2, r7
     f90:	d800      	bhi.n	f94 <tcc_init+0x134>
     f92:	e145      	b.n	1220 <tcc_init+0x3c0>
			return STATUS_ERR_INVALID_ARG;
		}
		if (cfg->filter_value > 0xF) {
     f94:	7a59      	ldrb	r1, [r3, #9]
     f96:	360a      	adds	r6, #10
     f98:	3404      	adds	r4, #4
     f9a:	290f      	cmp	r1, #15
     f9c:	d900      	bls.n	fa0 <tcc_init+0x140>
     f9e:	e13f      	b.n	1220 <tcc_init+0x3c0>
			return STATUS_ERR_INVALID_ARG;
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     fa0:	0609      	lsls	r1, r1, #24
     fa2:	23f0      	movs	r3, #240	; 0xf0
     fa4:	051b      	lsls	r3, r3, #20
     fa6:	4019      	ands	r1, r3
     fa8:	0033      	movs	r3, r6
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
     faa:	7835      	ldrb	r5, [r6, #0]
     fac:	042d      	lsls	r5, r5, #16
     fae:	22ff      	movs	r2, #255	; 0xff
     fb0:	0412      	lsls	r2, r2, #16
     fb2:	4015      	ands	r5, r2
     fb4:	46aa      	mov	sl, r5
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
     fb6:	7872      	ldrb	r2, [r6, #1]
     fb8:	2080      	movs	r0, #128	; 0x80
     fba:	9003      	str	r0, [sp, #12]
     fbc:	2a00      	cmp	r2, #0
     fbe:	d101      	bne.n	fc4 <tcc_init+0x164>
     fc0:	4642      	mov	r2, r8
     fc2:	9203      	str	r2, [sp, #12]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
     fc4:	789a      	ldrb	r2, [r3, #2]
     fc6:	2008      	movs	r0, #8
     fc8:	2a00      	cmp	r2, #0
     fca:	d100      	bne.n	fce <tcc_init+0x16e>
     fcc:	4640      	mov	r0, r8
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
     fce:	78da      	ldrb	r2, [r3, #3]
     fd0:	4694      	mov	ip, r2
     fd2:	2210      	movs	r2, #16
     fd4:	4665      	mov	r5, ip
     fd6:	2d00      	cmp	r5, #0
     fd8:	d100      	bne.n	fdc <tcc_init+0x17c>
     fda:	4642      	mov	r2, r8
				| TCC_FCTRLA_SRC(cfg->source)
				| TCC_FCTRLA_BLANK(cfg->blanking)
				| TCC_FCTRLA_HALT(cfg->halt_action)
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
		value_buffer[i] = fault;
     fdc:	02bf      	lsls	r7, r7, #10
     fde:	25c0      	movs	r5, #192	; 0xc0
     fe0:	012d      	lsls	r5, r5, #4
     fe2:	402f      	ands	r7, r5
     fe4:	4339      	orrs	r1, r7
     fe6:	791f      	ldrb	r7, [r3, #4]
     fe8:	2503      	movs	r5, #3
     fea:	402f      	ands	r7, r5
     fec:	4339      	orrs	r1, r7
     fee:	4655      	mov	r5, sl
     ff0:	430d      	orrs	r5, r1
     ff2:	795f      	ldrb	r7, [r3, #5]
     ff4:	017f      	lsls	r7, r7, #5
     ff6:	2160      	movs	r1, #96	; 0x60
     ff8:	400f      	ands	r7, r1
     ffa:	433d      	orrs	r5, r7
     ffc:	7999      	ldrb	r1, [r3, #6]
     ffe:	0209      	lsls	r1, r1, #8
    1000:	27c0      	movs	r7, #192	; 0xc0
    1002:	00bf      	lsls	r7, r7, #2
    1004:	4039      	ands	r1, r7
    1006:	430d      	orrs	r5, r1
    1008:	79d9      	ldrb	r1, [r3, #7]
    100a:	0309      	lsls	r1, r1, #12
    100c:	27e0      	movs	r7, #224	; 0xe0
    100e:	01ff      	lsls	r7, r7, #7
    1010:	4039      	ands	r1, r7
    1012:	430d      	orrs	r5, r1
    1014:	9903      	ldr	r1, [sp, #12]
    1016:	430d      	orrs	r5, r1
    1018:	4328      	orrs	r0, r5
    101a:	4302      	orrs	r2, r0
    101c:	a90c      	add	r1, sp, #48	; 0x30
    101e:	5062      	str	r2, [r4, r1]
{
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    1020:	2c04      	cmp	r4, #4
    1022:	d1b2      	bne.n	f8a <tcc_init+0x12a>
    1024:	464c      	mov	r4, r9
    1026:	465e      	mov	r6, fp
    1028:	9b07      	ldr	r3, [sp, #28]
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
    102a:	4a1a      	ldr	r2, [pc, #104]	; (1094 <tcc_init+0x234>)
    102c:	5cd2      	ldrb	r2, [r2, r3]
    102e:	4691      	mov	r9, r2
    1030:	4659      	mov	r1, fp
    1032:	3150      	adds	r1, #80	; 0x50
    1034:	4658      	mov	r0, fp
    1036:	3041      	adds	r0, #65	; 0x41
	uint32_t drvctrl;

	drvctrl = 0;
    1038:	2700      	movs	r7, #0

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    103a:	2200      	movs	r2, #0
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    103c:	2501      	movs	r5, #1
    103e:	46aa      	mov	sl, r5
			if (i >= ow_num) {
				return STATUS_ERR_INVALID_ARG;
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    1040:	2502      	movs	r5, #2
    1042:	35ff      	adds	r5, #255	; 0xff
    1044:	46ab      	mov	fp, r5
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
		if (config->wave_ext.invert[i]) {
			if (i >= ow_num) {
				return STATUS_ERR_INVALID_ARG;
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    1046:	2580      	movs	r5, #128	; 0x80
    1048:	026d      	lsls	r5, r5, #9
    104a:	46a8      	mov	r8, r5
    104c:	46a4      	mov	ip, r4
    104e:	001c      	movs	r4, r3
    1050:	464b      	mov	r3, r9
	uint32_t drvctrl;

	drvctrl = 0;

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
		if (config->wave_ext.invert[i]) {
    1052:	780d      	ldrb	r5, [r1, #0]
    1054:	2d00      	cmp	r5, #0
    1056:	d009      	beq.n	106c <tcc_init+0x20c>
			if (i >= ow_num) {
    1058:	4293      	cmp	r3, r2
    105a:	d800      	bhi.n	105e <tcc_init+0x1fe>
    105c:	e0d8      	b.n	1210 <tcc_init+0x3b0>
				return STATUS_ERR_INVALID_ARG;
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    105e:	4645      	mov	r5, r8
    1060:	4095      	lsls	r5, r2
    1062:	432f      	orrs	r7, r5
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
    1064:	7805      	ldrb	r5, [r0, #0]
    1066:	2d00      	cmp	r5, #0
    1068:	d106      	bne.n	1078 <tcc_init+0x218>
    106a:	e01a      	b.n	10a2 <tcc_init+0x242>
    106c:	7805      	ldrb	r5, [r0, #0]
    106e:	2d00      	cmp	r5, #0
    1070:	d017      	beq.n	10a2 <tcc_init+0x242>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
    1072:	4293      	cmp	r3, r2
    1074:	d800      	bhi.n	1078 <tcc_init+0x218>
    1076:	e0cd      	b.n	1214 <tcc_init+0x3b4>
				return STATUS_ERR_INVALID_ARG;
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
    1078:	2d02      	cmp	r5, #2
    107a:	d10f      	bne.n	109c <tcc_init+0x23c>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    107c:	465d      	mov	r5, fp
    107e:	4095      	lsls	r5, r2
    1080:	432f      	orrs	r7, r5
    1082:	e00e      	b.n	10a2 <tcc_init+0x242>
    1084:	00000ce5 	.word	0x00000ce5
    1088:	40000400 	.word	0x40000400
    108c:	000070cc 	.word	0x000070cc
    1090:	000070d8 	.word	0x000070d8
    1094:	000070e8 	.word	0x000070e8
    1098:	000070e4 	.word	0x000070e4
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    109c:	4655      	mov	r5, sl
    109e:	4095      	lsls	r5, r2
    10a0:	432f      	orrs	r7, r5
	uint8_t ow_num = _tcc_ow_nums[module_index];
	uint32_t drvctrl;

	drvctrl = 0;

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    10a2:	3201      	adds	r2, #1
    10a4:	3101      	adds	r1, #1
    10a6:	3002      	adds	r0, #2
    10a8:	2a08      	cmp	r2, #8
    10aa:	d1d2      	bne.n	1052 <tcc_init+0x1f2>
    10ac:	4699      	mov	r9, r3
    10ae:	0023      	movs	r3, r4
    10b0:	4664      	mov	r4, ip
	uint8_t cc_num = _tcc_cc_nums[module_index];
	struct tcc_match_wave_config const *wav_cfg = &config->compare;

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    10b2:	7e72      	ldrb	r2, [r6, #25]
    10b4:	0112      	lsls	r2, r2, #4
    10b6:	2130      	movs	r1, #48	; 0x30
    10b8:	400a      	ands	r2, r1
    10ba:	7e31      	ldrb	r1, [r6, #24]
    10bc:	2007      	movs	r0, #7
    10be:	4001      	ands	r1, r0
    10c0:	430a      	orrs	r2, r1
    10c2:	4692      	mov	sl, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    10c4:	2200      	movs	r2, #0
		if (wav_cfg->wave_polarity[n]) {
			if (n >= cc_num) {
				return STATUS_ERR_INVALID_ARG;
			}
			wave |= (TCC_WAVE_POL0 << n);
    10c6:	2080      	movs	r0, #128	; 0x80
    10c8:	0240      	lsls	r0, r0, #9
    10ca:	4655      	mov	r5, sl

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
		if (wav_cfg->wave_polarity[n]) {
    10cc:	18b1      	adds	r1, r6, r2
    10ce:	7d09      	ldrb	r1, [r1, #20]
    10d0:	2900      	cmp	r1, #0
    10d2:	d006      	beq.n	10e2 <tcc_init+0x282>
			if (n >= cc_num) {
    10d4:	9904      	ldr	r1, [sp, #16]
    10d6:	4291      	cmp	r1, r2
    10d8:	dc00      	bgt.n	10dc <tcc_init+0x27c>
    10da:	e09d      	b.n	1218 <tcc_init+0x3b8>
				return STATUS_ERR_INVALID_ARG;
			}
			wave |= (TCC_WAVE_POL0 << n);
    10dc:	0001      	movs	r1, r0
    10de:	4091      	lsls	r1, r2
    10e0:	430d      	orrs	r5, r1
	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    10e2:	3201      	adds	r2, #1
    10e4:	2a04      	cmp	r2, #4
    10e6:	d1f1      	bne.n	10cc <tcc_init+0x26c>
    10e8:	46aa      	mov	sl, r5
    10ea:	9801      	ldr	r0, [sp, #4]
    10ec:	0002      	movs	r2, r0
    10ee:	3204      	adds	r2, #4
    10f0:	3034      	adds	r0, #52	; 0x34

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		module_inst->callback[i] = NULL;
    10f2:	2100      	movs	r1, #0
    10f4:	c202      	stmia	r2!, {r1}
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    10f6:	4282      	cmp	r2, r0
    10f8:	d1fc      	bne.n	10f4 <tcc_init+0x294>
		module_inst->callback[i] = NULL;
	}
	module_inst->register_callback_mask = 0;
    10fa:	2200      	movs	r2, #0
    10fc:	9801      	ldr	r0, [sp, #4]
    10fe:	6342      	str	r2, [r0, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    1100:	6382      	str	r2, [r0, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    1102:	0099      	lsls	r1, r3, #2
    1104:	4a4a      	ldr	r2, [pc, #296]	; (1230 <tcc_init+0x3d0>)
    1106:	5088      	str	r0, [r1, r2]
#endif

	module_inst->hw = hw;
    1108:	6004      	str	r4, [r0, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    110a:	22a0      	movs	r2, #160	; 0xa0
    110c:	5cb1      	ldrb	r1, [r6, r2]
    110e:	3a64      	subs	r2, #100	; 0x64
    1110:	5481      	strb	r1, [r0, r2]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = config->counter.clock_source;
    1112:	a90b      	add	r1, sp, #44	; 0x2c
    1114:	7ab2      	ldrb	r2, [r6, #10]
    1116:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    1118:	4a46      	ldr	r2, [pc, #280]	; (1234 <tcc_init+0x3d4>)
    111a:	5cd5      	ldrb	r5, [r2, r3]
    111c:	0028      	movs	r0, r5
    111e:	4b46      	ldr	r3, [pc, #280]	; (1238 <tcc_init+0x3d8>)
    1120:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    1122:	0028      	movs	r0, r5
    1124:	4b45      	ldr	r3, [pc, #276]	; (123c <tcc_init+0x3dc>)
    1126:	4798      	blx	r3

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    1128:	464b      	mov	r3, r9
    112a:	2b00      	cmp	r3, #0
    112c:	dd22      	ble.n	1174 <tcc_init+0x314>
    112e:	0035      	movs	r5, r6
    1130:	3558      	adds	r5, #88	; 0x58
    1132:	3398      	adds	r3, #152	; 0x98
    1134:	4698      	mov	r8, r3
    1136:	44b0      	add	r8, r6
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1138:	2301      	movs	r3, #1
    113a:	4699      	mov	r9, r3
		}

		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		system_pinmux_pin_set_config(
    113c:	46b3      	mov	fp, r6
    113e:	4646      	mov	r6, r8
    1140:	46a0      	mov	r8, r4
    1142:	9c06      	ldr	r4, [sp, #24]
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
		if (!config->pins.enable_wave_out_pin[i]) {
    1144:	7823      	ldrb	r3, [r4, #0]
    1146:	2b00      	cmp	r3, #0
    1148:	d00e      	beq.n	1168 <tcc_init+0x308>
    114a:	ab0a      	add	r3, sp, #40	; 0x28
    114c:	464a      	mov	r2, r9
    114e:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    1150:	2300      	movs	r3, #0
    1152:	aa0a      	add	r2, sp, #40	; 0x28
    1154:	70d3      	strb	r3, [r2, #3]
			continue;
		}

		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    1156:	6a2b      	ldr	r3, [r5, #32]
    1158:	7013      	strb	r3, [r2, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    115a:	0013      	movs	r3, r2
    115c:	464a      	mov	r2, r9
    115e:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
    1160:	7828      	ldrb	r0, [r5, #0]
    1162:	0019      	movs	r1, r3
    1164:	4b36      	ldr	r3, [pc, #216]	; (1240 <tcc_init+0x3e0>)
    1166:	4798      	blx	r3
    1168:	3401      	adds	r4, #1
    116a:	3504      	adds	r5, #4
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    116c:	42b4      	cmp	r4, r6
    116e:	d1e9      	bne.n	1144 <tcc_init+0x2e4>
    1170:	4644      	mov	r4, r8
    1172:	465e      	mov	r6, fp

	if (config->run_in_standby) {
		ctrla |= TCC_CTRLA_RUNSTDBY;
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    1174:	9b08      	ldr	r3, [sp, #32]
    1176:	031a      	lsls	r2, r3, #12
    1178:	9b09      	ldr	r3, [sp, #36]	; 0x24
    117a:	021b      	lsls	r3, r3, #8
    117c:	4313      	orrs	r3, r2
    117e:	9a02      	ldr	r2, [sp, #8]
    1180:	4313      	orrs	r3, r2
				config->pins.wave_out_pin[i], &pin_config);
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
    1182:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    1184:	2204      	movs	r2, #4
    1186:	68a3      	ldr	r3, [r4, #8]
    1188:	421a      	tst	r2, r3
    118a:	d1fc      	bne.n	1186 <tcc_init+0x326>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
    118c:	23ff      	movs	r3, #255	; 0xff
    118e:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    1190:	2204      	movs	r2, #4
    1192:	68a3      	ldr	r3, [r4, #8]
    1194:	421a      	tst	r2, r3
    1196:	d1fc      	bne.n	1192 <tcc_init+0x332>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
    1198:	466b      	mov	r3, sp
    119a:	7d1b      	ldrb	r3, [r3, #20]
    119c:	7163      	strb	r3, [r4, #5]

	hw->FCTRLA.reg = faults[0];
    119e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    11a0:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
    11a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    11a4:	6123      	str	r3, [r4, #16]

	hw->DRVCTRL.reg = drvctrl;
    11a6:	61a7      	str	r7, [r4, #24]

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    11a8:	4a26      	ldr	r2, [pc, #152]	; (1244 <tcc_init+0x3e4>)
    11aa:	68a3      	ldr	r3, [r4, #8]
    11ac:	4213      	tst	r3, r2
    11ae:	d1fc      	bne.n	11aa <tcc_init+0x34a>
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
    11b0:	4653      	mov	r3, sl
    11b2:	63e3      	str	r3, [r4, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    11b4:	2210      	movs	r2, #16
    11b6:	68a3      	ldr	r3, [r4, #8]
    11b8:	421a      	tst	r2, r3
    11ba:	d1fc      	bne.n	11b6 <tcc_init+0x356>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
    11bc:	6833      	ldr	r3, [r6, #0]
    11be:	6363      	str	r3, [r4, #52]	; 0x34

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    11c0:	4a21      	ldr	r2, [pc, #132]	; (1248 <tcc_init+0x3e8>)
    11c2:	68a3      	ldr	r3, [r4, #8]
    11c4:	4213      	tst	r3, r2
    11c6:	d1fc      	bne.n	11c2 <tcc_init+0x362>
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
    11c8:	6873      	ldr	r3, [r6, #4]
    11ca:	6423      	str	r3, [r4, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    11cc:	9804      	ldr	r0, [sp, #16]
    11ce:	2800      	cmp	r0, #0
    11d0:	dd24      	ble.n	121c <tcc_init+0x3bc>
    11d2:	361c      	adds	r6, #28
    11d4:	2100      	movs	r1, #0
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
		while (hw->SYNCBUSY.reg & (
    11d6:	4d1d      	ldr	r5, [pc, #116]	; (124c <tcc_init+0x3ec>)
    11d8:	002a      	movs	r2, r5
    11da:	408a      	lsls	r2, r1
    11dc:	68a3      	ldr	r3, [r4, #8]
    11de:	421a      	tst	r2, r3
    11e0:	d1fc      	bne.n	11dc <tcc_init+0x37c>
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
    11e2:	ce04      	ldmia	r6!, {r2}
    11e4:	000b      	movs	r3, r1
    11e6:	3310      	adds	r3, #16
    11e8:	009b      	lsls	r3, r3, #2
    11ea:	18e3      	adds	r3, r4, r3
    11ec:	605a      	str	r2, [r3, #4]
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    11ee:	3101      	adds	r1, #1
    11f0:	4288      	cmp	r0, r1
    11f2:	dcf1      	bgt.n	11d8 <tcc_init+0x378>
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
    11f4:	2000      	movs	r0, #0
    11f6:	e014      	b.n	1222 <tcc_init+0x3c2>

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
		if ((config->compare.match[i] > count_max)
			) {
			return STATUS_ERR_INVALID_ARG;
    11f8:	2017      	movs	r0, #23
    11fa:	e012      	b.n	1222 <tcc_init+0x3c2>
    11fc:	2017      	movs	r0, #23
    11fe:	e010      	b.n	1222 <tcc_init+0x3c2>
    1200:	2017      	movs	r0, #23
    1202:	e00e      	b.n	1222 <tcc_init+0x3c2>
    1204:	2017      	movs	r0, #23
    1206:	e00c      	b.n	1222 <tcc_init+0x3c2>
		if (!config->pins.enable_wave_out_pin[i]) {
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
			return STATUS_ERR_INVALID_ARG;
    1208:	2017      	movs	r0, #23
    120a:	e00a      	b.n	1222 <tcc_init+0x3c2>
		if (config->capture.channel_function[i] ==
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
    120c:	2017      	movs	r0, #23
    120e:	e008      	b.n	1222 <tcc_init+0x3c2>

	drvctrl = 0;

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
		if (config->wave_ext.invert[i]) {
			if (i >= ow_num) {
    1210:	2017      	movs	r0, #23
    1212:	e006      	b.n	1222 <tcc_init+0x3c2>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
    1214:	2017      	movs	r0, #23
    1216:	e004      	b.n	1222 <tcc_init+0x3c2>
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
		if (wav_cfg->wave_polarity[n]) {
			if (n >= cc_num) {
				return STATUS_ERR_INVALID_ARG;
    1218:	2017      	movs	r0, #23
    121a:	e002      	b.n	1222 <tcc_init+0x3c2>
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
    121c:	2000      	movs	r0, #0
    121e:	e000      	b.n	1222 <tcc_init+0x3c2>
		if (config->capture.channel_function[i] ==
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
    1220:	2017      	movs	r0, #23
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
}
    1222:	b00f      	add	sp, #60	; 0x3c
    1224:	bc3c      	pop	{r2, r3, r4, r5}
    1226:	4690      	mov	r8, r2
    1228:	4699      	mov	r9, r3
    122a:	46a2      	mov	sl, r4
    122c:	46ab      	mov	fp, r5
    122e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1230:	200002cc 	.word	0x200002cc
    1234:	000070c8 	.word	0x000070c8
    1238:	00002225 	.word	0x00002225
    123c:	00002199 	.word	0x00002199
    1240:	0000231d 	.word	0x0000231d
    1244:	00020040 	.word	0x00020040
    1248:	00040080 	.word	0x00040080
    124c:	00080100 	.word	0x00080100

00001250 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    1250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1252:	464f      	mov	r7, r9
    1254:	4646      	mov	r6, r8
    1256:	b4c0      	push	{r6, r7}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    1258:	0080      	lsls	r0, r0, #2
    125a:	4b11      	ldr	r3, [pc, #68]	; (12a0 <_tcc_interrupt_handler+0x50>)
    125c:	58c3      	ldr	r3, [r0, r3]
    125e:	4699      	mov	r9, r3
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    1260:	681b      	ldr	r3, [r3, #0]
    1262:	6adf      	ldr	r7, [r3, #44]	; 0x2c
    1264:	464b      	mov	r3, r9
    1266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    1268:	401f      	ands	r7, r3
    126a:	464b      	mov	r3, r9
    126c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    126e:	401f      	ands	r7, r3
    1270:	4d0c      	ldr	r5, [pc, #48]	; (12a4 <_tcc_interrupt_handler+0x54>)
    1272:	464b      	mov	r3, r9
    1274:	1d1c      	adds	r4, r3, #4
    1276:	2334      	movs	r3, #52	; 0x34
    1278:	444b      	add	r3, r9
    127a:	4698      	mov	r8, r3
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    127c:	682e      	ldr	r6, [r5, #0]
    127e:	423e      	tst	r6, r7
    1280:	d005      	beq.n	128e <_tcc_interrupt_handler+0x3e>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    1282:	4648      	mov	r0, r9
    1284:	6823      	ldr	r3, [r4, #0]
    1286:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    1288:	464b      	mov	r3, r9
    128a:	681b      	ldr	r3, [r3, #0]
    128c:	62de      	str	r6, [r3, #44]	; 0x2c
    128e:	3504      	adds	r5, #4
    1290:	3404      	adds	r4, #4
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    1292:	4544      	cmp	r4, r8
    1294:	d1f2      	bne.n	127c <_tcc_interrupt_handler+0x2c>
			(module->callback[i])(module);
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
		}
	}
}
    1296:	bc0c      	pop	{r2, r3}
    1298:	4690      	mov	r8, r2
    129a:	4699      	mov	r9, r3
    129c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    129e:	46c0      	nop			; (mov r8, r8)
    12a0:	200002cc 	.word	0x200002cc
    12a4:	000070ec 	.word	0x000070ec

000012a8 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    12a8:	b510      	push	{r4, lr}
    12aa:	2000      	movs	r0, #0
    12ac:	4b01      	ldr	r3, [pc, #4]	; (12b4 <TCC0_Handler+0xc>)
    12ae:	4798      	blx	r3
    12b0:	bd10      	pop	{r4, pc}
    12b2:	46c0      	nop			; (mov r8, r8)
    12b4:	00001251 	.word	0x00001251

000012b8 <TCC1_Handler>:
    12b8:	b510      	push	{r4, lr}
    12ba:	2001      	movs	r0, #1
    12bc:	4b01      	ldr	r3, [pc, #4]	; (12c4 <TCC1_Handler+0xc>)
    12be:	4798      	blx	r3
    12c0:	bd10      	pop	{r4, pc}
    12c2:	46c0      	nop			; (mov r8, r8)
    12c4:	00001251 	.word	0x00001251

000012c8 <TCC2_Handler>:
    12c8:	b510      	push	{r4, lr}
    12ca:	2002      	movs	r0, #2
    12cc:	4b01      	ldr	r3, [pc, #4]	; (12d4 <TCC2_Handler+0xc>)
    12ce:	4798      	blx	r3
    12d0:	bd10      	pop	{r4, pc}
    12d2:	46c0      	nop			; (mov r8, r8)
    12d4:	00001251 	.word	0x00001251

000012d8 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    12d8:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    12da:	0080      	lsls	r0, r0, #2
    12dc:	4b14      	ldr	r3, [pc, #80]	; (1330 <_tc_interrupt_handler+0x58>)
    12de:	58c5      	ldr	r5, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    12e0:	682b      	ldr	r3, [r5, #0]
    12e2:	7b9c      	ldrb	r4, [r3, #14]
    12e4:	7e2b      	ldrb	r3, [r5, #24]
    12e6:	401c      	ands	r4, r3
    12e8:	7e6b      	ldrb	r3, [r5, #25]
    12ea:	401c      	ands	r4, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    12ec:	07e3      	lsls	r3, r4, #31
    12ee:	d505      	bpl.n	12fc <_tc_interrupt_handler+0x24>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    12f0:	0028      	movs	r0, r5
    12f2:	68ab      	ldr	r3, [r5, #8]
    12f4:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    12f6:	2301      	movs	r3, #1
    12f8:	682a      	ldr	r2, [r5, #0]
    12fa:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    12fc:	07a3      	lsls	r3, r4, #30
    12fe:	d505      	bpl.n	130c <_tc_interrupt_handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    1300:	0028      	movs	r0, r5
    1302:	68eb      	ldr	r3, [r5, #12]
    1304:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    1306:	2302      	movs	r3, #2
    1308:	682a      	ldr	r2, [r5, #0]
    130a:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    130c:	06e3      	lsls	r3, r4, #27
    130e:	d505      	bpl.n	131c <_tc_interrupt_handler+0x44>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    1310:	0028      	movs	r0, r5
    1312:	692b      	ldr	r3, [r5, #16]
    1314:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    1316:	2310      	movs	r3, #16
    1318:	682a      	ldr	r2, [r5, #0]
    131a:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    131c:	06a3      	lsls	r3, r4, #26
    131e:	d505      	bpl.n	132c <_tc_interrupt_handler+0x54>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    1320:	0028      	movs	r0, r5
    1322:	696b      	ldr	r3, [r5, #20]
    1324:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    1326:	682b      	ldr	r3, [r5, #0]
    1328:	2220      	movs	r2, #32
    132a:	739a      	strb	r2, [r3, #14]
	}
}
    132c:	bd70      	pop	{r4, r5, r6, pc}
    132e:	46c0      	nop			; (mov r8, r8)
    1330:	200002d8 	.word	0x200002d8

00001334 <TC3_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    1334:	b510      	push	{r4, lr}
    1336:	2000      	movs	r0, #0
    1338:	4b01      	ldr	r3, [pc, #4]	; (1340 <TC3_Handler+0xc>)
    133a:	4798      	blx	r3
    133c:	bd10      	pop	{r4, pc}
    133e:	46c0      	nop			; (mov r8, r8)
    1340:	000012d9 	.word	0x000012d9

00001344 <TC4_Handler>:
    1344:	b510      	push	{r4, lr}
    1346:	2001      	movs	r0, #1
    1348:	4b01      	ldr	r3, [pc, #4]	; (1350 <TC4_Handler+0xc>)
    134a:	4798      	blx	r3
    134c:	bd10      	pop	{r4, pc}
    134e:	46c0      	nop			; (mov r8, r8)
    1350:	000012d9 	.word	0x000012d9

00001354 <TC5_Handler>:
    1354:	b510      	push	{r4, lr}
    1356:	2002      	movs	r0, #2
    1358:	4b01      	ldr	r3, [pc, #4]	; (1360 <TC5_Handler+0xc>)
    135a:	4798      	blx	r3
    135c:	bd10      	pop	{r4, pc}
    135e:	46c0      	nop			; (mov r8, r8)
    1360:	000012d9 	.word	0x000012d9

00001364 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    1364:	b530      	push	{r4, r5, lr}
    1366:	b085      	sub	sp, #20
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    1368:	aa01      	add	r2, sp, #4
    136a:	4b0b      	ldr	r3, [pc, #44]	; (1398 <_tc_get_inst_index+0x34>)
    136c:	cb32      	ldmia	r3!, {r1, r4, r5}
    136e:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    1370:	9b01      	ldr	r3, [sp, #4]
    1372:	4298      	cmp	r0, r3
    1374:	d00a      	beq.n	138c <_tc_get_inst_index+0x28>
    1376:	9b02      	ldr	r3, [sp, #8]
    1378:	4298      	cmp	r0, r3
    137a:	d005      	beq.n	1388 <_tc_get_inst_index+0x24>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    137c:	2300      	movs	r3, #0
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    137e:	9a03      	ldr	r2, [sp, #12]
    1380:	4282      	cmp	r2, r0
    1382:	d105      	bne.n	1390 <_tc_get_inst_index+0x2c>
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1384:	3302      	adds	r3, #2
    1386:	e002      	b.n	138e <_tc_get_inst_index+0x2a>
    1388:	2301      	movs	r3, #1
    138a:	e000      	b.n	138e <_tc_get_inst_index+0x2a>
    138c:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
			return i;
    138e:	b2db      	uxtb	r3, r3
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
    1390:	0018      	movs	r0, r3
    1392:	b005      	add	sp, #20
    1394:	bd30      	pop	{r4, r5, pc}
    1396:	46c0      	nop			; (mov r8, r8)
    1398:	0000711c 	.word	0x0000711c

0000139c <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    139c:	b5f0      	push	{r4, r5, r6, r7, lr}
    139e:	464f      	mov	r7, r9
    13a0:	4646      	mov	r6, r8
    13a2:	b4c0      	push	{r6, r7}
    13a4:	b087      	sub	sp, #28
    13a6:	0004      	movs	r4, r0
    13a8:	000e      	movs	r6, r1
    13aa:	4690      	mov	r8, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    13ac:	0008      	movs	r0, r1
    13ae:	4b92      	ldr	r3, [pc, #584]	; (15f8 <tc_init+0x25c>)
    13b0:	4798      	blx	r3
    13b2:	4681      	mov	r9, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    13b4:	4d91      	ldr	r5, [pc, #580]	; (15fc <tc_init+0x260>)
    13b6:	0029      	movs	r1, r5
    13b8:	310c      	adds	r1, #12
    13ba:	2203      	movs	r2, #3
    13bc:	a805      	add	r0, sp, #20
    13be:	4f90      	ldr	r7, [pc, #576]	; (1600 <tc_init+0x264>)
    13c0:	47b8      	blx	r7
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    13c2:	0029      	movs	r1, r5
    13c4:	3110      	adds	r1, #16
    13c6:	2206      	movs	r2, #6
    13c8:	a803      	add	r0, sp, #12
    13ca:	47b8      	blx	r7
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    13cc:	2300      	movs	r3, #0
    13ce:	60a3      	str	r3, [r4, #8]
    13d0:	60e3      	str	r3, [r4, #12]
    13d2:	6123      	str	r3, [r4, #16]
    13d4:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    13d6:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    13d8:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    13da:	464b      	mov	r3, r9
    13dc:	009a      	lsls	r2, r3, #2
    13de:	4b89      	ldr	r3, [pc, #548]	; (1604 <tc_init+0x268>)
    13e0:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    13e2:	6026      	str	r6, [r4, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    13e4:	4643      	mov	r3, r8
    13e6:	789b      	ldrb	r3, [r3, #2]
    13e8:	2b08      	cmp	r3, #8
    13ea:	d104      	bne.n	13f6 <tc_init+0x5a>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    13ec:	2017      	movs	r0, #23
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    13ee:	464a      	mov	r2, r9
    13f0:	07d2      	lsls	r2, r2, #31
    13f2:	d400      	bmi.n	13f6 <tc_init+0x5a>
    13f4:	e0fb      	b.n	15ee <tc_init+0x252>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    13f6:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    13f8:	8833      	ldrh	r3, [r6, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    13fa:	2005      	movs	r0, #5
	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    13fc:	07db      	lsls	r3, r3, #31
    13fe:	d500      	bpl.n	1402 <tc_init+0x66>
    1400:	e0f5      	b.n	15ee <tc_init+0x252>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    1402:	7bf3      	ldrb	r3, [r6, #15]
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
    1404:	3017      	adds	r0, #23
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    1406:	06db      	lsls	r3, r3, #27
    1408:	d500      	bpl.n	140c <tc_init+0x70>
    140a:	e0f0      	b.n	15ee <tc_init+0x252>
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    140c:	8833      	ldrh	r3, [r6, #0]
    140e:	079b      	lsls	r3, r3, #30
    1410:	d500      	bpl.n	1414 <tc_init+0x78>
    1412:	e0ec      	b.n	15ee <tc_init+0x252>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
    1414:	4643      	mov	r3, r8
    1416:	7c1b      	ldrb	r3, [r3, #16]
    1418:	2b00      	cmp	r3, #0
    141a:	d00c      	beq.n	1436 <tc_init+0x9a>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    141c:	a902      	add	r1, sp, #8
    141e:	2301      	movs	r3, #1
    1420:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    1422:	2200      	movs	r2, #0
    1424:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    1426:	4642      	mov	r2, r8
    1428:	7e12      	ldrb	r2, [r2, #24]
    142a:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    142c:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    142e:	4643      	mov	r3, r8
    1430:	7d18      	ldrb	r0, [r3, #20]
    1432:	4b75      	ldr	r3, [pc, #468]	; (1608 <tc_init+0x26c>)
    1434:	4798      	blx	r3
				config->pwm_channel[0].pin_out, &pin_config);
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
    1436:	4643      	mov	r3, r8
    1438:	7f1b      	ldrb	r3, [r3, #28]
    143a:	2b00      	cmp	r3, #0
    143c:	d00d      	beq.n	145a <tc_init+0xbe>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    143e:	a902      	add	r1, sp, #8
    1440:	2301      	movs	r3, #1
    1442:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    1444:	2200      	movs	r2, #0
    1446:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    1448:	4642      	mov	r2, r8
    144a:	6a52      	ldr	r2, [r2, #36]	; 0x24
    144c:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    144e:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    1450:	4643      	mov	r3, r8
    1452:	6a1b      	ldr	r3, [r3, #32]
    1454:	b2d8      	uxtb	r0, r3
    1456:	4b6c      	ldr	r3, [pc, #432]	; (1608 <tc_init+0x26c>)
    1458:	4798      	blx	r3
    145a:	496c      	ldr	r1, [pc, #432]	; (160c <tc_init+0x270>)
    145c:	6a0b      	ldr	r3, [r1, #32]
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			inst_pm_apbmask[instance]);
    145e:	464a      	mov	r2, r9
    1460:	0052      	lsls	r2, r2, #1
    1462:	a803      	add	r0, sp, #12
    1464:	5a12      	ldrh	r2, [r2, r0]
    1466:	4313      	orrs	r3, r2
    1468:	620b      	str	r3, [r1, #32]

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    146a:	4643      	mov	r3, r8
    146c:	789b      	ldrb	r3, [r3, #2]
    146e:	2b08      	cmp	r3, #8
    1470:	d106      	bne.n	1480 <tc_init+0xe4>
    1472:	6a0b      	ldr	r3, [r1, #32]
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
				inst_pm_apbmask[instance + 1]);
    1474:	464a      	mov	r2, r9
    1476:	3201      	adds	r2, #1
    1478:	0052      	lsls	r2, r2, #1
    147a:	5a12      	ldrh	r2, [r2, r0]
    147c:	4313      	orrs	r3, r2
    147e:	620b      	str	r3, [r1, #32]
	}

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = config->clock_source;
    1480:	a901      	add	r1, sp, #4
    1482:	4643      	mov	r3, r8
    1484:	781b      	ldrb	r3, [r3, #0]
    1486:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    1488:	ab05      	add	r3, sp, #20
    148a:	464a      	mov	r2, r9
    148c:	5c9d      	ldrb	r5, [r3, r2]
    148e:	0028      	movs	r0, r5
    1490:	4b5f      	ldr	r3, [pc, #380]	; (1610 <tc_init+0x274>)
    1492:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    1494:	0028      	movs	r0, r5
    1496:	4b5f      	ldr	r3, [pc, #380]	; (1614 <tc_init+0x278>)
    1498:	4798      	blx	r3

	/* Set ctrla register */
	ctrla_tmp =
    149a:	4643      	mov	r3, r8
    149c:	7898      	ldrb	r0, [r3, #2]
    149e:	799b      	ldrb	r3, [r3, #6]
    14a0:	0002      	movs	r2, r0
    14a2:	431a      	orrs	r2, r3
    14a4:	4643      	mov	r3, r8
    14a6:	8918      	ldrh	r0, [r3, #8]
    14a8:	889b      	ldrh	r3, [r3, #4]
    14aa:	4303      	orrs	r3, r0
    14ac:	431a      	orrs	r2, r3
    14ae:	0010      	movs	r0, r2
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;

	if (config->run_in_standby) {
    14b0:	4643      	mov	r3, r8
    14b2:	785b      	ldrb	r3, [r3, #1]
    14b4:	2b00      	cmp	r3, #0
    14b6:	d002      	beq.n	14be <tc_init+0x122>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    14b8:	2380      	movs	r3, #128	; 0x80
    14ba:	011b      	lsls	r3, r3, #4
    14bc:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    14be:	6821      	ldr	r1, [r4, #0]
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    14c0:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    14c2:	7bcb      	ldrb	r3, [r1, #15]
    14c4:	4393      	bics	r3, r2
    14c6:	d1fc      	bne.n	14c2 <tc_init+0x126>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    14c8:	8030      	strh	r0, [r6, #0]

	/* Set ctrlb register */
	if (config->oneshot) {
    14ca:	4643      	mov	r3, r8
    14cc:	7b58      	ldrb	r0, [r3, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    14ce:	1e43      	subs	r3, r0, #1
    14d0:	4198      	sbcs	r0, r3
    14d2:	0080      	lsls	r0, r0, #2
	}

	if (config->count_direction) {
    14d4:	4643      	mov	r3, r8
    14d6:	7b9b      	ldrb	r3, [r3, #14]
    14d8:	2b00      	cmp	r3, #0
    14da:	d001      	beq.n	14e0 <tc_init+0x144>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    14dc:	2301      	movs	r3, #1
    14de:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    14e0:	6821      	ldr	r1, [r4, #0]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
    14e2:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    14e4:	7bcb      	ldrb	r3, [r1, #15]
    14e6:	4393      	bics	r3, r2
    14e8:	d1fc      	bne.n	14e4 <tc_init+0x148>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    14ea:	33ff      	adds	r3, #255	; 0xff
    14ec:	7133      	strb	r3, [r6, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
    14ee:	2800      	cmp	r0, #0
    14f0:	d005      	beq.n	14fe <tc_init+0x162>
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    14f2:	6821      	ldr	r1, [r4, #0]
		while (tc_is_syncing(module_inst)) {
    14f4:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    14f6:	7bcb      	ldrb	r3, [r1, #15]
    14f8:	4393      	bics	r3, r2
    14fa:	d1fc      	bne.n	14f6 <tc_init+0x15a>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    14fc:	7170      	strb	r0, [r6, #5]
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
    14fe:	4643      	mov	r3, r8
    1500:	7a98      	ldrb	r0, [r3, #10]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
    1502:	7adb      	ldrb	r3, [r3, #11]
    1504:	2b00      	cmp	r3, #0
    1506:	d001      	beq.n	150c <tc_init+0x170>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    1508:	2310      	movs	r3, #16
    150a:	4318      	orrs	r0, r3
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
    150c:	4643      	mov	r3, r8
    150e:	7b1b      	ldrb	r3, [r3, #12]
    1510:	2b00      	cmp	r3, #0
    1512:	d001      	beq.n	1518 <tc_init+0x17c>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    1514:	2320      	movs	r3, #32
    1516:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1518:	6821      	ldr	r1, [r4, #0]
		}
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    151a:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    151c:	7bcb      	ldrb	r3, [r1, #15]
    151e:	4393      	bics	r3, r2
    1520:	d1fc      	bne.n	151c <tc_init+0x180>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    1522:	71b0      	strb	r0, [r6, #6]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1524:	6822      	ldr	r2, [r4, #0]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    1526:	217f      	movs	r1, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1528:	7bd3      	ldrb	r3, [r2, #15]
    152a:	438b      	bics	r3, r1
    152c:	d1fc      	bne.n	1528 <tc_init+0x18c>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    152e:	7923      	ldrb	r3, [r4, #4]
    1530:	2b04      	cmp	r3, #4
    1532:	d005      	beq.n	1540 <tc_init+0x1a4>
    1534:	2b08      	cmp	r3, #8
    1536:	d041      	beq.n	15bc <tc_init+0x220>

			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
    1538:	2017      	movs	r0, #23
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    153a:	2b00      	cmp	r3, #0
    153c:	d157      	bne.n	15ee <tc_init+0x252>
    153e:	e024      	b.n	158a <tc_init+0x1ee>
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
    1540:	217f      	movs	r1, #127	; 0x7f
    1542:	7bd3      	ldrb	r3, [r2, #15]
    1544:	438b      	bics	r3, r1
    1546:	d1fc      	bne.n	1542 <tc_init+0x1a6>
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
					config->counter_8_bit.value;
    1548:	3328      	adds	r3, #40	; 0x28
    154a:	4642      	mov	r2, r8
    154c:	5cd3      	ldrb	r3, [r2, r3]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
    154e:	7433      	strb	r3, [r6, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1550:	6821      	ldr	r1, [r4, #0]
					config->counter_8_bit.value;


			while (tc_is_syncing(module_inst)) {
    1552:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1554:	7bcb      	ldrb	r3, [r1, #15]
    1556:	4393      	bics	r3, r2
    1558:	d1fc      	bne.n	1554 <tc_init+0x1b8>
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
					config->counter_8_bit.period;
    155a:	3329      	adds	r3, #41	; 0x29
    155c:	4642      	mov	r2, r8
    155e:	5cd3      	ldrb	r3, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
    1560:	7533      	strb	r3, [r6, #20]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1562:	6821      	ldr	r1, [r4, #0]
					config->counter_8_bit.period;

			while (tc_is_syncing(module_inst)) {
    1564:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1566:	7bcb      	ldrb	r3, [r1, #15]
    1568:	4393      	bics	r3, r2
    156a:	d1fc      	bne.n	1566 <tc_init+0x1ca>
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
					config->counter_8_bit.compare_capture_channel[0];
    156c:	332a      	adds	r3, #42	; 0x2a
    156e:	4642      	mov	r2, r8
    1570:	5cd3      	ldrb	r3, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
    1572:	7633      	strb	r3, [r6, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1574:	6821      	ldr	r1, [r4, #0]
					config->counter_8_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    1576:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1578:	7bcb      	ldrb	r3, [r1, #15]
    157a:	4393      	bics	r3, r2
    157c:	d1fc      	bne.n	1578 <tc_init+0x1dc>
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
					config->counter_8_bit.compare_capture_channel[1];
    157e:	332b      	adds	r3, #43	; 0x2b
    1580:	4642      	mov	r2, r8
    1582:	5cd3      	ldrb	r3, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
    1584:	7673      	strb	r3, [r6, #25]
					config->counter_8_bit.compare_capture_channel[1];

			return STATUS_OK;
    1586:	2000      	movs	r0, #0
    1588:	e031      	b.n	15ee <tc_init+0x252>

		case TC_COUNTER_SIZE_16BIT:
			while (tc_is_syncing(module_inst)) {
    158a:	217f      	movs	r1, #127	; 0x7f
    158c:	7bd3      	ldrb	r3, [r2, #15]
    158e:	438b      	bics	r3, r1
    1590:	d1fc      	bne.n	158c <tc_init+0x1f0>
				/* Wait for sync */
			}

			hw->COUNT16.COUNT.reg
				= config->counter_16_bit.value;
    1592:	4643      	mov	r3, r8
    1594:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    1596:	8233      	strh	r3, [r6, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1598:	6821      	ldr	r1, [r4, #0]

			while (tc_is_syncing(module_inst)) {
    159a:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    159c:	7bcb      	ldrb	r3, [r1, #15]
    159e:	4393      	bics	r3, r2
    15a0:	d1fc      	bne.n	159c <tc_init+0x200>
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
					config->counter_16_bit.compare_capture_channel[0];
    15a2:	4643      	mov	r3, r8
    15a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
    15a6:	8333      	strh	r3, [r6, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    15a8:	6821      	ldr	r1, [r4, #0]
					config->counter_16_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    15aa:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    15ac:	7bcb      	ldrb	r3, [r1, #15]
    15ae:	4393      	bics	r3, r2
    15b0:	d1fc      	bne.n	15ac <tc_init+0x210>
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
					config->counter_16_bit.compare_capture_channel[1];
    15b2:	4643      	mov	r3, r8
    15b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
    15b6:	8373      	strh	r3, [r6, #26]
					config->counter_16_bit.compare_capture_channel[1];

			return STATUS_OK;
    15b8:	2000      	movs	r0, #0
    15ba:	e018      	b.n	15ee <tc_init+0x252>

		case TC_COUNTER_SIZE_32BIT:
			while (tc_is_syncing(module_inst)) {
    15bc:	217f      	movs	r1, #127	; 0x7f
    15be:	7bd3      	ldrb	r3, [r2, #15]
    15c0:	438b      	bics	r3, r1
    15c2:	d1fc      	bne.n	15be <tc_init+0x222>
				/* Wait for sync */
			}

			hw->COUNT32.COUNT.reg
				= config->counter_32_bit.value;
    15c4:	4643      	mov	r3, r8
    15c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    15c8:	6133      	str	r3, [r6, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    15ca:	6821      	ldr	r1, [r4, #0]

			while (tc_is_syncing(module_inst)) {
    15cc:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    15ce:	7bcb      	ldrb	r3, [r1, #15]
    15d0:	4393      	bics	r3, r2
    15d2:	d1fc      	bne.n	15ce <tc_init+0x232>
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
    15d4:	4643      	mov	r3, r8
    15d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    15d8:	61b3      	str	r3, [r6, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    15da:	6821      	ldr	r1, [r4, #0]
					config->counter_32_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    15dc:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    15de:	7bcb      	ldrb	r3, [r1, #15]
    15e0:	4393      	bics	r3, r2
    15e2:	d1fc      	bne.n	15de <tc_init+0x242>
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
					config->counter_32_bit.compare_capture_channel[1];
    15e4:	4643      	mov	r3, r8
    15e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
    15e8:	61f3      	str	r3, [r6, #28]
					config->counter_32_bit.compare_capture_channel[1];

			return STATUS_OK;
    15ea:	2000      	movs	r0, #0
    15ec:	e7ff      	b.n	15ee <tc_init+0x252>
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    15ee:	b007      	add	sp, #28
    15f0:	bc0c      	pop	{r2, r3}
    15f2:	4690      	mov	r8, r2
    15f4:	4699      	mov	r9, r3
    15f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    15f8:	00001365 	.word	0x00001365
    15fc:	0000711c 	.word	0x0000711c
    1600:	00002701 	.word	0x00002701
    1604:	200002d8 	.word	0x200002d8
    1608:	0000231d 	.word	0x0000231d
    160c:	40000400 	.word	0x40000400
    1610:	00002225 	.word	0x00002225
    1614:	00002199 	.word	0x00002199

00001618 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    1618:	b5f0      	push	{r4, r5, r6, r7, lr}
    161a:	4647      	mov	r7, r8
    161c:	b480      	push	{r7}
    161e:	000c      	movs	r4, r1
    1620:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    1622:	2800      	cmp	r0, #0
    1624:	d10d      	bne.n	1642 <_read+0x2a>
		return -1;
	}

	for (; len > 0; --len) {
    1626:	2a00      	cmp	r2, #0
    1628:	dd0e      	ble.n	1648 <_read+0x30>
    162a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    162c:	4e08      	ldr	r6, [pc, #32]	; (1650 <_read+0x38>)
    162e:	4d09      	ldr	r5, [pc, #36]	; (1654 <_read+0x3c>)
    1630:	6830      	ldr	r0, [r6, #0]
    1632:	0021      	movs	r1, r4
    1634:	682b      	ldr	r3, [r5, #0]
    1636:	4798      	blx	r3
		ptr++;
    1638:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
    163a:	42a7      	cmp	r7, r4
    163c:	d1f8      	bne.n	1630 <_read+0x18>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
    163e:	4640      	mov	r0, r8
    1640:	e003      	b.n	164a <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
    1642:	2001      	movs	r0, #1
    1644:	4240      	negs	r0, r0
    1646:	e000      	b.n	164a <_read+0x32>
	}

	for (; len > 0; --len) {
    1648:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
    164a:	bc04      	pop	{r2}
    164c:	4690      	mov	r8, r2
    164e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1650:	200002ec 	.word	0x200002ec
    1654:	200002e4 	.word	0x200002e4

00001658 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    1658:	b5f0      	push	{r4, r5, r6, r7, lr}
    165a:	4647      	mov	r7, r8
    165c:	b480      	push	{r7}
    165e:	000e      	movs	r6, r1
    1660:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    1662:	3801      	subs	r0, #1
    1664:	2802      	cmp	r0, #2
    1666:	d811      	bhi.n	168c <_write+0x34>
		return -1;
	}

	for (; len != 0; --len) {
    1668:	2a00      	cmp	r2, #0
    166a:	d012      	beq.n	1692 <_write+0x3a>
    166c:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    166e:	4b0c      	ldr	r3, [pc, #48]	; (16a0 <_write+0x48>)
    1670:	4698      	mov	r8, r3
    1672:	4f0c      	ldr	r7, [pc, #48]	; (16a4 <_write+0x4c>)
    1674:	4643      	mov	r3, r8
    1676:	6818      	ldr	r0, [r3, #0]
    1678:	5d31      	ldrb	r1, [r6, r4]
    167a:	683b      	ldr	r3, [r7, #0]
    167c:	4798      	blx	r3
    167e:	2800      	cmp	r0, #0
    1680:	db09      	blt.n	1696 <_write+0x3e>
			return -1;
		}
		++nChars;
    1682:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
    1684:	42a5      	cmp	r5, r4
    1686:	d1f5      	bne.n	1674 <_write+0x1c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
    1688:	0020      	movs	r0, r4
    168a:	e006      	b.n	169a <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
    168c:	2001      	movs	r0, #1
    168e:	4240      	negs	r0, r0
    1690:	e003      	b.n	169a <_write+0x42>
	}

	for (; len != 0; --len) {
    1692:	2000      	movs	r0, #0
    1694:	e001      	b.n	169a <_write+0x42>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
    1696:	2001      	movs	r0, #1
    1698:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
    169a:	bc04      	pop	{r2}
    169c:	4690      	mov	r8, r2
    169e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    16a0:	200002ec 	.word	0x200002ec
    16a4:	200002e8 	.word	0x200002e8

000016a8 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    16a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    16aa:	465f      	mov	r7, fp
    16ac:	4656      	mov	r6, sl
    16ae:	464d      	mov	r5, r9
    16b0:	4644      	mov	r4, r8
    16b2:	b4f0      	push	{r4, r5, r6, r7}
    16b4:	b091      	sub	sp, #68	; 0x44
    16b6:	0005      	movs	r5, r0
    16b8:	000c      	movs	r4, r1
    16ba:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    16bc:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    16be:	0008      	movs	r0, r1
    16c0:	4bb9      	ldr	r3, [pc, #740]	; (19a8 <usart_init+0x300>)
    16c2:	4798      	blx	r3
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    16c4:	6822      	ldr	r2, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    16c6:	2305      	movs	r3, #5
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    16c8:	07d2      	lsls	r2, r2, #31
    16ca:	d500      	bpl.n	16ce <usart_init+0x26>
    16cc:	e164      	b.n	1998 <usart_init+0x2f0>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    16ce:	6822      	ldr	r2, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    16d0:	3317      	adds	r3, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    16d2:	0792      	lsls	r2, r2, #30
    16d4:	d500      	bpl.n	16d8 <usart_init+0x30>
    16d6:	e15f      	b.n	1998 <usart_init+0x2f0>
    16d8:	49b4      	ldr	r1, [pc, #720]	; (19ac <usart_init+0x304>)
    16da:	6a0a      	ldr	r2, [r1, #32]
    16dc:	1c87      	adds	r7, r0, #2
    16de:	3b1b      	subs	r3, #27
    16e0:	40bb      	lsls	r3, r7
    16e2:	4313      	orrs	r3, r2
    16e4:	620b      	str	r3, [r1, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    16e6:	a90f      	add	r1, sp, #60	; 0x3c
    16e8:	272d      	movs	r7, #45	; 0x2d
    16ea:	5df3      	ldrb	r3, [r6, r7]
    16ec:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    16ee:	3014      	adds	r0, #20
    16f0:	b2c3      	uxtb	r3, r0
    16f2:	9302      	str	r3, [sp, #8]
    16f4:	0018      	movs	r0, r3
    16f6:	4bae      	ldr	r3, [pc, #696]	; (19b0 <usart_init+0x308>)
    16f8:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    16fa:	9802      	ldr	r0, [sp, #8]
    16fc:	4bad      	ldr	r3, [pc, #692]	; (19b4 <usart_init+0x30c>)
    16fe:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1700:	5df0      	ldrb	r0, [r6, r7]
    1702:	2100      	movs	r1, #0
    1704:	4bac      	ldr	r3, [pc, #688]	; (19b8 <usart_init+0x310>)
    1706:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    1708:	7af3      	ldrb	r3, [r6, #11]
    170a:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    170c:	2324      	movs	r3, #36	; 0x24
    170e:	5cf3      	ldrb	r3, [r6, r3]
    1710:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    1712:	2325      	movs	r3, #37	; 0x25
    1714:	5cf3      	ldrb	r3, [r6, r3]
    1716:	71eb      	strb	r3, [r5, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    1718:	7ef3      	ldrb	r3, [r6, #27]
    171a:	722b      	strb	r3, [r5, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    171c:	7f33      	ldrb	r3, [r6, #28]
    171e:	726b      	strb	r3, [r5, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1720:	682b      	ldr	r3, [r5, #0]
    1722:	4699      	mov	r9, r3

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1724:	0018      	movs	r0, r3
    1726:	4ba0      	ldr	r3, [pc, #640]	; (19a8 <usart_init+0x300>)
    1728:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    172a:	3014      	adds	r0, #20
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    172c:	2200      	movs	r2, #0
    172e:	230e      	movs	r3, #14
    1730:	a906      	add	r1, sp, #24
    1732:	468c      	mov	ip, r1
    1734:	4463      	add	r3, ip
    1736:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    1738:	8a32      	ldrh	r2, [r6, #16]
    173a:	9202      	str	r2, [sp, #8]
    173c:	2380      	movs	r3, #128	; 0x80
    173e:	01db      	lsls	r3, r3, #7
    1740:	429a      	cmp	r2, r3
    1742:	d01a      	beq.n	177a <usart_init+0xd2>
    1744:	d804      	bhi.n	1750 <usart_init+0xa8>
    1746:	2380      	movs	r3, #128	; 0x80
    1748:	019b      	lsls	r3, r3, #6
    174a:	429a      	cmp	r2, r3
    174c:	d00b      	beq.n	1766 <usart_init+0xbe>
    174e:	e104      	b.n	195a <usart_init+0x2b2>
    1750:	23c0      	movs	r3, #192	; 0xc0
    1752:	01db      	lsls	r3, r3, #7
    1754:	9a02      	ldr	r2, [sp, #8]
    1756:	429a      	cmp	r2, r3
    1758:	d00a      	beq.n	1770 <usart_init+0xc8>
    175a:	2380      	movs	r3, #128	; 0x80
    175c:	021b      	lsls	r3, r3, #8
    175e:	429a      	cmp	r2, r3
    1760:	d100      	bne.n	1764 <usart_init+0xbc>
    1762:	e0ff      	b.n	1964 <usart_init+0x2bc>
    1764:	e0f9      	b.n	195a <usart_init+0x2b2>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1766:	2310      	movs	r3, #16
    1768:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    176a:	3b0f      	subs	r3, #15
    176c:	9307      	str	r3, [sp, #28]
    176e:	e0fd      	b.n	196c <usart_init+0x2c4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1770:	2308      	movs	r3, #8
    1772:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1774:	3b07      	subs	r3, #7
    1776:	9307      	str	r3, [sp, #28]
    1778:	e0f8      	b.n	196c <usart_init+0x2c4>
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    177a:	6833      	ldr	r3, [r6, #0]
    177c:	9304      	str	r3, [sp, #16]
		(uint32_t)config->mux_setting |
    177e:	68f3      	ldr	r3, [r6, #12]
    1780:	469b      	mov	fp, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    1782:	6973      	ldr	r3, [r6, #20]
    1784:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1786:	7e33      	ldrb	r3, [r6, #24]
    1788:	4698      	mov	r8, r3
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    178a:	2326      	movs	r3, #38	; 0x26
    178c:	5cf3      	ldrb	r3, [r6, r3]
    178e:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
    1790:	6873      	ldr	r3, [r6, #4]
    1792:	469a      	mov	sl, r3
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    1794:	2b00      	cmp	r3, #0
    1796:	d015      	beq.n	17c4 <usart_init+0x11c>
    1798:	2380      	movs	r3, #128	; 0x80
    179a:	055b      	lsls	r3, r3, #21
    179c:	459a      	cmp	sl, r3
    179e:	d136      	bne.n	180e <usart_init+0x166>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    17a0:	2327      	movs	r3, #39	; 0x27
    17a2:	5cf3      	ldrb	r3, [r6, r3]
    17a4:	2b00      	cmp	r3, #0
    17a6:	d136      	bne.n	1816 <usart_init+0x16e>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    17a8:	6a33      	ldr	r3, [r6, #32]
    17aa:	001f      	movs	r7, r3
    17ac:	b2c0      	uxtb	r0, r0
    17ae:	4b83      	ldr	r3, [pc, #524]	; (19bc <usart_init+0x314>)
    17b0:	4798      	blx	r3
    17b2:	0001      	movs	r1, r0
    17b4:	220e      	movs	r2, #14
    17b6:	ab06      	add	r3, sp, #24
    17b8:	469c      	mov	ip, r3
    17ba:	4462      	add	r2, ip
    17bc:	0038      	movs	r0, r7
    17be:	4b80      	ldr	r3, [pc, #512]	; (19c0 <usart_init+0x318>)
    17c0:	4798      	blx	r3
    17c2:	e025      	b.n	1810 <usart_init+0x168>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    17c4:	2308      	movs	r3, #8
    17c6:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    17c8:	2300      	movs	r3, #0
    17ca:	9307      	str	r3, [sp, #28]
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    17cc:	2327      	movs	r3, #39	; 0x27
    17ce:	5cf3      	ldrb	r3, [r6, r3]
    17d0:	2b00      	cmp	r3, #0
    17d2:	d00b      	beq.n	17ec <usart_init+0x144>
				status_code =
    17d4:	9b06      	ldr	r3, [sp, #24]
    17d6:	9300      	str	r3, [sp, #0]
    17d8:	9b07      	ldr	r3, [sp, #28]
    17da:	220e      	movs	r2, #14
    17dc:	a906      	add	r1, sp, #24
    17de:	468c      	mov	ip, r1
    17e0:	4462      	add	r2, ip
    17e2:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    17e4:	6a30      	ldr	r0, [r6, #32]
    17e6:	4f77      	ldr	r7, [pc, #476]	; (19c4 <usart_init+0x31c>)
    17e8:	47b8      	blx	r7
    17ea:	e011      	b.n	1810 <usart_init+0x168>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    17ec:	6a33      	ldr	r3, [r6, #32]
    17ee:	001f      	movs	r7, r3
    17f0:	b2c0      	uxtb	r0, r0
    17f2:	4b72      	ldr	r3, [pc, #456]	; (19bc <usart_init+0x314>)
    17f4:	4798      	blx	r3
    17f6:	0001      	movs	r1, r0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    17f8:	9b06      	ldr	r3, [sp, #24]
    17fa:	9300      	str	r3, [sp, #0]
    17fc:	9b07      	ldr	r3, [sp, #28]
    17fe:	220e      	movs	r2, #14
    1800:	a806      	add	r0, sp, #24
    1802:	4684      	mov	ip, r0
    1804:	4462      	add	r2, ip
    1806:	0038      	movs	r0, r7
    1808:	4f6e      	ldr	r7, [pc, #440]	; (19c4 <usart_init+0x31c>)
    180a:	47b8      	blx	r7
    180c:	e000      	b.n	1810 <usart_init+0x168>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
    180e:	2000      	movs	r0, #0
    1810:	1e03      	subs	r3, r0, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    1812:	d000      	beq.n	1816 <usart_init+0x16e>
    1814:	e0c0      	b.n	1998 <usart_init+0x2f0>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    1816:	7e73      	ldrb	r3, [r6, #25]
    1818:	2b00      	cmp	r3, #0
    181a:	d002      	beq.n	1822 <usart_init+0x17a>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    181c:	7eb3      	ldrb	r3, [r6, #26]
    181e:	464a      	mov	r2, r9
    1820:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1822:	682a      	ldr	r2, [r5, #0]
    1824:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1826:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1828:	2b00      	cmp	r3, #0
    182a:	d1fc      	bne.n	1826 <usart_init+0x17e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    182c:	330e      	adds	r3, #14
    182e:	aa06      	add	r2, sp, #24
    1830:	4694      	mov	ip, r2
    1832:	4463      	add	r3, ip
    1834:	881b      	ldrh	r3, [r3, #0]
    1836:	464a      	mov	r2, r9
    1838:	8193      	strh	r3, [r2, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    183a:	9b04      	ldr	r3, [sp, #16]
    183c:	465a      	mov	r2, fp
    183e:	4313      	orrs	r3, r2
    1840:	9a03      	ldr	r2, [sp, #12]
    1842:	4313      	orrs	r3, r2
    1844:	4652      	mov	r2, sl
    1846:	4313      	orrs	r3, r2
    1848:	433b      	orrs	r3, r7
    184a:	4642      	mov	r2, r8
    184c:	0212      	lsls	r2, r2, #8
    184e:	4313      	orrs	r3, r2
    1850:	9a05      	ldr	r2, [sp, #20]
    1852:	0757      	lsls	r7, r2, #29
    1854:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
    1856:	2327      	movs	r3, #39	; 0x27
    1858:	5cf3      	ldrb	r3, [r6, r3]
    185a:	2b00      	cmp	r3, #0
    185c:	d101      	bne.n	1862 <usart_init+0x1ba>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    185e:	3304      	adds	r3, #4
    1860:	431f      	orrs	r7, r3
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
    1862:	7e71      	ldrb	r1, [r6, #25]
    1864:	0289      	lsls	r1, r1, #10
    1866:	7f33      	ldrb	r3, [r6, #28]
    1868:	025b      	lsls	r3, r3, #9
    186a:	4319      	orrs	r1, r3
    186c:	7f73      	ldrb	r3, [r6, #29]
    186e:	021b      	lsls	r3, r3, #8
    1870:	4319      	orrs	r1, r3
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1872:	2324      	movs	r3, #36	; 0x24
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
    1874:	5cf3      	ldrb	r3, [r6, r3]
    1876:	045b      	lsls	r3, r3, #17
    1878:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    187a:	2325      	movs	r3, #37	; 0x25
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
    187c:	5cf2      	ldrb	r2, [r6, r3]
    187e:	0412      	lsls	r2, r2, #16
    1880:	4311      	orrs	r1, r2
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->character_size;
    1882:	7af3      	ldrb	r3, [r6, #11]
    1884:	4319      	orrs	r1, r3
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    1886:	8933      	ldrh	r3, [r6, #8]
    1888:	2bff      	cmp	r3, #255	; 0xff
    188a:	d004      	beq.n	1896 <usart_init+0x1ee>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    188c:	2280      	movs	r2, #128	; 0x80
    188e:	0452      	lsls	r2, r2, #17
    1890:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    1892:	4319      	orrs	r1, r3
    1894:	e005      	b.n	18a2 <usart_init+0x1fa>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    1896:	7ef3      	ldrb	r3, [r6, #27]
    1898:	2b00      	cmp	r3, #0
    189a:	d002      	beq.n	18a2 <usart_init+0x1fa>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    189c:	2380      	movs	r3, #128	; 0x80
    189e:	04db      	lsls	r3, r3, #19
    18a0:	431f      	orrs	r7, r3
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    18a2:	232c      	movs	r3, #44	; 0x2c
    18a4:	5cf3      	ldrb	r3, [r6, r3]
    18a6:	2b00      	cmp	r3, #0
    18a8:	d103      	bne.n	18b2 <usart_init+0x20a>
    18aa:	4b47      	ldr	r3, [pc, #284]	; (19c8 <usart_init+0x320>)
    18ac:	789b      	ldrb	r3, [r3, #2]
    18ae:	079b      	lsls	r3, r3, #30
    18b0:	d501      	bpl.n	18b6 <usart_init+0x20e>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    18b2:	2380      	movs	r3, #128	; 0x80
    18b4:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    18b6:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    18b8:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    18ba:	2b00      	cmp	r3, #0
    18bc:	d1fc      	bne.n	18b8 <usart_init+0x210>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    18be:	464b      	mov	r3, r9
    18c0:	6059      	str	r1, [r3, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    18c2:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    18c4:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    18c6:	2b00      	cmp	r3, #0
    18c8:	d1fc      	bne.n	18c4 <usart_init+0x21c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    18ca:	464b      	mov	r3, r9
    18cc:	601f      	str	r7, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    18ce:	ab0e      	add	r3, sp, #56	; 0x38
    18d0:	2280      	movs	r2, #128	; 0x80
    18d2:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    18d4:	2200      	movs	r2, #0
    18d6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    18d8:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    18da:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
    18dc:	6b33      	ldr	r3, [r6, #48]	; 0x30
    18de:	930a      	str	r3, [sp, #40]	; 0x28
    18e0:	6b73      	ldr	r3, [r6, #52]	; 0x34
    18e2:	930b      	str	r3, [sp, #44]	; 0x2c
    18e4:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    18e6:	930c      	str	r3, [sp, #48]	; 0x30
    18e8:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    18ea:	9302      	str	r3, [sp, #8]
    18ec:	930d      	str	r3, [sp, #52]	; 0x34
    18ee:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    18f0:	ae0e      	add	r6, sp, #56	; 0x38
    18f2:	b2f9      	uxtb	r1, r7
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    18f4:	00bb      	lsls	r3, r7, #2
    18f6:	aa0a      	add	r2, sp, #40	; 0x28
    18f8:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    18fa:	2800      	cmp	r0, #0
    18fc:	d102      	bne.n	1904 <usart_init+0x25c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    18fe:	0020      	movs	r0, r4
    1900:	4b32      	ldr	r3, [pc, #200]	; (19cc <usart_init+0x324>)
    1902:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
    1904:	1c43      	adds	r3, r0, #1
    1906:	d005      	beq.n	1914 <usart_init+0x26c>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1908:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    190a:	0c00      	lsrs	r0, r0, #16
    190c:	b2c0      	uxtb	r0, r0
    190e:	0031      	movs	r1, r6
    1910:	4b2f      	ldr	r3, [pc, #188]	; (19d0 <usart_init+0x328>)
    1912:	4798      	blx	r3
    1914:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    1916:	2f04      	cmp	r7, #4
    1918:	d1eb      	bne.n	18f2 <usart_init+0x24a>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
    191a:	2300      	movs	r3, #0
    191c:	60eb      	str	r3, [r5, #12]
    191e:	612b      	str	r3, [r5, #16]
    1920:	616b      	str	r3, [r5, #20]
    1922:	61ab      	str	r3, [r5, #24]
    1924:	61eb      	str	r3, [r5, #28]
    1926:	622b      	str	r3, [r5, #32]
	}

	module->tx_buffer_ptr              = NULL;
    1928:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    192a:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    192c:	2200      	movs	r2, #0
    192e:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    1930:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    1932:	3330      	adds	r3, #48	; 0x30
    1934:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    1936:	3301      	adds	r3, #1
    1938:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    193a:	3301      	adds	r3, #1
    193c:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    193e:	3301      	adds	r3, #1
    1940:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    1942:	6828      	ldr	r0, [r5, #0]
    1944:	4b18      	ldr	r3, [pc, #96]	; (19a8 <usart_init+0x300>)
    1946:	4798      	blx	r3
    1948:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    194a:	4922      	ldr	r1, [pc, #136]	; (19d4 <usart_init+0x32c>)
    194c:	4b22      	ldr	r3, [pc, #136]	; (19d8 <usart_init+0x330>)
    194e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1950:	00a4      	lsls	r4, r4, #2
    1952:	4b22      	ldr	r3, [pc, #136]	; (19dc <usart_init+0x334>)
    1954:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
    1956:	2300      	movs	r3, #0
    1958:	e01e      	b.n	1998 <usart_init+0x2f0>
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    195a:	2310      	movs	r3, #16
    195c:	9306      	str	r3, [sp, #24]
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    195e:	2300      	movs	r3, #0
    1960:	9307      	str	r3, [sp, #28]
    1962:	e003      	b.n	196c <usart_init+0x2c4>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    1964:	2303      	movs	r3, #3
    1966:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1968:	2300      	movs	r3, #0
    196a:	9307      	str	r3, [sp, #28]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    196c:	6833      	ldr	r3, [r6, #0]
    196e:	9304      	str	r3, [sp, #16]
		(uint32_t)config->mux_setting |
    1970:	68f3      	ldr	r3, [r6, #12]
    1972:	469b      	mov	fp, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    1974:	6973      	ldr	r3, [r6, #20]
    1976:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1978:	7e33      	ldrb	r3, [r6, #24]
    197a:	4698      	mov	r8, r3
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    197c:	2326      	movs	r3, #38	; 0x26
    197e:	5cf3      	ldrb	r3, [r6, r3]
    1980:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
    1982:	6873      	ldr	r3, [r6, #4]
    1984:	469a      	mov	sl, r3
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    1986:	2b00      	cmp	r3, #0
    1988:	d100      	bne.n	198c <usart_init+0x2e4>
    198a:	e71f      	b.n	17cc <usart_init+0x124>
    198c:	2380      	movs	r3, #128	; 0x80
    198e:	055b      	lsls	r3, r3, #21
    1990:	459a      	cmp	sl, r3
    1992:	d100      	bne.n	1996 <usart_init+0x2ee>
    1994:	e704      	b.n	17a0 <usart_init+0xf8>
    1996:	e73e      	b.n	1816 <usart_init+0x16e>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    1998:	0018      	movs	r0, r3
    199a:	b011      	add	sp, #68	; 0x44
    199c:	bc3c      	pop	{r2, r3, r4, r5}
    199e:	4690      	mov	r8, r2
    19a0:	4699      	mov	r9, r3
    19a2:	46a2      	mov	sl, r4
    19a4:	46ab      	mov	fp, r5
    19a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    19a8:	00000ca9 	.word	0x00000ca9
    19ac:	40000400 	.word	0x40000400
    19b0:	00002225 	.word	0x00002225
    19b4:	00002199 	.word	0x00002199
    19b8:	00000ad5 	.word	0x00000ad5
    19bc:	00002241 	.word	0x00002241
    19c0:	000008e5 	.word	0x000008e5
    19c4:	0000090d 	.word	0x0000090d
    19c8:	41002000 	.word	0x41002000
    19cc:	00000b21 	.word	0x00000b21
    19d0:	0000231d 	.word	0x0000231d
    19d4:	00001a7d 	.word	0x00001a7d
    19d8:	00001c0d 	.word	0x00001c0d
    19dc:	200002f0 	.word	0x200002f0

000019e0 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    19e0:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    19e2:	231c      	movs	r3, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    19e4:	2a00      	cmp	r2, #0
    19e6:	d00e      	beq.n	1a06 <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    19e8:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    19ea:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    19ec:	3b17      	subs	r3, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    19ee:	2a00      	cmp	r2, #0
    19f0:	d109      	bne.n	1a06 <usart_write_wait+0x26>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    19f2:	6803      	ldr	r3, [r0, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    19f4:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    19f6:	2a00      	cmp	r2, #0
    19f8:	d1fc      	bne.n	19f4 <usart_write_wait+0x14>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    19fa:	8519      	strh	r1, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    19fc:	2102      	movs	r1, #2
    19fe:	7e1a      	ldrb	r2, [r3, #24]
    1a00:	420a      	tst	r2, r1
    1a02:	d0fc      	beq.n	19fe <usart_write_wait+0x1e>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    1a04:	2300      	movs	r3, #0
}
    1a06:	0018      	movs	r0, r3
    1a08:	4770      	bx	lr
    1a0a:	46c0      	nop			; (mov r8, r8)

00001a0c <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1a0c:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    1a0e:	231c      	movs	r3, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1a10:	2a00      	cmp	r2, #0
    1a12:	d030      	beq.n	1a76 <usart_read_wait+0x6a>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    1a14:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    1a16:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1a18:	3b17      	subs	r3, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    1a1a:	2a00      	cmp	r2, #0
    1a1c:	d12b      	bne.n	1a76 <usart_read_wait+0x6a>

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1a1e:	6802      	ldr	r2, [r0, #0]
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    1a20:	7e10      	ldrb	r0, [r2, #24]
    1a22:	0740      	lsls	r0, r0, #29
    1a24:	d527      	bpl.n	1a76 <usart_read_wait+0x6a>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1a26:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1a28:	2b00      	cmp	r3, #0
    1a2a:	d1fc      	bne.n	1a26 <usart_read_wait+0x1a>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1a2c:	8b53      	ldrh	r3, [r2, #26]
    1a2e:	b2db      	uxtb	r3, r3

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    1a30:	0698      	lsls	r0, r3, #26
    1a32:	d01d      	beq.n	1a70 <usart_read_wait+0x64>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    1a34:	0798      	lsls	r0, r3, #30
    1a36:	d503      	bpl.n	1a40 <usart_read_wait+0x34>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1a38:	2302      	movs	r3, #2
    1a3a:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_BAD_FORMAT;
    1a3c:	3318      	adds	r3, #24
    1a3e:	e01a      	b.n	1a76 <usart_read_wait+0x6a>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1a40:	0758      	lsls	r0, r3, #29
    1a42:	d503      	bpl.n	1a4c <usart_read_wait+0x40>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1a44:	2304      	movs	r3, #4
    1a46:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_OVERFLOW;
    1a48:	331a      	adds	r3, #26
    1a4a:	e014      	b.n	1a76 <usart_read_wait+0x6a>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1a4c:	07d8      	lsls	r0, r3, #31
    1a4e:	d503      	bpl.n	1a58 <usart_read_wait+0x4c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1a50:	2301      	movs	r3, #1
    1a52:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_BAD_DATA;
    1a54:	3312      	adds	r3, #18
    1a56:	e00e      	b.n	1a76 <usart_read_wait+0x6a>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    1a58:	06d8      	lsls	r0, r3, #27
    1a5a:	d503      	bpl.n	1a64 <usart_read_wait+0x58>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1a5c:	2310      	movs	r3, #16
    1a5e:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_PROTOCOL;
    1a60:	3332      	adds	r3, #50	; 0x32
    1a62:	e008      	b.n	1a76 <usart_read_wait+0x6a>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    1a64:	069b      	lsls	r3, r3, #26
    1a66:	d503      	bpl.n	1a70 <usart_read_wait+0x64>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1a68:	2320      	movs	r3, #32
    1a6a:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_PACKET_COLLISION;
    1a6c:	3321      	adds	r3, #33	; 0x21
    1a6e:	e002      	b.n	1a76 <usart_read_wait+0x6a>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    1a70:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    1a72:	800b      	strh	r3, [r1, #0]

	return STATUS_OK;
    1a74:	2300      	movs	r3, #0
}
    1a76:	0018      	movs	r0, r3
    1a78:	4770      	bx	lr
    1a7a:	46c0      	nop			; (mov r8, r8)

00001a7c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    1a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    1a7e:	0080      	lsls	r0, r0, #2
    1a80:	4b60      	ldr	r3, [pc, #384]	; (1c04 <_usart_interrupt_handler+0x188>)
    1a82:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    1a84:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1a86:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1a88:	2b00      	cmp	r3, #0
    1a8a:	d1fc      	bne.n	1a86 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    1a8c:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    1a8e:	7da6      	ldrb	r6, [r4, #22]
    1a90:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    1a92:	2330      	movs	r3, #48	; 0x30
    1a94:	5ceb      	ldrb	r3, [r5, r3]
    1a96:	2231      	movs	r2, #49	; 0x31
    1a98:	5caf      	ldrb	r7, [r5, r2]
    1a9a:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    1a9c:	07f3      	lsls	r3, r6, #31
    1a9e:	d522      	bpl.n	1ae6 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    1aa0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1aa2:	b29b      	uxth	r3, r3
    1aa4:	2b00      	cmp	r3, #0
    1aa6:	d01c      	beq.n	1ae2 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1aa8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    1aaa:	7813      	ldrb	r3, [r2, #0]
    1aac:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    1aae:	1c51      	adds	r1, r2, #1
    1ab0:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1ab2:	7969      	ldrb	r1, [r5, #5]
    1ab4:	2901      	cmp	r1, #1
    1ab6:	d001      	beq.n	1abc <_usart_interrupt_handler+0x40>
	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
		if (module->remaining_tx_buffer_length) {
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1ab8:	b29b      	uxth	r3, r3
    1aba:	e004      	b.n	1ac6 <_usart_interrupt_handler+0x4a>
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    1abc:	7851      	ldrb	r1, [r2, #1]
    1abe:	0209      	lsls	r1, r1, #8
    1ac0:	430b      	orrs	r3, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    1ac2:	3202      	adds	r2, #2
    1ac4:	62aa      	str	r2, [r5, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    1ac6:	05db      	lsls	r3, r3, #23
    1ac8:	0ddb      	lsrs	r3, r3, #23
    1aca:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    1acc:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1ace:	3b01      	subs	r3, #1
    1ad0:	b29b      	uxth	r3, r3
    1ad2:	85eb      	strh	r3, [r5, #46]	; 0x2e
    1ad4:	2b00      	cmp	r3, #0
    1ad6:	d106      	bne.n	1ae6 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1ad8:	3301      	adds	r3, #1
    1ada:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    1adc:	3301      	adds	r3, #1
    1ade:	75a3      	strb	r3, [r4, #22]
    1ae0:	e001      	b.n	1ae6 <_usart_interrupt_handler+0x6a>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1ae2:	2301      	movs	r3, #1
    1ae4:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    1ae6:	07b3      	lsls	r3, r6, #30
    1ae8:	d509      	bpl.n	1afe <_usart_interrupt_handler+0x82>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    1aea:	2302      	movs	r3, #2
    1aec:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    1aee:	2200      	movs	r2, #0
    1af0:	3331      	adds	r3, #49	; 0x31
    1af2:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    1af4:	07fb      	lsls	r3, r7, #31
    1af6:	d502      	bpl.n	1afe <_usart_interrupt_handler+0x82>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    1af8:	0028      	movs	r0, r5
    1afa:	68eb      	ldr	r3, [r5, #12]
    1afc:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    1afe:	0773      	lsls	r3, r6, #29
    1b00:	d560      	bpl.n	1bc4 <_usart_interrupt_handler+0x148>

		if (module->remaining_rx_buffer_length) {
    1b02:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1b04:	b29b      	uxth	r3, r3
    1b06:	2b00      	cmp	r3, #0
    1b08:	d05a      	beq.n	1bc0 <_usart_interrupt_handler+0x144>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1b0a:	8b63      	ldrh	r3, [r4, #26]
    1b0c:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    1b0e:	071a      	lsls	r2, r3, #28
    1b10:	d402      	bmi.n	1b18 <_usart_interrupt_handler+0x9c>
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {

		if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1b12:	223f      	movs	r2, #63	; 0x3f
    1b14:	4013      	ands	r3, r2
    1b16:	e001      	b.n	1b1c <_usart_interrupt_handler+0xa0>
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
				error_code &= ~SERCOM_USART_STATUS_CTS;
    1b18:	2237      	movs	r2, #55	; 0x37
    1b1a:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    1b1c:	2b00      	cmp	r3, #0
    1b1e:	d02d      	beq.n	1b7c <_usart_interrupt_handler+0x100>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    1b20:	079a      	lsls	r2, r3, #30
    1b22:	d505      	bpl.n	1b30 <_usart_interrupt_handler+0xb4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    1b24:	221a      	movs	r2, #26
    1b26:	2332      	movs	r3, #50	; 0x32
    1b28:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1b2a:	3b30      	subs	r3, #48	; 0x30
    1b2c:	8363      	strh	r3, [r4, #26]
    1b2e:	e01f      	b.n	1b70 <_usart_interrupt_handler+0xf4>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1b30:	075a      	lsls	r2, r3, #29
    1b32:	d505      	bpl.n	1b40 <_usart_interrupt_handler+0xc4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    1b34:	221e      	movs	r2, #30
    1b36:	2332      	movs	r3, #50	; 0x32
    1b38:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1b3a:	3b2e      	subs	r3, #46	; 0x2e
    1b3c:	8363      	strh	r3, [r4, #26]
    1b3e:	e017      	b.n	1b70 <_usart_interrupt_handler+0xf4>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1b40:	07da      	lsls	r2, r3, #31
    1b42:	d505      	bpl.n	1b50 <_usart_interrupt_handler+0xd4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    1b44:	2213      	movs	r2, #19
    1b46:	2332      	movs	r3, #50	; 0x32
    1b48:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1b4a:	3b31      	subs	r3, #49	; 0x31
    1b4c:	8363      	strh	r3, [r4, #26]
    1b4e:	e00f      	b.n	1b70 <_usart_interrupt_handler+0xf4>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    1b50:	06da      	lsls	r2, r3, #27
    1b52:	d505      	bpl.n	1b60 <_usart_interrupt_handler+0xe4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    1b54:	2242      	movs	r2, #66	; 0x42
    1b56:	2332      	movs	r3, #50	; 0x32
    1b58:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1b5a:	3b22      	subs	r3, #34	; 0x22
    1b5c:	8363      	strh	r3, [r4, #26]
    1b5e:	e007      	b.n	1b70 <_usart_interrupt_handler+0xf4>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    1b60:	2220      	movs	r2, #32
    1b62:	421a      	tst	r2, r3
    1b64:	d004      	beq.n	1b70 <_usart_interrupt_handler+0xf4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    1b66:	3221      	adds	r2, #33	; 0x21
    1b68:	2332      	movs	r3, #50	; 0x32
    1b6a:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1b6c:	3b12      	subs	r3, #18
    1b6e:	8363      	strh	r3, [r4, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    1b70:	077b      	lsls	r3, r7, #29
    1b72:	d527      	bpl.n	1bc4 <_usart_interrupt_handler+0x148>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    1b74:	0028      	movs	r0, r5
    1b76:	696b      	ldr	r3, [r5, #20]
    1b78:	4798      	blx	r3
    1b7a:	e023      	b.n	1bc4 <_usart_interrupt_handler+0x148>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    1b7c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    1b7e:	05db      	lsls	r3, r3, #23
    1b80:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    1b82:	b2da      	uxtb	r2, r3
    1b84:	6a69      	ldr	r1, [r5, #36]	; 0x24
    1b86:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    1b88:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    1b8a:	1c51      	adds	r1, r2, #1
    1b8c:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1b8e:	7969      	ldrb	r1, [r5, #5]
    1b90:	2901      	cmp	r1, #1
    1b92:	d104      	bne.n	1b9e <_usart_interrupt_handler+0x122>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    1b94:	0a1b      	lsrs	r3, r3, #8
    1b96:	7053      	strb	r3, [r2, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    1b98:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1b9a:	3301      	adds	r3, #1
    1b9c:	626b      	str	r3, [r5, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    1b9e:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1ba0:	3b01      	subs	r3, #1
    1ba2:	b29b      	uxth	r3, r3
    1ba4:	85ab      	strh	r3, [r5, #44]	; 0x2c
    1ba6:	2b00      	cmp	r3, #0
    1ba8:	d10c      	bne.n	1bc4 <_usart_interrupt_handler+0x148>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1baa:	3304      	adds	r3, #4
    1bac:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    1bae:	2200      	movs	r2, #0
    1bb0:	332e      	adds	r3, #46	; 0x2e
    1bb2:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    1bb4:	07bb      	lsls	r3, r7, #30
    1bb6:	d505      	bpl.n	1bc4 <_usart_interrupt_handler+0x148>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    1bb8:	0028      	movs	r0, r5
    1bba:	692b      	ldr	r3, [r5, #16]
    1bbc:	4798      	blx	r3
    1bbe:	e001      	b.n	1bc4 <_usart_interrupt_handler+0x148>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1bc0:	2304      	movs	r3, #4
    1bc2:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1bc4:	06f3      	lsls	r3, r6, #27
    1bc6:	d507      	bpl.n	1bd8 <_usart_interrupt_handler+0x15c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    1bc8:	2310      	movs	r3, #16
    1bca:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    1bcc:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    1bce:	06fb      	lsls	r3, r7, #27
    1bd0:	d502      	bpl.n	1bd8 <_usart_interrupt_handler+0x15c>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    1bd2:	0028      	movs	r0, r5
    1bd4:	69eb      	ldr	r3, [r5, #28]
    1bd6:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    1bd8:	06b3      	lsls	r3, r6, #26
    1bda:	d507      	bpl.n	1bec <_usart_interrupt_handler+0x170>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    1bdc:	2320      	movs	r3, #32
    1bde:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    1be0:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    1be2:	073b      	lsls	r3, r7, #28
    1be4:	d502      	bpl.n	1bec <_usart_interrupt_handler+0x170>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    1be6:	0028      	movs	r0, r5
    1be8:	69ab      	ldr	r3, [r5, #24]
    1bea:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    1bec:	0733      	lsls	r3, r6, #28
    1bee:	d507      	bpl.n	1c00 <_usart_interrupt_handler+0x184>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1bf0:	2308      	movs	r3, #8
    1bf2:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1bf4:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    1bf6:	06bb      	lsls	r3, r7, #26
    1bf8:	d502      	bpl.n	1c00 <_usart_interrupt_handler+0x184>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    1bfa:	6a2b      	ldr	r3, [r5, #32]
    1bfc:	0028      	movs	r0, r5
    1bfe:	4798      	blx	r3
		}
	}
#endif
}
    1c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1c02:	46c0      	nop			; (mov r8, r8)
    1c04:	200002f0 	.word	0x200002f0

00001c08 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    1c08:	4770      	bx	lr
    1c0a:	46c0      	nop			; (mov r8, r8)

00001c0c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    1c0e:	4b0a      	ldr	r3, [pc, #40]	; (1c38 <_sercom_set_handler+0x2c>)
    1c10:	781b      	ldrb	r3, [r3, #0]
    1c12:	2b00      	cmp	r3, #0
    1c14:	d10c      	bne.n	1c30 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1c16:	4f09      	ldr	r7, [pc, #36]	; (1c3c <_sercom_set_handler+0x30>)
    1c18:	4e09      	ldr	r6, [pc, #36]	; (1c40 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    1c1a:	4d0a      	ldr	r5, [pc, #40]	; (1c44 <_sercom_set_handler+0x38>)
    1c1c:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1c1e:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    1c20:	195a      	adds	r2, r3, r5
    1c22:	6014      	str	r4, [r2, #0]
    1c24:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1c26:	2b18      	cmp	r3, #24
    1c28:	d1f9      	bne.n	1c1e <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    1c2a:	2201      	movs	r2, #1
    1c2c:	4b02      	ldr	r3, [pc, #8]	; (1c38 <_sercom_set_handler+0x2c>)
    1c2e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1c30:	0080      	lsls	r0, r0, #2
    1c32:	4b02      	ldr	r3, [pc, #8]	; (1c3c <_sercom_set_handler+0x30>)
    1c34:	50c1      	str	r1, [r0, r3]
}
    1c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c38:	200000c6 	.word	0x200000c6
    1c3c:	200000c8 	.word	0x200000c8
    1c40:	00001c09 	.word	0x00001c09
    1c44:	200002f0 	.word	0x200002f0

00001c48 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1c48:	b510      	push	{r4, lr}
    1c4a:	b082      	sub	sp, #8
    1c4c:	0004      	movs	r4, r0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1c4e:	2206      	movs	r2, #6
    1c50:	4905      	ldr	r1, [pc, #20]	; (1c68 <_sercom_get_interrupt_vector+0x20>)
    1c52:	4668      	mov	r0, sp
    1c54:	4b05      	ldr	r3, [pc, #20]	; (1c6c <_sercom_get_interrupt_vector+0x24>)
    1c56:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1c58:	0020      	movs	r0, r4
    1c5a:	4b05      	ldr	r3, [pc, #20]	; (1c70 <_sercom_get_interrupt_vector+0x28>)
    1c5c:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1c5e:	466b      	mov	r3, sp
    1c60:	5618      	ldrsb	r0, [r3, r0]
}
    1c62:	b002      	add	sp, #8
    1c64:	bd10      	pop	{r4, pc}
    1c66:	46c0      	nop			; (mov r8, r8)
    1c68:	00007134 	.word	0x00007134
    1c6c:	00002701 	.word	0x00002701
    1c70:	00000ca9 	.word	0x00000ca9

00001c74 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1c74:	b510      	push	{r4, lr}
    1c76:	4b02      	ldr	r3, [pc, #8]	; (1c80 <SERCOM0_Handler+0xc>)
    1c78:	681b      	ldr	r3, [r3, #0]
    1c7a:	2000      	movs	r0, #0
    1c7c:	4798      	blx	r3
    1c7e:	bd10      	pop	{r4, pc}
    1c80:	200000c8 	.word	0x200000c8

00001c84 <SERCOM1_Handler>:
    1c84:	b510      	push	{r4, lr}
    1c86:	4b02      	ldr	r3, [pc, #8]	; (1c90 <SERCOM1_Handler+0xc>)
    1c88:	685b      	ldr	r3, [r3, #4]
    1c8a:	2001      	movs	r0, #1
    1c8c:	4798      	blx	r3
    1c8e:	bd10      	pop	{r4, pc}
    1c90:	200000c8 	.word	0x200000c8

00001c94 <SERCOM2_Handler>:
    1c94:	b510      	push	{r4, lr}
    1c96:	4b02      	ldr	r3, [pc, #8]	; (1ca0 <SERCOM2_Handler+0xc>)
    1c98:	689b      	ldr	r3, [r3, #8]
    1c9a:	2002      	movs	r0, #2
    1c9c:	4798      	blx	r3
    1c9e:	bd10      	pop	{r4, pc}
    1ca0:	200000c8 	.word	0x200000c8

00001ca4 <SERCOM3_Handler>:
    1ca4:	b510      	push	{r4, lr}
    1ca6:	4b02      	ldr	r3, [pc, #8]	; (1cb0 <SERCOM3_Handler+0xc>)
    1ca8:	68db      	ldr	r3, [r3, #12]
    1caa:	2003      	movs	r0, #3
    1cac:	4798      	blx	r3
    1cae:	bd10      	pop	{r4, pc}
    1cb0:	200000c8 	.word	0x200000c8

00001cb4 <SERCOM4_Handler>:
    1cb4:	b510      	push	{r4, lr}
    1cb6:	4b02      	ldr	r3, [pc, #8]	; (1cc0 <SERCOM4_Handler+0xc>)
    1cb8:	691b      	ldr	r3, [r3, #16]
    1cba:	2004      	movs	r0, #4
    1cbc:	4798      	blx	r3
    1cbe:	bd10      	pop	{r4, pc}
    1cc0:	200000c8 	.word	0x200000c8

00001cc4 <SERCOM5_Handler>:
    1cc4:	b510      	push	{r4, lr}
    1cc6:	4b02      	ldr	r3, [pc, #8]	; (1cd0 <SERCOM5_Handler+0xc>)
    1cc8:	695b      	ldr	r3, [r3, #20]
    1cca:	2005      	movs	r0, #5
    1ccc:	4798      	blx	r3
    1cce:	bd10      	pop	{r4, pc}
    1cd0:	200000c8 	.word	0x200000c8

00001cd4 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    1cd4:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    1cd6:	2000      	movs	r0, #0
    1cd8:	4b08      	ldr	r3, [pc, #32]	; (1cfc <delay_init+0x28>)
    1cda:	4798      	blx	r3
    1cdc:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    1cde:	4c08      	ldr	r4, [pc, #32]	; (1d00 <delay_init+0x2c>)
    1ce0:	21fa      	movs	r1, #250	; 0xfa
    1ce2:	0089      	lsls	r1, r1, #2
    1ce4:	47a0      	blx	r4
    1ce6:	4b07      	ldr	r3, [pc, #28]	; (1d04 <delay_init+0x30>)
    1ce8:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    1cea:	4907      	ldr	r1, [pc, #28]	; (1d08 <delay_init+0x34>)
    1cec:	0028      	movs	r0, r5
    1cee:	47a0      	blx	r4
    1cf0:	4b06      	ldr	r3, [pc, #24]	; (1d0c <delay_init+0x38>)
    1cf2:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    1cf4:	2205      	movs	r2, #5
    1cf6:	4b06      	ldr	r3, [pc, #24]	; (1d10 <delay_init+0x3c>)
    1cf8:	601a      	str	r2, [r3, #0]
}
    1cfa:	bd70      	pop	{r4, r5, r6, pc}
    1cfc:	0000210d 	.word	0x0000210d
    1d00:	000050d9 	.word	0x000050d9
    1d04:	20000004 	.word	0x20000004
    1d08:	000f4240 	.word	0x000f4240
    1d0c:	20000000 	.word	0x20000000
    1d10:	e000e010 	.word	0xe000e010

00001d14 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1d14:	4b0c      	ldr	r3, [pc, #48]	; (1d48 <cpu_irq_enter_critical+0x34>)
    1d16:	681b      	ldr	r3, [r3, #0]
    1d18:	2b00      	cmp	r3, #0
    1d1a:	d110      	bne.n	1d3e <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1d1c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    1d20:	2b00      	cmp	r3, #0
    1d22:	d109      	bne.n	1d38 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    1d24:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    1d26:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    1d2a:	2200      	movs	r2, #0
    1d2c:	4b07      	ldr	r3, [pc, #28]	; (1d4c <cpu_irq_enter_critical+0x38>)
    1d2e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1d30:	3201      	adds	r2, #1
    1d32:	4b07      	ldr	r3, [pc, #28]	; (1d50 <cpu_irq_enter_critical+0x3c>)
    1d34:	701a      	strb	r2, [r3, #0]
    1d36:	e002      	b.n	1d3e <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1d38:	2200      	movs	r2, #0
    1d3a:	4b05      	ldr	r3, [pc, #20]	; (1d50 <cpu_irq_enter_critical+0x3c>)
    1d3c:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    1d3e:	4a02      	ldr	r2, [pc, #8]	; (1d48 <cpu_irq_enter_critical+0x34>)
    1d40:	6813      	ldr	r3, [r2, #0]
    1d42:	3301      	adds	r3, #1
    1d44:	6013      	str	r3, [r2, #0]
}
    1d46:	4770      	bx	lr
    1d48:	200000e0 	.word	0x200000e0
    1d4c:	20000008 	.word	0x20000008
    1d50:	200000e4 	.word	0x200000e4

00001d54 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1d54:	4b08      	ldr	r3, [pc, #32]	; (1d78 <cpu_irq_leave_critical+0x24>)
    1d56:	681a      	ldr	r2, [r3, #0]
    1d58:	3a01      	subs	r2, #1
    1d5a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1d5c:	681b      	ldr	r3, [r3, #0]
    1d5e:	2b00      	cmp	r3, #0
    1d60:	d109      	bne.n	1d76 <cpu_irq_leave_critical+0x22>
    1d62:	4b06      	ldr	r3, [pc, #24]	; (1d7c <cpu_irq_leave_critical+0x28>)
    1d64:	781b      	ldrb	r3, [r3, #0]
    1d66:	2b00      	cmp	r3, #0
    1d68:	d005      	beq.n	1d76 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    1d6a:	2201      	movs	r2, #1
    1d6c:	4b04      	ldr	r3, [pc, #16]	; (1d80 <cpu_irq_leave_critical+0x2c>)
    1d6e:	701a      	strb	r2, [r3, #0]
    1d70:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    1d74:	b662      	cpsie	i
	}
}
    1d76:	4770      	bx	lr
    1d78:	200000e0 	.word	0x200000e0
    1d7c:	200000e4 	.word	0x200000e4
    1d80:	20000008 	.word	0x20000008

00001d84 <system_board_init>:




void system_board_init(void)
{
    1d84:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d86:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    1d88:	ac01      	add	r4, sp, #4
    1d8a:	2501      	movs	r5, #1
    1d8c:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    1d8e:	2700      	movs	r7, #0
    1d90:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    1d92:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    1d94:	0021      	movs	r1, r4
    1d96:	2013      	movs	r0, #19
    1d98:	4e06      	ldr	r6, [pc, #24]	; (1db4 <system_board_init+0x30>)
    1d9a:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1d9c:	2280      	movs	r2, #128	; 0x80
    1d9e:	0312      	lsls	r2, r2, #12
    1da0:	4b05      	ldr	r3, [pc, #20]	; (1db8 <system_board_init+0x34>)
    1da2:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    1da4:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    1da6:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    1da8:	0021      	movs	r1, r4
    1daa:	201c      	movs	r0, #28
    1dac:	47b0      	blx	r6
	config_pinmux.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;	
	system_pinmux_pin_set_config(PIN_RFCTRL1, &config_pinmux);
	system_pinmux_pin_set_config(PIN_RFCTRL2, &config_pinmux);
#endif

}
    1dae:	b003      	add	sp, #12
    1db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1db2:	46c0      	nop			; (mov r8, r8)
    1db4:	00001dbd 	.word	0x00001dbd
    1db8:	41004400 	.word	0x41004400

00001dbc <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1dbc:	b500      	push	{lr}
    1dbe:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1dc0:	ab01      	add	r3, sp, #4
    1dc2:	2280      	movs	r2, #128	; 0x80
    1dc4:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    1dc6:	780a      	ldrb	r2, [r1, #0]
    1dc8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    1dca:	784a      	ldrb	r2, [r1, #1]
    1dcc:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    1dce:	788a      	ldrb	r2, [r1, #2]
    1dd0:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    1dd2:	0019      	movs	r1, r3
    1dd4:	4b01      	ldr	r3, [pc, #4]	; (1ddc <port_pin_set_config+0x20>)
    1dd6:	4798      	blx	r3
}
    1dd8:	b003      	add	sp, #12
    1dda:	bd00      	pop	{pc}
    1ddc:	0000231d 	.word	0x0000231d

00001de0 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1de0:	b510      	push	{r4, lr}
	switch (clock_source) {
    1de2:	2808      	cmp	r0, #8
    1de4:	d803      	bhi.n	1dee <system_clock_source_get_hz+0xe>
    1de6:	0080      	lsls	r0, r0, #2
    1de8:	4b1b      	ldr	r3, [pc, #108]	; (1e58 <system_clock_source_get_hz+0x78>)
    1dea:	581b      	ldr	r3, [r3, r0]
    1dec:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    1dee:	2000      	movs	r0, #0
    1df0:	e030      	b.n	1e54 <system_clock_source_get_hz+0x74>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    1df2:	4b1a      	ldr	r3, [pc, #104]	; (1e5c <system_clock_source_get_hz+0x7c>)
    1df4:	6918      	ldr	r0, [r3, #16]
    1df6:	e02d      	b.n	1e54 <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1df8:	4b19      	ldr	r3, [pc, #100]	; (1e60 <system_clock_source_get_hz+0x80>)
    1dfa:	6a1b      	ldr	r3, [r3, #32]
    1dfc:	059b      	lsls	r3, r3, #22
    1dfe:	0f9b      	lsrs	r3, r3, #30
    1e00:	4818      	ldr	r0, [pc, #96]	; (1e64 <system_clock_source_get_hz+0x84>)
    1e02:	40d8      	lsrs	r0, r3
    1e04:	e026      	b.n	1e54 <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    1e06:	4b15      	ldr	r3, [pc, #84]	; (1e5c <system_clock_source_get_hz+0x7c>)
    1e08:	6958      	ldr	r0, [r3, #20]
    1e0a:	e023      	b.n	1e54 <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1e0c:	4b13      	ldr	r3, [pc, #76]	; (1e5c <system_clock_source_get_hz+0x7c>)
    1e0e:	681b      	ldr	r3, [r3, #0]
    1e10:	2002      	movs	r0, #2
    1e12:	4018      	ands	r0, r3
    1e14:	d01e      	beq.n	1e54 <system_clock_source_get_hz+0x74>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1e16:	4912      	ldr	r1, [pc, #72]	; (1e60 <system_clock_source_get_hz+0x80>)
    1e18:	2210      	movs	r2, #16
    1e1a:	68cb      	ldr	r3, [r1, #12]
    1e1c:	421a      	tst	r2, r3
    1e1e:	d0fc      	beq.n	1e1a <system_clock_source_get_hz+0x3a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    1e20:	4b0e      	ldr	r3, [pc, #56]	; (1e5c <system_clock_source_get_hz+0x7c>)
    1e22:	681b      	ldr	r3, [r3, #0]
    1e24:	075b      	lsls	r3, r3, #29
    1e26:	d514      	bpl.n	1e52 <system_clock_source_get_hz+0x72>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1e28:	2000      	movs	r0, #0
    1e2a:	4b0f      	ldr	r3, [pc, #60]	; (1e68 <system_clock_source_get_hz+0x88>)
    1e2c:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1e2e:	4b0b      	ldr	r3, [pc, #44]	; (1e5c <system_clock_source_get_hz+0x7c>)
    1e30:	689b      	ldr	r3, [r3, #8]
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1e32:	041b      	lsls	r3, r3, #16
    1e34:	0c1b      	lsrs	r3, r3, #16
    1e36:	4358      	muls	r0, r3
    1e38:	e00c      	b.n	1e54 <system_clock_source_get_hz+0x74>

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1e3a:	2350      	movs	r3, #80	; 0x50
    1e3c:	4a08      	ldr	r2, [pc, #32]	; (1e60 <system_clock_source_get_hz+0x80>)
    1e3e:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1e40:	2000      	movs	r0, #0

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1e42:	075b      	lsls	r3, r3, #29
    1e44:	d506      	bpl.n	1e54 <system_clock_source_get_hz+0x74>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    1e46:	4b05      	ldr	r3, [pc, #20]	; (1e5c <system_clock_source_get_hz+0x7c>)
    1e48:	68d8      	ldr	r0, [r3, #12]
    1e4a:	e003      	b.n	1e54 <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    1e4c:	2080      	movs	r0, #128	; 0x80
    1e4e:	0200      	lsls	r0, r0, #8
    1e50:	e000      	b.n	1e54 <system_clock_source_get_hz+0x74>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    1e52:	4806      	ldr	r0, [pc, #24]	; (1e6c <system_clock_source_get_hz+0x8c>)
#endif

	default:
		return 0;
	}
}
    1e54:	bd10      	pop	{r4, pc}
    1e56:	46c0      	nop			; (mov r8, r8)
    1e58:	0000713c 	.word	0x0000713c
    1e5c:	200000e8 	.word	0x200000e8
    1e60:	40000800 	.word	0x40000800
    1e64:	007a1200 	.word	0x007a1200
    1e68:	00002241 	.word	0x00002241
    1e6c:	02dc6c00 	.word	0x02dc6c00

00001e70 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1e70:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1e72:	4c0c      	ldr	r4, [pc, #48]	; (1ea4 <system_clock_source_osc8m_set_config+0x34>)
    1e74:	6a23      	ldr	r3, [r4, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1e76:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1e78:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    1e7a:	7842      	ldrb	r2, [r0, #1]
    1e7c:	2001      	movs	r0, #1
    1e7e:	4002      	ands	r2, r0
    1e80:	0192      	lsls	r2, r2, #6
    1e82:	2640      	movs	r6, #64	; 0x40
    1e84:	43b3      	bics	r3, r6
    1e86:	4313      	orrs	r3, r2
    1e88:	0002      	movs	r2, r0
    1e8a:	402a      	ands	r2, r5
    1e8c:	01d2      	lsls	r2, r2, #7
    1e8e:	307f      	adds	r0, #127	; 0x7f
    1e90:	4383      	bics	r3, r0
    1e92:	4313      	orrs	r3, r2
    1e94:	2203      	movs	r2, #3
    1e96:	400a      	ands	r2, r1
    1e98:	0212      	lsls	r2, r2, #8
    1e9a:	4903      	ldr	r1, [pc, #12]	; (1ea8 <system_clock_source_osc8m_set_config+0x38>)
    1e9c:	400b      	ands	r3, r1
    1e9e:	4313      	orrs	r3, r2
    1ea0:	6223      	str	r3, [r4, #32]
}
    1ea2:	bd70      	pop	{r4, r5, r6, pc}
    1ea4:	40000800 	.word	0x40000800
    1ea8:	fffffcff 	.word	0xfffffcff

00001eac <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1eac:	2808      	cmp	r0, #8
    1eae:	d803      	bhi.n	1eb8 <system_clock_source_enable+0xc>
    1eb0:	0080      	lsls	r0, r0, #2
    1eb2:	4b25      	ldr	r3, [pc, #148]	; (1f48 <system_clock_source_enable+0x9c>)
    1eb4:	581b      	ldr	r3, [r3, r0]
    1eb6:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1eb8:	2017      	movs	r0, #23
    1eba:	e044      	b.n	1f46 <system_clock_source_enable+0x9a>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1ebc:	4a23      	ldr	r2, [pc, #140]	; (1f4c <system_clock_source_enable+0xa0>)
    1ebe:	6a11      	ldr	r1, [r2, #32]
    1ec0:	2302      	movs	r3, #2
    1ec2:	430b      	orrs	r3, r1
    1ec4:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1ec6:	2000      	movs	r0, #0
    1ec8:	e03d      	b.n	1f46 <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1eca:	4a20      	ldr	r2, [pc, #128]	; (1f4c <system_clock_source_enable+0xa0>)
    1ecc:	6991      	ldr	r1, [r2, #24]
    1ece:	2302      	movs	r3, #2
    1ed0:	430b      	orrs	r3, r1
    1ed2:	6193      	str	r3, [r2, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1ed4:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
    1ed6:	e036      	b.n	1f46 <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1ed8:	4a1c      	ldr	r2, [pc, #112]	; (1f4c <system_clock_source_enable+0xa0>)
    1eda:	8a11      	ldrh	r1, [r2, #16]
    1edc:	2302      	movs	r3, #2
    1ede:	430b      	orrs	r3, r1
    1ee0:	8213      	strh	r3, [r2, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1ee2:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
    1ee4:	e02f      	b.n	1f46 <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1ee6:	4a19      	ldr	r2, [pc, #100]	; (1f4c <system_clock_source_enable+0xa0>)
    1ee8:	8a91      	ldrh	r1, [r2, #20]
    1eea:	2302      	movs	r3, #2
    1eec:	430b      	orrs	r3, r1
    1eee:	8293      	strh	r3, [r2, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1ef0:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
    1ef2:	e028      	b.n	1f46 <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1ef4:	4916      	ldr	r1, [pc, #88]	; (1f50 <system_clock_source_enable+0xa4>)
    1ef6:	680b      	ldr	r3, [r1, #0]
    1ef8:	2202      	movs	r2, #2
    1efa:	4313      	orrs	r3, r2
    1efc:	600b      	str	r3, [r1, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1efe:	4b13      	ldr	r3, [pc, #76]	; (1f4c <system_clock_source_enable+0xa0>)
    1f00:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1f02:	0019      	movs	r1, r3
    1f04:	320e      	adds	r2, #14
    1f06:	68cb      	ldr	r3, [r1, #12]
    1f08:	421a      	tst	r2, r3
    1f0a:	d0fc      	beq.n	1f06 <system_clock_source_enable+0x5a>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1f0c:	4a10      	ldr	r2, [pc, #64]	; (1f50 <system_clock_source_enable+0xa4>)
    1f0e:	6891      	ldr	r1, [r2, #8]
    1f10:	4b0e      	ldr	r3, [pc, #56]	; (1f4c <system_clock_source_enable+0xa0>)
    1f12:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1f14:	6852      	ldr	r2, [r2, #4]
    1f16:	629a      	str	r2, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    1f18:	2200      	movs	r2, #0
    1f1a:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1f1c:	0019      	movs	r1, r3
    1f1e:	3210      	adds	r2, #16
    1f20:	68cb      	ldr	r3, [r1, #12]
    1f22:	421a      	tst	r2, r3
    1f24:	d0fc      	beq.n	1f20 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
	_system_dfll_wait_for_sync();
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1f26:	4b0a      	ldr	r3, [pc, #40]	; (1f50 <system_clock_source_enable+0xa4>)
    1f28:	681b      	ldr	r3, [r3, #0]
    1f2a:	b29b      	uxth	r3, r3
    1f2c:	4a07      	ldr	r2, [pc, #28]	; (1f4c <system_clock_source_enable+0xa0>)
    1f2e:	8493      	strh	r3, [r2, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1f30:	2000      	movs	r0, #0
    1f32:	e008      	b.n	1f46 <system_clock_source_enable+0x9a>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1f34:	4905      	ldr	r1, [pc, #20]	; (1f4c <system_clock_source_enable+0xa0>)
    1f36:	2244      	movs	r2, #68	; 0x44
    1f38:	5c88      	ldrb	r0, [r1, r2]
    1f3a:	2302      	movs	r3, #2
    1f3c:	4303      	orrs	r3, r0
    1f3e:	548b      	strb	r3, [r1, r2]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1f40:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
    1f42:	e000      	b.n	1f46 <system_clock_source_enable+0x9a>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    1f44:	2000      	movs	r0, #0
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
    1f46:	4770      	bx	lr
    1f48:	00007160 	.word	0x00007160
    1f4c:	40000800 	.word	0x40000800
    1f50:	200000e8 	.word	0x200000e8

00001f54 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1f54:	b530      	push	{r4, r5, lr}
    1f56:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1f58:	22c2      	movs	r2, #194	; 0xc2
    1f5a:	00d2      	lsls	r2, r2, #3
    1f5c:	4b1a      	ldr	r3, [pc, #104]	; (1fc8 <system_clock_init+0x74>)
    1f5e:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1f60:	4a1a      	ldr	r2, [pc, #104]	; (1fcc <system_clock_init+0x78>)
    1f62:	6853      	ldr	r3, [r2, #4]
    1f64:	211e      	movs	r1, #30
    1f66:	438b      	bics	r3, r1
    1f68:	6053      	str	r3, [r2, #4]
{
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    1f6a:	2301      	movs	r3, #1
    1f6c:	466a      	mov	r2, sp
    1f6e:	7013      	strb	r3, [r2, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1f70:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1f72:	4d17      	ldr	r5, [pc, #92]	; (1fd0 <system_clock_init+0x7c>)
    1f74:	b2e0      	uxtb	r0, r4
    1f76:	4669      	mov	r1, sp
    1f78:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1f7a:	3401      	adds	r4, #1
    1f7c:	2c25      	cmp	r4, #37	; 0x25
    1f7e:	d1f9      	bne.n	1f74 <system_clock_init+0x20>
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
    1f80:	a803      	add	r0, sp, #12
    1f82:	2400      	movs	r4, #0
    1f84:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    1f86:	2501      	movs	r5, #1
    1f88:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1f8a:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1f8c:	4b11      	ldr	r3, [pc, #68]	; (1fd4 <system_clock_init+0x80>)
    1f8e:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1f90:	2006      	movs	r0, #6
    1f92:	4b11      	ldr	r3, [pc, #68]	; (1fd8 <system_clock_init+0x84>)
    1f94:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1f96:	4b11      	ldr	r3, [pc, #68]	; (1fdc <system_clock_init+0x88>)
    1f98:	4798      	blx	r3
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    1f9a:	4b11      	ldr	r3, [pc, #68]	; (1fe0 <system_clock_init+0x8c>)
    1f9c:	721c      	strb	r4, [r3, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    1f9e:	725c      	strb	r4, [r3, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    1fa0:	729c      	strb	r4, [r3, #10]
			break;
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    1fa2:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1fa4:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    1fa6:	466b      	mov	r3, sp
    1fa8:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1faa:	2306      	movs	r3, #6
    1fac:	466a      	mov	r2, sp
    1fae:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
    1fb0:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    1fb2:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1fb4:	4669      	mov	r1, sp
    1fb6:	2000      	movs	r0, #0
    1fb8:	4b0a      	ldr	r3, [pc, #40]	; (1fe4 <system_clock_init+0x90>)
    1fba:	4798      	blx	r3
    1fbc:	2000      	movs	r0, #0
    1fbe:	4b0a      	ldr	r3, [pc, #40]	; (1fe8 <system_clock_init+0x94>)
    1fc0:	4798      	blx	r3
#endif
}
    1fc2:	b005      	add	sp, #20
    1fc4:	bd30      	pop	{r4, r5, pc}
    1fc6:	46c0      	nop			; (mov r8, r8)
    1fc8:	40000800 	.word	0x40000800
    1fcc:	41004000 	.word	0x41004000
    1fd0:	00002225 	.word	0x00002225
    1fd4:	00001e71 	.word	0x00001e71
    1fd8:	00001ead 	.word	0x00001ead
    1fdc:	00001fed 	.word	0x00001fed
    1fe0:	40000400 	.word	0x40000400
    1fe4:	00002011 	.word	0x00002011
    1fe8:	000020c9 	.word	0x000020c9

00001fec <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    1fec:	4a06      	ldr	r2, [pc, #24]	; (2008 <STACK_SIZE+0x8>)
    1fee:	6991      	ldr	r1, [r2, #24]
    1ff0:	2308      	movs	r3, #8
    1ff2:	430b      	orrs	r3, r1
    1ff4:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1ff6:	2201      	movs	r2, #1
    1ff8:	4b04      	ldr	r3, [pc, #16]	; (200c <STACK_SIZE+0xc>)
    1ffa:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1ffc:	0019      	movs	r1, r3
    1ffe:	780b      	ldrb	r3, [r1, #0]
    2000:	4213      	tst	r3, r2
    2002:	d1fc      	bne.n	1ffe <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    2004:	4770      	bx	lr
    2006:	46c0      	nop			; (mov r8, r8)
    2008:	40000400 	.word	0x40000400
    200c:	40000c00 	.word	0x40000c00

00002010 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    2010:	b570      	push	{r4, r5, r6, lr}
    2012:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    2014:	0005      	movs	r5, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    2016:	780c      	ldrb	r4, [r1, #0]
    2018:	0224      	lsls	r4, r4, #8
    201a:	4304      	orrs	r4, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    201c:	784b      	ldrb	r3, [r1, #1]
    201e:	2b00      	cmp	r3, #0
    2020:	d002      	beq.n	2028 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    2022:	2380      	movs	r3, #128	; 0x80
    2024:	02db      	lsls	r3, r3, #11
    2026:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    2028:	7a4b      	ldrb	r3, [r1, #9]
    202a:	2b00      	cmp	r3, #0
    202c:	d002      	beq.n	2034 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    202e:	2380      	movs	r3, #128	; 0x80
    2030:	031b      	lsls	r3, r3, #12
    2032:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    2034:	6848      	ldr	r0, [r1, #4]
    2036:	2801      	cmp	r0, #1
    2038:	d918      	bls.n	206c <system_gclk_gen_set_config+0x5c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    203a:	1e43      	subs	r3, r0, #1
    203c:	4218      	tst	r0, r3
    203e:	d110      	bne.n	2062 <system_gclk_gen_set_config+0x52>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    2040:	2802      	cmp	r0, #2
    2042:	d906      	bls.n	2052 <system_gclk_gen_set_config+0x42>
    2044:	2302      	movs	r3, #2
    2046:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    2048:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    204a:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    204c:	4298      	cmp	r0, r3
    204e:	d8fb      	bhi.n	2048 <system_gclk_gen_set_config+0x38>
    2050:	e000      	b.n	2054 <system_gclk_gen_set_config+0x44>
    2052:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    2054:	0212      	lsls	r2, r2, #8
    2056:	4332      	orrs	r2, r6
    2058:	0015      	movs	r5, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    205a:	2380      	movs	r3, #128	; 0x80
    205c:	035b      	lsls	r3, r3, #13
    205e:	431c      	orrs	r4, r3
    2060:	e004      	b.n	206c <system_gclk_gen_set_config+0x5c>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    2062:	0205      	lsls	r5, r0, #8
    2064:	4335      	orrs	r5, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    2066:	2380      	movs	r3, #128	; 0x80
    2068:	029b      	lsls	r3, r3, #10
    206a:	431c      	orrs	r4, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    206c:	7a0b      	ldrb	r3, [r1, #8]
    206e:	2b00      	cmp	r3, #0
    2070:	d002      	beq.n	2078 <system_gclk_gen_set_config+0x68>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    2072:	2380      	movs	r3, #128	; 0x80
    2074:	039b      	lsls	r3, r3, #14
    2076:	431c      	orrs	r4, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2078:	4a0f      	ldr	r2, [pc, #60]	; (20b8 <system_gclk_gen_set_config+0xa8>)
    207a:	7853      	ldrb	r3, [r2, #1]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing()) {
    207c:	b25b      	sxtb	r3, r3
    207e:	2b00      	cmp	r3, #0
    2080:	dbfb      	blt.n	207a <system_gclk_gen_set_config+0x6a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    2082:	4b0e      	ldr	r3, [pc, #56]	; (20bc <system_gclk_gen_set_config+0xac>)
    2084:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2086:	4b0e      	ldr	r3, [pc, #56]	; (20c0 <system_gclk_gen_set_config+0xb0>)
    2088:	701e      	strb	r6, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    208a:	4a0b      	ldr	r2, [pc, #44]	; (20b8 <system_gclk_gen_set_config+0xa8>)
    208c:	7853      	ldrb	r3, [r2, #1]

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    208e:	b25b      	sxtb	r3, r3
    2090:	2b00      	cmp	r3, #0
    2092:	dbfb      	blt.n	208c <system_gclk_gen_set_config+0x7c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    2094:	4b08      	ldr	r3, [pc, #32]	; (20b8 <system_gclk_gen_set_config+0xa8>)
    2096:	609d      	str	r5, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2098:	001a      	movs	r2, r3
    209a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
    209c:	b25b      	sxtb	r3, r3
    209e:	2b00      	cmp	r3, #0
    20a0:	dbfb      	blt.n	209a <system_gclk_gen_set_config+0x8a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    20a2:	4a05      	ldr	r2, [pc, #20]	; (20b8 <system_gclk_gen_set_config+0xa8>)
    20a4:	6851      	ldr	r1, [r2, #4]
    20a6:	2380      	movs	r3, #128	; 0x80
    20a8:	025b      	lsls	r3, r3, #9
    20aa:	400b      	ands	r3, r1
    20ac:	431c      	orrs	r4, r3
    20ae:	6054      	str	r4, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    20b0:	4b04      	ldr	r3, [pc, #16]	; (20c4 <system_gclk_gen_set_config+0xb4>)
    20b2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    20b4:	bd70      	pop	{r4, r5, r6, pc}
    20b6:	46c0      	nop			; (mov r8, r8)
    20b8:	40000c00 	.word	0x40000c00
    20bc:	00001d15 	.word	0x00001d15
    20c0:	40000c08 	.word	0x40000c08
    20c4:	00001d55 	.word	0x00001d55

000020c8 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    20c8:	b510      	push	{r4, lr}
    20ca:	0004      	movs	r4, r0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    20cc:	4a0b      	ldr	r2, [pc, #44]	; (20fc <system_gclk_gen_enable+0x34>)
    20ce:	7853      	ldrb	r3, [r2, #1]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    20d0:	b25b      	sxtb	r3, r3
    20d2:	2b00      	cmp	r3, #0
    20d4:	dbfb      	blt.n	20ce <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    20d6:	4b0a      	ldr	r3, [pc, #40]	; (2100 <system_gclk_gen_enable+0x38>)
    20d8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    20da:	4b0a      	ldr	r3, [pc, #40]	; (2104 <system_gclk_gen_enable+0x3c>)
    20dc:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    20de:	4a07      	ldr	r2, [pc, #28]	; (20fc <system_gclk_gen_enable+0x34>)
    20e0:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    20e2:	b25b      	sxtb	r3, r3
    20e4:	2b00      	cmp	r3, #0
    20e6:	dbfb      	blt.n	20e0 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    20e8:	4a04      	ldr	r2, [pc, #16]	; (20fc <system_gclk_gen_enable+0x34>)
    20ea:	6853      	ldr	r3, [r2, #4]
    20ec:	2180      	movs	r1, #128	; 0x80
    20ee:	0249      	lsls	r1, r1, #9
    20f0:	430b      	orrs	r3, r1
    20f2:	6053      	str	r3, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    20f4:	4b04      	ldr	r3, [pc, #16]	; (2108 <system_gclk_gen_enable+0x40>)
    20f6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    20f8:	bd10      	pop	{r4, pc}
    20fa:	46c0      	nop			; (mov r8, r8)
    20fc:	40000c00 	.word	0x40000c00
    2100:	00001d15 	.word	0x00001d15
    2104:	40000c04 	.word	0x40000c04
    2108:	00001d55 	.word	0x00001d55

0000210c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    210c:	b570      	push	{r4, r5, r6, lr}
    210e:	0004      	movs	r4, r0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2110:	4a1a      	ldr	r2, [pc, #104]	; (217c <system_gclk_gen_get_hz+0x70>)
    2112:	7853      	ldrb	r3, [r2, #1]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    2114:	b25b      	sxtb	r3, r3
    2116:	2b00      	cmp	r3, #0
    2118:	dbfb      	blt.n	2112 <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    211a:	4b19      	ldr	r3, [pc, #100]	; (2180 <system_gclk_gen_get_hz+0x74>)
    211c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    211e:	4b19      	ldr	r3, [pc, #100]	; (2184 <system_gclk_gen_get_hz+0x78>)
    2120:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2122:	4a16      	ldr	r2, [pc, #88]	; (217c <system_gclk_gen_get_hz+0x70>)
    2124:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    2126:	b25b      	sxtb	r3, r3
    2128:	2b00      	cmp	r3, #0
    212a:	dbfb      	blt.n	2124 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    212c:	4e13      	ldr	r6, [pc, #76]	; (217c <system_gclk_gen_get_hz+0x70>)
    212e:	6870      	ldr	r0, [r6, #4]
    2130:	04c0      	lsls	r0, r0, #19
    2132:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    2134:	4b14      	ldr	r3, [pc, #80]	; (2188 <system_gclk_gen_get_hz+0x7c>)
    2136:	4798      	blx	r3
    2138:	0005      	movs	r5, r0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    213a:	4b12      	ldr	r3, [pc, #72]	; (2184 <system_gclk_gen_get_hz+0x78>)
    213c:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    213e:	6876      	ldr	r6, [r6, #4]
    2140:	02f6      	lsls	r6, r6, #11
    2142:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2144:	4b11      	ldr	r3, [pc, #68]	; (218c <system_gclk_gen_get_hz+0x80>)
    2146:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2148:	4a0c      	ldr	r2, [pc, #48]	; (217c <system_gclk_gen_get_hz+0x70>)
    214a:	7853      	ldrb	r3, [r2, #1]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
	while (system_gclk_is_syncing()) {
    214c:	b25b      	sxtb	r3, r3
    214e:	2b00      	cmp	r3, #0
    2150:	dbfb      	blt.n	214a <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    2152:	4b0a      	ldr	r3, [pc, #40]	; (217c <system_gclk_gen_get_hz+0x70>)
    2154:	689c      	ldr	r4, [r3, #8]
    2156:	0224      	lsls	r4, r4, #8
    2158:	0c24      	lsrs	r4, r4, #16
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    215a:	4b0d      	ldr	r3, [pc, #52]	; (2190 <system_gclk_gen_get_hz+0x84>)
    215c:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    215e:	2e00      	cmp	r6, #0
    2160:	d107      	bne.n	2172 <system_gclk_gen_get_hz+0x66>
    2162:	2c01      	cmp	r4, #1
    2164:	d907      	bls.n	2176 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    2166:	0021      	movs	r1, r4
    2168:	0028      	movs	r0, r5
    216a:	4b0a      	ldr	r3, [pc, #40]	; (2194 <system_gclk_gen_get_hz+0x88>)
    216c:	4798      	blx	r3
    216e:	0005      	movs	r5, r0
    2170:	e001      	b.n	2176 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    2172:	3401      	adds	r4, #1
    2174:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    2176:	0028      	movs	r0, r5
    2178:	bd70      	pop	{r4, r5, r6, pc}
    217a:	46c0      	nop			; (mov r8, r8)
    217c:	40000c00 	.word	0x40000c00
    2180:	00001d15 	.word	0x00001d15
    2184:	40000c04 	.word	0x40000c04
    2188:	00001de1 	.word	0x00001de1
    218c:	40000c08 	.word	0x40000c08
    2190:	00001d55 	.word	0x00001d55
    2194:	000050d9 	.word	0x000050d9

00002198 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    2198:	b510      	push	{r4, lr}
    219a:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    219c:	4b06      	ldr	r3, [pc, #24]	; (21b8 <system_gclk_chan_enable+0x20>)
    219e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    21a0:	4b06      	ldr	r3, [pc, #24]	; (21bc <system_gclk_chan_enable+0x24>)
    21a2:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    21a4:	4a06      	ldr	r2, [pc, #24]	; (21c0 <system_gclk_chan_enable+0x28>)
    21a6:	8851      	ldrh	r1, [r2, #2]
    21a8:	2380      	movs	r3, #128	; 0x80
    21aa:	01db      	lsls	r3, r3, #7
    21ac:	430b      	orrs	r3, r1
    21ae:	8053      	strh	r3, [r2, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    21b0:	4b04      	ldr	r3, [pc, #16]	; (21c4 <system_gclk_chan_enable+0x2c>)
    21b2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    21b4:	bd10      	pop	{r4, pc}
    21b6:	46c0      	nop			; (mov r8, r8)
    21b8:	00001d15 	.word	0x00001d15
    21bc:	40000c02 	.word	0x40000c02
    21c0:	40000c00 	.word	0x40000c00
    21c4:	00001d55 	.word	0x00001d55

000021c8 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    21c8:	b510      	push	{r4, lr}
    21ca:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    21cc:	4b0f      	ldr	r3, [pc, #60]	; (220c <system_gclk_chan_disable+0x44>)
    21ce:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    21d0:	4b0f      	ldr	r3, [pc, #60]	; (2210 <system_gclk_chan_disable+0x48>)
    21d2:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    21d4:	4b0f      	ldr	r3, [pc, #60]	; (2214 <system_gclk_chan_disable+0x4c>)
    21d6:	885a      	ldrh	r2, [r3, #2]
    21d8:	0512      	lsls	r2, r2, #20
    21da:	0f10      	lsrs	r0, r2, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    21dc:	8859      	ldrh	r1, [r3, #2]
    21de:	4a0e      	ldr	r2, [pc, #56]	; (2218 <system_gclk_chan_disable+0x50>)
    21e0:	400a      	ands	r2, r1
    21e2:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    21e4:	8859      	ldrh	r1, [r3, #2]
    21e6:	4a0d      	ldr	r2, [pc, #52]	; (221c <system_gclk_chan_disable+0x54>)
    21e8:	400a      	ands	r2, r1
    21ea:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    21ec:	0019      	movs	r1, r3
    21ee:	2280      	movs	r2, #128	; 0x80
    21f0:	01d2      	lsls	r2, r2, #7
    21f2:	884b      	ldrh	r3, [r1, #2]
    21f4:	4213      	tst	r3, r2
    21f6:	d1fc      	bne.n	21f2 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    21f8:	4906      	ldr	r1, [pc, #24]	; (2214 <system_gclk_chan_disable+0x4c>)
    21fa:	884c      	ldrh	r4, [r1, #2]
    21fc:	0202      	lsls	r2, r0, #8
    21fe:	4b06      	ldr	r3, [pc, #24]	; (2218 <system_gclk_chan_disable+0x50>)
    2200:	4023      	ands	r3, r4
    2202:	4313      	orrs	r3, r2
    2204:	804b      	strh	r3, [r1, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    2206:	4b06      	ldr	r3, [pc, #24]	; (2220 <system_gclk_chan_disable+0x58>)
    2208:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    220a:	bd10      	pop	{r4, pc}
    220c:	00001d15 	.word	0x00001d15
    2210:	40000c02 	.word	0x40000c02
    2214:	40000c00 	.word	0x40000c00
    2218:	fffff0ff 	.word	0xfffff0ff
    221c:	ffffbfff 	.word	0xffffbfff
    2220:	00001d55 	.word	0x00001d55

00002224 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    2224:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    2226:	780c      	ldrb	r4, [r1, #0]
    2228:	0224      	lsls	r4, r4, #8
    222a:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    222c:	4b02      	ldr	r3, [pc, #8]	; (2238 <system_gclk_chan_set_config+0x14>)
    222e:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    2230:	b2a4      	uxth	r4, r4
    2232:	4b02      	ldr	r3, [pc, #8]	; (223c <system_gclk_chan_set_config+0x18>)
    2234:	805c      	strh	r4, [r3, #2]
}
    2236:	bd10      	pop	{r4, pc}
    2238:	000021c9 	.word	0x000021c9
    223c:	40000c00 	.word	0x40000c00

00002240 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    2240:	b510      	push	{r4, lr}
    2242:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    2244:	4b06      	ldr	r3, [pc, #24]	; (2260 <system_gclk_chan_get_hz+0x20>)
    2246:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2248:	4b06      	ldr	r3, [pc, #24]	; (2264 <system_gclk_chan_get_hz+0x24>)
    224a:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    224c:	4b06      	ldr	r3, [pc, #24]	; (2268 <system_gclk_chan_get_hz+0x28>)
    224e:	885c      	ldrh	r4, [r3, #2]
    2250:	0524      	lsls	r4, r4, #20
    2252:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    2254:	4b05      	ldr	r3, [pc, #20]	; (226c <system_gclk_chan_get_hz+0x2c>)
    2256:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    2258:	0020      	movs	r0, r4
    225a:	4b05      	ldr	r3, [pc, #20]	; (2270 <system_gclk_chan_get_hz+0x30>)
    225c:	4798      	blx	r3
}
    225e:	bd10      	pop	{r4, pc}
    2260:	00001d15 	.word	0x00001d15
    2264:	40000c02 	.word	0x40000c02
    2268:	40000c00 	.word	0x40000c00
    226c:	00001d55 	.word	0x00001d55
    2270:	0000210d 	.word	0x0000210d

00002274 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    2274:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    2276:	78d3      	ldrb	r3, [r2, #3]
    2278:	2b00      	cmp	r3, #0
    227a:	d11e      	bne.n	22ba <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    227c:	7813      	ldrb	r3, [r2, #0]
    227e:	2b80      	cmp	r3, #128	; 0x80
    2280:	d004      	beq.n	228c <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    2282:	061b      	lsls	r3, r3, #24
    2284:	2480      	movs	r4, #128	; 0x80
    2286:	0264      	lsls	r4, r4, #9
    2288:	4323      	orrs	r3, r4
    228a:	e000      	b.n	228e <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    228c:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    228e:	7854      	ldrb	r4, [r2, #1]
    2290:	2502      	movs	r5, #2
    2292:	43ac      	bics	r4, r5
    2294:	d10a      	bne.n	22ac <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    2296:	7894      	ldrb	r4, [r2, #2]
    2298:	2c00      	cmp	r4, #0
    229a:	d103      	bne.n	22a4 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    229c:	2480      	movs	r4, #128	; 0x80
    229e:	02a4      	lsls	r4, r4, #10
    22a0:	4323      	orrs	r3, r4
    22a2:	e002      	b.n	22aa <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    22a4:	24c0      	movs	r4, #192	; 0xc0
    22a6:	02e4      	lsls	r4, r4, #11
    22a8:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    22aa:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    22ac:	7854      	ldrb	r4, [r2, #1]
    22ae:	3c01      	subs	r4, #1
    22b0:	2c01      	cmp	r4, #1
    22b2:	d812      	bhi.n	22da <_system_pinmux_config+0x66>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    22b4:	4c18      	ldr	r4, [pc, #96]	; (2318 <_system_pinmux_config+0xa4>)
    22b6:	4023      	ands	r3, r4
    22b8:	e00f      	b.n	22da <_system_pinmux_config+0x66>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    22ba:	6041      	str	r1, [r0, #4]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    22bc:	040b      	lsls	r3, r1, #16
    22be:	0c1b      	lsrs	r3, r3, #16
    22c0:	24a0      	movs	r4, #160	; 0xa0
    22c2:	05e4      	lsls	r4, r4, #23
    22c4:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    22c6:	6283      	str	r3, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    22c8:	0c0b      	lsrs	r3, r1, #16
    22ca:	24d0      	movs	r4, #208	; 0xd0
    22cc:	0624      	lsls	r4, r4, #24
    22ce:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    22d0:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    22d2:	78d3      	ldrb	r3, [r2, #3]
    22d4:	2b00      	cmp	r3, #0
    22d6:	d018      	beq.n	230a <_system_pinmux_config+0x96>
    22d8:	e01c      	b.n	2314 <_system_pinmux_config+0xa0>

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    22da:	040c      	lsls	r4, r1, #16
    22dc:	0c24      	lsrs	r4, r4, #16
    22de:	25a0      	movs	r5, #160	; 0xa0
    22e0:	05ed      	lsls	r5, r5, #23
    22e2:	432c      	orrs	r4, r5
    22e4:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    22e6:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    22e8:	0c0c      	lsrs	r4, r1, #16
    22ea:	25d0      	movs	r5, #208	; 0xd0
    22ec:	062d      	lsls	r5, r5, #24
    22ee:	432c      	orrs	r4, r5
    22f0:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    22f2:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    22f4:	78d4      	ldrb	r4, [r2, #3]
    22f6:	2c00      	cmp	r4, #0
    22f8:	d10c      	bne.n	2314 <_system_pinmux_config+0xa0>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    22fa:	035b      	lsls	r3, r3, #13
    22fc:	d505      	bpl.n	230a <_system_pinmux_config+0x96>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    22fe:	7893      	ldrb	r3, [r2, #2]
    2300:	2b01      	cmp	r3, #1
    2302:	d101      	bne.n	2308 <_system_pinmux_config+0x94>
				port->OUTSET.reg = pin_mask;
    2304:	6181      	str	r1, [r0, #24]
    2306:	e000      	b.n	230a <_system_pinmux_config+0x96>
			} else {
				port->OUTCLR.reg = pin_mask;
    2308:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    230a:	7853      	ldrb	r3, [r2, #1]
    230c:	3b01      	subs	r3, #1
    230e:	2b01      	cmp	r3, #1
    2310:	d800      	bhi.n	2314 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    2312:	6081      	str	r1, [r0, #8]
		}
	}
}
    2314:	bd30      	pop	{r4, r5, pc}
    2316:	46c0      	nop			; (mov r8, r8)
    2318:	fffbffff 	.word	0xfffbffff

0000231c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    231c:	b510      	push	{r4, lr}
    231e:	0003      	movs	r3, r0
    2320:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2322:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    2324:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2326:	2900      	cmp	r1, #0
    2328:	d104      	bne.n	2334 <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
    232a:	0958      	lsrs	r0, r3, #5
    232c:	01c0      	lsls	r0, r0, #7
    232e:	4905      	ldr	r1, [pc, #20]	; (2344 <system_pinmux_pin_set_config+0x28>)
    2330:	468c      	mov	ip, r1
    2332:	4460      	add	r0, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));

	_system_pinmux_config(port, pin_mask, config);
    2334:	211f      	movs	r1, #31
    2336:	400b      	ands	r3, r1
    2338:	391e      	subs	r1, #30
    233a:	4099      	lsls	r1, r3
    233c:	4b02      	ldr	r3, [pc, #8]	; (2348 <system_pinmux_pin_set_config+0x2c>)
    233e:	4798      	blx	r3
}
    2340:	bd10      	pop	{r4, pc}
    2342:	46c0      	nop			; (mov r8, r8)
    2344:	41004400 	.word	0x41004400
    2348:	00002275 	.word	0x00002275

0000234c <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    234c:	4770      	bx	lr
    234e:	46c0      	nop			; (mov r8, r8)

00002350 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    2350:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    2352:	4b05      	ldr	r3, [pc, #20]	; (2368 <system_init+0x18>)
    2354:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    2356:	4b05      	ldr	r3, [pc, #20]	; (236c <system_init+0x1c>)
    2358:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    235a:	4b05      	ldr	r3, [pc, #20]	; (2370 <system_init+0x20>)
    235c:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    235e:	4b05      	ldr	r3, [pc, #20]	; (2374 <system_init+0x24>)
    2360:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    2362:	4b05      	ldr	r3, [pc, #20]	; (2378 <system_init+0x28>)
    2364:	4798      	blx	r3
}
    2366:	bd10      	pop	{r4, pc}
    2368:	00001f55 	.word	0x00001f55
    236c:	00001d85 	.word	0x00001d85
    2370:	0000234d 	.word	0x0000234d
    2374:	00000879 	.word	0x00000879
    2378:	0000234d 	.word	0x0000234d

0000237c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    237c:	e7fe      	b.n	237c <Dummy_Handler>
    237e:	46c0      	nop			; (mov r8, r8)

00002380 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    2380:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    2382:	4b2e      	ldr	r3, [pc, #184]	; (243c <Reset_Handler+0xbc>)
    2384:	4a2e      	ldr	r2, [pc, #184]	; (2440 <Reset_Handler+0xc0>)
    2386:	429a      	cmp	r2, r3
    2388:	d003      	beq.n	2392 <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    238a:	4b2e      	ldr	r3, [pc, #184]	; (2444 <Reset_Handler+0xc4>)
    238c:	4a2b      	ldr	r2, [pc, #172]	; (243c <Reset_Handler+0xbc>)
    238e:	429a      	cmp	r2, r3
    2390:	d304      	bcc.n	239c <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    2392:	4b2d      	ldr	r3, [pc, #180]	; (2448 <Reset_Handler+0xc8>)
    2394:	4a2d      	ldr	r2, [pc, #180]	; (244c <Reset_Handler+0xcc>)
    2396:	429a      	cmp	r2, r3
    2398:	d310      	bcc.n	23bc <Reset_Handler+0x3c>
    239a:	e01e      	b.n	23da <Reset_Handler+0x5a>
    239c:	4a2c      	ldr	r2, [pc, #176]	; (2450 <Reset_Handler+0xd0>)
    239e:	4b29      	ldr	r3, [pc, #164]	; (2444 <Reset_Handler+0xc4>)
    23a0:	3303      	adds	r3, #3
    23a2:	1a9b      	subs	r3, r3, r2
    23a4:	089b      	lsrs	r3, r3, #2
    23a6:	3301      	adds	r3, #1
    23a8:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    23aa:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    23ac:	4823      	ldr	r0, [pc, #140]	; (243c <Reset_Handler+0xbc>)
    23ae:	4924      	ldr	r1, [pc, #144]	; (2440 <Reset_Handler+0xc0>)
    23b0:	588c      	ldr	r4, [r1, r2]
    23b2:	5084      	str	r4, [r0, r2]
    23b4:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    23b6:	429a      	cmp	r2, r3
    23b8:	d1fa      	bne.n	23b0 <Reset_Handler+0x30>
    23ba:	e7ea      	b.n	2392 <Reset_Handler+0x12>
    23bc:	4a25      	ldr	r2, [pc, #148]	; (2454 <Reset_Handler+0xd4>)
    23be:	4b22      	ldr	r3, [pc, #136]	; (2448 <Reset_Handler+0xc8>)
    23c0:	3303      	adds	r3, #3
    23c2:	1a9b      	subs	r3, r3, r2
    23c4:	089b      	lsrs	r3, r3, #2
    23c6:	3301      	adds	r3, #1
    23c8:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    23ca:	2200      	movs	r2, #0
                *pDest++ = 0;
    23cc:	481f      	ldr	r0, [pc, #124]	; (244c <Reset_Handler+0xcc>)
    23ce:	2100      	movs	r1, #0
    23d0:	1814      	adds	r4, r2, r0
    23d2:	6021      	str	r1, [r4, #0]
    23d4:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    23d6:	429a      	cmp	r2, r3
    23d8:	d1fa      	bne.n	23d0 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    23da:	4a1f      	ldr	r2, [pc, #124]	; (2458 <Reset_Handler+0xd8>)
    23dc:	21ff      	movs	r1, #255	; 0xff
    23de:	4b1f      	ldr	r3, [pc, #124]	; (245c <Reset_Handler+0xdc>)
    23e0:	438b      	bics	r3, r1
    23e2:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    23e4:	39fd      	subs	r1, #253	; 0xfd
    23e6:	2390      	movs	r3, #144	; 0x90
    23e8:	005b      	lsls	r3, r3, #1
    23ea:	4a1d      	ldr	r2, [pc, #116]	; (2460 <Reset_Handler+0xe0>)
    23ec:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    23ee:	481d      	ldr	r0, [pc, #116]	; (2464 <Reset_Handler+0xe4>)
    23f0:	78c3      	ldrb	r3, [r0, #3]
    23f2:	2403      	movs	r4, #3
    23f4:	43a3      	bics	r3, r4
    23f6:	2202      	movs	r2, #2
    23f8:	4313      	orrs	r3, r2
    23fa:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    23fc:	78c3      	ldrb	r3, [r0, #3]
    23fe:	260c      	movs	r6, #12
    2400:	43b3      	bics	r3, r6
    2402:	2108      	movs	r1, #8
    2404:	430b      	orrs	r3, r1
    2406:	70c3      	strb	r3, [r0, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    2408:	4b17      	ldr	r3, [pc, #92]	; (2468 <Reset_Handler+0xe8>)
    240a:	7b98      	ldrb	r0, [r3, #14]
    240c:	2530      	movs	r5, #48	; 0x30
    240e:	43a8      	bics	r0, r5
    2410:	0005      	movs	r5, r0
    2412:	2020      	movs	r0, #32
    2414:	4328      	orrs	r0, r5
    2416:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    2418:	7b98      	ldrb	r0, [r3, #14]
    241a:	43b0      	bics	r0, r6
    241c:	4301      	orrs	r1, r0
    241e:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    2420:	7b99      	ldrb	r1, [r3, #14]
    2422:	43a1      	bics	r1, r4
    2424:	430a      	orrs	r2, r1
    2426:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    2428:	4a10      	ldr	r2, [pc, #64]	; (246c <Reset_Handler+0xec>)
    242a:	6851      	ldr	r1, [r2, #4]
    242c:	2380      	movs	r3, #128	; 0x80
    242e:	430b      	orrs	r3, r1
    2430:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    2432:	4b0f      	ldr	r3, [pc, #60]	; (2470 <Reset_Handler+0xf0>)
    2434:	4798      	blx	r3

        /* Branch to main function */
        main();
    2436:	4b0f      	ldr	r3, [pc, #60]	; (2474 <Reset_Handler+0xf4>)
    2438:	4798      	blx	r3
    243a:	e7fe      	b.n	243a <Reset_Handler+0xba>
    243c:	20000000 	.word	0x20000000
    2440:	00007420 	.word	0x00007420
    2444:	200000a8 	.word	0x200000a8
    2448:	20000340 	.word	0x20000340
    244c:	200000a8 	.word	0x200000a8
    2450:	20000004 	.word	0x20000004
    2454:	200000ac 	.word	0x200000ac
    2458:	e000ed00 	.word	0xe000ed00
    245c:	00000000 	.word	0x00000000
    2460:	41007000 	.word	0x41007000
    2464:	41005000 	.word	0x41005000
    2468:	41004800 	.word	0x41004800
    246c:	41004000 	.word	0x41004000
    2470:	000026b5 	.word	0x000026b5
    2474:	00002605 	.word	0x00002605

00002478 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    2478:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    247a:	4a06      	ldr	r2, [pc, #24]	; (2494 <_sbrk+0x1c>)
    247c:	6812      	ldr	r2, [r2, #0]
    247e:	2a00      	cmp	r2, #0
    2480:	d102      	bne.n	2488 <_sbrk+0x10>
		heap = (unsigned char *)&_end;
    2482:	4905      	ldr	r1, [pc, #20]	; (2498 <_sbrk+0x20>)
    2484:	4a03      	ldr	r2, [pc, #12]	; (2494 <_sbrk+0x1c>)
    2486:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
    2488:	4a02      	ldr	r2, [pc, #8]	; (2494 <_sbrk+0x1c>)
    248a:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    248c:	18c3      	adds	r3, r0, r3
    248e:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    2490:	4770      	bx	lr
    2492:	46c0      	nop			; (mov r8, r8)
    2494:	20000100 	.word	0x20000100
    2498:	20002340 	.word	0x20002340

0000249c <_close>:
}

extern int _close(int file)
{
	return -1;
}
    249c:	2001      	movs	r0, #1
    249e:	4240      	negs	r0, r0
    24a0:	4770      	bx	lr
    24a2:	46c0      	nop			; (mov r8, r8)

000024a4 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    24a4:	2380      	movs	r3, #128	; 0x80
    24a6:	019b      	lsls	r3, r3, #6
    24a8:	604b      	str	r3, [r1, #4]

	return 0;
}
    24aa:	2000      	movs	r0, #0
    24ac:	4770      	bx	lr
    24ae:	46c0      	nop			; (mov r8, r8)

000024b0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    24b0:	2001      	movs	r0, #1
    24b2:	4770      	bx	lr

000024b4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    24b4:	2000      	movs	r0, #0
    24b6:	4770      	bx	lr

000024b8 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    24b8:	b570      	push	{r4, r5, r6, lr}
    24ba:	b082      	sub	sp, #8
    24bc:	0005      	movs	r5, r0
    24be:	000e      	movs	r6, r1
	uint16_t temp = 0;
    24c0:	2200      	movs	r2, #0
    24c2:	466b      	mov	r3, sp
    24c4:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    24c6:	4c06      	ldr	r4, [pc, #24]	; (24e0 <usart_serial_getchar+0x28>)
    24c8:	466b      	mov	r3, sp
    24ca:	1d99      	adds	r1, r3, #6
    24cc:	0028      	movs	r0, r5
    24ce:	47a0      	blx	r4
    24d0:	2800      	cmp	r0, #0
    24d2:	d1f9      	bne.n	24c8 <usart_serial_getchar+0x10>

	*c = temp;
    24d4:	466b      	mov	r3, sp
    24d6:	3306      	adds	r3, #6
    24d8:	881b      	ldrh	r3, [r3, #0]
    24da:	7033      	strb	r3, [r6, #0]
}
    24dc:	b002      	add	sp, #8
    24de:	bd70      	pop	{r4, r5, r6, pc}
    24e0:	00001a0d 	.word	0x00001a0d

000024e4 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    24e4:	b570      	push	{r4, r5, r6, lr}
    24e6:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    24e8:	b28c      	uxth	r4, r1
    24ea:	4e03      	ldr	r6, [pc, #12]	; (24f8 <usart_serial_putchar+0x14>)
    24ec:	0021      	movs	r1, r4
    24ee:	0028      	movs	r0, r5
    24f0:	47b0      	blx	r6
    24f2:	2800      	cmp	r0, #0
    24f4:	d1fa      	bne.n	24ec <usart_serial_putchar+0x8>

	return STATUS_OK;
}
    24f6:	bd70      	pop	{r4, r5, r6, pc}
    24f8:	000019e1 	.word	0x000019e1

000024fc <configure_usart>:

}


void configure_usart(void)
{
    24fc:	b530      	push	{r4, r5, lr}
    24fe:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    2500:	2380      	movs	r3, #128	; 0x80
    2502:	05db      	lsls	r3, r3, #23
    2504:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    2506:	2300      	movs	r3, #0
    2508:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    250a:	22ff      	movs	r2, #255	; 0xff
    250c:	4669      	mov	r1, sp
    250e:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    2510:	2200      	movs	r2, #0
    2512:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    2514:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
    2516:	2196      	movs	r1, #150	; 0x96
    2518:	0189      	lsls	r1, r1, #6
    251a:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
    251c:	2101      	movs	r1, #1
    251e:	2024      	movs	r0, #36	; 0x24
    2520:	466c      	mov	r4, sp
    2522:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    2524:	3001      	adds	r0, #1
    2526:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    2528:	3125      	adds	r1, #37	; 0x25
    252a:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    252c:	3101      	adds	r1, #1
    252e:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    2530:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    2532:	3105      	adds	r1, #5
    2534:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    2536:	3101      	adds	r1, #1
    2538:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    253a:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    253c:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    253e:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    2540:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    2542:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    2544:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    2546:	2313      	movs	r3, #19
    2548:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    254a:	7762      	strb	r2, [r4, #29]
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);
	config_usart.baudrate = 9600; //14400,19200, 115200
	config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    254c:	2380      	movs	r3, #128	; 0x80
    254e:	035b      	lsls	r3, r3, #13
    2550:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    2552:	4b1e      	ldr	r3, [pc, #120]	; (25cc <configure_usart+0xd0>)
    2554:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    2556:	4b1e      	ldr	r3, [pc, #120]	; (25d0 <configure_usart+0xd4>)
    2558:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    255a:	2301      	movs	r3, #1
    255c:	425b      	negs	r3, r3
    255e:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    2560:	930f      	str	r3, [sp, #60]	; 0x3c
	
	while(usart_init(&usart_instance, EDBG_CDC_MODULE, &config_usart) != STATUS_OK)
    2562:	4d1c      	ldr	r5, [pc, #112]	; (25d4 <configure_usart+0xd8>)
    2564:	4c1c      	ldr	r4, [pc, #112]	; (25d8 <configure_usart+0xdc>)
    2566:	466a      	mov	r2, sp
    2568:	491c      	ldr	r1, [pc, #112]	; (25dc <configure_usart+0xe0>)
    256a:	0028      	movs	r0, r5
    256c:	47a0      	blx	r4
    256e:	2800      	cmp	r0, #0
    2570:	d1f9      	bne.n	2566 <configure_usart+0x6a>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2572:	4d18      	ldr	r5, [pc, #96]	; (25d4 <configure_usart+0xd8>)
    2574:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2576:	0020      	movs	r0, r4
    2578:	4b19      	ldr	r3, [pc, #100]	; (25e0 <configure_usart+0xe4>)
    257a:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    257c:	231f      	movs	r3, #31
    257e:	4018      	ands	r0, r3
    2580:	3b1e      	subs	r3, #30
    2582:	4083      	lsls	r3, r0
    2584:	4a17      	ldr	r2, [pc, #92]	; (25e4 <configure_usart+0xe8>)
    2586:	6013      	str	r3, [r2, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    2588:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    258a:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    258c:	2b00      	cmp	r3, #0
    258e:	d1fc      	bne.n	258a <configure_usart+0x8e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    2590:	6822      	ldr	r2, [r4, #0]
    2592:	3302      	adds	r3, #2
    2594:	4313      	orrs	r3, r2
    2596:	6023      	str	r3, [r4, #0]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    2598:	480e      	ldr	r0, [pc, #56]	; (25d4 <configure_usart+0xd8>)
    259a:	4b13      	ldr	r3, [pc, #76]	; (25e8 <configure_usart+0xec>)
    259c:	6018      	str	r0, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    259e:	4a13      	ldr	r2, [pc, #76]	; (25ec <configure_usart+0xf0>)
    25a0:	4b13      	ldr	r3, [pc, #76]	; (25f0 <configure_usart+0xf4>)
    25a2:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    25a4:	4a13      	ldr	r2, [pc, #76]	; (25f4 <configure_usart+0xf8>)
    25a6:	4b14      	ldr	r3, [pc, #80]	; (25f8 <configure_usart+0xfc>)
    25a8:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
    25aa:	466a      	mov	r2, sp
    25ac:	490b      	ldr	r1, [pc, #44]	; (25dc <configure_usart+0xe0>)
    25ae:	4b0a      	ldr	r3, [pc, #40]	; (25d8 <configure_usart+0xdc>)
    25b0:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    25b2:	4d12      	ldr	r5, [pc, #72]	; (25fc <configure_usart+0x100>)
    25b4:	682b      	ldr	r3, [r5, #0]
    25b6:	6898      	ldr	r0, [r3, #8]
    25b8:	2100      	movs	r1, #0
    25ba:	4c11      	ldr	r4, [pc, #68]	; (2600 <configure_usart+0x104>)
    25bc:	47a0      	blx	r4
	setbuf(stdin, NULL);
    25be:	682b      	ldr	r3, [r5, #0]
    25c0:	6858      	ldr	r0, [r3, #4]
    25c2:	2100      	movs	r1, #0
    25c4:	47a0      	blx	r4
	{}
	usart_enable(&usart_instance);
	stdio_serial_init(&usart_instance, EDBG_CDC_MODULE, &config_usart );
    25c6:	b011      	add	sp, #68	; 0x44
    25c8:	bd30      	pop	{r4, r5, pc}
    25ca:	46c0      	nop			; (mov r8, r8)
    25cc:	00040003 	.word	0x00040003
    25d0:	00050003 	.word	0x00050003
    25d4:	20000308 	.word	0x20000308
    25d8:	000016a9 	.word	0x000016a9
    25dc:	42000800 	.word	0x42000800
    25e0:	00001c49 	.word	0x00001c49
    25e4:	e000e100 	.word	0xe000e100
    25e8:	200002ec 	.word	0x200002ec
    25ec:	000024e5 	.word	0x000024e5
    25f0:	200002e8 	.word	0x200002e8
    25f4:	000024b9 	.word	0x000024b9
    25f8:	200002e4 	.word	0x200002e4
    25fc:	2000006c 	.word	0x2000006c
    2600:	00003145 	.word	0x00003145

00002604 <main>:

void configure_usart(void);

//main--------------------------------------------------------------------
int main(void)
{
    2604:	b5f0      	push	{r4, r5, r6, r7, lr}
    2606:	4647      	mov	r7, r8
    2608:	b480      	push	{r7}
    260a:	b082      	sub	sp, #8
	uint32_t a=0, b=0;
	
	system_init();
    260c:	4b18      	ldr	r3, [pc, #96]	; (2670 <main+0x6c>)
    260e:	4798      	blx	r3
	delay_init();	
    2610:	4b18      	ldr	r3, [pc, #96]	; (2674 <main+0x70>)
    2612:	4798      	blx	r3
	configure_usart();
    2614:	4b18      	ldr	r3, [pc, #96]	; (2678 <main+0x74>)
    2616:	4798      	blx	r3

	configure_tc();
    2618:	4b18      	ldr	r3, [pc, #96]	; (267c <main+0x78>)
    261a:	4798      	blx	r3
	configure_tcc();
    261c:	4b18      	ldr	r3, [pc, #96]	; (2680 <main+0x7c>)
    261e:	4798      	blx	r3

	configure_i2c_slave();
    2620:	4b18      	ldr	r3, [pc, #96]	; (2684 <main+0x80>)
    2622:	4798      	blx	r3
	//configure_spi_slave();

	enum i2c_slave_direction dir;
	struct i2c_slave_packet packet = {
    2624:	466a      	mov	r2, sp
    2626:	4b18      	ldr	r3, [pc, #96]	; (2688 <main+0x84>)
    2628:	cb03      	ldmia	r3!, {r0, r1}
    262a:	c203      	stmia	r2!, {r0, r1}
		.data_length = DATA_LENGTH,
		.data        = read_buffer,
	};

	printf("Hi this is slave\n");
    262c:	4817      	ldr	r0, [pc, #92]	; (268c <main+0x88>)
    262e:	4b18      	ldr	r3, [pc, #96]	; (2690 <main+0x8c>)
    2630:	4798      	blx	r3
	
	HC_SR04_init();
    2632:	4b18      	ldr	r3, [pc, #96]	; (2694 <main+0x90>)
    2634:	4798      	blx	r3

		//port_pin_toggle_output_level(LED_0_PIN);
		//volatile uint32_t delay = 30000;
		//while(delay--) {
		//}
		printf("Before read\n");
    2636:	4b16      	ldr	r3, [pc, #88]	; (2690 <main+0x8c>)
    2638:	4698      	mov	r8, r3
    263a:	4817      	ldr	r0, [pc, #92]	; (2698 <main+0x94>)
    263c:	47c0      	blx	r8
		while(i2c_slave_read_packet_wait(&i2c_slave_instance, &packet)!= STATUS_OK)
    263e:	4f17      	ldr	r7, [pc, #92]	; (269c <main+0x98>)
		{	
			for(int i = 0; i < DATA_LENGTH; i++)
			{
				printf("%d", packet.data[i]);
    2640:	4d17      	ldr	r5, [pc, #92]	; (26a0 <main+0x9c>)
		//port_pin_toggle_output_level(LED_0_PIN);
		//volatile uint32_t delay = 30000;
		//while(delay--) {
		//}
		printf("Before read\n");
		while(i2c_slave_read_packet_wait(&i2c_slave_instance, &packet)!= STATUS_OK)
    2642:	e00b      	b.n	265c <main+0x58>
    2644:	2400      	movs	r4, #0
		{	
			for(int i = 0; i < DATA_LENGTH; i++)
			{
				printf("%d", packet.data[i]);
    2646:	4e17      	ldr	r6, [pc, #92]	; (26a4 <main+0xa0>)
    2648:	9b01      	ldr	r3, [sp, #4]
    264a:	5d19      	ldrb	r1, [r3, r4]
    264c:	0028      	movs	r0, r5
    264e:	47b0      	blx	r6
		//while(delay--) {
		//}
		printf("Before read\n");
		while(i2c_slave_read_packet_wait(&i2c_slave_instance, &packet)!= STATUS_OK)
		{	
			for(int i = 0; i < DATA_LENGTH; i++)
    2650:	3401      	adds	r4, #1
    2652:	2c03      	cmp	r4, #3
    2654:	d1f8      	bne.n	2648 <main+0x44>
			{
				printf("%d", packet.data[i]);
			}
			printf("\n");
    2656:	200a      	movs	r0, #10
    2658:	4b13      	ldr	r3, [pc, #76]	; (26a8 <main+0xa4>)
    265a:	4798      	blx	r3
		//port_pin_toggle_output_level(LED_0_PIN);
		//volatile uint32_t delay = 30000;
		//while(delay--) {
		//}
		printf("Before read\n");
		while(i2c_slave_read_packet_wait(&i2c_slave_instance, &packet)!= STATUS_OK)
    265c:	4669      	mov	r1, sp
    265e:	4813      	ldr	r0, [pc, #76]	; (26ac <main+0xa8>)
    2660:	47b8      	blx	r7
    2662:	2800      	cmp	r0, #0
    2664:	d1ee      	bne.n	2644 <main+0x40>
			{
				printf("%d", packet.data[i]);
			}
			printf("\n");
		}
		printf("After read\n");
    2666:	4812      	ldr	r0, [pc, #72]	; (26b0 <main+0xac>)
    2668:	4b09      	ldr	r3, [pc, #36]	; (2690 <main+0x8c>)
    266a:	4798      	blx	r3
	}	
    266c:	e7e5      	b.n	263a <main+0x36>
    266e:	46c0      	nop			; (mov r8, r8)
    2670:	00002351 	.word	0x00002351
    2674:	00001cd5 	.word	0x00001cd5
    2678:	000024fd 	.word	0x000024fd
    267c:	00000749 	.word	0x00000749
    2680:	000006a5 	.word	0x000006a5
    2684:	00000611 	.word	0x00000611
    2688:	00007184 	.word	0x00007184
    268c:	0000718c 	.word	0x0000718c
    2690:	00003131 	.word	0x00003131
    2694:	000007b1 	.word	0x000007b1
    2698:	000071a0 	.word	0x000071a0
    269c:	000002e9 	.word	0x000002e9
    26a0:	000071ac 	.word	0x000071ac
    26a4:	00003011 	.word	0x00003011
    26a8:	00003045 	.word	0x00003045
    26ac:	2000010c 	.word	0x2000010c
    26b0:	000071b0 	.word	0x000071b0

000026b4 <__libc_init_array>:
    26b4:	4b0e      	ldr	r3, [pc, #56]	; (26f0 <__libc_init_array+0x3c>)
    26b6:	b570      	push	{r4, r5, r6, lr}
    26b8:	2500      	movs	r5, #0
    26ba:	001e      	movs	r6, r3
    26bc:	4c0d      	ldr	r4, [pc, #52]	; (26f4 <__libc_init_array+0x40>)
    26be:	1ae4      	subs	r4, r4, r3
    26c0:	10a4      	asrs	r4, r4, #2
    26c2:	42a5      	cmp	r5, r4
    26c4:	d004      	beq.n	26d0 <__libc_init_array+0x1c>
    26c6:	00ab      	lsls	r3, r5, #2
    26c8:	58f3      	ldr	r3, [r6, r3]
    26ca:	4798      	blx	r3
    26cc:	3501      	adds	r5, #1
    26ce:	e7f8      	b.n	26c2 <__libc_init_array+0xe>
    26d0:	f004 fe96 	bl	7400 <_init>
    26d4:	4b08      	ldr	r3, [pc, #32]	; (26f8 <__libc_init_array+0x44>)
    26d6:	2500      	movs	r5, #0
    26d8:	001e      	movs	r6, r3
    26da:	4c08      	ldr	r4, [pc, #32]	; (26fc <__libc_init_array+0x48>)
    26dc:	1ae4      	subs	r4, r4, r3
    26de:	10a4      	asrs	r4, r4, #2
    26e0:	42a5      	cmp	r5, r4
    26e2:	d004      	beq.n	26ee <__libc_init_array+0x3a>
    26e4:	00ab      	lsls	r3, r5, #2
    26e6:	58f3      	ldr	r3, [r6, r3]
    26e8:	4798      	blx	r3
    26ea:	3501      	adds	r5, #1
    26ec:	e7f8      	b.n	26e0 <__libc_init_array+0x2c>
    26ee:	bd70      	pop	{r4, r5, r6, pc}
    26f0:	0000740c 	.word	0x0000740c
    26f4:	0000740c 	.word	0x0000740c
    26f8:	0000740c 	.word	0x0000740c
    26fc:	00007410 	.word	0x00007410

00002700 <memcpy>:
    2700:	2300      	movs	r3, #0
    2702:	b510      	push	{r4, lr}
    2704:	429a      	cmp	r2, r3
    2706:	d003      	beq.n	2710 <memcpy+0x10>
    2708:	5ccc      	ldrb	r4, [r1, r3]
    270a:	54c4      	strb	r4, [r0, r3]
    270c:	3301      	adds	r3, #1
    270e:	e7f9      	b.n	2704 <memcpy+0x4>
    2710:	bd10      	pop	{r4, pc}

00002712 <memset>:
    2712:	0003      	movs	r3, r0
    2714:	1882      	adds	r2, r0, r2
    2716:	4293      	cmp	r3, r2
    2718:	d002      	beq.n	2720 <memset+0xe>
    271a:	7019      	strb	r1, [r3, #0]
    271c:	3301      	adds	r3, #1
    271e:	e7fa      	b.n	2716 <memset+0x4>
    2720:	4770      	bx	lr

00002722 <__cvt>:
    2722:	b5f0      	push	{r4, r5, r6, r7, lr}
    2724:	b08b      	sub	sp, #44	; 0x2c
    2726:	0014      	movs	r4, r2
    2728:	1e1d      	subs	r5, r3, #0
    272a:	9912      	ldr	r1, [sp, #72]	; 0x48
    272c:	da06      	bge.n	273c <__cvt+0x1a>
    272e:	2480      	movs	r4, #128	; 0x80
    2730:	0624      	lsls	r4, r4, #24
    2732:	191b      	adds	r3, r3, r4
    2734:	001d      	movs	r5, r3
    2736:	0014      	movs	r4, r2
    2738:	232d      	movs	r3, #45	; 0x2d
    273a:	e000      	b.n	273e <__cvt+0x1c>
    273c:	2300      	movs	r3, #0
    273e:	700b      	strb	r3, [r1, #0]
    2740:	2320      	movs	r3, #32
    2742:	9e14      	ldr	r6, [sp, #80]	; 0x50
    2744:	2203      	movs	r2, #3
    2746:	439e      	bics	r6, r3
    2748:	2e46      	cmp	r6, #70	; 0x46
    274a:	d007      	beq.n	275c <__cvt+0x3a>
    274c:	0033      	movs	r3, r6
    274e:	3b45      	subs	r3, #69	; 0x45
    2750:	4259      	negs	r1, r3
    2752:	414b      	adcs	r3, r1
    2754:	9910      	ldr	r1, [sp, #64]	; 0x40
    2756:	3a01      	subs	r2, #1
    2758:	18cb      	adds	r3, r1, r3
    275a:	9310      	str	r3, [sp, #64]	; 0x40
    275c:	ab09      	add	r3, sp, #36	; 0x24
    275e:	9304      	str	r3, [sp, #16]
    2760:	ab08      	add	r3, sp, #32
    2762:	9303      	str	r3, [sp, #12]
    2764:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    2766:	9200      	str	r2, [sp, #0]
    2768:	9302      	str	r3, [sp, #8]
    276a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    276c:	0022      	movs	r2, r4
    276e:	9301      	str	r3, [sp, #4]
    2770:	002b      	movs	r3, r5
    2772:	f000 fefd 	bl	3570 <_dtoa_r>
    2776:	0007      	movs	r7, r0
    2778:	2e47      	cmp	r6, #71	; 0x47
    277a:	d102      	bne.n	2782 <__cvt+0x60>
    277c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    277e:	07db      	lsls	r3, r3, #31
    2780:	d52d      	bpl.n	27de <__cvt+0xbc>
    2782:	9b10      	ldr	r3, [sp, #64]	; 0x40
    2784:	18fb      	adds	r3, r7, r3
    2786:	9307      	str	r3, [sp, #28]
    2788:	2e46      	cmp	r6, #70	; 0x46
    278a:	d114      	bne.n	27b6 <__cvt+0x94>
    278c:	783b      	ldrb	r3, [r7, #0]
    278e:	2b30      	cmp	r3, #48	; 0x30
    2790:	d10c      	bne.n	27ac <__cvt+0x8a>
    2792:	2200      	movs	r2, #0
    2794:	2300      	movs	r3, #0
    2796:	0020      	movs	r0, r4
    2798:	0029      	movs	r1, r5
    279a:	f002 fe23 	bl	53e4 <__aeabi_dcmpeq>
    279e:	2800      	cmp	r0, #0
    27a0:	d104      	bne.n	27ac <__cvt+0x8a>
    27a2:	2301      	movs	r3, #1
    27a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
    27a6:	1a9b      	subs	r3, r3, r2
    27a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    27aa:	6013      	str	r3, [r2, #0]
    27ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    27ae:	9a07      	ldr	r2, [sp, #28]
    27b0:	681b      	ldr	r3, [r3, #0]
    27b2:	18d3      	adds	r3, r2, r3
    27b4:	9307      	str	r3, [sp, #28]
    27b6:	2200      	movs	r2, #0
    27b8:	2300      	movs	r3, #0
    27ba:	0020      	movs	r0, r4
    27bc:	0029      	movs	r1, r5
    27be:	f002 fe11 	bl	53e4 <__aeabi_dcmpeq>
    27c2:	2230      	movs	r2, #48	; 0x30
    27c4:	2800      	cmp	r0, #0
    27c6:	d002      	beq.n	27ce <__cvt+0xac>
    27c8:	9b07      	ldr	r3, [sp, #28]
    27ca:	9309      	str	r3, [sp, #36]	; 0x24
    27cc:	e007      	b.n	27de <__cvt+0xbc>
    27ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
    27d0:	9907      	ldr	r1, [sp, #28]
    27d2:	4299      	cmp	r1, r3
    27d4:	d903      	bls.n	27de <__cvt+0xbc>
    27d6:	1c59      	adds	r1, r3, #1
    27d8:	9109      	str	r1, [sp, #36]	; 0x24
    27da:	701a      	strb	r2, [r3, #0]
    27dc:	e7f7      	b.n	27ce <__cvt+0xac>
    27de:	0038      	movs	r0, r7
    27e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    27e2:	9a15      	ldr	r2, [sp, #84]	; 0x54
    27e4:	1bdb      	subs	r3, r3, r7
    27e6:	6013      	str	r3, [r2, #0]
    27e8:	b00b      	add	sp, #44	; 0x2c
    27ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

000027ec <__exponent>:
    27ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    27ee:	232b      	movs	r3, #43	; 0x2b
    27f0:	0007      	movs	r7, r0
    27f2:	000c      	movs	r4, r1
    27f4:	7002      	strb	r2, [r0, #0]
    27f6:	1c86      	adds	r6, r0, #2
    27f8:	2900      	cmp	r1, #0
    27fa:	da01      	bge.n	2800 <__exponent+0x14>
    27fc:	232d      	movs	r3, #45	; 0x2d
    27fe:	424c      	negs	r4, r1
    2800:	707b      	strb	r3, [r7, #1]
    2802:	2c09      	cmp	r4, #9
    2804:	dd1c      	ble.n	2840 <__exponent+0x54>
    2806:	466b      	mov	r3, sp
    2808:	1ddd      	adds	r5, r3, #7
    280a:	0020      	movs	r0, r4
    280c:	210a      	movs	r1, #10
    280e:	f002 fdd3 	bl	53b8 <__aeabi_idivmod>
    2812:	3d01      	subs	r5, #1
    2814:	3130      	adds	r1, #48	; 0x30
    2816:	7029      	strb	r1, [r5, #0]
    2818:	0020      	movs	r0, r4
    281a:	210a      	movs	r1, #10
    281c:	f002 fce6 	bl	51ec <__aeabi_idiv>
    2820:	1e04      	subs	r4, r0, #0
    2822:	2c09      	cmp	r4, #9
    2824:	dcf1      	bgt.n	280a <__exponent+0x1e>
    2826:	3d01      	subs	r5, #1
    2828:	3430      	adds	r4, #48	; 0x30
    282a:	702c      	strb	r4, [r5, #0]
    282c:	466b      	mov	r3, sp
    282e:	3307      	adds	r3, #7
    2830:	0030      	movs	r0, r6
    2832:	42ab      	cmp	r3, r5
    2834:	d909      	bls.n	284a <__exponent+0x5e>
    2836:	782b      	ldrb	r3, [r5, #0]
    2838:	3501      	adds	r5, #1
    283a:	7033      	strb	r3, [r6, #0]
    283c:	3601      	adds	r6, #1
    283e:	e7f5      	b.n	282c <__exponent+0x40>
    2840:	2330      	movs	r3, #48	; 0x30
    2842:	18e4      	adds	r4, r4, r3
    2844:	7033      	strb	r3, [r6, #0]
    2846:	1cb0      	adds	r0, r6, #2
    2848:	7074      	strb	r4, [r6, #1]
    284a:	1bc0      	subs	r0, r0, r7
    284c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00002850 <_printf_float>:
    2850:	b5f0      	push	{r4, r5, r6, r7, lr}
    2852:	b095      	sub	sp, #84	; 0x54
    2854:	000c      	movs	r4, r1
    2856:	920a      	str	r2, [sp, #40]	; 0x28
    2858:	930b      	str	r3, [sp, #44]	; 0x2c
    285a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    285c:	9009      	str	r0, [sp, #36]	; 0x24
    285e:	f001 fdd5 	bl	440c <_localeconv_r>
    2862:	6803      	ldr	r3, [r0, #0]
    2864:	0018      	movs	r0, r3
    2866:	930d      	str	r3, [sp, #52]	; 0x34
    2868:	f000 fd26 	bl	32b8 <strlen>
    286c:	2300      	movs	r3, #0
    286e:	9312      	str	r3, [sp, #72]	; 0x48
    2870:	6823      	ldr	r3, [r4, #0]
    2872:	900e      	str	r0, [sp, #56]	; 0x38
    2874:	930c      	str	r3, [sp, #48]	; 0x30
    2876:	990c      	ldr	r1, [sp, #48]	; 0x30
    2878:	7e27      	ldrb	r7, [r4, #24]
    287a:	682b      	ldr	r3, [r5, #0]
    287c:	2207      	movs	r2, #7
    287e:	05c9      	lsls	r1, r1, #23
    2880:	d501      	bpl.n	2886 <_printf_float+0x36>
    2882:	189b      	adds	r3, r3, r2
    2884:	e000      	b.n	2888 <_printf_float+0x38>
    2886:	3307      	adds	r3, #7
    2888:	4393      	bics	r3, r2
    288a:	001a      	movs	r2, r3
    288c:	3208      	adds	r2, #8
    288e:	602a      	str	r2, [r5, #0]
    2890:	681a      	ldr	r2, [r3, #0]
    2892:	685b      	ldr	r3, [r3, #4]
    2894:	64a2      	str	r2, [r4, #72]	; 0x48
    2896:	64e3      	str	r3, [r4, #76]	; 0x4c
    2898:	2201      	movs	r2, #1
    289a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
    289c:	6ca6      	ldr	r6, [r4, #72]	; 0x48
    289e:	006b      	lsls	r3, r5, #1
    28a0:	085b      	lsrs	r3, r3, #1
    28a2:	930f      	str	r3, [sp, #60]	; 0x3c
    28a4:	4252      	negs	r2, r2
    28a6:	4bc0      	ldr	r3, [pc, #768]	; (2ba8 <_printf_float+0x358>)
    28a8:	0030      	movs	r0, r6
    28aa:	990f      	ldr	r1, [sp, #60]	; 0x3c
    28ac:	f004 fb12 	bl	6ed4 <__aeabi_dcmpun>
    28b0:	2800      	cmp	r0, #0
    28b2:	d119      	bne.n	28e8 <_printf_float+0x98>
    28b4:	2201      	movs	r2, #1
    28b6:	4bbc      	ldr	r3, [pc, #752]	; (2ba8 <_printf_float+0x358>)
    28b8:	4252      	negs	r2, r2
    28ba:	0030      	movs	r0, r6
    28bc:	990f      	ldr	r1, [sp, #60]	; 0x3c
    28be:	f002 fda1 	bl	5404 <__aeabi_dcmple>
    28c2:	2800      	cmp	r0, #0
    28c4:	d110      	bne.n	28e8 <_printf_float+0x98>
    28c6:	2200      	movs	r2, #0
    28c8:	2300      	movs	r3, #0
    28ca:	0030      	movs	r0, r6
    28cc:	0029      	movs	r1, r5
    28ce:	f002 fd8f 	bl	53f0 <__aeabi_dcmplt>
    28d2:	2800      	cmp	r0, #0
    28d4:	d003      	beq.n	28de <_printf_float+0x8e>
    28d6:	0023      	movs	r3, r4
    28d8:	222d      	movs	r2, #45	; 0x2d
    28da:	3343      	adds	r3, #67	; 0x43
    28dc:	701a      	strb	r2, [r3, #0]
    28de:	4db3      	ldr	r5, [pc, #716]	; (2bac <_printf_float+0x35c>)
    28e0:	2f47      	cmp	r7, #71	; 0x47
    28e2:	d80e      	bhi.n	2902 <_printf_float+0xb2>
    28e4:	4db2      	ldr	r5, [pc, #712]	; (2bb0 <_printf_float+0x360>)
    28e6:	e00c      	b.n	2902 <_printf_float+0xb2>
    28e8:	0032      	movs	r2, r6
    28ea:	002b      	movs	r3, r5
    28ec:	0030      	movs	r0, r6
    28ee:	0029      	movs	r1, r5
    28f0:	f004 faf0 	bl	6ed4 <__aeabi_dcmpun>
    28f4:	2800      	cmp	r0, #0
    28f6:	d100      	bne.n	28fa <_printf_float+0xaa>
    28f8:	e19a      	b.n	2c30 <_printf_float+0x3e0>
    28fa:	4dae      	ldr	r5, [pc, #696]	; (2bb4 <_printf_float+0x364>)
    28fc:	2f47      	cmp	r7, #71	; 0x47
    28fe:	d800      	bhi.n	2902 <_printf_float+0xb2>
    2900:	4dad      	ldr	r5, [pc, #692]	; (2bb8 <_printf_float+0x368>)
    2902:	2303      	movs	r3, #3
    2904:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    2906:	6123      	str	r3, [r4, #16]
    2908:	3301      	adds	r3, #1
    290a:	439a      	bics	r2, r3
    290c:	6022      	str	r2, [r4, #0]
    290e:	2600      	movs	r6, #0
    2910:	e042      	b.n	2998 <_printf_float+0x148>
    2912:	2f67      	cmp	r7, #103	; 0x67
    2914:	d100      	bne.n	2918 <_printf_float+0xc8>
    2916:	e193      	b.n	2c40 <_printf_float+0x3f0>
    2918:	2f47      	cmp	r7, #71	; 0x47
    291a:	d100      	bne.n	291e <_printf_float+0xce>
    291c:	e190      	b.n	2c40 <_printf_float+0x3f0>
    291e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    2920:	2100      	movs	r1, #0
    2922:	4313      	orrs	r3, r2
    2924:	aa12      	add	r2, sp, #72	; 0x48
    2926:	9205      	str	r2, [sp, #20]
    2928:	aa11      	add	r2, sp, #68	; 0x44
    292a:	9203      	str	r2, [sp, #12]
    292c:	2223      	movs	r2, #35	; 0x23
    292e:	6023      	str	r3, [r4, #0]
    2930:	9106      	str	r1, [sp, #24]
    2932:	9301      	str	r3, [sp, #4]
    2934:	a908      	add	r1, sp, #32
    2936:	6863      	ldr	r3, [r4, #4]
    2938:	1852      	adds	r2, r2, r1
    293a:	9202      	str	r2, [sp, #8]
    293c:	9300      	str	r3, [sp, #0]
    293e:	0032      	movs	r2, r6
    2940:	002b      	movs	r3, r5
    2942:	9704      	str	r7, [sp, #16]
    2944:	9809      	ldr	r0, [sp, #36]	; 0x24
    2946:	f7ff feec 	bl	2722 <__cvt>
    294a:	2320      	movs	r3, #32
    294c:	003a      	movs	r2, r7
    294e:	0005      	movs	r5, r0
    2950:	439a      	bics	r2, r3
    2952:	2a47      	cmp	r2, #71	; 0x47
    2954:	d100      	bne.n	2958 <_printf_float+0x108>
    2956:	e18e      	b.n	2c76 <_printf_float+0x426>
    2958:	9911      	ldr	r1, [sp, #68]	; 0x44
    295a:	2f65      	cmp	r7, #101	; 0x65
    295c:	d900      	bls.n	2960 <_printf_float+0x110>
    295e:	e196      	b.n	2c8e <_printf_float+0x43e>
    2960:	0020      	movs	r0, r4
    2962:	3901      	subs	r1, #1
    2964:	003a      	movs	r2, r7
    2966:	3050      	adds	r0, #80	; 0x50
    2968:	9111      	str	r1, [sp, #68]	; 0x44
    296a:	f7ff ff3f 	bl	27ec <__exponent>
    296e:	9a12      	ldr	r2, [sp, #72]	; 0x48
    2970:	0006      	movs	r6, r0
    2972:	1883      	adds	r3, r0, r2
    2974:	6123      	str	r3, [r4, #16]
    2976:	2a01      	cmp	r2, #1
    2978:	dd00      	ble.n	297c <_printf_float+0x12c>
    297a:	e185      	b.n	2c88 <_printf_float+0x438>
    297c:	6822      	ldr	r2, [r4, #0]
    297e:	07d2      	lsls	r2, r2, #31
    2980:	d500      	bpl.n	2984 <_printf_float+0x134>
    2982:	e181      	b.n	2c88 <_printf_float+0x438>
    2984:	2323      	movs	r3, #35	; 0x23
    2986:	aa08      	add	r2, sp, #32
    2988:	189b      	adds	r3, r3, r2
    298a:	781b      	ldrb	r3, [r3, #0]
    298c:	2b00      	cmp	r3, #0
    298e:	d003      	beq.n	2998 <_printf_float+0x148>
    2990:	0023      	movs	r3, r4
    2992:	222d      	movs	r2, #45	; 0x2d
    2994:	3343      	adds	r3, #67	; 0x43
    2996:	701a      	strb	r2, [r3, #0]
    2998:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    299a:	aa13      	add	r2, sp, #76	; 0x4c
    299c:	9300      	str	r3, [sp, #0]
    299e:	0021      	movs	r1, r4
    29a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    29a2:	9809      	ldr	r0, [sp, #36]	; 0x24
    29a4:	f000 f9a4 	bl	2cf0 <_printf_common>
    29a8:	1c43      	adds	r3, r0, #1
    29aa:	d102      	bne.n	29b2 <_printf_float+0x162>
    29ac:	2001      	movs	r0, #1
    29ae:	4240      	negs	r0, r0
    29b0:	e19b      	b.n	2cea <_printf_float+0x49a>
    29b2:	6822      	ldr	r2, [r4, #0]
    29b4:	0553      	lsls	r3, r2, #21
    29b6:	d401      	bmi.n	29bc <_printf_float+0x16c>
    29b8:	6923      	ldr	r3, [r4, #16]
    29ba:	e064      	b.n	2a86 <_printf_float+0x236>
    29bc:	2f65      	cmp	r7, #101	; 0x65
    29be:	d800      	bhi.n	29c2 <_printf_float+0x172>
    29c0:	e0cc      	b.n	2b5c <_printf_float+0x30c>
    29c2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    29c4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    29c6:	2200      	movs	r2, #0
    29c8:	2300      	movs	r3, #0
    29ca:	f002 fd0b 	bl	53e4 <__aeabi_dcmpeq>
    29ce:	2800      	cmp	r0, #0
    29d0:	d02c      	beq.n	2a2c <_printf_float+0x1dc>
    29d2:	2301      	movs	r3, #1
    29d4:	4a79      	ldr	r2, [pc, #484]	; (2bbc <_printf_float+0x36c>)
    29d6:	990a      	ldr	r1, [sp, #40]	; 0x28
    29d8:	9809      	ldr	r0, [sp, #36]	; 0x24
    29da:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    29dc:	47a8      	blx	r5
    29de:	1c43      	adds	r3, r0, #1
    29e0:	d0e4      	beq.n	29ac <_printf_float+0x15c>
    29e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    29e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
    29e6:	4293      	cmp	r3, r2
    29e8:	db08      	blt.n	29fc <_printf_float+0x1ac>
    29ea:	6823      	ldr	r3, [r4, #0]
    29ec:	07db      	lsls	r3, r3, #31
    29ee:	d405      	bmi.n	29fc <_printf_float+0x1ac>
    29f0:	6823      	ldr	r3, [r4, #0]
    29f2:	2500      	movs	r5, #0
    29f4:	079b      	lsls	r3, r3, #30
    29f6:	d500      	bpl.n	29fa <_printf_float+0x1aa>
    29f8:	e10f      	b.n	2c1a <_printf_float+0x3ca>
    29fa:	e113      	b.n	2c24 <_printf_float+0x3d4>
    29fc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    29fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    2a00:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    2a02:	990a      	ldr	r1, [sp, #40]	; 0x28
    2a04:	9809      	ldr	r0, [sp, #36]	; 0x24
    2a06:	47a8      	blx	r5
    2a08:	2500      	movs	r5, #0
    2a0a:	1c43      	adds	r3, r0, #1
    2a0c:	d0ce      	beq.n	29ac <_printf_float+0x15c>
    2a0e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    2a10:	3b01      	subs	r3, #1
    2a12:	429d      	cmp	r5, r3
    2a14:	daec      	bge.n	29f0 <_printf_float+0x1a0>
    2a16:	0022      	movs	r2, r4
    2a18:	2301      	movs	r3, #1
    2a1a:	321a      	adds	r2, #26
    2a1c:	990a      	ldr	r1, [sp, #40]	; 0x28
    2a1e:	9809      	ldr	r0, [sp, #36]	; 0x24
    2a20:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    2a22:	47b0      	blx	r6
    2a24:	1c43      	adds	r3, r0, #1
    2a26:	d0c1      	beq.n	29ac <_printf_float+0x15c>
    2a28:	3501      	adds	r5, #1
    2a2a:	e7f0      	b.n	2a0e <_printf_float+0x1be>
    2a2c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    2a2e:	2b00      	cmp	r3, #0
    2a30:	dc2b      	bgt.n	2a8a <_printf_float+0x23a>
    2a32:	2301      	movs	r3, #1
    2a34:	4a61      	ldr	r2, [pc, #388]	; (2bbc <_printf_float+0x36c>)
    2a36:	990a      	ldr	r1, [sp, #40]	; 0x28
    2a38:	9809      	ldr	r0, [sp, #36]	; 0x24
    2a3a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    2a3c:	47b0      	blx	r6
    2a3e:	1c43      	adds	r3, r0, #1
    2a40:	d0b4      	beq.n	29ac <_printf_float+0x15c>
    2a42:	9b11      	ldr	r3, [sp, #68]	; 0x44
    2a44:	2b00      	cmp	r3, #0
    2a46:	d105      	bne.n	2a54 <_printf_float+0x204>
    2a48:	9b12      	ldr	r3, [sp, #72]	; 0x48
    2a4a:	2b00      	cmp	r3, #0
    2a4c:	d102      	bne.n	2a54 <_printf_float+0x204>
    2a4e:	6823      	ldr	r3, [r4, #0]
    2a50:	07db      	lsls	r3, r3, #31
    2a52:	d5cd      	bpl.n	29f0 <_printf_float+0x1a0>
    2a54:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    2a56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    2a58:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    2a5a:	990a      	ldr	r1, [sp, #40]	; 0x28
    2a5c:	9809      	ldr	r0, [sp, #36]	; 0x24
    2a5e:	47b0      	blx	r6
    2a60:	2600      	movs	r6, #0
    2a62:	1c43      	adds	r3, r0, #1
    2a64:	d0a2      	beq.n	29ac <_printf_float+0x15c>
    2a66:	9b11      	ldr	r3, [sp, #68]	; 0x44
    2a68:	425b      	negs	r3, r3
    2a6a:	429e      	cmp	r6, r3
    2a6c:	da0a      	bge.n	2a84 <_printf_float+0x234>
    2a6e:	0022      	movs	r2, r4
    2a70:	2301      	movs	r3, #1
    2a72:	321a      	adds	r2, #26
    2a74:	990a      	ldr	r1, [sp, #40]	; 0x28
    2a76:	9809      	ldr	r0, [sp, #36]	; 0x24
    2a78:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    2a7a:	47b8      	blx	r7
    2a7c:	1c43      	adds	r3, r0, #1
    2a7e:	d095      	beq.n	29ac <_printf_float+0x15c>
    2a80:	3601      	adds	r6, #1
    2a82:	e7f0      	b.n	2a66 <_printf_float+0x216>
    2a84:	9b12      	ldr	r3, [sp, #72]	; 0x48
    2a86:	002a      	movs	r2, r5
    2a88:	e0ac      	b.n	2be4 <_printf_float+0x394>
    2a8a:	6da3      	ldr	r3, [r4, #88]	; 0x58
    2a8c:	9e12      	ldr	r6, [sp, #72]	; 0x48
    2a8e:	429e      	cmp	r6, r3
    2a90:	dd00      	ble.n	2a94 <_printf_float+0x244>
    2a92:	001e      	movs	r6, r3
    2a94:	2e00      	cmp	r6, #0
    2a96:	dc05      	bgt.n	2aa4 <_printf_float+0x254>
    2a98:	2300      	movs	r3, #0
    2a9a:	930c      	str	r3, [sp, #48]	; 0x30
    2a9c:	43f3      	mvns	r3, r6
    2a9e:	17db      	asrs	r3, r3, #31
    2aa0:	930f      	str	r3, [sp, #60]	; 0x3c
    2aa2:	e015      	b.n	2ad0 <_printf_float+0x280>
    2aa4:	0033      	movs	r3, r6
    2aa6:	002a      	movs	r2, r5
    2aa8:	990a      	ldr	r1, [sp, #40]	; 0x28
    2aaa:	9809      	ldr	r0, [sp, #36]	; 0x24
    2aac:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    2aae:	47b8      	blx	r7
    2ab0:	1c43      	adds	r3, r0, #1
    2ab2:	d1f1      	bne.n	2a98 <_printf_float+0x248>
    2ab4:	e77a      	b.n	29ac <_printf_float+0x15c>
    2ab6:	0022      	movs	r2, r4
    2ab8:	2301      	movs	r3, #1
    2aba:	321a      	adds	r2, #26
    2abc:	990a      	ldr	r1, [sp, #40]	; 0x28
    2abe:	9809      	ldr	r0, [sp, #36]	; 0x24
    2ac0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    2ac2:	47b8      	blx	r7
    2ac4:	1c43      	adds	r3, r0, #1
    2ac6:	d100      	bne.n	2aca <_printf_float+0x27a>
    2ac8:	e770      	b.n	29ac <_printf_float+0x15c>
    2aca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2acc:	3301      	adds	r3, #1
    2ace:	930c      	str	r3, [sp, #48]	; 0x30
    2ad0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    2ad2:	6da2      	ldr	r2, [r4, #88]	; 0x58
    2ad4:	990c      	ldr	r1, [sp, #48]	; 0x30
    2ad6:	4033      	ands	r3, r6
    2ad8:	1ad3      	subs	r3, r2, r3
    2ada:	4299      	cmp	r1, r3
    2adc:	dbeb      	blt.n	2ab6 <_printf_float+0x266>
    2ade:	18ae      	adds	r6, r5, r2
    2ae0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    2ae2:	9a12      	ldr	r2, [sp, #72]	; 0x48
    2ae4:	4293      	cmp	r3, r2
    2ae6:	db0d      	blt.n	2b04 <_printf_float+0x2b4>
    2ae8:	6823      	ldr	r3, [r4, #0]
    2aea:	07db      	lsls	r3, r3, #31
    2aec:	d40a      	bmi.n	2b04 <_printf_float+0x2b4>
    2aee:	9b12      	ldr	r3, [sp, #72]	; 0x48
    2af0:	9a11      	ldr	r2, [sp, #68]	; 0x44
    2af2:	18ed      	adds	r5, r5, r3
    2af4:	1bad      	subs	r5, r5, r6
    2af6:	1a9b      	subs	r3, r3, r2
    2af8:	429d      	cmp	r5, r3
    2afa:	dd00      	ble.n	2afe <_printf_float+0x2ae>
    2afc:	001d      	movs	r5, r3
    2afe:	2d00      	cmp	r5, #0
    2b00:	dc09      	bgt.n	2b16 <_printf_float+0x2c6>
    2b02:	e011      	b.n	2b28 <_printf_float+0x2d8>
    2b04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    2b06:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    2b08:	990a      	ldr	r1, [sp, #40]	; 0x28
    2b0a:	9809      	ldr	r0, [sp, #36]	; 0x24
    2b0c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    2b0e:	47b8      	blx	r7
    2b10:	1c43      	adds	r3, r0, #1
    2b12:	d1ec      	bne.n	2aee <_printf_float+0x29e>
    2b14:	e74a      	b.n	29ac <_printf_float+0x15c>
    2b16:	002b      	movs	r3, r5
    2b18:	0032      	movs	r2, r6
    2b1a:	990a      	ldr	r1, [sp, #40]	; 0x28
    2b1c:	9809      	ldr	r0, [sp, #36]	; 0x24
    2b1e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    2b20:	47b0      	blx	r6
    2b22:	1c43      	adds	r3, r0, #1
    2b24:	d100      	bne.n	2b28 <_printf_float+0x2d8>
    2b26:	e741      	b.n	29ac <_printf_float+0x15c>
    2b28:	43ef      	mvns	r7, r5
    2b2a:	17fb      	asrs	r3, r7, #31
    2b2c:	2600      	movs	r6, #0
    2b2e:	930c      	str	r3, [sp, #48]	; 0x30
    2b30:	e00a      	b.n	2b48 <_printf_float+0x2f8>
    2b32:	0022      	movs	r2, r4
    2b34:	2301      	movs	r3, #1
    2b36:	321a      	adds	r2, #26
    2b38:	990a      	ldr	r1, [sp, #40]	; 0x28
    2b3a:	9809      	ldr	r0, [sp, #36]	; 0x24
    2b3c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    2b3e:	47b8      	blx	r7
    2b40:	1c43      	adds	r3, r0, #1
    2b42:	d100      	bne.n	2b46 <_printf_float+0x2f6>
    2b44:	e732      	b.n	29ac <_printf_float+0x15c>
    2b46:	3601      	adds	r6, #1
    2b48:	9a11      	ldr	r2, [sp, #68]	; 0x44
    2b4a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    2b4c:	990c      	ldr	r1, [sp, #48]	; 0x30
    2b4e:	1a9b      	subs	r3, r3, r2
    2b50:	002a      	movs	r2, r5
    2b52:	400a      	ands	r2, r1
    2b54:	1a9b      	subs	r3, r3, r2
    2b56:	429e      	cmp	r6, r3
    2b58:	dbeb      	blt.n	2b32 <_printf_float+0x2e2>
    2b5a:	e749      	b.n	29f0 <_printf_float+0x1a0>
    2b5c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    2b5e:	2b01      	cmp	r3, #1
    2b60:	dc02      	bgt.n	2b68 <_printf_float+0x318>
    2b62:	2301      	movs	r3, #1
    2b64:	421a      	tst	r2, r3
    2b66:	d045      	beq.n	2bf4 <_printf_float+0x3a4>
    2b68:	2301      	movs	r3, #1
    2b6a:	002a      	movs	r2, r5
    2b6c:	990a      	ldr	r1, [sp, #40]	; 0x28
    2b6e:	9809      	ldr	r0, [sp, #36]	; 0x24
    2b70:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    2b72:	47b8      	blx	r7
    2b74:	1c43      	adds	r3, r0, #1
    2b76:	d100      	bne.n	2b7a <_printf_float+0x32a>
    2b78:	e718      	b.n	29ac <_printf_float+0x15c>
    2b7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    2b7c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    2b7e:	990a      	ldr	r1, [sp, #40]	; 0x28
    2b80:	9809      	ldr	r0, [sp, #36]	; 0x24
    2b82:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    2b84:	47b8      	blx	r7
    2b86:	1c43      	adds	r3, r0, #1
    2b88:	d100      	bne.n	2b8c <_printf_float+0x33c>
    2b8a:	e70f      	b.n	29ac <_printf_float+0x15c>
    2b8c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    2b8e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    2b90:	2200      	movs	r2, #0
    2b92:	2300      	movs	r3, #0
    2b94:	f002 fc26 	bl	53e4 <__aeabi_dcmpeq>
    2b98:	2800      	cmp	r0, #0
    2b9a:	d001      	beq.n	2ba0 <_printf_float+0x350>
    2b9c:	2500      	movs	r5, #0
    2b9e:	e01a      	b.n	2bd6 <_printf_float+0x386>
    2ba0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    2ba2:	1c6a      	adds	r2, r5, #1
    2ba4:	3b01      	subs	r3, #1
    2ba6:	e026      	b.n	2bf6 <_printf_float+0x3a6>
    2ba8:	7fefffff 	.word	0x7fefffff
    2bac:	000071c8 	.word	0x000071c8
    2bb0:	000071c4 	.word	0x000071c4
    2bb4:	000071d0 	.word	0x000071d0
    2bb8:	000071cc 	.word	0x000071cc
    2bbc:	000071d4 	.word	0x000071d4
    2bc0:	0022      	movs	r2, r4
    2bc2:	2301      	movs	r3, #1
    2bc4:	321a      	adds	r2, #26
    2bc6:	990a      	ldr	r1, [sp, #40]	; 0x28
    2bc8:	9809      	ldr	r0, [sp, #36]	; 0x24
    2bca:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    2bcc:	47b8      	blx	r7
    2bce:	1c43      	adds	r3, r0, #1
    2bd0:	d100      	bne.n	2bd4 <_printf_float+0x384>
    2bd2:	e6eb      	b.n	29ac <_printf_float+0x15c>
    2bd4:	3501      	adds	r5, #1
    2bd6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    2bd8:	3b01      	subs	r3, #1
    2bda:	429d      	cmp	r5, r3
    2bdc:	dbf0      	blt.n	2bc0 <_printf_float+0x370>
    2bde:	0022      	movs	r2, r4
    2be0:	0033      	movs	r3, r6
    2be2:	3250      	adds	r2, #80	; 0x50
    2be4:	990a      	ldr	r1, [sp, #40]	; 0x28
    2be6:	9809      	ldr	r0, [sp, #36]	; 0x24
    2be8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    2bea:	47a8      	blx	r5
    2bec:	1c43      	adds	r3, r0, #1
    2bee:	d000      	beq.n	2bf2 <_printf_float+0x3a2>
    2bf0:	e6fe      	b.n	29f0 <_printf_float+0x1a0>
    2bf2:	e6db      	b.n	29ac <_printf_float+0x15c>
    2bf4:	002a      	movs	r2, r5
    2bf6:	990a      	ldr	r1, [sp, #40]	; 0x28
    2bf8:	9809      	ldr	r0, [sp, #36]	; 0x24
    2bfa:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    2bfc:	47a8      	blx	r5
    2bfe:	1c43      	adds	r3, r0, #1
    2c00:	d1ed      	bne.n	2bde <_printf_float+0x38e>
    2c02:	e6d3      	b.n	29ac <_printf_float+0x15c>
    2c04:	0022      	movs	r2, r4
    2c06:	2301      	movs	r3, #1
    2c08:	3219      	adds	r2, #25
    2c0a:	990a      	ldr	r1, [sp, #40]	; 0x28
    2c0c:	9809      	ldr	r0, [sp, #36]	; 0x24
    2c0e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    2c10:	47b0      	blx	r6
    2c12:	1c43      	adds	r3, r0, #1
    2c14:	d100      	bne.n	2c18 <_printf_float+0x3c8>
    2c16:	e6c9      	b.n	29ac <_printf_float+0x15c>
    2c18:	3501      	adds	r5, #1
    2c1a:	68e3      	ldr	r3, [r4, #12]
    2c1c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    2c1e:	1a9b      	subs	r3, r3, r2
    2c20:	429d      	cmp	r5, r3
    2c22:	dbef      	blt.n	2c04 <_printf_float+0x3b4>
    2c24:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    2c26:	68e0      	ldr	r0, [r4, #12]
    2c28:	4298      	cmp	r0, r3
    2c2a:	da5e      	bge.n	2cea <_printf_float+0x49a>
    2c2c:	0018      	movs	r0, r3
    2c2e:	e05c      	b.n	2cea <_printf_float+0x49a>
    2c30:	2380      	movs	r3, #128	; 0x80
    2c32:	6862      	ldr	r2, [r4, #4]
    2c34:	00db      	lsls	r3, r3, #3
    2c36:	1c51      	adds	r1, r2, #1
    2c38:	d000      	beq.n	2c3c <_printf_float+0x3ec>
    2c3a:	e66a      	b.n	2912 <_printf_float+0xc2>
    2c3c:	3207      	adds	r2, #7
    2c3e:	e002      	b.n	2c46 <_printf_float+0x3f6>
    2c40:	2a00      	cmp	r2, #0
    2c42:	d102      	bne.n	2c4a <_printf_float+0x3fa>
    2c44:	2201      	movs	r2, #1
    2c46:	6062      	str	r2, [r4, #4]
    2c48:	e669      	b.n	291e <_printf_float+0xce>
    2c4a:	990c      	ldr	r1, [sp, #48]	; 0x30
    2c4c:	a808      	add	r0, sp, #32
    2c4e:	430b      	orrs	r3, r1
    2c50:	2100      	movs	r1, #0
    2c52:	9106      	str	r1, [sp, #24]
    2c54:	a912      	add	r1, sp, #72	; 0x48
    2c56:	9105      	str	r1, [sp, #20]
    2c58:	a911      	add	r1, sp, #68	; 0x44
    2c5a:	9103      	str	r1, [sp, #12]
    2c5c:	2123      	movs	r1, #35	; 0x23
    2c5e:	1809      	adds	r1, r1, r0
    2c60:	6023      	str	r3, [r4, #0]
    2c62:	9301      	str	r3, [sp, #4]
    2c64:	9200      	str	r2, [sp, #0]
    2c66:	002b      	movs	r3, r5
    2c68:	9704      	str	r7, [sp, #16]
    2c6a:	9102      	str	r1, [sp, #8]
    2c6c:	0032      	movs	r2, r6
    2c6e:	9809      	ldr	r0, [sp, #36]	; 0x24
    2c70:	f7ff fd57 	bl	2722 <__cvt>
    2c74:	0005      	movs	r5, r0
    2c76:	9b11      	ldr	r3, [sp, #68]	; 0x44
    2c78:	1cda      	adds	r2, r3, #3
    2c7a:	db02      	blt.n	2c82 <_printf_float+0x432>
    2c7c:	6862      	ldr	r2, [r4, #4]
    2c7e:	4293      	cmp	r3, r2
    2c80:	dd1c      	ble.n	2cbc <_printf_float+0x46c>
    2c82:	3f02      	subs	r7, #2
    2c84:	b2ff      	uxtb	r7, r7
    2c86:	e667      	b.n	2958 <_printf_float+0x108>
    2c88:	3301      	adds	r3, #1
    2c8a:	6123      	str	r3, [r4, #16]
    2c8c:	e67a      	b.n	2984 <_printf_float+0x134>
    2c8e:	2f66      	cmp	r7, #102	; 0x66
    2c90:	d115      	bne.n	2cbe <_printf_float+0x46e>
    2c92:	6863      	ldr	r3, [r4, #4]
    2c94:	2900      	cmp	r1, #0
    2c96:	dd09      	ble.n	2cac <_printf_float+0x45c>
    2c98:	6121      	str	r1, [r4, #16]
    2c9a:	2b00      	cmp	r3, #0
    2c9c:	d102      	bne.n	2ca4 <_printf_float+0x454>
    2c9e:	6822      	ldr	r2, [r4, #0]
    2ca0:	07d2      	lsls	r2, r2, #31
    2ca2:	d51e      	bpl.n	2ce2 <_printf_float+0x492>
    2ca4:	3301      	adds	r3, #1
    2ca6:	1859      	adds	r1, r3, r1
    2ca8:	6121      	str	r1, [r4, #16]
    2caa:	e01a      	b.n	2ce2 <_printf_float+0x492>
    2cac:	2b00      	cmp	r3, #0
    2cae:	d103      	bne.n	2cb8 <_printf_float+0x468>
    2cb0:	2201      	movs	r2, #1
    2cb2:	6821      	ldr	r1, [r4, #0]
    2cb4:	4211      	tst	r1, r2
    2cb6:	d013      	beq.n	2ce0 <_printf_float+0x490>
    2cb8:	1c9a      	adds	r2, r3, #2
    2cba:	e011      	b.n	2ce0 <_printf_float+0x490>
    2cbc:	2767      	movs	r7, #103	; 0x67
    2cbe:	9b11      	ldr	r3, [sp, #68]	; 0x44
    2cc0:	9a12      	ldr	r2, [sp, #72]	; 0x48
    2cc2:	4293      	cmp	r3, r2
    2cc4:	db06      	blt.n	2cd4 <_printf_float+0x484>
    2cc6:	6822      	ldr	r2, [r4, #0]
    2cc8:	6123      	str	r3, [r4, #16]
    2cca:	07d2      	lsls	r2, r2, #31
    2ccc:	d509      	bpl.n	2ce2 <_printf_float+0x492>
    2cce:	3301      	adds	r3, #1
    2cd0:	6123      	str	r3, [r4, #16]
    2cd2:	e006      	b.n	2ce2 <_printf_float+0x492>
    2cd4:	2101      	movs	r1, #1
    2cd6:	2b00      	cmp	r3, #0
    2cd8:	dc01      	bgt.n	2cde <_printf_float+0x48e>
    2cda:	1849      	adds	r1, r1, r1
    2cdc:	1ac9      	subs	r1, r1, r3
    2cde:	188a      	adds	r2, r1, r2
    2ce0:	6122      	str	r2, [r4, #16]
    2ce2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    2ce4:	2600      	movs	r6, #0
    2ce6:	65a3      	str	r3, [r4, #88]	; 0x58
    2ce8:	e64c      	b.n	2984 <_printf_float+0x134>
    2cea:	b015      	add	sp, #84	; 0x54
    2cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2cee:	46c0      	nop			; (mov r8, r8)

00002cf0 <_printf_common>:
    2cf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2cf2:	0017      	movs	r7, r2
    2cf4:	9301      	str	r3, [sp, #4]
    2cf6:	688a      	ldr	r2, [r1, #8]
    2cf8:	690b      	ldr	r3, [r1, #16]
    2cfa:	9000      	str	r0, [sp, #0]
    2cfc:	000c      	movs	r4, r1
    2cfe:	4293      	cmp	r3, r2
    2d00:	da00      	bge.n	2d04 <_printf_common+0x14>
    2d02:	0013      	movs	r3, r2
    2d04:	0022      	movs	r2, r4
    2d06:	603b      	str	r3, [r7, #0]
    2d08:	3243      	adds	r2, #67	; 0x43
    2d0a:	7812      	ldrb	r2, [r2, #0]
    2d0c:	2a00      	cmp	r2, #0
    2d0e:	d001      	beq.n	2d14 <_printf_common+0x24>
    2d10:	3301      	adds	r3, #1
    2d12:	603b      	str	r3, [r7, #0]
    2d14:	6823      	ldr	r3, [r4, #0]
    2d16:	069b      	lsls	r3, r3, #26
    2d18:	d502      	bpl.n	2d20 <_printf_common+0x30>
    2d1a:	683b      	ldr	r3, [r7, #0]
    2d1c:	3302      	adds	r3, #2
    2d1e:	603b      	str	r3, [r7, #0]
    2d20:	2506      	movs	r5, #6
    2d22:	6823      	ldr	r3, [r4, #0]
    2d24:	401d      	ands	r5, r3
    2d26:	d01e      	beq.n	2d66 <_printf_common+0x76>
    2d28:	0023      	movs	r3, r4
    2d2a:	3343      	adds	r3, #67	; 0x43
    2d2c:	781b      	ldrb	r3, [r3, #0]
    2d2e:	1e5a      	subs	r2, r3, #1
    2d30:	4193      	sbcs	r3, r2
    2d32:	6822      	ldr	r2, [r4, #0]
    2d34:	0692      	lsls	r2, r2, #26
    2d36:	d51c      	bpl.n	2d72 <_printf_common+0x82>
    2d38:	2030      	movs	r0, #48	; 0x30
    2d3a:	18e1      	adds	r1, r4, r3
    2d3c:	3143      	adds	r1, #67	; 0x43
    2d3e:	7008      	strb	r0, [r1, #0]
    2d40:	0021      	movs	r1, r4
    2d42:	1c5a      	adds	r2, r3, #1
    2d44:	3145      	adds	r1, #69	; 0x45
    2d46:	7809      	ldrb	r1, [r1, #0]
    2d48:	18a2      	adds	r2, r4, r2
    2d4a:	3243      	adds	r2, #67	; 0x43
    2d4c:	3302      	adds	r3, #2
    2d4e:	7011      	strb	r1, [r2, #0]
    2d50:	e00f      	b.n	2d72 <_printf_common+0x82>
    2d52:	0022      	movs	r2, r4
    2d54:	2301      	movs	r3, #1
    2d56:	3219      	adds	r2, #25
    2d58:	9901      	ldr	r1, [sp, #4]
    2d5a:	9800      	ldr	r0, [sp, #0]
    2d5c:	9e08      	ldr	r6, [sp, #32]
    2d5e:	47b0      	blx	r6
    2d60:	1c43      	adds	r3, r0, #1
    2d62:	d00e      	beq.n	2d82 <_printf_common+0x92>
    2d64:	3501      	adds	r5, #1
    2d66:	68e3      	ldr	r3, [r4, #12]
    2d68:	683a      	ldr	r2, [r7, #0]
    2d6a:	1a9b      	subs	r3, r3, r2
    2d6c:	429d      	cmp	r5, r3
    2d6e:	dbf0      	blt.n	2d52 <_printf_common+0x62>
    2d70:	e7da      	b.n	2d28 <_printf_common+0x38>
    2d72:	0022      	movs	r2, r4
    2d74:	9901      	ldr	r1, [sp, #4]
    2d76:	3243      	adds	r2, #67	; 0x43
    2d78:	9800      	ldr	r0, [sp, #0]
    2d7a:	9d08      	ldr	r5, [sp, #32]
    2d7c:	47a8      	blx	r5
    2d7e:	1c43      	adds	r3, r0, #1
    2d80:	d102      	bne.n	2d88 <_printf_common+0x98>
    2d82:	2001      	movs	r0, #1
    2d84:	4240      	negs	r0, r0
    2d86:	e020      	b.n	2dca <_printf_common+0xda>
    2d88:	2306      	movs	r3, #6
    2d8a:	6820      	ldr	r0, [r4, #0]
    2d8c:	68e1      	ldr	r1, [r4, #12]
    2d8e:	683a      	ldr	r2, [r7, #0]
    2d90:	4003      	ands	r3, r0
    2d92:	2500      	movs	r5, #0
    2d94:	2b04      	cmp	r3, #4
    2d96:	d103      	bne.n	2da0 <_printf_common+0xb0>
    2d98:	1a8d      	subs	r5, r1, r2
    2d9a:	43eb      	mvns	r3, r5
    2d9c:	17db      	asrs	r3, r3, #31
    2d9e:	401d      	ands	r5, r3
    2da0:	68a3      	ldr	r3, [r4, #8]
    2da2:	6922      	ldr	r2, [r4, #16]
    2da4:	4293      	cmp	r3, r2
    2da6:	dd01      	ble.n	2dac <_printf_common+0xbc>
    2da8:	1a9b      	subs	r3, r3, r2
    2daa:	18ed      	adds	r5, r5, r3
    2dac:	2700      	movs	r7, #0
    2dae:	42bd      	cmp	r5, r7
    2db0:	d00a      	beq.n	2dc8 <_printf_common+0xd8>
    2db2:	0022      	movs	r2, r4
    2db4:	2301      	movs	r3, #1
    2db6:	321a      	adds	r2, #26
    2db8:	9901      	ldr	r1, [sp, #4]
    2dba:	9800      	ldr	r0, [sp, #0]
    2dbc:	9e08      	ldr	r6, [sp, #32]
    2dbe:	47b0      	blx	r6
    2dc0:	1c43      	adds	r3, r0, #1
    2dc2:	d0de      	beq.n	2d82 <_printf_common+0x92>
    2dc4:	3701      	adds	r7, #1
    2dc6:	e7f2      	b.n	2dae <_printf_common+0xbe>
    2dc8:	2000      	movs	r0, #0
    2dca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00002dcc <_printf_i>:
    2dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
    2dce:	b08b      	sub	sp, #44	; 0x2c
    2dd0:	9206      	str	r2, [sp, #24]
    2dd2:	000a      	movs	r2, r1
    2dd4:	3243      	adds	r2, #67	; 0x43
    2dd6:	9307      	str	r3, [sp, #28]
    2dd8:	9005      	str	r0, [sp, #20]
    2dda:	9204      	str	r2, [sp, #16]
    2ddc:	7e0a      	ldrb	r2, [r1, #24]
    2dde:	000c      	movs	r4, r1
    2de0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    2de2:	2a6e      	cmp	r2, #110	; 0x6e
    2de4:	d100      	bne.n	2de8 <_printf_i+0x1c>
    2de6:	e0ab      	b.n	2f40 <_printf_i+0x174>
    2de8:	d811      	bhi.n	2e0e <_printf_i+0x42>
    2dea:	2a63      	cmp	r2, #99	; 0x63
    2dec:	d022      	beq.n	2e34 <_printf_i+0x68>
    2dee:	d809      	bhi.n	2e04 <_printf_i+0x38>
    2df0:	2a00      	cmp	r2, #0
    2df2:	d100      	bne.n	2df6 <_printf_i+0x2a>
    2df4:	e0b5      	b.n	2f62 <_printf_i+0x196>
    2df6:	2a58      	cmp	r2, #88	; 0x58
    2df8:	d000      	beq.n	2dfc <_printf_i+0x30>
    2dfa:	e0c5      	b.n	2f88 <_printf_i+0x1bc>
    2dfc:	3145      	adds	r1, #69	; 0x45
    2dfe:	700a      	strb	r2, [r1, #0]
    2e00:	4a81      	ldr	r2, [pc, #516]	; (3008 <_printf_i+0x23c>)
    2e02:	e04f      	b.n	2ea4 <_printf_i+0xd8>
    2e04:	2a64      	cmp	r2, #100	; 0x64
    2e06:	d01d      	beq.n	2e44 <_printf_i+0x78>
    2e08:	2a69      	cmp	r2, #105	; 0x69
    2e0a:	d01b      	beq.n	2e44 <_printf_i+0x78>
    2e0c:	e0bc      	b.n	2f88 <_printf_i+0x1bc>
    2e0e:	2a73      	cmp	r2, #115	; 0x73
    2e10:	d100      	bne.n	2e14 <_printf_i+0x48>
    2e12:	e0aa      	b.n	2f6a <_printf_i+0x19e>
    2e14:	d809      	bhi.n	2e2a <_printf_i+0x5e>
    2e16:	2a6f      	cmp	r2, #111	; 0x6f
    2e18:	d029      	beq.n	2e6e <_printf_i+0xa2>
    2e1a:	2a70      	cmp	r2, #112	; 0x70
    2e1c:	d000      	beq.n	2e20 <_printf_i+0x54>
    2e1e:	e0b3      	b.n	2f88 <_printf_i+0x1bc>
    2e20:	2220      	movs	r2, #32
    2e22:	6809      	ldr	r1, [r1, #0]
    2e24:	430a      	orrs	r2, r1
    2e26:	6022      	str	r2, [r4, #0]
    2e28:	e037      	b.n	2e9a <_printf_i+0xce>
    2e2a:	2a75      	cmp	r2, #117	; 0x75
    2e2c:	d01f      	beq.n	2e6e <_printf_i+0xa2>
    2e2e:	2a78      	cmp	r2, #120	; 0x78
    2e30:	d033      	beq.n	2e9a <_printf_i+0xce>
    2e32:	e0a9      	b.n	2f88 <_printf_i+0x1bc>
    2e34:	000e      	movs	r6, r1
    2e36:	681a      	ldr	r2, [r3, #0]
    2e38:	3642      	adds	r6, #66	; 0x42
    2e3a:	1d11      	adds	r1, r2, #4
    2e3c:	6019      	str	r1, [r3, #0]
    2e3e:	6813      	ldr	r3, [r2, #0]
    2e40:	7033      	strb	r3, [r6, #0]
    2e42:	e0a4      	b.n	2f8e <_printf_i+0x1c2>
    2e44:	6821      	ldr	r1, [r4, #0]
    2e46:	681a      	ldr	r2, [r3, #0]
    2e48:	0608      	lsls	r0, r1, #24
    2e4a:	d406      	bmi.n	2e5a <_printf_i+0x8e>
    2e4c:	0649      	lsls	r1, r1, #25
    2e4e:	d504      	bpl.n	2e5a <_printf_i+0x8e>
    2e50:	1d11      	adds	r1, r2, #4
    2e52:	6019      	str	r1, [r3, #0]
    2e54:	2300      	movs	r3, #0
    2e56:	5ed5      	ldrsh	r5, [r2, r3]
    2e58:	e002      	b.n	2e60 <_printf_i+0x94>
    2e5a:	1d11      	adds	r1, r2, #4
    2e5c:	6019      	str	r1, [r3, #0]
    2e5e:	6815      	ldr	r5, [r2, #0]
    2e60:	2d00      	cmp	r5, #0
    2e62:	da3b      	bge.n	2edc <_printf_i+0x110>
    2e64:	232d      	movs	r3, #45	; 0x2d
    2e66:	9a04      	ldr	r2, [sp, #16]
    2e68:	426d      	negs	r5, r5
    2e6a:	7013      	strb	r3, [r2, #0]
    2e6c:	e036      	b.n	2edc <_printf_i+0x110>
    2e6e:	6821      	ldr	r1, [r4, #0]
    2e70:	681a      	ldr	r2, [r3, #0]
    2e72:	0608      	lsls	r0, r1, #24
    2e74:	d406      	bmi.n	2e84 <_printf_i+0xb8>
    2e76:	0649      	lsls	r1, r1, #25
    2e78:	d504      	bpl.n	2e84 <_printf_i+0xb8>
    2e7a:	6815      	ldr	r5, [r2, #0]
    2e7c:	1d11      	adds	r1, r2, #4
    2e7e:	6019      	str	r1, [r3, #0]
    2e80:	b2ad      	uxth	r5, r5
    2e82:	e002      	b.n	2e8a <_printf_i+0xbe>
    2e84:	1d11      	adds	r1, r2, #4
    2e86:	6019      	str	r1, [r3, #0]
    2e88:	6815      	ldr	r5, [r2, #0]
    2e8a:	4b5f      	ldr	r3, [pc, #380]	; (3008 <_printf_i+0x23c>)
    2e8c:	7e22      	ldrb	r2, [r4, #24]
    2e8e:	9303      	str	r3, [sp, #12]
    2e90:	2708      	movs	r7, #8
    2e92:	2a6f      	cmp	r2, #111	; 0x6f
    2e94:	d01d      	beq.n	2ed2 <_printf_i+0x106>
    2e96:	270a      	movs	r7, #10
    2e98:	e01b      	b.n	2ed2 <_printf_i+0x106>
    2e9a:	0022      	movs	r2, r4
    2e9c:	2178      	movs	r1, #120	; 0x78
    2e9e:	3245      	adds	r2, #69	; 0x45
    2ea0:	7011      	strb	r1, [r2, #0]
    2ea2:	4a5a      	ldr	r2, [pc, #360]	; (300c <_printf_i+0x240>)
    2ea4:	6819      	ldr	r1, [r3, #0]
    2ea6:	9203      	str	r2, [sp, #12]
    2ea8:	1d08      	adds	r0, r1, #4
    2eaa:	6822      	ldr	r2, [r4, #0]
    2eac:	6018      	str	r0, [r3, #0]
    2eae:	680d      	ldr	r5, [r1, #0]
    2eb0:	0610      	lsls	r0, r2, #24
    2eb2:	d402      	bmi.n	2eba <_printf_i+0xee>
    2eb4:	0650      	lsls	r0, r2, #25
    2eb6:	d500      	bpl.n	2eba <_printf_i+0xee>
    2eb8:	b2ad      	uxth	r5, r5
    2eba:	07d3      	lsls	r3, r2, #31
    2ebc:	d502      	bpl.n	2ec4 <_printf_i+0xf8>
    2ebe:	2320      	movs	r3, #32
    2ec0:	431a      	orrs	r2, r3
    2ec2:	6022      	str	r2, [r4, #0]
    2ec4:	2710      	movs	r7, #16
    2ec6:	2d00      	cmp	r5, #0
    2ec8:	d103      	bne.n	2ed2 <_printf_i+0x106>
    2eca:	2320      	movs	r3, #32
    2ecc:	6822      	ldr	r2, [r4, #0]
    2ece:	439a      	bics	r2, r3
    2ed0:	6022      	str	r2, [r4, #0]
    2ed2:	0023      	movs	r3, r4
    2ed4:	2200      	movs	r2, #0
    2ed6:	3343      	adds	r3, #67	; 0x43
    2ed8:	701a      	strb	r2, [r3, #0]
    2eda:	e002      	b.n	2ee2 <_printf_i+0x116>
    2edc:	270a      	movs	r7, #10
    2ede:	4b4a      	ldr	r3, [pc, #296]	; (3008 <_printf_i+0x23c>)
    2ee0:	9303      	str	r3, [sp, #12]
    2ee2:	6863      	ldr	r3, [r4, #4]
    2ee4:	60a3      	str	r3, [r4, #8]
    2ee6:	2b00      	cmp	r3, #0
    2ee8:	db09      	blt.n	2efe <_printf_i+0x132>
    2eea:	2204      	movs	r2, #4
    2eec:	6821      	ldr	r1, [r4, #0]
    2eee:	4391      	bics	r1, r2
    2ef0:	6021      	str	r1, [r4, #0]
    2ef2:	2d00      	cmp	r5, #0
    2ef4:	d105      	bne.n	2f02 <_printf_i+0x136>
    2ef6:	9e04      	ldr	r6, [sp, #16]
    2ef8:	2b00      	cmp	r3, #0
    2efa:	d011      	beq.n	2f20 <_printf_i+0x154>
    2efc:	e07b      	b.n	2ff6 <_printf_i+0x22a>
    2efe:	2d00      	cmp	r5, #0
    2f00:	d079      	beq.n	2ff6 <_printf_i+0x22a>
    2f02:	9e04      	ldr	r6, [sp, #16]
    2f04:	0028      	movs	r0, r5
    2f06:	0039      	movs	r1, r7
    2f08:	f002 f96c 	bl	51e4 <__aeabi_uidivmod>
    2f0c:	9b03      	ldr	r3, [sp, #12]
    2f0e:	3e01      	subs	r6, #1
    2f10:	5c5b      	ldrb	r3, [r3, r1]
    2f12:	0028      	movs	r0, r5
    2f14:	7033      	strb	r3, [r6, #0]
    2f16:	0039      	movs	r1, r7
    2f18:	f002 f8de 	bl	50d8 <__aeabi_uidiv>
    2f1c:	1e05      	subs	r5, r0, #0
    2f1e:	d1f1      	bne.n	2f04 <_printf_i+0x138>
    2f20:	2f08      	cmp	r7, #8
    2f22:	d109      	bne.n	2f38 <_printf_i+0x16c>
    2f24:	6823      	ldr	r3, [r4, #0]
    2f26:	07db      	lsls	r3, r3, #31
    2f28:	d506      	bpl.n	2f38 <_printf_i+0x16c>
    2f2a:	6863      	ldr	r3, [r4, #4]
    2f2c:	6922      	ldr	r2, [r4, #16]
    2f2e:	4293      	cmp	r3, r2
    2f30:	dc02      	bgt.n	2f38 <_printf_i+0x16c>
    2f32:	2330      	movs	r3, #48	; 0x30
    2f34:	3e01      	subs	r6, #1
    2f36:	7033      	strb	r3, [r6, #0]
    2f38:	9b04      	ldr	r3, [sp, #16]
    2f3a:	1b9b      	subs	r3, r3, r6
    2f3c:	6123      	str	r3, [r4, #16]
    2f3e:	e02b      	b.n	2f98 <_printf_i+0x1cc>
    2f40:	6809      	ldr	r1, [r1, #0]
    2f42:	681a      	ldr	r2, [r3, #0]
    2f44:	0608      	lsls	r0, r1, #24
    2f46:	d407      	bmi.n	2f58 <_printf_i+0x18c>
    2f48:	0649      	lsls	r1, r1, #25
    2f4a:	d505      	bpl.n	2f58 <_printf_i+0x18c>
    2f4c:	1d11      	adds	r1, r2, #4
    2f4e:	6019      	str	r1, [r3, #0]
    2f50:	6813      	ldr	r3, [r2, #0]
    2f52:	8aa2      	ldrh	r2, [r4, #20]
    2f54:	801a      	strh	r2, [r3, #0]
    2f56:	e004      	b.n	2f62 <_printf_i+0x196>
    2f58:	1d11      	adds	r1, r2, #4
    2f5a:	6019      	str	r1, [r3, #0]
    2f5c:	6813      	ldr	r3, [r2, #0]
    2f5e:	6962      	ldr	r2, [r4, #20]
    2f60:	601a      	str	r2, [r3, #0]
    2f62:	2300      	movs	r3, #0
    2f64:	9e04      	ldr	r6, [sp, #16]
    2f66:	6123      	str	r3, [r4, #16]
    2f68:	e016      	b.n	2f98 <_printf_i+0x1cc>
    2f6a:	681a      	ldr	r2, [r3, #0]
    2f6c:	1d11      	adds	r1, r2, #4
    2f6e:	6019      	str	r1, [r3, #0]
    2f70:	6816      	ldr	r6, [r2, #0]
    2f72:	2100      	movs	r1, #0
    2f74:	6862      	ldr	r2, [r4, #4]
    2f76:	0030      	movs	r0, r6
    2f78:	f001 faba 	bl	44f0 <memchr>
    2f7c:	2800      	cmp	r0, #0
    2f7e:	d001      	beq.n	2f84 <_printf_i+0x1b8>
    2f80:	1b80      	subs	r0, r0, r6
    2f82:	6060      	str	r0, [r4, #4]
    2f84:	6863      	ldr	r3, [r4, #4]
    2f86:	e003      	b.n	2f90 <_printf_i+0x1c4>
    2f88:	0026      	movs	r6, r4
    2f8a:	3642      	adds	r6, #66	; 0x42
    2f8c:	7032      	strb	r2, [r6, #0]
    2f8e:	2301      	movs	r3, #1
    2f90:	6123      	str	r3, [r4, #16]
    2f92:	2300      	movs	r3, #0
    2f94:	9a04      	ldr	r2, [sp, #16]
    2f96:	7013      	strb	r3, [r2, #0]
    2f98:	9b07      	ldr	r3, [sp, #28]
    2f9a:	aa09      	add	r2, sp, #36	; 0x24
    2f9c:	9300      	str	r3, [sp, #0]
    2f9e:	0021      	movs	r1, r4
    2fa0:	9b06      	ldr	r3, [sp, #24]
    2fa2:	9805      	ldr	r0, [sp, #20]
    2fa4:	f7ff fea4 	bl	2cf0 <_printf_common>
    2fa8:	1c43      	adds	r3, r0, #1
    2faa:	d102      	bne.n	2fb2 <_printf_i+0x1e6>
    2fac:	2001      	movs	r0, #1
    2fae:	4240      	negs	r0, r0
    2fb0:	e027      	b.n	3002 <_printf_i+0x236>
    2fb2:	6923      	ldr	r3, [r4, #16]
    2fb4:	0032      	movs	r2, r6
    2fb6:	9906      	ldr	r1, [sp, #24]
    2fb8:	9805      	ldr	r0, [sp, #20]
    2fba:	9d07      	ldr	r5, [sp, #28]
    2fbc:	47a8      	blx	r5
    2fbe:	1c43      	adds	r3, r0, #1
    2fc0:	d0f4      	beq.n	2fac <_printf_i+0x1e0>
    2fc2:	6823      	ldr	r3, [r4, #0]
    2fc4:	2500      	movs	r5, #0
    2fc6:	079b      	lsls	r3, r3, #30
    2fc8:	d40f      	bmi.n	2fea <_printf_i+0x21e>
    2fca:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2fcc:	68e0      	ldr	r0, [r4, #12]
    2fce:	4298      	cmp	r0, r3
    2fd0:	da17      	bge.n	3002 <_printf_i+0x236>
    2fd2:	0018      	movs	r0, r3
    2fd4:	e015      	b.n	3002 <_printf_i+0x236>
    2fd6:	0022      	movs	r2, r4
    2fd8:	2301      	movs	r3, #1
    2fda:	3219      	adds	r2, #25
    2fdc:	9906      	ldr	r1, [sp, #24]
    2fde:	9805      	ldr	r0, [sp, #20]
    2fe0:	9e07      	ldr	r6, [sp, #28]
    2fe2:	47b0      	blx	r6
    2fe4:	1c43      	adds	r3, r0, #1
    2fe6:	d0e1      	beq.n	2fac <_printf_i+0x1e0>
    2fe8:	3501      	adds	r5, #1
    2fea:	68e3      	ldr	r3, [r4, #12]
    2fec:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2fee:	1a9b      	subs	r3, r3, r2
    2ff0:	429d      	cmp	r5, r3
    2ff2:	dbf0      	blt.n	2fd6 <_printf_i+0x20a>
    2ff4:	e7e9      	b.n	2fca <_printf_i+0x1fe>
    2ff6:	0026      	movs	r6, r4
    2ff8:	9b03      	ldr	r3, [sp, #12]
    2ffa:	3642      	adds	r6, #66	; 0x42
    2ffc:	781b      	ldrb	r3, [r3, #0]
    2ffe:	7033      	strb	r3, [r6, #0]
    3000:	e78e      	b.n	2f20 <_printf_i+0x154>
    3002:	b00b      	add	sp, #44	; 0x2c
    3004:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3006:	46c0      	nop			; (mov r8, r8)
    3008:	000071d6 	.word	0x000071d6
    300c:	000071e7 	.word	0x000071e7

00003010 <iprintf>:
    3010:	b40f      	push	{r0, r1, r2, r3}
    3012:	4b0b      	ldr	r3, [pc, #44]	; (3040 <iprintf+0x30>)
    3014:	b513      	push	{r0, r1, r4, lr}
    3016:	681c      	ldr	r4, [r3, #0]
    3018:	2c00      	cmp	r4, #0
    301a:	d005      	beq.n	3028 <iprintf+0x18>
    301c:	69a3      	ldr	r3, [r4, #24]
    301e:	2b00      	cmp	r3, #0
    3020:	d102      	bne.n	3028 <iprintf+0x18>
    3022:	0020      	movs	r0, r4
    3024:	f001 f95e 	bl	42e4 <__sinit>
    3028:	ab05      	add	r3, sp, #20
    302a:	9a04      	ldr	r2, [sp, #16]
    302c:	68a1      	ldr	r1, [r4, #8]
    302e:	0020      	movs	r0, r4
    3030:	9301      	str	r3, [sp, #4]
    3032:	f001 fe25 	bl	4c80 <_vfiprintf_r>
    3036:	bc16      	pop	{r1, r2, r4}
    3038:	bc08      	pop	{r3}
    303a:	b004      	add	sp, #16
    303c:	4718      	bx	r3
    303e:	46c0      	nop			; (mov r8, r8)
    3040:	2000006c 	.word	0x2000006c

00003044 <putchar>:
    3044:	4b08      	ldr	r3, [pc, #32]	; (3068 <putchar+0x24>)
    3046:	b570      	push	{r4, r5, r6, lr}
    3048:	681c      	ldr	r4, [r3, #0]
    304a:	0005      	movs	r5, r0
    304c:	2c00      	cmp	r4, #0
    304e:	d005      	beq.n	305c <putchar+0x18>
    3050:	69a3      	ldr	r3, [r4, #24]
    3052:	2b00      	cmp	r3, #0
    3054:	d102      	bne.n	305c <putchar+0x18>
    3056:	0020      	movs	r0, r4
    3058:	f001 f944 	bl	42e4 <__sinit>
    305c:	0029      	movs	r1, r5
    305e:	68a2      	ldr	r2, [r4, #8]
    3060:	0020      	movs	r0, r4
    3062:	f001 ff29 	bl	4eb8 <_putc_r>
    3066:	bd70      	pop	{r4, r5, r6, pc}
    3068:	2000006c 	.word	0x2000006c

0000306c <_puts_r>:
    306c:	b570      	push	{r4, r5, r6, lr}
    306e:	0005      	movs	r5, r0
    3070:	000e      	movs	r6, r1
    3072:	2800      	cmp	r0, #0
    3074:	d004      	beq.n	3080 <_puts_r+0x14>
    3076:	6983      	ldr	r3, [r0, #24]
    3078:	2b00      	cmp	r3, #0
    307a:	d101      	bne.n	3080 <_puts_r+0x14>
    307c:	f001 f932 	bl	42e4 <__sinit>
    3080:	69ab      	ldr	r3, [r5, #24]
    3082:	68ac      	ldr	r4, [r5, #8]
    3084:	2b00      	cmp	r3, #0
    3086:	d102      	bne.n	308e <_puts_r+0x22>
    3088:	0028      	movs	r0, r5
    308a:	f001 f92b 	bl	42e4 <__sinit>
    308e:	4b25      	ldr	r3, [pc, #148]	; (3124 <_puts_r+0xb8>)
    3090:	429c      	cmp	r4, r3
    3092:	d101      	bne.n	3098 <_puts_r+0x2c>
    3094:	686c      	ldr	r4, [r5, #4]
    3096:	e008      	b.n	30aa <_puts_r+0x3e>
    3098:	4b23      	ldr	r3, [pc, #140]	; (3128 <_puts_r+0xbc>)
    309a:	429c      	cmp	r4, r3
    309c:	d101      	bne.n	30a2 <_puts_r+0x36>
    309e:	68ac      	ldr	r4, [r5, #8]
    30a0:	e003      	b.n	30aa <_puts_r+0x3e>
    30a2:	4b22      	ldr	r3, [pc, #136]	; (312c <_puts_r+0xc0>)
    30a4:	429c      	cmp	r4, r3
    30a6:	d100      	bne.n	30aa <_puts_r+0x3e>
    30a8:	68ec      	ldr	r4, [r5, #12]
    30aa:	89a3      	ldrh	r3, [r4, #12]
    30ac:	071b      	lsls	r3, r3, #28
    30ae:	d502      	bpl.n	30b6 <_puts_r+0x4a>
    30b0:	6923      	ldr	r3, [r4, #16]
    30b2:	2b00      	cmp	r3, #0
    30b4:	d111      	bne.n	30da <_puts_r+0x6e>
    30b6:	0021      	movs	r1, r4
    30b8:	0028      	movs	r0, r5
    30ba:	f000 f95d 	bl	3378 <__swsetup_r>
    30be:	2800      	cmp	r0, #0
    30c0:	d00b      	beq.n	30da <_puts_r+0x6e>
    30c2:	2001      	movs	r0, #1
    30c4:	4240      	negs	r0, r0
    30c6:	e02b      	b.n	3120 <_puts_r+0xb4>
    30c8:	3b01      	subs	r3, #1
    30ca:	3601      	adds	r6, #1
    30cc:	60a3      	str	r3, [r4, #8]
    30ce:	2b00      	cmp	r3, #0
    30d0:	db08      	blt.n	30e4 <_puts_r+0x78>
    30d2:	6823      	ldr	r3, [r4, #0]
    30d4:	1c5a      	adds	r2, r3, #1
    30d6:	6022      	str	r2, [r4, #0]
    30d8:	7019      	strb	r1, [r3, #0]
    30da:	7831      	ldrb	r1, [r6, #0]
    30dc:	68a3      	ldr	r3, [r4, #8]
    30de:	2900      	cmp	r1, #0
    30e0:	d1f2      	bne.n	30c8 <_puts_r+0x5c>
    30e2:	e00b      	b.n	30fc <_puts_r+0x90>
    30e4:	69a2      	ldr	r2, [r4, #24]
    30e6:	4293      	cmp	r3, r2
    30e8:	db01      	blt.n	30ee <_puts_r+0x82>
    30ea:	290a      	cmp	r1, #10
    30ec:	d1f1      	bne.n	30d2 <_puts_r+0x66>
    30ee:	0022      	movs	r2, r4
    30f0:	0028      	movs	r0, r5
    30f2:	f000 f8e9 	bl	32c8 <__swbuf_r>
    30f6:	1c43      	adds	r3, r0, #1
    30f8:	d1ef      	bne.n	30da <_puts_r+0x6e>
    30fa:	e7e2      	b.n	30c2 <_puts_r+0x56>
    30fc:	3b01      	subs	r3, #1
    30fe:	60a3      	str	r3, [r4, #8]
    3100:	2b00      	cmp	r3, #0
    3102:	da08      	bge.n	3116 <_puts_r+0xaa>
    3104:	0022      	movs	r2, r4
    3106:	310a      	adds	r1, #10
    3108:	0028      	movs	r0, r5
    310a:	f000 f8dd 	bl	32c8 <__swbuf_r>
    310e:	1c43      	adds	r3, r0, #1
    3110:	d0d7      	beq.n	30c2 <_puts_r+0x56>
    3112:	200a      	movs	r0, #10
    3114:	e004      	b.n	3120 <_puts_r+0xb4>
    3116:	200a      	movs	r0, #10
    3118:	6823      	ldr	r3, [r4, #0]
    311a:	1c5a      	adds	r2, r3, #1
    311c:	6022      	str	r2, [r4, #0]
    311e:	7018      	strb	r0, [r3, #0]
    3120:	bd70      	pop	{r4, r5, r6, pc}
    3122:	46c0      	nop			; (mov r8, r8)
    3124:	00007208 	.word	0x00007208
    3128:	00007228 	.word	0x00007228
    312c:	00007248 	.word	0x00007248

00003130 <puts>:
    3130:	b510      	push	{r4, lr}
    3132:	4b03      	ldr	r3, [pc, #12]	; (3140 <puts+0x10>)
    3134:	0001      	movs	r1, r0
    3136:	6818      	ldr	r0, [r3, #0]
    3138:	f7ff ff98 	bl	306c <_puts_r>
    313c:	bd10      	pop	{r4, pc}
    313e:	46c0      	nop			; (mov r8, r8)
    3140:	2000006c 	.word	0x2000006c

00003144 <setbuf>:
    3144:	424a      	negs	r2, r1
    3146:	414a      	adcs	r2, r1
    3148:	2380      	movs	r3, #128	; 0x80
    314a:	b510      	push	{r4, lr}
    314c:	0052      	lsls	r2, r2, #1
    314e:	00db      	lsls	r3, r3, #3
    3150:	f000 f802 	bl	3158 <setvbuf>
    3154:	bd10      	pop	{r4, pc}
	...

00003158 <setvbuf>:
    3158:	b5f0      	push	{r4, r5, r6, r7, lr}
    315a:	001d      	movs	r5, r3
    315c:	4b51      	ldr	r3, [pc, #324]	; (32a4 <setvbuf+0x14c>)
    315e:	b085      	sub	sp, #20
    3160:	681e      	ldr	r6, [r3, #0]
    3162:	0004      	movs	r4, r0
    3164:	000f      	movs	r7, r1
    3166:	9200      	str	r2, [sp, #0]
    3168:	2e00      	cmp	r6, #0
    316a:	d005      	beq.n	3178 <setvbuf+0x20>
    316c:	69b3      	ldr	r3, [r6, #24]
    316e:	2b00      	cmp	r3, #0
    3170:	d102      	bne.n	3178 <setvbuf+0x20>
    3172:	0030      	movs	r0, r6
    3174:	f001 f8b6 	bl	42e4 <__sinit>
    3178:	4b4b      	ldr	r3, [pc, #300]	; (32a8 <setvbuf+0x150>)
    317a:	429c      	cmp	r4, r3
    317c:	d101      	bne.n	3182 <setvbuf+0x2a>
    317e:	6874      	ldr	r4, [r6, #4]
    3180:	e008      	b.n	3194 <setvbuf+0x3c>
    3182:	4b4a      	ldr	r3, [pc, #296]	; (32ac <setvbuf+0x154>)
    3184:	429c      	cmp	r4, r3
    3186:	d101      	bne.n	318c <setvbuf+0x34>
    3188:	68b4      	ldr	r4, [r6, #8]
    318a:	e003      	b.n	3194 <setvbuf+0x3c>
    318c:	4b48      	ldr	r3, [pc, #288]	; (32b0 <setvbuf+0x158>)
    318e:	429c      	cmp	r4, r3
    3190:	d100      	bne.n	3194 <setvbuf+0x3c>
    3192:	68f4      	ldr	r4, [r6, #12]
    3194:	9b00      	ldr	r3, [sp, #0]
    3196:	2b02      	cmp	r3, #2
    3198:	d005      	beq.n	31a6 <setvbuf+0x4e>
    319a:	2b01      	cmp	r3, #1
    319c:	d900      	bls.n	31a0 <setvbuf+0x48>
    319e:	e07c      	b.n	329a <setvbuf+0x142>
    31a0:	2d00      	cmp	r5, #0
    31a2:	da00      	bge.n	31a6 <setvbuf+0x4e>
    31a4:	e079      	b.n	329a <setvbuf+0x142>
    31a6:	0021      	movs	r1, r4
    31a8:	0030      	movs	r0, r6
    31aa:	f001 f82d 	bl	4208 <_fflush_r>
    31ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
    31b0:	2900      	cmp	r1, #0
    31b2:	d008      	beq.n	31c6 <setvbuf+0x6e>
    31b4:	0023      	movs	r3, r4
    31b6:	3344      	adds	r3, #68	; 0x44
    31b8:	4299      	cmp	r1, r3
    31ba:	d002      	beq.n	31c2 <setvbuf+0x6a>
    31bc:	0030      	movs	r0, r6
    31be:	f001 fc9b 	bl	4af8 <_free_r>
    31c2:	2300      	movs	r3, #0
    31c4:	6363      	str	r3, [r4, #52]	; 0x34
    31c6:	2300      	movs	r3, #0
    31c8:	61a3      	str	r3, [r4, #24]
    31ca:	6063      	str	r3, [r4, #4]
    31cc:	89a3      	ldrh	r3, [r4, #12]
    31ce:	061b      	lsls	r3, r3, #24
    31d0:	d503      	bpl.n	31da <setvbuf+0x82>
    31d2:	6921      	ldr	r1, [r4, #16]
    31d4:	0030      	movs	r0, r6
    31d6:	f001 fc8f 	bl	4af8 <_free_r>
    31da:	89a2      	ldrh	r2, [r4, #12]
    31dc:	4b35      	ldr	r3, [pc, #212]	; (32b4 <setvbuf+0x15c>)
    31de:	4013      	ands	r3, r2
    31e0:	81a3      	strh	r3, [r4, #12]
    31e2:	9b00      	ldr	r3, [sp, #0]
    31e4:	2b02      	cmp	r3, #2
    31e6:	d021      	beq.n	322c <setvbuf+0xd4>
    31e8:	ab03      	add	r3, sp, #12
    31ea:	aa02      	add	r2, sp, #8
    31ec:	0021      	movs	r1, r4
    31ee:	0030      	movs	r0, r6
    31f0:	f001 f910 	bl	4414 <__swhatbuf_r>
    31f4:	89a3      	ldrh	r3, [r4, #12]
    31f6:	4318      	orrs	r0, r3
    31f8:	81a0      	strh	r0, [r4, #12]
    31fa:	2d00      	cmp	r5, #0
    31fc:	d101      	bne.n	3202 <setvbuf+0xaa>
    31fe:	9d02      	ldr	r5, [sp, #8]
    3200:	e001      	b.n	3206 <setvbuf+0xae>
    3202:	2f00      	cmp	r7, #0
    3204:	d125      	bne.n	3252 <setvbuf+0xfa>
    3206:	0028      	movs	r0, r5
    3208:	f001 f968 	bl	44dc <malloc>
    320c:	9501      	str	r5, [sp, #4]
    320e:	1e07      	subs	r7, r0, #0
    3210:	d11a      	bne.n	3248 <setvbuf+0xf0>
    3212:	9b02      	ldr	r3, [sp, #8]
    3214:	9301      	str	r3, [sp, #4]
    3216:	42ab      	cmp	r3, r5
    3218:	d102      	bne.n	3220 <setvbuf+0xc8>
    321a:	2001      	movs	r0, #1
    321c:	4240      	negs	r0, r0
    321e:	e006      	b.n	322e <setvbuf+0xd6>
    3220:	9801      	ldr	r0, [sp, #4]
    3222:	f001 f95b 	bl	44dc <malloc>
    3226:	1e07      	subs	r7, r0, #0
    3228:	d10e      	bne.n	3248 <setvbuf+0xf0>
    322a:	e7f6      	b.n	321a <setvbuf+0xc2>
    322c:	2000      	movs	r0, #0
    322e:	2202      	movs	r2, #2
    3230:	89a3      	ldrh	r3, [r4, #12]
    3232:	4313      	orrs	r3, r2
    3234:	81a3      	strh	r3, [r4, #12]
    3236:	2300      	movs	r3, #0
    3238:	60a3      	str	r3, [r4, #8]
    323a:	0023      	movs	r3, r4
    323c:	3347      	adds	r3, #71	; 0x47
    323e:	6023      	str	r3, [r4, #0]
    3240:	6123      	str	r3, [r4, #16]
    3242:	2301      	movs	r3, #1
    3244:	6163      	str	r3, [r4, #20]
    3246:	e02a      	b.n	329e <setvbuf+0x146>
    3248:	2280      	movs	r2, #128	; 0x80
    324a:	89a3      	ldrh	r3, [r4, #12]
    324c:	9d01      	ldr	r5, [sp, #4]
    324e:	4313      	orrs	r3, r2
    3250:	81a3      	strh	r3, [r4, #12]
    3252:	69b3      	ldr	r3, [r6, #24]
    3254:	2b00      	cmp	r3, #0
    3256:	d102      	bne.n	325e <setvbuf+0x106>
    3258:	0030      	movs	r0, r6
    325a:	f001 f843 	bl	42e4 <__sinit>
    325e:	9b00      	ldr	r3, [sp, #0]
    3260:	2b01      	cmp	r3, #1
    3262:	d103      	bne.n	326c <setvbuf+0x114>
    3264:	89a3      	ldrh	r3, [r4, #12]
    3266:	9a00      	ldr	r2, [sp, #0]
    3268:	431a      	orrs	r2, r3
    326a:	81a2      	strh	r2, [r4, #12]
    326c:	2308      	movs	r3, #8
    326e:	89a2      	ldrh	r2, [r4, #12]
    3270:	6027      	str	r7, [r4, #0]
    3272:	4013      	ands	r3, r2
    3274:	6127      	str	r7, [r4, #16]
    3276:	6165      	str	r5, [r4, #20]
    3278:	1e18      	subs	r0, r3, #0
    327a:	d00c      	beq.n	3296 <setvbuf+0x13e>
    327c:	2301      	movs	r3, #1
    327e:	401a      	ands	r2, r3
    3280:	2300      	movs	r3, #0
    3282:	1e10      	subs	r0, r2, #0
    3284:	4298      	cmp	r0, r3
    3286:	d004      	beq.n	3292 <setvbuf+0x13a>
    3288:	426d      	negs	r5, r5
    328a:	60a3      	str	r3, [r4, #8]
    328c:	61a5      	str	r5, [r4, #24]
    328e:	0018      	movs	r0, r3
    3290:	e005      	b.n	329e <setvbuf+0x146>
    3292:	60a5      	str	r5, [r4, #8]
    3294:	e003      	b.n	329e <setvbuf+0x146>
    3296:	60a3      	str	r3, [r4, #8]
    3298:	e001      	b.n	329e <setvbuf+0x146>
    329a:	2001      	movs	r0, #1
    329c:	4240      	negs	r0, r0
    329e:	b005      	add	sp, #20
    32a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    32a2:	46c0      	nop			; (mov r8, r8)
    32a4:	2000006c 	.word	0x2000006c
    32a8:	00007208 	.word	0x00007208
    32ac:	00007228 	.word	0x00007228
    32b0:	00007248 	.word	0x00007248
    32b4:	fffff35c 	.word	0xfffff35c

000032b8 <strlen>:
    32b8:	2300      	movs	r3, #0
    32ba:	5cc2      	ldrb	r2, [r0, r3]
    32bc:	3301      	adds	r3, #1
    32be:	2a00      	cmp	r2, #0
    32c0:	d1fb      	bne.n	32ba <strlen+0x2>
    32c2:	1e58      	subs	r0, r3, #1
    32c4:	4770      	bx	lr
	...

000032c8 <__swbuf_r>:
    32c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    32ca:	0005      	movs	r5, r0
    32cc:	000f      	movs	r7, r1
    32ce:	0014      	movs	r4, r2
    32d0:	2800      	cmp	r0, #0
    32d2:	d004      	beq.n	32de <__swbuf_r+0x16>
    32d4:	6983      	ldr	r3, [r0, #24]
    32d6:	2b00      	cmp	r3, #0
    32d8:	d101      	bne.n	32de <__swbuf_r+0x16>
    32da:	f001 f803 	bl	42e4 <__sinit>
    32de:	4b23      	ldr	r3, [pc, #140]	; (336c <__swbuf_r+0xa4>)
    32e0:	429c      	cmp	r4, r3
    32e2:	d101      	bne.n	32e8 <__swbuf_r+0x20>
    32e4:	686c      	ldr	r4, [r5, #4]
    32e6:	e008      	b.n	32fa <__swbuf_r+0x32>
    32e8:	4b21      	ldr	r3, [pc, #132]	; (3370 <__swbuf_r+0xa8>)
    32ea:	429c      	cmp	r4, r3
    32ec:	d101      	bne.n	32f2 <__swbuf_r+0x2a>
    32ee:	68ac      	ldr	r4, [r5, #8]
    32f0:	e003      	b.n	32fa <__swbuf_r+0x32>
    32f2:	4b20      	ldr	r3, [pc, #128]	; (3374 <__swbuf_r+0xac>)
    32f4:	429c      	cmp	r4, r3
    32f6:	d100      	bne.n	32fa <__swbuf_r+0x32>
    32f8:	68ec      	ldr	r4, [r5, #12]
    32fa:	69a3      	ldr	r3, [r4, #24]
    32fc:	60a3      	str	r3, [r4, #8]
    32fe:	89a3      	ldrh	r3, [r4, #12]
    3300:	071b      	lsls	r3, r3, #28
    3302:	d50a      	bpl.n	331a <__swbuf_r+0x52>
    3304:	6923      	ldr	r3, [r4, #16]
    3306:	2b00      	cmp	r3, #0
    3308:	d007      	beq.n	331a <__swbuf_r+0x52>
    330a:	6823      	ldr	r3, [r4, #0]
    330c:	6922      	ldr	r2, [r4, #16]
    330e:	b2fe      	uxtb	r6, r7
    3310:	1a98      	subs	r0, r3, r2
    3312:	6963      	ldr	r3, [r4, #20]
    3314:	4298      	cmp	r0, r3
    3316:	db0f      	blt.n	3338 <__swbuf_r+0x70>
    3318:	e008      	b.n	332c <__swbuf_r+0x64>
    331a:	0021      	movs	r1, r4
    331c:	0028      	movs	r0, r5
    331e:	f000 f82b 	bl	3378 <__swsetup_r>
    3322:	2800      	cmp	r0, #0
    3324:	d0f1      	beq.n	330a <__swbuf_r+0x42>
    3326:	2001      	movs	r0, #1
    3328:	4240      	negs	r0, r0
    332a:	e01d      	b.n	3368 <__swbuf_r+0xa0>
    332c:	0021      	movs	r1, r4
    332e:	0028      	movs	r0, r5
    3330:	f000 ff6a 	bl	4208 <_fflush_r>
    3334:	2800      	cmp	r0, #0
    3336:	d1f6      	bne.n	3326 <__swbuf_r+0x5e>
    3338:	68a3      	ldr	r3, [r4, #8]
    333a:	3001      	adds	r0, #1
    333c:	3b01      	subs	r3, #1
    333e:	60a3      	str	r3, [r4, #8]
    3340:	6823      	ldr	r3, [r4, #0]
    3342:	1c5a      	adds	r2, r3, #1
    3344:	6022      	str	r2, [r4, #0]
    3346:	701f      	strb	r7, [r3, #0]
    3348:	6963      	ldr	r3, [r4, #20]
    334a:	4298      	cmp	r0, r3
    334c:	d005      	beq.n	335a <__swbuf_r+0x92>
    334e:	89a3      	ldrh	r3, [r4, #12]
    3350:	0030      	movs	r0, r6
    3352:	07db      	lsls	r3, r3, #31
    3354:	d508      	bpl.n	3368 <__swbuf_r+0xa0>
    3356:	2e0a      	cmp	r6, #10
    3358:	d106      	bne.n	3368 <__swbuf_r+0xa0>
    335a:	0021      	movs	r1, r4
    335c:	0028      	movs	r0, r5
    335e:	f000 ff53 	bl	4208 <_fflush_r>
    3362:	2800      	cmp	r0, #0
    3364:	d1df      	bne.n	3326 <__swbuf_r+0x5e>
    3366:	0030      	movs	r0, r6
    3368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    336a:	46c0      	nop			; (mov r8, r8)
    336c:	00007208 	.word	0x00007208
    3370:	00007228 	.word	0x00007228
    3374:	00007248 	.word	0x00007248

00003378 <__swsetup_r>:
    3378:	4b36      	ldr	r3, [pc, #216]	; (3454 <__swsetup_r+0xdc>)
    337a:	b570      	push	{r4, r5, r6, lr}
    337c:	681d      	ldr	r5, [r3, #0]
    337e:	0006      	movs	r6, r0
    3380:	000c      	movs	r4, r1
    3382:	2d00      	cmp	r5, #0
    3384:	d005      	beq.n	3392 <__swsetup_r+0x1a>
    3386:	69ab      	ldr	r3, [r5, #24]
    3388:	2b00      	cmp	r3, #0
    338a:	d102      	bne.n	3392 <__swsetup_r+0x1a>
    338c:	0028      	movs	r0, r5
    338e:	f000 ffa9 	bl	42e4 <__sinit>
    3392:	4b31      	ldr	r3, [pc, #196]	; (3458 <__swsetup_r+0xe0>)
    3394:	429c      	cmp	r4, r3
    3396:	d101      	bne.n	339c <__swsetup_r+0x24>
    3398:	686c      	ldr	r4, [r5, #4]
    339a:	e008      	b.n	33ae <__swsetup_r+0x36>
    339c:	4b2f      	ldr	r3, [pc, #188]	; (345c <__swsetup_r+0xe4>)
    339e:	429c      	cmp	r4, r3
    33a0:	d101      	bne.n	33a6 <__swsetup_r+0x2e>
    33a2:	68ac      	ldr	r4, [r5, #8]
    33a4:	e003      	b.n	33ae <__swsetup_r+0x36>
    33a6:	4b2e      	ldr	r3, [pc, #184]	; (3460 <__swsetup_r+0xe8>)
    33a8:	429c      	cmp	r4, r3
    33aa:	d100      	bne.n	33ae <__swsetup_r+0x36>
    33ac:	68ec      	ldr	r4, [r5, #12]
    33ae:	220c      	movs	r2, #12
    33b0:	5ea3      	ldrsh	r3, [r4, r2]
    33b2:	b29a      	uxth	r2, r3
    33b4:	0711      	lsls	r1, r2, #28
    33b6:	d423      	bmi.n	3400 <__swsetup_r+0x88>
    33b8:	06d1      	lsls	r1, r2, #27
    33ba:	d407      	bmi.n	33cc <__swsetup_r+0x54>
    33bc:	2209      	movs	r2, #9
    33be:	2001      	movs	r0, #1
    33c0:	6032      	str	r2, [r6, #0]
    33c2:	3237      	adds	r2, #55	; 0x37
    33c4:	4313      	orrs	r3, r2
    33c6:	81a3      	strh	r3, [r4, #12]
    33c8:	4240      	negs	r0, r0
    33ca:	e042      	b.n	3452 <__swsetup_r+0xda>
    33cc:	0753      	lsls	r3, r2, #29
    33ce:	d513      	bpl.n	33f8 <__swsetup_r+0x80>
    33d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
    33d2:	2900      	cmp	r1, #0
    33d4:	d008      	beq.n	33e8 <__swsetup_r+0x70>
    33d6:	0023      	movs	r3, r4
    33d8:	3344      	adds	r3, #68	; 0x44
    33da:	4299      	cmp	r1, r3
    33dc:	d002      	beq.n	33e4 <__swsetup_r+0x6c>
    33de:	0030      	movs	r0, r6
    33e0:	f001 fb8a 	bl	4af8 <_free_r>
    33e4:	2300      	movs	r3, #0
    33e6:	6363      	str	r3, [r4, #52]	; 0x34
    33e8:	2224      	movs	r2, #36	; 0x24
    33ea:	89a3      	ldrh	r3, [r4, #12]
    33ec:	4393      	bics	r3, r2
    33ee:	81a3      	strh	r3, [r4, #12]
    33f0:	2300      	movs	r3, #0
    33f2:	6063      	str	r3, [r4, #4]
    33f4:	6923      	ldr	r3, [r4, #16]
    33f6:	6023      	str	r3, [r4, #0]
    33f8:	2208      	movs	r2, #8
    33fa:	89a3      	ldrh	r3, [r4, #12]
    33fc:	4313      	orrs	r3, r2
    33fe:	81a3      	strh	r3, [r4, #12]
    3400:	6923      	ldr	r3, [r4, #16]
    3402:	2b00      	cmp	r3, #0
    3404:	d10b      	bne.n	341e <__swsetup_r+0xa6>
    3406:	23a0      	movs	r3, #160	; 0xa0
    3408:	89a2      	ldrh	r2, [r4, #12]
    340a:	009b      	lsls	r3, r3, #2
    340c:	4013      	ands	r3, r2
    340e:	2280      	movs	r2, #128	; 0x80
    3410:	0092      	lsls	r2, r2, #2
    3412:	4293      	cmp	r3, r2
    3414:	d003      	beq.n	341e <__swsetup_r+0xa6>
    3416:	0021      	movs	r1, r4
    3418:	0030      	movs	r0, r6
    341a:	f001 f821 	bl	4460 <__smakebuf_r>
    341e:	2301      	movs	r3, #1
    3420:	89a2      	ldrh	r2, [r4, #12]
    3422:	4013      	ands	r3, r2
    3424:	d005      	beq.n	3432 <__swsetup_r+0xba>
    3426:	2300      	movs	r3, #0
    3428:	60a3      	str	r3, [r4, #8]
    342a:	6963      	ldr	r3, [r4, #20]
    342c:	425b      	negs	r3, r3
    342e:	61a3      	str	r3, [r4, #24]
    3430:	e003      	b.n	343a <__swsetup_r+0xc2>
    3432:	0792      	lsls	r2, r2, #30
    3434:	d400      	bmi.n	3438 <__swsetup_r+0xc0>
    3436:	6963      	ldr	r3, [r4, #20]
    3438:	60a3      	str	r3, [r4, #8]
    343a:	2000      	movs	r0, #0
    343c:	6923      	ldr	r3, [r4, #16]
    343e:	4283      	cmp	r3, r0
    3440:	d107      	bne.n	3452 <__swsetup_r+0xda>
    3442:	220c      	movs	r2, #12
    3444:	5ea3      	ldrsh	r3, [r4, r2]
    3446:	061a      	lsls	r2, r3, #24
    3448:	d503      	bpl.n	3452 <__swsetup_r+0xda>
    344a:	2240      	movs	r2, #64	; 0x40
    344c:	4313      	orrs	r3, r2
    344e:	81a3      	strh	r3, [r4, #12]
    3450:	3801      	subs	r0, #1
    3452:	bd70      	pop	{r4, r5, r6, pc}
    3454:	2000006c 	.word	0x2000006c
    3458:	00007208 	.word	0x00007208
    345c:	00007228 	.word	0x00007228
    3460:	00007248 	.word	0x00007248

00003464 <quorem>:
    3464:	b5f0      	push	{r4, r5, r6, r7, lr}
    3466:	6903      	ldr	r3, [r0, #16]
    3468:	690c      	ldr	r4, [r1, #16]
    346a:	b089      	sub	sp, #36	; 0x24
    346c:	0007      	movs	r7, r0
    346e:	9105      	str	r1, [sp, #20]
    3470:	2600      	movs	r6, #0
    3472:	429c      	cmp	r4, r3
    3474:	dc79      	bgt.n	356a <quorem+0x106>
    3476:	000b      	movs	r3, r1
    3478:	3c01      	subs	r4, #1
    347a:	3314      	adds	r3, #20
    347c:	00a5      	lsls	r5, r4, #2
    347e:	9303      	str	r3, [sp, #12]
    3480:	195b      	adds	r3, r3, r5
    3482:	9304      	str	r3, [sp, #16]
    3484:	0003      	movs	r3, r0
    3486:	3314      	adds	r3, #20
    3488:	9302      	str	r3, [sp, #8]
    348a:	195d      	adds	r5, r3, r5
    348c:	9b04      	ldr	r3, [sp, #16]
    348e:	6828      	ldr	r0, [r5, #0]
    3490:	681b      	ldr	r3, [r3, #0]
    3492:	1c59      	adds	r1, r3, #1
    3494:	9301      	str	r3, [sp, #4]
    3496:	f001 fe1f 	bl	50d8 <__aeabi_uidiv>
    349a:	9001      	str	r0, [sp, #4]
    349c:	42b0      	cmp	r0, r6
    349e:	d033      	beq.n	3508 <quorem+0xa4>
    34a0:	9b03      	ldr	r3, [sp, #12]
    34a2:	9802      	ldr	r0, [sp, #8]
    34a4:	469c      	mov	ip, r3
    34a6:	9606      	str	r6, [sp, #24]
    34a8:	4663      	mov	r3, ip
    34aa:	cb04      	ldmia	r3!, {r2}
    34ac:	469c      	mov	ip, r3
    34ae:	9b01      	ldr	r3, [sp, #4]
    34b0:	b291      	uxth	r1, r2
    34b2:	4359      	muls	r1, r3
    34b4:	0c12      	lsrs	r2, r2, #16
    34b6:	435a      	muls	r2, r3
    34b8:	1989      	adds	r1, r1, r6
    34ba:	0c0b      	lsrs	r3, r1, #16
    34bc:	18d3      	adds	r3, r2, r3
    34be:	9307      	str	r3, [sp, #28]
    34c0:	9a06      	ldr	r2, [sp, #24]
    34c2:	0c1e      	lsrs	r6, r3, #16
    34c4:	8803      	ldrh	r3, [r0, #0]
    34c6:	b289      	uxth	r1, r1
    34c8:	189b      	adds	r3, r3, r2
    34ca:	6802      	ldr	r2, [r0, #0]
    34cc:	1a5b      	subs	r3, r3, r1
    34ce:	0c11      	lsrs	r1, r2, #16
    34d0:	466a      	mov	r2, sp
    34d2:	8b92      	ldrh	r2, [r2, #28]
    34d4:	1a8a      	subs	r2, r1, r2
    34d6:	1419      	asrs	r1, r3, #16
    34d8:	1852      	adds	r2, r2, r1
    34da:	1411      	asrs	r1, r2, #16
    34dc:	b29b      	uxth	r3, r3
    34de:	0412      	lsls	r2, r2, #16
    34e0:	4313      	orrs	r3, r2
    34e2:	c008      	stmia	r0!, {r3}
    34e4:	9b04      	ldr	r3, [sp, #16]
    34e6:	9106      	str	r1, [sp, #24]
    34e8:	4563      	cmp	r3, ip
    34ea:	d2dd      	bcs.n	34a8 <quorem+0x44>
    34ec:	682b      	ldr	r3, [r5, #0]
    34ee:	2b00      	cmp	r3, #0
    34f0:	d10a      	bne.n	3508 <quorem+0xa4>
    34f2:	9b02      	ldr	r3, [sp, #8]
    34f4:	3d04      	subs	r5, #4
    34f6:	42ab      	cmp	r3, r5
    34f8:	d301      	bcc.n	34fe <quorem+0x9a>
    34fa:	613c      	str	r4, [r7, #16]
    34fc:	e004      	b.n	3508 <quorem+0xa4>
    34fe:	682b      	ldr	r3, [r5, #0]
    3500:	2b00      	cmp	r3, #0
    3502:	d1fa      	bne.n	34fa <quorem+0x96>
    3504:	3c01      	subs	r4, #1
    3506:	e7f4      	b.n	34f2 <quorem+0x8e>
    3508:	9905      	ldr	r1, [sp, #20]
    350a:	0038      	movs	r0, r7
    350c:	f001 fa0c 	bl	4928 <__mcmp>
    3510:	2800      	cmp	r0, #0
    3512:	db29      	blt.n	3568 <quorem+0x104>
    3514:	2000      	movs	r0, #0
    3516:	9b01      	ldr	r3, [sp, #4]
    3518:	9902      	ldr	r1, [sp, #8]
    351a:	3301      	adds	r3, #1
    351c:	9a03      	ldr	r2, [sp, #12]
    351e:	9301      	str	r3, [sp, #4]
    3520:	ca40      	ldmia	r2!, {r6}
    3522:	880b      	ldrh	r3, [r1, #0]
    3524:	1818      	adds	r0, r3, r0
    3526:	b2b3      	uxth	r3, r6
    3528:	1ac3      	subs	r3, r0, r3
    352a:	6808      	ldr	r0, [r1, #0]
    352c:	0c36      	lsrs	r6, r6, #16
    352e:	0c00      	lsrs	r0, r0, #16
    3530:	1b80      	subs	r0, r0, r6
    3532:	141d      	asrs	r5, r3, #16
    3534:	1945      	adds	r5, r0, r5
    3536:	1428      	asrs	r0, r5, #16
    3538:	b29b      	uxth	r3, r3
    353a:	042d      	lsls	r5, r5, #16
    353c:	432b      	orrs	r3, r5
    353e:	c108      	stmia	r1!, {r3}
    3540:	9b04      	ldr	r3, [sp, #16]
    3542:	4293      	cmp	r3, r2
    3544:	d2ec      	bcs.n	3520 <quorem+0xbc>
    3546:	9a02      	ldr	r2, [sp, #8]
    3548:	00a3      	lsls	r3, r4, #2
    354a:	18d3      	adds	r3, r2, r3
    354c:	681a      	ldr	r2, [r3, #0]
    354e:	2a00      	cmp	r2, #0
    3550:	d10a      	bne.n	3568 <quorem+0x104>
    3552:	9a02      	ldr	r2, [sp, #8]
    3554:	3b04      	subs	r3, #4
    3556:	429a      	cmp	r2, r3
    3558:	d301      	bcc.n	355e <quorem+0xfa>
    355a:	613c      	str	r4, [r7, #16]
    355c:	e004      	b.n	3568 <quorem+0x104>
    355e:	681a      	ldr	r2, [r3, #0]
    3560:	2a00      	cmp	r2, #0
    3562:	d1fa      	bne.n	355a <quorem+0xf6>
    3564:	3c01      	subs	r4, #1
    3566:	e7f4      	b.n	3552 <quorem+0xee>
    3568:	9e01      	ldr	r6, [sp, #4]
    356a:	0030      	movs	r0, r6
    356c:	b009      	add	sp, #36	; 0x24
    356e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003570 <_dtoa_r>:
    3570:	b5f0      	push	{r4, r5, r6, r7, lr}
    3572:	0016      	movs	r6, r2
    3574:	001f      	movs	r7, r3
    3576:	6a44      	ldr	r4, [r0, #36]	; 0x24
    3578:	b09d      	sub	sp, #116	; 0x74
    357a:	9004      	str	r0, [sp, #16]
    357c:	9d25      	ldr	r5, [sp, #148]	; 0x94
    357e:	9606      	str	r6, [sp, #24]
    3580:	9707      	str	r7, [sp, #28]
    3582:	2c00      	cmp	r4, #0
    3584:	d108      	bne.n	3598 <_dtoa_r+0x28>
    3586:	2010      	movs	r0, #16
    3588:	f000 ffa8 	bl	44dc <malloc>
    358c:	9b04      	ldr	r3, [sp, #16]
    358e:	6258      	str	r0, [r3, #36]	; 0x24
    3590:	6044      	str	r4, [r0, #4]
    3592:	6084      	str	r4, [r0, #8]
    3594:	6004      	str	r4, [r0, #0]
    3596:	60c4      	str	r4, [r0, #12]
    3598:	9b04      	ldr	r3, [sp, #16]
    359a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    359c:	6819      	ldr	r1, [r3, #0]
    359e:	2900      	cmp	r1, #0
    35a0:	d00b      	beq.n	35ba <_dtoa_r+0x4a>
    35a2:	685a      	ldr	r2, [r3, #4]
    35a4:	2301      	movs	r3, #1
    35a6:	4093      	lsls	r3, r2
    35a8:	604a      	str	r2, [r1, #4]
    35aa:	608b      	str	r3, [r1, #8]
    35ac:	9804      	ldr	r0, [sp, #16]
    35ae:	f000 ffe2 	bl	4576 <_Bfree>
    35b2:	2200      	movs	r2, #0
    35b4:	9b04      	ldr	r3, [sp, #16]
    35b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    35b8:	601a      	str	r2, [r3, #0]
    35ba:	9b07      	ldr	r3, [sp, #28]
    35bc:	2b00      	cmp	r3, #0
    35be:	da05      	bge.n	35cc <_dtoa_r+0x5c>
    35c0:	2301      	movs	r3, #1
    35c2:	602b      	str	r3, [r5, #0]
    35c4:	007b      	lsls	r3, r7, #1
    35c6:	085b      	lsrs	r3, r3, #1
    35c8:	9307      	str	r3, [sp, #28]
    35ca:	e001      	b.n	35d0 <_dtoa_r+0x60>
    35cc:	2300      	movs	r3, #0
    35ce:	602b      	str	r3, [r5, #0]
    35d0:	9c07      	ldr	r4, [sp, #28]
    35d2:	4bc8      	ldr	r3, [pc, #800]	; (38f4 <_dtoa_r+0x384>)
    35d4:	0022      	movs	r2, r4
    35d6:	9319      	str	r3, [sp, #100]	; 0x64
    35d8:	401a      	ands	r2, r3
    35da:	429a      	cmp	r2, r3
    35dc:	d119      	bne.n	3612 <_dtoa_r+0xa2>
    35de:	4bc6      	ldr	r3, [pc, #792]	; (38f8 <_dtoa_r+0x388>)
    35e0:	9a24      	ldr	r2, [sp, #144]	; 0x90
    35e2:	6013      	str	r3, [r2, #0]
    35e4:	9a06      	ldr	r2, [sp, #24]
    35e6:	4bc5      	ldr	r3, [pc, #788]	; (38fc <_dtoa_r+0x38c>)
    35e8:	2a00      	cmp	r2, #0
    35ea:	d102      	bne.n	35f2 <_dtoa_r+0x82>
    35ec:	0324      	lsls	r4, r4, #12
    35ee:	d100      	bne.n	35f2 <_dtoa_r+0x82>
    35f0:	4bc3      	ldr	r3, [pc, #780]	; (3900 <_dtoa_r+0x390>)
    35f2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    35f4:	0018      	movs	r0, r3
    35f6:	2a00      	cmp	r2, #0
    35f8:	d101      	bne.n	35fe <_dtoa_r+0x8e>
    35fa:	f000 fd7d 	bl	40f8 <_dtoa_r+0xb88>
    35fe:	78d9      	ldrb	r1, [r3, #3]
    3600:	1cda      	adds	r2, r3, #3
    3602:	2900      	cmp	r1, #0
    3604:	d000      	beq.n	3608 <_dtoa_r+0x98>
    3606:	3205      	adds	r2, #5
    3608:	9926      	ldr	r1, [sp, #152]	; 0x98
    360a:	0018      	movs	r0, r3
    360c:	600a      	str	r2, [r1, #0]
    360e:	f000 fd73 	bl	40f8 <_dtoa_r+0xb88>
    3612:	9e06      	ldr	r6, [sp, #24]
    3614:	9f07      	ldr	r7, [sp, #28]
    3616:	2200      	movs	r2, #0
    3618:	2300      	movs	r3, #0
    361a:	0030      	movs	r0, r6
    361c:	0039      	movs	r1, r7
    361e:	f001 fee1 	bl	53e4 <__aeabi_dcmpeq>
    3622:	1e05      	subs	r5, r0, #0
    3624:	d00e      	beq.n	3644 <_dtoa_r+0xd4>
    3626:	2301      	movs	r3, #1
    3628:	9a24      	ldr	r2, [sp, #144]	; 0x90
    362a:	6013      	str	r3, [r2, #0]
    362c:	4bb5      	ldr	r3, [pc, #724]	; (3904 <_dtoa_r+0x394>)
    362e:	9a26      	ldr	r2, [sp, #152]	; 0x98
    3630:	0018      	movs	r0, r3
    3632:	2a00      	cmp	r2, #0
    3634:	d101      	bne.n	363a <_dtoa_r+0xca>
    3636:	f000 fd5f 	bl	40f8 <_dtoa_r+0xb88>
    363a:	4ab3      	ldr	r2, [pc, #716]	; (3908 <_dtoa_r+0x398>)
    363c:	9926      	ldr	r1, [sp, #152]	; 0x98
    363e:	600a      	str	r2, [r1, #0]
    3640:	f000 fd5a 	bl	40f8 <_dtoa_r+0xb88>
    3644:	ab1a      	add	r3, sp, #104	; 0x68
    3646:	9301      	str	r3, [sp, #4]
    3648:	ab1b      	add	r3, sp, #108	; 0x6c
    364a:	9300      	str	r3, [sp, #0]
    364c:	0032      	movs	r2, r6
    364e:	003b      	movs	r3, r7
    3650:	9804      	ldr	r0, [sp, #16]
    3652:	f001 f9ef 	bl	4a34 <__d2b>
    3656:	0063      	lsls	r3, r4, #1
    3658:	9005      	str	r0, [sp, #20]
    365a:	0d5b      	lsrs	r3, r3, #21
    365c:	d009      	beq.n	3672 <_dtoa_r+0x102>
    365e:	033a      	lsls	r2, r7, #12
    3660:	4caa      	ldr	r4, [pc, #680]	; (390c <_dtoa_r+0x39c>)
    3662:	0b12      	lsrs	r2, r2, #12
    3664:	4314      	orrs	r4, r2
    3666:	4aaa      	ldr	r2, [pc, #680]	; (3910 <_dtoa_r+0x3a0>)
    3668:	0030      	movs	r0, r6
    366a:	0021      	movs	r1, r4
    366c:	189e      	adds	r6, r3, r2
    366e:	9517      	str	r5, [sp, #92]	; 0x5c
    3670:	e01a      	b.n	36a8 <_dtoa_r+0x138>
    3672:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    3674:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    3676:	189e      	adds	r6, r3, r2
    3678:	4ba6      	ldr	r3, [pc, #664]	; (3914 <_dtoa_r+0x3a4>)
    367a:	18f3      	adds	r3, r6, r3
    367c:	2b20      	cmp	r3, #32
    367e:	dd08      	ble.n	3692 <_dtoa_r+0x122>
    3680:	4aa5      	ldr	r2, [pc, #660]	; (3918 <_dtoa_r+0x3a8>)
    3682:	9806      	ldr	r0, [sp, #24]
    3684:	18b2      	adds	r2, r6, r2
    3686:	40d0      	lsrs	r0, r2
    3688:	2240      	movs	r2, #64	; 0x40
    368a:	1ad3      	subs	r3, r2, r3
    368c:	409c      	lsls	r4, r3
    368e:	4320      	orrs	r0, r4
    3690:	e003      	b.n	369a <_dtoa_r+0x12a>
    3692:	2220      	movs	r2, #32
    3694:	9806      	ldr	r0, [sp, #24]
    3696:	1ad3      	subs	r3, r2, r3
    3698:	4098      	lsls	r0, r3
    369a:	f003 fcb3 	bl	7004 <__aeabi_ui2d>
    369e:	2301      	movs	r3, #1
    36a0:	4c9e      	ldr	r4, [pc, #632]	; (391c <_dtoa_r+0x3ac>)
    36a2:	3e01      	subs	r6, #1
    36a4:	1909      	adds	r1, r1, r4
    36a6:	9317      	str	r3, [sp, #92]	; 0x5c
    36a8:	2200      	movs	r2, #0
    36aa:	4b9d      	ldr	r3, [pc, #628]	; (3920 <_dtoa_r+0x3b0>)
    36ac:	f003 f8be 	bl	682c <__aeabi_dsub>
    36b0:	4a9c      	ldr	r2, [pc, #624]	; (3924 <_dtoa_r+0x3b4>)
    36b2:	4b9d      	ldr	r3, [pc, #628]	; (3928 <_dtoa_r+0x3b8>)
    36b4:	f002 fe40 	bl	6338 <__aeabi_dmul>
    36b8:	4a9c      	ldr	r2, [pc, #624]	; (392c <_dtoa_r+0x3bc>)
    36ba:	4b9d      	ldr	r3, [pc, #628]	; (3930 <_dtoa_r+0x3c0>)
    36bc:	f001 feec 	bl	5498 <__aeabi_dadd>
    36c0:	0004      	movs	r4, r0
    36c2:	0030      	movs	r0, r6
    36c4:	000d      	movs	r5, r1
    36c6:	f003 fc5b 	bl	6f80 <__aeabi_i2d>
    36ca:	4a9a      	ldr	r2, [pc, #616]	; (3934 <_dtoa_r+0x3c4>)
    36cc:	4b9a      	ldr	r3, [pc, #616]	; (3938 <_dtoa_r+0x3c8>)
    36ce:	f002 fe33 	bl	6338 <__aeabi_dmul>
    36d2:	0002      	movs	r2, r0
    36d4:	000b      	movs	r3, r1
    36d6:	0020      	movs	r0, r4
    36d8:	0029      	movs	r1, r5
    36da:	f001 fedd 	bl	5498 <__aeabi_dadd>
    36de:	0004      	movs	r4, r0
    36e0:	000d      	movs	r5, r1
    36e2:	f003 fc17 	bl	6f14 <__aeabi_d2iz>
    36e6:	2200      	movs	r2, #0
    36e8:	9003      	str	r0, [sp, #12]
    36ea:	2300      	movs	r3, #0
    36ec:	0020      	movs	r0, r4
    36ee:	0029      	movs	r1, r5
    36f0:	f001 fe7e 	bl	53f0 <__aeabi_dcmplt>
    36f4:	2800      	cmp	r0, #0
    36f6:	d00d      	beq.n	3714 <_dtoa_r+0x1a4>
    36f8:	9803      	ldr	r0, [sp, #12]
    36fa:	f003 fc41 	bl	6f80 <__aeabi_i2d>
    36fe:	0002      	movs	r2, r0
    3700:	000b      	movs	r3, r1
    3702:	0020      	movs	r0, r4
    3704:	0029      	movs	r1, r5
    3706:	f001 fe6d 	bl	53e4 <__aeabi_dcmpeq>
    370a:	4243      	negs	r3, r0
    370c:	4143      	adcs	r3, r0
    370e:	9a03      	ldr	r2, [sp, #12]
    3710:	1ad3      	subs	r3, r2, r3
    3712:	9303      	str	r3, [sp, #12]
    3714:	2301      	movs	r3, #1
    3716:	9316      	str	r3, [sp, #88]	; 0x58
    3718:	9b03      	ldr	r3, [sp, #12]
    371a:	2b16      	cmp	r3, #22
    371c:	d811      	bhi.n	3742 <_dtoa_r+0x1d2>
    371e:	4987      	ldr	r1, [pc, #540]	; (393c <_dtoa_r+0x3cc>)
    3720:	00db      	lsls	r3, r3, #3
    3722:	18c9      	adds	r1, r1, r3
    3724:	6808      	ldr	r0, [r1, #0]
    3726:	6849      	ldr	r1, [r1, #4]
    3728:	9a06      	ldr	r2, [sp, #24]
    372a:	9b07      	ldr	r3, [sp, #28]
    372c:	f001 fe74 	bl	5418 <__aeabi_dcmpgt>
    3730:	2800      	cmp	r0, #0
    3732:	d005      	beq.n	3740 <_dtoa_r+0x1d0>
    3734:	9b03      	ldr	r3, [sp, #12]
    3736:	3b01      	subs	r3, #1
    3738:	9303      	str	r3, [sp, #12]
    373a:	2300      	movs	r3, #0
    373c:	9316      	str	r3, [sp, #88]	; 0x58
    373e:	e000      	b.n	3742 <_dtoa_r+0x1d2>
    3740:	9016      	str	r0, [sp, #88]	; 0x58
    3742:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    3744:	1b9e      	subs	r6, r3, r6
    3746:	2300      	movs	r3, #0
    3748:	930b      	str	r3, [sp, #44]	; 0x2c
    374a:	3e01      	subs	r6, #1
    374c:	960c      	str	r6, [sp, #48]	; 0x30
    374e:	d504      	bpl.n	375a <_dtoa_r+0x1ea>
    3750:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3752:	425b      	negs	r3, r3
    3754:	930b      	str	r3, [sp, #44]	; 0x2c
    3756:	2300      	movs	r3, #0
    3758:	930c      	str	r3, [sp, #48]	; 0x30
    375a:	9b03      	ldr	r3, [sp, #12]
    375c:	2b00      	cmp	r3, #0
    375e:	db08      	blt.n	3772 <_dtoa_r+0x202>
    3760:	9a03      	ldr	r2, [sp, #12]
    3762:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3764:	4694      	mov	ip, r2
    3766:	4463      	add	r3, ip
    3768:	930c      	str	r3, [sp, #48]	; 0x30
    376a:	2300      	movs	r3, #0
    376c:	9211      	str	r2, [sp, #68]	; 0x44
    376e:	9308      	str	r3, [sp, #32]
    3770:	e007      	b.n	3782 <_dtoa_r+0x212>
    3772:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3774:	9a03      	ldr	r2, [sp, #12]
    3776:	1a9b      	subs	r3, r3, r2
    3778:	930b      	str	r3, [sp, #44]	; 0x2c
    377a:	4253      	negs	r3, r2
    377c:	9308      	str	r3, [sp, #32]
    377e:	2300      	movs	r3, #0
    3780:	9311      	str	r3, [sp, #68]	; 0x44
    3782:	9b22      	ldr	r3, [sp, #136]	; 0x88
    3784:	2501      	movs	r5, #1
    3786:	2b09      	cmp	r3, #9
    3788:	d825      	bhi.n	37d6 <_dtoa_r+0x266>
    378a:	2b05      	cmp	r3, #5
    378c:	dd02      	ble.n	3794 <_dtoa_r+0x224>
    378e:	2500      	movs	r5, #0
    3790:	3b04      	subs	r3, #4
    3792:	9322      	str	r3, [sp, #136]	; 0x88
    3794:	9b22      	ldr	r3, [sp, #136]	; 0x88
    3796:	1e98      	subs	r0, r3, #2
    3798:	2803      	cmp	r0, #3
    379a:	d824      	bhi.n	37e6 <_dtoa_r+0x276>
    379c:	f001 fc92 	bl	50c4 <__gnu_thumb1_case_uqi>
    37a0:	04020e06 	.word	0x04020e06
    37a4:	2301      	movs	r3, #1
    37a6:	e002      	b.n	37ae <_dtoa_r+0x23e>
    37a8:	2301      	movs	r3, #1
    37aa:	e008      	b.n	37be <_dtoa_r+0x24e>
    37ac:	2300      	movs	r3, #0
    37ae:	9310      	str	r3, [sp, #64]	; 0x40
    37b0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    37b2:	2b00      	cmp	r3, #0
    37b4:	dd20      	ble.n	37f8 <_dtoa_r+0x288>
    37b6:	001f      	movs	r7, r3
    37b8:	930a      	str	r3, [sp, #40]	; 0x28
    37ba:	e021      	b.n	3800 <_dtoa_r+0x290>
    37bc:	2300      	movs	r3, #0
    37be:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    37c0:	9310      	str	r3, [sp, #64]	; 0x40
    37c2:	9b03      	ldr	r3, [sp, #12]
    37c4:	189f      	adds	r7, r3, r2
    37c6:	1c7b      	adds	r3, r7, #1
    37c8:	930a      	str	r3, [sp, #40]	; 0x28
    37ca:	2301      	movs	r3, #1
    37cc:	18fa      	adds	r2, r7, r3
    37ce:	2a00      	cmp	r2, #0
    37d0:	dd16      	ble.n	3800 <_dtoa_r+0x290>
    37d2:	0013      	movs	r3, r2
    37d4:	e014      	b.n	3800 <_dtoa_r+0x290>
    37d6:	2701      	movs	r7, #1
    37d8:	2300      	movs	r3, #0
    37da:	427f      	negs	r7, r7
    37dc:	9322      	str	r3, [sp, #136]	; 0x88
    37de:	9510      	str	r5, [sp, #64]	; 0x40
    37e0:	970a      	str	r7, [sp, #40]	; 0x28
    37e2:	3312      	adds	r3, #18
    37e4:	e005      	b.n	37f2 <_dtoa_r+0x282>
    37e6:	2701      	movs	r7, #1
    37e8:	2301      	movs	r3, #1
    37ea:	427f      	negs	r7, r7
    37ec:	9310      	str	r3, [sp, #64]	; 0x40
    37ee:	970a      	str	r7, [sp, #40]	; 0x28
    37f0:	3311      	adds	r3, #17
    37f2:	2200      	movs	r2, #0
    37f4:	9223      	str	r2, [sp, #140]	; 0x8c
    37f6:	e003      	b.n	3800 <_dtoa_r+0x290>
    37f8:	2701      	movs	r7, #1
    37fa:	003b      	movs	r3, r7
    37fc:	970a      	str	r7, [sp, #40]	; 0x28
    37fe:	9723      	str	r7, [sp, #140]	; 0x8c
    3800:	9a04      	ldr	r2, [sp, #16]
    3802:	6a54      	ldr	r4, [r2, #36]	; 0x24
    3804:	2200      	movs	r2, #0
    3806:	6062      	str	r2, [r4, #4]
    3808:	3204      	adds	r2, #4
    380a:	0011      	movs	r1, r2
    380c:	3114      	adds	r1, #20
    380e:	4299      	cmp	r1, r3
    3810:	d804      	bhi.n	381c <_dtoa_r+0x2ac>
    3812:	6861      	ldr	r1, [r4, #4]
    3814:	0052      	lsls	r2, r2, #1
    3816:	3101      	adds	r1, #1
    3818:	6061      	str	r1, [r4, #4]
    381a:	e7f6      	b.n	380a <_dtoa_r+0x29a>
    381c:	6861      	ldr	r1, [r4, #4]
    381e:	9804      	ldr	r0, [sp, #16]
    3820:	f000 fe71 	bl	4506 <_Balloc>
    3824:	9b04      	ldr	r3, [sp, #16]
    3826:	6020      	str	r0, [r4, #0]
    3828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    382a:	681b      	ldr	r3, [r3, #0]
    382c:	930d      	str	r3, [sp, #52]	; 0x34
    382e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3830:	2b0e      	cmp	r3, #14
    3832:	d900      	bls.n	3836 <_dtoa_r+0x2c6>
    3834:	e181      	b.n	3b3a <_dtoa_r+0x5ca>
    3836:	2d00      	cmp	r5, #0
    3838:	d100      	bne.n	383c <_dtoa_r+0x2cc>
    383a:	e17e      	b.n	3b3a <_dtoa_r+0x5ca>
    383c:	9b06      	ldr	r3, [sp, #24]
    383e:	9c07      	ldr	r4, [sp, #28]
    3840:	9314      	str	r3, [sp, #80]	; 0x50
    3842:	9415      	str	r4, [sp, #84]	; 0x54
    3844:	9b03      	ldr	r3, [sp, #12]
    3846:	2b00      	cmp	r3, #0
    3848:	dd31      	ble.n	38ae <_dtoa_r+0x33e>
    384a:	220f      	movs	r2, #15
    384c:	493b      	ldr	r1, [pc, #236]	; (393c <_dtoa_r+0x3cc>)
    384e:	4013      	ands	r3, r2
    3850:	00db      	lsls	r3, r3, #3
    3852:	18cb      	adds	r3, r1, r3
    3854:	685c      	ldr	r4, [r3, #4]
    3856:	681b      	ldr	r3, [r3, #0]
    3858:	930e      	str	r3, [sp, #56]	; 0x38
    385a:	940f      	str	r4, [sp, #60]	; 0x3c
    385c:	9b03      	ldr	r3, [sp, #12]
    385e:	2402      	movs	r4, #2
    3860:	111d      	asrs	r5, r3, #4
    3862:	06eb      	lsls	r3, r5, #27
    3864:	d50a      	bpl.n	387c <_dtoa_r+0x30c>
    3866:	9814      	ldr	r0, [sp, #80]	; 0x50
    3868:	9915      	ldr	r1, [sp, #84]	; 0x54
    386a:	4b35      	ldr	r3, [pc, #212]	; (3940 <_dtoa_r+0x3d0>)
    386c:	4015      	ands	r5, r2
    386e:	6a1a      	ldr	r2, [r3, #32]
    3870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3872:	f002 f93d 	bl	5af0 <__aeabi_ddiv>
    3876:	9006      	str	r0, [sp, #24]
    3878:	9107      	str	r1, [sp, #28]
    387a:	3401      	adds	r4, #1
    387c:	4e30      	ldr	r6, [pc, #192]	; (3940 <_dtoa_r+0x3d0>)
    387e:	2d00      	cmp	r5, #0
    3880:	d00e      	beq.n	38a0 <_dtoa_r+0x330>
    3882:	2301      	movs	r3, #1
    3884:	421d      	tst	r5, r3
    3886:	d008      	beq.n	389a <_dtoa_r+0x32a>
    3888:	980e      	ldr	r0, [sp, #56]	; 0x38
    388a:	990f      	ldr	r1, [sp, #60]	; 0x3c
    388c:	18e4      	adds	r4, r4, r3
    388e:	6832      	ldr	r2, [r6, #0]
    3890:	6873      	ldr	r3, [r6, #4]
    3892:	f002 fd51 	bl	6338 <__aeabi_dmul>
    3896:	900e      	str	r0, [sp, #56]	; 0x38
    3898:	910f      	str	r1, [sp, #60]	; 0x3c
    389a:	106d      	asrs	r5, r5, #1
    389c:	3608      	adds	r6, #8
    389e:	e7ee      	b.n	387e <_dtoa_r+0x30e>
    38a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    38a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    38a4:	9806      	ldr	r0, [sp, #24]
    38a6:	9907      	ldr	r1, [sp, #28]
    38a8:	f002 f922 	bl	5af0 <__aeabi_ddiv>
    38ac:	e04c      	b.n	3948 <_dtoa_r+0x3d8>
    38ae:	9b03      	ldr	r3, [sp, #12]
    38b0:	2402      	movs	r4, #2
    38b2:	425d      	negs	r5, r3
    38b4:	2d00      	cmp	r5, #0
    38b6:	d049      	beq.n	394c <_dtoa_r+0x3dc>
    38b8:	9814      	ldr	r0, [sp, #80]	; 0x50
    38ba:	9915      	ldr	r1, [sp, #84]	; 0x54
    38bc:	230f      	movs	r3, #15
    38be:	4a1f      	ldr	r2, [pc, #124]	; (393c <_dtoa_r+0x3cc>)
    38c0:	402b      	ands	r3, r5
    38c2:	00db      	lsls	r3, r3, #3
    38c4:	18d3      	adds	r3, r2, r3
    38c6:	681a      	ldr	r2, [r3, #0]
    38c8:	685b      	ldr	r3, [r3, #4]
    38ca:	f002 fd35 	bl	6338 <__aeabi_dmul>
    38ce:	2300      	movs	r3, #0
    38d0:	9006      	str	r0, [sp, #24]
    38d2:	9107      	str	r1, [sp, #28]
    38d4:	4e1a      	ldr	r6, [pc, #104]	; (3940 <_dtoa_r+0x3d0>)
    38d6:	112d      	asrs	r5, r5, #4
    38d8:	2d00      	cmp	r5, #0
    38da:	d033      	beq.n	3944 <_dtoa_r+0x3d4>
    38dc:	2201      	movs	r2, #1
    38de:	4215      	tst	r5, r2
    38e0:	d005      	beq.n	38ee <_dtoa_r+0x37e>
    38e2:	18a4      	adds	r4, r4, r2
    38e4:	6832      	ldr	r2, [r6, #0]
    38e6:	6873      	ldr	r3, [r6, #4]
    38e8:	f002 fd26 	bl	6338 <__aeabi_dmul>
    38ec:	2301      	movs	r3, #1
    38ee:	106d      	asrs	r5, r5, #1
    38f0:	3608      	adds	r6, #8
    38f2:	e7f1      	b.n	38d8 <_dtoa_r+0x368>
    38f4:	7ff00000 	.word	0x7ff00000
    38f8:	0000270f 	.word	0x0000270f
    38fc:	00007201 	.word	0x00007201
    3900:	000071f8 	.word	0x000071f8
    3904:	000071d4 	.word	0x000071d4
    3908:	000071d5 	.word	0x000071d5
    390c:	3ff00000 	.word	0x3ff00000
    3910:	fffffc01 	.word	0xfffffc01
    3914:	00000432 	.word	0x00000432
    3918:	00000412 	.word	0x00000412
    391c:	fe100000 	.word	0xfe100000
    3920:	3ff80000 	.word	0x3ff80000
    3924:	636f4361 	.word	0x636f4361
    3928:	3fd287a7 	.word	0x3fd287a7
    392c:	8b60c8b3 	.word	0x8b60c8b3
    3930:	3fc68a28 	.word	0x3fc68a28
    3934:	509f79fb 	.word	0x509f79fb
    3938:	3fd34413 	.word	0x3fd34413
    393c:	00007270 	.word	0x00007270
    3940:	00007338 	.word	0x00007338
    3944:	2b00      	cmp	r3, #0
    3946:	d001      	beq.n	394c <_dtoa_r+0x3dc>
    3948:	9006      	str	r0, [sp, #24]
    394a:	9107      	str	r1, [sp, #28]
    394c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    394e:	2b00      	cmp	r3, #0
    3950:	d01d      	beq.n	398e <_dtoa_r+0x41e>
    3952:	9d06      	ldr	r5, [sp, #24]
    3954:	9e07      	ldr	r6, [sp, #28]
    3956:	2200      	movs	r2, #0
    3958:	4bc7      	ldr	r3, [pc, #796]	; (3c78 <_dtoa_r+0x708>)
    395a:	0028      	movs	r0, r5
    395c:	0031      	movs	r1, r6
    395e:	f001 fd47 	bl	53f0 <__aeabi_dcmplt>
    3962:	2800      	cmp	r0, #0
    3964:	d013      	beq.n	398e <_dtoa_r+0x41e>
    3966:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3968:	2b00      	cmp	r3, #0
    396a:	d010      	beq.n	398e <_dtoa_r+0x41e>
    396c:	2f00      	cmp	r7, #0
    396e:	dc00      	bgt.n	3972 <_dtoa_r+0x402>
    3970:	e0df      	b.n	3b32 <_dtoa_r+0x5c2>
    3972:	9b03      	ldr	r3, [sp, #12]
    3974:	0031      	movs	r1, r6
    3976:	3b01      	subs	r3, #1
    3978:	930e      	str	r3, [sp, #56]	; 0x38
    397a:	2200      	movs	r2, #0
    397c:	4bbf      	ldr	r3, [pc, #764]	; (3c7c <_dtoa_r+0x70c>)
    397e:	0028      	movs	r0, r5
    3980:	f002 fcda 	bl	6338 <__aeabi_dmul>
    3984:	3401      	adds	r4, #1
    3986:	9006      	str	r0, [sp, #24]
    3988:	9107      	str	r1, [sp, #28]
    398a:	003e      	movs	r6, r7
    398c:	e002      	b.n	3994 <_dtoa_r+0x424>
    398e:	9b03      	ldr	r3, [sp, #12]
    3990:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    3992:	930e      	str	r3, [sp, #56]	; 0x38
    3994:	0020      	movs	r0, r4
    3996:	f003 faf3 	bl	6f80 <__aeabi_i2d>
    399a:	9a06      	ldr	r2, [sp, #24]
    399c:	9b07      	ldr	r3, [sp, #28]
    399e:	f002 fccb 	bl	6338 <__aeabi_dmul>
    39a2:	2200      	movs	r2, #0
    39a4:	4bb6      	ldr	r3, [pc, #728]	; (3c80 <_dtoa_r+0x710>)
    39a6:	f001 fd77 	bl	5498 <__aeabi_dadd>
    39aa:	4ab6      	ldr	r2, [pc, #728]	; (3c84 <_dtoa_r+0x714>)
    39ac:	9012      	str	r0, [sp, #72]	; 0x48
    39ae:	9113      	str	r1, [sp, #76]	; 0x4c
    39b0:	9c12      	ldr	r4, [sp, #72]	; 0x48
    39b2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
    39b4:	4694      	mov	ip, r2
    39b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    39b8:	4463      	add	r3, ip
    39ba:	9318      	str	r3, [sp, #96]	; 0x60
    39bc:	001d      	movs	r5, r3
    39be:	2e00      	cmp	r6, #0
    39c0:	d11c      	bne.n	39fc <_dtoa_r+0x48c>
    39c2:	9806      	ldr	r0, [sp, #24]
    39c4:	9907      	ldr	r1, [sp, #28]
    39c6:	2200      	movs	r2, #0
    39c8:	4baf      	ldr	r3, [pc, #700]	; (3c88 <_dtoa_r+0x718>)
    39ca:	f002 ff2f 	bl	682c <__aeabi_dsub>
    39ce:	0022      	movs	r2, r4
    39d0:	9b18      	ldr	r3, [sp, #96]	; 0x60
    39d2:	9006      	str	r0, [sp, #24]
    39d4:	9107      	str	r1, [sp, #28]
    39d6:	f001 fd1f 	bl	5418 <__aeabi_dcmpgt>
    39da:	2800      	cmp	r0, #0
    39dc:	d000      	beq.n	39e0 <_dtoa_r+0x470>
    39de:	e254      	b.n	3e8a <_dtoa_r+0x91a>
    39e0:	48aa      	ldr	r0, [pc, #680]	; (3c8c <_dtoa_r+0x71c>)
    39e2:	9913      	ldr	r1, [sp, #76]	; 0x4c
    39e4:	4684      	mov	ip, r0
    39e6:	4461      	add	r1, ip
    39e8:	000b      	movs	r3, r1
    39ea:	9806      	ldr	r0, [sp, #24]
    39ec:	9907      	ldr	r1, [sp, #28]
    39ee:	0022      	movs	r2, r4
    39f0:	f001 fcfe 	bl	53f0 <__aeabi_dcmplt>
    39f4:	2800      	cmp	r0, #0
    39f6:	d000      	beq.n	39fa <_dtoa_r+0x48a>
    39f8:	e23d      	b.n	3e76 <_dtoa_r+0x906>
    39fa:	e09a      	b.n	3b32 <_dtoa_r+0x5c2>
    39fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
    39fe:	1e73      	subs	r3, r6, #1
    3a00:	49a3      	ldr	r1, [pc, #652]	; (3c90 <_dtoa_r+0x720>)
    3a02:	00db      	lsls	r3, r3, #3
    3a04:	2a00      	cmp	r2, #0
    3a06:	d049      	beq.n	3a9c <_dtoa_r+0x52c>
    3a08:	18cb      	adds	r3, r1, r3
    3a0a:	681a      	ldr	r2, [r3, #0]
    3a0c:	685b      	ldr	r3, [r3, #4]
    3a0e:	2000      	movs	r0, #0
    3a10:	49a0      	ldr	r1, [pc, #640]	; (3c94 <_dtoa_r+0x724>)
    3a12:	f002 f86d 	bl	5af0 <__aeabi_ddiv>
    3a16:	002b      	movs	r3, r5
    3a18:	0022      	movs	r2, r4
    3a1a:	f002 ff07 	bl	682c <__aeabi_dsub>
    3a1e:	9012      	str	r0, [sp, #72]	; 0x48
    3a20:	9113      	str	r1, [sp, #76]	; 0x4c
    3a22:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    3a24:	9806      	ldr	r0, [sp, #24]
    3a26:	9907      	ldr	r1, [sp, #28]
    3a28:	f003 fa74 	bl	6f14 <__aeabi_d2iz>
    3a2c:	0004      	movs	r4, r0
    3a2e:	f003 faa7 	bl	6f80 <__aeabi_i2d>
    3a32:	0002      	movs	r2, r0
    3a34:	000b      	movs	r3, r1
    3a36:	9806      	ldr	r0, [sp, #24]
    3a38:	9907      	ldr	r1, [sp, #28]
    3a3a:	f002 fef7 	bl	682c <__aeabi_dsub>
    3a3e:	3501      	adds	r5, #1
    3a40:	1e6b      	subs	r3, r5, #1
    3a42:	3430      	adds	r4, #48	; 0x30
    3a44:	701c      	strb	r4, [r3, #0]
    3a46:	9a12      	ldr	r2, [sp, #72]	; 0x48
    3a48:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    3a4a:	9006      	str	r0, [sp, #24]
    3a4c:	9107      	str	r1, [sp, #28]
    3a4e:	f001 fccf 	bl	53f0 <__aeabi_dcmplt>
    3a52:	2800      	cmp	r0, #0
    3a54:	d000      	beq.n	3a58 <_dtoa_r+0x4e8>
    3a56:	e32e      	b.n	40b6 <_dtoa_r+0xb46>
    3a58:	9a06      	ldr	r2, [sp, #24]
    3a5a:	9b07      	ldr	r3, [sp, #28]
    3a5c:	2000      	movs	r0, #0
    3a5e:	4986      	ldr	r1, [pc, #536]	; (3c78 <_dtoa_r+0x708>)
    3a60:	f002 fee4 	bl	682c <__aeabi_dsub>
    3a64:	9a12      	ldr	r2, [sp, #72]	; 0x48
    3a66:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    3a68:	f001 fcc2 	bl	53f0 <__aeabi_dcmplt>
    3a6c:	2800      	cmp	r0, #0
    3a6e:	d000      	beq.n	3a72 <_dtoa_r+0x502>
    3a70:	e0c7      	b.n	3c02 <_dtoa_r+0x692>
    3a72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3a74:	1aeb      	subs	r3, r5, r3
    3a76:	42b3      	cmp	r3, r6
    3a78:	da5b      	bge.n	3b32 <_dtoa_r+0x5c2>
    3a7a:	9812      	ldr	r0, [sp, #72]	; 0x48
    3a7c:	9913      	ldr	r1, [sp, #76]	; 0x4c
    3a7e:	2200      	movs	r2, #0
    3a80:	4b7e      	ldr	r3, [pc, #504]	; (3c7c <_dtoa_r+0x70c>)
    3a82:	f002 fc59 	bl	6338 <__aeabi_dmul>
    3a86:	2200      	movs	r2, #0
    3a88:	9012      	str	r0, [sp, #72]	; 0x48
    3a8a:	9113      	str	r1, [sp, #76]	; 0x4c
    3a8c:	9806      	ldr	r0, [sp, #24]
    3a8e:	9907      	ldr	r1, [sp, #28]
    3a90:	4b7a      	ldr	r3, [pc, #488]	; (3c7c <_dtoa_r+0x70c>)
    3a92:	f002 fc51 	bl	6338 <__aeabi_dmul>
    3a96:	9006      	str	r0, [sp, #24]
    3a98:	9107      	str	r1, [sp, #28]
    3a9a:	e7c3      	b.n	3a24 <_dtoa_r+0x4b4>
    3a9c:	18c9      	adds	r1, r1, r3
    3a9e:	0022      	movs	r2, r4
    3aa0:	6808      	ldr	r0, [r1, #0]
    3aa2:	6849      	ldr	r1, [r1, #4]
    3aa4:	002b      	movs	r3, r5
    3aa6:	f002 fc47 	bl	6338 <__aeabi_dmul>
    3aaa:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    3aac:	9012      	str	r0, [sp, #72]	; 0x48
    3aae:	9113      	str	r1, [sp, #76]	; 0x4c
    3ab0:	19a5      	adds	r5, r4, r6
    3ab2:	9806      	ldr	r0, [sp, #24]
    3ab4:	9907      	ldr	r1, [sp, #28]
    3ab6:	f003 fa2d 	bl	6f14 <__aeabi_d2iz>
    3aba:	0006      	movs	r6, r0
    3abc:	f003 fa60 	bl	6f80 <__aeabi_i2d>
    3ac0:	0002      	movs	r2, r0
    3ac2:	000b      	movs	r3, r1
    3ac4:	9806      	ldr	r0, [sp, #24]
    3ac6:	9907      	ldr	r1, [sp, #28]
    3ac8:	f002 feb0 	bl	682c <__aeabi_dsub>
    3acc:	3630      	adds	r6, #48	; 0x30
    3ace:	7026      	strb	r6, [r4, #0]
    3ad0:	3401      	adds	r4, #1
    3ad2:	9006      	str	r0, [sp, #24]
    3ad4:	9107      	str	r1, [sp, #28]
    3ad6:	2200      	movs	r2, #0
    3ad8:	42a5      	cmp	r5, r4
    3ada:	d122      	bne.n	3b22 <_dtoa_r+0x5b2>
    3adc:	4b6d      	ldr	r3, [pc, #436]	; (3c94 <_dtoa_r+0x724>)
    3ade:	9812      	ldr	r0, [sp, #72]	; 0x48
    3ae0:	9913      	ldr	r1, [sp, #76]	; 0x4c
    3ae2:	f001 fcd9 	bl	5498 <__aeabi_dadd>
    3ae6:	0002      	movs	r2, r0
    3ae8:	000b      	movs	r3, r1
    3aea:	9806      	ldr	r0, [sp, #24]
    3aec:	9907      	ldr	r1, [sp, #28]
    3aee:	f001 fc93 	bl	5418 <__aeabi_dcmpgt>
    3af2:	2800      	cmp	r0, #0
    3af4:	d000      	beq.n	3af8 <_dtoa_r+0x588>
    3af6:	e084      	b.n	3c02 <_dtoa_r+0x692>
    3af8:	9a12      	ldr	r2, [sp, #72]	; 0x48
    3afa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    3afc:	2000      	movs	r0, #0
    3afe:	4965      	ldr	r1, [pc, #404]	; (3c94 <_dtoa_r+0x724>)
    3b00:	f002 fe94 	bl	682c <__aeabi_dsub>
    3b04:	0002      	movs	r2, r0
    3b06:	000b      	movs	r3, r1
    3b08:	9806      	ldr	r0, [sp, #24]
    3b0a:	9907      	ldr	r1, [sp, #28]
    3b0c:	f001 fc70 	bl	53f0 <__aeabi_dcmplt>
    3b10:	2800      	cmp	r0, #0
    3b12:	d00e      	beq.n	3b32 <_dtoa_r+0x5c2>
    3b14:	1e6b      	subs	r3, r5, #1
    3b16:	781a      	ldrb	r2, [r3, #0]
    3b18:	2a30      	cmp	r2, #48	; 0x30
    3b1a:	d000      	beq.n	3b1e <_dtoa_r+0x5ae>
    3b1c:	e2cb      	b.n	40b6 <_dtoa_r+0xb46>
    3b1e:	001d      	movs	r5, r3
    3b20:	e7f8      	b.n	3b14 <_dtoa_r+0x5a4>
    3b22:	9806      	ldr	r0, [sp, #24]
    3b24:	9907      	ldr	r1, [sp, #28]
    3b26:	4b55      	ldr	r3, [pc, #340]	; (3c7c <_dtoa_r+0x70c>)
    3b28:	f002 fc06 	bl	6338 <__aeabi_dmul>
    3b2c:	9006      	str	r0, [sp, #24]
    3b2e:	9107      	str	r1, [sp, #28]
    3b30:	e7bf      	b.n	3ab2 <_dtoa_r+0x542>
    3b32:	9b14      	ldr	r3, [sp, #80]	; 0x50
    3b34:	9c15      	ldr	r4, [sp, #84]	; 0x54
    3b36:	9306      	str	r3, [sp, #24]
    3b38:	9407      	str	r4, [sp, #28]
    3b3a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    3b3c:	2b00      	cmp	r3, #0
    3b3e:	da00      	bge.n	3b42 <_dtoa_r+0x5d2>
    3b40:	e081      	b.n	3c46 <_dtoa_r+0x6d6>
    3b42:	9a03      	ldr	r2, [sp, #12]
    3b44:	2a0e      	cmp	r2, #14
    3b46:	dd00      	ble.n	3b4a <_dtoa_r+0x5da>
    3b48:	e07d      	b.n	3c46 <_dtoa_r+0x6d6>
    3b4a:	00d3      	lsls	r3, r2, #3
    3b4c:	4a50      	ldr	r2, [pc, #320]	; (3c90 <_dtoa_r+0x720>)
    3b4e:	18d3      	adds	r3, r2, r3
    3b50:	685c      	ldr	r4, [r3, #4]
    3b52:	681b      	ldr	r3, [r3, #0]
    3b54:	9308      	str	r3, [sp, #32]
    3b56:	9409      	str	r4, [sp, #36]	; 0x24
    3b58:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    3b5a:	2b00      	cmp	r3, #0
    3b5c:	da15      	bge.n	3b8a <_dtoa_r+0x61a>
    3b5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3b60:	2b00      	cmp	r3, #0
    3b62:	dc12      	bgt.n	3b8a <_dtoa_r+0x61a>
    3b64:	d000      	beq.n	3b68 <_dtoa_r+0x5f8>
    3b66:	e188      	b.n	3e7a <_dtoa_r+0x90a>
    3b68:	9808      	ldr	r0, [sp, #32]
    3b6a:	9909      	ldr	r1, [sp, #36]	; 0x24
    3b6c:	2200      	movs	r2, #0
    3b6e:	4b46      	ldr	r3, [pc, #280]	; (3c88 <_dtoa_r+0x718>)
    3b70:	f002 fbe2 	bl	6338 <__aeabi_dmul>
    3b74:	9a06      	ldr	r2, [sp, #24]
    3b76:	9b07      	ldr	r3, [sp, #28]
    3b78:	f001 fc58 	bl	542c <__aeabi_dcmpge>
    3b7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3b7e:	9308      	str	r3, [sp, #32]
    3b80:	001e      	movs	r6, r3
    3b82:	2800      	cmp	r0, #0
    3b84:	d000      	beq.n	3b88 <_dtoa_r+0x618>
    3b86:	e17b      	b.n	3e80 <_dtoa_r+0x910>
    3b88:	e182      	b.n	3e90 <_dtoa_r+0x920>
    3b8a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    3b8c:	9e06      	ldr	r6, [sp, #24]
    3b8e:	9f07      	ldr	r7, [sp, #28]
    3b90:	9a08      	ldr	r2, [sp, #32]
    3b92:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3b94:	0030      	movs	r0, r6
    3b96:	0039      	movs	r1, r7
    3b98:	f001 ffaa 	bl	5af0 <__aeabi_ddiv>
    3b9c:	f003 f9ba 	bl	6f14 <__aeabi_d2iz>
    3ba0:	0004      	movs	r4, r0
    3ba2:	f003 f9ed 	bl	6f80 <__aeabi_i2d>
    3ba6:	9a08      	ldr	r2, [sp, #32]
    3ba8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3baa:	f002 fbc5 	bl	6338 <__aeabi_dmul>
    3bae:	0002      	movs	r2, r0
    3bb0:	000b      	movs	r3, r1
    3bb2:	0030      	movs	r0, r6
    3bb4:	0039      	movs	r1, r7
    3bb6:	f002 fe39 	bl	682c <__aeabi_dsub>
    3bba:	0022      	movs	r2, r4
    3bbc:	3501      	adds	r5, #1
    3bbe:	1e6b      	subs	r3, r5, #1
    3bc0:	3230      	adds	r2, #48	; 0x30
    3bc2:	701a      	strb	r2, [r3, #0]
    3bc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3bc6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3bc8:	1aeb      	subs	r3, r5, r3
    3bca:	429a      	cmp	r2, r3
    3bcc:	d12e      	bne.n	3c2c <_dtoa_r+0x6bc>
    3bce:	0002      	movs	r2, r0
    3bd0:	000b      	movs	r3, r1
    3bd2:	f001 fc61 	bl	5498 <__aeabi_dadd>
    3bd6:	0006      	movs	r6, r0
    3bd8:	000f      	movs	r7, r1
    3bda:	0002      	movs	r2, r0
    3bdc:	000b      	movs	r3, r1
    3bde:	9808      	ldr	r0, [sp, #32]
    3be0:	9909      	ldr	r1, [sp, #36]	; 0x24
    3be2:	f001 fc05 	bl	53f0 <__aeabi_dcmplt>
    3be6:	2800      	cmp	r0, #0
    3be8:	d10f      	bne.n	3c0a <_dtoa_r+0x69a>
    3bea:	9808      	ldr	r0, [sp, #32]
    3bec:	9909      	ldr	r1, [sp, #36]	; 0x24
    3bee:	0032      	movs	r2, r6
    3bf0:	003b      	movs	r3, r7
    3bf2:	f001 fbf7 	bl	53e4 <__aeabi_dcmpeq>
    3bf6:	2800      	cmp	r0, #0
    3bf8:	d100      	bne.n	3bfc <_dtoa_r+0x68c>
    3bfa:	e25e      	b.n	40ba <_dtoa_r+0xb4a>
    3bfc:	07e3      	lsls	r3, r4, #31
    3bfe:	d404      	bmi.n	3c0a <_dtoa_r+0x69a>
    3c00:	e25b      	b.n	40ba <_dtoa_r+0xb4a>
    3c02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    3c04:	9303      	str	r3, [sp, #12]
    3c06:	e000      	b.n	3c0a <_dtoa_r+0x69a>
    3c08:	001d      	movs	r5, r3
    3c0a:	1e6b      	subs	r3, r5, #1
    3c0c:	781a      	ldrb	r2, [r3, #0]
    3c0e:	2a39      	cmp	r2, #57	; 0x39
    3c10:	d108      	bne.n	3c24 <_dtoa_r+0x6b4>
    3c12:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    3c14:	429a      	cmp	r2, r3
    3c16:	d1f7      	bne.n	3c08 <_dtoa_r+0x698>
    3c18:	9a03      	ldr	r2, [sp, #12]
    3c1a:	990d      	ldr	r1, [sp, #52]	; 0x34
    3c1c:	3201      	adds	r2, #1
    3c1e:	9203      	str	r2, [sp, #12]
    3c20:	2230      	movs	r2, #48	; 0x30
    3c22:	700a      	strb	r2, [r1, #0]
    3c24:	781a      	ldrb	r2, [r3, #0]
    3c26:	3201      	adds	r2, #1
    3c28:	701a      	strb	r2, [r3, #0]
    3c2a:	e246      	b.n	40ba <_dtoa_r+0xb4a>
    3c2c:	2200      	movs	r2, #0
    3c2e:	4b13      	ldr	r3, [pc, #76]	; (3c7c <_dtoa_r+0x70c>)
    3c30:	f002 fb82 	bl	6338 <__aeabi_dmul>
    3c34:	2200      	movs	r2, #0
    3c36:	2300      	movs	r3, #0
    3c38:	0006      	movs	r6, r0
    3c3a:	000f      	movs	r7, r1
    3c3c:	f001 fbd2 	bl	53e4 <__aeabi_dcmpeq>
    3c40:	2800      	cmp	r0, #0
    3c42:	d0a5      	beq.n	3b90 <_dtoa_r+0x620>
    3c44:	e239      	b.n	40ba <_dtoa_r+0xb4a>
    3c46:	9a10      	ldr	r2, [sp, #64]	; 0x40
    3c48:	2a00      	cmp	r2, #0
    3c4a:	d044      	beq.n	3cd6 <_dtoa_r+0x766>
    3c4c:	9a22      	ldr	r2, [sp, #136]	; 0x88
    3c4e:	2a01      	cmp	r2, #1
    3c50:	dc0b      	bgt.n	3c6a <_dtoa_r+0x6fa>
    3c52:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    3c54:	2a00      	cmp	r2, #0
    3c56:	d002      	beq.n	3c5e <_dtoa_r+0x6ee>
    3c58:	4a0f      	ldr	r2, [pc, #60]	; (3c98 <_dtoa_r+0x728>)
    3c5a:	189b      	adds	r3, r3, r2
    3c5c:	e002      	b.n	3c64 <_dtoa_r+0x6f4>
    3c5e:	2336      	movs	r3, #54	; 0x36
    3c60:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    3c62:	1a9b      	subs	r3, r3, r2
    3c64:	9d08      	ldr	r5, [sp, #32]
    3c66:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    3c68:	e029      	b.n	3cbe <_dtoa_r+0x74e>
    3c6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3c6c:	1e5d      	subs	r5, r3, #1
    3c6e:	9b08      	ldr	r3, [sp, #32]
    3c70:	42ab      	cmp	r3, r5
    3c72:	db13      	blt.n	3c9c <_dtoa_r+0x72c>
    3c74:	1b5d      	subs	r5, r3, r5
    3c76:	e018      	b.n	3caa <_dtoa_r+0x73a>
    3c78:	3ff00000 	.word	0x3ff00000
    3c7c:	40240000 	.word	0x40240000
    3c80:	401c0000 	.word	0x401c0000
    3c84:	fcc00000 	.word	0xfcc00000
    3c88:	40140000 	.word	0x40140000
    3c8c:	7cc00000 	.word	0x7cc00000
    3c90:	00007270 	.word	0x00007270
    3c94:	3fe00000 	.word	0x3fe00000
    3c98:	00000433 	.word	0x00000433
    3c9c:	9b08      	ldr	r3, [sp, #32]
    3c9e:	9508      	str	r5, [sp, #32]
    3ca0:	1aea      	subs	r2, r5, r3
    3ca2:	2500      	movs	r5, #0
    3ca4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3ca6:	189b      	adds	r3, r3, r2
    3ca8:	9311      	str	r3, [sp, #68]	; 0x44
    3caa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3cac:	2b00      	cmp	r3, #0
    3cae:	da04      	bge.n	3cba <_dtoa_r+0x74a>
    3cb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3cb2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3cb4:	1a9c      	subs	r4, r3, r2
    3cb6:	2300      	movs	r3, #0
    3cb8:	e001      	b.n	3cbe <_dtoa_r+0x74e>
    3cba:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    3cbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3cbe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    3cc0:	2101      	movs	r1, #1
    3cc2:	18d2      	adds	r2, r2, r3
    3cc4:	920b      	str	r2, [sp, #44]	; 0x2c
    3cc6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    3cc8:	9804      	ldr	r0, [sp, #16]
    3cca:	18d3      	adds	r3, r2, r3
    3ccc:	930c      	str	r3, [sp, #48]	; 0x30
    3cce:	f000 fcf2 	bl	46b6 <__i2b>
    3cd2:	0006      	movs	r6, r0
    3cd4:	e002      	b.n	3cdc <_dtoa_r+0x76c>
    3cd6:	9d08      	ldr	r5, [sp, #32]
    3cd8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    3cda:	9e10      	ldr	r6, [sp, #64]	; 0x40
    3cdc:	2c00      	cmp	r4, #0
    3cde:	d00e      	beq.n	3cfe <_dtoa_r+0x78e>
    3ce0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3ce2:	2b00      	cmp	r3, #0
    3ce4:	dd0b      	ble.n	3cfe <_dtoa_r+0x78e>
    3ce6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    3ce8:	1e23      	subs	r3, r4, #0
    3cea:	4293      	cmp	r3, r2
    3cec:	dd00      	ble.n	3cf0 <_dtoa_r+0x780>
    3cee:	0013      	movs	r3, r2
    3cf0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    3cf2:	1ae4      	subs	r4, r4, r3
    3cf4:	1ad2      	subs	r2, r2, r3
    3cf6:	920b      	str	r2, [sp, #44]	; 0x2c
    3cf8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    3cfa:	1ad3      	subs	r3, r2, r3
    3cfc:	930c      	str	r3, [sp, #48]	; 0x30
    3cfe:	9b08      	ldr	r3, [sp, #32]
    3d00:	2b00      	cmp	r3, #0
    3d02:	dd20      	ble.n	3d46 <_dtoa_r+0x7d6>
    3d04:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3d06:	2b00      	cmp	r3, #0
    3d08:	d017      	beq.n	3d3a <_dtoa_r+0x7ca>
    3d0a:	2d00      	cmp	r5, #0
    3d0c:	d011      	beq.n	3d32 <_dtoa_r+0x7c2>
    3d0e:	0031      	movs	r1, r6
    3d10:	002a      	movs	r2, r5
    3d12:	9804      	ldr	r0, [sp, #16]
    3d14:	f000 fd62 	bl	47dc <__pow5mult>
    3d18:	9a05      	ldr	r2, [sp, #20]
    3d1a:	0001      	movs	r1, r0
    3d1c:	0006      	movs	r6, r0
    3d1e:	9804      	ldr	r0, [sp, #16]
    3d20:	f000 fcd2 	bl	46c8 <__multiply>
    3d24:	9905      	ldr	r1, [sp, #20]
    3d26:	900e      	str	r0, [sp, #56]	; 0x38
    3d28:	9804      	ldr	r0, [sp, #16]
    3d2a:	f000 fc24 	bl	4576 <_Bfree>
    3d2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    3d30:	9305      	str	r3, [sp, #20]
    3d32:	9b08      	ldr	r3, [sp, #32]
    3d34:	1b5a      	subs	r2, r3, r5
    3d36:	d006      	beq.n	3d46 <_dtoa_r+0x7d6>
    3d38:	e000      	b.n	3d3c <_dtoa_r+0x7cc>
    3d3a:	9a08      	ldr	r2, [sp, #32]
    3d3c:	9905      	ldr	r1, [sp, #20]
    3d3e:	9804      	ldr	r0, [sp, #16]
    3d40:	f000 fd4c 	bl	47dc <__pow5mult>
    3d44:	9005      	str	r0, [sp, #20]
    3d46:	2101      	movs	r1, #1
    3d48:	9804      	ldr	r0, [sp, #16]
    3d4a:	f000 fcb4 	bl	46b6 <__i2b>
    3d4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3d50:	9008      	str	r0, [sp, #32]
    3d52:	2b00      	cmp	r3, #0
    3d54:	d100      	bne.n	3d58 <_dtoa_r+0x7e8>
    3d56:	e1c0      	b.n	40da <_dtoa_r+0xb6a>
    3d58:	001a      	movs	r2, r3
    3d5a:	0001      	movs	r1, r0
    3d5c:	9804      	ldr	r0, [sp, #16]
    3d5e:	f000 fd3d 	bl	47dc <__pow5mult>
    3d62:	9b22      	ldr	r3, [sp, #136]	; 0x88
    3d64:	9008      	str	r0, [sp, #32]
    3d66:	2b01      	cmp	r3, #1
    3d68:	dc17      	bgt.n	3d9a <_dtoa_r+0x82a>
    3d6a:	2500      	movs	r5, #0
    3d6c:	9b06      	ldr	r3, [sp, #24]
    3d6e:	42ab      	cmp	r3, r5
    3d70:	d10e      	bne.n	3d90 <_dtoa_r+0x820>
    3d72:	9b07      	ldr	r3, [sp, #28]
    3d74:	031b      	lsls	r3, r3, #12
    3d76:	42ab      	cmp	r3, r5
    3d78:	d10a      	bne.n	3d90 <_dtoa_r+0x820>
    3d7a:	9b19      	ldr	r3, [sp, #100]	; 0x64
    3d7c:	9a07      	ldr	r2, [sp, #28]
    3d7e:	4213      	tst	r3, r2
    3d80:	d006      	beq.n	3d90 <_dtoa_r+0x820>
    3d82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3d84:	3501      	adds	r5, #1
    3d86:	3301      	adds	r3, #1
    3d88:	930b      	str	r3, [sp, #44]	; 0x2c
    3d8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3d8c:	3301      	adds	r3, #1
    3d8e:	930c      	str	r3, [sp, #48]	; 0x30
    3d90:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3d92:	2001      	movs	r0, #1
    3d94:	2b00      	cmp	r3, #0
    3d96:	d00d      	beq.n	3db4 <_dtoa_r+0x844>
    3d98:	e000      	b.n	3d9c <_dtoa_r+0x82c>
    3d9a:	2500      	movs	r5, #0
    3d9c:	9b08      	ldr	r3, [sp, #32]
    3d9e:	9a08      	ldr	r2, [sp, #32]
    3da0:	691b      	ldr	r3, [r3, #16]
    3da2:	930e      	str	r3, [sp, #56]	; 0x38
    3da4:	3303      	adds	r3, #3
    3da6:	009b      	lsls	r3, r3, #2
    3da8:	18d3      	adds	r3, r2, r3
    3daa:	6858      	ldr	r0, [r3, #4]
    3dac:	f000 fc39 	bl	4622 <__hi0bits>
    3db0:	2320      	movs	r3, #32
    3db2:	1a18      	subs	r0, r3, r0
    3db4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3db6:	18c0      	adds	r0, r0, r3
    3db8:	231f      	movs	r3, #31
    3dba:	4018      	ands	r0, r3
    3dbc:	d009      	beq.n	3dd2 <_dtoa_r+0x862>
    3dbe:	3301      	adds	r3, #1
    3dc0:	1a1b      	subs	r3, r3, r0
    3dc2:	2b04      	cmp	r3, #4
    3dc4:	dd02      	ble.n	3dcc <_dtoa_r+0x85c>
    3dc6:	231c      	movs	r3, #28
    3dc8:	1a18      	subs	r0, r3, r0
    3dca:	e003      	b.n	3dd4 <_dtoa_r+0x864>
    3dcc:	2b04      	cmp	r3, #4
    3dce:	d008      	beq.n	3de2 <_dtoa_r+0x872>
    3dd0:	0018      	movs	r0, r3
    3dd2:	301c      	adds	r0, #28
    3dd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3dd6:	1824      	adds	r4, r4, r0
    3dd8:	181b      	adds	r3, r3, r0
    3dda:	930b      	str	r3, [sp, #44]	; 0x2c
    3ddc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3dde:	181b      	adds	r3, r3, r0
    3de0:	930c      	str	r3, [sp, #48]	; 0x30
    3de2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3de4:	2b00      	cmp	r3, #0
    3de6:	dd05      	ble.n	3df4 <_dtoa_r+0x884>
    3de8:	001a      	movs	r2, r3
    3dea:	9905      	ldr	r1, [sp, #20]
    3dec:	9804      	ldr	r0, [sp, #16]
    3dee:	f000 fd49 	bl	4884 <__lshift>
    3df2:	9005      	str	r0, [sp, #20]
    3df4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3df6:	2b00      	cmp	r3, #0
    3df8:	dd05      	ble.n	3e06 <_dtoa_r+0x896>
    3dfa:	001a      	movs	r2, r3
    3dfc:	9908      	ldr	r1, [sp, #32]
    3dfe:	9804      	ldr	r0, [sp, #16]
    3e00:	f000 fd40 	bl	4884 <__lshift>
    3e04:	9008      	str	r0, [sp, #32]
    3e06:	9b16      	ldr	r3, [sp, #88]	; 0x58
    3e08:	2b00      	cmp	r3, #0
    3e0a:	d01d      	beq.n	3e48 <_dtoa_r+0x8d8>
    3e0c:	9908      	ldr	r1, [sp, #32]
    3e0e:	9805      	ldr	r0, [sp, #20]
    3e10:	f000 fd8a 	bl	4928 <__mcmp>
    3e14:	2800      	cmp	r0, #0
    3e16:	da17      	bge.n	3e48 <_dtoa_r+0x8d8>
    3e18:	9b03      	ldr	r3, [sp, #12]
    3e1a:	220a      	movs	r2, #10
    3e1c:	3b01      	subs	r3, #1
    3e1e:	9303      	str	r3, [sp, #12]
    3e20:	9905      	ldr	r1, [sp, #20]
    3e22:	2300      	movs	r3, #0
    3e24:	9804      	ldr	r0, [sp, #16]
    3e26:	f000 fbbf 	bl	45a8 <__multadd>
    3e2a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3e2c:	9005      	str	r0, [sp, #20]
    3e2e:	2b00      	cmp	r3, #0
    3e30:	d100      	bne.n	3e34 <_dtoa_r+0x8c4>
    3e32:	e159      	b.n	40e8 <_dtoa_r+0xb78>
    3e34:	0031      	movs	r1, r6
    3e36:	2300      	movs	r3, #0
    3e38:	220a      	movs	r2, #10
    3e3a:	9804      	ldr	r0, [sp, #16]
    3e3c:	f000 fbb4 	bl	45a8 <__multadd>
    3e40:	0006      	movs	r6, r0
    3e42:	2f00      	cmp	r7, #0
    3e44:	dc37      	bgt.n	3eb6 <_dtoa_r+0x946>
    3e46:	e033      	b.n	3eb0 <_dtoa_r+0x940>
    3e48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3e4a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    3e4c:	2b00      	cmp	r3, #0
    3e4e:	dc2a      	bgt.n	3ea6 <_dtoa_r+0x936>
    3e50:	9b22      	ldr	r3, [sp, #136]	; 0x88
    3e52:	2b02      	cmp	r3, #2
    3e54:	dd27      	ble.n	3ea6 <_dtoa_r+0x936>
    3e56:	2f00      	cmp	r7, #0
    3e58:	d112      	bne.n	3e80 <_dtoa_r+0x910>
    3e5a:	9908      	ldr	r1, [sp, #32]
    3e5c:	003b      	movs	r3, r7
    3e5e:	2205      	movs	r2, #5
    3e60:	9804      	ldr	r0, [sp, #16]
    3e62:	f000 fba1 	bl	45a8 <__multadd>
    3e66:	9008      	str	r0, [sp, #32]
    3e68:	0001      	movs	r1, r0
    3e6a:	9805      	ldr	r0, [sp, #20]
    3e6c:	f000 fd5c 	bl	4928 <__mcmp>
    3e70:	2800      	cmp	r0, #0
    3e72:	dc0d      	bgt.n	3e90 <_dtoa_r+0x920>
    3e74:	e004      	b.n	3e80 <_dtoa_r+0x910>
    3e76:	9608      	str	r6, [sp, #32]
    3e78:	e002      	b.n	3e80 <_dtoa_r+0x910>
    3e7a:	2300      	movs	r3, #0
    3e7c:	001e      	movs	r6, r3
    3e7e:	9308      	str	r3, [sp, #32]
    3e80:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    3e82:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    3e84:	43db      	mvns	r3, r3
    3e86:	9303      	str	r3, [sp, #12]
    3e88:	e00a      	b.n	3ea0 <_dtoa_r+0x930>
    3e8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    3e8c:	9608      	str	r6, [sp, #32]
    3e8e:	9303      	str	r3, [sp, #12]
    3e90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3e92:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    3e94:	1c5d      	adds	r5, r3, #1
    3e96:	2331      	movs	r3, #49	; 0x31
    3e98:	7013      	strb	r3, [r2, #0]
    3e9a:	9b03      	ldr	r3, [sp, #12]
    3e9c:	3301      	adds	r3, #1
    3e9e:	9303      	str	r3, [sp, #12]
    3ea0:	960a      	str	r6, [sp, #40]	; 0x28
    3ea2:	2600      	movs	r6, #0
    3ea4:	e0f3      	b.n	408e <_dtoa_r+0xb1e>
    3ea6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3ea8:	2b00      	cmp	r3, #0
    3eaa:	d104      	bne.n	3eb6 <_dtoa_r+0x946>
    3eac:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    3eae:	e0b5      	b.n	401c <_dtoa_r+0xaac>
    3eb0:	9b22      	ldr	r3, [sp, #136]	; 0x88
    3eb2:	2b02      	cmp	r3, #2
    3eb4:	dccf      	bgt.n	3e56 <_dtoa_r+0x8e6>
    3eb6:	2c00      	cmp	r4, #0
    3eb8:	dd05      	ble.n	3ec6 <_dtoa_r+0x956>
    3eba:	0031      	movs	r1, r6
    3ebc:	0022      	movs	r2, r4
    3ebe:	9804      	ldr	r0, [sp, #16]
    3ec0:	f000 fce0 	bl	4884 <__lshift>
    3ec4:	0006      	movs	r6, r0
    3ec6:	960a      	str	r6, [sp, #40]	; 0x28
    3ec8:	2d00      	cmp	r5, #0
    3eca:	d012      	beq.n	3ef2 <_dtoa_r+0x982>
    3ecc:	6871      	ldr	r1, [r6, #4]
    3ece:	9804      	ldr	r0, [sp, #16]
    3ed0:	f000 fb19 	bl	4506 <_Balloc>
    3ed4:	0031      	movs	r1, r6
    3ed6:	0004      	movs	r4, r0
    3ed8:	6933      	ldr	r3, [r6, #16]
    3eda:	310c      	adds	r1, #12
    3edc:	1c9a      	adds	r2, r3, #2
    3ede:	0092      	lsls	r2, r2, #2
    3ee0:	300c      	adds	r0, #12
    3ee2:	f7fe fc0d 	bl	2700 <memcpy>
    3ee6:	2201      	movs	r2, #1
    3ee8:	0021      	movs	r1, r4
    3eea:	9804      	ldr	r0, [sp, #16]
    3eec:	f000 fcca 	bl	4884 <__lshift>
    3ef0:	900a      	str	r0, [sp, #40]	; 0x28
    3ef2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3ef4:	1e7d      	subs	r5, r7, #1
    3ef6:	930b      	str	r3, [sp, #44]	; 0x2c
    3ef8:	195b      	adds	r3, r3, r5
    3efa:	930e      	str	r3, [sp, #56]	; 0x38
    3efc:	9908      	ldr	r1, [sp, #32]
    3efe:	9805      	ldr	r0, [sp, #20]
    3f00:	f7ff fab0 	bl	3464 <quorem>
    3f04:	0031      	movs	r1, r6
    3f06:	9010      	str	r0, [sp, #64]	; 0x40
    3f08:	0004      	movs	r4, r0
    3f0a:	9805      	ldr	r0, [sp, #20]
    3f0c:	f000 fd0c 	bl	4928 <__mcmp>
    3f10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3f12:	0005      	movs	r5, r0
    3f14:	9908      	ldr	r1, [sp, #32]
    3f16:	9804      	ldr	r0, [sp, #16]
    3f18:	f000 fd21 	bl	495e <__mdiff>
    3f1c:	2301      	movs	r3, #1
    3f1e:	930c      	str	r3, [sp, #48]	; 0x30
    3f20:	68c3      	ldr	r3, [r0, #12]
    3f22:	3430      	adds	r4, #48	; 0x30
    3f24:	0007      	movs	r7, r0
    3f26:	2b00      	cmp	r3, #0
    3f28:	d104      	bne.n	3f34 <_dtoa_r+0x9c4>
    3f2a:	0001      	movs	r1, r0
    3f2c:	9805      	ldr	r0, [sp, #20]
    3f2e:	f000 fcfb 	bl	4928 <__mcmp>
    3f32:	900c      	str	r0, [sp, #48]	; 0x30
    3f34:	0039      	movs	r1, r7
    3f36:	9804      	ldr	r0, [sp, #16]
    3f38:	f000 fb1d 	bl	4576 <_Bfree>
    3f3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3f3e:	9a22      	ldr	r2, [sp, #136]	; 0x88
    3f40:	4313      	orrs	r3, r2
    3f42:	d108      	bne.n	3f56 <_dtoa_r+0x9e6>
    3f44:	9a06      	ldr	r2, [sp, #24]
    3f46:	3301      	adds	r3, #1
    3f48:	4213      	tst	r3, r2
    3f4a:	d104      	bne.n	3f56 <_dtoa_r+0x9e6>
    3f4c:	2c39      	cmp	r4, #57	; 0x39
    3f4e:	d02a      	beq.n	3fa6 <_dtoa_r+0xa36>
    3f50:	2d00      	cmp	r5, #0
    3f52:	dc1c      	bgt.n	3f8e <_dtoa_r+0xa1e>
    3f54:	e01d      	b.n	3f92 <_dtoa_r+0xa22>
    3f56:	2d00      	cmp	r5, #0
    3f58:	db06      	blt.n	3f68 <_dtoa_r+0x9f8>
    3f5a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    3f5c:	431d      	orrs	r5, r3
    3f5e:	d11b      	bne.n	3f98 <_dtoa_r+0xa28>
    3f60:	2301      	movs	r3, #1
    3f62:	9a06      	ldr	r2, [sp, #24]
    3f64:	4213      	tst	r3, r2
    3f66:	d117      	bne.n	3f98 <_dtoa_r+0xa28>
    3f68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3f6a:	2b00      	cmp	r3, #0
    3f6c:	dd11      	ble.n	3f92 <_dtoa_r+0xa22>
    3f6e:	9905      	ldr	r1, [sp, #20]
    3f70:	2201      	movs	r2, #1
    3f72:	9804      	ldr	r0, [sp, #16]
    3f74:	f000 fc86 	bl	4884 <__lshift>
    3f78:	9908      	ldr	r1, [sp, #32]
    3f7a:	9005      	str	r0, [sp, #20]
    3f7c:	f000 fcd4 	bl	4928 <__mcmp>
    3f80:	2800      	cmp	r0, #0
    3f82:	dc02      	bgt.n	3f8a <_dtoa_r+0xa1a>
    3f84:	d105      	bne.n	3f92 <_dtoa_r+0xa22>
    3f86:	07e3      	lsls	r3, r4, #31
    3f88:	d503      	bpl.n	3f92 <_dtoa_r+0xa22>
    3f8a:	2c39      	cmp	r4, #57	; 0x39
    3f8c:	d00b      	beq.n	3fa6 <_dtoa_r+0xa36>
    3f8e:	9c10      	ldr	r4, [sp, #64]	; 0x40
    3f90:	3431      	adds	r4, #49	; 0x31
    3f92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3f94:	1c5d      	adds	r5, r3, #1
    3f96:	e00f      	b.n	3fb8 <_dtoa_r+0xa48>
    3f98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3f9a:	1c5f      	adds	r7, r3, #1
    3f9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3f9e:	2b00      	cmp	r3, #0
    3fa0:	dd0c      	ble.n	3fbc <_dtoa_r+0xa4c>
    3fa2:	2c39      	cmp	r4, #57	; 0x39
    3fa4:	d105      	bne.n	3fb2 <_dtoa_r+0xa42>
    3fa6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3fa8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    3faa:	1c5d      	adds	r5, r3, #1
    3fac:	2339      	movs	r3, #57	; 0x39
    3fae:	7013      	strb	r3, [r2, #0]
    3fb0:	e057      	b.n	4062 <_dtoa_r+0xaf2>
    3fb2:	003d      	movs	r5, r7
    3fb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3fb6:	3401      	adds	r4, #1
    3fb8:	701c      	strb	r4, [r3, #0]
    3fba:	e068      	b.n	408e <_dtoa_r+0xb1e>
    3fbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3fbe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    3fc0:	003d      	movs	r5, r7
    3fc2:	701c      	strb	r4, [r3, #0]
    3fc4:	4293      	cmp	r3, r2
    3fc6:	d03c      	beq.n	4042 <_dtoa_r+0xad2>
    3fc8:	2300      	movs	r3, #0
    3fca:	220a      	movs	r2, #10
    3fcc:	9905      	ldr	r1, [sp, #20]
    3fce:	9804      	ldr	r0, [sp, #16]
    3fd0:	f000 faea 	bl	45a8 <__multadd>
    3fd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3fd6:	9005      	str	r0, [sp, #20]
    3fd8:	429e      	cmp	r6, r3
    3fda:	d108      	bne.n	3fee <_dtoa_r+0xa7e>
    3fdc:	0031      	movs	r1, r6
    3fde:	2300      	movs	r3, #0
    3fe0:	220a      	movs	r2, #10
    3fe2:	9804      	ldr	r0, [sp, #16]
    3fe4:	f000 fae0 	bl	45a8 <__multadd>
    3fe8:	0006      	movs	r6, r0
    3fea:	900a      	str	r0, [sp, #40]	; 0x28
    3fec:	e00d      	b.n	400a <_dtoa_r+0xa9a>
    3fee:	0031      	movs	r1, r6
    3ff0:	2300      	movs	r3, #0
    3ff2:	220a      	movs	r2, #10
    3ff4:	9804      	ldr	r0, [sp, #16]
    3ff6:	f000 fad7 	bl	45a8 <__multadd>
    3ffa:	2300      	movs	r3, #0
    3ffc:	0006      	movs	r6, r0
    3ffe:	220a      	movs	r2, #10
    4000:	990a      	ldr	r1, [sp, #40]	; 0x28
    4002:	9804      	ldr	r0, [sp, #16]
    4004:	f000 fad0 	bl	45a8 <__multadd>
    4008:	900a      	str	r0, [sp, #40]	; 0x28
    400a:	970b      	str	r7, [sp, #44]	; 0x2c
    400c:	e776      	b.n	3efc <_dtoa_r+0x98c>
    400e:	2300      	movs	r3, #0
    4010:	220a      	movs	r2, #10
    4012:	9905      	ldr	r1, [sp, #20]
    4014:	9804      	ldr	r0, [sp, #16]
    4016:	f000 fac7 	bl	45a8 <__multadd>
    401a:	9005      	str	r0, [sp, #20]
    401c:	9908      	ldr	r1, [sp, #32]
    401e:	9805      	ldr	r0, [sp, #20]
    4020:	f7ff fa20 	bl	3464 <quorem>
    4024:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4026:	3030      	adds	r0, #48	; 0x30
    4028:	7028      	strb	r0, [r5, #0]
    402a:	3501      	adds	r5, #1
    402c:	0004      	movs	r4, r0
    402e:	1aeb      	subs	r3, r5, r3
    4030:	42bb      	cmp	r3, r7
    4032:	dbec      	blt.n	400e <_dtoa_r+0xa9e>
    4034:	1e3d      	subs	r5, r7, #0
    4036:	dc00      	bgt.n	403a <_dtoa_r+0xaca>
    4038:	2501      	movs	r5, #1
    403a:	960a      	str	r6, [sp, #40]	; 0x28
    403c:	2600      	movs	r6, #0
    403e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4040:	195d      	adds	r5, r3, r5
    4042:	9905      	ldr	r1, [sp, #20]
    4044:	2201      	movs	r2, #1
    4046:	9804      	ldr	r0, [sp, #16]
    4048:	f000 fc1c 	bl	4884 <__lshift>
    404c:	9908      	ldr	r1, [sp, #32]
    404e:	9005      	str	r0, [sp, #20]
    4050:	f000 fc6a 	bl	4928 <__mcmp>
    4054:	2800      	cmp	r0, #0
    4056:	dc04      	bgt.n	4062 <_dtoa_r+0xaf2>
    4058:	d113      	bne.n	4082 <_dtoa_r+0xb12>
    405a:	07e3      	lsls	r3, r4, #31
    405c:	d401      	bmi.n	4062 <_dtoa_r+0xaf2>
    405e:	e010      	b.n	4082 <_dtoa_r+0xb12>
    4060:	001d      	movs	r5, r3
    4062:	1e6b      	subs	r3, r5, #1
    4064:	781a      	ldrb	r2, [r3, #0]
    4066:	2a39      	cmp	r2, #57	; 0x39
    4068:	d108      	bne.n	407c <_dtoa_r+0xb0c>
    406a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    406c:	429a      	cmp	r2, r3
    406e:	d1f7      	bne.n	4060 <_dtoa_r+0xaf0>
    4070:	9b03      	ldr	r3, [sp, #12]
    4072:	3301      	adds	r3, #1
    4074:	9303      	str	r3, [sp, #12]
    4076:	2331      	movs	r3, #49	; 0x31
    4078:	7013      	strb	r3, [r2, #0]
    407a:	e008      	b.n	408e <_dtoa_r+0xb1e>
    407c:	3201      	adds	r2, #1
    407e:	701a      	strb	r2, [r3, #0]
    4080:	e005      	b.n	408e <_dtoa_r+0xb1e>
    4082:	1e6b      	subs	r3, r5, #1
    4084:	781a      	ldrb	r2, [r3, #0]
    4086:	2a30      	cmp	r2, #48	; 0x30
    4088:	d101      	bne.n	408e <_dtoa_r+0xb1e>
    408a:	001d      	movs	r5, r3
    408c:	e7f9      	b.n	4082 <_dtoa_r+0xb12>
    408e:	9908      	ldr	r1, [sp, #32]
    4090:	9804      	ldr	r0, [sp, #16]
    4092:	f000 fa70 	bl	4576 <_Bfree>
    4096:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4098:	2b00      	cmp	r3, #0
    409a:	d00e      	beq.n	40ba <_dtoa_r+0xb4a>
    409c:	2e00      	cmp	r6, #0
    409e:	d005      	beq.n	40ac <_dtoa_r+0xb3c>
    40a0:	429e      	cmp	r6, r3
    40a2:	d003      	beq.n	40ac <_dtoa_r+0xb3c>
    40a4:	0031      	movs	r1, r6
    40a6:	9804      	ldr	r0, [sp, #16]
    40a8:	f000 fa65 	bl	4576 <_Bfree>
    40ac:	990a      	ldr	r1, [sp, #40]	; 0x28
    40ae:	9804      	ldr	r0, [sp, #16]
    40b0:	f000 fa61 	bl	4576 <_Bfree>
    40b4:	e001      	b.n	40ba <_dtoa_r+0xb4a>
    40b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    40b8:	9303      	str	r3, [sp, #12]
    40ba:	9804      	ldr	r0, [sp, #16]
    40bc:	9905      	ldr	r1, [sp, #20]
    40be:	f000 fa5a 	bl	4576 <_Bfree>
    40c2:	2300      	movs	r3, #0
    40c4:	702b      	strb	r3, [r5, #0]
    40c6:	9b03      	ldr	r3, [sp, #12]
    40c8:	9a24      	ldr	r2, [sp, #144]	; 0x90
    40ca:	3301      	adds	r3, #1
    40cc:	6013      	str	r3, [r2, #0]
    40ce:	9b26      	ldr	r3, [sp, #152]	; 0x98
    40d0:	980d      	ldr	r0, [sp, #52]	; 0x34
    40d2:	2b00      	cmp	r3, #0
    40d4:	d010      	beq.n	40f8 <_dtoa_r+0xb88>
    40d6:	601d      	str	r5, [r3, #0]
    40d8:	e00e      	b.n	40f8 <_dtoa_r+0xb88>
    40da:	9b22      	ldr	r3, [sp, #136]	; 0x88
    40dc:	2b01      	cmp	r3, #1
    40de:	dc00      	bgt.n	40e2 <_dtoa_r+0xb72>
    40e0:	e643      	b.n	3d6a <_dtoa_r+0x7fa>
    40e2:	9d11      	ldr	r5, [sp, #68]	; 0x44
    40e4:	2001      	movs	r0, #1
    40e6:	e665      	b.n	3db4 <_dtoa_r+0x844>
    40e8:	2f00      	cmp	r7, #0
    40ea:	dd00      	ble.n	40ee <_dtoa_r+0xb7e>
    40ec:	e6de      	b.n	3eac <_dtoa_r+0x93c>
    40ee:	9b22      	ldr	r3, [sp, #136]	; 0x88
    40f0:	2b02      	cmp	r3, #2
    40f2:	dc00      	bgt.n	40f6 <_dtoa_r+0xb86>
    40f4:	e6da      	b.n	3eac <_dtoa_r+0x93c>
    40f6:	e6ae      	b.n	3e56 <_dtoa_r+0x8e6>
    40f8:	b01d      	add	sp, #116	; 0x74
    40fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000040fc <__sflush_r>:
    40fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    40fe:	898a      	ldrh	r2, [r1, #12]
    4100:	0005      	movs	r5, r0
    4102:	000c      	movs	r4, r1
    4104:	0713      	lsls	r3, r2, #28
    4106:	d45a      	bmi.n	41be <__sflush_r+0xc2>
    4108:	684b      	ldr	r3, [r1, #4]
    410a:	2b00      	cmp	r3, #0
    410c:	dc02      	bgt.n	4114 <__sflush_r+0x18>
    410e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    4110:	2b00      	cmp	r3, #0
    4112:	dd19      	ble.n	4148 <__sflush_r+0x4c>
    4114:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    4116:	2f00      	cmp	r7, #0
    4118:	d016      	beq.n	4148 <__sflush_r+0x4c>
    411a:	2300      	movs	r3, #0
    411c:	682e      	ldr	r6, [r5, #0]
    411e:	602b      	str	r3, [r5, #0]
    4120:	2380      	movs	r3, #128	; 0x80
    4122:	015b      	lsls	r3, r3, #5
    4124:	401a      	ands	r2, r3
    4126:	d001      	beq.n	412c <__sflush_r+0x30>
    4128:	6d60      	ldr	r0, [r4, #84]	; 0x54
    412a:	e014      	b.n	4156 <__sflush_r+0x5a>
    412c:	2301      	movs	r3, #1
    412e:	6a21      	ldr	r1, [r4, #32]
    4130:	0028      	movs	r0, r5
    4132:	47b8      	blx	r7
    4134:	1c43      	adds	r3, r0, #1
    4136:	d10e      	bne.n	4156 <__sflush_r+0x5a>
    4138:	682b      	ldr	r3, [r5, #0]
    413a:	2b00      	cmp	r3, #0
    413c:	d00b      	beq.n	4156 <__sflush_r+0x5a>
    413e:	2b1d      	cmp	r3, #29
    4140:	d001      	beq.n	4146 <__sflush_r+0x4a>
    4142:	2b16      	cmp	r3, #22
    4144:	d102      	bne.n	414c <__sflush_r+0x50>
    4146:	602e      	str	r6, [r5, #0]
    4148:	2000      	movs	r0, #0
    414a:	e05a      	b.n	4202 <__sflush_r+0x106>
    414c:	2240      	movs	r2, #64	; 0x40
    414e:	89a3      	ldrh	r3, [r4, #12]
    4150:	4313      	orrs	r3, r2
    4152:	81a3      	strh	r3, [r4, #12]
    4154:	e055      	b.n	4202 <__sflush_r+0x106>
    4156:	89a3      	ldrh	r3, [r4, #12]
    4158:	075b      	lsls	r3, r3, #29
    415a:	d506      	bpl.n	416a <__sflush_r+0x6e>
    415c:	6863      	ldr	r3, [r4, #4]
    415e:	1ac0      	subs	r0, r0, r3
    4160:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4162:	2b00      	cmp	r3, #0
    4164:	d001      	beq.n	416a <__sflush_r+0x6e>
    4166:	6c23      	ldr	r3, [r4, #64]	; 0x40
    4168:	1ac0      	subs	r0, r0, r3
    416a:	2300      	movs	r3, #0
    416c:	0002      	movs	r2, r0
    416e:	6a21      	ldr	r1, [r4, #32]
    4170:	0028      	movs	r0, r5
    4172:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    4174:	47b8      	blx	r7
    4176:	89a3      	ldrh	r3, [r4, #12]
    4178:	1c42      	adds	r2, r0, #1
    417a:	d106      	bne.n	418a <__sflush_r+0x8e>
    417c:	6829      	ldr	r1, [r5, #0]
    417e:	291d      	cmp	r1, #29
    4180:	d83a      	bhi.n	41f8 <__sflush_r+0xfc>
    4182:	4a20      	ldr	r2, [pc, #128]	; (4204 <__sflush_r+0x108>)
    4184:	40ca      	lsrs	r2, r1
    4186:	07d2      	lsls	r2, r2, #31
    4188:	d536      	bpl.n	41f8 <__sflush_r+0xfc>
    418a:	2200      	movs	r2, #0
    418c:	6062      	str	r2, [r4, #4]
    418e:	6922      	ldr	r2, [r4, #16]
    4190:	6022      	str	r2, [r4, #0]
    4192:	04db      	lsls	r3, r3, #19
    4194:	d505      	bpl.n	41a2 <__sflush_r+0xa6>
    4196:	1c43      	adds	r3, r0, #1
    4198:	d102      	bne.n	41a0 <__sflush_r+0xa4>
    419a:	682b      	ldr	r3, [r5, #0]
    419c:	2b00      	cmp	r3, #0
    419e:	d100      	bne.n	41a2 <__sflush_r+0xa6>
    41a0:	6560      	str	r0, [r4, #84]	; 0x54
    41a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    41a4:	602e      	str	r6, [r5, #0]
    41a6:	2900      	cmp	r1, #0
    41a8:	d0ce      	beq.n	4148 <__sflush_r+0x4c>
    41aa:	0023      	movs	r3, r4
    41ac:	3344      	adds	r3, #68	; 0x44
    41ae:	4299      	cmp	r1, r3
    41b0:	d002      	beq.n	41b8 <__sflush_r+0xbc>
    41b2:	0028      	movs	r0, r5
    41b4:	f000 fca0 	bl	4af8 <_free_r>
    41b8:	2000      	movs	r0, #0
    41ba:	6360      	str	r0, [r4, #52]	; 0x34
    41bc:	e021      	b.n	4202 <__sflush_r+0x106>
    41be:	690f      	ldr	r7, [r1, #16]
    41c0:	2f00      	cmp	r7, #0
    41c2:	d0c1      	beq.n	4148 <__sflush_r+0x4c>
    41c4:	680b      	ldr	r3, [r1, #0]
    41c6:	600f      	str	r7, [r1, #0]
    41c8:	1bdb      	subs	r3, r3, r7
    41ca:	9301      	str	r3, [sp, #4]
    41cc:	2300      	movs	r3, #0
    41ce:	0792      	lsls	r2, r2, #30
    41d0:	d100      	bne.n	41d4 <__sflush_r+0xd8>
    41d2:	694b      	ldr	r3, [r1, #20]
    41d4:	60a3      	str	r3, [r4, #8]
    41d6:	e003      	b.n	41e0 <__sflush_r+0xe4>
    41d8:	9b01      	ldr	r3, [sp, #4]
    41da:	183f      	adds	r7, r7, r0
    41dc:	1a1b      	subs	r3, r3, r0
    41de:	9301      	str	r3, [sp, #4]
    41e0:	9b01      	ldr	r3, [sp, #4]
    41e2:	2b00      	cmp	r3, #0
    41e4:	ddb0      	ble.n	4148 <__sflush_r+0x4c>
    41e6:	9b01      	ldr	r3, [sp, #4]
    41e8:	003a      	movs	r2, r7
    41ea:	6a21      	ldr	r1, [r4, #32]
    41ec:	0028      	movs	r0, r5
    41ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    41f0:	47b0      	blx	r6
    41f2:	2800      	cmp	r0, #0
    41f4:	dcf0      	bgt.n	41d8 <__sflush_r+0xdc>
    41f6:	89a3      	ldrh	r3, [r4, #12]
    41f8:	2240      	movs	r2, #64	; 0x40
    41fa:	2001      	movs	r0, #1
    41fc:	4313      	orrs	r3, r2
    41fe:	81a3      	strh	r3, [r4, #12]
    4200:	4240      	negs	r0, r0
    4202:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4204:	20400001 	.word	0x20400001

00004208 <_fflush_r>:
    4208:	690b      	ldr	r3, [r1, #16]
    420a:	b570      	push	{r4, r5, r6, lr}
    420c:	0005      	movs	r5, r0
    420e:	000c      	movs	r4, r1
    4210:	2b00      	cmp	r3, #0
    4212:	d101      	bne.n	4218 <_fflush_r+0x10>
    4214:	2000      	movs	r0, #0
    4216:	e01c      	b.n	4252 <_fflush_r+0x4a>
    4218:	2800      	cmp	r0, #0
    421a:	d004      	beq.n	4226 <_fflush_r+0x1e>
    421c:	6983      	ldr	r3, [r0, #24]
    421e:	2b00      	cmp	r3, #0
    4220:	d101      	bne.n	4226 <_fflush_r+0x1e>
    4222:	f000 f85f 	bl	42e4 <__sinit>
    4226:	4b0b      	ldr	r3, [pc, #44]	; (4254 <_fflush_r+0x4c>)
    4228:	429c      	cmp	r4, r3
    422a:	d101      	bne.n	4230 <_fflush_r+0x28>
    422c:	686c      	ldr	r4, [r5, #4]
    422e:	e008      	b.n	4242 <_fflush_r+0x3a>
    4230:	4b09      	ldr	r3, [pc, #36]	; (4258 <_fflush_r+0x50>)
    4232:	429c      	cmp	r4, r3
    4234:	d101      	bne.n	423a <_fflush_r+0x32>
    4236:	68ac      	ldr	r4, [r5, #8]
    4238:	e003      	b.n	4242 <_fflush_r+0x3a>
    423a:	4b08      	ldr	r3, [pc, #32]	; (425c <_fflush_r+0x54>)
    423c:	429c      	cmp	r4, r3
    423e:	d100      	bne.n	4242 <_fflush_r+0x3a>
    4240:	68ec      	ldr	r4, [r5, #12]
    4242:	220c      	movs	r2, #12
    4244:	5ea3      	ldrsh	r3, [r4, r2]
    4246:	2b00      	cmp	r3, #0
    4248:	d0e4      	beq.n	4214 <_fflush_r+0xc>
    424a:	0021      	movs	r1, r4
    424c:	0028      	movs	r0, r5
    424e:	f7ff ff55 	bl	40fc <__sflush_r>
    4252:	bd70      	pop	{r4, r5, r6, pc}
    4254:	00007208 	.word	0x00007208
    4258:	00007228 	.word	0x00007228
    425c:	00007248 	.word	0x00007248

00004260 <_cleanup_r>:
    4260:	b510      	push	{r4, lr}
    4262:	4902      	ldr	r1, [pc, #8]	; (426c <_cleanup_r+0xc>)
    4264:	f000 f8b0 	bl	43c8 <_fwalk_reent>
    4268:	bd10      	pop	{r4, pc}
    426a:	46c0      	nop			; (mov r8, r8)
    426c:	00004209 	.word	0x00004209

00004270 <std.isra.0>:
    4270:	2300      	movs	r3, #0
    4272:	b510      	push	{r4, lr}
    4274:	0004      	movs	r4, r0
    4276:	6003      	str	r3, [r0, #0]
    4278:	6043      	str	r3, [r0, #4]
    427a:	6083      	str	r3, [r0, #8]
    427c:	8181      	strh	r1, [r0, #12]
    427e:	6643      	str	r3, [r0, #100]	; 0x64
    4280:	81c2      	strh	r2, [r0, #14]
    4282:	6103      	str	r3, [r0, #16]
    4284:	6143      	str	r3, [r0, #20]
    4286:	6183      	str	r3, [r0, #24]
    4288:	0019      	movs	r1, r3
    428a:	2208      	movs	r2, #8
    428c:	305c      	adds	r0, #92	; 0x5c
    428e:	f7fe fa40 	bl	2712 <memset>
    4292:	4b05      	ldr	r3, [pc, #20]	; (42a8 <std.isra.0+0x38>)
    4294:	6224      	str	r4, [r4, #32]
    4296:	6263      	str	r3, [r4, #36]	; 0x24
    4298:	4b04      	ldr	r3, [pc, #16]	; (42ac <std.isra.0+0x3c>)
    429a:	62a3      	str	r3, [r4, #40]	; 0x28
    429c:	4b04      	ldr	r3, [pc, #16]	; (42b0 <std.isra.0+0x40>)
    429e:	62e3      	str	r3, [r4, #44]	; 0x2c
    42a0:	4b04      	ldr	r3, [pc, #16]	; (42b4 <std.isra.0+0x44>)
    42a2:	6323      	str	r3, [r4, #48]	; 0x30
    42a4:	bd10      	pop	{r4, pc}
    42a6:	46c0      	nop			; (mov r8, r8)
    42a8:	00004f49 	.word	0x00004f49
    42ac:	00004f71 	.word	0x00004f71
    42b0:	00004fa9 	.word	0x00004fa9
    42b4:	00004fd5 	.word	0x00004fd5

000042b8 <__sfmoreglue>:
    42b8:	b570      	push	{r4, r5, r6, lr}
    42ba:	2568      	movs	r5, #104	; 0x68
    42bc:	1e4b      	subs	r3, r1, #1
    42be:	435d      	muls	r5, r3
    42c0:	000e      	movs	r6, r1
    42c2:	0029      	movs	r1, r5
    42c4:	3174      	adds	r1, #116	; 0x74
    42c6:	f000 fc5d 	bl	4b84 <_malloc_r>
    42ca:	1e04      	subs	r4, r0, #0
    42cc:	d008      	beq.n	42e0 <__sfmoreglue+0x28>
    42ce:	2100      	movs	r1, #0
    42d0:	002a      	movs	r2, r5
    42d2:	6001      	str	r1, [r0, #0]
    42d4:	6046      	str	r6, [r0, #4]
    42d6:	300c      	adds	r0, #12
    42d8:	60a0      	str	r0, [r4, #8]
    42da:	3268      	adds	r2, #104	; 0x68
    42dc:	f7fe fa19 	bl	2712 <memset>
    42e0:	0020      	movs	r0, r4
    42e2:	bd70      	pop	{r4, r5, r6, pc}

000042e4 <__sinit>:
    42e4:	6983      	ldr	r3, [r0, #24]
    42e6:	b513      	push	{r0, r1, r4, lr}
    42e8:	0004      	movs	r4, r0
    42ea:	2b00      	cmp	r3, #0
    42ec:	d128      	bne.n	4340 <__sinit+0x5c>
    42ee:	6483      	str	r3, [r0, #72]	; 0x48
    42f0:	64c3      	str	r3, [r0, #76]	; 0x4c
    42f2:	6503      	str	r3, [r0, #80]	; 0x50
    42f4:	4b13      	ldr	r3, [pc, #76]	; (4344 <__sinit+0x60>)
    42f6:	4a14      	ldr	r2, [pc, #80]	; (4348 <__sinit+0x64>)
    42f8:	681b      	ldr	r3, [r3, #0]
    42fa:	6282      	str	r2, [r0, #40]	; 0x28
    42fc:	9301      	str	r3, [sp, #4]
    42fe:	4298      	cmp	r0, r3
    4300:	d101      	bne.n	4306 <__sinit+0x22>
    4302:	2301      	movs	r3, #1
    4304:	6183      	str	r3, [r0, #24]
    4306:	0020      	movs	r0, r4
    4308:	f000 f820 	bl	434c <__sfp>
    430c:	6060      	str	r0, [r4, #4]
    430e:	0020      	movs	r0, r4
    4310:	f000 f81c 	bl	434c <__sfp>
    4314:	60a0      	str	r0, [r4, #8]
    4316:	0020      	movs	r0, r4
    4318:	f000 f818 	bl	434c <__sfp>
    431c:	2200      	movs	r2, #0
    431e:	60e0      	str	r0, [r4, #12]
    4320:	2104      	movs	r1, #4
    4322:	6860      	ldr	r0, [r4, #4]
    4324:	f7ff ffa4 	bl	4270 <std.isra.0>
    4328:	2201      	movs	r2, #1
    432a:	2109      	movs	r1, #9
    432c:	68a0      	ldr	r0, [r4, #8]
    432e:	f7ff ff9f 	bl	4270 <std.isra.0>
    4332:	2202      	movs	r2, #2
    4334:	2112      	movs	r1, #18
    4336:	68e0      	ldr	r0, [r4, #12]
    4338:	f7ff ff9a 	bl	4270 <std.isra.0>
    433c:	2301      	movs	r3, #1
    433e:	61a3      	str	r3, [r4, #24]
    4340:	bd13      	pop	{r0, r1, r4, pc}
    4342:	46c0      	nop			; (mov r8, r8)
    4344:	000071c0 	.word	0x000071c0
    4348:	00004261 	.word	0x00004261

0000434c <__sfp>:
    434c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    434e:	4b1d      	ldr	r3, [pc, #116]	; (43c4 <__sfp+0x78>)
    4350:	0006      	movs	r6, r0
    4352:	681d      	ldr	r5, [r3, #0]
    4354:	69ab      	ldr	r3, [r5, #24]
    4356:	2b00      	cmp	r3, #0
    4358:	d102      	bne.n	4360 <__sfp+0x14>
    435a:	0028      	movs	r0, r5
    435c:	f7ff ffc2 	bl	42e4 <__sinit>
    4360:	3548      	adds	r5, #72	; 0x48
    4362:	68ac      	ldr	r4, [r5, #8]
    4364:	686b      	ldr	r3, [r5, #4]
    4366:	3b01      	subs	r3, #1
    4368:	d405      	bmi.n	4376 <__sfp+0x2a>
    436a:	220c      	movs	r2, #12
    436c:	5ea7      	ldrsh	r7, [r4, r2]
    436e:	2f00      	cmp	r7, #0
    4370:	d010      	beq.n	4394 <__sfp+0x48>
    4372:	3468      	adds	r4, #104	; 0x68
    4374:	e7f7      	b.n	4366 <__sfp+0x1a>
    4376:	682b      	ldr	r3, [r5, #0]
    4378:	2b00      	cmp	r3, #0
    437a:	d001      	beq.n	4380 <__sfp+0x34>
    437c:	682d      	ldr	r5, [r5, #0]
    437e:	e7f0      	b.n	4362 <__sfp+0x16>
    4380:	2104      	movs	r1, #4
    4382:	0030      	movs	r0, r6
    4384:	f7ff ff98 	bl	42b8 <__sfmoreglue>
    4388:	6028      	str	r0, [r5, #0]
    438a:	2800      	cmp	r0, #0
    438c:	d1f6      	bne.n	437c <__sfp+0x30>
    438e:	230c      	movs	r3, #12
    4390:	6033      	str	r3, [r6, #0]
    4392:	e016      	b.n	43c2 <__sfp+0x76>
    4394:	2301      	movs	r3, #1
    4396:	0020      	movs	r0, r4
    4398:	425b      	negs	r3, r3
    439a:	81e3      	strh	r3, [r4, #14]
    439c:	3302      	adds	r3, #2
    439e:	81a3      	strh	r3, [r4, #12]
    43a0:	6667      	str	r7, [r4, #100]	; 0x64
    43a2:	6027      	str	r7, [r4, #0]
    43a4:	60a7      	str	r7, [r4, #8]
    43a6:	6067      	str	r7, [r4, #4]
    43a8:	6127      	str	r7, [r4, #16]
    43aa:	6167      	str	r7, [r4, #20]
    43ac:	61a7      	str	r7, [r4, #24]
    43ae:	305c      	adds	r0, #92	; 0x5c
    43b0:	2208      	movs	r2, #8
    43b2:	0039      	movs	r1, r7
    43b4:	f7fe f9ad 	bl	2712 <memset>
    43b8:	0020      	movs	r0, r4
    43ba:	6367      	str	r7, [r4, #52]	; 0x34
    43bc:	63a7      	str	r7, [r4, #56]	; 0x38
    43be:	64a7      	str	r7, [r4, #72]	; 0x48
    43c0:	64e7      	str	r7, [r4, #76]	; 0x4c
    43c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    43c4:	000071c0 	.word	0x000071c0

000043c8 <_fwalk_reent>:
    43c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    43ca:	0004      	movs	r4, r0
    43cc:	0007      	movs	r7, r0
    43ce:	2600      	movs	r6, #0
    43d0:	9101      	str	r1, [sp, #4]
    43d2:	3448      	adds	r4, #72	; 0x48
    43d4:	2c00      	cmp	r4, #0
    43d6:	d016      	beq.n	4406 <_fwalk_reent+0x3e>
    43d8:	6863      	ldr	r3, [r4, #4]
    43da:	68a5      	ldr	r5, [r4, #8]
    43dc:	9300      	str	r3, [sp, #0]
    43de:	9b00      	ldr	r3, [sp, #0]
    43e0:	3b01      	subs	r3, #1
    43e2:	9300      	str	r3, [sp, #0]
    43e4:	d40d      	bmi.n	4402 <_fwalk_reent+0x3a>
    43e6:	89ab      	ldrh	r3, [r5, #12]
    43e8:	2b01      	cmp	r3, #1
    43ea:	d908      	bls.n	43fe <_fwalk_reent+0x36>
    43ec:	220e      	movs	r2, #14
    43ee:	5eab      	ldrsh	r3, [r5, r2]
    43f0:	3301      	adds	r3, #1
    43f2:	d004      	beq.n	43fe <_fwalk_reent+0x36>
    43f4:	0029      	movs	r1, r5
    43f6:	0038      	movs	r0, r7
    43f8:	9b01      	ldr	r3, [sp, #4]
    43fa:	4798      	blx	r3
    43fc:	4306      	orrs	r6, r0
    43fe:	3568      	adds	r5, #104	; 0x68
    4400:	e7ed      	b.n	43de <_fwalk_reent+0x16>
    4402:	6824      	ldr	r4, [r4, #0]
    4404:	e7e6      	b.n	43d4 <_fwalk_reent+0xc>
    4406:	0030      	movs	r0, r6
    4408:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

0000440c <_localeconv_r>:
    440c:	4800      	ldr	r0, [pc, #0]	; (4410 <_localeconv_r+0x4>)
    440e:	4770      	bx	lr
    4410:	20000070 	.word	0x20000070

00004414 <__swhatbuf_r>:
    4414:	b570      	push	{r4, r5, r6, lr}
    4416:	000e      	movs	r6, r1
    4418:	001d      	movs	r5, r3
    441a:	230e      	movs	r3, #14
    441c:	5ec9      	ldrsh	r1, [r1, r3]
    441e:	b090      	sub	sp, #64	; 0x40
    4420:	0014      	movs	r4, r2
    4422:	2900      	cmp	r1, #0
    4424:	da06      	bge.n	4434 <__swhatbuf_r+0x20>
    4426:	2300      	movs	r3, #0
    4428:	602b      	str	r3, [r5, #0]
    442a:	89b3      	ldrh	r3, [r6, #12]
    442c:	061b      	lsls	r3, r3, #24
    442e:	d50f      	bpl.n	4450 <__swhatbuf_r+0x3c>
    4430:	2340      	movs	r3, #64	; 0x40
    4432:	e00f      	b.n	4454 <__swhatbuf_r+0x40>
    4434:	aa01      	add	r2, sp, #4
    4436:	f000 fdf9 	bl	502c <_fstat_r>
    443a:	2800      	cmp	r0, #0
    443c:	dbf3      	blt.n	4426 <__swhatbuf_r+0x12>
    443e:	23f0      	movs	r3, #240	; 0xf0
    4440:	9a02      	ldr	r2, [sp, #8]
    4442:	021b      	lsls	r3, r3, #8
    4444:	4013      	ands	r3, r2
    4446:	4a05      	ldr	r2, [pc, #20]	; (445c <__swhatbuf_r+0x48>)
    4448:	189b      	adds	r3, r3, r2
    444a:	425a      	negs	r2, r3
    444c:	4153      	adcs	r3, r2
    444e:	602b      	str	r3, [r5, #0]
    4450:	2380      	movs	r3, #128	; 0x80
    4452:	00db      	lsls	r3, r3, #3
    4454:	2000      	movs	r0, #0
    4456:	6023      	str	r3, [r4, #0]
    4458:	b010      	add	sp, #64	; 0x40
    445a:	bd70      	pop	{r4, r5, r6, pc}
    445c:	ffffe000 	.word	0xffffe000

00004460 <__smakebuf_r>:
    4460:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4462:	2602      	movs	r6, #2
    4464:	898b      	ldrh	r3, [r1, #12]
    4466:	0005      	movs	r5, r0
    4468:	000c      	movs	r4, r1
    446a:	4233      	tst	r3, r6
    446c:	d110      	bne.n	4490 <__smakebuf_r+0x30>
    446e:	ab01      	add	r3, sp, #4
    4470:	466a      	mov	r2, sp
    4472:	f7ff ffcf 	bl	4414 <__swhatbuf_r>
    4476:	9900      	ldr	r1, [sp, #0]
    4478:	0007      	movs	r7, r0
    447a:	0028      	movs	r0, r5
    447c:	f000 fb82 	bl	4b84 <_malloc_r>
    4480:	2800      	cmp	r0, #0
    4482:	d10c      	bne.n	449e <__smakebuf_r+0x3e>
    4484:	220c      	movs	r2, #12
    4486:	5ea3      	ldrsh	r3, [r4, r2]
    4488:	059a      	lsls	r2, r3, #22
    448a:	d423      	bmi.n	44d4 <__smakebuf_r+0x74>
    448c:	4333      	orrs	r3, r6
    448e:	81a3      	strh	r3, [r4, #12]
    4490:	0023      	movs	r3, r4
    4492:	3347      	adds	r3, #71	; 0x47
    4494:	6023      	str	r3, [r4, #0]
    4496:	6123      	str	r3, [r4, #16]
    4498:	2301      	movs	r3, #1
    449a:	6163      	str	r3, [r4, #20]
    449c:	e01a      	b.n	44d4 <__smakebuf_r+0x74>
    449e:	2280      	movs	r2, #128	; 0x80
    44a0:	4b0d      	ldr	r3, [pc, #52]	; (44d8 <__smakebuf_r+0x78>)
    44a2:	62ab      	str	r3, [r5, #40]	; 0x28
    44a4:	89a3      	ldrh	r3, [r4, #12]
    44a6:	6020      	str	r0, [r4, #0]
    44a8:	4313      	orrs	r3, r2
    44aa:	81a3      	strh	r3, [r4, #12]
    44ac:	9b00      	ldr	r3, [sp, #0]
    44ae:	6120      	str	r0, [r4, #16]
    44b0:	6163      	str	r3, [r4, #20]
    44b2:	9b01      	ldr	r3, [sp, #4]
    44b4:	2b00      	cmp	r3, #0
    44b6:	d00a      	beq.n	44ce <__smakebuf_r+0x6e>
    44b8:	230e      	movs	r3, #14
    44ba:	5ee1      	ldrsh	r1, [r4, r3]
    44bc:	0028      	movs	r0, r5
    44be:	f000 fdc7 	bl	5050 <_isatty_r>
    44c2:	2800      	cmp	r0, #0
    44c4:	d003      	beq.n	44ce <__smakebuf_r+0x6e>
    44c6:	2201      	movs	r2, #1
    44c8:	89a3      	ldrh	r3, [r4, #12]
    44ca:	4313      	orrs	r3, r2
    44cc:	81a3      	strh	r3, [r4, #12]
    44ce:	89a3      	ldrh	r3, [r4, #12]
    44d0:	431f      	orrs	r7, r3
    44d2:	81a7      	strh	r7, [r4, #12]
    44d4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    44d6:	46c0      	nop			; (mov r8, r8)
    44d8:	00004261 	.word	0x00004261

000044dc <malloc>:
    44dc:	b510      	push	{r4, lr}
    44de:	4b03      	ldr	r3, [pc, #12]	; (44ec <malloc+0x10>)
    44e0:	0001      	movs	r1, r0
    44e2:	6818      	ldr	r0, [r3, #0]
    44e4:	f000 fb4e 	bl	4b84 <_malloc_r>
    44e8:	bd10      	pop	{r4, pc}
    44ea:	46c0      	nop			; (mov r8, r8)
    44ec:	2000006c 	.word	0x2000006c

000044f0 <memchr>:
    44f0:	b2c9      	uxtb	r1, r1
    44f2:	1882      	adds	r2, r0, r2
    44f4:	4290      	cmp	r0, r2
    44f6:	d004      	beq.n	4502 <memchr+0x12>
    44f8:	7803      	ldrb	r3, [r0, #0]
    44fa:	428b      	cmp	r3, r1
    44fc:	d002      	beq.n	4504 <memchr+0x14>
    44fe:	3001      	adds	r0, #1
    4500:	e7f8      	b.n	44f4 <memchr+0x4>
    4502:	2000      	movs	r0, #0
    4504:	4770      	bx	lr

00004506 <_Balloc>:
    4506:	b570      	push	{r4, r5, r6, lr}
    4508:	6a46      	ldr	r6, [r0, #36]	; 0x24
    450a:	0004      	movs	r4, r0
    450c:	000d      	movs	r5, r1
    450e:	2e00      	cmp	r6, #0
    4510:	d107      	bne.n	4522 <_Balloc+0x1c>
    4512:	2010      	movs	r0, #16
    4514:	f7ff ffe2 	bl	44dc <malloc>
    4518:	6260      	str	r0, [r4, #36]	; 0x24
    451a:	6046      	str	r6, [r0, #4]
    451c:	6086      	str	r6, [r0, #8]
    451e:	6006      	str	r6, [r0, #0]
    4520:	60c6      	str	r6, [r0, #12]
    4522:	6a66      	ldr	r6, [r4, #36]	; 0x24
    4524:	68f3      	ldr	r3, [r6, #12]
    4526:	2b00      	cmp	r3, #0
    4528:	d009      	beq.n	453e <_Balloc+0x38>
    452a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    452c:	00aa      	lsls	r2, r5, #2
    452e:	68db      	ldr	r3, [r3, #12]
    4530:	189b      	adds	r3, r3, r2
    4532:	6818      	ldr	r0, [r3, #0]
    4534:	2800      	cmp	r0, #0
    4536:	d00e      	beq.n	4556 <_Balloc+0x50>
    4538:	6802      	ldr	r2, [r0, #0]
    453a:	601a      	str	r2, [r3, #0]
    453c:	e017      	b.n	456e <_Balloc+0x68>
    453e:	2221      	movs	r2, #33	; 0x21
    4540:	2104      	movs	r1, #4
    4542:	0020      	movs	r0, r4
    4544:	f000 faca 	bl	4adc <_calloc_r>
    4548:	6a63      	ldr	r3, [r4, #36]	; 0x24
    454a:	60f0      	str	r0, [r6, #12]
    454c:	68db      	ldr	r3, [r3, #12]
    454e:	2b00      	cmp	r3, #0
    4550:	d1eb      	bne.n	452a <_Balloc+0x24>
    4552:	2000      	movs	r0, #0
    4554:	e00e      	b.n	4574 <_Balloc+0x6e>
    4556:	2101      	movs	r1, #1
    4558:	000e      	movs	r6, r1
    455a:	40ae      	lsls	r6, r5
    455c:	1d72      	adds	r2, r6, #5
    455e:	0092      	lsls	r2, r2, #2
    4560:	0020      	movs	r0, r4
    4562:	f000 fabb 	bl	4adc <_calloc_r>
    4566:	2800      	cmp	r0, #0
    4568:	d0f3      	beq.n	4552 <_Balloc+0x4c>
    456a:	6045      	str	r5, [r0, #4]
    456c:	6086      	str	r6, [r0, #8]
    456e:	2300      	movs	r3, #0
    4570:	6103      	str	r3, [r0, #16]
    4572:	60c3      	str	r3, [r0, #12]
    4574:	bd70      	pop	{r4, r5, r6, pc}

00004576 <_Bfree>:
    4576:	b570      	push	{r4, r5, r6, lr}
    4578:	6a45      	ldr	r5, [r0, #36]	; 0x24
    457a:	0006      	movs	r6, r0
    457c:	000c      	movs	r4, r1
    457e:	2d00      	cmp	r5, #0
    4580:	d107      	bne.n	4592 <_Bfree+0x1c>
    4582:	2010      	movs	r0, #16
    4584:	f7ff ffaa 	bl	44dc <malloc>
    4588:	6270      	str	r0, [r6, #36]	; 0x24
    458a:	6045      	str	r5, [r0, #4]
    458c:	6085      	str	r5, [r0, #8]
    458e:	6005      	str	r5, [r0, #0]
    4590:	60c5      	str	r5, [r0, #12]
    4592:	2c00      	cmp	r4, #0
    4594:	d007      	beq.n	45a6 <_Bfree+0x30>
    4596:	6a72      	ldr	r2, [r6, #36]	; 0x24
    4598:	6863      	ldr	r3, [r4, #4]
    459a:	68d2      	ldr	r2, [r2, #12]
    459c:	009b      	lsls	r3, r3, #2
    459e:	18d3      	adds	r3, r2, r3
    45a0:	681a      	ldr	r2, [r3, #0]
    45a2:	6022      	str	r2, [r4, #0]
    45a4:	601c      	str	r4, [r3, #0]
    45a6:	bd70      	pop	{r4, r5, r6, pc}

000045a8 <__multadd>:
    45a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    45aa:	0007      	movs	r7, r0
    45ac:	0008      	movs	r0, r1
    45ae:	000c      	movs	r4, r1
    45b0:	690d      	ldr	r5, [r1, #16]
    45b2:	001e      	movs	r6, r3
    45b4:	2100      	movs	r1, #0
    45b6:	9201      	str	r2, [sp, #4]
    45b8:	3014      	adds	r0, #20
    45ba:	9a01      	ldr	r2, [sp, #4]
    45bc:	8803      	ldrh	r3, [r0, #0]
    45be:	3101      	adds	r1, #1
    45c0:	4353      	muls	r3, r2
    45c2:	199b      	adds	r3, r3, r6
    45c4:	6806      	ldr	r6, [r0, #0]
    45c6:	0c36      	lsrs	r6, r6, #16
    45c8:	4356      	muls	r6, r2
    45ca:	0c1a      	lsrs	r2, r3, #16
    45cc:	4694      	mov	ip, r2
    45ce:	44b4      	add	ip, r6
    45d0:	4662      	mov	r2, ip
    45d2:	0c16      	lsrs	r6, r2, #16
    45d4:	0412      	lsls	r2, r2, #16
    45d6:	4694      	mov	ip, r2
    45d8:	b29b      	uxth	r3, r3
    45da:	4463      	add	r3, ip
    45dc:	c008      	stmia	r0!, {r3}
    45de:	428d      	cmp	r5, r1
    45e0:	dceb      	bgt.n	45ba <__multadd+0x12>
    45e2:	2e00      	cmp	r6, #0
    45e4:	d01b      	beq.n	461e <__multadd+0x76>
    45e6:	68a3      	ldr	r3, [r4, #8]
    45e8:	429d      	cmp	r5, r3
    45ea:	db12      	blt.n	4612 <__multadd+0x6a>
    45ec:	6863      	ldr	r3, [r4, #4]
    45ee:	0038      	movs	r0, r7
    45f0:	1c59      	adds	r1, r3, #1
    45f2:	f7ff ff88 	bl	4506 <_Balloc>
    45f6:	0021      	movs	r1, r4
    45f8:	6923      	ldr	r3, [r4, #16]
    45fa:	9001      	str	r0, [sp, #4]
    45fc:	1c9a      	adds	r2, r3, #2
    45fe:	0092      	lsls	r2, r2, #2
    4600:	310c      	adds	r1, #12
    4602:	300c      	adds	r0, #12
    4604:	f7fe f87c 	bl	2700 <memcpy>
    4608:	0021      	movs	r1, r4
    460a:	0038      	movs	r0, r7
    460c:	f7ff ffb3 	bl	4576 <_Bfree>
    4610:	9c01      	ldr	r4, [sp, #4]
    4612:	1d2b      	adds	r3, r5, #4
    4614:	009b      	lsls	r3, r3, #2
    4616:	18e3      	adds	r3, r4, r3
    4618:	3501      	adds	r5, #1
    461a:	605e      	str	r6, [r3, #4]
    461c:	6125      	str	r5, [r4, #16]
    461e:	0020      	movs	r0, r4
    4620:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00004622 <__hi0bits>:
    4622:	2200      	movs	r2, #0
    4624:	0003      	movs	r3, r0
    4626:	0c01      	lsrs	r1, r0, #16
    4628:	4291      	cmp	r1, r2
    462a:	d101      	bne.n	4630 <__hi0bits+0xe>
    462c:	0403      	lsls	r3, r0, #16
    462e:	3210      	adds	r2, #16
    4630:	0e19      	lsrs	r1, r3, #24
    4632:	d101      	bne.n	4638 <__hi0bits+0x16>
    4634:	3208      	adds	r2, #8
    4636:	021b      	lsls	r3, r3, #8
    4638:	0f19      	lsrs	r1, r3, #28
    463a:	d101      	bne.n	4640 <__hi0bits+0x1e>
    463c:	3204      	adds	r2, #4
    463e:	011b      	lsls	r3, r3, #4
    4640:	0f99      	lsrs	r1, r3, #30
    4642:	d101      	bne.n	4648 <__hi0bits+0x26>
    4644:	3202      	adds	r2, #2
    4646:	009b      	lsls	r3, r3, #2
    4648:	0010      	movs	r0, r2
    464a:	2b00      	cmp	r3, #0
    464c:	db03      	blt.n	4656 <__hi0bits+0x34>
    464e:	2020      	movs	r0, #32
    4650:	005b      	lsls	r3, r3, #1
    4652:	d500      	bpl.n	4656 <__hi0bits+0x34>
    4654:	1c50      	adds	r0, r2, #1
    4656:	4770      	bx	lr

00004658 <__lo0bits>:
    4658:	2207      	movs	r2, #7
    465a:	6803      	ldr	r3, [r0, #0]
    465c:	b510      	push	{r4, lr}
    465e:	0001      	movs	r1, r0
    4660:	401a      	ands	r2, r3
    4662:	d00c      	beq.n	467e <__lo0bits+0x26>
    4664:	2401      	movs	r4, #1
    4666:	2000      	movs	r0, #0
    4668:	4223      	tst	r3, r4
    466a:	d123      	bne.n	46b4 <__lo0bits+0x5c>
    466c:	2202      	movs	r2, #2
    466e:	4213      	tst	r3, r2
    4670:	d003      	beq.n	467a <__lo0bits+0x22>
    4672:	40e3      	lsrs	r3, r4
    4674:	0020      	movs	r0, r4
    4676:	600b      	str	r3, [r1, #0]
    4678:	e01c      	b.n	46b4 <__lo0bits+0x5c>
    467a:	089b      	lsrs	r3, r3, #2
    467c:	e018      	b.n	46b0 <__lo0bits+0x58>
    467e:	b298      	uxth	r0, r3
    4680:	2800      	cmp	r0, #0
    4682:	d101      	bne.n	4688 <__lo0bits+0x30>
    4684:	2210      	movs	r2, #16
    4686:	0c1b      	lsrs	r3, r3, #16
    4688:	b2d8      	uxtb	r0, r3
    468a:	2800      	cmp	r0, #0
    468c:	d101      	bne.n	4692 <__lo0bits+0x3a>
    468e:	3208      	adds	r2, #8
    4690:	0a1b      	lsrs	r3, r3, #8
    4692:	0718      	lsls	r0, r3, #28
    4694:	d101      	bne.n	469a <__lo0bits+0x42>
    4696:	3204      	adds	r2, #4
    4698:	091b      	lsrs	r3, r3, #4
    469a:	0798      	lsls	r0, r3, #30
    469c:	d101      	bne.n	46a2 <__lo0bits+0x4a>
    469e:	3202      	adds	r2, #2
    46a0:	089b      	lsrs	r3, r3, #2
    46a2:	07d8      	lsls	r0, r3, #31
    46a4:	d404      	bmi.n	46b0 <__lo0bits+0x58>
    46a6:	085b      	lsrs	r3, r3, #1
    46a8:	2020      	movs	r0, #32
    46aa:	2b00      	cmp	r3, #0
    46ac:	d002      	beq.n	46b4 <__lo0bits+0x5c>
    46ae:	3201      	adds	r2, #1
    46b0:	0010      	movs	r0, r2
    46b2:	600b      	str	r3, [r1, #0]
    46b4:	bd10      	pop	{r4, pc}

000046b6 <__i2b>:
    46b6:	b510      	push	{r4, lr}
    46b8:	000c      	movs	r4, r1
    46ba:	2101      	movs	r1, #1
    46bc:	f7ff ff23 	bl	4506 <_Balloc>
    46c0:	2301      	movs	r3, #1
    46c2:	6144      	str	r4, [r0, #20]
    46c4:	6103      	str	r3, [r0, #16]
    46c6:	bd10      	pop	{r4, pc}

000046c8 <__multiply>:
    46c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    46ca:	690b      	ldr	r3, [r1, #16]
    46cc:	0014      	movs	r4, r2
    46ce:	6912      	ldr	r2, [r2, #16]
    46d0:	b089      	sub	sp, #36	; 0x24
    46d2:	000d      	movs	r5, r1
    46d4:	4293      	cmp	r3, r2
    46d6:	da01      	bge.n	46dc <__multiply+0x14>
    46d8:	0025      	movs	r5, r4
    46da:	000c      	movs	r4, r1
    46dc:	692f      	ldr	r7, [r5, #16]
    46de:	6926      	ldr	r6, [r4, #16]
    46e0:	68aa      	ldr	r2, [r5, #8]
    46e2:	19bb      	adds	r3, r7, r6
    46e4:	6869      	ldr	r1, [r5, #4]
    46e6:	9301      	str	r3, [sp, #4]
    46e8:	4293      	cmp	r3, r2
    46ea:	dd00      	ble.n	46ee <__multiply+0x26>
    46ec:	3101      	adds	r1, #1
    46ee:	f7ff ff0a 	bl	4506 <_Balloc>
    46f2:	0002      	movs	r2, r0
    46f4:	19bb      	adds	r3, r7, r6
    46f6:	3214      	adds	r2, #20
    46f8:	009b      	lsls	r3, r3, #2
    46fa:	18d3      	adds	r3, r2, r3
    46fc:	469c      	mov	ip, r3
    46fe:	2100      	movs	r1, #0
    4700:	0013      	movs	r3, r2
    4702:	9002      	str	r0, [sp, #8]
    4704:	4563      	cmp	r3, ip
    4706:	d201      	bcs.n	470c <__multiply+0x44>
    4708:	c302      	stmia	r3!, {r1}
    470a:	e7fb      	b.n	4704 <__multiply+0x3c>
    470c:	3514      	adds	r5, #20
    470e:	00bf      	lsls	r7, r7, #2
    4710:	19eb      	adds	r3, r5, r7
    4712:	3414      	adds	r4, #20
    4714:	00b6      	lsls	r6, r6, #2
    4716:	9305      	str	r3, [sp, #20]
    4718:	19a3      	adds	r3, r4, r6
    471a:	9503      	str	r5, [sp, #12]
    471c:	9307      	str	r3, [sp, #28]
    471e:	9b07      	ldr	r3, [sp, #28]
    4720:	429c      	cmp	r4, r3
    4722:	d251      	bcs.n	47c8 <__multiply+0x100>
    4724:	8820      	ldrh	r0, [r4, #0]
    4726:	2800      	cmp	r0, #0
    4728:	d01e      	beq.n	4768 <__multiply+0xa0>
    472a:	0015      	movs	r5, r2
    472c:	2600      	movs	r6, #0
    472e:	9f03      	ldr	r7, [sp, #12]
    4730:	cf08      	ldmia	r7!, {r3}
    4732:	9506      	str	r5, [sp, #24]
    4734:	9304      	str	r3, [sp, #16]
    4736:	466b      	mov	r3, sp
    4738:	8a1b      	ldrh	r3, [r3, #16]
    473a:	4343      	muls	r3, r0
    473c:	0019      	movs	r1, r3
    473e:	882b      	ldrh	r3, [r5, #0]
    4740:	18cb      	adds	r3, r1, r3
    4742:	9904      	ldr	r1, [sp, #16]
    4744:	199b      	adds	r3, r3, r6
    4746:	0c09      	lsrs	r1, r1, #16
    4748:	4341      	muls	r1, r0
    474a:	682e      	ldr	r6, [r5, #0]
    474c:	0c36      	lsrs	r6, r6, #16
    474e:	1989      	adds	r1, r1, r6
    4750:	0c1e      	lsrs	r6, r3, #16
    4752:	1989      	adds	r1, r1, r6
    4754:	0c0e      	lsrs	r6, r1, #16
    4756:	b29b      	uxth	r3, r3
    4758:	0409      	lsls	r1, r1, #16
    475a:	430b      	orrs	r3, r1
    475c:	c508      	stmia	r5!, {r3}
    475e:	9b05      	ldr	r3, [sp, #20]
    4760:	42bb      	cmp	r3, r7
    4762:	d8e5      	bhi.n	4730 <__multiply+0x68>
    4764:	9b06      	ldr	r3, [sp, #24]
    4766:	605e      	str	r6, [r3, #4]
    4768:	6823      	ldr	r3, [r4, #0]
    476a:	0c1d      	lsrs	r5, r3, #16
    476c:	d01f      	beq.n	47ae <__multiply+0xe6>
    476e:	2100      	movs	r1, #0
    4770:	0010      	movs	r0, r2
    4772:	6813      	ldr	r3, [r2, #0]
    4774:	9f03      	ldr	r7, [sp, #12]
    4776:	9104      	str	r1, [sp, #16]
    4778:	883e      	ldrh	r6, [r7, #0]
    477a:	6801      	ldr	r1, [r0, #0]
    477c:	436e      	muls	r6, r5
    477e:	0c09      	lsrs	r1, r1, #16
    4780:	1871      	adds	r1, r6, r1
    4782:	9e04      	ldr	r6, [sp, #16]
    4784:	b29b      	uxth	r3, r3
    4786:	1989      	adds	r1, r1, r6
    4788:	040e      	lsls	r6, r1, #16
    478a:	4333      	orrs	r3, r6
    478c:	6003      	str	r3, [r0, #0]
    478e:	cf08      	ldmia	r7!, {r3}
    4790:	8886      	ldrh	r6, [r0, #4]
    4792:	0c1b      	lsrs	r3, r3, #16
    4794:	436b      	muls	r3, r5
    4796:	0c09      	lsrs	r1, r1, #16
    4798:	199b      	adds	r3, r3, r6
    479a:	185b      	adds	r3, r3, r1
    479c:	0c19      	lsrs	r1, r3, #16
    479e:	9104      	str	r1, [sp, #16]
    47a0:	9905      	ldr	r1, [sp, #20]
    47a2:	9006      	str	r0, [sp, #24]
    47a4:	3004      	adds	r0, #4
    47a6:	42b9      	cmp	r1, r7
    47a8:	d8e6      	bhi.n	4778 <__multiply+0xb0>
    47aa:	9906      	ldr	r1, [sp, #24]
    47ac:	604b      	str	r3, [r1, #4]
    47ae:	3404      	adds	r4, #4
    47b0:	3204      	adds	r2, #4
    47b2:	e7b4      	b.n	471e <__multiply+0x56>
    47b4:	2304      	movs	r3, #4
    47b6:	425b      	negs	r3, r3
    47b8:	449c      	add	ip, r3
    47ba:	4663      	mov	r3, ip
    47bc:	681b      	ldr	r3, [r3, #0]
    47be:	2b00      	cmp	r3, #0
    47c0:	d105      	bne.n	47ce <__multiply+0x106>
    47c2:	9b01      	ldr	r3, [sp, #4]
    47c4:	3b01      	subs	r3, #1
    47c6:	9301      	str	r3, [sp, #4]
    47c8:	9b01      	ldr	r3, [sp, #4]
    47ca:	2b00      	cmp	r3, #0
    47cc:	dcf2      	bgt.n	47b4 <__multiply+0xec>
    47ce:	9b02      	ldr	r3, [sp, #8]
    47d0:	9a01      	ldr	r2, [sp, #4]
    47d2:	0018      	movs	r0, r3
    47d4:	611a      	str	r2, [r3, #16]
    47d6:	b009      	add	sp, #36	; 0x24
    47d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000047dc <__pow5mult>:
    47dc:	2303      	movs	r3, #3
    47de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    47e0:	4013      	ands	r3, r2
    47e2:	0005      	movs	r5, r0
    47e4:	000e      	movs	r6, r1
    47e6:	0014      	movs	r4, r2
    47e8:	2b00      	cmp	r3, #0
    47ea:	d008      	beq.n	47fe <__pow5mult+0x22>
    47ec:	4923      	ldr	r1, [pc, #140]	; (487c <__pow5mult+0xa0>)
    47ee:	3b01      	subs	r3, #1
    47f0:	009a      	lsls	r2, r3, #2
    47f2:	5852      	ldr	r2, [r2, r1]
    47f4:	2300      	movs	r3, #0
    47f6:	0031      	movs	r1, r6
    47f8:	f7ff fed6 	bl	45a8 <__multadd>
    47fc:	0006      	movs	r6, r0
    47fe:	10a3      	asrs	r3, r4, #2
    4800:	9301      	str	r3, [sp, #4]
    4802:	d038      	beq.n	4876 <__pow5mult+0x9a>
    4804:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    4806:	2c00      	cmp	r4, #0
    4808:	d107      	bne.n	481a <__pow5mult+0x3e>
    480a:	2010      	movs	r0, #16
    480c:	f7ff fe66 	bl	44dc <malloc>
    4810:	6268      	str	r0, [r5, #36]	; 0x24
    4812:	6044      	str	r4, [r0, #4]
    4814:	6084      	str	r4, [r0, #8]
    4816:	6004      	str	r4, [r0, #0]
    4818:	60c4      	str	r4, [r0, #12]
    481a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    481c:	68bc      	ldr	r4, [r7, #8]
    481e:	2c00      	cmp	r4, #0
    4820:	d110      	bne.n	4844 <__pow5mult+0x68>
    4822:	4917      	ldr	r1, [pc, #92]	; (4880 <__pow5mult+0xa4>)
    4824:	0028      	movs	r0, r5
    4826:	f7ff ff46 	bl	46b6 <__i2b>
    482a:	2300      	movs	r3, #0
    482c:	60b8      	str	r0, [r7, #8]
    482e:	0004      	movs	r4, r0
    4830:	6003      	str	r3, [r0, #0]
    4832:	e007      	b.n	4844 <__pow5mult+0x68>
    4834:	9b01      	ldr	r3, [sp, #4]
    4836:	105b      	asrs	r3, r3, #1
    4838:	9301      	str	r3, [sp, #4]
    483a:	d01c      	beq.n	4876 <__pow5mult+0x9a>
    483c:	6820      	ldr	r0, [r4, #0]
    483e:	2800      	cmp	r0, #0
    4840:	d010      	beq.n	4864 <__pow5mult+0x88>
    4842:	0004      	movs	r4, r0
    4844:	2201      	movs	r2, #1
    4846:	9b01      	ldr	r3, [sp, #4]
    4848:	4213      	tst	r3, r2
    484a:	d0f3      	beq.n	4834 <__pow5mult+0x58>
    484c:	0031      	movs	r1, r6
    484e:	0022      	movs	r2, r4
    4850:	0028      	movs	r0, r5
    4852:	f7ff ff39 	bl	46c8 <__multiply>
    4856:	0007      	movs	r7, r0
    4858:	0031      	movs	r1, r6
    485a:	0028      	movs	r0, r5
    485c:	f7ff fe8b 	bl	4576 <_Bfree>
    4860:	003e      	movs	r6, r7
    4862:	e7e7      	b.n	4834 <__pow5mult+0x58>
    4864:	0022      	movs	r2, r4
    4866:	0021      	movs	r1, r4
    4868:	0028      	movs	r0, r5
    486a:	f7ff ff2d 	bl	46c8 <__multiply>
    486e:	2300      	movs	r3, #0
    4870:	6020      	str	r0, [r4, #0]
    4872:	6003      	str	r3, [r0, #0]
    4874:	e7e5      	b.n	4842 <__pow5mult+0x66>
    4876:	0030      	movs	r0, r6
    4878:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    487a:	46c0      	nop			; (mov r8, r8)
    487c:	00007360 	.word	0x00007360
    4880:	00000271 	.word	0x00000271

00004884 <__lshift>:
    4884:	b5f0      	push	{r4, r5, r6, r7, lr}
    4886:	000c      	movs	r4, r1
    4888:	0017      	movs	r7, r2
    488a:	6923      	ldr	r3, [r4, #16]
    488c:	1155      	asrs	r5, r2, #5
    488e:	b085      	sub	sp, #20
    4890:	18eb      	adds	r3, r5, r3
    4892:	9301      	str	r3, [sp, #4]
    4894:	3301      	adds	r3, #1
    4896:	9300      	str	r3, [sp, #0]
    4898:	6849      	ldr	r1, [r1, #4]
    489a:	68a3      	ldr	r3, [r4, #8]
    489c:	9002      	str	r0, [sp, #8]
    489e:	9a00      	ldr	r2, [sp, #0]
    48a0:	4293      	cmp	r3, r2
    48a2:	da02      	bge.n	48aa <__lshift+0x26>
    48a4:	3101      	adds	r1, #1
    48a6:	005b      	lsls	r3, r3, #1
    48a8:	e7f9      	b.n	489e <__lshift+0x1a>
    48aa:	9802      	ldr	r0, [sp, #8]
    48ac:	f7ff fe2b 	bl	4506 <_Balloc>
    48b0:	2300      	movs	r3, #0
    48b2:	0002      	movs	r2, r0
    48b4:	0006      	movs	r6, r0
    48b6:	0019      	movs	r1, r3
    48b8:	3214      	adds	r2, #20
    48ba:	42ab      	cmp	r3, r5
    48bc:	da03      	bge.n	48c6 <__lshift+0x42>
    48be:	0098      	lsls	r0, r3, #2
    48c0:	5011      	str	r1, [r2, r0]
    48c2:	3301      	adds	r3, #1
    48c4:	e7f9      	b.n	48ba <__lshift+0x36>
    48c6:	43eb      	mvns	r3, r5
    48c8:	17db      	asrs	r3, r3, #31
    48ca:	401d      	ands	r5, r3
    48cc:	0023      	movs	r3, r4
    48ce:	00ad      	lsls	r5, r5, #2
    48d0:	1955      	adds	r5, r2, r5
    48d2:	6922      	ldr	r2, [r4, #16]
    48d4:	3314      	adds	r3, #20
    48d6:	0092      	lsls	r2, r2, #2
    48d8:	189a      	adds	r2, r3, r2
    48da:	4694      	mov	ip, r2
    48dc:	221f      	movs	r2, #31
    48de:	4017      	ands	r7, r2
    48e0:	d014      	beq.n	490c <__lshift+0x88>
    48e2:	3201      	adds	r2, #1
    48e4:	1bd2      	subs	r2, r2, r7
    48e6:	9203      	str	r2, [sp, #12]
    48e8:	2200      	movs	r2, #0
    48ea:	6819      	ldr	r1, [r3, #0]
    48ec:	0028      	movs	r0, r5
    48ee:	40b9      	lsls	r1, r7
    48f0:	430a      	orrs	r2, r1
    48f2:	c504      	stmia	r5!, {r2}
    48f4:	cb04      	ldmia	r3!, {r2}
    48f6:	9903      	ldr	r1, [sp, #12]
    48f8:	40ca      	lsrs	r2, r1
    48fa:	459c      	cmp	ip, r3
    48fc:	d8f5      	bhi.n	48ea <__lshift+0x66>
    48fe:	6042      	str	r2, [r0, #4]
    4900:	2a00      	cmp	r2, #0
    4902:	d007      	beq.n	4914 <__lshift+0x90>
    4904:	9b01      	ldr	r3, [sp, #4]
    4906:	3302      	adds	r3, #2
    4908:	9300      	str	r3, [sp, #0]
    490a:	e003      	b.n	4914 <__lshift+0x90>
    490c:	cb04      	ldmia	r3!, {r2}
    490e:	c504      	stmia	r5!, {r2}
    4910:	459c      	cmp	ip, r3
    4912:	d8fb      	bhi.n	490c <__lshift+0x88>
    4914:	9b00      	ldr	r3, [sp, #0]
    4916:	9802      	ldr	r0, [sp, #8]
    4918:	3b01      	subs	r3, #1
    491a:	6133      	str	r3, [r6, #16]
    491c:	0021      	movs	r1, r4
    491e:	f7ff fe2a 	bl	4576 <_Bfree>
    4922:	0030      	movs	r0, r6
    4924:	b005      	add	sp, #20
    4926:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004928 <__mcmp>:
    4928:	6903      	ldr	r3, [r0, #16]
    492a:	690a      	ldr	r2, [r1, #16]
    492c:	b510      	push	{r4, lr}
    492e:	1a9b      	subs	r3, r3, r2
    4930:	0004      	movs	r4, r0
    4932:	1e18      	subs	r0, r3, #0
    4934:	d112      	bne.n	495c <__mcmp+0x34>
    4936:	0093      	lsls	r3, r2, #2
    4938:	3414      	adds	r4, #20
    493a:	3114      	adds	r1, #20
    493c:	18e2      	adds	r2, r4, r3
    493e:	18c9      	adds	r1, r1, r3
    4940:	3a04      	subs	r2, #4
    4942:	3904      	subs	r1, #4
    4944:	6813      	ldr	r3, [r2, #0]
    4946:	6808      	ldr	r0, [r1, #0]
    4948:	4283      	cmp	r3, r0
    494a:	d004      	beq.n	4956 <__mcmp+0x2e>
    494c:	4283      	cmp	r3, r0
    494e:	419b      	sbcs	r3, r3
    4950:	2001      	movs	r0, #1
    4952:	4318      	orrs	r0, r3
    4954:	e002      	b.n	495c <__mcmp+0x34>
    4956:	4294      	cmp	r4, r2
    4958:	d3f2      	bcc.n	4940 <__mcmp+0x18>
    495a:	2000      	movs	r0, #0
    495c:	bd10      	pop	{r4, pc}

0000495e <__mdiff>:
    495e:	b5f0      	push	{r4, r5, r6, r7, lr}
    4960:	000c      	movs	r4, r1
    4962:	b085      	sub	sp, #20
    4964:	0007      	movs	r7, r0
    4966:	0011      	movs	r1, r2
    4968:	0020      	movs	r0, r4
    496a:	0015      	movs	r5, r2
    496c:	f7ff ffdc 	bl	4928 <__mcmp>
    4970:	1e06      	subs	r6, r0, #0
    4972:	d107      	bne.n	4984 <__mdiff+0x26>
    4974:	0001      	movs	r1, r0
    4976:	0038      	movs	r0, r7
    4978:	f7ff fdc5 	bl	4506 <_Balloc>
    497c:	2301      	movs	r3, #1
    497e:	6146      	str	r6, [r0, #20]
    4980:	6103      	str	r3, [r0, #16]
    4982:	e055      	b.n	4a30 <__mdiff+0xd2>
    4984:	2300      	movs	r3, #0
    4986:	9301      	str	r3, [sp, #4]
    4988:	4298      	cmp	r0, r3
    498a:	da04      	bge.n	4996 <__mdiff+0x38>
    498c:	0023      	movs	r3, r4
    498e:	002c      	movs	r4, r5
    4990:	001d      	movs	r5, r3
    4992:	2301      	movs	r3, #1
    4994:	9301      	str	r3, [sp, #4]
    4996:	6861      	ldr	r1, [r4, #4]
    4998:	0038      	movs	r0, r7
    499a:	f7ff fdb4 	bl	4506 <_Balloc>
    499e:	9b01      	ldr	r3, [sp, #4]
    49a0:	6926      	ldr	r6, [r4, #16]
    49a2:	002f      	movs	r7, r5
    49a4:	60c3      	str	r3, [r0, #12]
    49a6:	3414      	adds	r4, #20
    49a8:	00b3      	lsls	r3, r6, #2
    49aa:	18e3      	adds	r3, r4, r3
    49ac:	0002      	movs	r2, r0
    49ae:	9302      	str	r3, [sp, #8]
    49b0:	692b      	ldr	r3, [r5, #16]
    49b2:	2500      	movs	r5, #0
    49b4:	3714      	adds	r7, #20
    49b6:	009b      	lsls	r3, r3, #2
    49b8:	18fb      	adds	r3, r7, r3
    49ba:	9303      	str	r3, [sp, #12]
    49bc:	3214      	adds	r2, #20
    49be:	cc08      	ldmia	r4!, {r3}
    49c0:	4669      	mov	r1, sp
    49c2:	469c      	mov	ip, r3
    49c4:	cf08      	ldmia	r7!, {r3}
    49c6:	3204      	adds	r2, #4
    49c8:	9300      	str	r3, [sp, #0]
    49ca:	4663      	mov	r3, ip
    49cc:	808b      	strh	r3, [r1, #4]
    49ce:	888b      	ldrh	r3, [r1, #4]
    49d0:	195d      	adds	r5, r3, r5
    49d2:	9b00      	ldr	r3, [sp, #0]
    49d4:	b29b      	uxth	r3, r3
    49d6:	1aeb      	subs	r3, r5, r3
    49d8:	4665      	mov	r5, ip
    49da:	9301      	str	r3, [sp, #4]
    49dc:	9b00      	ldr	r3, [sp, #0]
    49de:	0c2d      	lsrs	r5, r5, #16
    49e0:	0c19      	lsrs	r1, r3, #16
    49e2:	9b01      	ldr	r3, [sp, #4]
    49e4:	1a69      	subs	r1, r5, r1
    49e6:	141d      	asrs	r5, r3, #16
    49e8:	1f13      	subs	r3, r2, #4
    49ea:	469c      	mov	ip, r3
    49ec:	466b      	mov	r3, sp
    49ee:	1949      	adds	r1, r1, r5
    49f0:	889b      	ldrh	r3, [r3, #4]
    49f2:	140d      	asrs	r5, r1, #16
    49f4:	0409      	lsls	r1, r1, #16
    49f6:	430b      	orrs	r3, r1
    49f8:	4661      	mov	r1, ip
    49fa:	600b      	str	r3, [r1, #0]
    49fc:	9b03      	ldr	r3, [sp, #12]
    49fe:	42bb      	cmp	r3, r7
    4a00:	d8dd      	bhi.n	49be <__mdiff+0x60>
    4a02:	9902      	ldr	r1, [sp, #8]
    4a04:	0013      	movs	r3, r2
    4a06:	428c      	cmp	r4, r1
    4a08:	d20b      	bcs.n	4a22 <__mdiff+0xc4>
    4a0a:	cc02      	ldmia	r4!, {r1}
    4a0c:	b28b      	uxth	r3, r1
    4a0e:	195b      	adds	r3, r3, r5
    4a10:	141d      	asrs	r5, r3, #16
    4a12:	0c09      	lsrs	r1, r1, #16
    4a14:	1949      	adds	r1, r1, r5
    4a16:	140d      	asrs	r5, r1, #16
    4a18:	b29b      	uxth	r3, r3
    4a1a:	0409      	lsls	r1, r1, #16
    4a1c:	430b      	orrs	r3, r1
    4a1e:	c208      	stmia	r2!, {r3}
    4a20:	e7ef      	b.n	4a02 <__mdiff+0xa4>
    4a22:	3b04      	subs	r3, #4
    4a24:	681a      	ldr	r2, [r3, #0]
    4a26:	2a00      	cmp	r2, #0
    4a28:	d101      	bne.n	4a2e <__mdiff+0xd0>
    4a2a:	3e01      	subs	r6, #1
    4a2c:	e7f9      	b.n	4a22 <__mdiff+0xc4>
    4a2e:	6106      	str	r6, [r0, #16]
    4a30:	b005      	add	sp, #20
    4a32:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004a34 <__d2b>:
    4a34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4a36:	001d      	movs	r5, r3
    4a38:	2101      	movs	r1, #1
    4a3a:	9f08      	ldr	r7, [sp, #32]
    4a3c:	0014      	movs	r4, r2
    4a3e:	f7ff fd62 	bl	4506 <_Balloc>
    4a42:	032b      	lsls	r3, r5, #12
    4a44:	006d      	lsls	r5, r5, #1
    4a46:	0006      	movs	r6, r0
    4a48:	0b1b      	lsrs	r3, r3, #12
    4a4a:	0d6d      	lsrs	r5, r5, #21
    4a4c:	d002      	beq.n	4a54 <__d2b+0x20>
    4a4e:	2280      	movs	r2, #128	; 0x80
    4a50:	0352      	lsls	r2, r2, #13
    4a52:	4313      	orrs	r3, r2
    4a54:	9301      	str	r3, [sp, #4]
    4a56:	2c00      	cmp	r4, #0
    4a58:	d018      	beq.n	4a8c <__d2b+0x58>
    4a5a:	4668      	mov	r0, sp
    4a5c:	9400      	str	r4, [sp, #0]
    4a5e:	f7ff fdfb 	bl	4658 <__lo0bits>
    4a62:	9c00      	ldr	r4, [sp, #0]
    4a64:	2800      	cmp	r0, #0
    4a66:	d009      	beq.n	4a7c <__d2b+0x48>
    4a68:	9b01      	ldr	r3, [sp, #4]
    4a6a:	2120      	movs	r1, #32
    4a6c:	001a      	movs	r2, r3
    4a6e:	1a09      	subs	r1, r1, r0
    4a70:	408a      	lsls	r2, r1
    4a72:	40c3      	lsrs	r3, r0
    4a74:	4322      	orrs	r2, r4
    4a76:	6172      	str	r2, [r6, #20]
    4a78:	9301      	str	r3, [sp, #4]
    4a7a:	e000      	b.n	4a7e <__d2b+0x4a>
    4a7c:	6174      	str	r4, [r6, #20]
    4a7e:	9c01      	ldr	r4, [sp, #4]
    4a80:	61b4      	str	r4, [r6, #24]
    4a82:	1e63      	subs	r3, r4, #1
    4a84:	419c      	sbcs	r4, r3
    4a86:	3401      	adds	r4, #1
    4a88:	6134      	str	r4, [r6, #16]
    4a8a:	e007      	b.n	4a9c <__d2b+0x68>
    4a8c:	a801      	add	r0, sp, #4
    4a8e:	f7ff fde3 	bl	4658 <__lo0bits>
    4a92:	2401      	movs	r4, #1
    4a94:	9b01      	ldr	r3, [sp, #4]
    4a96:	6134      	str	r4, [r6, #16]
    4a98:	6173      	str	r3, [r6, #20]
    4a9a:	3020      	adds	r0, #32
    4a9c:	2d00      	cmp	r5, #0
    4a9e:	d006      	beq.n	4aae <__d2b+0x7a>
    4aa0:	4b0b      	ldr	r3, [pc, #44]	; (4ad0 <__d2b+0x9c>)
    4aa2:	18ed      	adds	r5, r5, r3
    4aa4:	2335      	movs	r3, #53	; 0x35
    4aa6:	182d      	adds	r5, r5, r0
    4aa8:	603d      	str	r5, [r7, #0]
    4aaa:	1a18      	subs	r0, r3, r0
    4aac:	e00b      	b.n	4ac6 <__d2b+0x92>
    4aae:	4b09      	ldr	r3, [pc, #36]	; (4ad4 <__d2b+0xa0>)
    4ab0:	18c0      	adds	r0, r0, r3
    4ab2:	4b09      	ldr	r3, [pc, #36]	; (4ad8 <__d2b+0xa4>)
    4ab4:	6038      	str	r0, [r7, #0]
    4ab6:	18e3      	adds	r3, r4, r3
    4ab8:	009b      	lsls	r3, r3, #2
    4aba:	18f3      	adds	r3, r6, r3
    4abc:	6958      	ldr	r0, [r3, #20]
    4abe:	f7ff fdb0 	bl	4622 <__hi0bits>
    4ac2:	0164      	lsls	r4, r4, #5
    4ac4:	1a20      	subs	r0, r4, r0
    4ac6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4ac8:	6018      	str	r0, [r3, #0]
    4aca:	0030      	movs	r0, r6
    4acc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4ace:	46c0      	nop			; (mov r8, r8)
    4ad0:	fffffbcd 	.word	0xfffffbcd
    4ad4:	fffffbce 	.word	0xfffffbce
    4ad8:	3fffffff 	.word	0x3fffffff

00004adc <_calloc_r>:
    4adc:	434a      	muls	r2, r1
    4ade:	b570      	push	{r4, r5, r6, lr}
    4ae0:	0011      	movs	r1, r2
    4ae2:	0014      	movs	r4, r2
    4ae4:	f000 f84e 	bl	4b84 <_malloc_r>
    4ae8:	1e05      	subs	r5, r0, #0
    4aea:	d003      	beq.n	4af4 <_calloc_r+0x18>
    4aec:	0022      	movs	r2, r4
    4aee:	2100      	movs	r1, #0
    4af0:	f7fd fe0f 	bl	2712 <memset>
    4af4:	0028      	movs	r0, r5
    4af6:	bd70      	pop	{r4, r5, r6, pc}

00004af8 <_free_r>:
    4af8:	b530      	push	{r4, r5, lr}
    4afa:	2900      	cmp	r1, #0
    4afc:	d03e      	beq.n	4b7c <_free_r+0x84>
    4afe:	3904      	subs	r1, #4
    4b00:	680b      	ldr	r3, [r1, #0]
    4b02:	2b00      	cmp	r3, #0
    4b04:	da00      	bge.n	4b08 <_free_r+0x10>
    4b06:	18c9      	adds	r1, r1, r3
    4b08:	4a1d      	ldr	r2, [pc, #116]	; (4b80 <_free_r+0x88>)
    4b0a:	6813      	ldr	r3, [r2, #0]
    4b0c:	0014      	movs	r4, r2
    4b0e:	2b00      	cmp	r3, #0
    4b10:	d102      	bne.n	4b18 <_free_r+0x20>
    4b12:	604b      	str	r3, [r1, #4]
    4b14:	6011      	str	r1, [r2, #0]
    4b16:	e031      	b.n	4b7c <_free_r+0x84>
    4b18:	428b      	cmp	r3, r1
    4b1a:	d90d      	bls.n	4b38 <_free_r+0x40>
    4b1c:	680a      	ldr	r2, [r1, #0]
    4b1e:	1888      	adds	r0, r1, r2
    4b20:	4283      	cmp	r3, r0
    4b22:	d103      	bne.n	4b2c <_free_r+0x34>
    4b24:	6818      	ldr	r0, [r3, #0]
    4b26:	685b      	ldr	r3, [r3, #4]
    4b28:	1882      	adds	r2, r0, r2
    4b2a:	600a      	str	r2, [r1, #0]
    4b2c:	604b      	str	r3, [r1, #4]
    4b2e:	6021      	str	r1, [r4, #0]
    4b30:	e024      	b.n	4b7c <_free_r+0x84>
    4b32:	428a      	cmp	r2, r1
    4b34:	d803      	bhi.n	4b3e <_free_r+0x46>
    4b36:	0013      	movs	r3, r2
    4b38:	685a      	ldr	r2, [r3, #4]
    4b3a:	2a00      	cmp	r2, #0
    4b3c:	d1f9      	bne.n	4b32 <_free_r+0x3a>
    4b3e:	681d      	ldr	r5, [r3, #0]
    4b40:	195c      	adds	r4, r3, r5
    4b42:	428c      	cmp	r4, r1
    4b44:	d10b      	bne.n	4b5e <_free_r+0x66>
    4b46:	6809      	ldr	r1, [r1, #0]
    4b48:	1869      	adds	r1, r5, r1
    4b4a:	1858      	adds	r0, r3, r1
    4b4c:	6019      	str	r1, [r3, #0]
    4b4e:	4282      	cmp	r2, r0
    4b50:	d114      	bne.n	4b7c <_free_r+0x84>
    4b52:	6810      	ldr	r0, [r2, #0]
    4b54:	6852      	ldr	r2, [r2, #4]
    4b56:	1841      	adds	r1, r0, r1
    4b58:	6019      	str	r1, [r3, #0]
    4b5a:	605a      	str	r2, [r3, #4]
    4b5c:	e00e      	b.n	4b7c <_free_r+0x84>
    4b5e:	428c      	cmp	r4, r1
    4b60:	d902      	bls.n	4b68 <_free_r+0x70>
    4b62:	230c      	movs	r3, #12
    4b64:	6003      	str	r3, [r0, #0]
    4b66:	e009      	b.n	4b7c <_free_r+0x84>
    4b68:	6808      	ldr	r0, [r1, #0]
    4b6a:	180c      	adds	r4, r1, r0
    4b6c:	42a2      	cmp	r2, r4
    4b6e:	d103      	bne.n	4b78 <_free_r+0x80>
    4b70:	6814      	ldr	r4, [r2, #0]
    4b72:	6852      	ldr	r2, [r2, #4]
    4b74:	1820      	adds	r0, r4, r0
    4b76:	6008      	str	r0, [r1, #0]
    4b78:	604a      	str	r2, [r1, #4]
    4b7a:	6059      	str	r1, [r3, #4]
    4b7c:	bd30      	pop	{r4, r5, pc}
    4b7e:	46c0      	nop			; (mov r8, r8)
    4b80:	20000108 	.word	0x20000108

00004b84 <_malloc_r>:
    4b84:	2303      	movs	r3, #3
    4b86:	b570      	push	{r4, r5, r6, lr}
    4b88:	1ccd      	adds	r5, r1, #3
    4b8a:	439d      	bics	r5, r3
    4b8c:	3508      	adds	r5, #8
    4b8e:	0006      	movs	r6, r0
    4b90:	2d0c      	cmp	r5, #12
    4b92:	d201      	bcs.n	4b98 <_malloc_r+0x14>
    4b94:	250c      	movs	r5, #12
    4b96:	e005      	b.n	4ba4 <_malloc_r+0x20>
    4b98:	2d00      	cmp	r5, #0
    4b9a:	da03      	bge.n	4ba4 <_malloc_r+0x20>
    4b9c:	230c      	movs	r3, #12
    4b9e:	2000      	movs	r0, #0
    4ba0:	6033      	str	r3, [r6, #0]
    4ba2:	e040      	b.n	4c26 <_malloc_r+0xa2>
    4ba4:	42a9      	cmp	r1, r5
    4ba6:	d8f9      	bhi.n	4b9c <_malloc_r+0x18>
    4ba8:	4b1f      	ldr	r3, [pc, #124]	; (4c28 <_malloc_r+0xa4>)
    4baa:	681c      	ldr	r4, [r3, #0]
    4bac:	001a      	movs	r2, r3
    4bae:	0021      	movs	r1, r4
    4bb0:	2900      	cmp	r1, #0
    4bb2:	d013      	beq.n	4bdc <_malloc_r+0x58>
    4bb4:	680b      	ldr	r3, [r1, #0]
    4bb6:	1b5b      	subs	r3, r3, r5
    4bb8:	d40d      	bmi.n	4bd6 <_malloc_r+0x52>
    4bba:	2b0b      	cmp	r3, #11
    4bbc:	d902      	bls.n	4bc4 <_malloc_r+0x40>
    4bbe:	600b      	str	r3, [r1, #0]
    4bc0:	18cc      	adds	r4, r1, r3
    4bc2:	e01e      	b.n	4c02 <_malloc_r+0x7e>
    4bc4:	428c      	cmp	r4, r1
    4bc6:	d102      	bne.n	4bce <_malloc_r+0x4a>
    4bc8:	6863      	ldr	r3, [r4, #4]
    4bca:	6013      	str	r3, [r2, #0]
    4bcc:	e01a      	b.n	4c04 <_malloc_r+0x80>
    4bce:	684b      	ldr	r3, [r1, #4]
    4bd0:	6063      	str	r3, [r4, #4]
    4bd2:	000c      	movs	r4, r1
    4bd4:	e016      	b.n	4c04 <_malloc_r+0x80>
    4bd6:	000c      	movs	r4, r1
    4bd8:	6849      	ldr	r1, [r1, #4]
    4bda:	e7e9      	b.n	4bb0 <_malloc_r+0x2c>
    4bdc:	4c13      	ldr	r4, [pc, #76]	; (4c2c <_malloc_r+0xa8>)
    4bde:	6823      	ldr	r3, [r4, #0]
    4be0:	2b00      	cmp	r3, #0
    4be2:	d103      	bne.n	4bec <_malloc_r+0x68>
    4be4:	0030      	movs	r0, r6
    4be6:	f000 f99d 	bl	4f24 <_sbrk_r>
    4bea:	6020      	str	r0, [r4, #0]
    4bec:	0029      	movs	r1, r5
    4bee:	0030      	movs	r0, r6
    4bf0:	f000 f998 	bl	4f24 <_sbrk_r>
    4bf4:	1c43      	adds	r3, r0, #1
    4bf6:	d0d1      	beq.n	4b9c <_malloc_r+0x18>
    4bf8:	2303      	movs	r3, #3
    4bfa:	1cc4      	adds	r4, r0, #3
    4bfc:	439c      	bics	r4, r3
    4bfe:	42a0      	cmp	r0, r4
    4c00:	d10a      	bne.n	4c18 <_malloc_r+0x94>
    4c02:	6025      	str	r5, [r4, #0]
    4c04:	0020      	movs	r0, r4
    4c06:	2207      	movs	r2, #7
    4c08:	300b      	adds	r0, #11
    4c0a:	1d23      	adds	r3, r4, #4
    4c0c:	4390      	bics	r0, r2
    4c0e:	1ac3      	subs	r3, r0, r3
    4c10:	d009      	beq.n	4c26 <_malloc_r+0xa2>
    4c12:	425a      	negs	r2, r3
    4c14:	50e2      	str	r2, [r4, r3]
    4c16:	e006      	b.n	4c26 <_malloc_r+0xa2>
    4c18:	1a21      	subs	r1, r4, r0
    4c1a:	0030      	movs	r0, r6
    4c1c:	f000 f982 	bl	4f24 <_sbrk_r>
    4c20:	1c43      	adds	r3, r0, #1
    4c22:	d1ee      	bne.n	4c02 <_malloc_r+0x7e>
    4c24:	e7ba      	b.n	4b9c <_malloc_r+0x18>
    4c26:	bd70      	pop	{r4, r5, r6, pc}
    4c28:	20000108 	.word	0x20000108
    4c2c:	20000104 	.word	0x20000104

00004c30 <__sfputc_r>:
    4c30:	6893      	ldr	r3, [r2, #8]
    4c32:	b510      	push	{r4, lr}
    4c34:	3b01      	subs	r3, #1
    4c36:	6093      	str	r3, [r2, #8]
    4c38:	2b00      	cmp	r3, #0
    4c3a:	da05      	bge.n	4c48 <__sfputc_r+0x18>
    4c3c:	6994      	ldr	r4, [r2, #24]
    4c3e:	42a3      	cmp	r3, r4
    4c40:	db08      	blt.n	4c54 <__sfputc_r+0x24>
    4c42:	b2cb      	uxtb	r3, r1
    4c44:	2b0a      	cmp	r3, #10
    4c46:	d005      	beq.n	4c54 <__sfputc_r+0x24>
    4c48:	6813      	ldr	r3, [r2, #0]
    4c4a:	1c58      	adds	r0, r3, #1
    4c4c:	6010      	str	r0, [r2, #0]
    4c4e:	7019      	strb	r1, [r3, #0]
    4c50:	b2c8      	uxtb	r0, r1
    4c52:	e001      	b.n	4c58 <__sfputc_r+0x28>
    4c54:	f7fe fb38 	bl	32c8 <__swbuf_r>
    4c58:	bd10      	pop	{r4, pc}

00004c5a <__sfputs_r>:
    4c5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4c5c:	0006      	movs	r6, r0
    4c5e:	000f      	movs	r7, r1
    4c60:	0014      	movs	r4, r2
    4c62:	18d5      	adds	r5, r2, r3
    4c64:	42ac      	cmp	r4, r5
    4c66:	d008      	beq.n	4c7a <__sfputs_r+0x20>
    4c68:	7821      	ldrb	r1, [r4, #0]
    4c6a:	003a      	movs	r2, r7
    4c6c:	0030      	movs	r0, r6
    4c6e:	f7ff ffdf 	bl	4c30 <__sfputc_r>
    4c72:	3401      	adds	r4, #1
    4c74:	1c43      	adds	r3, r0, #1
    4c76:	d1f5      	bne.n	4c64 <__sfputs_r+0xa>
    4c78:	e000      	b.n	4c7c <__sfputs_r+0x22>
    4c7a:	2000      	movs	r0, #0
    4c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00004c80 <_vfiprintf_r>:
    4c80:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c82:	b09f      	sub	sp, #124	; 0x7c
    4c84:	0006      	movs	r6, r0
    4c86:	000f      	movs	r7, r1
    4c88:	9202      	str	r2, [sp, #8]
    4c8a:	9305      	str	r3, [sp, #20]
    4c8c:	2800      	cmp	r0, #0
    4c8e:	d004      	beq.n	4c9a <_vfiprintf_r+0x1a>
    4c90:	6983      	ldr	r3, [r0, #24]
    4c92:	2b00      	cmp	r3, #0
    4c94:	d101      	bne.n	4c9a <_vfiprintf_r+0x1a>
    4c96:	f7ff fb25 	bl	42e4 <__sinit>
    4c9a:	4b7f      	ldr	r3, [pc, #508]	; (4e98 <_vfiprintf_r+0x218>)
    4c9c:	429f      	cmp	r7, r3
    4c9e:	d101      	bne.n	4ca4 <_vfiprintf_r+0x24>
    4ca0:	6877      	ldr	r7, [r6, #4]
    4ca2:	e008      	b.n	4cb6 <_vfiprintf_r+0x36>
    4ca4:	4b7d      	ldr	r3, [pc, #500]	; (4e9c <_vfiprintf_r+0x21c>)
    4ca6:	429f      	cmp	r7, r3
    4ca8:	d101      	bne.n	4cae <_vfiprintf_r+0x2e>
    4caa:	68b7      	ldr	r7, [r6, #8]
    4cac:	e003      	b.n	4cb6 <_vfiprintf_r+0x36>
    4cae:	4b7c      	ldr	r3, [pc, #496]	; (4ea0 <_vfiprintf_r+0x220>)
    4cb0:	429f      	cmp	r7, r3
    4cb2:	d100      	bne.n	4cb6 <_vfiprintf_r+0x36>
    4cb4:	68f7      	ldr	r7, [r6, #12]
    4cb6:	89bb      	ldrh	r3, [r7, #12]
    4cb8:	071b      	lsls	r3, r3, #28
    4cba:	d50a      	bpl.n	4cd2 <_vfiprintf_r+0x52>
    4cbc:	693b      	ldr	r3, [r7, #16]
    4cbe:	2b00      	cmp	r3, #0
    4cc0:	d007      	beq.n	4cd2 <_vfiprintf_r+0x52>
    4cc2:	2300      	movs	r3, #0
    4cc4:	ad06      	add	r5, sp, #24
    4cc6:	616b      	str	r3, [r5, #20]
    4cc8:	3320      	adds	r3, #32
    4cca:	766b      	strb	r3, [r5, #25]
    4ccc:	3310      	adds	r3, #16
    4cce:	76ab      	strb	r3, [r5, #26]
    4cd0:	e03d      	b.n	4d4e <_vfiprintf_r+0xce>
    4cd2:	0039      	movs	r1, r7
    4cd4:	0030      	movs	r0, r6
    4cd6:	f7fe fb4f 	bl	3378 <__swsetup_r>
    4cda:	2800      	cmp	r0, #0
    4cdc:	d0f1      	beq.n	4cc2 <_vfiprintf_r+0x42>
    4cde:	2001      	movs	r0, #1
    4ce0:	4240      	negs	r0, r0
    4ce2:	e0d6      	b.n	4e92 <_vfiprintf_r+0x212>
    4ce4:	9a05      	ldr	r2, [sp, #20]
    4ce6:	1d11      	adds	r1, r2, #4
    4ce8:	6812      	ldr	r2, [r2, #0]
    4cea:	9105      	str	r1, [sp, #20]
    4cec:	2a00      	cmp	r2, #0
    4cee:	da00      	bge.n	4cf2 <_vfiprintf_r+0x72>
    4cf0:	e07f      	b.n	4df2 <_vfiprintf_r+0x172>
    4cf2:	9209      	str	r2, [sp, #36]	; 0x24
    4cf4:	3401      	adds	r4, #1
    4cf6:	7823      	ldrb	r3, [r4, #0]
    4cf8:	2b2e      	cmp	r3, #46	; 0x2e
    4cfa:	d100      	bne.n	4cfe <_vfiprintf_r+0x7e>
    4cfc:	e08d      	b.n	4e1a <_vfiprintf_r+0x19a>
    4cfe:	7821      	ldrb	r1, [r4, #0]
    4d00:	2203      	movs	r2, #3
    4d02:	4868      	ldr	r0, [pc, #416]	; (4ea4 <_vfiprintf_r+0x224>)
    4d04:	f7ff fbf4 	bl	44f0 <memchr>
    4d08:	2800      	cmp	r0, #0
    4d0a:	d007      	beq.n	4d1c <_vfiprintf_r+0x9c>
    4d0c:	4b65      	ldr	r3, [pc, #404]	; (4ea4 <_vfiprintf_r+0x224>)
    4d0e:	682a      	ldr	r2, [r5, #0]
    4d10:	1ac0      	subs	r0, r0, r3
    4d12:	2340      	movs	r3, #64	; 0x40
    4d14:	4083      	lsls	r3, r0
    4d16:	4313      	orrs	r3, r2
    4d18:	602b      	str	r3, [r5, #0]
    4d1a:	3401      	adds	r4, #1
    4d1c:	7821      	ldrb	r1, [r4, #0]
    4d1e:	1c63      	adds	r3, r4, #1
    4d20:	2206      	movs	r2, #6
    4d22:	4861      	ldr	r0, [pc, #388]	; (4ea8 <_vfiprintf_r+0x228>)
    4d24:	9302      	str	r3, [sp, #8]
    4d26:	7629      	strb	r1, [r5, #24]
    4d28:	f7ff fbe2 	bl	44f0 <memchr>
    4d2c:	2800      	cmp	r0, #0
    4d2e:	d100      	bne.n	4d32 <_vfiprintf_r+0xb2>
    4d30:	e09d      	b.n	4e6e <_vfiprintf_r+0x1ee>
    4d32:	4b5e      	ldr	r3, [pc, #376]	; (4eac <_vfiprintf_r+0x22c>)
    4d34:	2b00      	cmp	r3, #0
    4d36:	d000      	beq.n	4d3a <_vfiprintf_r+0xba>
    4d38:	e090      	b.n	4e5c <_vfiprintf_r+0x1dc>
    4d3a:	2207      	movs	r2, #7
    4d3c:	9b05      	ldr	r3, [sp, #20]
    4d3e:	3307      	adds	r3, #7
    4d40:	4393      	bics	r3, r2
    4d42:	3308      	adds	r3, #8
    4d44:	9305      	str	r3, [sp, #20]
    4d46:	696b      	ldr	r3, [r5, #20]
    4d48:	9a03      	ldr	r2, [sp, #12]
    4d4a:	189b      	adds	r3, r3, r2
    4d4c:	616b      	str	r3, [r5, #20]
    4d4e:	9c02      	ldr	r4, [sp, #8]
    4d50:	7823      	ldrb	r3, [r4, #0]
    4d52:	2b00      	cmp	r3, #0
    4d54:	d104      	bne.n	4d60 <_vfiprintf_r+0xe0>
    4d56:	9b02      	ldr	r3, [sp, #8]
    4d58:	1ae3      	subs	r3, r4, r3
    4d5a:	9304      	str	r3, [sp, #16]
    4d5c:	d012      	beq.n	4d84 <_vfiprintf_r+0x104>
    4d5e:	e003      	b.n	4d68 <_vfiprintf_r+0xe8>
    4d60:	2b25      	cmp	r3, #37	; 0x25
    4d62:	d0f8      	beq.n	4d56 <_vfiprintf_r+0xd6>
    4d64:	3401      	adds	r4, #1
    4d66:	e7f3      	b.n	4d50 <_vfiprintf_r+0xd0>
    4d68:	9b04      	ldr	r3, [sp, #16]
    4d6a:	9a02      	ldr	r2, [sp, #8]
    4d6c:	0039      	movs	r1, r7
    4d6e:	0030      	movs	r0, r6
    4d70:	f7ff ff73 	bl	4c5a <__sfputs_r>
    4d74:	1c43      	adds	r3, r0, #1
    4d76:	d100      	bne.n	4d7a <_vfiprintf_r+0xfa>
    4d78:	e086      	b.n	4e88 <_vfiprintf_r+0x208>
    4d7a:	696a      	ldr	r2, [r5, #20]
    4d7c:	9b04      	ldr	r3, [sp, #16]
    4d7e:	4694      	mov	ip, r2
    4d80:	4463      	add	r3, ip
    4d82:	616b      	str	r3, [r5, #20]
    4d84:	7823      	ldrb	r3, [r4, #0]
    4d86:	2b00      	cmp	r3, #0
    4d88:	d07e      	beq.n	4e88 <_vfiprintf_r+0x208>
    4d8a:	2201      	movs	r2, #1
    4d8c:	2300      	movs	r3, #0
    4d8e:	4252      	negs	r2, r2
    4d90:	606a      	str	r2, [r5, #4]
    4d92:	a902      	add	r1, sp, #8
    4d94:	3254      	adds	r2, #84	; 0x54
    4d96:	1852      	adds	r2, r2, r1
    4d98:	3401      	adds	r4, #1
    4d9a:	602b      	str	r3, [r5, #0]
    4d9c:	60eb      	str	r3, [r5, #12]
    4d9e:	60ab      	str	r3, [r5, #8]
    4da0:	7013      	strb	r3, [r2, #0]
    4da2:	65ab      	str	r3, [r5, #88]	; 0x58
    4da4:	7821      	ldrb	r1, [r4, #0]
    4da6:	2205      	movs	r2, #5
    4da8:	4841      	ldr	r0, [pc, #260]	; (4eb0 <_vfiprintf_r+0x230>)
    4daa:	f7ff fba1 	bl	44f0 <memchr>
    4dae:	2800      	cmp	r0, #0
    4db0:	d008      	beq.n	4dc4 <_vfiprintf_r+0x144>
    4db2:	4b3f      	ldr	r3, [pc, #252]	; (4eb0 <_vfiprintf_r+0x230>)
    4db4:	682a      	ldr	r2, [r5, #0]
    4db6:	1ac0      	subs	r0, r0, r3
    4db8:	2301      	movs	r3, #1
    4dba:	4083      	lsls	r3, r0
    4dbc:	4313      	orrs	r3, r2
    4dbe:	602b      	str	r3, [r5, #0]
    4dc0:	3401      	adds	r4, #1
    4dc2:	e7ef      	b.n	4da4 <_vfiprintf_r+0x124>
    4dc4:	682b      	ldr	r3, [r5, #0]
    4dc6:	06da      	lsls	r2, r3, #27
    4dc8:	d504      	bpl.n	4dd4 <_vfiprintf_r+0x154>
    4dca:	2253      	movs	r2, #83	; 0x53
    4dcc:	2120      	movs	r1, #32
    4dce:	a802      	add	r0, sp, #8
    4dd0:	1812      	adds	r2, r2, r0
    4dd2:	7011      	strb	r1, [r2, #0]
    4dd4:	071a      	lsls	r2, r3, #28
    4dd6:	d504      	bpl.n	4de2 <_vfiprintf_r+0x162>
    4dd8:	2253      	movs	r2, #83	; 0x53
    4dda:	212b      	movs	r1, #43	; 0x2b
    4ddc:	a802      	add	r0, sp, #8
    4dde:	1812      	adds	r2, r2, r0
    4de0:	7011      	strb	r1, [r2, #0]
    4de2:	7822      	ldrb	r2, [r4, #0]
    4de4:	2a2a      	cmp	r2, #42	; 0x2a
    4de6:	d100      	bne.n	4dea <_vfiprintf_r+0x16a>
    4de8:	e77c      	b.n	4ce4 <_vfiprintf_r+0x64>
    4dea:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4dec:	2000      	movs	r0, #0
    4dee:	210a      	movs	r1, #10
    4df0:	e005      	b.n	4dfe <_vfiprintf_r+0x17e>
    4df2:	4252      	negs	r2, r2
    4df4:	60ea      	str	r2, [r5, #12]
    4df6:	2202      	movs	r2, #2
    4df8:	4313      	orrs	r3, r2
    4dfa:	602b      	str	r3, [r5, #0]
    4dfc:	e77a      	b.n	4cf4 <_vfiprintf_r+0x74>
    4dfe:	7822      	ldrb	r2, [r4, #0]
    4e00:	3a30      	subs	r2, #48	; 0x30
    4e02:	2a09      	cmp	r2, #9
    4e04:	d804      	bhi.n	4e10 <_vfiprintf_r+0x190>
    4e06:	434b      	muls	r3, r1
    4e08:	3401      	adds	r4, #1
    4e0a:	189b      	adds	r3, r3, r2
    4e0c:	2001      	movs	r0, #1
    4e0e:	e7f6      	b.n	4dfe <_vfiprintf_r+0x17e>
    4e10:	2800      	cmp	r0, #0
    4e12:	d100      	bne.n	4e16 <_vfiprintf_r+0x196>
    4e14:	e76f      	b.n	4cf6 <_vfiprintf_r+0x76>
    4e16:	9309      	str	r3, [sp, #36]	; 0x24
    4e18:	e76d      	b.n	4cf6 <_vfiprintf_r+0x76>
    4e1a:	7863      	ldrb	r3, [r4, #1]
    4e1c:	2b2a      	cmp	r3, #42	; 0x2a
    4e1e:	d10a      	bne.n	4e36 <_vfiprintf_r+0x1b6>
    4e20:	9b05      	ldr	r3, [sp, #20]
    4e22:	3402      	adds	r4, #2
    4e24:	1d1a      	adds	r2, r3, #4
    4e26:	681b      	ldr	r3, [r3, #0]
    4e28:	9205      	str	r2, [sp, #20]
    4e2a:	2b00      	cmp	r3, #0
    4e2c:	da01      	bge.n	4e32 <_vfiprintf_r+0x1b2>
    4e2e:	2301      	movs	r3, #1
    4e30:	425b      	negs	r3, r3
    4e32:	9307      	str	r3, [sp, #28]
    4e34:	e763      	b.n	4cfe <_vfiprintf_r+0x7e>
    4e36:	2300      	movs	r3, #0
    4e38:	200a      	movs	r0, #10
    4e3a:	001a      	movs	r2, r3
    4e3c:	3401      	adds	r4, #1
    4e3e:	606b      	str	r3, [r5, #4]
    4e40:	7821      	ldrb	r1, [r4, #0]
    4e42:	3930      	subs	r1, #48	; 0x30
    4e44:	2909      	cmp	r1, #9
    4e46:	d804      	bhi.n	4e52 <_vfiprintf_r+0x1d2>
    4e48:	4342      	muls	r2, r0
    4e4a:	3401      	adds	r4, #1
    4e4c:	1852      	adds	r2, r2, r1
    4e4e:	2301      	movs	r3, #1
    4e50:	e7f6      	b.n	4e40 <_vfiprintf_r+0x1c0>
    4e52:	2b00      	cmp	r3, #0
    4e54:	d100      	bne.n	4e58 <_vfiprintf_r+0x1d8>
    4e56:	e752      	b.n	4cfe <_vfiprintf_r+0x7e>
    4e58:	9207      	str	r2, [sp, #28]
    4e5a:	e750      	b.n	4cfe <_vfiprintf_r+0x7e>
    4e5c:	ab05      	add	r3, sp, #20
    4e5e:	9300      	str	r3, [sp, #0]
    4e60:	003a      	movs	r2, r7
    4e62:	4b14      	ldr	r3, [pc, #80]	; (4eb4 <_vfiprintf_r+0x234>)
    4e64:	0029      	movs	r1, r5
    4e66:	0030      	movs	r0, r6
    4e68:	f7fd fcf2 	bl	2850 <_printf_float>
    4e6c:	e007      	b.n	4e7e <_vfiprintf_r+0x1fe>
    4e6e:	ab05      	add	r3, sp, #20
    4e70:	9300      	str	r3, [sp, #0]
    4e72:	003a      	movs	r2, r7
    4e74:	4b0f      	ldr	r3, [pc, #60]	; (4eb4 <_vfiprintf_r+0x234>)
    4e76:	0029      	movs	r1, r5
    4e78:	0030      	movs	r0, r6
    4e7a:	f7fd ffa7 	bl	2dcc <_printf_i>
    4e7e:	9003      	str	r0, [sp, #12]
    4e80:	9b03      	ldr	r3, [sp, #12]
    4e82:	3301      	adds	r3, #1
    4e84:	d000      	beq.n	4e88 <_vfiprintf_r+0x208>
    4e86:	e75e      	b.n	4d46 <_vfiprintf_r+0xc6>
    4e88:	89bb      	ldrh	r3, [r7, #12]
    4e8a:	065b      	lsls	r3, r3, #25
    4e8c:	d500      	bpl.n	4e90 <_vfiprintf_r+0x210>
    4e8e:	e726      	b.n	4cde <_vfiprintf_r+0x5e>
    4e90:	980b      	ldr	r0, [sp, #44]	; 0x2c
    4e92:	b01f      	add	sp, #124	; 0x7c
    4e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4e96:	46c0      	nop			; (mov r8, r8)
    4e98:	00007208 	.word	0x00007208
    4e9c:	00007228 	.word	0x00007228
    4ea0:	00007248 	.word	0x00007248
    4ea4:	00007372 	.word	0x00007372
    4ea8:	00007376 	.word	0x00007376
    4eac:	00002851 	.word	0x00002851
    4eb0:	0000736c 	.word	0x0000736c
    4eb4:	00004c5b 	.word	0x00004c5b

00004eb8 <_putc_r>:
    4eb8:	b570      	push	{r4, r5, r6, lr}
    4eba:	0006      	movs	r6, r0
    4ebc:	000d      	movs	r5, r1
    4ebe:	0014      	movs	r4, r2
    4ec0:	2800      	cmp	r0, #0
    4ec2:	d004      	beq.n	4ece <_putc_r+0x16>
    4ec4:	6983      	ldr	r3, [r0, #24]
    4ec6:	2b00      	cmp	r3, #0
    4ec8:	d101      	bne.n	4ece <_putc_r+0x16>
    4eca:	f7ff fa0b 	bl	42e4 <__sinit>
    4ece:	4b12      	ldr	r3, [pc, #72]	; (4f18 <_putc_r+0x60>)
    4ed0:	429c      	cmp	r4, r3
    4ed2:	d101      	bne.n	4ed8 <_putc_r+0x20>
    4ed4:	6874      	ldr	r4, [r6, #4]
    4ed6:	e008      	b.n	4eea <_putc_r+0x32>
    4ed8:	4b10      	ldr	r3, [pc, #64]	; (4f1c <_putc_r+0x64>)
    4eda:	429c      	cmp	r4, r3
    4edc:	d101      	bne.n	4ee2 <_putc_r+0x2a>
    4ede:	68b4      	ldr	r4, [r6, #8]
    4ee0:	e003      	b.n	4eea <_putc_r+0x32>
    4ee2:	4b0f      	ldr	r3, [pc, #60]	; (4f20 <_putc_r+0x68>)
    4ee4:	429c      	cmp	r4, r3
    4ee6:	d100      	bne.n	4eea <_putc_r+0x32>
    4ee8:	68f4      	ldr	r4, [r6, #12]
    4eea:	68a3      	ldr	r3, [r4, #8]
    4eec:	3b01      	subs	r3, #1
    4eee:	60a3      	str	r3, [r4, #8]
    4ef0:	2b00      	cmp	r3, #0
    4ef2:	da05      	bge.n	4f00 <_putc_r+0x48>
    4ef4:	69a2      	ldr	r2, [r4, #24]
    4ef6:	4293      	cmp	r3, r2
    4ef8:	db08      	blt.n	4f0c <_putc_r+0x54>
    4efa:	b2eb      	uxtb	r3, r5
    4efc:	2b0a      	cmp	r3, #10
    4efe:	d005      	beq.n	4f0c <_putc_r+0x54>
    4f00:	6823      	ldr	r3, [r4, #0]
    4f02:	b2e8      	uxtb	r0, r5
    4f04:	1c5a      	adds	r2, r3, #1
    4f06:	6022      	str	r2, [r4, #0]
    4f08:	701d      	strb	r5, [r3, #0]
    4f0a:	e004      	b.n	4f16 <_putc_r+0x5e>
    4f0c:	0022      	movs	r2, r4
    4f0e:	0029      	movs	r1, r5
    4f10:	0030      	movs	r0, r6
    4f12:	f7fe f9d9 	bl	32c8 <__swbuf_r>
    4f16:	bd70      	pop	{r4, r5, r6, pc}
    4f18:	00007208 	.word	0x00007208
    4f1c:	00007228 	.word	0x00007228
    4f20:	00007248 	.word	0x00007248

00004f24 <_sbrk_r>:
    4f24:	2300      	movs	r3, #0
    4f26:	b570      	push	{r4, r5, r6, lr}
    4f28:	4c06      	ldr	r4, [pc, #24]	; (4f44 <_sbrk_r+0x20>)
    4f2a:	0005      	movs	r5, r0
    4f2c:	0008      	movs	r0, r1
    4f2e:	6023      	str	r3, [r4, #0]
    4f30:	f7fd faa2 	bl	2478 <_sbrk>
    4f34:	1c43      	adds	r3, r0, #1
    4f36:	d103      	bne.n	4f40 <_sbrk_r+0x1c>
    4f38:	6823      	ldr	r3, [r4, #0]
    4f3a:	2b00      	cmp	r3, #0
    4f3c:	d000      	beq.n	4f40 <_sbrk_r+0x1c>
    4f3e:	602b      	str	r3, [r5, #0]
    4f40:	bd70      	pop	{r4, r5, r6, pc}
    4f42:	46c0      	nop			; (mov r8, r8)
    4f44:	2000033c 	.word	0x2000033c

00004f48 <__sread>:
    4f48:	b570      	push	{r4, r5, r6, lr}
    4f4a:	000c      	movs	r4, r1
    4f4c:	250e      	movs	r5, #14
    4f4e:	5f49      	ldrsh	r1, [r1, r5]
    4f50:	f000 f8a4 	bl	509c <_read_r>
    4f54:	2800      	cmp	r0, #0
    4f56:	db03      	blt.n	4f60 <__sread+0x18>
    4f58:	6d63      	ldr	r3, [r4, #84]	; 0x54
    4f5a:	181b      	adds	r3, r3, r0
    4f5c:	6563      	str	r3, [r4, #84]	; 0x54
    4f5e:	e003      	b.n	4f68 <__sread+0x20>
    4f60:	89a2      	ldrh	r2, [r4, #12]
    4f62:	4b02      	ldr	r3, [pc, #8]	; (4f6c <__sread+0x24>)
    4f64:	4013      	ands	r3, r2
    4f66:	81a3      	strh	r3, [r4, #12]
    4f68:	bd70      	pop	{r4, r5, r6, pc}
    4f6a:	46c0      	nop			; (mov r8, r8)
    4f6c:	ffffefff 	.word	0xffffefff

00004f70 <__swrite>:
    4f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4f72:	001f      	movs	r7, r3
    4f74:	898b      	ldrh	r3, [r1, #12]
    4f76:	0005      	movs	r5, r0
    4f78:	000c      	movs	r4, r1
    4f7a:	0016      	movs	r6, r2
    4f7c:	05db      	lsls	r3, r3, #23
    4f7e:	d505      	bpl.n	4f8c <__swrite+0x1c>
    4f80:	230e      	movs	r3, #14
    4f82:	5ec9      	ldrsh	r1, [r1, r3]
    4f84:	2200      	movs	r2, #0
    4f86:	2302      	movs	r3, #2
    4f88:	f000 f874 	bl	5074 <_lseek_r>
    4f8c:	89a2      	ldrh	r2, [r4, #12]
    4f8e:	4b05      	ldr	r3, [pc, #20]	; (4fa4 <__swrite+0x34>)
    4f90:	0028      	movs	r0, r5
    4f92:	4013      	ands	r3, r2
    4f94:	81a3      	strh	r3, [r4, #12]
    4f96:	0032      	movs	r2, r6
    4f98:	230e      	movs	r3, #14
    4f9a:	5ee1      	ldrsh	r1, [r4, r3]
    4f9c:	003b      	movs	r3, r7
    4f9e:	f000 f81f 	bl	4fe0 <_write_r>
    4fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4fa4:	ffffefff 	.word	0xffffefff

00004fa8 <__sseek>:
    4fa8:	b570      	push	{r4, r5, r6, lr}
    4faa:	000c      	movs	r4, r1
    4fac:	250e      	movs	r5, #14
    4fae:	5f49      	ldrsh	r1, [r1, r5]
    4fb0:	f000 f860 	bl	5074 <_lseek_r>
    4fb4:	89a3      	ldrh	r3, [r4, #12]
    4fb6:	1c42      	adds	r2, r0, #1
    4fb8:	d103      	bne.n	4fc2 <__sseek+0x1a>
    4fba:	4a05      	ldr	r2, [pc, #20]	; (4fd0 <__sseek+0x28>)
    4fbc:	4013      	ands	r3, r2
    4fbe:	81a3      	strh	r3, [r4, #12]
    4fc0:	e004      	b.n	4fcc <__sseek+0x24>
    4fc2:	2280      	movs	r2, #128	; 0x80
    4fc4:	0152      	lsls	r2, r2, #5
    4fc6:	4313      	orrs	r3, r2
    4fc8:	81a3      	strh	r3, [r4, #12]
    4fca:	6560      	str	r0, [r4, #84]	; 0x54
    4fcc:	bd70      	pop	{r4, r5, r6, pc}
    4fce:	46c0      	nop			; (mov r8, r8)
    4fd0:	ffffefff 	.word	0xffffefff

00004fd4 <__sclose>:
    4fd4:	b510      	push	{r4, lr}
    4fd6:	230e      	movs	r3, #14
    4fd8:	5ec9      	ldrsh	r1, [r1, r3]
    4fda:	f000 f815 	bl	5008 <_close_r>
    4fde:	bd10      	pop	{r4, pc}

00004fe0 <_write_r>:
    4fe0:	b570      	push	{r4, r5, r6, lr}
    4fe2:	0005      	movs	r5, r0
    4fe4:	0008      	movs	r0, r1
    4fe6:	0011      	movs	r1, r2
    4fe8:	2200      	movs	r2, #0
    4fea:	4c06      	ldr	r4, [pc, #24]	; (5004 <_write_r+0x24>)
    4fec:	6022      	str	r2, [r4, #0]
    4fee:	001a      	movs	r2, r3
    4ff0:	f7fc fb32 	bl	1658 <_write>
    4ff4:	1c43      	adds	r3, r0, #1
    4ff6:	d103      	bne.n	5000 <_write_r+0x20>
    4ff8:	6823      	ldr	r3, [r4, #0]
    4ffa:	2b00      	cmp	r3, #0
    4ffc:	d000      	beq.n	5000 <_write_r+0x20>
    4ffe:	602b      	str	r3, [r5, #0]
    5000:	bd70      	pop	{r4, r5, r6, pc}
    5002:	46c0      	nop			; (mov r8, r8)
    5004:	2000033c 	.word	0x2000033c

00005008 <_close_r>:
    5008:	2300      	movs	r3, #0
    500a:	b570      	push	{r4, r5, r6, lr}
    500c:	4c06      	ldr	r4, [pc, #24]	; (5028 <_close_r+0x20>)
    500e:	0005      	movs	r5, r0
    5010:	0008      	movs	r0, r1
    5012:	6023      	str	r3, [r4, #0]
    5014:	f7fd fa42 	bl	249c <_close>
    5018:	1c43      	adds	r3, r0, #1
    501a:	d103      	bne.n	5024 <_close_r+0x1c>
    501c:	6823      	ldr	r3, [r4, #0]
    501e:	2b00      	cmp	r3, #0
    5020:	d000      	beq.n	5024 <_close_r+0x1c>
    5022:	602b      	str	r3, [r5, #0]
    5024:	bd70      	pop	{r4, r5, r6, pc}
    5026:	46c0      	nop			; (mov r8, r8)
    5028:	2000033c 	.word	0x2000033c

0000502c <_fstat_r>:
    502c:	2300      	movs	r3, #0
    502e:	b570      	push	{r4, r5, r6, lr}
    5030:	4c06      	ldr	r4, [pc, #24]	; (504c <_fstat_r+0x20>)
    5032:	0005      	movs	r5, r0
    5034:	0008      	movs	r0, r1
    5036:	0011      	movs	r1, r2
    5038:	6023      	str	r3, [r4, #0]
    503a:	f7fd fa33 	bl	24a4 <_fstat>
    503e:	1c43      	adds	r3, r0, #1
    5040:	d103      	bne.n	504a <_fstat_r+0x1e>
    5042:	6823      	ldr	r3, [r4, #0]
    5044:	2b00      	cmp	r3, #0
    5046:	d000      	beq.n	504a <_fstat_r+0x1e>
    5048:	602b      	str	r3, [r5, #0]
    504a:	bd70      	pop	{r4, r5, r6, pc}
    504c:	2000033c 	.word	0x2000033c

00005050 <_isatty_r>:
    5050:	2300      	movs	r3, #0
    5052:	b570      	push	{r4, r5, r6, lr}
    5054:	4c06      	ldr	r4, [pc, #24]	; (5070 <_isatty_r+0x20>)
    5056:	0005      	movs	r5, r0
    5058:	0008      	movs	r0, r1
    505a:	6023      	str	r3, [r4, #0]
    505c:	f7fd fa28 	bl	24b0 <_isatty>
    5060:	1c43      	adds	r3, r0, #1
    5062:	d103      	bne.n	506c <_isatty_r+0x1c>
    5064:	6823      	ldr	r3, [r4, #0]
    5066:	2b00      	cmp	r3, #0
    5068:	d000      	beq.n	506c <_isatty_r+0x1c>
    506a:	602b      	str	r3, [r5, #0]
    506c:	bd70      	pop	{r4, r5, r6, pc}
    506e:	46c0      	nop			; (mov r8, r8)
    5070:	2000033c 	.word	0x2000033c

00005074 <_lseek_r>:
    5074:	b570      	push	{r4, r5, r6, lr}
    5076:	0005      	movs	r5, r0
    5078:	0008      	movs	r0, r1
    507a:	0011      	movs	r1, r2
    507c:	2200      	movs	r2, #0
    507e:	4c06      	ldr	r4, [pc, #24]	; (5098 <_lseek_r+0x24>)
    5080:	6022      	str	r2, [r4, #0]
    5082:	001a      	movs	r2, r3
    5084:	f7fd fa16 	bl	24b4 <_lseek>
    5088:	1c43      	adds	r3, r0, #1
    508a:	d103      	bne.n	5094 <_lseek_r+0x20>
    508c:	6823      	ldr	r3, [r4, #0]
    508e:	2b00      	cmp	r3, #0
    5090:	d000      	beq.n	5094 <_lseek_r+0x20>
    5092:	602b      	str	r3, [r5, #0]
    5094:	bd70      	pop	{r4, r5, r6, pc}
    5096:	46c0      	nop			; (mov r8, r8)
    5098:	2000033c 	.word	0x2000033c

0000509c <_read_r>:
    509c:	b570      	push	{r4, r5, r6, lr}
    509e:	0005      	movs	r5, r0
    50a0:	0008      	movs	r0, r1
    50a2:	0011      	movs	r1, r2
    50a4:	2200      	movs	r2, #0
    50a6:	4c06      	ldr	r4, [pc, #24]	; (50c0 <_read_r+0x24>)
    50a8:	6022      	str	r2, [r4, #0]
    50aa:	001a      	movs	r2, r3
    50ac:	f7fc fab4 	bl	1618 <_read>
    50b0:	1c43      	adds	r3, r0, #1
    50b2:	d103      	bne.n	50bc <_read_r+0x20>
    50b4:	6823      	ldr	r3, [r4, #0]
    50b6:	2b00      	cmp	r3, #0
    50b8:	d000      	beq.n	50bc <_read_r+0x20>
    50ba:	602b      	str	r3, [r5, #0]
    50bc:	bd70      	pop	{r4, r5, r6, pc}
    50be:	46c0      	nop			; (mov r8, r8)
    50c0:	2000033c 	.word	0x2000033c

000050c4 <__gnu_thumb1_case_uqi>:
    50c4:	b402      	push	{r1}
    50c6:	4671      	mov	r1, lr
    50c8:	0849      	lsrs	r1, r1, #1
    50ca:	0049      	lsls	r1, r1, #1
    50cc:	5c09      	ldrb	r1, [r1, r0]
    50ce:	0049      	lsls	r1, r1, #1
    50d0:	448e      	add	lr, r1
    50d2:	bc02      	pop	{r1}
    50d4:	4770      	bx	lr
    50d6:	46c0      	nop			; (mov r8, r8)

000050d8 <__aeabi_uidiv>:
    50d8:	2200      	movs	r2, #0
    50da:	0843      	lsrs	r3, r0, #1
    50dc:	428b      	cmp	r3, r1
    50de:	d374      	bcc.n	51ca <__aeabi_uidiv+0xf2>
    50e0:	0903      	lsrs	r3, r0, #4
    50e2:	428b      	cmp	r3, r1
    50e4:	d35f      	bcc.n	51a6 <__aeabi_uidiv+0xce>
    50e6:	0a03      	lsrs	r3, r0, #8
    50e8:	428b      	cmp	r3, r1
    50ea:	d344      	bcc.n	5176 <__aeabi_uidiv+0x9e>
    50ec:	0b03      	lsrs	r3, r0, #12
    50ee:	428b      	cmp	r3, r1
    50f0:	d328      	bcc.n	5144 <__aeabi_uidiv+0x6c>
    50f2:	0c03      	lsrs	r3, r0, #16
    50f4:	428b      	cmp	r3, r1
    50f6:	d30d      	bcc.n	5114 <__aeabi_uidiv+0x3c>
    50f8:	22ff      	movs	r2, #255	; 0xff
    50fa:	0209      	lsls	r1, r1, #8
    50fc:	ba12      	rev	r2, r2
    50fe:	0c03      	lsrs	r3, r0, #16
    5100:	428b      	cmp	r3, r1
    5102:	d302      	bcc.n	510a <__aeabi_uidiv+0x32>
    5104:	1212      	asrs	r2, r2, #8
    5106:	0209      	lsls	r1, r1, #8
    5108:	d065      	beq.n	51d6 <__aeabi_uidiv+0xfe>
    510a:	0b03      	lsrs	r3, r0, #12
    510c:	428b      	cmp	r3, r1
    510e:	d319      	bcc.n	5144 <__aeabi_uidiv+0x6c>
    5110:	e000      	b.n	5114 <__aeabi_uidiv+0x3c>
    5112:	0a09      	lsrs	r1, r1, #8
    5114:	0bc3      	lsrs	r3, r0, #15
    5116:	428b      	cmp	r3, r1
    5118:	d301      	bcc.n	511e <__aeabi_uidiv+0x46>
    511a:	03cb      	lsls	r3, r1, #15
    511c:	1ac0      	subs	r0, r0, r3
    511e:	4152      	adcs	r2, r2
    5120:	0b83      	lsrs	r3, r0, #14
    5122:	428b      	cmp	r3, r1
    5124:	d301      	bcc.n	512a <__aeabi_uidiv+0x52>
    5126:	038b      	lsls	r3, r1, #14
    5128:	1ac0      	subs	r0, r0, r3
    512a:	4152      	adcs	r2, r2
    512c:	0b43      	lsrs	r3, r0, #13
    512e:	428b      	cmp	r3, r1
    5130:	d301      	bcc.n	5136 <__aeabi_uidiv+0x5e>
    5132:	034b      	lsls	r3, r1, #13
    5134:	1ac0      	subs	r0, r0, r3
    5136:	4152      	adcs	r2, r2
    5138:	0b03      	lsrs	r3, r0, #12
    513a:	428b      	cmp	r3, r1
    513c:	d301      	bcc.n	5142 <__aeabi_uidiv+0x6a>
    513e:	030b      	lsls	r3, r1, #12
    5140:	1ac0      	subs	r0, r0, r3
    5142:	4152      	adcs	r2, r2
    5144:	0ac3      	lsrs	r3, r0, #11
    5146:	428b      	cmp	r3, r1
    5148:	d301      	bcc.n	514e <__aeabi_uidiv+0x76>
    514a:	02cb      	lsls	r3, r1, #11
    514c:	1ac0      	subs	r0, r0, r3
    514e:	4152      	adcs	r2, r2
    5150:	0a83      	lsrs	r3, r0, #10
    5152:	428b      	cmp	r3, r1
    5154:	d301      	bcc.n	515a <__aeabi_uidiv+0x82>
    5156:	028b      	lsls	r3, r1, #10
    5158:	1ac0      	subs	r0, r0, r3
    515a:	4152      	adcs	r2, r2
    515c:	0a43      	lsrs	r3, r0, #9
    515e:	428b      	cmp	r3, r1
    5160:	d301      	bcc.n	5166 <__aeabi_uidiv+0x8e>
    5162:	024b      	lsls	r3, r1, #9
    5164:	1ac0      	subs	r0, r0, r3
    5166:	4152      	adcs	r2, r2
    5168:	0a03      	lsrs	r3, r0, #8
    516a:	428b      	cmp	r3, r1
    516c:	d301      	bcc.n	5172 <__aeabi_uidiv+0x9a>
    516e:	020b      	lsls	r3, r1, #8
    5170:	1ac0      	subs	r0, r0, r3
    5172:	4152      	adcs	r2, r2
    5174:	d2cd      	bcs.n	5112 <__aeabi_uidiv+0x3a>
    5176:	09c3      	lsrs	r3, r0, #7
    5178:	428b      	cmp	r3, r1
    517a:	d301      	bcc.n	5180 <__aeabi_uidiv+0xa8>
    517c:	01cb      	lsls	r3, r1, #7
    517e:	1ac0      	subs	r0, r0, r3
    5180:	4152      	adcs	r2, r2
    5182:	0983      	lsrs	r3, r0, #6
    5184:	428b      	cmp	r3, r1
    5186:	d301      	bcc.n	518c <__aeabi_uidiv+0xb4>
    5188:	018b      	lsls	r3, r1, #6
    518a:	1ac0      	subs	r0, r0, r3
    518c:	4152      	adcs	r2, r2
    518e:	0943      	lsrs	r3, r0, #5
    5190:	428b      	cmp	r3, r1
    5192:	d301      	bcc.n	5198 <__aeabi_uidiv+0xc0>
    5194:	014b      	lsls	r3, r1, #5
    5196:	1ac0      	subs	r0, r0, r3
    5198:	4152      	adcs	r2, r2
    519a:	0903      	lsrs	r3, r0, #4
    519c:	428b      	cmp	r3, r1
    519e:	d301      	bcc.n	51a4 <__aeabi_uidiv+0xcc>
    51a0:	010b      	lsls	r3, r1, #4
    51a2:	1ac0      	subs	r0, r0, r3
    51a4:	4152      	adcs	r2, r2
    51a6:	08c3      	lsrs	r3, r0, #3
    51a8:	428b      	cmp	r3, r1
    51aa:	d301      	bcc.n	51b0 <__aeabi_uidiv+0xd8>
    51ac:	00cb      	lsls	r3, r1, #3
    51ae:	1ac0      	subs	r0, r0, r3
    51b0:	4152      	adcs	r2, r2
    51b2:	0883      	lsrs	r3, r0, #2
    51b4:	428b      	cmp	r3, r1
    51b6:	d301      	bcc.n	51bc <__aeabi_uidiv+0xe4>
    51b8:	008b      	lsls	r3, r1, #2
    51ba:	1ac0      	subs	r0, r0, r3
    51bc:	4152      	adcs	r2, r2
    51be:	0843      	lsrs	r3, r0, #1
    51c0:	428b      	cmp	r3, r1
    51c2:	d301      	bcc.n	51c8 <__aeabi_uidiv+0xf0>
    51c4:	004b      	lsls	r3, r1, #1
    51c6:	1ac0      	subs	r0, r0, r3
    51c8:	4152      	adcs	r2, r2
    51ca:	1a41      	subs	r1, r0, r1
    51cc:	d200      	bcs.n	51d0 <__aeabi_uidiv+0xf8>
    51ce:	4601      	mov	r1, r0
    51d0:	4152      	adcs	r2, r2
    51d2:	4610      	mov	r0, r2
    51d4:	4770      	bx	lr
    51d6:	e7ff      	b.n	51d8 <__aeabi_uidiv+0x100>
    51d8:	b501      	push	{r0, lr}
    51da:	2000      	movs	r0, #0
    51dc:	f000 f8f0 	bl	53c0 <__aeabi_idiv0>
    51e0:	bd02      	pop	{r1, pc}
    51e2:	46c0      	nop			; (mov r8, r8)

000051e4 <__aeabi_uidivmod>:
    51e4:	2900      	cmp	r1, #0
    51e6:	d0f7      	beq.n	51d8 <__aeabi_uidiv+0x100>
    51e8:	e776      	b.n	50d8 <__aeabi_uidiv>
    51ea:	4770      	bx	lr

000051ec <__aeabi_idiv>:
    51ec:	4603      	mov	r3, r0
    51ee:	430b      	orrs	r3, r1
    51f0:	d47f      	bmi.n	52f2 <__aeabi_idiv+0x106>
    51f2:	2200      	movs	r2, #0
    51f4:	0843      	lsrs	r3, r0, #1
    51f6:	428b      	cmp	r3, r1
    51f8:	d374      	bcc.n	52e4 <__aeabi_idiv+0xf8>
    51fa:	0903      	lsrs	r3, r0, #4
    51fc:	428b      	cmp	r3, r1
    51fe:	d35f      	bcc.n	52c0 <__aeabi_idiv+0xd4>
    5200:	0a03      	lsrs	r3, r0, #8
    5202:	428b      	cmp	r3, r1
    5204:	d344      	bcc.n	5290 <__aeabi_idiv+0xa4>
    5206:	0b03      	lsrs	r3, r0, #12
    5208:	428b      	cmp	r3, r1
    520a:	d328      	bcc.n	525e <__aeabi_idiv+0x72>
    520c:	0c03      	lsrs	r3, r0, #16
    520e:	428b      	cmp	r3, r1
    5210:	d30d      	bcc.n	522e <__aeabi_idiv+0x42>
    5212:	22ff      	movs	r2, #255	; 0xff
    5214:	0209      	lsls	r1, r1, #8
    5216:	ba12      	rev	r2, r2
    5218:	0c03      	lsrs	r3, r0, #16
    521a:	428b      	cmp	r3, r1
    521c:	d302      	bcc.n	5224 <__aeabi_idiv+0x38>
    521e:	1212      	asrs	r2, r2, #8
    5220:	0209      	lsls	r1, r1, #8
    5222:	d065      	beq.n	52f0 <__aeabi_idiv+0x104>
    5224:	0b03      	lsrs	r3, r0, #12
    5226:	428b      	cmp	r3, r1
    5228:	d319      	bcc.n	525e <__aeabi_idiv+0x72>
    522a:	e000      	b.n	522e <__aeabi_idiv+0x42>
    522c:	0a09      	lsrs	r1, r1, #8
    522e:	0bc3      	lsrs	r3, r0, #15
    5230:	428b      	cmp	r3, r1
    5232:	d301      	bcc.n	5238 <__aeabi_idiv+0x4c>
    5234:	03cb      	lsls	r3, r1, #15
    5236:	1ac0      	subs	r0, r0, r3
    5238:	4152      	adcs	r2, r2
    523a:	0b83      	lsrs	r3, r0, #14
    523c:	428b      	cmp	r3, r1
    523e:	d301      	bcc.n	5244 <__aeabi_idiv+0x58>
    5240:	038b      	lsls	r3, r1, #14
    5242:	1ac0      	subs	r0, r0, r3
    5244:	4152      	adcs	r2, r2
    5246:	0b43      	lsrs	r3, r0, #13
    5248:	428b      	cmp	r3, r1
    524a:	d301      	bcc.n	5250 <__aeabi_idiv+0x64>
    524c:	034b      	lsls	r3, r1, #13
    524e:	1ac0      	subs	r0, r0, r3
    5250:	4152      	adcs	r2, r2
    5252:	0b03      	lsrs	r3, r0, #12
    5254:	428b      	cmp	r3, r1
    5256:	d301      	bcc.n	525c <__aeabi_idiv+0x70>
    5258:	030b      	lsls	r3, r1, #12
    525a:	1ac0      	subs	r0, r0, r3
    525c:	4152      	adcs	r2, r2
    525e:	0ac3      	lsrs	r3, r0, #11
    5260:	428b      	cmp	r3, r1
    5262:	d301      	bcc.n	5268 <__aeabi_idiv+0x7c>
    5264:	02cb      	lsls	r3, r1, #11
    5266:	1ac0      	subs	r0, r0, r3
    5268:	4152      	adcs	r2, r2
    526a:	0a83      	lsrs	r3, r0, #10
    526c:	428b      	cmp	r3, r1
    526e:	d301      	bcc.n	5274 <__aeabi_idiv+0x88>
    5270:	028b      	lsls	r3, r1, #10
    5272:	1ac0      	subs	r0, r0, r3
    5274:	4152      	adcs	r2, r2
    5276:	0a43      	lsrs	r3, r0, #9
    5278:	428b      	cmp	r3, r1
    527a:	d301      	bcc.n	5280 <__aeabi_idiv+0x94>
    527c:	024b      	lsls	r3, r1, #9
    527e:	1ac0      	subs	r0, r0, r3
    5280:	4152      	adcs	r2, r2
    5282:	0a03      	lsrs	r3, r0, #8
    5284:	428b      	cmp	r3, r1
    5286:	d301      	bcc.n	528c <__aeabi_idiv+0xa0>
    5288:	020b      	lsls	r3, r1, #8
    528a:	1ac0      	subs	r0, r0, r3
    528c:	4152      	adcs	r2, r2
    528e:	d2cd      	bcs.n	522c <__aeabi_idiv+0x40>
    5290:	09c3      	lsrs	r3, r0, #7
    5292:	428b      	cmp	r3, r1
    5294:	d301      	bcc.n	529a <__aeabi_idiv+0xae>
    5296:	01cb      	lsls	r3, r1, #7
    5298:	1ac0      	subs	r0, r0, r3
    529a:	4152      	adcs	r2, r2
    529c:	0983      	lsrs	r3, r0, #6
    529e:	428b      	cmp	r3, r1
    52a0:	d301      	bcc.n	52a6 <__aeabi_idiv+0xba>
    52a2:	018b      	lsls	r3, r1, #6
    52a4:	1ac0      	subs	r0, r0, r3
    52a6:	4152      	adcs	r2, r2
    52a8:	0943      	lsrs	r3, r0, #5
    52aa:	428b      	cmp	r3, r1
    52ac:	d301      	bcc.n	52b2 <__aeabi_idiv+0xc6>
    52ae:	014b      	lsls	r3, r1, #5
    52b0:	1ac0      	subs	r0, r0, r3
    52b2:	4152      	adcs	r2, r2
    52b4:	0903      	lsrs	r3, r0, #4
    52b6:	428b      	cmp	r3, r1
    52b8:	d301      	bcc.n	52be <__aeabi_idiv+0xd2>
    52ba:	010b      	lsls	r3, r1, #4
    52bc:	1ac0      	subs	r0, r0, r3
    52be:	4152      	adcs	r2, r2
    52c0:	08c3      	lsrs	r3, r0, #3
    52c2:	428b      	cmp	r3, r1
    52c4:	d301      	bcc.n	52ca <__aeabi_idiv+0xde>
    52c6:	00cb      	lsls	r3, r1, #3
    52c8:	1ac0      	subs	r0, r0, r3
    52ca:	4152      	adcs	r2, r2
    52cc:	0883      	lsrs	r3, r0, #2
    52ce:	428b      	cmp	r3, r1
    52d0:	d301      	bcc.n	52d6 <__aeabi_idiv+0xea>
    52d2:	008b      	lsls	r3, r1, #2
    52d4:	1ac0      	subs	r0, r0, r3
    52d6:	4152      	adcs	r2, r2
    52d8:	0843      	lsrs	r3, r0, #1
    52da:	428b      	cmp	r3, r1
    52dc:	d301      	bcc.n	52e2 <__aeabi_idiv+0xf6>
    52de:	004b      	lsls	r3, r1, #1
    52e0:	1ac0      	subs	r0, r0, r3
    52e2:	4152      	adcs	r2, r2
    52e4:	1a41      	subs	r1, r0, r1
    52e6:	d200      	bcs.n	52ea <__aeabi_idiv+0xfe>
    52e8:	4601      	mov	r1, r0
    52ea:	4152      	adcs	r2, r2
    52ec:	4610      	mov	r0, r2
    52ee:	4770      	bx	lr
    52f0:	e05d      	b.n	53ae <__aeabi_idiv+0x1c2>
    52f2:	0fca      	lsrs	r2, r1, #31
    52f4:	d000      	beq.n	52f8 <__aeabi_idiv+0x10c>
    52f6:	4249      	negs	r1, r1
    52f8:	1003      	asrs	r3, r0, #32
    52fa:	d300      	bcc.n	52fe <__aeabi_idiv+0x112>
    52fc:	4240      	negs	r0, r0
    52fe:	4053      	eors	r3, r2
    5300:	2200      	movs	r2, #0
    5302:	469c      	mov	ip, r3
    5304:	0903      	lsrs	r3, r0, #4
    5306:	428b      	cmp	r3, r1
    5308:	d32d      	bcc.n	5366 <__aeabi_idiv+0x17a>
    530a:	0a03      	lsrs	r3, r0, #8
    530c:	428b      	cmp	r3, r1
    530e:	d312      	bcc.n	5336 <__aeabi_idiv+0x14a>
    5310:	22fc      	movs	r2, #252	; 0xfc
    5312:	0189      	lsls	r1, r1, #6
    5314:	ba12      	rev	r2, r2
    5316:	0a03      	lsrs	r3, r0, #8
    5318:	428b      	cmp	r3, r1
    531a:	d30c      	bcc.n	5336 <__aeabi_idiv+0x14a>
    531c:	0189      	lsls	r1, r1, #6
    531e:	1192      	asrs	r2, r2, #6
    5320:	428b      	cmp	r3, r1
    5322:	d308      	bcc.n	5336 <__aeabi_idiv+0x14a>
    5324:	0189      	lsls	r1, r1, #6
    5326:	1192      	asrs	r2, r2, #6
    5328:	428b      	cmp	r3, r1
    532a:	d304      	bcc.n	5336 <__aeabi_idiv+0x14a>
    532c:	0189      	lsls	r1, r1, #6
    532e:	d03a      	beq.n	53a6 <__aeabi_idiv+0x1ba>
    5330:	1192      	asrs	r2, r2, #6
    5332:	e000      	b.n	5336 <__aeabi_idiv+0x14a>
    5334:	0989      	lsrs	r1, r1, #6
    5336:	09c3      	lsrs	r3, r0, #7
    5338:	428b      	cmp	r3, r1
    533a:	d301      	bcc.n	5340 <__aeabi_idiv+0x154>
    533c:	01cb      	lsls	r3, r1, #7
    533e:	1ac0      	subs	r0, r0, r3
    5340:	4152      	adcs	r2, r2
    5342:	0983      	lsrs	r3, r0, #6
    5344:	428b      	cmp	r3, r1
    5346:	d301      	bcc.n	534c <__aeabi_idiv+0x160>
    5348:	018b      	lsls	r3, r1, #6
    534a:	1ac0      	subs	r0, r0, r3
    534c:	4152      	adcs	r2, r2
    534e:	0943      	lsrs	r3, r0, #5
    5350:	428b      	cmp	r3, r1
    5352:	d301      	bcc.n	5358 <__aeabi_idiv+0x16c>
    5354:	014b      	lsls	r3, r1, #5
    5356:	1ac0      	subs	r0, r0, r3
    5358:	4152      	adcs	r2, r2
    535a:	0903      	lsrs	r3, r0, #4
    535c:	428b      	cmp	r3, r1
    535e:	d301      	bcc.n	5364 <__aeabi_idiv+0x178>
    5360:	010b      	lsls	r3, r1, #4
    5362:	1ac0      	subs	r0, r0, r3
    5364:	4152      	adcs	r2, r2
    5366:	08c3      	lsrs	r3, r0, #3
    5368:	428b      	cmp	r3, r1
    536a:	d301      	bcc.n	5370 <__aeabi_idiv+0x184>
    536c:	00cb      	lsls	r3, r1, #3
    536e:	1ac0      	subs	r0, r0, r3
    5370:	4152      	adcs	r2, r2
    5372:	0883      	lsrs	r3, r0, #2
    5374:	428b      	cmp	r3, r1
    5376:	d301      	bcc.n	537c <__aeabi_idiv+0x190>
    5378:	008b      	lsls	r3, r1, #2
    537a:	1ac0      	subs	r0, r0, r3
    537c:	4152      	adcs	r2, r2
    537e:	d2d9      	bcs.n	5334 <__aeabi_idiv+0x148>
    5380:	0843      	lsrs	r3, r0, #1
    5382:	428b      	cmp	r3, r1
    5384:	d301      	bcc.n	538a <__aeabi_idiv+0x19e>
    5386:	004b      	lsls	r3, r1, #1
    5388:	1ac0      	subs	r0, r0, r3
    538a:	4152      	adcs	r2, r2
    538c:	1a41      	subs	r1, r0, r1
    538e:	d200      	bcs.n	5392 <__aeabi_idiv+0x1a6>
    5390:	4601      	mov	r1, r0
    5392:	4663      	mov	r3, ip
    5394:	4152      	adcs	r2, r2
    5396:	105b      	asrs	r3, r3, #1
    5398:	4610      	mov	r0, r2
    539a:	d301      	bcc.n	53a0 <__aeabi_idiv+0x1b4>
    539c:	4240      	negs	r0, r0
    539e:	2b00      	cmp	r3, #0
    53a0:	d500      	bpl.n	53a4 <__aeabi_idiv+0x1b8>
    53a2:	4249      	negs	r1, r1
    53a4:	4770      	bx	lr
    53a6:	4663      	mov	r3, ip
    53a8:	105b      	asrs	r3, r3, #1
    53aa:	d300      	bcc.n	53ae <__aeabi_idiv+0x1c2>
    53ac:	4240      	negs	r0, r0
    53ae:	b501      	push	{r0, lr}
    53b0:	2000      	movs	r0, #0
    53b2:	f000 f805 	bl	53c0 <__aeabi_idiv0>
    53b6:	bd02      	pop	{r1, pc}

000053b8 <__aeabi_idivmod>:
    53b8:	2900      	cmp	r1, #0
    53ba:	d0f8      	beq.n	53ae <__aeabi_idiv+0x1c2>
    53bc:	e716      	b.n	51ec <__aeabi_idiv>
    53be:	4770      	bx	lr

000053c0 <__aeabi_idiv0>:
    53c0:	4770      	bx	lr
    53c2:	46c0      	nop			; (mov r8, r8)

000053c4 <__aeabi_cdrcmple>:
    53c4:	4684      	mov	ip, r0
    53c6:	1c10      	adds	r0, r2, #0
    53c8:	4662      	mov	r2, ip
    53ca:	468c      	mov	ip, r1
    53cc:	1c19      	adds	r1, r3, #0
    53ce:	4663      	mov	r3, ip
    53d0:	e000      	b.n	53d4 <__aeabi_cdcmpeq>
    53d2:	46c0      	nop			; (mov r8, r8)

000053d4 <__aeabi_cdcmpeq>:
    53d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    53d6:	f000 ff45 	bl	6264 <__ledf2>
    53da:	2800      	cmp	r0, #0
    53dc:	d401      	bmi.n	53e2 <__aeabi_cdcmpeq+0xe>
    53de:	2100      	movs	r1, #0
    53e0:	42c8      	cmn	r0, r1
    53e2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000053e4 <__aeabi_dcmpeq>:
    53e4:	b510      	push	{r4, lr}
    53e6:	f000 fe99 	bl	611c <__eqdf2>
    53ea:	4240      	negs	r0, r0
    53ec:	3001      	adds	r0, #1
    53ee:	bd10      	pop	{r4, pc}

000053f0 <__aeabi_dcmplt>:
    53f0:	b510      	push	{r4, lr}
    53f2:	f000 ff37 	bl	6264 <__ledf2>
    53f6:	2800      	cmp	r0, #0
    53f8:	db01      	blt.n	53fe <__aeabi_dcmplt+0xe>
    53fa:	2000      	movs	r0, #0
    53fc:	bd10      	pop	{r4, pc}
    53fe:	2001      	movs	r0, #1
    5400:	bd10      	pop	{r4, pc}
    5402:	46c0      	nop			; (mov r8, r8)

00005404 <__aeabi_dcmple>:
    5404:	b510      	push	{r4, lr}
    5406:	f000 ff2d 	bl	6264 <__ledf2>
    540a:	2800      	cmp	r0, #0
    540c:	dd01      	ble.n	5412 <__aeabi_dcmple+0xe>
    540e:	2000      	movs	r0, #0
    5410:	bd10      	pop	{r4, pc}
    5412:	2001      	movs	r0, #1
    5414:	bd10      	pop	{r4, pc}
    5416:	46c0      	nop			; (mov r8, r8)

00005418 <__aeabi_dcmpgt>:
    5418:	b510      	push	{r4, lr}
    541a:	f000 febf 	bl	619c <__gedf2>
    541e:	2800      	cmp	r0, #0
    5420:	dc01      	bgt.n	5426 <__aeabi_dcmpgt+0xe>
    5422:	2000      	movs	r0, #0
    5424:	bd10      	pop	{r4, pc}
    5426:	2001      	movs	r0, #1
    5428:	bd10      	pop	{r4, pc}
    542a:	46c0      	nop			; (mov r8, r8)

0000542c <__aeabi_dcmpge>:
    542c:	b510      	push	{r4, lr}
    542e:	f000 feb5 	bl	619c <__gedf2>
    5432:	2800      	cmp	r0, #0
    5434:	da01      	bge.n	543a <__aeabi_dcmpge+0xe>
    5436:	2000      	movs	r0, #0
    5438:	bd10      	pop	{r4, pc}
    543a:	2001      	movs	r0, #1
    543c:	bd10      	pop	{r4, pc}
    543e:	46c0      	nop			; (mov r8, r8)

00005440 <__aeabi_lmul>:
    5440:	b5f0      	push	{r4, r5, r6, r7, lr}
    5442:	464f      	mov	r7, r9
    5444:	4646      	mov	r6, r8
    5446:	b4c0      	push	{r6, r7}
    5448:	0416      	lsls	r6, r2, #16
    544a:	0c36      	lsrs	r6, r6, #16
    544c:	4699      	mov	r9, r3
    544e:	0033      	movs	r3, r6
    5450:	0405      	lsls	r5, r0, #16
    5452:	0c2c      	lsrs	r4, r5, #16
    5454:	0c07      	lsrs	r7, r0, #16
    5456:	0c15      	lsrs	r5, r2, #16
    5458:	4363      	muls	r3, r4
    545a:	437e      	muls	r6, r7
    545c:	436f      	muls	r7, r5
    545e:	4365      	muls	r5, r4
    5460:	0c1c      	lsrs	r4, r3, #16
    5462:	19ad      	adds	r5, r5, r6
    5464:	1964      	adds	r4, r4, r5
    5466:	469c      	mov	ip, r3
    5468:	42a6      	cmp	r6, r4
    546a:	d903      	bls.n	5474 <__aeabi_lmul+0x34>
    546c:	2380      	movs	r3, #128	; 0x80
    546e:	025b      	lsls	r3, r3, #9
    5470:	4698      	mov	r8, r3
    5472:	4447      	add	r7, r8
    5474:	4663      	mov	r3, ip
    5476:	0c25      	lsrs	r5, r4, #16
    5478:	19ef      	adds	r7, r5, r7
    547a:	041d      	lsls	r5, r3, #16
    547c:	464b      	mov	r3, r9
    547e:	434a      	muls	r2, r1
    5480:	4343      	muls	r3, r0
    5482:	0c2d      	lsrs	r5, r5, #16
    5484:	0424      	lsls	r4, r4, #16
    5486:	1964      	adds	r4, r4, r5
    5488:	1899      	adds	r1, r3, r2
    548a:	19c9      	adds	r1, r1, r7
    548c:	0020      	movs	r0, r4
    548e:	bc0c      	pop	{r2, r3}
    5490:	4690      	mov	r8, r2
    5492:	4699      	mov	r9, r3
    5494:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5496:	46c0      	nop			; (mov r8, r8)

00005498 <__aeabi_dadd>:
    5498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    549a:	4656      	mov	r6, sl
    549c:	465f      	mov	r7, fp
    549e:	464d      	mov	r5, r9
    54a0:	4644      	mov	r4, r8
    54a2:	b4f0      	push	{r4, r5, r6, r7}
    54a4:	000f      	movs	r7, r1
    54a6:	0ffd      	lsrs	r5, r7, #31
    54a8:	46aa      	mov	sl, r5
    54aa:	0309      	lsls	r1, r1, #12
    54ac:	007c      	lsls	r4, r7, #1
    54ae:	002e      	movs	r6, r5
    54b0:	005f      	lsls	r7, r3, #1
    54b2:	0f45      	lsrs	r5, r0, #29
    54b4:	0a49      	lsrs	r1, r1, #9
    54b6:	0d7f      	lsrs	r7, r7, #21
    54b8:	4329      	orrs	r1, r5
    54ba:	00c5      	lsls	r5, r0, #3
    54bc:	0318      	lsls	r0, r3, #12
    54be:	46bc      	mov	ip, r7
    54c0:	0a40      	lsrs	r0, r0, #9
    54c2:	0f57      	lsrs	r7, r2, #29
    54c4:	0d64      	lsrs	r4, r4, #21
    54c6:	0fdb      	lsrs	r3, r3, #31
    54c8:	4338      	orrs	r0, r7
    54ca:	00d2      	lsls	r2, r2, #3
    54cc:	459a      	cmp	sl, r3
    54ce:	d100      	bne.n	54d2 <__aeabi_dadd+0x3a>
    54d0:	e0aa      	b.n	5628 <__aeabi_dadd+0x190>
    54d2:	4666      	mov	r6, ip
    54d4:	1ba6      	subs	r6, r4, r6
    54d6:	2e00      	cmp	r6, #0
    54d8:	dc00      	bgt.n	54dc <__aeabi_dadd+0x44>
    54da:	e0ff      	b.n	56dc <__aeabi_dadd+0x244>
    54dc:	4663      	mov	r3, ip
    54de:	2b00      	cmp	r3, #0
    54e0:	d139      	bne.n	5556 <__aeabi_dadd+0xbe>
    54e2:	0003      	movs	r3, r0
    54e4:	4313      	orrs	r3, r2
    54e6:	d000      	beq.n	54ea <__aeabi_dadd+0x52>
    54e8:	e0d9      	b.n	569e <__aeabi_dadd+0x206>
    54ea:	076b      	lsls	r3, r5, #29
    54ec:	d009      	beq.n	5502 <__aeabi_dadd+0x6a>
    54ee:	230f      	movs	r3, #15
    54f0:	402b      	ands	r3, r5
    54f2:	2b04      	cmp	r3, #4
    54f4:	d005      	beq.n	5502 <__aeabi_dadd+0x6a>
    54f6:	1d2b      	adds	r3, r5, #4
    54f8:	42ab      	cmp	r3, r5
    54fa:	41ad      	sbcs	r5, r5
    54fc:	426d      	negs	r5, r5
    54fe:	1949      	adds	r1, r1, r5
    5500:	001d      	movs	r5, r3
    5502:	020b      	lsls	r3, r1, #8
    5504:	d400      	bmi.n	5508 <__aeabi_dadd+0x70>
    5506:	e082      	b.n	560e <__aeabi_dadd+0x176>
    5508:	4bca      	ldr	r3, [pc, #808]	; (5834 <__aeabi_dadd+0x39c>)
    550a:	3401      	adds	r4, #1
    550c:	429c      	cmp	r4, r3
    550e:	d100      	bne.n	5512 <__aeabi_dadd+0x7a>
    5510:	e0fe      	b.n	5710 <__aeabi_dadd+0x278>
    5512:	000a      	movs	r2, r1
    5514:	4656      	mov	r6, sl
    5516:	4bc8      	ldr	r3, [pc, #800]	; (5838 <__aeabi_dadd+0x3a0>)
    5518:	08ed      	lsrs	r5, r5, #3
    551a:	401a      	ands	r2, r3
    551c:	0750      	lsls	r0, r2, #29
    551e:	0564      	lsls	r4, r4, #21
    5520:	0252      	lsls	r2, r2, #9
    5522:	4305      	orrs	r5, r0
    5524:	0b12      	lsrs	r2, r2, #12
    5526:	0d64      	lsrs	r4, r4, #21
    5528:	2100      	movs	r1, #0
    552a:	0312      	lsls	r2, r2, #12
    552c:	0d0b      	lsrs	r3, r1, #20
    552e:	051b      	lsls	r3, r3, #20
    5530:	0564      	lsls	r4, r4, #21
    5532:	0b12      	lsrs	r2, r2, #12
    5534:	431a      	orrs	r2, r3
    5536:	0863      	lsrs	r3, r4, #1
    5538:	4cc0      	ldr	r4, [pc, #768]	; (583c <__aeabi_dadd+0x3a4>)
    553a:	07f6      	lsls	r6, r6, #31
    553c:	4014      	ands	r4, r2
    553e:	431c      	orrs	r4, r3
    5540:	0064      	lsls	r4, r4, #1
    5542:	0864      	lsrs	r4, r4, #1
    5544:	4334      	orrs	r4, r6
    5546:	0028      	movs	r0, r5
    5548:	0021      	movs	r1, r4
    554a:	bc3c      	pop	{r2, r3, r4, r5}
    554c:	4690      	mov	r8, r2
    554e:	4699      	mov	r9, r3
    5550:	46a2      	mov	sl, r4
    5552:	46ab      	mov	fp, r5
    5554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5556:	4bb7      	ldr	r3, [pc, #732]	; (5834 <__aeabi_dadd+0x39c>)
    5558:	429c      	cmp	r4, r3
    555a:	d0c6      	beq.n	54ea <__aeabi_dadd+0x52>
    555c:	2380      	movs	r3, #128	; 0x80
    555e:	041b      	lsls	r3, r3, #16
    5560:	4318      	orrs	r0, r3
    5562:	2e38      	cmp	r6, #56	; 0x38
    5564:	dd00      	ble.n	5568 <__aeabi_dadd+0xd0>
    5566:	e0eb      	b.n	5740 <__aeabi_dadd+0x2a8>
    5568:	2e1f      	cmp	r6, #31
    556a:	dd00      	ble.n	556e <__aeabi_dadd+0xd6>
    556c:	e11e      	b.n	57ac <__aeabi_dadd+0x314>
    556e:	2320      	movs	r3, #32
    5570:	1b9b      	subs	r3, r3, r6
    5572:	469c      	mov	ip, r3
    5574:	0003      	movs	r3, r0
    5576:	4667      	mov	r7, ip
    5578:	40bb      	lsls	r3, r7
    557a:	4698      	mov	r8, r3
    557c:	0013      	movs	r3, r2
    557e:	4647      	mov	r7, r8
    5580:	40f3      	lsrs	r3, r6
    5582:	433b      	orrs	r3, r7
    5584:	4667      	mov	r7, ip
    5586:	40ba      	lsls	r2, r7
    5588:	1e57      	subs	r7, r2, #1
    558a:	41ba      	sbcs	r2, r7
    558c:	4313      	orrs	r3, r2
    558e:	0002      	movs	r2, r0
    5590:	40f2      	lsrs	r2, r6
    5592:	1aeb      	subs	r3, r5, r3
    5594:	429d      	cmp	r5, r3
    5596:	41b6      	sbcs	r6, r6
    5598:	001d      	movs	r5, r3
    559a:	1a8a      	subs	r2, r1, r2
    559c:	4276      	negs	r6, r6
    559e:	1b91      	subs	r1, r2, r6
    55a0:	020b      	lsls	r3, r1, #8
    55a2:	d531      	bpl.n	5608 <__aeabi_dadd+0x170>
    55a4:	024a      	lsls	r2, r1, #9
    55a6:	0a56      	lsrs	r6, r2, #9
    55a8:	2e00      	cmp	r6, #0
    55aa:	d100      	bne.n	55ae <__aeabi_dadd+0x116>
    55ac:	e0b4      	b.n	5718 <__aeabi_dadd+0x280>
    55ae:	0030      	movs	r0, r6
    55b0:	f001 fd60 	bl	7074 <__clzsi2>
    55b4:	0003      	movs	r3, r0
    55b6:	3b08      	subs	r3, #8
    55b8:	2b1f      	cmp	r3, #31
    55ba:	dd00      	ble.n	55be <__aeabi_dadd+0x126>
    55bc:	e0b5      	b.n	572a <__aeabi_dadd+0x292>
    55be:	2220      	movs	r2, #32
    55c0:	0029      	movs	r1, r5
    55c2:	1ad2      	subs	r2, r2, r3
    55c4:	40d1      	lsrs	r1, r2
    55c6:	409e      	lsls	r6, r3
    55c8:	000a      	movs	r2, r1
    55ca:	409d      	lsls	r5, r3
    55cc:	4332      	orrs	r2, r6
    55ce:	429c      	cmp	r4, r3
    55d0:	dd00      	ble.n	55d4 <__aeabi_dadd+0x13c>
    55d2:	e0b1      	b.n	5738 <__aeabi_dadd+0x2a0>
    55d4:	1b1c      	subs	r4, r3, r4
    55d6:	1c63      	adds	r3, r4, #1
    55d8:	2b1f      	cmp	r3, #31
    55da:	dd00      	ble.n	55de <__aeabi_dadd+0x146>
    55dc:	e0d5      	b.n	578a <__aeabi_dadd+0x2f2>
    55de:	2120      	movs	r1, #32
    55e0:	0014      	movs	r4, r2
    55e2:	0028      	movs	r0, r5
    55e4:	1ac9      	subs	r1, r1, r3
    55e6:	408c      	lsls	r4, r1
    55e8:	40d8      	lsrs	r0, r3
    55ea:	408d      	lsls	r5, r1
    55ec:	4304      	orrs	r4, r0
    55ee:	40da      	lsrs	r2, r3
    55f0:	1e68      	subs	r0, r5, #1
    55f2:	4185      	sbcs	r5, r0
    55f4:	0011      	movs	r1, r2
    55f6:	4325      	orrs	r5, r4
    55f8:	2400      	movs	r4, #0
    55fa:	e776      	b.n	54ea <__aeabi_dadd+0x52>
    55fc:	4641      	mov	r1, r8
    55fe:	4331      	orrs	r1, r6
    5600:	d100      	bne.n	5604 <__aeabi_dadd+0x16c>
    5602:	e234      	b.n	5a6e <__aeabi_dadd+0x5d6>
    5604:	0031      	movs	r1, r6
    5606:	4645      	mov	r5, r8
    5608:	076b      	lsls	r3, r5, #29
    560a:	d000      	beq.n	560e <__aeabi_dadd+0x176>
    560c:	e76f      	b.n	54ee <__aeabi_dadd+0x56>
    560e:	4656      	mov	r6, sl
    5610:	0748      	lsls	r0, r1, #29
    5612:	08ed      	lsrs	r5, r5, #3
    5614:	08c9      	lsrs	r1, r1, #3
    5616:	4305      	orrs	r5, r0
    5618:	4b86      	ldr	r3, [pc, #536]	; (5834 <__aeabi_dadd+0x39c>)
    561a:	429c      	cmp	r4, r3
    561c:	d035      	beq.n	568a <__aeabi_dadd+0x1f2>
    561e:	030a      	lsls	r2, r1, #12
    5620:	0564      	lsls	r4, r4, #21
    5622:	0b12      	lsrs	r2, r2, #12
    5624:	0d64      	lsrs	r4, r4, #21
    5626:	e77f      	b.n	5528 <__aeabi_dadd+0x90>
    5628:	4663      	mov	r3, ip
    562a:	1ae3      	subs	r3, r4, r3
    562c:	469b      	mov	fp, r3
    562e:	2b00      	cmp	r3, #0
    5630:	dc00      	bgt.n	5634 <__aeabi_dadd+0x19c>
    5632:	e08b      	b.n	574c <__aeabi_dadd+0x2b4>
    5634:	4667      	mov	r7, ip
    5636:	2f00      	cmp	r7, #0
    5638:	d03c      	beq.n	56b4 <__aeabi_dadd+0x21c>
    563a:	4f7e      	ldr	r7, [pc, #504]	; (5834 <__aeabi_dadd+0x39c>)
    563c:	42bc      	cmp	r4, r7
    563e:	d100      	bne.n	5642 <__aeabi_dadd+0x1aa>
    5640:	e753      	b.n	54ea <__aeabi_dadd+0x52>
    5642:	2780      	movs	r7, #128	; 0x80
    5644:	043f      	lsls	r7, r7, #16
    5646:	4338      	orrs	r0, r7
    5648:	465b      	mov	r3, fp
    564a:	2b38      	cmp	r3, #56	; 0x38
    564c:	dc00      	bgt.n	5650 <__aeabi_dadd+0x1b8>
    564e:	e0f7      	b.n	5840 <__aeabi_dadd+0x3a8>
    5650:	4302      	orrs	r2, r0
    5652:	1e50      	subs	r0, r2, #1
    5654:	4182      	sbcs	r2, r0
    5656:	2000      	movs	r0, #0
    5658:	b2d2      	uxtb	r2, r2
    565a:	1953      	adds	r3, r2, r5
    565c:	1842      	adds	r2, r0, r1
    565e:	42ab      	cmp	r3, r5
    5660:	4189      	sbcs	r1, r1
    5662:	001d      	movs	r5, r3
    5664:	4249      	negs	r1, r1
    5666:	1889      	adds	r1, r1, r2
    5668:	020b      	lsls	r3, r1, #8
    566a:	d5cd      	bpl.n	5608 <__aeabi_dadd+0x170>
    566c:	4b71      	ldr	r3, [pc, #452]	; (5834 <__aeabi_dadd+0x39c>)
    566e:	3401      	adds	r4, #1
    5670:	429c      	cmp	r4, r3
    5672:	d100      	bne.n	5676 <__aeabi_dadd+0x1de>
    5674:	e13d      	b.n	58f2 <__aeabi_dadd+0x45a>
    5676:	2001      	movs	r0, #1
    5678:	4a6f      	ldr	r2, [pc, #444]	; (5838 <__aeabi_dadd+0x3a0>)
    567a:	086b      	lsrs	r3, r5, #1
    567c:	400a      	ands	r2, r1
    567e:	4028      	ands	r0, r5
    5680:	4318      	orrs	r0, r3
    5682:	07d5      	lsls	r5, r2, #31
    5684:	4305      	orrs	r5, r0
    5686:	0851      	lsrs	r1, r2, #1
    5688:	e72f      	b.n	54ea <__aeabi_dadd+0x52>
    568a:	002b      	movs	r3, r5
    568c:	430b      	orrs	r3, r1
    568e:	d100      	bne.n	5692 <__aeabi_dadd+0x1fa>
    5690:	e1cb      	b.n	5a2a <__aeabi_dadd+0x592>
    5692:	2380      	movs	r3, #128	; 0x80
    5694:	031b      	lsls	r3, r3, #12
    5696:	430b      	orrs	r3, r1
    5698:	031a      	lsls	r2, r3, #12
    569a:	0b12      	lsrs	r2, r2, #12
    569c:	e744      	b.n	5528 <__aeabi_dadd+0x90>
    569e:	3e01      	subs	r6, #1
    56a0:	2e00      	cmp	r6, #0
    56a2:	d16d      	bne.n	5780 <__aeabi_dadd+0x2e8>
    56a4:	1aae      	subs	r6, r5, r2
    56a6:	42b5      	cmp	r5, r6
    56a8:	419b      	sbcs	r3, r3
    56aa:	1a09      	subs	r1, r1, r0
    56ac:	425b      	negs	r3, r3
    56ae:	1ac9      	subs	r1, r1, r3
    56b0:	0035      	movs	r5, r6
    56b2:	e775      	b.n	55a0 <__aeabi_dadd+0x108>
    56b4:	0007      	movs	r7, r0
    56b6:	4317      	orrs	r7, r2
    56b8:	d100      	bne.n	56bc <__aeabi_dadd+0x224>
    56ba:	e716      	b.n	54ea <__aeabi_dadd+0x52>
    56bc:	2301      	movs	r3, #1
    56be:	425b      	negs	r3, r3
    56c0:	469c      	mov	ip, r3
    56c2:	44e3      	add	fp, ip
    56c4:	465b      	mov	r3, fp
    56c6:	2b00      	cmp	r3, #0
    56c8:	d000      	beq.n	56cc <__aeabi_dadd+0x234>
    56ca:	e0e0      	b.n	588e <__aeabi_dadd+0x3f6>
    56cc:	18aa      	adds	r2, r5, r2
    56ce:	42aa      	cmp	r2, r5
    56d0:	419b      	sbcs	r3, r3
    56d2:	1809      	adds	r1, r1, r0
    56d4:	425b      	negs	r3, r3
    56d6:	1859      	adds	r1, r3, r1
    56d8:	0015      	movs	r5, r2
    56da:	e7c5      	b.n	5668 <__aeabi_dadd+0x1d0>
    56dc:	2e00      	cmp	r6, #0
    56de:	d175      	bne.n	57cc <__aeabi_dadd+0x334>
    56e0:	1c66      	adds	r6, r4, #1
    56e2:	0576      	lsls	r6, r6, #21
    56e4:	0d76      	lsrs	r6, r6, #21
    56e6:	2e01      	cmp	r6, #1
    56e8:	dc00      	bgt.n	56ec <__aeabi_dadd+0x254>
    56ea:	e0f3      	b.n	58d4 <__aeabi_dadd+0x43c>
    56ec:	1aae      	subs	r6, r5, r2
    56ee:	46b0      	mov	r8, r6
    56f0:	4545      	cmp	r5, r8
    56f2:	41bf      	sbcs	r7, r7
    56f4:	1a0e      	subs	r6, r1, r0
    56f6:	427f      	negs	r7, r7
    56f8:	1bf6      	subs	r6, r6, r7
    56fa:	0237      	lsls	r7, r6, #8
    56fc:	d400      	bmi.n	5700 <__aeabi_dadd+0x268>
    56fe:	e08f      	b.n	5820 <__aeabi_dadd+0x388>
    5700:	1b55      	subs	r5, r2, r5
    5702:	42aa      	cmp	r2, r5
    5704:	41b6      	sbcs	r6, r6
    5706:	1a41      	subs	r1, r0, r1
    5708:	4276      	negs	r6, r6
    570a:	1b8e      	subs	r6, r1, r6
    570c:	469a      	mov	sl, r3
    570e:	e74b      	b.n	55a8 <__aeabi_dadd+0x110>
    5710:	4656      	mov	r6, sl
    5712:	2200      	movs	r2, #0
    5714:	2500      	movs	r5, #0
    5716:	e707      	b.n	5528 <__aeabi_dadd+0x90>
    5718:	0028      	movs	r0, r5
    571a:	f001 fcab 	bl	7074 <__clzsi2>
    571e:	3020      	adds	r0, #32
    5720:	0003      	movs	r3, r0
    5722:	3b08      	subs	r3, #8
    5724:	2b1f      	cmp	r3, #31
    5726:	dc00      	bgt.n	572a <__aeabi_dadd+0x292>
    5728:	e749      	b.n	55be <__aeabi_dadd+0x126>
    572a:	002a      	movs	r2, r5
    572c:	3828      	subs	r0, #40	; 0x28
    572e:	4082      	lsls	r2, r0
    5730:	2500      	movs	r5, #0
    5732:	429c      	cmp	r4, r3
    5734:	dc00      	bgt.n	5738 <__aeabi_dadd+0x2a0>
    5736:	e74d      	b.n	55d4 <__aeabi_dadd+0x13c>
    5738:	493f      	ldr	r1, [pc, #252]	; (5838 <__aeabi_dadd+0x3a0>)
    573a:	1ae4      	subs	r4, r4, r3
    573c:	4011      	ands	r1, r2
    573e:	e6d4      	b.n	54ea <__aeabi_dadd+0x52>
    5740:	4302      	orrs	r2, r0
    5742:	1e50      	subs	r0, r2, #1
    5744:	4182      	sbcs	r2, r0
    5746:	b2d3      	uxtb	r3, r2
    5748:	2200      	movs	r2, #0
    574a:	e722      	b.n	5592 <__aeabi_dadd+0xfa>
    574c:	2b00      	cmp	r3, #0
    574e:	d000      	beq.n	5752 <__aeabi_dadd+0x2ba>
    5750:	e0f3      	b.n	593a <__aeabi_dadd+0x4a2>
    5752:	1c63      	adds	r3, r4, #1
    5754:	469c      	mov	ip, r3
    5756:	055b      	lsls	r3, r3, #21
    5758:	0d5b      	lsrs	r3, r3, #21
    575a:	2b01      	cmp	r3, #1
    575c:	dc00      	bgt.n	5760 <__aeabi_dadd+0x2c8>
    575e:	e09f      	b.n	58a0 <__aeabi_dadd+0x408>
    5760:	4b34      	ldr	r3, [pc, #208]	; (5834 <__aeabi_dadd+0x39c>)
    5762:	459c      	cmp	ip, r3
    5764:	d100      	bne.n	5768 <__aeabi_dadd+0x2d0>
    5766:	e0c3      	b.n	58f0 <__aeabi_dadd+0x458>
    5768:	18aa      	adds	r2, r5, r2
    576a:	1809      	adds	r1, r1, r0
    576c:	42aa      	cmp	r2, r5
    576e:	4180      	sbcs	r0, r0
    5770:	4240      	negs	r0, r0
    5772:	1841      	adds	r1, r0, r1
    5774:	07cd      	lsls	r5, r1, #31
    5776:	0852      	lsrs	r2, r2, #1
    5778:	4315      	orrs	r5, r2
    577a:	0849      	lsrs	r1, r1, #1
    577c:	4664      	mov	r4, ip
    577e:	e6b4      	b.n	54ea <__aeabi_dadd+0x52>
    5780:	4b2c      	ldr	r3, [pc, #176]	; (5834 <__aeabi_dadd+0x39c>)
    5782:	429c      	cmp	r4, r3
    5784:	d000      	beq.n	5788 <__aeabi_dadd+0x2f0>
    5786:	e6ec      	b.n	5562 <__aeabi_dadd+0xca>
    5788:	e6af      	b.n	54ea <__aeabi_dadd+0x52>
    578a:	0011      	movs	r1, r2
    578c:	3c1f      	subs	r4, #31
    578e:	40e1      	lsrs	r1, r4
    5790:	000c      	movs	r4, r1
    5792:	2b20      	cmp	r3, #32
    5794:	d100      	bne.n	5798 <__aeabi_dadd+0x300>
    5796:	e07f      	b.n	5898 <__aeabi_dadd+0x400>
    5798:	2140      	movs	r1, #64	; 0x40
    579a:	1acb      	subs	r3, r1, r3
    579c:	409a      	lsls	r2, r3
    579e:	4315      	orrs	r5, r2
    57a0:	1e6a      	subs	r2, r5, #1
    57a2:	4195      	sbcs	r5, r2
    57a4:	2100      	movs	r1, #0
    57a6:	4325      	orrs	r5, r4
    57a8:	2400      	movs	r4, #0
    57aa:	e72d      	b.n	5608 <__aeabi_dadd+0x170>
    57ac:	0033      	movs	r3, r6
    57ae:	0007      	movs	r7, r0
    57b0:	3b20      	subs	r3, #32
    57b2:	40df      	lsrs	r7, r3
    57b4:	003b      	movs	r3, r7
    57b6:	2e20      	cmp	r6, #32
    57b8:	d070      	beq.n	589c <__aeabi_dadd+0x404>
    57ba:	2740      	movs	r7, #64	; 0x40
    57bc:	1bbe      	subs	r6, r7, r6
    57be:	40b0      	lsls	r0, r6
    57c0:	4302      	orrs	r2, r0
    57c2:	1e50      	subs	r0, r2, #1
    57c4:	4182      	sbcs	r2, r0
    57c6:	4313      	orrs	r3, r2
    57c8:	2200      	movs	r2, #0
    57ca:	e6e2      	b.n	5592 <__aeabi_dadd+0xfa>
    57cc:	2c00      	cmp	r4, #0
    57ce:	d04f      	beq.n	5870 <__aeabi_dadd+0x3d8>
    57d0:	4c18      	ldr	r4, [pc, #96]	; (5834 <__aeabi_dadd+0x39c>)
    57d2:	45a4      	cmp	ip, r4
    57d4:	d100      	bne.n	57d8 <__aeabi_dadd+0x340>
    57d6:	e0ab      	b.n	5930 <__aeabi_dadd+0x498>
    57d8:	2480      	movs	r4, #128	; 0x80
    57da:	0424      	lsls	r4, r4, #16
    57dc:	4276      	negs	r6, r6
    57de:	4321      	orrs	r1, r4
    57e0:	2e38      	cmp	r6, #56	; 0x38
    57e2:	dd00      	ble.n	57e6 <__aeabi_dadd+0x34e>
    57e4:	e0df      	b.n	59a6 <__aeabi_dadd+0x50e>
    57e6:	2e1f      	cmp	r6, #31
    57e8:	dd00      	ble.n	57ec <__aeabi_dadd+0x354>
    57ea:	e143      	b.n	5a74 <__aeabi_dadd+0x5dc>
    57ec:	2720      	movs	r7, #32
    57ee:	1bbc      	subs	r4, r7, r6
    57f0:	46a1      	mov	r9, r4
    57f2:	000c      	movs	r4, r1
    57f4:	464f      	mov	r7, r9
    57f6:	40bc      	lsls	r4, r7
    57f8:	46a0      	mov	r8, r4
    57fa:	002c      	movs	r4, r5
    57fc:	4647      	mov	r7, r8
    57fe:	40f4      	lsrs	r4, r6
    5800:	433c      	orrs	r4, r7
    5802:	464f      	mov	r7, r9
    5804:	40bd      	lsls	r5, r7
    5806:	1e6f      	subs	r7, r5, #1
    5808:	41bd      	sbcs	r5, r7
    580a:	40f1      	lsrs	r1, r6
    580c:	432c      	orrs	r4, r5
    580e:	1b15      	subs	r5, r2, r4
    5810:	42aa      	cmp	r2, r5
    5812:	4192      	sbcs	r2, r2
    5814:	1a41      	subs	r1, r0, r1
    5816:	4252      	negs	r2, r2
    5818:	1a89      	subs	r1, r1, r2
    581a:	4664      	mov	r4, ip
    581c:	469a      	mov	sl, r3
    581e:	e6bf      	b.n	55a0 <__aeabi_dadd+0x108>
    5820:	4641      	mov	r1, r8
    5822:	4645      	mov	r5, r8
    5824:	4331      	orrs	r1, r6
    5826:	d000      	beq.n	582a <__aeabi_dadd+0x392>
    5828:	e6be      	b.n	55a8 <__aeabi_dadd+0x110>
    582a:	2600      	movs	r6, #0
    582c:	2400      	movs	r4, #0
    582e:	2500      	movs	r5, #0
    5830:	e6f2      	b.n	5618 <__aeabi_dadd+0x180>
    5832:	46c0      	nop			; (mov r8, r8)
    5834:	000007ff 	.word	0x000007ff
    5838:	ff7fffff 	.word	0xff7fffff
    583c:	800fffff 	.word	0x800fffff
    5840:	2b1f      	cmp	r3, #31
    5842:	dc59      	bgt.n	58f8 <__aeabi_dadd+0x460>
    5844:	2720      	movs	r7, #32
    5846:	1aff      	subs	r7, r7, r3
    5848:	46bc      	mov	ip, r7
    584a:	0007      	movs	r7, r0
    584c:	4663      	mov	r3, ip
    584e:	409f      	lsls	r7, r3
    5850:	465b      	mov	r3, fp
    5852:	46b9      	mov	r9, r7
    5854:	0017      	movs	r7, r2
    5856:	40df      	lsrs	r7, r3
    5858:	46b8      	mov	r8, r7
    585a:	464f      	mov	r7, r9
    585c:	4643      	mov	r3, r8
    585e:	431f      	orrs	r7, r3
    5860:	4663      	mov	r3, ip
    5862:	409a      	lsls	r2, r3
    5864:	1e53      	subs	r3, r2, #1
    5866:	419a      	sbcs	r2, r3
    5868:	465b      	mov	r3, fp
    586a:	433a      	orrs	r2, r7
    586c:	40d8      	lsrs	r0, r3
    586e:	e6f4      	b.n	565a <__aeabi_dadd+0x1c2>
    5870:	000c      	movs	r4, r1
    5872:	432c      	orrs	r4, r5
    5874:	d05c      	beq.n	5930 <__aeabi_dadd+0x498>
    5876:	43f6      	mvns	r6, r6
    5878:	2e00      	cmp	r6, #0
    587a:	d155      	bne.n	5928 <__aeabi_dadd+0x490>
    587c:	1b55      	subs	r5, r2, r5
    587e:	42aa      	cmp	r2, r5
    5880:	41a4      	sbcs	r4, r4
    5882:	1a41      	subs	r1, r0, r1
    5884:	4264      	negs	r4, r4
    5886:	1b09      	subs	r1, r1, r4
    5888:	469a      	mov	sl, r3
    588a:	4664      	mov	r4, ip
    588c:	e688      	b.n	55a0 <__aeabi_dadd+0x108>
    588e:	4f96      	ldr	r7, [pc, #600]	; (5ae8 <__aeabi_dadd+0x650>)
    5890:	42bc      	cmp	r4, r7
    5892:	d000      	beq.n	5896 <__aeabi_dadd+0x3fe>
    5894:	e6d8      	b.n	5648 <__aeabi_dadd+0x1b0>
    5896:	e628      	b.n	54ea <__aeabi_dadd+0x52>
    5898:	2200      	movs	r2, #0
    589a:	e780      	b.n	579e <__aeabi_dadd+0x306>
    589c:	2000      	movs	r0, #0
    589e:	e78f      	b.n	57c0 <__aeabi_dadd+0x328>
    58a0:	000b      	movs	r3, r1
    58a2:	432b      	orrs	r3, r5
    58a4:	2c00      	cmp	r4, #0
    58a6:	d000      	beq.n	58aa <__aeabi_dadd+0x412>
    58a8:	e0c2      	b.n	5a30 <__aeabi_dadd+0x598>
    58aa:	2b00      	cmp	r3, #0
    58ac:	d100      	bne.n	58b0 <__aeabi_dadd+0x418>
    58ae:	e101      	b.n	5ab4 <__aeabi_dadd+0x61c>
    58b0:	0003      	movs	r3, r0
    58b2:	4313      	orrs	r3, r2
    58b4:	d100      	bne.n	58b8 <__aeabi_dadd+0x420>
    58b6:	e618      	b.n	54ea <__aeabi_dadd+0x52>
    58b8:	18ab      	adds	r3, r5, r2
    58ba:	42ab      	cmp	r3, r5
    58bc:	41b6      	sbcs	r6, r6
    58be:	1809      	adds	r1, r1, r0
    58c0:	4276      	negs	r6, r6
    58c2:	1871      	adds	r1, r6, r1
    58c4:	020a      	lsls	r2, r1, #8
    58c6:	d400      	bmi.n	58ca <__aeabi_dadd+0x432>
    58c8:	e109      	b.n	5ade <__aeabi_dadd+0x646>
    58ca:	4a88      	ldr	r2, [pc, #544]	; (5aec <__aeabi_dadd+0x654>)
    58cc:	001d      	movs	r5, r3
    58ce:	4011      	ands	r1, r2
    58d0:	4664      	mov	r4, ip
    58d2:	e60a      	b.n	54ea <__aeabi_dadd+0x52>
    58d4:	2c00      	cmp	r4, #0
    58d6:	d15b      	bne.n	5990 <__aeabi_dadd+0x4f8>
    58d8:	000e      	movs	r6, r1
    58da:	432e      	orrs	r6, r5
    58dc:	d000      	beq.n	58e0 <__aeabi_dadd+0x448>
    58de:	e08a      	b.n	59f6 <__aeabi_dadd+0x55e>
    58e0:	0001      	movs	r1, r0
    58e2:	4311      	orrs	r1, r2
    58e4:	d100      	bne.n	58e8 <__aeabi_dadd+0x450>
    58e6:	e0c2      	b.n	5a6e <__aeabi_dadd+0x5d6>
    58e8:	0001      	movs	r1, r0
    58ea:	0015      	movs	r5, r2
    58ec:	469a      	mov	sl, r3
    58ee:	e5fc      	b.n	54ea <__aeabi_dadd+0x52>
    58f0:	4664      	mov	r4, ip
    58f2:	2100      	movs	r1, #0
    58f4:	2500      	movs	r5, #0
    58f6:	e68f      	b.n	5618 <__aeabi_dadd+0x180>
    58f8:	2320      	movs	r3, #32
    58fa:	425b      	negs	r3, r3
    58fc:	469c      	mov	ip, r3
    58fe:	44dc      	add	ip, fp
    5900:	4663      	mov	r3, ip
    5902:	0007      	movs	r7, r0
    5904:	40df      	lsrs	r7, r3
    5906:	465b      	mov	r3, fp
    5908:	46bc      	mov	ip, r7
    590a:	2b20      	cmp	r3, #32
    590c:	d100      	bne.n	5910 <__aeabi_dadd+0x478>
    590e:	e0ac      	b.n	5a6a <__aeabi_dadd+0x5d2>
    5910:	2340      	movs	r3, #64	; 0x40
    5912:	465f      	mov	r7, fp
    5914:	1bdb      	subs	r3, r3, r7
    5916:	4098      	lsls	r0, r3
    5918:	4302      	orrs	r2, r0
    591a:	1e50      	subs	r0, r2, #1
    591c:	4182      	sbcs	r2, r0
    591e:	4663      	mov	r3, ip
    5920:	4313      	orrs	r3, r2
    5922:	001a      	movs	r2, r3
    5924:	2000      	movs	r0, #0
    5926:	e698      	b.n	565a <__aeabi_dadd+0x1c2>
    5928:	4c6f      	ldr	r4, [pc, #444]	; (5ae8 <__aeabi_dadd+0x650>)
    592a:	45a4      	cmp	ip, r4
    592c:	d000      	beq.n	5930 <__aeabi_dadd+0x498>
    592e:	e757      	b.n	57e0 <__aeabi_dadd+0x348>
    5930:	0001      	movs	r1, r0
    5932:	0015      	movs	r5, r2
    5934:	4664      	mov	r4, ip
    5936:	469a      	mov	sl, r3
    5938:	e5d7      	b.n	54ea <__aeabi_dadd+0x52>
    593a:	2c00      	cmp	r4, #0
    593c:	d139      	bne.n	59b2 <__aeabi_dadd+0x51a>
    593e:	000c      	movs	r4, r1
    5940:	432c      	orrs	r4, r5
    5942:	d06e      	beq.n	5a22 <__aeabi_dadd+0x58a>
    5944:	43db      	mvns	r3, r3
    5946:	2b00      	cmp	r3, #0
    5948:	d01a      	beq.n	5980 <__aeabi_dadd+0x4e8>
    594a:	4c67      	ldr	r4, [pc, #412]	; (5ae8 <__aeabi_dadd+0x650>)
    594c:	45a4      	cmp	ip, r4
    594e:	d068      	beq.n	5a22 <__aeabi_dadd+0x58a>
    5950:	2b38      	cmp	r3, #56	; 0x38
    5952:	dd00      	ble.n	5956 <__aeabi_dadd+0x4be>
    5954:	e0a4      	b.n	5aa0 <__aeabi_dadd+0x608>
    5956:	2b1f      	cmp	r3, #31
    5958:	dd00      	ble.n	595c <__aeabi_dadd+0x4c4>
    595a:	e0ae      	b.n	5aba <__aeabi_dadd+0x622>
    595c:	2420      	movs	r4, #32
    595e:	000f      	movs	r7, r1
    5960:	1ae4      	subs	r4, r4, r3
    5962:	40a7      	lsls	r7, r4
    5964:	46b9      	mov	r9, r7
    5966:	002f      	movs	r7, r5
    5968:	40df      	lsrs	r7, r3
    596a:	46b8      	mov	r8, r7
    596c:	46a3      	mov	fp, r4
    596e:	464f      	mov	r7, r9
    5970:	4644      	mov	r4, r8
    5972:	4327      	orrs	r7, r4
    5974:	465c      	mov	r4, fp
    5976:	40a5      	lsls	r5, r4
    5978:	1e6c      	subs	r4, r5, #1
    597a:	41a5      	sbcs	r5, r4
    597c:	40d9      	lsrs	r1, r3
    597e:	433d      	orrs	r5, r7
    5980:	18ad      	adds	r5, r5, r2
    5982:	4295      	cmp	r5, r2
    5984:	419b      	sbcs	r3, r3
    5986:	1809      	adds	r1, r1, r0
    5988:	425b      	negs	r3, r3
    598a:	1859      	adds	r1, r3, r1
    598c:	4664      	mov	r4, ip
    598e:	e66b      	b.n	5668 <__aeabi_dadd+0x1d0>
    5990:	000c      	movs	r4, r1
    5992:	432c      	orrs	r4, r5
    5994:	d115      	bne.n	59c2 <__aeabi_dadd+0x52a>
    5996:	0001      	movs	r1, r0
    5998:	4311      	orrs	r1, r2
    599a:	d07b      	beq.n	5a94 <__aeabi_dadd+0x5fc>
    599c:	0001      	movs	r1, r0
    599e:	0015      	movs	r5, r2
    59a0:	469a      	mov	sl, r3
    59a2:	4c51      	ldr	r4, [pc, #324]	; (5ae8 <__aeabi_dadd+0x650>)
    59a4:	e5a1      	b.n	54ea <__aeabi_dadd+0x52>
    59a6:	430d      	orrs	r5, r1
    59a8:	1e69      	subs	r1, r5, #1
    59aa:	418d      	sbcs	r5, r1
    59ac:	2100      	movs	r1, #0
    59ae:	b2ec      	uxtb	r4, r5
    59b0:	e72d      	b.n	580e <__aeabi_dadd+0x376>
    59b2:	4c4d      	ldr	r4, [pc, #308]	; (5ae8 <__aeabi_dadd+0x650>)
    59b4:	45a4      	cmp	ip, r4
    59b6:	d034      	beq.n	5a22 <__aeabi_dadd+0x58a>
    59b8:	2480      	movs	r4, #128	; 0x80
    59ba:	0424      	lsls	r4, r4, #16
    59bc:	425b      	negs	r3, r3
    59be:	4321      	orrs	r1, r4
    59c0:	e7c6      	b.n	5950 <__aeabi_dadd+0x4b8>
    59c2:	0004      	movs	r4, r0
    59c4:	4314      	orrs	r4, r2
    59c6:	d04e      	beq.n	5a66 <__aeabi_dadd+0x5ce>
    59c8:	08ed      	lsrs	r5, r5, #3
    59ca:	074c      	lsls	r4, r1, #29
    59cc:	432c      	orrs	r4, r5
    59ce:	2580      	movs	r5, #128	; 0x80
    59d0:	08c9      	lsrs	r1, r1, #3
    59d2:	032d      	lsls	r5, r5, #12
    59d4:	4229      	tst	r1, r5
    59d6:	d008      	beq.n	59ea <__aeabi_dadd+0x552>
    59d8:	08c6      	lsrs	r6, r0, #3
    59da:	422e      	tst	r6, r5
    59dc:	d105      	bne.n	59ea <__aeabi_dadd+0x552>
    59de:	08d2      	lsrs	r2, r2, #3
    59e0:	0741      	lsls	r1, r0, #29
    59e2:	4311      	orrs	r1, r2
    59e4:	000c      	movs	r4, r1
    59e6:	469a      	mov	sl, r3
    59e8:	0031      	movs	r1, r6
    59ea:	0f62      	lsrs	r2, r4, #29
    59ec:	00c9      	lsls	r1, r1, #3
    59ee:	00e5      	lsls	r5, r4, #3
    59f0:	4311      	orrs	r1, r2
    59f2:	4c3d      	ldr	r4, [pc, #244]	; (5ae8 <__aeabi_dadd+0x650>)
    59f4:	e579      	b.n	54ea <__aeabi_dadd+0x52>
    59f6:	0006      	movs	r6, r0
    59f8:	4316      	orrs	r6, r2
    59fa:	d100      	bne.n	59fe <__aeabi_dadd+0x566>
    59fc:	e575      	b.n	54ea <__aeabi_dadd+0x52>
    59fe:	1aae      	subs	r6, r5, r2
    5a00:	46b0      	mov	r8, r6
    5a02:	4545      	cmp	r5, r8
    5a04:	41bf      	sbcs	r7, r7
    5a06:	1a0e      	subs	r6, r1, r0
    5a08:	427f      	negs	r7, r7
    5a0a:	1bf6      	subs	r6, r6, r7
    5a0c:	0237      	lsls	r7, r6, #8
    5a0e:	d400      	bmi.n	5a12 <__aeabi_dadd+0x57a>
    5a10:	e5f4      	b.n	55fc <__aeabi_dadd+0x164>
    5a12:	1b55      	subs	r5, r2, r5
    5a14:	42aa      	cmp	r2, r5
    5a16:	41b6      	sbcs	r6, r6
    5a18:	1a41      	subs	r1, r0, r1
    5a1a:	4276      	negs	r6, r6
    5a1c:	1b89      	subs	r1, r1, r6
    5a1e:	469a      	mov	sl, r3
    5a20:	e563      	b.n	54ea <__aeabi_dadd+0x52>
    5a22:	0001      	movs	r1, r0
    5a24:	0015      	movs	r5, r2
    5a26:	4664      	mov	r4, ip
    5a28:	e55f      	b.n	54ea <__aeabi_dadd+0x52>
    5a2a:	2200      	movs	r2, #0
    5a2c:	2500      	movs	r5, #0
    5a2e:	e57b      	b.n	5528 <__aeabi_dadd+0x90>
    5a30:	2b00      	cmp	r3, #0
    5a32:	d03b      	beq.n	5aac <__aeabi_dadd+0x614>
    5a34:	0003      	movs	r3, r0
    5a36:	4313      	orrs	r3, r2
    5a38:	d015      	beq.n	5a66 <__aeabi_dadd+0x5ce>
    5a3a:	08ed      	lsrs	r5, r5, #3
    5a3c:	074b      	lsls	r3, r1, #29
    5a3e:	432b      	orrs	r3, r5
    5a40:	2580      	movs	r5, #128	; 0x80
    5a42:	08c9      	lsrs	r1, r1, #3
    5a44:	032d      	lsls	r5, r5, #12
    5a46:	4229      	tst	r1, r5
    5a48:	d007      	beq.n	5a5a <__aeabi_dadd+0x5c2>
    5a4a:	08c4      	lsrs	r4, r0, #3
    5a4c:	422c      	tst	r4, r5
    5a4e:	d104      	bne.n	5a5a <__aeabi_dadd+0x5c2>
    5a50:	0741      	lsls	r1, r0, #29
    5a52:	000b      	movs	r3, r1
    5a54:	0021      	movs	r1, r4
    5a56:	08d2      	lsrs	r2, r2, #3
    5a58:	4313      	orrs	r3, r2
    5a5a:	00c9      	lsls	r1, r1, #3
    5a5c:	0f5a      	lsrs	r2, r3, #29
    5a5e:	4311      	orrs	r1, r2
    5a60:	00dd      	lsls	r5, r3, #3
    5a62:	4c21      	ldr	r4, [pc, #132]	; (5ae8 <__aeabi_dadd+0x650>)
    5a64:	e541      	b.n	54ea <__aeabi_dadd+0x52>
    5a66:	4c20      	ldr	r4, [pc, #128]	; (5ae8 <__aeabi_dadd+0x650>)
    5a68:	e53f      	b.n	54ea <__aeabi_dadd+0x52>
    5a6a:	2000      	movs	r0, #0
    5a6c:	e754      	b.n	5918 <__aeabi_dadd+0x480>
    5a6e:	2600      	movs	r6, #0
    5a70:	2500      	movs	r5, #0
    5a72:	e5d1      	b.n	5618 <__aeabi_dadd+0x180>
    5a74:	0034      	movs	r4, r6
    5a76:	000f      	movs	r7, r1
    5a78:	3c20      	subs	r4, #32
    5a7a:	40e7      	lsrs	r7, r4
    5a7c:	003c      	movs	r4, r7
    5a7e:	2e20      	cmp	r6, #32
    5a80:	d02b      	beq.n	5ada <__aeabi_dadd+0x642>
    5a82:	2740      	movs	r7, #64	; 0x40
    5a84:	1bbe      	subs	r6, r7, r6
    5a86:	40b1      	lsls	r1, r6
    5a88:	430d      	orrs	r5, r1
    5a8a:	1e69      	subs	r1, r5, #1
    5a8c:	418d      	sbcs	r5, r1
    5a8e:	2100      	movs	r1, #0
    5a90:	432c      	orrs	r4, r5
    5a92:	e6bc      	b.n	580e <__aeabi_dadd+0x376>
    5a94:	2180      	movs	r1, #128	; 0x80
    5a96:	2600      	movs	r6, #0
    5a98:	0309      	lsls	r1, r1, #12
    5a9a:	4c13      	ldr	r4, [pc, #76]	; (5ae8 <__aeabi_dadd+0x650>)
    5a9c:	2500      	movs	r5, #0
    5a9e:	e5bb      	b.n	5618 <__aeabi_dadd+0x180>
    5aa0:	430d      	orrs	r5, r1
    5aa2:	1e69      	subs	r1, r5, #1
    5aa4:	418d      	sbcs	r5, r1
    5aa6:	2100      	movs	r1, #0
    5aa8:	b2ed      	uxtb	r5, r5
    5aaa:	e769      	b.n	5980 <__aeabi_dadd+0x4e8>
    5aac:	0001      	movs	r1, r0
    5aae:	0015      	movs	r5, r2
    5ab0:	4c0d      	ldr	r4, [pc, #52]	; (5ae8 <__aeabi_dadd+0x650>)
    5ab2:	e51a      	b.n	54ea <__aeabi_dadd+0x52>
    5ab4:	0001      	movs	r1, r0
    5ab6:	0015      	movs	r5, r2
    5ab8:	e517      	b.n	54ea <__aeabi_dadd+0x52>
    5aba:	001c      	movs	r4, r3
    5abc:	000f      	movs	r7, r1
    5abe:	3c20      	subs	r4, #32
    5ac0:	40e7      	lsrs	r7, r4
    5ac2:	003c      	movs	r4, r7
    5ac4:	2b20      	cmp	r3, #32
    5ac6:	d00c      	beq.n	5ae2 <__aeabi_dadd+0x64a>
    5ac8:	2740      	movs	r7, #64	; 0x40
    5aca:	1afb      	subs	r3, r7, r3
    5acc:	4099      	lsls	r1, r3
    5ace:	430d      	orrs	r5, r1
    5ad0:	1e69      	subs	r1, r5, #1
    5ad2:	418d      	sbcs	r5, r1
    5ad4:	2100      	movs	r1, #0
    5ad6:	4325      	orrs	r5, r4
    5ad8:	e752      	b.n	5980 <__aeabi_dadd+0x4e8>
    5ada:	2100      	movs	r1, #0
    5adc:	e7d4      	b.n	5a88 <__aeabi_dadd+0x5f0>
    5ade:	001d      	movs	r5, r3
    5ae0:	e592      	b.n	5608 <__aeabi_dadd+0x170>
    5ae2:	2100      	movs	r1, #0
    5ae4:	e7f3      	b.n	5ace <__aeabi_dadd+0x636>
    5ae6:	46c0      	nop			; (mov r8, r8)
    5ae8:	000007ff 	.word	0x000007ff
    5aec:	ff7fffff 	.word	0xff7fffff

00005af0 <__aeabi_ddiv>:
    5af0:	b5f0      	push	{r4, r5, r6, r7, lr}
    5af2:	4656      	mov	r6, sl
    5af4:	464d      	mov	r5, r9
    5af6:	4644      	mov	r4, r8
    5af8:	465f      	mov	r7, fp
    5afa:	b4f0      	push	{r4, r5, r6, r7}
    5afc:	001d      	movs	r5, r3
    5afe:	030e      	lsls	r6, r1, #12
    5b00:	004c      	lsls	r4, r1, #1
    5b02:	0fcb      	lsrs	r3, r1, #31
    5b04:	b087      	sub	sp, #28
    5b06:	0007      	movs	r7, r0
    5b08:	4692      	mov	sl, r2
    5b0a:	4681      	mov	r9, r0
    5b0c:	0b36      	lsrs	r6, r6, #12
    5b0e:	0d64      	lsrs	r4, r4, #21
    5b10:	4698      	mov	r8, r3
    5b12:	d06a      	beq.n	5bea <__aeabi_ddiv+0xfa>
    5b14:	4b6d      	ldr	r3, [pc, #436]	; (5ccc <__aeabi_ddiv+0x1dc>)
    5b16:	429c      	cmp	r4, r3
    5b18:	d035      	beq.n	5b86 <__aeabi_ddiv+0x96>
    5b1a:	2280      	movs	r2, #128	; 0x80
    5b1c:	0f43      	lsrs	r3, r0, #29
    5b1e:	0412      	lsls	r2, r2, #16
    5b20:	4313      	orrs	r3, r2
    5b22:	00f6      	lsls	r6, r6, #3
    5b24:	431e      	orrs	r6, r3
    5b26:	00c3      	lsls	r3, r0, #3
    5b28:	4699      	mov	r9, r3
    5b2a:	4b69      	ldr	r3, [pc, #420]	; (5cd0 <__aeabi_ddiv+0x1e0>)
    5b2c:	2700      	movs	r7, #0
    5b2e:	469c      	mov	ip, r3
    5b30:	2300      	movs	r3, #0
    5b32:	4464      	add	r4, ip
    5b34:	9302      	str	r3, [sp, #8]
    5b36:	032b      	lsls	r3, r5, #12
    5b38:	0068      	lsls	r0, r5, #1
    5b3a:	0b1b      	lsrs	r3, r3, #12
    5b3c:	0fed      	lsrs	r5, r5, #31
    5b3e:	4651      	mov	r1, sl
    5b40:	469b      	mov	fp, r3
    5b42:	0d40      	lsrs	r0, r0, #21
    5b44:	9500      	str	r5, [sp, #0]
    5b46:	d100      	bne.n	5b4a <__aeabi_ddiv+0x5a>
    5b48:	e078      	b.n	5c3c <__aeabi_ddiv+0x14c>
    5b4a:	4b60      	ldr	r3, [pc, #384]	; (5ccc <__aeabi_ddiv+0x1dc>)
    5b4c:	4298      	cmp	r0, r3
    5b4e:	d06c      	beq.n	5c2a <__aeabi_ddiv+0x13a>
    5b50:	465b      	mov	r3, fp
    5b52:	00da      	lsls	r2, r3, #3
    5b54:	0f4b      	lsrs	r3, r1, #29
    5b56:	2180      	movs	r1, #128	; 0x80
    5b58:	0409      	lsls	r1, r1, #16
    5b5a:	430b      	orrs	r3, r1
    5b5c:	4313      	orrs	r3, r2
    5b5e:	469b      	mov	fp, r3
    5b60:	4653      	mov	r3, sl
    5b62:	00d9      	lsls	r1, r3, #3
    5b64:	4b5a      	ldr	r3, [pc, #360]	; (5cd0 <__aeabi_ddiv+0x1e0>)
    5b66:	469c      	mov	ip, r3
    5b68:	2300      	movs	r3, #0
    5b6a:	4460      	add	r0, ip
    5b6c:	4642      	mov	r2, r8
    5b6e:	1a20      	subs	r0, r4, r0
    5b70:	406a      	eors	r2, r5
    5b72:	4692      	mov	sl, r2
    5b74:	9001      	str	r0, [sp, #4]
    5b76:	431f      	orrs	r7, r3
    5b78:	2f0f      	cmp	r7, #15
    5b7a:	d900      	bls.n	5b7e <__aeabi_ddiv+0x8e>
    5b7c:	e0b0      	b.n	5ce0 <__aeabi_ddiv+0x1f0>
    5b7e:	4855      	ldr	r0, [pc, #340]	; (5cd4 <__aeabi_ddiv+0x1e4>)
    5b80:	00bf      	lsls	r7, r7, #2
    5b82:	59c0      	ldr	r0, [r0, r7]
    5b84:	4687      	mov	pc, r0
    5b86:	4337      	orrs	r7, r6
    5b88:	d000      	beq.n	5b8c <__aeabi_ddiv+0x9c>
    5b8a:	e088      	b.n	5c9e <__aeabi_ddiv+0x1ae>
    5b8c:	2300      	movs	r3, #0
    5b8e:	4699      	mov	r9, r3
    5b90:	3302      	adds	r3, #2
    5b92:	2708      	movs	r7, #8
    5b94:	2600      	movs	r6, #0
    5b96:	9302      	str	r3, [sp, #8]
    5b98:	e7cd      	b.n	5b36 <__aeabi_ddiv+0x46>
    5b9a:	4643      	mov	r3, r8
    5b9c:	46b3      	mov	fp, r6
    5b9e:	4649      	mov	r1, r9
    5ba0:	9300      	str	r3, [sp, #0]
    5ba2:	9b02      	ldr	r3, [sp, #8]
    5ba4:	9a00      	ldr	r2, [sp, #0]
    5ba6:	4692      	mov	sl, r2
    5ba8:	2b02      	cmp	r3, #2
    5baa:	d000      	beq.n	5bae <__aeabi_ddiv+0xbe>
    5bac:	e1bf      	b.n	5f2e <__aeabi_ddiv+0x43e>
    5bae:	2100      	movs	r1, #0
    5bb0:	4653      	mov	r3, sl
    5bb2:	2201      	movs	r2, #1
    5bb4:	2600      	movs	r6, #0
    5bb6:	4689      	mov	r9, r1
    5bb8:	401a      	ands	r2, r3
    5bba:	4b44      	ldr	r3, [pc, #272]	; (5ccc <__aeabi_ddiv+0x1dc>)
    5bbc:	2100      	movs	r1, #0
    5bbe:	0336      	lsls	r6, r6, #12
    5bc0:	0d0c      	lsrs	r4, r1, #20
    5bc2:	0524      	lsls	r4, r4, #20
    5bc4:	0b36      	lsrs	r6, r6, #12
    5bc6:	4326      	orrs	r6, r4
    5bc8:	4c43      	ldr	r4, [pc, #268]	; (5cd8 <__aeabi_ddiv+0x1e8>)
    5bca:	051b      	lsls	r3, r3, #20
    5bcc:	4026      	ands	r6, r4
    5bce:	431e      	orrs	r6, r3
    5bd0:	0076      	lsls	r6, r6, #1
    5bd2:	07d2      	lsls	r2, r2, #31
    5bd4:	0876      	lsrs	r6, r6, #1
    5bd6:	4316      	orrs	r6, r2
    5bd8:	4648      	mov	r0, r9
    5bda:	0031      	movs	r1, r6
    5bdc:	b007      	add	sp, #28
    5bde:	bc3c      	pop	{r2, r3, r4, r5}
    5be0:	4690      	mov	r8, r2
    5be2:	4699      	mov	r9, r3
    5be4:	46a2      	mov	sl, r4
    5be6:	46ab      	mov	fp, r5
    5be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5bea:	0033      	movs	r3, r6
    5bec:	4303      	orrs	r3, r0
    5bee:	d04f      	beq.n	5c90 <__aeabi_ddiv+0x1a0>
    5bf0:	2e00      	cmp	r6, #0
    5bf2:	d100      	bne.n	5bf6 <__aeabi_ddiv+0x106>
    5bf4:	e1bc      	b.n	5f70 <__aeabi_ddiv+0x480>
    5bf6:	0030      	movs	r0, r6
    5bf8:	f001 fa3c 	bl	7074 <__clzsi2>
    5bfc:	0003      	movs	r3, r0
    5bfe:	3b0b      	subs	r3, #11
    5c00:	2b1c      	cmp	r3, #28
    5c02:	dd00      	ble.n	5c06 <__aeabi_ddiv+0x116>
    5c04:	e1ad      	b.n	5f62 <__aeabi_ddiv+0x472>
    5c06:	221d      	movs	r2, #29
    5c08:	0001      	movs	r1, r0
    5c0a:	1ad3      	subs	r3, r2, r3
    5c0c:	3908      	subs	r1, #8
    5c0e:	003a      	movs	r2, r7
    5c10:	408f      	lsls	r7, r1
    5c12:	408e      	lsls	r6, r1
    5c14:	40da      	lsrs	r2, r3
    5c16:	46b9      	mov	r9, r7
    5c18:	4316      	orrs	r6, r2
    5c1a:	4b30      	ldr	r3, [pc, #192]	; (5cdc <__aeabi_ddiv+0x1ec>)
    5c1c:	2700      	movs	r7, #0
    5c1e:	469c      	mov	ip, r3
    5c20:	2300      	movs	r3, #0
    5c22:	4460      	add	r0, ip
    5c24:	4244      	negs	r4, r0
    5c26:	9302      	str	r3, [sp, #8]
    5c28:	e785      	b.n	5b36 <__aeabi_ddiv+0x46>
    5c2a:	4653      	mov	r3, sl
    5c2c:	465a      	mov	r2, fp
    5c2e:	4313      	orrs	r3, r2
    5c30:	d12c      	bne.n	5c8c <__aeabi_ddiv+0x19c>
    5c32:	2300      	movs	r3, #0
    5c34:	2100      	movs	r1, #0
    5c36:	469b      	mov	fp, r3
    5c38:	3302      	adds	r3, #2
    5c3a:	e797      	b.n	5b6c <__aeabi_ddiv+0x7c>
    5c3c:	430b      	orrs	r3, r1
    5c3e:	d020      	beq.n	5c82 <__aeabi_ddiv+0x192>
    5c40:	465b      	mov	r3, fp
    5c42:	2b00      	cmp	r3, #0
    5c44:	d100      	bne.n	5c48 <__aeabi_ddiv+0x158>
    5c46:	e19e      	b.n	5f86 <__aeabi_ddiv+0x496>
    5c48:	4658      	mov	r0, fp
    5c4a:	f001 fa13 	bl	7074 <__clzsi2>
    5c4e:	0003      	movs	r3, r0
    5c50:	3b0b      	subs	r3, #11
    5c52:	2b1c      	cmp	r3, #28
    5c54:	dd00      	ble.n	5c58 <__aeabi_ddiv+0x168>
    5c56:	e18f      	b.n	5f78 <__aeabi_ddiv+0x488>
    5c58:	0002      	movs	r2, r0
    5c5a:	4659      	mov	r1, fp
    5c5c:	3a08      	subs	r2, #8
    5c5e:	4091      	lsls	r1, r2
    5c60:	468b      	mov	fp, r1
    5c62:	211d      	movs	r1, #29
    5c64:	1acb      	subs	r3, r1, r3
    5c66:	4651      	mov	r1, sl
    5c68:	40d9      	lsrs	r1, r3
    5c6a:	000b      	movs	r3, r1
    5c6c:	4659      	mov	r1, fp
    5c6e:	430b      	orrs	r3, r1
    5c70:	4651      	mov	r1, sl
    5c72:	469b      	mov	fp, r3
    5c74:	4091      	lsls	r1, r2
    5c76:	4b19      	ldr	r3, [pc, #100]	; (5cdc <__aeabi_ddiv+0x1ec>)
    5c78:	469c      	mov	ip, r3
    5c7a:	4460      	add	r0, ip
    5c7c:	4240      	negs	r0, r0
    5c7e:	2300      	movs	r3, #0
    5c80:	e774      	b.n	5b6c <__aeabi_ddiv+0x7c>
    5c82:	2300      	movs	r3, #0
    5c84:	2100      	movs	r1, #0
    5c86:	469b      	mov	fp, r3
    5c88:	3301      	adds	r3, #1
    5c8a:	e76f      	b.n	5b6c <__aeabi_ddiv+0x7c>
    5c8c:	2303      	movs	r3, #3
    5c8e:	e76d      	b.n	5b6c <__aeabi_ddiv+0x7c>
    5c90:	2300      	movs	r3, #0
    5c92:	4699      	mov	r9, r3
    5c94:	3301      	adds	r3, #1
    5c96:	2704      	movs	r7, #4
    5c98:	2600      	movs	r6, #0
    5c9a:	9302      	str	r3, [sp, #8]
    5c9c:	e74b      	b.n	5b36 <__aeabi_ddiv+0x46>
    5c9e:	2303      	movs	r3, #3
    5ca0:	270c      	movs	r7, #12
    5ca2:	9302      	str	r3, [sp, #8]
    5ca4:	e747      	b.n	5b36 <__aeabi_ddiv+0x46>
    5ca6:	2201      	movs	r2, #1
    5ca8:	1ad5      	subs	r5, r2, r3
    5caa:	2d38      	cmp	r5, #56	; 0x38
    5cac:	dc00      	bgt.n	5cb0 <__aeabi_ddiv+0x1c0>
    5cae:	e1b0      	b.n	6012 <__aeabi_ddiv+0x522>
    5cb0:	4653      	mov	r3, sl
    5cb2:	401a      	ands	r2, r3
    5cb4:	2100      	movs	r1, #0
    5cb6:	2300      	movs	r3, #0
    5cb8:	2600      	movs	r6, #0
    5cba:	4689      	mov	r9, r1
    5cbc:	e77e      	b.n	5bbc <__aeabi_ddiv+0xcc>
    5cbe:	2300      	movs	r3, #0
    5cc0:	2680      	movs	r6, #128	; 0x80
    5cc2:	4699      	mov	r9, r3
    5cc4:	2200      	movs	r2, #0
    5cc6:	0336      	lsls	r6, r6, #12
    5cc8:	4b00      	ldr	r3, [pc, #0]	; (5ccc <__aeabi_ddiv+0x1dc>)
    5cca:	e777      	b.n	5bbc <__aeabi_ddiv+0xcc>
    5ccc:	000007ff 	.word	0x000007ff
    5cd0:	fffffc01 	.word	0xfffffc01
    5cd4:	00007380 	.word	0x00007380
    5cd8:	800fffff 	.word	0x800fffff
    5cdc:	000003f3 	.word	0x000003f3
    5ce0:	455e      	cmp	r6, fp
    5ce2:	d900      	bls.n	5ce6 <__aeabi_ddiv+0x1f6>
    5ce4:	e172      	b.n	5fcc <__aeabi_ddiv+0x4dc>
    5ce6:	d100      	bne.n	5cea <__aeabi_ddiv+0x1fa>
    5ce8:	e16d      	b.n	5fc6 <__aeabi_ddiv+0x4d6>
    5cea:	9b01      	ldr	r3, [sp, #4]
    5cec:	464d      	mov	r5, r9
    5cee:	3b01      	subs	r3, #1
    5cf0:	9301      	str	r3, [sp, #4]
    5cf2:	2300      	movs	r3, #0
    5cf4:	0034      	movs	r4, r6
    5cf6:	9302      	str	r3, [sp, #8]
    5cf8:	465b      	mov	r3, fp
    5cfa:	021e      	lsls	r6, r3, #8
    5cfc:	0e0b      	lsrs	r3, r1, #24
    5cfe:	431e      	orrs	r6, r3
    5d00:	020b      	lsls	r3, r1, #8
    5d02:	9303      	str	r3, [sp, #12]
    5d04:	0c33      	lsrs	r3, r6, #16
    5d06:	4699      	mov	r9, r3
    5d08:	0433      	lsls	r3, r6, #16
    5d0a:	0c1b      	lsrs	r3, r3, #16
    5d0c:	4649      	mov	r1, r9
    5d0e:	0020      	movs	r0, r4
    5d10:	9300      	str	r3, [sp, #0]
    5d12:	f7ff f9e1 	bl	50d8 <__aeabi_uidiv>
    5d16:	9b00      	ldr	r3, [sp, #0]
    5d18:	0037      	movs	r7, r6
    5d1a:	4343      	muls	r3, r0
    5d1c:	0006      	movs	r6, r0
    5d1e:	4649      	mov	r1, r9
    5d20:	0020      	movs	r0, r4
    5d22:	4698      	mov	r8, r3
    5d24:	f7ff fa5e 	bl	51e4 <__aeabi_uidivmod>
    5d28:	0c2c      	lsrs	r4, r5, #16
    5d2a:	0409      	lsls	r1, r1, #16
    5d2c:	430c      	orrs	r4, r1
    5d2e:	45a0      	cmp	r8, r4
    5d30:	d909      	bls.n	5d46 <__aeabi_ddiv+0x256>
    5d32:	19e4      	adds	r4, r4, r7
    5d34:	1e73      	subs	r3, r6, #1
    5d36:	42a7      	cmp	r7, r4
    5d38:	d900      	bls.n	5d3c <__aeabi_ddiv+0x24c>
    5d3a:	e15c      	b.n	5ff6 <__aeabi_ddiv+0x506>
    5d3c:	45a0      	cmp	r8, r4
    5d3e:	d800      	bhi.n	5d42 <__aeabi_ddiv+0x252>
    5d40:	e159      	b.n	5ff6 <__aeabi_ddiv+0x506>
    5d42:	3e02      	subs	r6, #2
    5d44:	19e4      	adds	r4, r4, r7
    5d46:	4643      	mov	r3, r8
    5d48:	1ae4      	subs	r4, r4, r3
    5d4a:	4649      	mov	r1, r9
    5d4c:	0020      	movs	r0, r4
    5d4e:	f7ff f9c3 	bl	50d8 <__aeabi_uidiv>
    5d52:	0003      	movs	r3, r0
    5d54:	9a00      	ldr	r2, [sp, #0]
    5d56:	4680      	mov	r8, r0
    5d58:	4353      	muls	r3, r2
    5d5a:	4649      	mov	r1, r9
    5d5c:	0020      	movs	r0, r4
    5d5e:	469b      	mov	fp, r3
    5d60:	f7ff fa40 	bl	51e4 <__aeabi_uidivmod>
    5d64:	042a      	lsls	r2, r5, #16
    5d66:	0409      	lsls	r1, r1, #16
    5d68:	0c12      	lsrs	r2, r2, #16
    5d6a:	430a      	orrs	r2, r1
    5d6c:	4593      	cmp	fp, r2
    5d6e:	d90d      	bls.n	5d8c <__aeabi_ddiv+0x29c>
    5d70:	4643      	mov	r3, r8
    5d72:	19d2      	adds	r2, r2, r7
    5d74:	3b01      	subs	r3, #1
    5d76:	4297      	cmp	r7, r2
    5d78:	d900      	bls.n	5d7c <__aeabi_ddiv+0x28c>
    5d7a:	e13a      	b.n	5ff2 <__aeabi_ddiv+0x502>
    5d7c:	4593      	cmp	fp, r2
    5d7e:	d800      	bhi.n	5d82 <__aeabi_ddiv+0x292>
    5d80:	e137      	b.n	5ff2 <__aeabi_ddiv+0x502>
    5d82:	2302      	movs	r3, #2
    5d84:	425b      	negs	r3, r3
    5d86:	469c      	mov	ip, r3
    5d88:	19d2      	adds	r2, r2, r7
    5d8a:	44e0      	add	r8, ip
    5d8c:	465b      	mov	r3, fp
    5d8e:	1ad2      	subs	r2, r2, r3
    5d90:	4643      	mov	r3, r8
    5d92:	0436      	lsls	r6, r6, #16
    5d94:	4333      	orrs	r3, r6
    5d96:	469b      	mov	fp, r3
    5d98:	9903      	ldr	r1, [sp, #12]
    5d9a:	0c18      	lsrs	r0, r3, #16
    5d9c:	0c0b      	lsrs	r3, r1, #16
    5d9e:	001d      	movs	r5, r3
    5da0:	9305      	str	r3, [sp, #20]
    5da2:	0409      	lsls	r1, r1, #16
    5da4:	465b      	mov	r3, fp
    5da6:	0c09      	lsrs	r1, r1, #16
    5da8:	000c      	movs	r4, r1
    5daa:	041b      	lsls	r3, r3, #16
    5dac:	0c1b      	lsrs	r3, r3, #16
    5dae:	4344      	muls	r4, r0
    5db0:	9104      	str	r1, [sp, #16]
    5db2:	4359      	muls	r1, r3
    5db4:	436b      	muls	r3, r5
    5db6:	4368      	muls	r0, r5
    5db8:	191b      	adds	r3, r3, r4
    5dba:	0c0d      	lsrs	r5, r1, #16
    5dbc:	18eb      	adds	r3, r5, r3
    5dbe:	429c      	cmp	r4, r3
    5dc0:	d903      	bls.n	5dca <__aeabi_ddiv+0x2da>
    5dc2:	2480      	movs	r4, #128	; 0x80
    5dc4:	0264      	lsls	r4, r4, #9
    5dc6:	46a4      	mov	ip, r4
    5dc8:	4460      	add	r0, ip
    5dca:	0c1c      	lsrs	r4, r3, #16
    5dcc:	0409      	lsls	r1, r1, #16
    5dce:	041b      	lsls	r3, r3, #16
    5dd0:	0c09      	lsrs	r1, r1, #16
    5dd2:	1820      	adds	r0, r4, r0
    5dd4:	185d      	adds	r5, r3, r1
    5dd6:	4282      	cmp	r2, r0
    5dd8:	d200      	bcs.n	5ddc <__aeabi_ddiv+0x2ec>
    5dda:	e0de      	b.n	5f9a <__aeabi_ddiv+0x4aa>
    5ddc:	d100      	bne.n	5de0 <__aeabi_ddiv+0x2f0>
    5dde:	e0d7      	b.n	5f90 <__aeabi_ddiv+0x4a0>
    5de0:	1a16      	subs	r6, r2, r0
    5de2:	9b02      	ldr	r3, [sp, #8]
    5de4:	469c      	mov	ip, r3
    5de6:	1b5d      	subs	r5, r3, r5
    5de8:	45ac      	cmp	ip, r5
    5dea:	419b      	sbcs	r3, r3
    5dec:	425b      	negs	r3, r3
    5dee:	1af6      	subs	r6, r6, r3
    5df0:	42b7      	cmp	r7, r6
    5df2:	d100      	bne.n	5df6 <__aeabi_ddiv+0x306>
    5df4:	e106      	b.n	6004 <__aeabi_ddiv+0x514>
    5df6:	4649      	mov	r1, r9
    5df8:	0030      	movs	r0, r6
    5dfa:	f7ff f96d 	bl	50d8 <__aeabi_uidiv>
    5dfe:	9b00      	ldr	r3, [sp, #0]
    5e00:	0004      	movs	r4, r0
    5e02:	4343      	muls	r3, r0
    5e04:	4649      	mov	r1, r9
    5e06:	0030      	movs	r0, r6
    5e08:	4698      	mov	r8, r3
    5e0a:	f7ff f9eb 	bl	51e4 <__aeabi_uidivmod>
    5e0e:	0c2e      	lsrs	r6, r5, #16
    5e10:	0409      	lsls	r1, r1, #16
    5e12:	430e      	orrs	r6, r1
    5e14:	45b0      	cmp	r8, r6
    5e16:	d909      	bls.n	5e2c <__aeabi_ddiv+0x33c>
    5e18:	19f6      	adds	r6, r6, r7
    5e1a:	1e63      	subs	r3, r4, #1
    5e1c:	42b7      	cmp	r7, r6
    5e1e:	d900      	bls.n	5e22 <__aeabi_ddiv+0x332>
    5e20:	e0f3      	b.n	600a <__aeabi_ddiv+0x51a>
    5e22:	45b0      	cmp	r8, r6
    5e24:	d800      	bhi.n	5e28 <__aeabi_ddiv+0x338>
    5e26:	e0f0      	b.n	600a <__aeabi_ddiv+0x51a>
    5e28:	3c02      	subs	r4, #2
    5e2a:	19f6      	adds	r6, r6, r7
    5e2c:	4643      	mov	r3, r8
    5e2e:	1af3      	subs	r3, r6, r3
    5e30:	4649      	mov	r1, r9
    5e32:	0018      	movs	r0, r3
    5e34:	9302      	str	r3, [sp, #8]
    5e36:	f7ff f94f 	bl	50d8 <__aeabi_uidiv>
    5e3a:	9b00      	ldr	r3, [sp, #0]
    5e3c:	0006      	movs	r6, r0
    5e3e:	4343      	muls	r3, r0
    5e40:	4649      	mov	r1, r9
    5e42:	9802      	ldr	r0, [sp, #8]
    5e44:	4698      	mov	r8, r3
    5e46:	f7ff f9cd 	bl	51e4 <__aeabi_uidivmod>
    5e4a:	042d      	lsls	r5, r5, #16
    5e4c:	0409      	lsls	r1, r1, #16
    5e4e:	0c2d      	lsrs	r5, r5, #16
    5e50:	430d      	orrs	r5, r1
    5e52:	45a8      	cmp	r8, r5
    5e54:	d909      	bls.n	5e6a <__aeabi_ddiv+0x37a>
    5e56:	19ed      	adds	r5, r5, r7
    5e58:	1e73      	subs	r3, r6, #1
    5e5a:	42af      	cmp	r7, r5
    5e5c:	d900      	bls.n	5e60 <__aeabi_ddiv+0x370>
    5e5e:	e0d6      	b.n	600e <__aeabi_ddiv+0x51e>
    5e60:	45a8      	cmp	r8, r5
    5e62:	d800      	bhi.n	5e66 <__aeabi_ddiv+0x376>
    5e64:	e0d3      	b.n	600e <__aeabi_ddiv+0x51e>
    5e66:	3e02      	subs	r6, #2
    5e68:	19ed      	adds	r5, r5, r7
    5e6a:	0424      	lsls	r4, r4, #16
    5e6c:	0021      	movs	r1, r4
    5e6e:	4643      	mov	r3, r8
    5e70:	4331      	orrs	r1, r6
    5e72:	9e04      	ldr	r6, [sp, #16]
    5e74:	9a05      	ldr	r2, [sp, #20]
    5e76:	0030      	movs	r0, r6
    5e78:	1aed      	subs	r5, r5, r3
    5e7a:	040b      	lsls	r3, r1, #16
    5e7c:	0c0c      	lsrs	r4, r1, #16
    5e7e:	0c1b      	lsrs	r3, r3, #16
    5e80:	4358      	muls	r0, r3
    5e82:	4366      	muls	r6, r4
    5e84:	4353      	muls	r3, r2
    5e86:	4354      	muls	r4, r2
    5e88:	199a      	adds	r2, r3, r6
    5e8a:	0c03      	lsrs	r3, r0, #16
    5e8c:	189b      	adds	r3, r3, r2
    5e8e:	429e      	cmp	r6, r3
    5e90:	d903      	bls.n	5e9a <__aeabi_ddiv+0x3aa>
    5e92:	2280      	movs	r2, #128	; 0x80
    5e94:	0252      	lsls	r2, r2, #9
    5e96:	4694      	mov	ip, r2
    5e98:	4464      	add	r4, ip
    5e9a:	0c1a      	lsrs	r2, r3, #16
    5e9c:	0400      	lsls	r0, r0, #16
    5e9e:	041b      	lsls	r3, r3, #16
    5ea0:	0c00      	lsrs	r0, r0, #16
    5ea2:	1914      	adds	r4, r2, r4
    5ea4:	181b      	adds	r3, r3, r0
    5ea6:	42a5      	cmp	r5, r4
    5ea8:	d350      	bcc.n	5f4c <__aeabi_ddiv+0x45c>
    5eaa:	d04d      	beq.n	5f48 <__aeabi_ddiv+0x458>
    5eac:	2301      	movs	r3, #1
    5eae:	4319      	orrs	r1, r3
    5eb0:	4a96      	ldr	r2, [pc, #600]	; (610c <__aeabi_ddiv+0x61c>)
    5eb2:	9b01      	ldr	r3, [sp, #4]
    5eb4:	4694      	mov	ip, r2
    5eb6:	4463      	add	r3, ip
    5eb8:	2b00      	cmp	r3, #0
    5eba:	dc00      	bgt.n	5ebe <__aeabi_ddiv+0x3ce>
    5ebc:	e6f3      	b.n	5ca6 <__aeabi_ddiv+0x1b6>
    5ebe:	074a      	lsls	r2, r1, #29
    5ec0:	d009      	beq.n	5ed6 <__aeabi_ddiv+0x3e6>
    5ec2:	220f      	movs	r2, #15
    5ec4:	400a      	ands	r2, r1
    5ec6:	2a04      	cmp	r2, #4
    5ec8:	d005      	beq.n	5ed6 <__aeabi_ddiv+0x3e6>
    5eca:	1d0a      	adds	r2, r1, #4
    5ecc:	428a      	cmp	r2, r1
    5ece:	4189      	sbcs	r1, r1
    5ed0:	4249      	negs	r1, r1
    5ed2:	448b      	add	fp, r1
    5ed4:	0011      	movs	r1, r2
    5ed6:	465a      	mov	r2, fp
    5ed8:	01d2      	lsls	r2, r2, #7
    5eda:	d508      	bpl.n	5eee <__aeabi_ddiv+0x3fe>
    5edc:	465a      	mov	r2, fp
    5ede:	4b8c      	ldr	r3, [pc, #560]	; (6110 <__aeabi_ddiv+0x620>)
    5ee0:	401a      	ands	r2, r3
    5ee2:	4693      	mov	fp, r2
    5ee4:	2280      	movs	r2, #128	; 0x80
    5ee6:	00d2      	lsls	r2, r2, #3
    5ee8:	4694      	mov	ip, r2
    5eea:	9b01      	ldr	r3, [sp, #4]
    5eec:	4463      	add	r3, ip
    5eee:	4a89      	ldr	r2, [pc, #548]	; (6114 <__aeabi_ddiv+0x624>)
    5ef0:	4293      	cmp	r3, r2
    5ef2:	dd00      	ble.n	5ef6 <__aeabi_ddiv+0x406>
    5ef4:	e65b      	b.n	5bae <__aeabi_ddiv+0xbe>
    5ef6:	465a      	mov	r2, fp
    5ef8:	08c9      	lsrs	r1, r1, #3
    5efa:	0750      	lsls	r0, r2, #29
    5efc:	4308      	orrs	r0, r1
    5efe:	0256      	lsls	r6, r2, #9
    5f00:	4651      	mov	r1, sl
    5f02:	2201      	movs	r2, #1
    5f04:	055b      	lsls	r3, r3, #21
    5f06:	4681      	mov	r9, r0
    5f08:	0b36      	lsrs	r6, r6, #12
    5f0a:	0d5b      	lsrs	r3, r3, #21
    5f0c:	400a      	ands	r2, r1
    5f0e:	e655      	b.n	5bbc <__aeabi_ddiv+0xcc>
    5f10:	2380      	movs	r3, #128	; 0x80
    5f12:	031b      	lsls	r3, r3, #12
    5f14:	421e      	tst	r6, r3
    5f16:	d011      	beq.n	5f3c <__aeabi_ddiv+0x44c>
    5f18:	465a      	mov	r2, fp
    5f1a:	421a      	tst	r2, r3
    5f1c:	d10e      	bne.n	5f3c <__aeabi_ddiv+0x44c>
    5f1e:	465e      	mov	r6, fp
    5f20:	431e      	orrs	r6, r3
    5f22:	0336      	lsls	r6, r6, #12
    5f24:	0b36      	lsrs	r6, r6, #12
    5f26:	002a      	movs	r2, r5
    5f28:	4689      	mov	r9, r1
    5f2a:	4b7b      	ldr	r3, [pc, #492]	; (6118 <__aeabi_ddiv+0x628>)
    5f2c:	e646      	b.n	5bbc <__aeabi_ddiv+0xcc>
    5f2e:	2b03      	cmp	r3, #3
    5f30:	d100      	bne.n	5f34 <__aeabi_ddiv+0x444>
    5f32:	e0e1      	b.n	60f8 <__aeabi_ddiv+0x608>
    5f34:	2b01      	cmp	r3, #1
    5f36:	d1bb      	bne.n	5eb0 <__aeabi_ddiv+0x3c0>
    5f38:	401a      	ands	r2, r3
    5f3a:	e6bb      	b.n	5cb4 <__aeabi_ddiv+0x1c4>
    5f3c:	431e      	orrs	r6, r3
    5f3e:	0336      	lsls	r6, r6, #12
    5f40:	0b36      	lsrs	r6, r6, #12
    5f42:	4642      	mov	r2, r8
    5f44:	4b74      	ldr	r3, [pc, #464]	; (6118 <__aeabi_ddiv+0x628>)
    5f46:	e639      	b.n	5bbc <__aeabi_ddiv+0xcc>
    5f48:	2b00      	cmp	r3, #0
    5f4a:	d0b1      	beq.n	5eb0 <__aeabi_ddiv+0x3c0>
    5f4c:	197d      	adds	r5, r7, r5
    5f4e:	1e4a      	subs	r2, r1, #1
    5f50:	42af      	cmp	r7, r5
    5f52:	d952      	bls.n	5ffa <__aeabi_ddiv+0x50a>
    5f54:	0011      	movs	r1, r2
    5f56:	42a5      	cmp	r5, r4
    5f58:	d1a8      	bne.n	5eac <__aeabi_ddiv+0x3bc>
    5f5a:	9a03      	ldr	r2, [sp, #12]
    5f5c:	429a      	cmp	r2, r3
    5f5e:	d1a5      	bne.n	5eac <__aeabi_ddiv+0x3bc>
    5f60:	e7a6      	b.n	5eb0 <__aeabi_ddiv+0x3c0>
    5f62:	0003      	movs	r3, r0
    5f64:	003e      	movs	r6, r7
    5f66:	3b28      	subs	r3, #40	; 0x28
    5f68:	409e      	lsls	r6, r3
    5f6a:	2300      	movs	r3, #0
    5f6c:	4699      	mov	r9, r3
    5f6e:	e654      	b.n	5c1a <__aeabi_ddiv+0x12a>
    5f70:	f001 f880 	bl	7074 <__clzsi2>
    5f74:	3020      	adds	r0, #32
    5f76:	e641      	b.n	5bfc <__aeabi_ddiv+0x10c>
    5f78:	0003      	movs	r3, r0
    5f7a:	4652      	mov	r2, sl
    5f7c:	3b28      	subs	r3, #40	; 0x28
    5f7e:	409a      	lsls	r2, r3
    5f80:	2100      	movs	r1, #0
    5f82:	4693      	mov	fp, r2
    5f84:	e677      	b.n	5c76 <__aeabi_ddiv+0x186>
    5f86:	4650      	mov	r0, sl
    5f88:	f001 f874 	bl	7074 <__clzsi2>
    5f8c:	3020      	adds	r0, #32
    5f8e:	e65e      	b.n	5c4e <__aeabi_ddiv+0x15e>
    5f90:	9b02      	ldr	r3, [sp, #8]
    5f92:	2600      	movs	r6, #0
    5f94:	42ab      	cmp	r3, r5
    5f96:	d300      	bcc.n	5f9a <__aeabi_ddiv+0x4aa>
    5f98:	e723      	b.n	5de2 <__aeabi_ddiv+0x2f2>
    5f9a:	9e03      	ldr	r6, [sp, #12]
    5f9c:	9902      	ldr	r1, [sp, #8]
    5f9e:	46b4      	mov	ip, r6
    5fa0:	4461      	add	r1, ip
    5fa2:	4688      	mov	r8, r1
    5fa4:	45b0      	cmp	r8, r6
    5fa6:	41b6      	sbcs	r6, r6
    5fa8:	465b      	mov	r3, fp
    5faa:	4276      	negs	r6, r6
    5fac:	19f6      	adds	r6, r6, r7
    5fae:	18b2      	adds	r2, r6, r2
    5fb0:	3b01      	subs	r3, #1
    5fb2:	9102      	str	r1, [sp, #8]
    5fb4:	4297      	cmp	r7, r2
    5fb6:	d213      	bcs.n	5fe0 <__aeabi_ddiv+0x4f0>
    5fb8:	4290      	cmp	r0, r2
    5fba:	d84f      	bhi.n	605c <__aeabi_ddiv+0x56c>
    5fbc:	d100      	bne.n	5fc0 <__aeabi_ddiv+0x4d0>
    5fbe:	e08e      	b.n	60de <__aeabi_ddiv+0x5ee>
    5fc0:	1a16      	subs	r6, r2, r0
    5fc2:	469b      	mov	fp, r3
    5fc4:	e70d      	b.n	5de2 <__aeabi_ddiv+0x2f2>
    5fc6:	4589      	cmp	r9, r1
    5fc8:	d200      	bcs.n	5fcc <__aeabi_ddiv+0x4dc>
    5fca:	e68e      	b.n	5cea <__aeabi_ddiv+0x1fa>
    5fcc:	0874      	lsrs	r4, r6, #1
    5fce:	464b      	mov	r3, r9
    5fd0:	07f6      	lsls	r6, r6, #31
    5fd2:	0035      	movs	r5, r6
    5fd4:	085b      	lsrs	r3, r3, #1
    5fd6:	431d      	orrs	r5, r3
    5fd8:	464b      	mov	r3, r9
    5fda:	07db      	lsls	r3, r3, #31
    5fdc:	9302      	str	r3, [sp, #8]
    5fde:	e68b      	b.n	5cf8 <__aeabi_ddiv+0x208>
    5fe0:	4297      	cmp	r7, r2
    5fe2:	d1ed      	bne.n	5fc0 <__aeabi_ddiv+0x4d0>
    5fe4:	9903      	ldr	r1, [sp, #12]
    5fe6:	9c02      	ldr	r4, [sp, #8]
    5fe8:	42a1      	cmp	r1, r4
    5fea:	d9e5      	bls.n	5fb8 <__aeabi_ddiv+0x4c8>
    5fec:	1a3e      	subs	r6, r7, r0
    5fee:	469b      	mov	fp, r3
    5ff0:	e6f7      	b.n	5de2 <__aeabi_ddiv+0x2f2>
    5ff2:	4698      	mov	r8, r3
    5ff4:	e6ca      	b.n	5d8c <__aeabi_ddiv+0x29c>
    5ff6:	001e      	movs	r6, r3
    5ff8:	e6a5      	b.n	5d46 <__aeabi_ddiv+0x256>
    5ffa:	42ac      	cmp	r4, r5
    5ffc:	d83e      	bhi.n	607c <__aeabi_ddiv+0x58c>
    5ffe:	d074      	beq.n	60ea <__aeabi_ddiv+0x5fa>
    6000:	0011      	movs	r1, r2
    6002:	e753      	b.n	5eac <__aeabi_ddiv+0x3bc>
    6004:	2101      	movs	r1, #1
    6006:	4249      	negs	r1, r1
    6008:	e752      	b.n	5eb0 <__aeabi_ddiv+0x3c0>
    600a:	001c      	movs	r4, r3
    600c:	e70e      	b.n	5e2c <__aeabi_ddiv+0x33c>
    600e:	001e      	movs	r6, r3
    6010:	e72b      	b.n	5e6a <__aeabi_ddiv+0x37a>
    6012:	2d1f      	cmp	r5, #31
    6014:	dc3c      	bgt.n	6090 <__aeabi_ddiv+0x5a0>
    6016:	2320      	movs	r3, #32
    6018:	000a      	movs	r2, r1
    601a:	4658      	mov	r0, fp
    601c:	1b5b      	subs	r3, r3, r5
    601e:	4098      	lsls	r0, r3
    6020:	40ea      	lsrs	r2, r5
    6022:	4099      	lsls	r1, r3
    6024:	4302      	orrs	r2, r0
    6026:	1e48      	subs	r0, r1, #1
    6028:	4181      	sbcs	r1, r0
    602a:	465e      	mov	r6, fp
    602c:	4311      	orrs	r1, r2
    602e:	40ee      	lsrs	r6, r5
    6030:	074b      	lsls	r3, r1, #29
    6032:	d009      	beq.n	6048 <__aeabi_ddiv+0x558>
    6034:	230f      	movs	r3, #15
    6036:	400b      	ands	r3, r1
    6038:	2b04      	cmp	r3, #4
    603a:	d005      	beq.n	6048 <__aeabi_ddiv+0x558>
    603c:	000b      	movs	r3, r1
    603e:	1d19      	adds	r1, r3, #4
    6040:	4299      	cmp	r1, r3
    6042:	419b      	sbcs	r3, r3
    6044:	425b      	negs	r3, r3
    6046:	18f6      	adds	r6, r6, r3
    6048:	0233      	lsls	r3, r6, #8
    604a:	d53c      	bpl.n	60c6 <__aeabi_ddiv+0x5d6>
    604c:	4653      	mov	r3, sl
    604e:	2201      	movs	r2, #1
    6050:	2100      	movs	r1, #0
    6052:	401a      	ands	r2, r3
    6054:	2600      	movs	r6, #0
    6056:	2301      	movs	r3, #1
    6058:	4689      	mov	r9, r1
    605a:	e5af      	b.n	5bbc <__aeabi_ddiv+0xcc>
    605c:	2302      	movs	r3, #2
    605e:	425b      	negs	r3, r3
    6060:	469c      	mov	ip, r3
    6062:	9c03      	ldr	r4, [sp, #12]
    6064:	44e3      	add	fp, ip
    6066:	46a4      	mov	ip, r4
    6068:	9b02      	ldr	r3, [sp, #8]
    606a:	4463      	add	r3, ip
    606c:	4698      	mov	r8, r3
    606e:	45a0      	cmp	r8, r4
    6070:	41b6      	sbcs	r6, r6
    6072:	4276      	negs	r6, r6
    6074:	19f6      	adds	r6, r6, r7
    6076:	9302      	str	r3, [sp, #8]
    6078:	18b2      	adds	r2, r6, r2
    607a:	e6b1      	b.n	5de0 <__aeabi_ddiv+0x2f0>
    607c:	9803      	ldr	r0, [sp, #12]
    607e:	1e8a      	subs	r2, r1, #2
    6080:	0041      	lsls	r1, r0, #1
    6082:	4281      	cmp	r1, r0
    6084:	41b6      	sbcs	r6, r6
    6086:	4276      	negs	r6, r6
    6088:	19f6      	adds	r6, r6, r7
    608a:	19ad      	adds	r5, r5, r6
    608c:	9103      	str	r1, [sp, #12]
    608e:	e761      	b.n	5f54 <__aeabi_ddiv+0x464>
    6090:	221f      	movs	r2, #31
    6092:	4252      	negs	r2, r2
    6094:	1ad3      	subs	r3, r2, r3
    6096:	465a      	mov	r2, fp
    6098:	40da      	lsrs	r2, r3
    609a:	0013      	movs	r3, r2
    609c:	2d20      	cmp	r5, #32
    609e:	d029      	beq.n	60f4 <__aeabi_ddiv+0x604>
    60a0:	2240      	movs	r2, #64	; 0x40
    60a2:	4658      	mov	r0, fp
    60a4:	1b55      	subs	r5, r2, r5
    60a6:	40a8      	lsls	r0, r5
    60a8:	4301      	orrs	r1, r0
    60aa:	1e48      	subs	r0, r1, #1
    60ac:	4181      	sbcs	r1, r0
    60ae:	2007      	movs	r0, #7
    60b0:	430b      	orrs	r3, r1
    60b2:	4018      	ands	r0, r3
    60b4:	2600      	movs	r6, #0
    60b6:	2800      	cmp	r0, #0
    60b8:	d009      	beq.n	60ce <__aeabi_ddiv+0x5de>
    60ba:	220f      	movs	r2, #15
    60bc:	2600      	movs	r6, #0
    60be:	401a      	ands	r2, r3
    60c0:	0019      	movs	r1, r3
    60c2:	2a04      	cmp	r2, #4
    60c4:	d1bb      	bne.n	603e <__aeabi_ddiv+0x54e>
    60c6:	000b      	movs	r3, r1
    60c8:	0770      	lsls	r0, r6, #29
    60ca:	0276      	lsls	r6, r6, #9
    60cc:	0b36      	lsrs	r6, r6, #12
    60ce:	08db      	lsrs	r3, r3, #3
    60d0:	4303      	orrs	r3, r0
    60d2:	4699      	mov	r9, r3
    60d4:	2201      	movs	r2, #1
    60d6:	4653      	mov	r3, sl
    60d8:	401a      	ands	r2, r3
    60da:	2300      	movs	r3, #0
    60dc:	e56e      	b.n	5bbc <__aeabi_ddiv+0xcc>
    60de:	9902      	ldr	r1, [sp, #8]
    60e0:	428d      	cmp	r5, r1
    60e2:	d8bb      	bhi.n	605c <__aeabi_ddiv+0x56c>
    60e4:	469b      	mov	fp, r3
    60e6:	2600      	movs	r6, #0
    60e8:	e67b      	b.n	5de2 <__aeabi_ddiv+0x2f2>
    60ea:	9803      	ldr	r0, [sp, #12]
    60ec:	4298      	cmp	r0, r3
    60ee:	d3c5      	bcc.n	607c <__aeabi_ddiv+0x58c>
    60f0:	0011      	movs	r1, r2
    60f2:	e732      	b.n	5f5a <__aeabi_ddiv+0x46a>
    60f4:	2000      	movs	r0, #0
    60f6:	e7d7      	b.n	60a8 <__aeabi_ddiv+0x5b8>
    60f8:	2680      	movs	r6, #128	; 0x80
    60fa:	465b      	mov	r3, fp
    60fc:	0336      	lsls	r6, r6, #12
    60fe:	431e      	orrs	r6, r3
    6100:	0336      	lsls	r6, r6, #12
    6102:	0b36      	lsrs	r6, r6, #12
    6104:	9a00      	ldr	r2, [sp, #0]
    6106:	4689      	mov	r9, r1
    6108:	4b03      	ldr	r3, [pc, #12]	; (6118 <__aeabi_ddiv+0x628>)
    610a:	e557      	b.n	5bbc <__aeabi_ddiv+0xcc>
    610c:	000003ff 	.word	0x000003ff
    6110:	feffffff 	.word	0xfeffffff
    6114:	000007fe 	.word	0x000007fe
    6118:	000007ff 	.word	0x000007ff

0000611c <__eqdf2>:
    611c:	b5f0      	push	{r4, r5, r6, r7, lr}
    611e:	465f      	mov	r7, fp
    6120:	4656      	mov	r6, sl
    6122:	464d      	mov	r5, r9
    6124:	4644      	mov	r4, r8
    6126:	b4f0      	push	{r4, r5, r6, r7}
    6128:	031f      	lsls	r7, r3, #12
    612a:	005c      	lsls	r4, r3, #1
    612c:	0fdb      	lsrs	r3, r3, #31
    612e:	469a      	mov	sl, r3
    6130:	4b19      	ldr	r3, [pc, #100]	; (6198 <__eqdf2+0x7c>)
    6132:	030e      	lsls	r6, r1, #12
    6134:	004d      	lsls	r5, r1, #1
    6136:	0fc9      	lsrs	r1, r1, #31
    6138:	4680      	mov	r8, r0
    613a:	0b36      	lsrs	r6, r6, #12
    613c:	0d6d      	lsrs	r5, r5, #21
    613e:	468b      	mov	fp, r1
    6140:	4691      	mov	r9, r2
    6142:	0b3f      	lsrs	r7, r7, #12
    6144:	0d64      	lsrs	r4, r4, #21
    6146:	429d      	cmp	r5, r3
    6148:	d019      	beq.n	617e <__eqdf2+0x62>
    614a:	4b13      	ldr	r3, [pc, #76]	; (6198 <__eqdf2+0x7c>)
    614c:	429c      	cmp	r4, r3
    614e:	d01b      	beq.n	6188 <__eqdf2+0x6c>
    6150:	2301      	movs	r3, #1
    6152:	42a5      	cmp	r5, r4
    6154:	d006      	beq.n	6164 <__eqdf2+0x48>
    6156:	0018      	movs	r0, r3
    6158:	bc3c      	pop	{r2, r3, r4, r5}
    615a:	4690      	mov	r8, r2
    615c:	4699      	mov	r9, r3
    615e:	46a2      	mov	sl, r4
    6160:	46ab      	mov	fp, r5
    6162:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6164:	42be      	cmp	r6, r7
    6166:	d1f6      	bne.n	6156 <__eqdf2+0x3a>
    6168:	45c8      	cmp	r8, r9
    616a:	d1f4      	bne.n	6156 <__eqdf2+0x3a>
    616c:	45d3      	cmp	fp, sl
    616e:	d010      	beq.n	6192 <__eqdf2+0x76>
    6170:	2d00      	cmp	r5, #0
    6172:	d1f0      	bne.n	6156 <__eqdf2+0x3a>
    6174:	4330      	orrs	r0, r6
    6176:	0003      	movs	r3, r0
    6178:	1e5a      	subs	r2, r3, #1
    617a:	4193      	sbcs	r3, r2
    617c:	e7eb      	b.n	6156 <__eqdf2+0x3a>
    617e:	0031      	movs	r1, r6
    6180:	2301      	movs	r3, #1
    6182:	4301      	orrs	r1, r0
    6184:	d1e7      	bne.n	6156 <__eqdf2+0x3a>
    6186:	e7e0      	b.n	614a <__eqdf2+0x2e>
    6188:	433a      	orrs	r2, r7
    618a:	2301      	movs	r3, #1
    618c:	2a00      	cmp	r2, #0
    618e:	d1e2      	bne.n	6156 <__eqdf2+0x3a>
    6190:	e7de      	b.n	6150 <__eqdf2+0x34>
    6192:	2300      	movs	r3, #0
    6194:	e7df      	b.n	6156 <__eqdf2+0x3a>
    6196:	46c0      	nop			; (mov r8, r8)
    6198:	000007ff 	.word	0x000007ff

0000619c <__gedf2>:
    619c:	b5f0      	push	{r4, r5, r6, r7, lr}
    619e:	465f      	mov	r7, fp
    61a0:	4644      	mov	r4, r8
    61a2:	4656      	mov	r6, sl
    61a4:	464d      	mov	r5, r9
    61a6:	b4f0      	push	{r4, r5, r6, r7}
    61a8:	031f      	lsls	r7, r3, #12
    61aa:	0b3c      	lsrs	r4, r7, #12
    61ac:	4f2c      	ldr	r7, [pc, #176]	; (6260 <__gedf2+0xc4>)
    61ae:	030e      	lsls	r6, r1, #12
    61b0:	004d      	lsls	r5, r1, #1
    61b2:	46a3      	mov	fp, r4
    61b4:	005c      	lsls	r4, r3, #1
    61b6:	4684      	mov	ip, r0
    61b8:	0b36      	lsrs	r6, r6, #12
    61ba:	0d6d      	lsrs	r5, r5, #21
    61bc:	0fc9      	lsrs	r1, r1, #31
    61be:	4690      	mov	r8, r2
    61c0:	0d64      	lsrs	r4, r4, #21
    61c2:	0fdb      	lsrs	r3, r3, #31
    61c4:	42bd      	cmp	r5, r7
    61c6:	d02b      	beq.n	6220 <__gedf2+0x84>
    61c8:	4f25      	ldr	r7, [pc, #148]	; (6260 <__gedf2+0xc4>)
    61ca:	42bc      	cmp	r4, r7
    61cc:	d02e      	beq.n	622c <__gedf2+0x90>
    61ce:	2d00      	cmp	r5, #0
    61d0:	d10e      	bne.n	61f0 <__gedf2+0x54>
    61d2:	4330      	orrs	r0, r6
    61d4:	0007      	movs	r7, r0
    61d6:	4681      	mov	r9, r0
    61d8:	4278      	negs	r0, r7
    61da:	4178      	adcs	r0, r7
    61dc:	2c00      	cmp	r4, #0
    61de:	d117      	bne.n	6210 <__gedf2+0x74>
    61e0:	465f      	mov	r7, fp
    61e2:	433a      	orrs	r2, r7
    61e4:	d114      	bne.n	6210 <__gedf2+0x74>
    61e6:	464b      	mov	r3, r9
    61e8:	2000      	movs	r0, #0
    61ea:	2b00      	cmp	r3, #0
    61ec:	d00a      	beq.n	6204 <__gedf2+0x68>
    61ee:	e006      	b.n	61fe <__gedf2+0x62>
    61f0:	2c00      	cmp	r4, #0
    61f2:	d102      	bne.n	61fa <__gedf2+0x5e>
    61f4:	4658      	mov	r0, fp
    61f6:	4302      	orrs	r2, r0
    61f8:	d001      	beq.n	61fe <__gedf2+0x62>
    61fa:	4299      	cmp	r1, r3
    61fc:	d01a      	beq.n	6234 <__gedf2+0x98>
    61fe:	2301      	movs	r3, #1
    6200:	4248      	negs	r0, r1
    6202:	4318      	orrs	r0, r3
    6204:	bc3c      	pop	{r2, r3, r4, r5}
    6206:	4690      	mov	r8, r2
    6208:	4699      	mov	r9, r3
    620a:	46a2      	mov	sl, r4
    620c:	46ab      	mov	fp, r5
    620e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6210:	2800      	cmp	r0, #0
    6212:	d0f2      	beq.n	61fa <__gedf2+0x5e>
    6214:	4258      	negs	r0, r3
    6216:	4158      	adcs	r0, r3
    6218:	2201      	movs	r2, #1
    621a:	4240      	negs	r0, r0
    621c:	4310      	orrs	r0, r2
    621e:	e7f1      	b.n	6204 <__gedf2+0x68>
    6220:	0037      	movs	r7, r6
    6222:	4307      	orrs	r7, r0
    6224:	d0d0      	beq.n	61c8 <__gedf2+0x2c>
    6226:	2002      	movs	r0, #2
    6228:	4240      	negs	r0, r0
    622a:	e7eb      	b.n	6204 <__gedf2+0x68>
    622c:	465f      	mov	r7, fp
    622e:	4317      	orrs	r7, r2
    6230:	d0cd      	beq.n	61ce <__gedf2+0x32>
    6232:	e7f8      	b.n	6226 <__gedf2+0x8a>
    6234:	42a5      	cmp	r5, r4
    6236:	dce2      	bgt.n	61fe <__gedf2+0x62>
    6238:	db05      	blt.n	6246 <__gedf2+0xaa>
    623a:	455e      	cmp	r6, fp
    623c:	d8df      	bhi.n	61fe <__gedf2+0x62>
    623e:	d008      	beq.n	6252 <__gedf2+0xb6>
    6240:	2000      	movs	r0, #0
    6242:	455e      	cmp	r6, fp
    6244:	d2de      	bcs.n	6204 <__gedf2+0x68>
    6246:	4248      	negs	r0, r1
    6248:	4148      	adcs	r0, r1
    624a:	2301      	movs	r3, #1
    624c:	4240      	negs	r0, r0
    624e:	4318      	orrs	r0, r3
    6250:	e7d8      	b.n	6204 <__gedf2+0x68>
    6252:	45c4      	cmp	ip, r8
    6254:	d8d3      	bhi.n	61fe <__gedf2+0x62>
    6256:	2000      	movs	r0, #0
    6258:	45c4      	cmp	ip, r8
    625a:	d3f4      	bcc.n	6246 <__gedf2+0xaa>
    625c:	e7d2      	b.n	6204 <__gedf2+0x68>
    625e:	46c0      	nop			; (mov r8, r8)
    6260:	000007ff 	.word	0x000007ff

00006264 <__ledf2>:
    6264:	b5f0      	push	{r4, r5, r6, r7, lr}
    6266:	465f      	mov	r7, fp
    6268:	464d      	mov	r5, r9
    626a:	4644      	mov	r4, r8
    626c:	4656      	mov	r6, sl
    626e:	b4f0      	push	{r4, r5, r6, r7}
    6270:	031c      	lsls	r4, r3, #12
    6272:	0b24      	lsrs	r4, r4, #12
    6274:	46a4      	mov	ip, r4
    6276:	4c2f      	ldr	r4, [pc, #188]	; (6334 <__ledf2+0xd0>)
    6278:	030f      	lsls	r7, r1, #12
    627a:	004d      	lsls	r5, r1, #1
    627c:	005e      	lsls	r6, r3, #1
    627e:	0fc9      	lsrs	r1, r1, #31
    6280:	4680      	mov	r8, r0
    6282:	0b3f      	lsrs	r7, r7, #12
    6284:	0d6d      	lsrs	r5, r5, #21
    6286:	468b      	mov	fp, r1
    6288:	4691      	mov	r9, r2
    628a:	0d76      	lsrs	r6, r6, #21
    628c:	0fdb      	lsrs	r3, r3, #31
    628e:	42a5      	cmp	r5, r4
    6290:	d020      	beq.n	62d4 <__ledf2+0x70>
    6292:	4c28      	ldr	r4, [pc, #160]	; (6334 <__ledf2+0xd0>)
    6294:	42a6      	cmp	r6, r4
    6296:	d022      	beq.n	62de <__ledf2+0x7a>
    6298:	2d00      	cmp	r5, #0
    629a:	d112      	bne.n	62c2 <__ledf2+0x5e>
    629c:	4338      	orrs	r0, r7
    629e:	4244      	negs	r4, r0
    62a0:	4144      	adcs	r4, r0
    62a2:	2e00      	cmp	r6, #0
    62a4:	d020      	beq.n	62e8 <__ledf2+0x84>
    62a6:	2c00      	cmp	r4, #0
    62a8:	d00d      	beq.n	62c6 <__ledf2+0x62>
    62aa:	425c      	negs	r4, r3
    62ac:	4163      	adcs	r3, r4
    62ae:	2401      	movs	r4, #1
    62b0:	425b      	negs	r3, r3
    62b2:	431c      	orrs	r4, r3
    62b4:	0020      	movs	r0, r4
    62b6:	bc3c      	pop	{r2, r3, r4, r5}
    62b8:	4690      	mov	r8, r2
    62ba:	4699      	mov	r9, r3
    62bc:	46a2      	mov	sl, r4
    62be:	46ab      	mov	fp, r5
    62c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    62c2:	2e00      	cmp	r6, #0
    62c4:	d017      	beq.n	62f6 <__ledf2+0x92>
    62c6:	455b      	cmp	r3, fp
    62c8:	d019      	beq.n	62fe <__ledf2+0x9a>
    62ca:	465b      	mov	r3, fp
    62cc:	425c      	negs	r4, r3
    62ce:	2301      	movs	r3, #1
    62d0:	431c      	orrs	r4, r3
    62d2:	e7ef      	b.n	62b4 <__ledf2+0x50>
    62d4:	0039      	movs	r1, r7
    62d6:	2402      	movs	r4, #2
    62d8:	4301      	orrs	r1, r0
    62da:	d1eb      	bne.n	62b4 <__ledf2+0x50>
    62dc:	e7d9      	b.n	6292 <__ledf2+0x2e>
    62de:	4661      	mov	r1, ip
    62e0:	2402      	movs	r4, #2
    62e2:	4311      	orrs	r1, r2
    62e4:	d1e6      	bne.n	62b4 <__ledf2+0x50>
    62e6:	e7d7      	b.n	6298 <__ledf2+0x34>
    62e8:	4661      	mov	r1, ip
    62ea:	430a      	orrs	r2, r1
    62ec:	d1db      	bne.n	62a6 <__ledf2+0x42>
    62ee:	2400      	movs	r4, #0
    62f0:	2800      	cmp	r0, #0
    62f2:	d0df      	beq.n	62b4 <__ledf2+0x50>
    62f4:	e7e9      	b.n	62ca <__ledf2+0x66>
    62f6:	4661      	mov	r1, ip
    62f8:	430a      	orrs	r2, r1
    62fa:	d1e4      	bne.n	62c6 <__ledf2+0x62>
    62fc:	e7e5      	b.n	62ca <__ledf2+0x66>
    62fe:	42b5      	cmp	r5, r6
    6300:	dd03      	ble.n	630a <__ledf2+0xa6>
    6302:	2201      	movs	r2, #1
    6304:	425c      	negs	r4, r3
    6306:	4314      	orrs	r4, r2
    6308:	e7d4      	b.n	62b4 <__ledf2+0x50>
    630a:	42b5      	cmp	r5, r6
    630c:	dbcd      	blt.n	62aa <__ledf2+0x46>
    630e:	4567      	cmp	r7, ip
    6310:	d8db      	bhi.n	62ca <__ledf2+0x66>
    6312:	d009      	beq.n	6328 <__ledf2+0xc4>
    6314:	2400      	movs	r4, #0
    6316:	4567      	cmp	r7, ip
    6318:	d2cc      	bcs.n	62b4 <__ledf2+0x50>
    631a:	4659      	mov	r1, fp
    631c:	424c      	negs	r4, r1
    631e:	4161      	adcs	r1, r4
    6320:	2401      	movs	r4, #1
    6322:	4249      	negs	r1, r1
    6324:	430c      	orrs	r4, r1
    6326:	e7c5      	b.n	62b4 <__ledf2+0x50>
    6328:	45c8      	cmp	r8, r9
    632a:	d8ce      	bhi.n	62ca <__ledf2+0x66>
    632c:	2400      	movs	r4, #0
    632e:	45c8      	cmp	r8, r9
    6330:	d3f3      	bcc.n	631a <__ledf2+0xb6>
    6332:	e7bf      	b.n	62b4 <__ledf2+0x50>
    6334:	000007ff 	.word	0x000007ff

00006338 <__aeabi_dmul>:
    6338:	b5f0      	push	{r4, r5, r6, r7, lr}
    633a:	465f      	mov	r7, fp
    633c:	4656      	mov	r6, sl
    633e:	464d      	mov	r5, r9
    6340:	4644      	mov	r4, r8
    6342:	b4f0      	push	{r4, r5, r6, r7}
    6344:	030d      	lsls	r5, r1, #12
    6346:	4699      	mov	r9, r3
    6348:	004e      	lsls	r6, r1, #1
    634a:	0b2b      	lsrs	r3, r5, #12
    634c:	b087      	sub	sp, #28
    634e:	0007      	movs	r7, r0
    6350:	4692      	mov	sl, r2
    6352:	4680      	mov	r8, r0
    6354:	469b      	mov	fp, r3
    6356:	0d76      	lsrs	r6, r6, #21
    6358:	0fcc      	lsrs	r4, r1, #31
    635a:	2e00      	cmp	r6, #0
    635c:	d069      	beq.n	6432 <__aeabi_dmul+0xfa>
    635e:	4b6d      	ldr	r3, [pc, #436]	; (6514 <__aeabi_dmul+0x1dc>)
    6360:	429e      	cmp	r6, r3
    6362:	d035      	beq.n	63d0 <__aeabi_dmul+0x98>
    6364:	465b      	mov	r3, fp
    6366:	2280      	movs	r2, #128	; 0x80
    6368:	00dd      	lsls	r5, r3, #3
    636a:	0412      	lsls	r2, r2, #16
    636c:	0f43      	lsrs	r3, r0, #29
    636e:	4313      	orrs	r3, r2
    6370:	432b      	orrs	r3, r5
    6372:	469b      	mov	fp, r3
    6374:	00c3      	lsls	r3, r0, #3
    6376:	4698      	mov	r8, r3
    6378:	4b67      	ldr	r3, [pc, #412]	; (6518 <__aeabi_dmul+0x1e0>)
    637a:	2700      	movs	r7, #0
    637c:	469c      	mov	ip, r3
    637e:	2300      	movs	r3, #0
    6380:	4466      	add	r6, ip
    6382:	9301      	str	r3, [sp, #4]
    6384:	464a      	mov	r2, r9
    6386:	0315      	lsls	r5, r2, #12
    6388:	0050      	lsls	r0, r2, #1
    638a:	0fd2      	lsrs	r2, r2, #31
    638c:	4653      	mov	r3, sl
    638e:	0b2d      	lsrs	r5, r5, #12
    6390:	0d40      	lsrs	r0, r0, #21
    6392:	4691      	mov	r9, r2
    6394:	d100      	bne.n	6398 <__aeabi_dmul+0x60>
    6396:	e076      	b.n	6486 <__aeabi_dmul+0x14e>
    6398:	4a5e      	ldr	r2, [pc, #376]	; (6514 <__aeabi_dmul+0x1dc>)
    639a:	4290      	cmp	r0, r2
    639c:	d06c      	beq.n	6478 <__aeabi_dmul+0x140>
    639e:	2280      	movs	r2, #128	; 0x80
    63a0:	0f5b      	lsrs	r3, r3, #29
    63a2:	0412      	lsls	r2, r2, #16
    63a4:	4313      	orrs	r3, r2
    63a6:	4a5c      	ldr	r2, [pc, #368]	; (6518 <__aeabi_dmul+0x1e0>)
    63a8:	00ed      	lsls	r5, r5, #3
    63aa:	4694      	mov	ip, r2
    63ac:	431d      	orrs	r5, r3
    63ae:	4653      	mov	r3, sl
    63b0:	2200      	movs	r2, #0
    63b2:	00db      	lsls	r3, r3, #3
    63b4:	4460      	add	r0, ip
    63b6:	4649      	mov	r1, r9
    63b8:	1836      	adds	r6, r6, r0
    63ba:	1c70      	adds	r0, r6, #1
    63bc:	4061      	eors	r1, r4
    63be:	9002      	str	r0, [sp, #8]
    63c0:	4317      	orrs	r7, r2
    63c2:	2f0f      	cmp	r7, #15
    63c4:	d900      	bls.n	63c8 <__aeabi_dmul+0x90>
    63c6:	e0af      	b.n	6528 <__aeabi_dmul+0x1f0>
    63c8:	4854      	ldr	r0, [pc, #336]	; (651c <__aeabi_dmul+0x1e4>)
    63ca:	00bf      	lsls	r7, r7, #2
    63cc:	59c7      	ldr	r7, [r0, r7]
    63ce:	46bf      	mov	pc, r7
    63d0:	465b      	mov	r3, fp
    63d2:	431f      	orrs	r7, r3
    63d4:	d000      	beq.n	63d8 <__aeabi_dmul+0xa0>
    63d6:	e088      	b.n	64ea <__aeabi_dmul+0x1b2>
    63d8:	2300      	movs	r3, #0
    63da:	469b      	mov	fp, r3
    63dc:	4698      	mov	r8, r3
    63de:	3302      	adds	r3, #2
    63e0:	2708      	movs	r7, #8
    63e2:	9301      	str	r3, [sp, #4]
    63e4:	e7ce      	b.n	6384 <__aeabi_dmul+0x4c>
    63e6:	4649      	mov	r1, r9
    63e8:	2a02      	cmp	r2, #2
    63ea:	d06a      	beq.n	64c2 <__aeabi_dmul+0x18a>
    63ec:	2a03      	cmp	r2, #3
    63ee:	d100      	bne.n	63f2 <__aeabi_dmul+0xba>
    63f0:	e209      	b.n	6806 <__aeabi_dmul+0x4ce>
    63f2:	2a01      	cmp	r2, #1
    63f4:	d000      	beq.n	63f8 <__aeabi_dmul+0xc0>
    63f6:	e1bb      	b.n	6770 <__aeabi_dmul+0x438>
    63f8:	4011      	ands	r1, r2
    63fa:	2200      	movs	r2, #0
    63fc:	2300      	movs	r3, #0
    63fe:	2500      	movs	r5, #0
    6400:	4690      	mov	r8, r2
    6402:	b2cc      	uxtb	r4, r1
    6404:	2100      	movs	r1, #0
    6406:	032d      	lsls	r5, r5, #12
    6408:	0d0a      	lsrs	r2, r1, #20
    640a:	0512      	lsls	r2, r2, #20
    640c:	0b2d      	lsrs	r5, r5, #12
    640e:	4315      	orrs	r5, r2
    6410:	4a43      	ldr	r2, [pc, #268]	; (6520 <__aeabi_dmul+0x1e8>)
    6412:	051b      	lsls	r3, r3, #20
    6414:	4015      	ands	r5, r2
    6416:	431d      	orrs	r5, r3
    6418:	006d      	lsls	r5, r5, #1
    641a:	07e4      	lsls	r4, r4, #31
    641c:	086d      	lsrs	r5, r5, #1
    641e:	4325      	orrs	r5, r4
    6420:	4640      	mov	r0, r8
    6422:	0029      	movs	r1, r5
    6424:	b007      	add	sp, #28
    6426:	bc3c      	pop	{r2, r3, r4, r5}
    6428:	4690      	mov	r8, r2
    642a:	4699      	mov	r9, r3
    642c:	46a2      	mov	sl, r4
    642e:	46ab      	mov	fp, r5
    6430:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6432:	4303      	orrs	r3, r0
    6434:	d052      	beq.n	64dc <__aeabi_dmul+0x1a4>
    6436:	465b      	mov	r3, fp
    6438:	2b00      	cmp	r3, #0
    643a:	d100      	bne.n	643e <__aeabi_dmul+0x106>
    643c:	e18a      	b.n	6754 <__aeabi_dmul+0x41c>
    643e:	4658      	mov	r0, fp
    6440:	f000 fe18 	bl	7074 <__clzsi2>
    6444:	0003      	movs	r3, r0
    6446:	3b0b      	subs	r3, #11
    6448:	2b1c      	cmp	r3, #28
    644a:	dd00      	ble.n	644e <__aeabi_dmul+0x116>
    644c:	e17b      	b.n	6746 <__aeabi_dmul+0x40e>
    644e:	221d      	movs	r2, #29
    6450:	1ad3      	subs	r3, r2, r3
    6452:	003a      	movs	r2, r7
    6454:	0001      	movs	r1, r0
    6456:	465d      	mov	r5, fp
    6458:	40da      	lsrs	r2, r3
    645a:	3908      	subs	r1, #8
    645c:	408d      	lsls	r5, r1
    645e:	0013      	movs	r3, r2
    6460:	408f      	lsls	r7, r1
    6462:	432b      	orrs	r3, r5
    6464:	469b      	mov	fp, r3
    6466:	46b8      	mov	r8, r7
    6468:	4b2e      	ldr	r3, [pc, #184]	; (6524 <__aeabi_dmul+0x1ec>)
    646a:	2700      	movs	r7, #0
    646c:	469c      	mov	ip, r3
    646e:	2300      	movs	r3, #0
    6470:	4460      	add	r0, ip
    6472:	4246      	negs	r6, r0
    6474:	9301      	str	r3, [sp, #4]
    6476:	e785      	b.n	6384 <__aeabi_dmul+0x4c>
    6478:	4652      	mov	r2, sl
    647a:	432a      	orrs	r2, r5
    647c:	d12c      	bne.n	64d8 <__aeabi_dmul+0x1a0>
    647e:	2500      	movs	r5, #0
    6480:	2300      	movs	r3, #0
    6482:	2202      	movs	r2, #2
    6484:	e797      	b.n	63b6 <__aeabi_dmul+0x7e>
    6486:	4652      	mov	r2, sl
    6488:	432a      	orrs	r2, r5
    648a:	d021      	beq.n	64d0 <__aeabi_dmul+0x198>
    648c:	2d00      	cmp	r5, #0
    648e:	d100      	bne.n	6492 <__aeabi_dmul+0x15a>
    6490:	e154      	b.n	673c <__aeabi_dmul+0x404>
    6492:	0028      	movs	r0, r5
    6494:	f000 fdee 	bl	7074 <__clzsi2>
    6498:	0003      	movs	r3, r0
    649a:	3b0b      	subs	r3, #11
    649c:	2b1c      	cmp	r3, #28
    649e:	dd00      	ble.n	64a2 <__aeabi_dmul+0x16a>
    64a0:	e146      	b.n	6730 <__aeabi_dmul+0x3f8>
    64a2:	211d      	movs	r1, #29
    64a4:	1acb      	subs	r3, r1, r3
    64a6:	4651      	mov	r1, sl
    64a8:	0002      	movs	r2, r0
    64aa:	40d9      	lsrs	r1, r3
    64ac:	4653      	mov	r3, sl
    64ae:	3a08      	subs	r2, #8
    64b0:	4095      	lsls	r5, r2
    64b2:	4093      	lsls	r3, r2
    64b4:	430d      	orrs	r5, r1
    64b6:	4a1b      	ldr	r2, [pc, #108]	; (6524 <__aeabi_dmul+0x1ec>)
    64b8:	4694      	mov	ip, r2
    64ba:	4460      	add	r0, ip
    64bc:	4240      	negs	r0, r0
    64be:	2200      	movs	r2, #0
    64c0:	e779      	b.n	63b6 <__aeabi_dmul+0x7e>
    64c2:	2401      	movs	r4, #1
    64c4:	2200      	movs	r2, #0
    64c6:	400c      	ands	r4, r1
    64c8:	4b12      	ldr	r3, [pc, #72]	; (6514 <__aeabi_dmul+0x1dc>)
    64ca:	2500      	movs	r5, #0
    64cc:	4690      	mov	r8, r2
    64ce:	e799      	b.n	6404 <__aeabi_dmul+0xcc>
    64d0:	2500      	movs	r5, #0
    64d2:	2300      	movs	r3, #0
    64d4:	2201      	movs	r2, #1
    64d6:	e76e      	b.n	63b6 <__aeabi_dmul+0x7e>
    64d8:	2203      	movs	r2, #3
    64da:	e76c      	b.n	63b6 <__aeabi_dmul+0x7e>
    64dc:	2300      	movs	r3, #0
    64de:	469b      	mov	fp, r3
    64e0:	4698      	mov	r8, r3
    64e2:	3301      	adds	r3, #1
    64e4:	2704      	movs	r7, #4
    64e6:	9301      	str	r3, [sp, #4]
    64e8:	e74c      	b.n	6384 <__aeabi_dmul+0x4c>
    64ea:	2303      	movs	r3, #3
    64ec:	270c      	movs	r7, #12
    64ee:	9301      	str	r3, [sp, #4]
    64f0:	e748      	b.n	6384 <__aeabi_dmul+0x4c>
    64f2:	2300      	movs	r3, #0
    64f4:	2580      	movs	r5, #128	; 0x80
    64f6:	4698      	mov	r8, r3
    64f8:	2400      	movs	r4, #0
    64fa:	032d      	lsls	r5, r5, #12
    64fc:	4b05      	ldr	r3, [pc, #20]	; (6514 <__aeabi_dmul+0x1dc>)
    64fe:	e781      	b.n	6404 <__aeabi_dmul+0xcc>
    6500:	465d      	mov	r5, fp
    6502:	4643      	mov	r3, r8
    6504:	9a01      	ldr	r2, [sp, #4]
    6506:	e76f      	b.n	63e8 <__aeabi_dmul+0xb0>
    6508:	465d      	mov	r5, fp
    650a:	4643      	mov	r3, r8
    650c:	0021      	movs	r1, r4
    650e:	9a01      	ldr	r2, [sp, #4]
    6510:	e76a      	b.n	63e8 <__aeabi_dmul+0xb0>
    6512:	46c0      	nop			; (mov r8, r8)
    6514:	000007ff 	.word	0x000007ff
    6518:	fffffc01 	.word	0xfffffc01
    651c:	000073c0 	.word	0x000073c0
    6520:	800fffff 	.word	0x800fffff
    6524:	000003f3 	.word	0x000003f3
    6528:	4642      	mov	r2, r8
    652a:	0c12      	lsrs	r2, r2, #16
    652c:	4691      	mov	r9, r2
    652e:	0c1a      	lsrs	r2, r3, #16
    6530:	4694      	mov	ip, r2
    6532:	4642      	mov	r2, r8
    6534:	0417      	lsls	r7, r2, #16
    6536:	464a      	mov	r2, r9
    6538:	041b      	lsls	r3, r3, #16
    653a:	0c1b      	lsrs	r3, r3, #16
    653c:	435a      	muls	r2, r3
    653e:	4660      	mov	r0, ip
    6540:	4690      	mov	r8, r2
    6542:	464a      	mov	r2, r9
    6544:	4342      	muls	r2, r0
    6546:	0010      	movs	r0, r2
    6548:	9203      	str	r2, [sp, #12]
    654a:	4662      	mov	r2, ip
    654c:	001c      	movs	r4, r3
    654e:	0c3f      	lsrs	r7, r7, #16
    6550:	437a      	muls	r2, r7
    6552:	437c      	muls	r4, r7
    6554:	4442      	add	r2, r8
    6556:	9201      	str	r2, [sp, #4]
    6558:	0c22      	lsrs	r2, r4, #16
    655a:	4692      	mov	sl, r2
    655c:	9a01      	ldr	r2, [sp, #4]
    655e:	4452      	add	r2, sl
    6560:	4590      	cmp	r8, r2
    6562:	d906      	bls.n	6572 <__aeabi_dmul+0x23a>
    6564:	4682      	mov	sl, r0
    6566:	2080      	movs	r0, #128	; 0x80
    6568:	0240      	lsls	r0, r0, #9
    656a:	4680      	mov	r8, r0
    656c:	44c2      	add	sl, r8
    656e:	4650      	mov	r0, sl
    6570:	9003      	str	r0, [sp, #12]
    6572:	0c10      	lsrs	r0, r2, #16
    6574:	9004      	str	r0, [sp, #16]
    6576:	4648      	mov	r0, r9
    6578:	0424      	lsls	r4, r4, #16
    657a:	0c24      	lsrs	r4, r4, #16
    657c:	0412      	lsls	r2, r2, #16
    657e:	1912      	adds	r2, r2, r4
    6580:	9205      	str	r2, [sp, #20]
    6582:	0c2a      	lsrs	r2, r5, #16
    6584:	042d      	lsls	r5, r5, #16
    6586:	0c2d      	lsrs	r5, r5, #16
    6588:	4368      	muls	r0, r5
    658a:	002c      	movs	r4, r5
    658c:	4682      	mov	sl, r0
    658e:	4648      	mov	r0, r9
    6590:	437c      	muls	r4, r7
    6592:	4350      	muls	r0, r2
    6594:	4681      	mov	r9, r0
    6596:	0c20      	lsrs	r0, r4, #16
    6598:	4680      	mov	r8, r0
    659a:	4357      	muls	r7, r2
    659c:	4457      	add	r7, sl
    659e:	4447      	add	r7, r8
    65a0:	45ba      	cmp	sl, r7
    65a2:	d903      	bls.n	65ac <__aeabi_dmul+0x274>
    65a4:	2080      	movs	r0, #128	; 0x80
    65a6:	0240      	lsls	r0, r0, #9
    65a8:	4680      	mov	r8, r0
    65aa:	44c1      	add	r9, r8
    65ac:	0c38      	lsrs	r0, r7, #16
    65ae:	043f      	lsls	r7, r7, #16
    65b0:	46b8      	mov	r8, r7
    65b2:	4448      	add	r0, r9
    65b4:	0424      	lsls	r4, r4, #16
    65b6:	0c24      	lsrs	r4, r4, #16
    65b8:	9001      	str	r0, [sp, #4]
    65ba:	9804      	ldr	r0, [sp, #16]
    65bc:	44a0      	add	r8, r4
    65be:	4440      	add	r0, r8
    65c0:	9004      	str	r0, [sp, #16]
    65c2:	4658      	mov	r0, fp
    65c4:	0c00      	lsrs	r0, r0, #16
    65c6:	4681      	mov	r9, r0
    65c8:	4658      	mov	r0, fp
    65ca:	0404      	lsls	r4, r0, #16
    65cc:	0c20      	lsrs	r0, r4, #16
    65ce:	4682      	mov	sl, r0
    65d0:	0007      	movs	r7, r0
    65d2:	4648      	mov	r0, r9
    65d4:	435f      	muls	r7, r3
    65d6:	464c      	mov	r4, r9
    65d8:	4343      	muls	r3, r0
    65da:	4660      	mov	r0, ip
    65dc:	4360      	muls	r0, r4
    65de:	4664      	mov	r4, ip
    65e0:	4683      	mov	fp, r0
    65e2:	4650      	mov	r0, sl
    65e4:	4344      	muls	r4, r0
    65e6:	0c38      	lsrs	r0, r7, #16
    65e8:	4684      	mov	ip, r0
    65ea:	18e4      	adds	r4, r4, r3
    65ec:	4464      	add	r4, ip
    65ee:	42a3      	cmp	r3, r4
    65f0:	d903      	bls.n	65fa <__aeabi_dmul+0x2c2>
    65f2:	2380      	movs	r3, #128	; 0x80
    65f4:	025b      	lsls	r3, r3, #9
    65f6:	469c      	mov	ip, r3
    65f8:	44e3      	add	fp, ip
    65fa:	4648      	mov	r0, r9
    65fc:	043f      	lsls	r7, r7, #16
    65fe:	0c23      	lsrs	r3, r4, #16
    6600:	0c3f      	lsrs	r7, r7, #16
    6602:	0424      	lsls	r4, r4, #16
    6604:	19e4      	adds	r4, r4, r7
    6606:	4657      	mov	r7, sl
    6608:	4368      	muls	r0, r5
    660a:	436f      	muls	r7, r5
    660c:	4684      	mov	ip, r0
    660e:	464d      	mov	r5, r9
    6610:	4650      	mov	r0, sl
    6612:	4355      	muls	r5, r2
    6614:	4342      	muls	r2, r0
    6616:	0c38      	lsrs	r0, r7, #16
    6618:	4681      	mov	r9, r0
    661a:	4462      	add	r2, ip
    661c:	444a      	add	r2, r9
    661e:	445b      	add	r3, fp
    6620:	4594      	cmp	ip, r2
    6622:	d903      	bls.n	662c <__aeabi_dmul+0x2f4>
    6624:	2080      	movs	r0, #128	; 0x80
    6626:	0240      	lsls	r0, r0, #9
    6628:	4684      	mov	ip, r0
    662a:	4465      	add	r5, ip
    662c:	9803      	ldr	r0, [sp, #12]
    662e:	043f      	lsls	r7, r7, #16
    6630:	4683      	mov	fp, r0
    6632:	9804      	ldr	r0, [sp, #16]
    6634:	0c3f      	lsrs	r7, r7, #16
    6636:	4684      	mov	ip, r0
    6638:	44e3      	add	fp, ip
    663a:	45c3      	cmp	fp, r8
    663c:	4180      	sbcs	r0, r0
    663e:	4240      	negs	r0, r0
    6640:	4682      	mov	sl, r0
    6642:	0410      	lsls	r0, r2, #16
    6644:	4684      	mov	ip, r0
    6646:	9801      	ldr	r0, [sp, #4]
    6648:	4467      	add	r7, ip
    664a:	4684      	mov	ip, r0
    664c:	4467      	add	r7, ip
    664e:	44a3      	add	fp, r4
    6650:	46bc      	mov	ip, r7
    6652:	45a3      	cmp	fp, r4
    6654:	41a4      	sbcs	r4, r4
    6656:	4699      	mov	r9, r3
    6658:	44d4      	add	ip, sl
    665a:	4264      	negs	r4, r4
    665c:	4287      	cmp	r7, r0
    665e:	41bf      	sbcs	r7, r7
    6660:	45d4      	cmp	ip, sl
    6662:	4180      	sbcs	r0, r0
    6664:	44e1      	add	r9, ip
    6666:	46a0      	mov	r8, r4
    6668:	4599      	cmp	r9, r3
    666a:	419b      	sbcs	r3, r3
    666c:	427f      	negs	r7, r7
    666e:	4240      	negs	r0, r0
    6670:	44c8      	add	r8, r9
    6672:	4307      	orrs	r7, r0
    6674:	0c12      	lsrs	r2, r2, #16
    6676:	18ba      	adds	r2, r7, r2
    6678:	45a0      	cmp	r8, r4
    667a:	41a4      	sbcs	r4, r4
    667c:	425f      	negs	r7, r3
    667e:	003b      	movs	r3, r7
    6680:	4264      	negs	r4, r4
    6682:	4323      	orrs	r3, r4
    6684:	18d7      	adds	r7, r2, r3
    6686:	4643      	mov	r3, r8
    6688:	197d      	adds	r5, r7, r5
    668a:	0ddb      	lsrs	r3, r3, #23
    668c:	026d      	lsls	r5, r5, #9
    668e:	431d      	orrs	r5, r3
    6690:	465b      	mov	r3, fp
    6692:	025a      	lsls	r2, r3, #9
    6694:	9b05      	ldr	r3, [sp, #20]
    6696:	431a      	orrs	r2, r3
    6698:	1e53      	subs	r3, r2, #1
    669a:	419a      	sbcs	r2, r3
    669c:	465b      	mov	r3, fp
    669e:	0ddb      	lsrs	r3, r3, #23
    66a0:	431a      	orrs	r2, r3
    66a2:	4643      	mov	r3, r8
    66a4:	025b      	lsls	r3, r3, #9
    66a6:	4313      	orrs	r3, r2
    66a8:	01ea      	lsls	r2, r5, #7
    66aa:	d507      	bpl.n	66bc <__aeabi_dmul+0x384>
    66ac:	2201      	movs	r2, #1
    66ae:	085c      	lsrs	r4, r3, #1
    66b0:	4013      	ands	r3, r2
    66b2:	4323      	orrs	r3, r4
    66b4:	07ea      	lsls	r2, r5, #31
    66b6:	9e02      	ldr	r6, [sp, #8]
    66b8:	4313      	orrs	r3, r2
    66ba:	086d      	lsrs	r5, r5, #1
    66bc:	4a57      	ldr	r2, [pc, #348]	; (681c <__aeabi_dmul+0x4e4>)
    66be:	18b2      	adds	r2, r6, r2
    66c0:	2a00      	cmp	r2, #0
    66c2:	dd4b      	ble.n	675c <__aeabi_dmul+0x424>
    66c4:	0758      	lsls	r0, r3, #29
    66c6:	d009      	beq.n	66dc <__aeabi_dmul+0x3a4>
    66c8:	200f      	movs	r0, #15
    66ca:	4018      	ands	r0, r3
    66cc:	2804      	cmp	r0, #4
    66ce:	d005      	beq.n	66dc <__aeabi_dmul+0x3a4>
    66d0:	1d18      	adds	r0, r3, #4
    66d2:	4298      	cmp	r0, r3
    66d4:	419b      	sbcs	r3, r3
    66d6:	425b      	negs	r3, r3
    66d8:	18ed      	adds	r5, r5, r3
    66da:	0003      	movs	r3, r0
    66dc:	01e8      	lsls	r0, r5, #7
    66de:	d504      	bpl.n	66ea <__aeabi_dmul+0x3b2>
    66e0:	4a4f      	ldr	r2, [pc, #316]	; (6820 <__aeabi_dmul+0x4e8>)
    66e2:	4015      	ands	r5, r2
    66e4:	2280      	movs	r2, #128	; 0x80
    66e6:	00d2      	lsls	r2, r2, #3
    66e8:	18b2      	adds	r2, r6, r2
    66ea:	484e      	ldr	r0, [pc, #312]	; (6824 <__aeabi_dmul+0x4ec>)
    66ec:	4282      	cmp	r2, r0
    66ee:	dd00      	ble.n	66f2 <__aeabi_dmul+0x3ba>
    66f0:	e6e7      	b.n	64c2 <__aeabi_dmul+0x18a>
    66f2:	2401      	movs	r4, #1
    66f4:	08db      	lsrs	r3, r3, #3
    66f6:	0768      	lsls	r0, r5, #29
    66f8:	4318      	orrs	r0, r3
    66fa:	026d      	lsls	r5, r5, #9
    66fc:	0553      	lsls	r3, r2, #21
    66fe:	4680      	mov	r8, r0
    6700:	0b2d      	lsrs	r5, r5, #12
    6702:	0d5b      	lsrs	r3, r3, #21
    6704:	400c      	ands	r4, r1
    6706:	e67d      	b.n	6404 <__aeabi_dmul+0xcc>
    6708:	2280      	movs	r2, #128	; 0x80
    670a:	4659      	mov	r1, fp
    670c:	0312      	lsls	r2, r2, #12
    670e:	4211      	tst	r1, r2
    6710:	d008      	beq.n	6724 <__aeabi_dmul+0x3ec>
    6712:	4215      	tst	r5, r2
    6714:	d106      	bne.n	6724 <__aeabi_dmul+0x3ec>
    6716:	4315      	orrs	r5, r2
    6718:	032d      	lsls	r5, r5, #12
    671a:	4698      	mov	r8, r3
    671c:	0b2d      	lsrs	r5, r5, #12
    671e:	464c      	mov	r4, r9
    6720:	4b41      	ldr	r3, [pc, #260]	; (6828 <__aeabi_dmul+0x4f0>)
    6722:	e66f      	b.n	6404 <__aeabi_dmul+0xcc>
    6724:	465d      	mov	r5, fp
    6726:	4315      	orrs	r5, r2
    6728:	032d      	lsls	r5, r5, #12
    672a:	0b2d      	lsrs	r5, r5, #12
    672c:	4b3e      	ldr	r3, [pc, #248]	; (6828 <__aeabi_dmul+0x4f0>)
    672e:	e669      	b.n	6404 <__aeabi_dmul+0xcc>
    6730:	0003      	movs	r3, r0
    6732:	4655      	mov	r5, sl
    6734:	3b28      	subs	r3, #40	; 0x28
    6736:	409d      	lsls	r5, r3
    6738:	2300      	movs	r3, #0
    673a:	e6bc      	b.n	64b6 <__aeabi_dmul+0x17e>
    673c:	4650      	mov	r0, sl
    673e:	f000 fc99 	bl	7074 <__clzsi2>
    6742:	3020      	adds	r0, #32
    6744:	e6a8      	b.n	6498 <__aeabi_dmul+0x160>
    6746:	0003      	movs	r3, r0
    6748:	3b28      	subs	r3, #40	; 0x28
    674a:	409f      	lsls	r7, r3
    674c:	2300      	movs	r3, #0
    674e:	46bb      	mov	fp, r7
    6750:	4698      	mov	r8, r3
    6752:	e689      	b.n	6468 <__aeabi_dmul+0x130>
    6754:	f000 fc8e 	bl	7074 <__clzsi2>
    6758:	3020      	adds	r0, #32
    675a:	e673      	b.n	6444 <__aeabi_dmul+0x10c>
    675c:	2401      	movs	r4, #1
    675e:	1aa6      	subs	r6, r4, r2
    6760:	2e38      	cmp	r6, #56	; 0x38
    6762:	dd07      	ble.n	6774 <__aeabi_dmul+0x43c>
    6764:	2200      	movs	r2, #0
    6766:	400c      	ands	r4, r1
    6768:	2300      	movs	r3, #0
    676a:	2500      	movs	r5, #0
    676c:	4690      	mov	r8, r2
    676e:	e649      	b.n	6404 <__aeabi_dmul+0xcc>
    6770:	9e02      	ldr	r6, [sp, #8]
    6772:	e7a3      	b.n	66bc <__aeabi_dmul+0x384>
    6774:	2e1f      	cmp	r6, #31
    6776:	dc20      	bgt.n	67ba <__aeabi_dmul+0x482>
    6778:	2220      	movs	r2, #32
    677a:	002c      	movs	r4, r5
    677c:	0018      	movs	r0, r3
    677e:	1b92      	subs	r2, r2, r6
    6780:	40f0      	lsrs	r0, r6
    6782:	4094      	lsls	r4, r2
    6784:	4093      	lsls	r3, r2
    6786:	4304      	orrs	r4, r0
    6788:	1e58      	subs	r0, r3, #1
    678a:	4183      	sbcs	r3, r0
    678c:	431c      	orrs	r4, r3
    678e:	40f5      	lsrs	r5, r6
    6790:	0763      	lsls	r3, r4, #29
    6792:	d009      	beq.n	67a8 <__aeabi_dmul+0x470>
    6794:	230f      	movs	r3, #15
    6796:	4023      	ands	r3, r4
    6798:	2b04      	cmp	r3, #4
    679a:	d005      	beq.n	67a8 <__aeabi_dmul+0x470>
    679c:	0023      	movs	r3, r4
    679e:	1d1c      	adds	r4, r3, #4
    67a0:	429c      	cmp	r4, r3
    67a2:	4192      	sbcs	r2, r2
    67a4:	4252      	negs	r2, r2
    67a6:	18ad      	adds	r5, r5, r2
    67a8:	022b      	lsls	r3, r5, #8
    67aa:	d51f      	bpl.n	67ec <__aeabi_dmul+0x4b4>
    67ac:	2401      	movs	r4, #1
    67ae:	2200      	movs	r2, #0
    67b0:	400c      	ands	r4, r1
    67b2:	2301      	movs	r3, #1
    67b4:	2500      	movs	r5, #0
    67b6:	4690      	mov	r8, r2
    67b8:	e624      	b.n	6404 <__aeabi_dmul+0xcc>
    67ba:	201f      	movs	r0, #31
    67bc:	002c      	movs	r4, r5
    67be:	4240      	negs	r0, r0
    67c0:	1a82      	subs	r2, r0, r2
    67c2:	40d4      	lsrs	r4, r2
    67c4:	2e20      	cmp	r6, #32
    67c6:	d01c      	beq.n	6802 <__aeabi_dmul+0x4ca>
    67c8:	2240      	movs	r2, #64	; 0x40
    67ca:	1b96      	subs	r6, r2, r6
    67cc:	40b5      	lsls	r5, r6
    67ce:	432b      	orrs	r3, r5
    67d0:	1e58      	subs	r0, r3, #1
    67d2:	4183      	sbcs	r3, r0
    67d4:	2007      	movs	r0, #7
    67d6:	4323      	orrs	r3, r4
    67d8:	4018      	ands	r0, r3
    67da:	2500      	movs	r5, #0
    67dc:	2800      	cmp	r0, #0
    67de:	d009      	beq.n	67f4 <__aeabi_dmul+0x4bc>
    67e0:	220f      	movs	r2, #15
    67e2:	2500      	movs	r5, #0
    67e4:	401a      	ands	r2, r3
    67e6:	001c      	movs	r4, r3
    67e8:	2a04      	cmp	r2, #4
    67ea:	d1d8      	bne.n	679e <__aeabi_dmul+0x466>
    67ec:	0023      	movs	r3, r4
    67ee:	0768      	lsls	r0, r5, #29
    67f0:	026d      	lsls	r5, r5, #9
    67f2:	0b2d      	lsrs	r5, r5, #12
    67f4:	2401      	movs	r4, #1
    67f6:	08db      	lsrs	r3, r3, #3
    67f8:	4303      	orrs	r3, r0
    67fa:	4698      	mov	r8, r3
    67fc:	400c      	ands	r4, r1
    67fe:	2300      	movs	r3, #0
    6800:	e600      	b.n	6404 <__aeabi_dmul+0xcc>
    6802:	2500      	movs	r5, #0
    6804:	e7e3      	b.n	67ce <__aeabi_dmul+0x496>
    6806:	2280      	movs	r2, #128	; 0x80
    6808:	2401      	movs	r4, #1
    680a:	0312      	lsls	r2, r2, #12
    680c:	4315      	orrs	r5, r2
    680e:	032d      	lsls	r5, r5, #12
    6810:	4698      	mov	r8, r3
    6812:	0b2d      	lsrs	r5, r5, #12
    6814:	400c      	ands	r4, r1
    6816:	4b04      	ldr	r3, [pc, #16]	; (6828 <__aeabi_dmul+0x4f0>)
    6818:	e5f4      	b.n	6404 <__aeabi_dmul+0xcc>
    681a:	46c0      	nop			; (mov r8, r8)
    681c:	000003ff 	.word	0x000003ff
    6820:	feffffff 	.word	0xfeffffff
    6824:	000007fe 	.word	0x000007fe
    6828:	000007ff 	.word	0x000007ff

0000682c <__aeabi_dsub>:
    682c:	b5f0      	push	{r4, r5, r6, r7, lr}
    682e:	4657      	mov	r7, sl
    6830:	464e      	mov	r6, r9
    6832:	4645      	mov	r5, r8
    6834:	b4e0      	push	{r5, r6, r7}
    6836:	000e      	movs	r6, r1
    6838:	0011      	movs	r1, r2
    683a:	0ff2      	lsrs	r2, r6, #31
    683c:	4692      	mov	sl, r2
    683e:	00c5      	lsls	r5, r0, #3
    6840:	0f42      	lsrs	r2, r0, #29
    6842:	0318      	lsls	r0, r3, #12
    6844:	0337      	lsls	r7, r6, #12
    6846:	0074      	lsls	r4, r6, #1
    6848:	0a40      	lsrs	r0, r0, #9
    684a:	0f4e      	lsrs	r6, r1, #29
    684c:	0a7f      	lsrs	r7, r7, #9
    684e:	4330      	orrs	r0, r6
    6850:	4ecf      	ldr	r6, [pc, #828]	; (6b90 <__aeabi_dsub+0x364>)
    6852:	4317      	orrs	r7, r2
    6854:	005a      	lsls	r2, r3, #1
    6856:	0d64      	lsrs	r4, r4, #21
    6858:	0d52      	lsrs	r2, r2, #21
    685a:	0fdb      	lsrs	r3, r3, #31
    685c:	00c9      	lsls	r1, r1, #3
    685e:	42b2      	cmp	r2, r6
    6860:	d100      	bne.n	6864 <__aeabi_dsub+0x38>
    6862:	e0e5      	b.n	6a30 <__aeabi_dsub+0x204>
    6864:	2601      	movs	r6, #1
    6866:	4073      	eors	r3, r6
    6868:	1aa6      	subs	r6, r4, r2
    686a:	46b4      	mov	ip, r6
    686c:	4553      	cmp	r3, sl
    686e:	d100      	bne.n	6872 <__aeabi_dsub+0x46>
    6870:	e0af      	b.n	69d2 <__aeabi_dsub+0x1a6>
    6872:	2e00      	cmp	r6, #0
    6874:	dc00      	bgt.n	6878 <__aeabi_dsub+0x4c>
    6876:	e10d      	b.n	6a94 <__aeabi_dsub+0x268>
    6878:	2a00      	cmp	r2, #0
    687a:	d13a      	bne.n	68f2 <__aeabi_dsub+0xc6>
    687c:	0003      	movs	r3, r0
    687e:	430b      	orrs	r3, r1
    6880:	d000      	beq.n	6884 <__aeabi_dsub+0x58>
    6882:	e0e4      	b.n	6a4e <__aeabi_dsub+0x222>
    6884:	076b      	lsls	r3, r5, #29
    6886:	d009      	beq.n	689c <__aeabi_dsub+0x70>
    6888:	230f      	movs	r3, #15
    688a:	402b      	ands	r3, r5
    688c:	2b04      	cmp	r3, #4
    688e:	d005      	beq.n	689c <__aeabi_dsub+0x70>
    6890:	1d2b      	adds	r3, r5, #4
    6892:	42ab      	cmp	r3, r5
    6894:	41ad      	sbcs	r5, r5
    6896:	426d      	negs	r5, r5
    6898:	197f      	adds	r7, r7, r5
    689a:	001d      	movs	r5, r3
    689c:	023b      	lsls	r3, r7, #8
    689e:	d400      	bmi.n	68a2 <__aeabi_dsub+0x76>
    68a0:	e088      	b.n	69b4 <__aeabi_dsub+0x188>
    68a2:	4bbb      	ldr	r3, [pc, #748]	; (6b90 <__aeabi_dsub+0x364>)
    68a4:	3401      	adds	r4, #1
    68a6:	429c      	cmp	r4, r3
    68a8:	d100      	bne.n	68ac <__aeabi_dsub+0x80>
    68aa:	e110      	b.n	6ace <__aeabi_dsub+0x2a2>
    68ac:	003a      	movs	r2, r7
    68ae:	4bb9      	ldr	r3, [pc, #740]	; (6b94 <__aeabi_dsub+0x368>)
    68b0:	4651      	mov	r1, sl
    68b2:	401a      	ands	r2, r3
    68b4:	2301      	movs	r3, #1
    68b6:	0750      	lsls	r0, r2, #29
    68b8:	08ed      	lsrs	r5, r5, #3
    68ba:	0252      	lsls	r2, r2, #9
    68bc:	0564      	lsls	r4, r4, #21
    68be:	4305      	orrs	r5, r0
    68c0:	0b12      	lsrs	r2, r2, #12
    68c2:	0d64      	lsrs	r4, r4, #21
    68c4:	400b      	ands	r3, r1
    68c6:	2100      	movs	r1, #0
    68c8:	0028      	movs	r0, r5
    68ca:	0312      	lsls	r2, r2, #12
    68cc:	0d0d      	lsrs	r5, r1, #20
    68ce:	0b12      	lsrs	r2, r2, #12
    68d0:	0564      	lsls	r4, r4, #21
    68d2:	052d      	lsls	r5, r5, #20
    68d4:	4315      	orrs	r5, r2
    68d6:	0862      	lsrs	r2, r4, #1
    68d8:	4caf      	ldr	r4, [pc, #700]	; (6b98 <__aeabi_dsub+0x36c>)
    68da:	07db      	lsls	r3, r3, #31
    68dc:	402c      	ands	r4, r5
    68de:	4314      	orrs	r4, r2
    68e0:	0064      	lsls	r4, r4, #1
    68e2:	0864      	lsrs	r4, r4, #1
    68e4:	431c      	orrs	r4, r3
    68e6:	0021      	movs	r1, r4
    68e8:	bc1c      	pop	{r2, r3, r4}
    68ea:	4690      	mov	r8, r2
    68ec:	4699      	mov	r9, r3
    68ee:	46a2      	mov	sl, r4
    68f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    68f2:	4ba7      	ldr	r3, [pc, #668]	; (6b90 <__aeabi_dsub+0x364>)
    68f4:	429c      	cmp	r4, r3
    68f6:	d0c5      	beq.n	6884 <__aeabi_dsub+0x58>
    68f8:	2380      	movs	r3, #128	; 0x80
    68fa:	041b      	lsls	r3, r3, #16
    68fc:	4318      	orrs	r0, r3
    68fe:	4663      	mov	r3, ip
    6900:	2b38      	cmp	r3, #56	; 0x38
    6902:	dd00      	ble.n	6906 <__aeabi_dsub+0xda>
    6904:	e0fd      	b.n	6b02 <__aeabi_dsub+0x2d6>
    6906:	2b1f      	cmp	r3, #31
    6908:	dd00      	ble.n	690c <__aeabi_dsub+0xe0>
    690a:	e130      	b.n	6b6e <__aeabi_dsub+0x342>
    690c:	4662      	mov	r2, ip
    690e:	2320      	movs	r3, #32
    6910:	1a9b      	subs	r3, r3, r2
    6912:	0002      	movs	r2, r0
    6914:	409a      	lsls	r2, r3
    6916:	4666      	mov	r6, ip
    6918:	4690      	mov	r8, r2
    691a:	000a      	movs	r2, r1
    691c:	4099      	lsls	r1, r3
    691e:	40f2      	lsrs	r2, r6
    6920:	4646      	mov	r6, r8
    6922:	1e4b      	subs	r3, r1, #1
    6924:	4199      	sbcs	r1, r3
    6926:	4332      	orrs	r2, r6
    6928:	4311      	orrs	r1, r2
    692a:	4663      	mov	r3, ip
    692c:	0002      	movs	r2, r0
    692e:	40da      	lsrs	r2, r3
    6930:	1a69      	subs	r1, r5, r1
    6932:	428d      	cmp	r5, r1
    6934:	419b      	sbcs	r3, r3
    6936:	000d      	movs	r5, r1
    6938:	1aba      	subs	r2, r7, r2
    693a:	425b      	negs	r3, r3
    693c:	1ad7      	subs	r7, r2, r3
    693e:	023b      	lsls	r3, r7, #8
    6940:	d535      	bpl.n	69ae <__aeabi_dsub+0x182>
    6942:	027a      	lsls	r2, r7, #9
    6944:	0a53      	lsrs	r3, r2, #9
    6946:	4698      	mov	r8, r3
    6948:	4643      	mov	r3, r8
    694a:	2b00      	cmp	r3, #0
    694c:	d100      	bne.n	6950 <__aeabi_dsub+0x124>
    694e:	e0c4      	b.n	6ada <__aeabi_dsub+0x2ae>
    6950:	4640      	mov	r0, r8
    6952:	f000 fb8f 	bl	7074 <__clzsi2>
    6956:	0003      	movs	r3, r0
    6958:	3b08      	subs	r3, #8
    695a:	2b1f      	cmp	r3, #31
    695c:	dd00      	ble.n	6960 <__aeabi_dsub+0x134>
    695e:	e0c5      	b.n	6aec <__aeabi_dsub+0x2c0>
    6960:	2220      	movs	r2, #32
    6962:	0029      	movs	r1, r5
    6964:	1ad2      	subs	r2, r2, r3
    6966:	4647      	mov	r7, r8
    6968:	40d1      	lsrs	r1, r2
    696a:	409f      	lsls	r7, r3
    696c:	000a      	movs	r2, r1
    696e:	409d      	lsls	r5, r3
    6970:	433a      	orrs	r2, r7
    6972:	429c      	cmp	r4, r3
    6974:	dd00      	ble.n	6978 <__aeabi_dsub+0x14c>
    6976:	e0c0      	b.n	6afa <__aeabi_dsub+0x2ce>
    6978:	1b1c      	subs	r4, r3, r4
    697a:	1c63      	adds	r3, r4, #1
    697c:	2b1f      	cmp	r3, #31
    697e:	dd00      	ble.n	6982 <__aeabi_dsub+0x156>
    6980:	e0e4      	b.n	6b4c <__aeabi_dsub+0x320>
    6982:	2120      	movs	r1, #32
    6984:	0014      	movs	r4, r2
    6986:	0028      	movs	r0, r5
    6988:	1ac9      	subs	r1, r1, r3
    698a:	40d8      	lsrs	r0, r3
    698c:	408c      	lsls	r4, r1
    698e:	408d      	lsls	r5, r1
    6990:	4304      	orrs	r4, r0
    6992:	40da      	lsrs	r2, r3
    6994:	1e68      	subs	r0, r5, #1
    6996:	4185      	sbcs	r5, r0
    6998:	0017      	movs	r7, r2
    699a:	4325      	orrs	r5, r4
    699c:	2400      	movs	r4, #0
    699e:	e771      	b.n	6884 <__aeabi_dsub+0x58>
    69a0:	4642      	mov	r2, r8
    69a2:	4663      	mov	r3, ip
    69a4:	431a      	orrs	r2, r3
    69a6:	d100      	bne.n	69aa <__aeabi_dsub+0x17e>
    69a8:	e24c      	b.n	6e44 <__aeabi_dsub+0x618>
    69aa:	4667      	mov	r7, ip
    69ac:	4645      	mov	r5, r8
    69ae:	076b      	lsls	r3, r5, #29
    69b0:	d000      	beq.n	69b4 <__aeabi_dsub+0x188>
    69b2:	e769      	b.n	6888 <__aeabi_dsub+0x5c>
    69b4:	2301      	movs	r3, #1
    69b6:	4651      	mov	r1, sl
    69b8:	0778      	lsls	r0, r7, #29
    69ba:	08ed      	lsrs	r5, r5, #3
    69bc:	08fa      	lsrs	r2, r7, #3
    69be:	400b      	ands	r3, r1
    69c0:	4305      	orrs	r5, r0
    69c2:	4973      	ldr	r1, [pc, #460]	; (6b90 <__aeabi_dsub+0x364>)
    69c4:	428c      	cmp	r4, r1
    69c6:	d038      	beq.n	6a3a <__aeabi_dsub+0x20e>
    69c8:	0312      	lsls	r2, r2, #12
    69ca:	0564      	lsls	r4, r4, #21
    69cc:	0b12      	lsrs	r2, r2, #12
    69ce:	0d64      	lsrs	r4, r4, #21
    69d0:	e779      	b.n	68c6 <__aeabi_dsub+0x9a>
    69d2:	2e00      	cmp	r6, #0
    69d4:	dc00      	bgt.n	69d8 <__aeabi_dsub+0x1ac>
    69d6:	e09a      	b.n	6b0e <__aeabi_dsub+0x2e2>
    69d8:	2a00      	cmp	r2, #0
    69da:	d047      	beq.n	6a6c <__aeabi_dsub+0x240>
    69dc:	4a6c      	ldr	r2, [pc, #432]	; (6b90 <__aeabi_dsub+0x364>)
    69de:	4294      	cmp	r4, r2
    69e0:	d100      	bne.n	69e4 <__aeabi_dsub+0x1b8>
    69e2:	e74f      	b.n	6884 <__aeabi_dsub+0x58>
    69e4:	2280      	movs	r2, #128	; 0x80
    69e6:	0412      	lsls	r2, r2, #16
    69e8:	4310      	orrs	r0, r2
    69ea:	4662      	mov	r2, ip
    69ec:	2a38      	cmp	r2, #56	; 0x38
    69ee:	dc00      	bgt.n	69f2 <__aeabi_dsub+0x1c6>
    69f0:	e108      	b.n	6c04 <__aeabi_dsub+0x3d8>
    69f2:	4301      	orrs	r1, r0
    69f4:	1e48      	subs	r0, r1, #1
    69f6:	4181      	sbcs	r1, r0
    69f8:	2200      	movs	r2, #0
    69fa:	b2c9      	uxtb	r1, r1
    69fc:	1949      	adds	r1, r1, r5
    69fe:	19d2      	adds	r2, r2, r7
    6a00:	42a9      	cmp	r1, r5
    6a02:	41bf      	sbcs	r7, r7
    6a04:	000d      	movs	r5, r1
    6a06:	427f      	negs	r7, r7
    6a08:	18bf      	adds	r7, r7, r2
    6a0a:	023a      	lsls	r2, r7, #8
    6a0c:	d400      	bmi.n	6a10 <__aeabi_dsub+0x1e4>
    6a0e:	e142      	b.n	6c96 <__aeabi_dsub+0x46a>
    6a10:	4a5f      	ldr	r2, [pc, #380]	; (6b90 <__aeabi_dsub+0x364>)
    6a12:	3401      	adds	r4, #1
    6a14:	4294      	cmp	r4, r2
    6a16:	d100      	bne.n	6a1a <__aeabi_dsub+0x1ee>
    6a18:	e14e      	b.n	6cb8 <__aeabi_dsub+0x48c>
    6a1a:	2001      	movs	r0, #1
    6a1c:	4a5d      	ldr	r2, [pc, #372]	; (6b94 <__aeabi_dsub+0x368>)
    6a1e:	0869      	lsrs	r1, r5, #1
    6a20:	403a      	ands	r2, r7
    6a22:	4028      	ands	r0, r5
    6a24:	4308      	orrs	r0, r1
    6a26:	07d5      	lsls	r5, r2, #31
    6a28:	4305      	orrs	r5, r0
    6a2a:	0857      	lsrs	r7, r2, #1
    6a2c:	469a      	mov	sl, r3
    6a2e:	e729      	b.n	6884 <__aeabi_dsub+0x58>
    6a30:	0006      	movs	r6, r0
    6a32:	430e      	orrs	r6, r1
    6a34:	d000      	beq.n	6a38 <__aeabi_dsub+0x20c>
    6a36:	e717      	b.n	6868 <__aeabi_dsub+0x3c>
    6a38:	e714      	b.n	6864 <__aeabi_dsub+0x38>
    6a3a:	0029      	movs	r1, r5
    6a3c:	4311      	orrs	r1, r2
    6a3e:	d100      	bne.n	6a42 <__aeabi_dsub+0x216>
    6a40:	e1f9      	b.n	6e36 <__aeabi_dsub+0x60a>
    6a42:	2180      	movs	r1, #128	; 0x80
    6a44:	0309      	lsls	r1, r1, #12
    6a46:	430a      	orrs	r2, r1
    6a48:	0312      	lsls	r2, r2, #12
    6a4a:	0b12      	lsrs	r2, r2, #12
    6a4c:	e73b      	b.n	68c6 <__aeabi_dsub+0x9a>
    6a4e:	2301      	movs	r3, #1
    6a50:	425b      	negs	r3, r3
    6a52:	4698      	mov	r8, r3
    6a54:	44c4      	add	ip, r8
    6a56:	4663      	mov	r3, ip
    6a58:	2b00      	cmp	r3, #0
    6a5a:	d172      	bne.n	6b42 <__aeabi_dsub+0x316>
    6a5c:	1a69      	subs	r1, r5, r1
    6a5e:	428d      	cmp	r5, r1
    6a60:	419b      	sbcs	r3, r3
    6a62:	1a3f      	subs	r7, r7, r0
    6a64:	425b      	negs	r3, r3
    6a66:	1aff      	subs	r7, r7, r3
    6a68:	000d      	movs	r5, r1
    6a6a:	e768      	b.n	693e <__aeabi_dsub+0x112>
    6a6c:	0002      	movs	r2, r0
    6a6e:	430a      	orrs	r2, r1
    6a70:	d100      	bne.n	6a74 <__aeabi_dsub+0x248>
    6a72:	e707      	b.n	6884 <__aeabi_dsub+0x58>
    6a74:	2201      	movs	r2, #1
    6a76:	4252      	negs	r2, r2
    6a78:	4690      	mov	r8, r2
    6a7a:	44c4      	add	ip, r8
    6a7c:	4662      	mov	r2, ip
    6a7e:	2a00      	cmp	r2, #0
    6a80:	d000      	beq.n	6a84 <__aeabi_dsub+0x258>
    6a82:	e0e6      	b.n	6c52 <__aeabi_dsub+0x426>
    6a84:	1869      	adds	r1, r5, r1
    6a86:	42a9      	cmp	r1, r5
    6a88:	41b6      	sbcs	r6, r6
    6a8a:	183f      	adds	r7, r7, r0
    6a8c:	4276      	negs	r6, r6
    6a8e:	19f7      	adds	r7, r6, r7
    6a90:	000d      	movs	r5, r1
    6a92:	e7ba      	b.n	6a0a <__aeabi_dsub+0x1de>
    6a94:	2e00      	cmp	r6, #0
    6a96:	d000      	beq.n	6a9a <__aeabi_dsub+0x26e>
    6a98:	e080      	b.n	6b9c <__aeabi_dsub+0x370>
    6a9a:	1c62      	adds	r2, r4, #1
    6a9c:	0552      	lsls	r2, r2, #21
    6a9e:	0d52      	lsrs	r2, r2, #21
    6aa0:	2a01      	cmp	r2, #1
    6aa2:	dc00      	bgt.n	6aa6 <__aeabi_dsub+0x27a>
    6aa4:	e0f9      	b.n	6c9a <__aeabi_dsub+0x46e>
    6aa6:	1a6a      	subs	r2, r5, r1
    6aa8:	4691      	mov	r9, r2
    6aaa:	454d      	cmp	r5, r9
    6aac:	41b6      	sbcs	r6, r6
    6aae:	1a3a      	subs	r2, r7, r0
    6ab0:	4276      	negs	r6, r6
    6ab2:	1b92      	subs	r2, r2, r6
    6ab4:	4690      	mov	r8, r2
    6ab6:	0212      	lsls	r2, r2, #8
    6ab8:	d400      	bmi.n	6abc <__aeabi_dsub+0x290>
    6aba:	e099      	b.n	6bf0 <__aeabi_dsub+0x3c4>
    6abc:	1b4d      	subs	r5, r1, r5
    6abe:	42a9      	cmp	r1, r5
    6ac0:	4189      	sbcs	r1, r1
    6ac2:	1bc7      	subs	r7, r0, r7
    6ac4:	4249      	negs	r1, r1
    6ac6:	1a7a      	subs	r2, r7, r1
    6ac8:	4690      	mov	r8, r2
    6aca:	469a      	mov	sl, r3
    6acc:	e73c      	b.n	6948 <__aeabi_dsub+0x11c>
    6ace:	4652      	mov	r2, sl
    6ad0:	2301      	movs	r3, #1
    6ad2:	2500      	movs	r5, #0
    6ad4:	4013      	ands	r3, r2
    6ad6:	2200      	movs	r2, #0
    6ad8:	e6f5      	b.n	68c6 <__aeabi_dsub+0x9a>
    6ada:	0028      	movs	r0, r5
    6adc:	f000 faca 	bl	7074 <__clzsi2>
    6ae0:	3020      	adds	r0, #32
    6ae2:	0003      	movs	r3, r0
    6ae4:	3b08      	subs	r3, #8
    6ae6:	2b1f      	cmp	r3, #31
    6ae8:	dc00      	bgt.n	6aec <__aeabi_dsub+0x2c0>
    6aea:	e739      	b.n	6960 <__aeabi_dsub+0x134>
    6aec:	002a      	movs	r2, r5
    6aee:	3828      	subs	r0, #40	; 0x28
    6af0:	4082      	lsls	r2, r0
    6af2:	2500      	movs	r5, #0
    6af4:	429c      	cmp	r4, r3
    6af6:	dc00      	bgt.n	6afa <__aeabi_dsub+0x2ce>
    6af8:	e73e      	b.n	6978 <__aeabi_dsub+0x14c>
    6afa:	4f26      	ldr	r7, [pc, #152]	; (6b94 <__aeabi_dsub+0x368>)
    6afc:	1ae4      	subs	r4, r4, r3
    6afe:	4017      	ands	r7, r2
    6b00:	e6c0      	b.n	6884 <__aeabi_dsub+0x58>
    6b02:	4301      	orrs	r1, r0
    6b04:	1e48      	subs	r0, r1, #1
    6b06:	4181      	sbcs	r1, r0
    6b08:	2200      	movs	r2, #0
    6b0a:	b2c9      	uxtb	r1, r1
    6b0c:	e710      	b.n	6930 <__aeabi_dsub+0x104>
    6b0e:	2e00      	cmp	r6, #0
    6b10:	d000      	beq.n	6b14 <__aeabi_dsub+0x2e8>
    6b12:	e0f1      	b.n	6cf8 <__aeabi_dsub+0x4cc>
    6b14:	1c62      	adds	r2, r4, #1
    6b16:	4694      	mov	ip, r2
    6b18:	0552      	lsls	r2, r2, #21
    6b1a:	0d52      	lsrs	r2, r2, #21
    6b1c:	2a01      	cmp	r2, #1
    6b1e:	dc00      	bgt.n	6b22 <__aeabi_dsub+0x2f6>
    6b20:	e0a0      	b.n	6c64 <__aeabi_dsub+0x438>
    6b22:	4a1b      	ldr	r2, [pc, #108]	; (6b90 <__aeabi_dsub+0x364>)
    6b24:	4594      	cmp	ip, r2
    6b26:	d100      	bne.n	6b2a <__aeabi_dsub+0x2fe>
    6b28:	e0c5      	b.n	6cb6 <__aeabi_dsub+0x48a>
    6b2a:	1869      	adds	r1, r5, r1
    6b2c:	42a9      	cmp	r1, r5
    6b2e:	4192      	sbcs	r2, r2
    6b30:	183f      	adds	r7, r7, r0
    6b32:	4252      	negs	r2, r2
    6b34:	19d2      	adds	r2, r2, r7
    6b36:	0849      	lsrs	r1, r1, #1
    6b38:	07d5      	lsls	r5, r2, #31
    6b3a:	430d      	orrs	r5, r1
    6b3c:	0857      	lsrs	r7, r2, #1
    6b3e:	4664      	mov	r4, ip
    6b40:	e6a0      	b.n	6884 <__aeabi_dsub+0x58>
    6b42:	4b13      	ldr	r3, [pc, #76]	; (6b90 <__aeabi_dsub+0x364>)
    6b44:	429c      	cmp	r4, r3
    6b46:	d000      	beq.n	6b4a <__aeabi_dsub+0x31e>
    6b48:	e6d9      	b.n	68fe <__aeabi_dsub+0xd2>
    6b4a:	e69b      	b.n	6884 <__aeabi_dsub+0x58>
    6b4c:	0011      	movs	r1, r2
    6b4e:	3c1f      	subs	r4, #31
    6b50:	40e1      	lsrs	r1, r4
    6b52:	000c      	movs	r4, r1
    6b54:	2b20      	cmp	r3, #32
    6b56:	d100      	bne.n	6b5a <__aeabi_dsub+0x32e>
    6b58:	e080      	b.n	6c5c <__aeabi_dsub+0x430>
    6b5a:	2140      	movs	r1, #64	; 0x40
    6b5c:	1acb      	subs	r3, r1, r3
    6b5e:	409a      	lsls	r2, r3
    6b60:	4315      	orrs	r5, r2
    6b62:	1e6a      	subs	r2, r5, #1
    6b64:	4195      	sbcs	r5, r2
    6b66:	2700      	movs	r7, #0
    6b68:	4325      	orrs	r5, r4
    6b6a:	2400      	movs	r4, #0
    6b6c:	e71f      	b.n	69ae <__aeabi_dsub+0x182>
    6b6e:	4663      	mov	r3, ip
    6b70:	0002      	movs	r2, r0
    6b72:	3b20      	subs	r3, #32
    6b74:	40da      	lsrs	r2, r3
    6b76:	4663      	mov	r3, ip
    6b78:	2b20      	cmp	r3, #32
    6b7a:	d071      	beq.n	6c60 <__aeabi_dsub+0x434>
    6b7c:	2340      	movs	r3, #64	; 0x40
    6b7e:	4666      	mov	r6, ip
    6b80:	1b9b      	subs	r3, r3, r6
    6b82:	4098      	lsls	r0, r3
    6b84:	4301      	orrs	r1, r0
    6b86:	1e48      	subs	r0, r1, #1
    6b88:	4181      	sbcs	r1, r0
    6b8a:	4311      	orrs	r1, r2
    6b8c:	2200      	movs	r2, #0
    6b8e:	e6cf      	b.n	6930 <__aeabi_dsub+0x104>
    6b90:	000007ff 	.word	0x000007ff
    6b94:	ff7fffff 	.word	0xff7fffff
    6b98:	800fffff 	.word	0x800fffff
    6b9c:	2c00      	cmp	r4, #0
    6b9e:	d048      	beq.n	6c32 <__aeabi_dsub+0x406>
    6ba0:	4cca      	ldr	r4, [pc, #808]	; (6ecc <__aeabi_dsub+0x6a0>)
    6ba2:	42a2      	cmp	r2, r4
    6ba4:	d100      	bne.n	6ba8 <__aeabi_dsub+0x37c>
    6ba6:	e0a2      	b.n	6cee <__aeabi_dsub+0x4c2>
    6ba8:	4274      	negs	r4, r6
    6baa:	46a1      	mov	r9, r4
    6bac:	2480      	movs	r4, #128	; 0x80
    6bae:	0424      	lsls	r4, r4, #16
    6bb0:	4327      	orrs	r7, r4
    6bb2:	464c      	mov	r4, r9
    6bb4:	2c38      	cmp	r4, #56	; 0x38
    6bb6:	dd00      	ble.n	6bba <__aeabi_dsub+0x38e>
    6bb8:	e0db      	b.n	6d72 <__aeabi_dsub+0x546>
    6bba:	2c1f      	cmp	r4, #31
    6bbc:	dd00      	ble.n	6bc0 <__aeabi_dsub+0x394>
    6bbe:	e144      	b.n	6e4a <__aeabi_dsub+0x61e>
    6bc0:	464e      	mov	r6, r9
    6bc2:	2420      	movs	r4, #32
    6bc4:	1ba4      	subs	r4, r4, r6
    6bc6:	003e      	movs	r6, r7
    6bc8:	40a6      	lsls	r6, r4
    6bca:	46a2      	mov	sl, r4
    6bcc:	46b0      	mov	r8, r6
    6bce:	464c      	mov	r4, r9
    6bd0:	002e      	movs	r6, r5
    6bd2:	40e6      	lsrs	r6, r4
    6bd4:	46b4      	mov	ip, r6
    6bd6:	4646      	mov	r6, r8
    6bd8:	4664      	mov	r4, ip
    6bda:	4326      	orrs	r6, r4
    6bdc:	4654      	mov	r4, sl
    6bde:	40a5      	lsls	r5, r4
    6be0:	1e6c      	subs	r4, r5, #1
    6be2:	41a5      	sbcs	r5, r4
    6be4:	0034      	movs	r4, r6
    6be6:	432c      	orrs	r4, r5
    6be8:	464d      	mov	r5, r9
    6bea:	40ef      	lsrs	r7, r5
    6bec:	1b0d      	subs	r5, r1, r4
    6bee:	e028      	b.n	6c42 <__aeabi_dsub+0x416>
    6bf0:	464a      	mov	r2, r9
    6bf2:	4643      	mov	r3, r8
    6bf4:	464d      	mov	r5, r9
    6bf6:	431a      	orrs	r2, r3
    6bf8:	d000      	beq.n	6bfc <__aeabi_dsub+0x3d0>
    6bfa:	e6a5      	b.n	6948 <__aeabi_dsub+0x11c>
    6bfc:	2300      	movs	r3, #0
    6bfe:	2400      	movs	r4, #0
    6c00:	2500      	movs	r5, #0
    6c02:	e6de      	b.n	69c2 <__aeabi_dsub+0x196>
    6c04:	2a1f      	cmp	r2, #31
    6c06:	dc5a      	bgt.n	6cbe <__aeabi_dsub+0x492>
    6c08:	4666      	mov	r6, ip
    6c0a:	2220      	movs	r2, #32
    6c0c:	1b92      	subs	r2, r2, r6
    6c0e:	0006      	movs	r6, r0
    6c10:	4096      	lsls	r6, r2
    6c12:	4691      	mov	r9, r2
    6c14:	46b0      	mov	r8, r6
    6c16:	4662      	mov	r2, ip
    6c18:	000e      	movs	r6, r1
    6c1a:	40d6      	lsrs	r6, r2
    6c1c:	4642      	mov	r2, r8
    6c1e:	4316      	orrs	r6, r2
    6c20:	464a      	mov	r2, r9
    6c22:	4091      	lsls	r1, r2
    6c24:	1e4a      	subs	r2, r1, #1
    6c26:	4191      	sbcs	r1, r2
    6c28:	0002      	movs	r2, r0
    6c2a:	4660      	mov	r0, ip
    6c2c:	4331      	orrs	r1, r6
    6c2e:	40c2      	lsrs	r2, r0
    6c30:	e6e4      	b.n	69fc <__aeabi_dsub+0x1d0>
    6c32:	003c      	movs	r4, r7
    6c34:	432c      	orrs	r4, r5
    6c36:	d05a      	beq.n	6cee <__aeabi_dsub+0x4c2>
    6c38:	43f4      	mvns	r4, r6
    6c3a:	46a1      	mov	r9, r4
    6c3c:	2c00      	cmp	r4, #0
    6c3e:	d152      	bne.n	6ce6 <__aeabi_dsub+0x4ba>
    6c40:	1b4d      	subs	r5, r1, r5
    6c42:	42a9      	cmp	r1, r5
    6c44:	4189      	sbcs	r1, r1
    6c46:	1bc7      	subs	r7, r0, r7
    6c48:	4249      	negs	r1, r1
    6c4a:	1a7f      	subs	r7, r7, r1
    6c4c:	0014      	movs	r4, r2
    6c4e:	469a      	mov	sl, r3
    6c50:	e675      	b.n	693e <__aeabi_dsub+0x112>
    6c52:	4a9e      	ldr	r2, [pc, #632]	; (6ecc <__aeabi_dsub+0x6a0>)
    6c54:	4294      	cmp	r4, r2
    6c56:	d000      	beq.n	6c5a <__aeabi_dsub+0x42e>
    6c58:	e6c7      	b.n	69ea <__aeabi_dsub+0x1be>
    6c5a:	e613      	b.n	6884 <__aeabi_dsub+0x58>
    6c5c:	2200      	movs	r2, #0
    6c5e:	e77f      	b.n	6b60 <__aeabi_dsub+0x334>
    6c60:	2000      	movs	r0, #0
    6c62:	e78f      	b.n	6b84 <__aeabi_dsub+0x358>
    6c64:	2c00      	cmp	r4, #0
    6c66:	d000      	beq.n	6c6a <__aeabi_dsub+0x43e>
    6c68:	e0c8      	b.n	6dfc <__aeabi_dsub+0x5d0>
    6c6a:	003b      	movs	r3, r7
    6c6c:	432b      	orrs	r3, r5
    6c6e:	d100      	bne.n	6c72 <__aeabi_dsub+0x446>
    6c70:	e10f      	b.n	6e92 <__aeabi_dsub+0x666>
    6c72:	0003      	movs	r3, r0
    6c74:	430b      	orrs	r3, r1
    6c76:	d100      	bne.n	6c7a <__aeabi_dsub+0x44e>
    6c78:	e604      	b.n	6884 <__aeabi_dsub+0x58>
    6c7a:	1869      	adds	r1, r5, r1
    6c7c:	42a9      	cmp	r1, r5
    6c7e:	419b      	sbcs	r3, r3
    6c80:	183f      	adds	r7, r7, r0
    6c82:	425b      	negs	r3, r3
    6c84:	19df      	adds	r7, r3, r7
    6c86:	023b      	lsls	r3, r7, #8
    6c88:	d400      	bmi.n	6c8c <__aeabi_dsub+0x460>
    6c8a:	e11a      	b.n	6ec2 <__aeabi_dsub+0x696>
    6c8c:	4b90      	ldr	r3, [pc, #576]	; (6ed0 <__aeabi_dsub+0x6a4>)
    6c8e:	000d      	movs	r5, r1
    6c90:	401f      	ands	r7, r3
    6c92:	4664      	mov	r4, ip
    6c94:	e5f6      	b.n	6884 <__aeabi_dsub+0x58>
    6c96:	469a      	mov	sl, r3
    6c98:	e689      	b.n	69ae <__aeabi_dsub+0x182>
    6c9a:	003a      	movs	r2, r7
    6c9c:	432a      	orrs	r2, r5
    6c9e:	2c00      	cmp	r4, #0
    6ca0:	d15c      	bne.n	6d5c <__aeabi_dsub+0x530>
    6ca2:	2a00      	cmp	r2, #0
    6ca4:	d175      	bne.n	6d92 <__aeabi_dsub+0x566>
    6ca6:	0002      	movs	r2, r0
    6ca8:	430a      	orrs	r2, r1
    6caa:	d100      	bne.n	6cae <__aeabi_dsub+0x482>
    6cac:	e0ca      	b.n	6e44 <__aeabi_dsub+0x618>
    6cae:	0007      	movs	r7, r0
    6cb0:	000d      	movs	r5, r1
    6cb2:	469a      	mov	sl, r3
    6cb4:	e5e6      	b.n	6884 <__aeabi_dsub+0x58>
    6cb6:	4664      	mov	r4, ip
    6cb8:	2200      	movs	r2, #0
    6cba:	2500      	movs	r5, #0
    6cbc:	e681      	b.n	69c2 <__aeabi_dsub+0x196>
    6cbe:	4662      	mov	r2, ip
    6cc0:	0006      	movs	r6, r0
    6cc2:	3a20      	subs	r2, #32
    6cc4:	40d6      	lsrs	r6, r2
    6cc6:	4662      	mov	r2, ip
    6cc8:	46b0      	mov	r8, r6
    6cca:	2a20      	cmp	r2, #32
    6ccc:	d100      	bne.n	6cd0 <__aeabi_dsub+0x4a4>
    6cce:	e0b7      	b.n	6e40 <__aeabi_dsub+0x614>
    6cd0:	2240      	movs	r2, #64	; 0x40
    6cd2:	4666      	mov	r6, ip
    6cd4:	1b92      	subs	r2, r2, r6
    6cd6:	4090      	lsls	r0, r2
    6cd8:	4301      	orrs	r1, r0
    6cda:	4642      	mov	r2, r8
    6cdc:	1e48      	subs	r0, r1, #1
    6cde:	4181      	sbcs	r1, r0
    6ce0:	4311      	orrs	r1, r2
    6ce2:	2200      	movs	r2, #0
    6ce4:	e68a      	b.n	69fc <__aeabi_dsub+0x1d0>
    6ce6:	4c79      	ldr	r4, [pc, #484]	; (6ecc <__aeabi_dsub+0x6a0>)
    6ce8:	42a2      	cmp	r2, r4
    6cea:	d000      	beq.n	6cee <__aeabi_dsub+0x4c2>
    6cec:	e761      	b.n	6bb2 <__aeabi_dsub+0x386>
    6cee:	0007      	movs	r7, r0
    6cf0:	000d      	movs	r5, r1
    6cf2:	0014      	movs	r4, r2
    6cf4:	469a      	mov	sl, r3
    6cf6:	e5c5      	b.n	6884 <__aeabi_dsub+0x58>
    6cf8:	2c00      	cmp	r4, #0
    6cfa:	d141      	bne.n	6d80 <__aeabi_dsub+0x554>
    6cfc:	003c      	movs	r4, r7
    6cfe:	432c      	orrs	r4, r5
    6d00:	d078      	beq.n	6df4 <__aeabi_dsub+0x5c8>
    6d02:	43f4      	mvns	r4, r6
    6d04:	46a1      	mov	r9, r4
    6d06:	2c00      	cmp	r4, #0
    6d08:	d020      	beq.n	6d4c <__aeabi_dsub+0x520>
    6d0a:	4c70      	ldr	r4, [pc, #448]	; (6ecc <__aeabi_dsub+0x6a0>)
    6d0c:	42a2      	cmp	r2, r4
    6d0e:	d071      	beq.n	6df4 <__aeabi_dsub+0x5c8>
    6d10:	464c      	mov	r4, r9
    6d12:	2c38      	cmp	r4, #56	; 0x38
    6d14:	dd00      	ble.n	6d18 <__aeabi_dsub+0x4ec>
    6d16:	e0b2      	b.n	6e7e <__aeabi_dsub+0x652>
    6d18:	2c1f      	cmp	r4, #31
    6d1a:	dd00      	ble.n	6d1e <__aeabi_dsub+0x4f2>
    6d1c:	e0bc      	b.n	6e98 <__aeabi_dsub+0x66c>
    6d1e:	2620      	movs	r6, #32
    6d20:	1b34      	subs	r4, r6, r4
    6d22:	46a2      	mov	sl, r4
    6d24:	003c      	movs	r4, r7
    6d26:	4656      	mov	r6, sl
    6d28:	40b4      	lsls	r4, r6
    6d2a:	464e      	mov	r6, r9
    6d2c:	46a0      	mov	r8, r4
    6d2e:	002c      	movs	r4, r5
    6d30:	40f4      	lsrs	r4, r6
    6d32:	46a4      	mov	ip, r4
    6d34:	4644      	mov	r4, r8
    6d36:	4666      	mov	r6, ip
    6d38:	4334      	orrs	r4, r6
    6d3a:	46a4      	mov	ip, r4
    6d3c:	4654      	mov	r4, sl
    6d3e:	40a5      	lsls	r5, r4
    6d40:	4664      	mov	r4, ip
    6d42:	1e6e      	subs	r6, r5, #1
    6d44:	41b5      	sbcs	r5, r6
    6d46:	4325      	orrs	r5, r4
    6d48:	464c      	mov	r4, r9
    6d4a:	40e7      	lsrs	r7, r4
    6d4c:	186d      	adds	r5, r5, r1
    6d4e:	428d      	cmp	r5, r1
    6d50:	4189      	sbcs	r1, r1
    6d52:	183f      	adds	r7, r7, r0
    6d54:	4249      	negs	r1, r1
    6d56:	19cf      	adds	r7, r1, r7
    6d58:	0014      	movs	r4, r2
    6d5a:	e656      	b.n	6a0a <__aeabi_dsub+0x1de>
    6d5c:	2a00      	cmp	r2, #0
    6d5e:	d12f      	bne.n	6dc0 <__aeabi_dsub+0x594>
    6d60:	0002      	movs	r2, r0
    6d62:	430a      	orrs	r2, r1
    6d64:	d100      	bne.n	6d68 <__aeabi_dsub+0x53c>
    6d66:	e084      	b.n	6e72 <__aeabi_dsub+0x646>
    6d68:	0007      	movs	r7, r0
    6d6a:	000d      	movs	r5, r1
    6d6c:	469a      	mov	sl, r3
    6d6e:	4c57      	ldr	r4, [pc, #348]	; (6ecc <__aeabi_dsub+0x6a0>)
    6d70:	e588      	b.n	6884 <__aeabi_dsub+0x58>
    6d72:	433d      	orrs	r5, r7
    6d74:	1e6f      	subs	r7, r5, #1
    6d76:	41bd      	sbcs	r5, r7
    6d78:	b2ec      	uxtb	r4, r5
    6d7a:	2700      	movs	r7, #0
    6d7c:	1b0d      	subs	r5, r1, r4
    6d7e:	e760      	b.n	6c42 <__aeabi_dsub+0x416>
    6d80:	4c52      	ldr	r4, [pc, #328]	; (6ecc <__aeabi_dsub+0x6a0>)
    6d82:	42a2      	cmp	r2, r4
    6d84:	d036      	beq.n	6df4 <__aeabi_dsub+0x5c8>
    6d86:	4274      	negs	r4, r6
    6d88:	2680      	movs	r6, #128	; 0x80
    6d8a:	0436      	lsls	r6, r6, #16
    6d8c:	46a1      	mov	r9, r4
    6d8e:	4337      	orrs	r7, r6
    6d90:	e7be      	b.n	6d10 <__aeabi_dsub+0x4e4>
    6d92:	0002      	movs	r2, r0
    6d94:	430a      	orrs	r2, r1
    6d96:	d100      	bne.n	6d9a <__aeabi_dsub+0x56e>
    6d98:	e574      	b.n	6884 <__aeabi_dsub+0x58>
    6d9a:	1a6a      	subs	r2, r5, r1
    6d9c:	4690      	mov	r8, r2
    6d9e:	4545      	cmp	r5, r8
    6da0:	41b6      	sbcs	r6, r6
    6da2:	1a3a      	subs	r2, r7, r0
    6da4:	4276      	negs	r6, r6
    6da6:	1b92      	subs	r2, r2, r6
    6da8:	4694      	mov	ip, r2
    6daa:	0212      	lsls	r2, r2, #8
    6dac:	d400      	bmi.n	6db0 <__aeabi_dsub+0x584>
    6dae:	e5f7      	b.n	69a0 <__aeabi_dsub+0x174>
    6db0:	1b4d      	subs	r5, r1, r5
    6db2:	42a9      	cmp	r1, r5
    6db4:	4189      	sbcs	r1, r1
    6db6:	1bc7      	subs	r7, r0, r7
    6db8:	4249      	negs	r1, r1
    6dba:	1a7f      	subs	r7, r7, r1
    6dbc:	469a      	mov	sl, r3
    6dbe:	e561      	b.n	6884 <__aeabi_dsub+0x58>
    6dc0:	0002      	movs	r2, r0
    6dc2:	430a      	orrs	r2, r1
    6dc4:	d03a      	beq.n	6e3c <__aeabi_dsub+0x610>
    6dc6:	08ed      	lsrs	r5, r5, #3
    6dc8:	077c      	lsls	r4, r7, #29
    6dca:	432c      	orrs	r4, r5
    6dcc:	2580      	movs	r5, #128	; 0x80
    6dce:	08fa      	lsrs	r2, r7, #3
    6dd0:	032d      	lsls	r5, r5, #12
    6dd2:	422a      	tst	r2, r5
    6dd4:	d008      	beq.n	6de8 <__aeabi_dsub+0x5bc>
    6dd6:	08c7      	lsrs	r7, r0, #3
    6dd8:	422f      	tst	r7, r5
    6dda:	d105      	bne.n	6de8 <__aeabi_dsub+0x5bc>
    6ddc:	0745      	lsls	r5, r0, #29
    6dde:	002c      	movs	r4, r5
    6de0:	003a      	movs	r2, r7
    6de2:	469a      	mov	sl, r3
    6de4:	08c9      	lsrs	r1, r1, #3
    6de6:	430c      	orrs	r4, r1
    6de8:	0f67      	lsrs	r7, r4, #29
    6dea:	00d2      	lsls	r2, r2, #3
    6dec:	00e5      	lsls	r5, r4, #3
    6dee:	4317      	orrs	r7, r2
    6df0:	4c36      	ldr	r4, [pc, #216]	; (6ecc <__aeabi_dsub+0x6a0>)
    6df2:	e547      	b.n	6884 <__aeabi_dsub+0x58>
    6df4:	0007      	movs	r7, r0
    6df6:	000d      	movs	r5, r1
    6df8:	0014      	movs	r4, r2
    6dfa:	e543      	b.n	6884 <__aeabi_dsub+0x58>
    6dfc:	003a      	movs	r2, r7
    6dfe:	432a      	orrs	r2, r5
    6e00:	d043      	beq.n	6e8a <__aeabi_dsub+0x65e>
    6e02:	0002      	movs	r2, r0
    6e04:	430a      	orrs	r2, r1
    6e06:	d019      	beq.n	6e3c <__aeabi_dsub+0x610>
    6e08:	08ed      	lsrs	r5, r5, #3
    6e0a:	077c      	lsls	r4, r7, #29
    6e0c:	432c      	orrs	r4, r5
    6e0e:	2580      	movs	r5, #128	; 0x80
    6e10:	08fa      	lsrs	r2, r7, #3
    6e12:	032d      	lsls	r5, r5, #12
    6e14:	422a      	tst	r2, r5
    6e16:	d007      	beq.n	6e28 <__aeabi_dsub+0x5fc>
    6e18:	08c6      	lsrs	r6, r0, #3
    6e1a:	422e      	tst	r6, r5
    6e1c:	d104      	bne.n	6e28 <__aeabi_dsub+0x5fc>
    6e1e:	0747      	lsls	r7, r0, #29
    6e20:	003c      	movs	r4, r7
    6e22:	0032      	movs	r2, r6
    6e24:	08c9      	lsrs	r1, r1, #3
    6e26:	430c      	orrs	r4, r1
    6e28:	00d7      	lsls	r7, r2, #3
    6e2a:	0f62      	lsrs	r2, r4, #29
    6e2c:	00e5      	lsls	r5, r4, #3
    6e2e:	4317      	orrs	r7, r2
    6e30:	469a      	mov	sl, r3
    6e32:	4c26      	ldr	r4, [pc, #152]	; (6ecc <__aeabi_dsub+0x6a0>)
    6e34:	e526      	b.n	6884 <__aeabi_dsub+0x58>
    6e36:	2200      	movs	r2, #0
    6e38:	2500      	movs	r5, #0
    6e3a:	e544      	b.n	68c6 <__aeabi_dsub+0x9a>
    6e3c:	4c23      	ldr	r4, [pc, #140]	; (6ecc <__aeabi_dsub+0x6a0>)
    6e3e:	e521      	b.n	6884 <__aeabi_dsub+0x58>
    6e40:	2000      	movs	r0, #0
    6e42:	e749      	b.n	6cd8 <__aeabi_dsub+0x4ac>
    6e44:	2300      	movs	r3, #0
    6e46:	2500      	movs	r5, #0
    6e48:	e5bb      	b.n	69c2 <__aeabi_dsub+0x196>
    6e4a:	464c      	mov	r4, r9
    6e4c:	003e      	movs	r6, r7
    6e4e:	3c20      	subs	r4, #32
    6e50:	40e6      	lsrs	r6, r4
    6e52:	464c      	mov	r4, r9
    6e54:	46b4      	mov	ip, r6
    6e56:	2c20      	cmp	r4, #32
    6e58:	d031      	beq.n	6ebe <__aeabi_dsub+0x692>
    6e5a:	2440      	movs	r4, #64	; 0x40
    6e5c:	464e      	mov	r6, r9
    6e5e:	1ba6      	subs	r6, r4, r6
    6e60:	40b7      	lsls	r7, r6
    6e62:	433d      	orrs	r5, r7
    6e64:	1e6c      	subs	r4, r5, #1
    6e66:	41a5      	sbcs	r5, r4
    6e68:	4664      	mov	r4, ip
    6e6a:	432c      	orrs	r4, r5
    6e6c:	2700      	movs	r7, #0
    6e6e:	1b0d      	subs	r5, r1, r4
    6e70:	e6e7      	b.n	6c42 <__aeabi_dsub+0x416>
    6e72:	2280      	movs	r2, #128	; 0x80
    6e74:	2300      	movs	r3, #0
    6e76:	0312      	lsls	r2, r2, #12
    6e78:	4c14      	ldr	r4, [pc, #80]	; (6ecc <__aeabi_dsub+0x6a0>)
    6e7a:	2500      	movs	r5, #0
    6e7c:	e5a1      	b.n	69c2 <__aeabi_dsub+0x196>
    6e7e:	433d      	orrs	r5, r7
    6e80:	1e6f      	subs	r7, r5, #1
    6e82:	41bd      	sbcs	r5, r7
    6e84:	2700      	movs	r7, #0
    6e86:	b2ed      	uxtb	r5, r5
    6e88:	e760      	b.n	6d4c <__aeabi_dsub+0x520>
    6e8a:	0007      	movs	r7, r0
    6e8c:	000d      	movs	r5, r1
    6e8e:	4c0f      	ldr	r4, [pc, #60]	; (6ecc <__aeabi_dsub+0x6a0>)
    6e90:	e4f8      	b.n	6884 <__aeabi_dsub+0x58>
    6e92:	0007      	movs	r7, r0
    6e94:	000d      	movs	r5, r1
    6e96:	e4f5      	b.n	6884 <__aeabi_dsub+0x58>
    6e98:	464e      	mov	r6, r9
    6e9a:	003c      	movs	r4, r7
    6e9c:	3e20      	subs	r6, #32
    6e9e:	40f4      	lsrs	r4, r6
    6ea0:	46a0      	mov	r8, r4
    6ea2:	464c      	mov	r4, r9
    6ea4:	2c20      	cmp	r4, #32
    6ea6:	d00e      	beq.n	6ec6 <__aeabi_dsub+0x69a>
    6ea8:	2440      	movs	r4, #64	; 0x40
    6eaa:	464e      	mov	r6, r9
    6eac:	1ba4      	subs	r4, r4, r6
    6eae:	40a7      	lsls	r7, r4
    6eb0:	433d      	orrs	r5, r7
    6eb2:	1e6f      	subs	r7, r5, #1
    6eb4:	41bd      	sbcs	r5, r7
    6eb6:	4644      	mov	r4, r8
    6eb8:	2700      	movs	r7, #0
    6eba:	4325      	orrs	r5, r4
    6ebc:	e746      	b.n	6d4c <__aeabi_dsub+0x520>
    6ebe:	2700      	movs	r7, #0
    6ec0:	e7cf      	b.n	6e62 <__aeabi_dsub+0x636>
    6ec2:	000d      	movs	r5, r1
    6ec4:	e573      	b.n	69ae <__aeabi_dsub+0x182>
    6ec6:	2700      	movs	r7, #0
    6ec8:	e7f2      	b.n	6eb0 <__aeabi_dsub+0x684>
    6eca:	46c0      	nop			; (mov r8, r8)
    6ecc:	000007ff 	.word	0x000007ff
    6ed0:	ff7fffff 	.word	0xff7fffff

00006ed4 <__aeabi_dcmpun>:
    6ed4:	b570      	push	{r4, r5, r6, lr}
    6ed6:	4e0e      	ldr	r6, [pc, #56]	; (6f10 <__aeabi_dcmpun+0x3c>)
    6ed8:	030c      	lsls	r4, r1, #12
    6eda:	031d      	lsls	r5, r3, #12
    6edc:	0049      	lsls	r1, r1, #1
    6ede:	005b      	lsls	r3, r3, #1
    6ee0:	0b24      	lsrs	r4, r4, #12
    6ee2:	0d49      	lsrs	r1, r1, #21
    6ee4:	0b2d      	lsrs	r5, r5, #12
    6ee6:	0d5b      	lsrs	r3, r3, #21
    6ee8:	42b1      	cmp	r1, r6
    6eea:	d004      	beq.n	6ef6 <__aeabi_dcmpun+0x22>
    6eec:	4908      	ldr	r1, [pc, #32]	; (6f10 <__aeabi_dcmpun+0x3c>)
    6eee:	2000      	movs	r0, #0
    6ef0:	428b      	cmp	r3, r1
    6ef2:	d008      	beq.n	6f06 <__aeabi_dcmpun+0x32>
    6ef4:	bd70      	pop	{r4, r5, r6, pc}
    6ef6:	4304      	orrs	r4, r0
    6ef8:	2001      	movs	r0, #1
    6efa:	2c00      	cmp	r4, #0
    6efc:	d1fa      	bne.n	6ef4 <__aeabi_dcmpun+0x20>
    6efe:	4904      	ldr	r1, [pc, #16]	; (6f10 <__aeabi_dcmpun+0x3c>)
    6f00:	2000      	movs	r0, #0
    6f02:	428b      	cmp	r3, r1
    6f04:	d1f6      	bne.n	6ef4 <__aeabi_dcmpun+0x20>
    6f06:	4315      	orrs	r5, r2
    6f08:	0028      	movs	r0, r5
    6f0a:	1e45      	subs	r5, r0, #1
    6f0c:	41a8      	sbcs	r0, r5
    6f0e:	e7f1      	b.n	6ef4 <__aeabi_dcmpun+0x20>
    6f10:	000007ff 	.word	0x000007ff

00006f14 <__aeabi_d2iz>:
    6f14:	030b      	lsls	r3, r1, #12
    6f16:	b530      	push	{r4, r5, lr}
    6f18:	4d13      	ldr	r5, [pc, #76]	; (6f68 <__aeabi_d2iz+0x54>)
    6f1a:	0b1a      	lsrs	r2, r3, #12
    6f1c:	004b      	lsls	r3, r1, #1
    6f1e:	0d5b      	lsrs	r3, r3, #21
    6f20:	0fc9      	lsrs	r1, r1, #31
    6f22:	2400      	movs	r4, #0
    6f24:	42ab      	cmp	r3, r5
    6f26:	dd11      	ble.n	6f4c <__aeabi_d2iz+0x38>
    6f28:	4c10      	ldr	r4, [pc, #64]	; (6f6c <__aeabi_d2iz+0x58>)
    6f2a:	42a3      	cmp	r3, r4
    6f2c:	dc10      	bgt.n	6f50 <__aeabi_d2iz+0x3c>
    6f2e:	2480      	movs	r4, #128	; 0x80
    6f30:	0364      	lsls	r4, r4, #13
    6f32:	4322      	orrs	r2, r4
    6f34:	4c0e      	ldr	r4, [pc, #56]	; (6f70 <__aeabi_d2iz+0x5c>)
    6f36:	1ae4      	subs	r4, r4, r3
    6f38:	2c1f      	cmp	r4, #31
    6f3a:	dd0c      	ble.n	6f56 <__aeabi_d2iz+0x42>
    6f3c:	480d      	ldr	r0, [pc, #52]	; (6f74 <__aeabi_d2iz+0x60>)
    6f3e:	1ac3      	subs	r3, r0, r3
    6f40:	40da      	lsrs	r2, r3
    6f42:	0013      	movs	r3, r2
    6f44:	425c      	negs	r4, r3
    6f46:	2900      	cmp	r1, #0
    6f48:	d100      	bne.n	6f4c <__aeabi_d2iz+0x38>
    6f4a:	001c      	movs	r4, r3
    6f4c:	0020      	movs	r0, r4
    6f4e:	bd30      	pop	{r4, r5, pc}
    6f50:	4b09      	ldr	r3, [pc, #36]	; (6f78 <__aeabi_d2iz+0x64>)
    6f52:	18cc      	adds	r4, r1, r3
    6f54:	e7fa      	b.n	6f4c <__aeabi_d2iz+0x38>
    6f56:	40e0      	lsrs	r0, r4
    6f58:	4c08      	ldr	r4, [pc, #32]	; (6f7c <__aeabi_d2iz+0x68>)
    6f5a:	46a4      	mov	ip, r4
    6f5c:	4463      	add	r3, ip
    6f5e:	409a      	lsls	r2, r3
    6f60:	0013      	movs	r3, r2
    6f62:	4303      	orrs	r3, r0
    6f64:	e7ee      	b.n	6f44 <__aeabi_d2iz+0x30>
    6f66:	46c0      	nop			; (mov r8, r8)
    6f68:	000003fe 	.word	0x000003fe
    6f6c:	0000041d 	.word	0x0000041d
    6f70:	00000433 	.word	0x00000433
    6f74:	00000413 	.word	0x00000413
    6f78:	7fffffff 	.word	0x7fffffff
    6f7c:	fffffbed 	.word	0xfffffbed

00006f80 <__aeabi_i2d>:
    6f80:	b570      	push	{r4, r5, r6, lr}
    6f82:	2800      	cmp	r0, #0
    6f84:	d030      	beq.n	6fe8 <__aeabi_i2d+0x68>
    6f86:	17c3      	asrs	r3, r0, #31
    6f88:	18c4      	adds	r4, r0, r3
    6f8a:	405c      	eors	r4, r3
    6f8c:	0fc5      	lsrs	r5, r0, #31
    6f8e:	0020      	movs	r0, r4
    6f90:	f000 f870 	bl	7074 <__clzsi2>
    6f94:	4b17      	ldr	r3, [pc, #92]	; (6ff4 <__aeabi_i2d+0x74>)
    6f96:	4a18      	ldr	r2, [pc, #96]	; (6ff8 <__aeabi_i2d+0x78>)
    6f98:	1a1b      	subs	r3, r3, r0
    6f9a:	1ad2      	subs	r2, r2, r3
    6f9c:	2a1f      	cmp	r2, #31
    6f9e:	dd18      	ble.n	6fd2 <__aeabi_i2d+0x52>
    6fa0:	4a16      	ldr	r2, [pc, #88]	; (6ffc <__aeabi_i2d+0x7c>)
    6fa2:	1ad2      	subs	r2, r2, r3
    6fa4:	4094      	lsls	r4, r2
    6fa6:	2200      	movs	r2, #0
    6fa8:	0324      	lsls	r4, r4, #12
    6faa:	055b      	lsls	r3, r3, #21
    6fac:	0b24      	lsrs	r4, r4, #12
    6fae:	0d5b      	lsrs	r3, r3, #21
    6fb0:	2100      	movs	r1, #0
    6fb2:	0010      	movs	r0, r2
    6fb4:	0324      	lsls	r4, r4, #12
    6fb6:	0d0a      	lsrs	r2, r1, #20
    6fb8:	0512      	lsls	r2, r2, #20
    6fba:	0b24      	lsrs	r4, r4, #12
    6fbc:	4314      	orrs	r4, r2
    6fbe:	4a10      	ldr	r2, [pc, #64]	; (7000 <__aeabi_i2d+0x80>)
    6fc0:	051b      	lsls	r3, r3, #20
    6fc2:	4014      	ands	r4, r2
    6fc4:	431c      	orrs	r4, r3
    6fc6:	0064      	lsls	r4, r4, #1
    6fc8:	07ed      	lsls	r5, r5, #31
    6fca:	0864      	lsrs	r4, r4, #1
    6fcc:	432c      	orrs	r4, r5
    6fce:	0021      	movs	r1, r4
    6fd0:	bd70      	pop	{r4, r5, r6, pc}
    6fd2:	0021      	movs	r1, r4
    6fd4:	4091      	lsls	r1, r2
    6fd6:	000a      	movs	r2, r1
    6fd8:	210b      	movs	r1, #11
    6fda:	1a08      	subs	r0, r1, r0
    6fdc:	40c4      	lsrs	r4, r0
    6fde:	055b      	lsls	r3, r3, #21
    6fe0:	0324      	lsls	r4, r4, #12
    6fe2:	0b24      	lsrs	r4, r4, #12
    6fe4:	0d5b      	lsrs	r3, r3, #21
    6fe6:	e7e3      	b.n	6fb0 <__aeabi_i2d+0x30>
    6fe8:	2500      	movs	r5, #0
    6fea:	2300      	movs	r3, #0
    6fec:	2400      	movs	r4, #0
    6fee:	2200      	movs	r2, #0
    6ff0:	e7de      	b.n	6fb0 <__aeabi_i2d+0x30>
    6ff2:	46c0      	nop			; (mov r8, r8)
    6ff4:	0000041e 	.word	0x0000041e
    6ff8:	00000433 	.word	0x00000433
    6ffc:	00000413 	.word	0x00000413
    7000:	800fffff 	.word	0x800fffff

00007004 <__aeabi_ui2d>:
    7004:	b570      	push	{r4, r5, r6, lr}
    7006:	1e05      	subs	r5, r0, #0
    7008:	d028      	beq.n	705c <__aeabi_ui2d+0x58>
    700a:	f000 f833 	bl	7074 <__clzsi2>
    700e:	4b15      	ldr	r3, [pc, #84]	; (7064 <__aeabi_ui2d+0x60>)
    7010:	4a15      	ldr	r2, [pc, #84]	; (7068 <__aeabi_ui2d+0x64>)
    7012:	1a1b      	subs	r3, r3, r0
    7014:	1ad2      	subs	r2, r2, r3
    7016:	2a1f      	cmp	r2, #31
    7018:	dd16      	ble.n	7048 <__aeabi_ui2d+0x44>
    701a:	002c      	movs	r4, r5
    701c:	4a13      	ldr	r2, [pc, #76]	; (706c <__aeabi_ui2d+0x68>)
    701e:	2500      	movs	r5, #0
    7020:	1ad2      	subs	r2, r2, r3
    7022:	4094      	lsls	r4, r2
    7024:	055a      	lsls	r2, r3, #21
    7026:	0324      	lsls	r4, r4, #12
    7028:	0b24      	lsrs	r4, r4, #12
    702a:	0d52      	lsrs	r2, r2, #21
    702c:	2100      	movs	r1, #0
    702e:	0324      	lsls	r4, r4, #12
    7030:	0d0b      	lsrs	r3, r1, #20
    7032:	0b24      	lsrs	r4, r4, #12
    7034:	051b      	lsls	r3, r3, #20
    7036:	4323      	orrs	r3, r4
    7038:	4c0d      	ldr	r4, [pc, #52]	; (7070 <__aeabi_ui2d+0x6c>)
    703a:	0512      	lsls	r2, r2, #20
    703c:	4023      	ands	r3, r4
    703e:	4313      	orrs	r3, r2
    7040:	005b      	lsls	r3, r3, #1
    7042:	0028      	movs	r0, r5
    7044:	0859      	lsrs	r1, r3, #1
    7046:	bd70      	pop	{r4, r5, r6, pc}
    7048:	210b      	movs	r1, #11
    704a:	002c      	movs	r4, r5
    704c:	1a08      	subs	r0, r1, r0
    704e:	40c4      	lsrs	r4, r0
    7050:	4095      	lsls	r5, r2
    7052:	0324      	lsls	r4, r4, #12
    7054:	055a      	lsls	r2, r3, #21
    7056:	0b24      	lsrs	r4, r4, #12
    7058:	0d52      	lsrs	r2, r2, #21
    705a:	e7e7      	b.n	702c <__aeabi_ui2d+0x28>
    705c:	2200      	movs	r2, #0
    705e:	2400      	movs	r4, #0
    7060:	e7e4      	b.n	702c <__aeabi_ui2d+0x28>
    7062:	46c0      	nop			; (mov r8, r8)
    7064:	0000041e 	.word	0x0000041e
    7068:	00000433 	.word	0x00000433
    706c:	00000413 	.word	0x00000413
    7070:	800fffff 	.word	0x800fffff

00007074 <__clzsi2>:
    7074:	211c      	movs	r1, #28
    7076:	2301      	movs	r3, #1
    7078:	041b      	lsls	r3, r3, #16
    707a:	4298      	cmp	r0, r3
    707c:	d301      	bcc.n	7082 <__clzsi2+0xe>
    707e:	0c00      	lsrs	r0, r0, #16
    7080:	3910      	subs	r1, #16
    7082:	0a1b      	lsrs	r3, r3, #8
    7084:	4298      	cmp	r0, r3
    7086:	d301      	bcc.n	708c <__clzsi2+0x18>
    7088:	0a00      	lsrs	r0, r0, #8
    708a:	3908      	subs	r1, #8
    708c:	091b      	lsrs	r3, r3, #4
    708e:	4298      	cmp	r0, r3
    7090:	d301      	bcc.n	7096 <__clzsi2+0x22>
    7092:	0900      	lsrs	r0, r0, #4
    7094:	3904      	subs	r1, #4
    7096:	a202      	add	r2, pc, #8	; (adr r2, 70a0 <__clzsi2+0x2c>)
    7098:	5c10      	ldrb	r0, [r2, r0]
    709a:	1840      	adds	r0, r0, r1
    709c:	4770      	bx	lr
    709e:	46c0      	nop			; (mov r8, r8)
    70a0:	02020304 	.word	0x02020304
    70a4:	01010101 	.word	0x01010101
	...
    70b0:	42000800 	.word	0x42000800
    70b4:	42000c00 	.word	0x42000c00
    70b8:	42001000 	.word	0x42001000
    70bc:	42001400 	.word	0x42001400
    70c0:	42001800 	.word	0x42001800
    70c4:	42001c00 	.word	0x42001c00

000070c8 <_tcc_gclk_ids>:
    70c8:	001b1a1a                                ....

000070cc <_tcc_apbcmasks>:
    70cc:	00000100 00000200 00000400              ............

000070d8 <_tcc_maxs>:
    70d8:	00ffffff 00ffffff 0000ffff              ............

000070e4 <_tcc_cc_nums>:
    70e4:	00020204                                ....

000070e8 <_tcc_ow_nums>:
    70e8:	00020408                                ....

000070ec <_tcc_intflag>:
    70ec:	00000001 00000002 00000004 00000008     ................
    70fc:	00001000 00002000 00004000 00008000     ..... ...@......
    710c:	00010000 00020000 00040000 00080000     ................
    711c:	42002c00 42003000 42003400 001c1c1b     .,.B.0.B.4.B....
    712c:	10000800 00002000 0c0b0a09 00000e0d     ..... ..........
    713c:	00001df2 00001dee 00001dee 00001e4c     ............L...
    714c:	00001e4c 00001e06 00001df8 00001e0c     L...............
    715c:	00001e3a 00001ed8 00001eb8 00001eb8     :...............
    716c:	00001f44 00001eca 00001ee6 00001ebc     D...............
    717c:	00001ef4 00001f34 00000003 20000140     ....4.......@.. 
    718c:	74206948 20736968 73207369 6576616c     Hi this is slave
    719c:	00000000 6f666542 72206572 00646165     ....Before read.
    71ac:	00006425 65746641 65722072 00006461     %d..After read..
    71bc:	00000043                                C...

000071c0 <_global_impure_ptr>:
    71c0:	2000000c 00464e49 00666e69 004e414e     ... INF.inf.NAN.
    71d0:	006e616e 31300030 35343332 39383736     nan.0.0123456789
    71e0:	44434241 30004645 34333231 38373635     ABCDEF.012345678
    71f0:	63626139 00666564 69666e49 7974696e     9abcdef.Infinity
    7200:	4e614e00 00000000                       .NaN....

00007208 <__sf_fake_stdin>:
	...

00007228 <__sf_fake_stdout>:
	...

00007248 <__sf_fake_stderr>:
	...
    7268:	49534f50 002e0058                       POSIX...

00007270 <__mprec_tens>:
    7270:	00000000 3ff00000 00000000 40240000     .......?......$@
    7280:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
    7290:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
    72a0:	00000000 412e8480 00000000 416312d0     .......A......cA
    72b0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
    72c0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
    72d0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
    72e0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
    72f0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
    7300:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
    7310:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
    7320:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
    7330:	79d99db4 44ea7843                       ...yCx.D

00007338 <__mprec_bigtens>:
    7338:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
    7348:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
    7358:	7f73bf3c 75154fdd                       <.s..O.u

00007360 <p05.5385>:
    7360:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
    7370:	6c680020 6665004c 47464567 00000000      .hlL.efgEFG....
    7380:	00005ce0 00005bae 00005cb4 00005ba4     .\...[...\...[..
    7390:	00005cb4 00005cbe 00005cb4 00005ba4     .\...\...\...[..
    73a0:	00005bae 00005bae 00005cbe 00005ba4     .[...[...\...[..
    73b0:	00005b9a 00005b9a 00005b9a 00005f10     .[...[...[..._..
    73c0:	00006528 000063e8 000063e8 000063e6     (e...c...c...c..
    73d0:	00006500 00006500 000064f2 000063e6     .e...e...d...c..
    73e0:	00006500 000064f2 00006500 000063e6     .e...d...e...c..
    73f0:	00006508 00006508 00006508 00006708     .e...e...e...g..

00007400 <_init>:
    7400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7402:	46c0      	nop			; (mov r8, r8)
    7404:	bcf8      	pop	{r3, r4, r5, r6, r7}
    7406:	bc08      	pop	{r3}
    7408:	469e      	mov	lr, r3
    740a:	4770      	bx	lr

0000740c <__init_array_start>:
    740c:	000000dd 	.word	0x000000dd

00007410 <_fini>:
    7410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7412:	46c0      	nop			; (mov r8, r8)
    7414:	bcf8      	pop	{r3, r4, r5, r6, r7}
    7416:	bc08      	pop	{r3}
    7418:	469e      	mov	lr, r3
    741a:	4770      	bx	lr

0000741c <__fini_array_start>:
    741c:	000000b5 	.word	0x000000b5
