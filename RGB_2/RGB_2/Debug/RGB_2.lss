
RGB_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f5c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000084  20000000  00002f5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000011c  20000084  00002fe0  00020084  2**2
                  ALLOC
  3 .stack        00002000  200001a0  000030fc  00020084  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002c5e5  00000000  00000000  00020105  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000042ae  00000000  00000000  0004c6ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00006216  00000000  00000000  00050998  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000005e8  00000000  00000000  00056bae  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000688  00000000  00000000  00057196  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001a381  00000000  00000000  0005781e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000dad8  00000000  00000000  00071b9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000847b3  00000000  00000000  0007f677  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000151c  00000000  00000000  00103e2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	a0 21 00 20 f1 15 00 00 ed 15 00 00 ed 15 00 00     .!. ............
	...
      2c:	ed 15 00 00 00 00 00 00 00 00 00 00 ed 15 00 00     ................
      3c:	ed 15 00 00 ed 15 00 00 ed 15 00 00 ed 15 00 00     ................
      4c:	ed 15 00 00 ed 15 00 00 ed 15 00 00 ed 15 00 00     ................
      5c:	ed 15 00 00 95 0e 00 00 35 0e 00 00 45 0e 00 00     ........5...E...
      6c:	55 0e 00 00 65 0e 00 00 75 0e 00 00 85 0e 00 00     U...e...u.......
      7c:	ed 15 00 00 ed 15 00 00 ed 15 00 00 21 08 00 00     ............!...
      8c:	31 08 00 00 41 08 00 00 00 00 00 00 00 00 00 00     1...A...........
      9c:	ed 15 00 00 ed 15 00 00 00 00 00 00 ed 15 00 00     ................
	...

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000084 	.word	0x20000084
      d4:	00000000 	.word	0x00000000
      d8:	00002f5c 	.word	0x00002f5c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000088 	.word	0x20000088
     108:	00002f5c 	.word	0x00002f5c
     10c:	00002f5c 	.word	0x00002f5c
     110:	00000000 	.word	0x00000000

00000114 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     114:	b5f0      	push	{r4, r5, r6, r7, lr}
     116:	46de      	mov	lr, fp
     118:	4657      	mov	r7, sl
     11a:	464e      	mov	r6, r9
     11c:	4645      	mov	r5, r8
     11e:	b5e0      	push	{r5, r6, r7, lr}
     120:	b087      	sub	sp, #28
     122:	4680      	mov	r8, r0
     124:	9104      	str	r1, [sp, #16]
     126:	0016      	movs	r6, r2
     128:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     12a:	2200      	movs	r2, #0
     12c:	2300      	movs	r3, #0
     12e:	2100      	movs	r1, #0
     130:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     132:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     134:	2001      	movs	r0, #1
     136:	0021      	movs	r1, r4
     138:	9600      	str	r6, [sp, #0]
     13a:	9701      	str	r7, [sp, #4]
     13c:	465c      	mov	r4, fp
     13e:	9403      	str	r4, [sp, #12]
     140:	4644      	mov	r4, r8
     142:	9405      	str	r4, [sp, #20]
     144:	e013      	b.n	16e <long_division+0x5a>
     146:	2420      	movs	r4, #32
     148:	1a64      	subs	r4, r4, r1
     14a:	0005      	movs	r5, r0
     14c:	40e5      	lsrs	r5, r4
     14e:	46a8      	mov	r8, r5
     150:	e014      	b.n	17c <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     152:	9c00      	ldr	r4, [sp, #0]
     154:	9d01      	ldr	r5, [sp, #4]
     156:	1b12      	subs	r2, r2, r4
     158:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     15a:	465c      	mov	r4, fp
     15c:	464d      	mov	r5, r9
     15e:	432c      	orrs	r4, r5
     160:	46a3      	mov	fp, r4
     162:	9c03      	ldr	r4, [sp, #12]
     164:	4645      	mov	r5, r8
     166:	432c      	orrs	r4, r5
     168:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     16a:	3901      	subs	r1, #1
     16c:	d325      	bcc.n	1ba <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     16e:	2420      	movs	r4, #32
     170:	4264      	negs	r4, r4
     172:	190c      	adds	r4, r1, r4
     174:	d4e7      	bmi.n	146 <long_division+0x32>
     176:	0005      	movs	r5, r0
     178:	40a5      	lsls	r5, r4
     17a:	46a8      	mov	r8, r5
     17c:	0004      	movs	r4, r0
     17e:	408c      	lsls	r4, r1
     180:	46a1      	mov	r9, r4
		r = r << 1;
     182:	1892      	adds	r2, r2, r2
     184:	415b      	adcs	r3, r3
     186:	0014      	movs	r4, r2
     188:	001d      	movs	r5, r3
		if (n & bit_shift) {
     18a:	9e05      	ldr	r6, [sp, #20]
     18c:	464f      	mov	r7, r9
     18e:	403e      	ands	r6, r7
     190:	46b4      	mov	ip, r6
     192:	9e04      	ldr	r6, [sp, #16]
     194:	4647      	mov	r7, r8
     196:	403e      	ands	r6, r7
     198:	46b2      	mov	sl, r6
     19a:	4666      	mov	r6, ip
     19c:	4657      	mov	r7, sl
     19e:	433e      	orrs	r6, r7
     1a0:	d003      	beq.n	1aa <long_division+0x96>
			r |= 0x01;
     1a2:	0006      	movs	r6, r0
     1a4:	4326      	orrs	r6, r4
     1a6:	0032      	movs	r2, r6
     1a8:	002b      	movs	r3, r5
		if (r >= d) {
     1aa:	9c00      	ldr	r4, [sp, #0]
     1ac:	9d01      	ldr	r5, [sp, #4]
     1ae:	429d      	cmp	r5, r3
     1b0:	d8db      	bhi.n	16a <long_division+0x56>
     1b2:	d1ce      	bne.n	152 <long_division+0x3e>
     1b4:	4294      	cmp	r4, r2
     1b6:	d8d8      	bhi.n	16a <long_division+0x56>
     1b8:	e7cb      	b.n	152 <long_division+0x3e>
     1ba:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     1bc:	4658      	mov	r0, fp
     1be:	0019      	movs	r1, r3
     1c0:	b007      	add	sp, #28
     1c2:	bc3c      	pop	{r2, r3, r4, r5}
     1c4:	4690      	mov	r8, r2
     1c6:	4699      	mov	r9, r3
     1c8:	46a2      	mov	sl, r4
     1ca:	46ab      	mov	fp, r5
     1cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000001ce <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     1ce:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     1d0:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     1d2:	2340      	movs	r3, #64	; 0x40
     1d4:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     1d6:	4281      	cmp	r1, r0
     1d8:	d202      	bcs.n	1e0 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     1da:	0018      	movs	r0, r3
     1dc:	bd10      	pop	{r4, pc}
		baud_calculated++;
     1de:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     1e0:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     1e2:	1c63      	adds	r3, r4, #1
     1e4:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     1e6:	4288      	cmp	r0, r1
     1e8:	d9f9      	bls.n	1de <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     1ea:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     1ec:	2cff      	cmp	r4, #255	; 0xff
     1ee:	d8f4      	bhi.n	1da <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     1f0:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     1f2:	2300      	movs	r3, #0
     1f4:	e7f1      	b.n	1da <_sercom_get_sync_baud_val+0xc>
	...

000001f8 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     1f8:	b5f0      	push	{r4, r5, r6, r7, lr}
     1fa:	b083      	sub	sp, #12
     1fc:	000f      	movs	r7, r1
     1fe:	0016      	movs	r6, r2
     200:	aa08      	add	r2, sp, #32
     202:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     204:	0004      	movs	r4, r0
     206:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     208:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     20a:	42bc      	cmp	r4, r7
     20c:	d902      	bls.n	214 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     20e:	0010      	movs	r0, r2
     210:	b003      	add	sp, #12
     212:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     214:	2b00      	cmp	r3, #0
     216:	d114      	bne.n	242 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     218:	0002      	movs	r2, r0
     21a:	0008      	movs	r0, r1
     21c:	2100      	movs	r1, #0
     21e:	4c19      	ldr	r4, [pc, #100]	; (284 <_sercom_get_async_baud_val+0x8c>)
     220:	47a0      	blx	r4
     222:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     224:	003a      	movs	r2, r7
     226:	2300      	movs	r3, #0
     228:	2000      	movs	r0, #0
     22a:	4c17      	ldr	r4, [pc, #92]	; (288 <_sercom_get_async_baud_val+0x90>)
     22c:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     22e:	2200      	movs	r2, #0
     230:	2301      	movs	r3, #1
     232:	1a12      	subs	r2, r2, r0
     234:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     236:	0c12      	lsrs	r2, r2, #16
     238:	041b      	lsls	r3, r3, #16
     23a:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     23c:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     23e:	2200      	movs	r2, #0
     240:	e7e5      	b.n	20e <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     242:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     244:	2b01      	cmp	r3, #1
     246:	d1f9      	bne.n	23c <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     248:	000a      	movs	r2, r1
     24a:	2300      	movs	r3, #0
     24c:	2100      	movs	r1, #0
     24e:	4c0d      	ldr	r4, [pc, #52]	; (284 <_sercom_get_async_baud_val+0x8c>)
     250:	47a0      	blx	r4
     252:	0002      	movs	r2, r0
     254:	000b      	movs	r3, r1
     256:	9200      	str	r2, [sp, #0]
     258:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     25a:	0038      	movs	r0, r7
     25c:	2100      	movs	r1, #0
     25e:	4c0a      	ldr	r4, [pc, #40]	; (288 <_sercom_get_async_baud_val+0x90>)
     260:	47a0      	blx	r4
     262:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     264:	2380      	movs	r3, #128	; 0x80
     266:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     268:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     26a:	4298      	cmp	r0, r3
     26c:	d8cf      	bhi.n	20e <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     26e:	0f79      	lsrs	r1, r7, #29
     270:	00f8      	lsls	r0, r7, #3
     272:	9a00      	ldr	r2, [sp, #0]
     274:	9b01      	ldr	r3, [sp, #4]
     276:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     278:	00ea      	lsls	r2, r5, #3
     27a:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     27c:	b2d2      	uxtb	r2, r2
     27e:	0352      	lsls	r2, r2, #13
     280:	432a      	orrs	r2, r5
     282:	e7db      	b.n	23c <_sercom_get_async_baud_val+0x44>
     284:	00001da5 	.word	0x00001da5
     288:	00000115 	.word	0x00000115

0000028c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     28c:	b510      	push	{r4, lr}
     28e:	b082      	sub	sp, #8
     290:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     292:	4b0e      	ldr	r3, [pc, #56]	; (2cc <sercom_set_gclk_generator+0x40>)
     294:	781b      	ldrb	r3, [r3, #0]
     296:	2b00      	cmp	r3, #0
     298:	d007      	beq.n	2aa <sercom_set_gclk_generator+0x1e>
     29a:	2900      	cmp	r1, #0
     29c:	d105      	bne.n	2aa <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     29e:	4b0b      	ldr	r3, [pc, #44]	; (2cc <sercom_set_gclk_generator+0x40>)
     2a0:	785b      	ldrb	r3, [r3, #1]
     2a2:	4283      	cmp	r3, r0
     2a4:	d010      	beq.n	2c8 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     2a6:	201d      	movs	r0, #29
     2a8:	e00c      	b.n	2c4 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     2aa:	a901      	add	r1, sp, #4
     2ac:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     2ae:	2013      	movs	r0, #19
     2b0:	4b07      	ldr	r3, [pc, #28]	; (2d0 <sercom_set_gclk_generator+0x44>)
     2b2:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     2b4:	2013      	movs	r0, #19
     2b6:	4b07      	ldr	r3, [pc, #28]	; (2d4 <sercom_set_gclk_generator+0x48>)
     2b8:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     2ba:	4b04      	ldr	r3, [pc, #16]	; (2cc <sercom_set_gclk_generator+0x40>)
     2bc:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     2be:	2201      	movs	r2, #1
     2c0:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     2c2:	2000      	movs	r0, #0
}
     2c4:	b002      	add	sp, #8
     2c6:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     2c8:	2000      	movs	r0, #0
     2ca:	e7fb      	b.n	2c4 <sercom_set_gclk_generator+0x38>
     2cc:	200000a0 	.word	0x200000a0
     2d0:	00001495 	.word	0x00001495
     2d4:	00001409 	.word	0x00001409

000002d8 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     2d8:	4b40      	ldr	r3, [pc, #256]	; (3dc <_sercom_get_default_pad+0x104>)
     2da:	4298      	cmp	r0, r3
     2dc:	d031      	beq.n	342 <_sercom_get_default_pad+0x6a>
     2de:	d90a      	bls.n	2f6 <_sercom_get_default_pad+0x1e>
     2e0:	4b3f      	ldr	r3, [pc, #252]	; (3e0 <_sercom_get_default_pad+0x108>)
     2e2:	4298      	cmp	r0, r3
     2e4:	d04d      	beq.n	382 <_sercom_get_default_pad+0xaa>
     2e6:	4b3f      	ldr	r3, [pc, #252]	; (3e4 <_sercom_get_default_pad+0x10c>)
     2e8:	4298      	cmp	r0, r3
     2ea:	d05a      	beq.n	3a2 <_sercom_get_default_pad+0xca>
     2ec:	4b3e      	ldr	r3, [pc, #248]	; (3e8 <_sercom_get_default_pad+0x110>)
     2ee:	4298      	cmp	r0, r3
     2f0:	d037      	beq.n	362 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     2f2:	2000      	movs	r0, #0
}
     2f4:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     2f6:	4b3d      	ldr	r3, [pc, #244]	; (3ec <_sercom_get_default_pad+0x114>)
     2f8:	4298      	cmp	r0, r3
     2fa:	d00c      	beq.n	316 <_sercom_get_default_pad+0x3e>
     2fc:	4b3c      	ldr	r3, [pc, #240]	; (3f0 <_sercom_get_default_pad+0x118>)
     2fe:	4298      	cmp	r0, r3
     300:	d1f7      	bne.n	2f2 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     302:	2901      	cmp	r1, #1
     304:	d017      	beq.n	336 <_sercom_get_default_pad+0x5e>
     306:	2900      	cmp	r1, #0
     308:	d05d      	beq.n	3c6 <_sercom_get_default_pad+0xee>
     30a:	2902      	cmp	r1, #2
     30c:	d015      	beq.n	33a <_sercom_get_default_pad+0x62>
     30e:	2903      	cmp	r1, #3
     310:	d015      	beq.n	33e <_sercom_get_default_pad+0x66>
	return 0;
     312:	2000      	movs	r0, #0
     314:	e7ee      	b.n	2f4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     316:	2901      	cmp	r1, #1
     318:	d007      	beq.n	32a <_sercom_get_default_pad+0x52>
     31a:	2900      	cmp	r1, #0
     31c:	d051      	beq.n	3c2 <_sercom_get_default_pad+0xea>
     31e:	2902      	cmp	r1, #2
     320:	d005      	beq.n	32e <_sercom_get_default_pad+0x56>
     322:	2903      	cmp	r1, #3
     324:	d005      	beq.n	332 <_sercom_get_default_pad+0x5a>
	return 0;
     326:	2000      	movs	r0, #0
     328:	e7e4      	b.n	2f4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     32a:	4832      	ldr	r0, [pc, #200]	; (3f4 <_sercom_get_default_pad+0x11c>)
     32c:	e7e2      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     32e:	4832      	ldr	r0, [pc, #200]	; (3f8 <_sercom_get_default_pad+0x120>)
     330:	e7e0      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     332:	4832      	ldr	r0, [pc, #200]	; (3fc <_sercom_get_default_pad+0x124>)
     334:	e7de      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     336:	4832      	ldr	r0, [pc, #200]	; (400 <_sercom_get_default_pad+0x128>)
     338:	e7dc      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     33a:	4832      	ldr	r0, [pc, #200]	; (404 <_sercom_get_default_pad+0x12c>)
     33c:	e7da      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     33e:	4832      	ldr	r0, [pc, #200]	; (408 <_sercom_get_default_pad+0x130>)
     340:	e7d8      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     342:	2901      	cmp	r1, #1
     344:	d007      	beq.n	356 <_sercom_get_default_pad+0x7e>
     346:	2900      	cmp	r1, #0
     348:	d03f      	beq.n	3ca <_sercom_get_default_pad+0xf2>
     34a:	2902      	cmp	r1, #2
     34c:	d005      	beq.n	35a <_sercom_get_default_pad+0x82>
     34e:	2903      	cmp	r1, #3
     350:	d005      	beq.n	35e <_sercom_get_default_pad+0x86>
	return 0;
     352:	2000      	movs	r0, #0
     354:	e7ce      	b.n	2f4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     356:	482d      	ldr	r0, [pc, #180]	; (40c <_sercom_get_default_pad+0x134>)
     358:	e7cc      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     35a:	482d      	ldr	r0, [pc, #180]	; (410 <_sercom_get_default_pad+0x138>)
     35c:	e7ca      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     35e:	482d      	ldr	r0, [pc, #180]	; (414 <_sercom_get_default_pad+0x13c>)
     360:	e7c8      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     362:	2901      	cmp	r1, #1
     364:	d007      	beq.n	376 <_sercom_get_default_pad+0x9e>
     366:	2900      	cmp	r1, #0
     368:	d031      	beq.n	3ce <_sercom_get_default_pad+0xf6>
     36a:	2902      	cmp	r1, #2
     36c:	d005      	beq.n	37a <_sercom_get_default_pad+0xa2>
     36e:	2903      	cmp	r1, #3
     370:	d005      	beq.n	37e <_sercom_get_default_pad+0xa6>
	return 0;
     372:	2000      	movs	r0, #0
     374:	e7be      	b.n	2f4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     376:	4828      	ldr	r0, [pc, #160]	; (418 <_sercom_get_default_pad+0x140>)
     378:	e7bc      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     37a:	4828      	ldr	r0, [pc, #160]	; (41c <_sercom_get_default_pad+0x144>)
     37c:	e7ba      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     37e:	4828      	ldr	r0, [pc, #160]	; (420 <_sercom_get_default_pad+0x148>)
     380:	e7b8      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     382:	2901      	cmp	r1, #1
     384:	d007      	beq.n	396 <_sercom_get_default_pad+0xbe>
     386:	2900      	cmp	r1, #0
     388:	d023      	beq.n	3d2 <_sercom_get_default_pad+0xfa>
     38a:	2902      	cmp	r1, #2
     38c:	d005      	beq.n	39a <_sercom_get_default_pad+0xc2>
     38e:	2903      	cmp	r1, #3
     390:	d005      	beq.n	39e <_sercom_get_default_pad+0xc6>
	return 0;
     392:	2000      	movs	r0, #0
     394:	e7ae      	b.n	2f4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     396:	4823      	ldr	r0, [pc, #140]	; (424 <_sercom_get_default_pad+0x14c>)
     398:	e7ac      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     39a:	4823      	ldr	r0, [pc, #140]	; (428 <_sercom_get_default_pad+0x150>)
     39c:	e7aa      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     39e:	4823      	ldr	r0, [pc, #140]	; (42c <_sercom_get_default_pad+0x154>)
     3a0:	e7a8      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3a2:	2901      	cmp	r1, #1
     3a4:	d007      	beq.n	3b6 <_sercom_get_default_pad+0xde>
     3a6:	2900      	cmp	r1, #0
     3a8:	d015      	beq.n	3d6 <_sercom_get_default_pad+0xfe>
     3aa:	2902      	cmp	r1, #2
     3ac:	d005      	beq.n	3ba <_sercom_get_default_pad+0xe2>
     3ae:	2903      	cmp	r1, #3
     3b0:	d005      	beq.n	3be <_sercom_get_default_pad+0xe6>
	return 0;
     3b2:	2000      	movs	r0, #0
     3b4:	e79e      	b.n	2f4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     3b6:	481e      	ldr	r0, [pc, #120]	; (430 <_sercom_get_default_pad+0x158>)
     3b8:	e79c      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3ba:	481e      	ldr	r0, [pc, #120]	; (434 <_sercom_get_default_pad+0x15c>)
     3bc:	e79a      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3be:	481e      	ldr	r0, [pc, #120]	; (438 <_sercom_get_default_pad+0x160>)
     3c0:	e798      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3c2:	481e      	ldr	r0, [pc, #120]	; (43c <_sercom_get_default_pad+0x164>)
     3c4:	e796      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3c6:	2003      	movs	r0, #3
     3c8:	e794      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3ca:	481d      	ldr	r0, [pc, #116]	; (440 <_sercom_get_default_pad+0x168>)
     3cc:	e792      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3ce:	481d      	ldr	r0, [pc, #116]	; (444 <_sercom_get_default_pad+0x16c>)
     3d0:	e790      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3d2:	481d      	ldr	r0, [pc, #116]	; (448 <_sercom_get_default_pad+0x170>)
     3d4:	e78e      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3d6:	481d      	ldr	r0, [pc, #116]	; (44c <_sercom_get_default_pad+0x174>)
     3d8:	e78c      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3da:	46c0      	nop			; (mov r8, r8)
     3dc:	42001000 	.word	0x42001000
     3e0:	42001800 	.word	0x42001800
     3e4:	42001c00 	.word	0x42001c00
     3e8:	42001400 	.word	0x42001400
     3ec:	42000800 	.word	0x42000800
     3f0:	42000c00 	.word	0x42000c00
     3f4:	00050003 	.word	0x00050003
     3f8:	00060003 	.word	0x00060003
     3fc:	00070003 	.word	0x00070003
     400:	00010003 	.word	0x00010003
     404:	001e0003 	.word	0x001e0003
     408:	001f0003 	.word	0x001f0003
     40c:	000d0002 	.word	0x000d0002
     410:	000e0002 	.word	0x000e0002
     414:	000f0002 	.word	0x000f0002
     418:	00110003 	.word	0x00110003
     41c:	00120003 	.word	0x00120003
     420:	00130003 	.word	0x00130003
     424:	003f0005 	.word	0x003f0005
     428:	003e0005 	.word	0x003e0005
     42c:	00520005 	.word	0x00520005
     430:	00170003 	.word	0x00170003
     434:	00180003 	.word	0x00180003
     438:	00190003 	.word	0x00190003
     43c:	00040003 	.word	0x00040003
     440:	000c0002 	.word	0x000c0002
     444:	00100003 	.word	0x00100003
     448:	00530005 	.word	0x00530005
     44c:	00160003 	.word	0x00160003

00000450 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     450:	b530      	push	{r4, r5, lr}
     452:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     454:	4b0b      	ldr	r3, [pc, #44]	; (484 <_sercom_get_sercom_inst_index+0x34>)
     456:	466a      	mov	r2, sp
     458:	cb32      	ldmia	r3!, {r1, r4, r5}
     45a:	c232      	stmia	r2!, {r1, r4, r5}
     45c:	cb32      	ldmia	r3!, {r1, r4, r5}
     45e:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     460:	9b00      	ldr	r3, [sp, #0]
     462:	4283      	cmp	r3, r0
     464:	d00b      	beq.n	47e <_sercom_get_sercom_inst_index+0x2e>
     466:	2301      	movs	r3, #1
     468:	009a      	lsls	r2, r3, #2
     46a:	4669      	mov	r1, sp
     46c:	5852      	ldr	r2, [r2, r1]
     46e:	4282      	cmp	r2, r0
     470:	d006      	beq.n	480 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     472:	3301      	adds	r3, #1
     474:	2b06      	cmp	r3, #6
     476:	d1f7      	bne.n	468 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     478:	2000      	movs	r0, #0
}
     47a:	b007      	add	sp, #28
     47c:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     47e:	2300      	movs	r3, #0
			return i;
     480:	b2d8      	uxtb	r0, r3
     482:	e7fa      	b.n	47a <_sercom_get_sercom_inst_index+0x2a>
     484:	00002e28 	.word	0x00002e28

00000488 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
     488:	b530      	push	{r4, r5, lr}
     48a:	b085      	sub	sp, #20
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
     48c:	aa01      	add	r2, sp, #4
     48e:	4b0b      	ldr	r3, [pc, #44]	; (4bc <_tc_get_inst_index+0x34>)
     490:	cb32      	ldmia	r3!, {r1, r4, r5}
     492:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
     494:	9b01      	ldr	r3, [sp, #4]
     496:	4298      	cmp	r0, r3
     498:	d00d      	beq.n	4b6 <_tc_get_inst_index+0x2e>
     49a:	9b02      	ldr	r3, [sp, #8]
     49c:	4298      	cmp	r0, r3
     49e:	d008      	beq.n	4b2 <_tc_get_inst_index+0x2a>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     4a0:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
     4a2:	9a03      	ldr	r2, [sp, #12]
     4a4:	4282      	cmp	r2, r0
     4a6:	d002      	beq.n	4ae <_tc_get_inst_index+0x26>
}
     4a8:	0018      	movs	r0, r3
     4aa:	b005      	add	sp, #20
     4ac:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
     4ae:	3302      	adds	r3, #2
     4b0:	e002      	b.n	4b8 <_tc_get_inst_index+0x30>
     4b2:	2301      	movs	r3, #1
     4b4:	e000      	b.n	4b8 <_tc_get_inst_index+0x30>
     4b6:	2300      	movs	r3, #0
			return i;
     4b8:	b2db      	uxtb	r3, r3
     4ba:	e7f5      	b.n	4a8 <_tc_get_inst_index+0x20>
     4bc:	00002e40 	.word	0x00002e40

000004c0 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
     4c0:	b5f0      	push	{r4, r5, r6, r7, lr}
     4c2:	b087      	sub	sp, #28
     4c4:	0004      	movs	r4, r0
     4c6:	000d      	movs	r5, r1
     4c8:	0016      	movs	r6, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
     4ca:	0008      	movs	r0, r1
     4cc:	4b85      	ldr	r3, [pc, #532]	; (6e4 <tc_init+0x224>)
     4ce:	4798      	blx	r3
     4d0:	0007      	movs	r7, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
     4d2:	ab05      	add	r3, sp, #20
     4d4:	221b      	movs	r2, #27
     4d6:	701a      	strb	r2, [r3, #0]
     4d8:	3201      	adds	r2, #1
     4da:	705a      	strb	r2, [r3, #1]
     4dc:	709a      	strb	r2, [r3, #2]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
     4de:	ab03      	add	r3, sp, #12
     4e0:	2280      	movs	r2, #128	; 0x80
     4e2:	0112      	lsls	r2, r2, #4
     4e4:	801a      	strh	r2, [r3, #0]
     4e6:	2280      	movs	r2, #128	; 0x80
     4e8:	0152      	lsls	r2, r2, #5
     4ea:	805a      	strh	r2, [r3, #2]
     4ec:	2280      	movs	r2, #128	; 0x80
     4ee:	0192      	lsls	r2, r2, #6
     4f0:	809a      	strh	r2, [r3, #4]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
     4f2:	2300      	movs	r3, #0
     4f4:	60a3      	str	r3, [r4, #8]
     4f6:	60e3      	str	r3, [r4, #12]
     4f8:	6123      	str	r3, [r4, #16]
     4fa:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
     4fc:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
     4fe:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
     500:	0082      	lsls	r2, r0, #2
     502:	4b79      	ldr	r3, [pc, #484]	; (6e8 <tc_init+0x228>)
     504:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
     506:	6025      	str	r5, [r4, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     508:	78b3      	ldrb	r3, [r6, #2]
     50a:	2b08      	cmp	r3, #8
     50c:	d006      	beq.n	51c <tc_init+0x5c>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
     50e:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
     510:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     512:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
     514:	07db      	lsls	r3, r3, #31
     516:	d505      	bpl.n	524 <tc_init+0x64>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
     518:	b007      	add	sp, #28
     51a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
     51c:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     51e:	07fa      	lsls	r2, r7, #31
     520:	d5fa      	bpl.n	518 <tc_init+0x58>
     522:	e7f4      	b.n	50e <tc_init+0x4e>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
     524:	7beb      	ldrb	r3, [r5, #15]
		return STATUS_ERR_DENIED;
     526:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
     528:	06db      	lsls	r3, r3, #27
     52a:	d4f5      	bmi.n	518 <tc_init+0x58>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
     52c:	882b      	ldrh	r3, [r5, #0]
     52e:	079b      	lsls	r3, r3, #30
     530:	d4f2      	bmi.n	518 <tc_init+0x58>
	if (config->pwm_channel[0].enabled) {
     532:	7c33      	ldrb	r3, [r6, #16]
     534:	2b00      	cmp	r3, #0
     536:	d179      	bne.n	62c <tc_init+0x16c>
	if (config->pwm_channel[1].enabled) {
     538:	7f33      	ldrb	r3, [r6, #28]
     53a:	2b00      	cmp	r3, #0
     53c:	d000      	beq.n	540 <tc_init+0x80>
     53e:	e081      	b.n	644 <tc_init+0x184>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     540:	496a      	ldr	r1, [pc, #424]	; (6ec <tc_init+0x22c>)
     542:	6a08      	ldr	r0, [r1, #32]
			inst_pm_apbmask[instance]);
     544:	007a      	lsls	r2, r7, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     546:	ab03      	add	r3, sp, #12
     548:	5ad3      	ldrh	r3, [r2, r3]
     54a:	4303      	orrs	r3, r0
     54c:	620b      	str	r3, [r1, #32]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
     54e:	78b3      	ldrb	r3, [r6, #2]
     550:	2b08      	cmp	r3, #8
     552:	d100      	bne.n	556 <tc_init+0x96>
     554:	e086      	b.n	664 <tc_init+0x1a4>
	gclk_chan_config.source_generator = config->clock_source;
     556:	a901      	add	r1, sp, #4
     558:	7833      	ldrb	r3, [r6, #0]
     55a:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
     55c:	ab05      	add	r3, sp, #20
     55e:	5ddf      	ldrb	r7, [r3, r7]
     560:	0038      	movs	r0, r7
     562:	4b63      	ldr	r3, [pc, #396]	; (6f0 <tc_init+0x230>)
     564:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
     566:	0038      	movs	r0, r7
     568:	4b62      	ldr	r3, [pc, #392]	; (6f4 <tc_init+0x234>)
     56a:	4798      	blx	r3
	ctrla_tmp =
     56c:	8931      	ldrh	r1, [r6, #8]
     56e:	88b3      	ldrh	r3, [r6, #4]
     570:	430b      	orrs	r3, r1
			(uint32_t)config->wave_generation |
     572:	78b1      	ldrb	r1, [r6, #2]
     574:	79b2      	ldrb	r2, [r6, #6]
     576:	4311      	orrs	r1, r2
	ctrla_tmp =
     578:	4319      	orrs	r1, r3
	if (config->run_in_standby) {
     57a:	7873      	ldrb	r3, [r6, #1]
     57c:	2b00      	cmp	r3, #0
     57e:	d002      	beq.n	586 <tc_init+0xc6>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
     580:	2380      	movs	r3, #128	; 0x80
     582:	011b      	lsls	r3, r3, #4
     584:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     586:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     588:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     58a:	b25b      	sxtb	r3, r3
     58c:	2b00      	cmp	r3, #0
     58e:	dbfb      	blt.n	588 <tc_init+0xc8>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
     590:	8029      	strh	r1, [r5, #0]
	if (config->oneshot) {
     592:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
     594:	1e4b      	subs	r3, r1, #1
     596:	4199      	sbcs	r1, r3
     598:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
     59a:	7bb3      	ldrb	r3, [r6, #14]
     59c:	2b00      	cmp	r3, #0
     59e:	d001      	beq.n	5a4 <tc_init+0xe4>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
     5a0:	2301      	movs	r3, #1
     5a2:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     5a4:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     5a6:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     5a8:	b25b      	sxtb	r3, r3
     5aa:	2b00      	cmp	r3, #0
     5ac:	dbfb      	blt.n	5a6 <tc_init+0xe6>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
     5ae:	23ff      	movs	r3, #255	; 0xff
     5b0:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
     5b2:	2900      	cmp	r1, #0
     5b4:	d005      	beq.n	5c2 <tc_init+0x102>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     5b6:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     5b8:	7bd3      	ldrb	r3, [r2, #15]
		while (tc_is_syncing(module_inst)) {
     5ba:	b25b      	sxtb	r3, r3
     5bc:	2b00      	cmp	r3, #0
     5be:	dbfb      	blt.n	5b8 <tc_init+0xf8>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
     5c0:	7169      	strb	r1, [r5, #5]
	ctrlc_tmp = config->waveform_invert_output;
     5c2:	7ab1      	ldrb	r1, [r6, #10]
		if (config->enable_capture_on_channel[i] == true) {
     5c4:	7af3      	ldrb	r3, [r6, #11]
     5c6:	2b00      	cmp	r3, #0
     5c8:	d001      	beq.n	5ce <tc_init+0x10e>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
     5ca:	2310      	movs	r3, #16
     5cc:	4319      	orrs	r1, r3
		if (config->enable_capture_on_channel[i] == true) {
     5ce:	7b33      	ldrb	r3, [r6, #12]
     5d0:	2b00      	cmp	r3, #0
     5d2:	d001      	beq.n	5d8 <tc_init+0x118>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
     5d4:	2320      	movs	r3, #32
     5d6:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     5d8:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     5da:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     5dc:	b25b      	sxtb	r3, r3
     5de:	2b00      	cmp	r3, #0
     5e0:	dbfb      	blt.n	5da <tc_init+0x11a>
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
     5e2:	71a9      	strb	r1, [r5, #6]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     5e4:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     5e6:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     5e8:	b25b      	sxtb	r3, r3
     5ea:	2b00      	cmp	r3, #0
     5ec:	dbfb      	blt.n	5e6 <tc_init+0x126>
	switch (module_inst->counter_size) {
     5ee:	7923      	ldrb	r3, [r4, #4]
     5f0:	2b04      	cmp	r3, #4
     5f2:	d03f      	beq.n	674 <tc_init+0x1b4>
     5f4:	2b08      	cmp	r3, #8
     5f6:	d05e      	beq.n	6b6 <tc_init+0x1f6>
	return STATUS_ERR_INVALID_ARG;
     5f8:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
     5fa:	2b00      	cmp	r3, #0
     5fc:	d000      	beq.n	600 <tc_init+0x140>
     5fe:	e78b      	b.n	518 <tc_init+0x58>
     600:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     602:	b25b      	sxtb	r3, r3
     604:	2b00      	cmp	r3, #0
     606:	dbfb      	blt.n	600 <tc_init+0x140>
				= config->counter_16_bit.value;
     608:	8d33      	ldrh	r3, [r6, #40]	; 0x28
     60a:	822b      	strh	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     60c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     60e:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     610:	b25b      	sxtb	r3, r3
     612:	2b00      	cmp	r3, #0
     614:	dbfb      	blt.n	60e <tc_init+0x14e>
					config->counter_16_bit.compare_capture_channel[0];
     616:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
     618:	832b      	strh	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     61a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     61c:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     61e:	b25b      	sxtb	r3, r3
     620:	2b00      	cmp	r3, #0
     622:	dbfb      	blt.n	61c <tc_init+0x15c>
					config->counter_16_bit.compare_capture_channel[1];
     624:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
     626:	836b      	strh	r3, [r5, #26]
			return STATUS_OK;
     628:	2000      	movs	r0, #0
     62a:	e775      	b.n	518 <tc_init+0x58>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     62c:	a902      	add	r1, sp, #8
     62e:	2301      	movs	r3, #1
     630:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
     632:	2200      	movs	r2, #0
     634:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
     636:	7e32      	ldrb	r2, [r6, #24]
     638:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     63a:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
     63c:	7d30      	ldrb	r0, [r6, #20]
     63e:	4b2e      	ldr	r3, [pc, #184]	; (6f8 <tc_init+0x238>)
     640:	4798      	blx	r3
     642:	e779      	b.n	538 <tc_init+0x78>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     644:	a902      	add	r1, sp, #8
     646:	2301      	movs	r3, #1
     648:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
     64a:	2200      	movs	r2, #0
     64c:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
     64e:	3224      	adds	r2, #36	; 0x24
     650:	18b2      	adds	r2, r6, r2
     652:	7812      	ldrb	r2, [r2, #0]
     654:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     656:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
     658:	331f      	adds	r3, #31
     65a:	18f3      	adds	r3, r6, r3
     65c:	7818      	ldrb	r0, [r3, #0]
     65e:	4b26      	ldr	r3, [pc, #152]	; (6f8 <tc_init+0x238>)
     660:	4798      	blx	r3
     662:	e76d      	b.n	540 <tc_init+0x80>
     664:	6a08      	ldr	r0, [r1, #32]
				inst_pm_apbmask[instance + 1]);
     666:	1c7a      	adds	r2, r7, #1
     668:	0052      	lsls	r2, r2, #1
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     66a:	ab03      	add	r3, sp, #12
     66c:	5ad3      	ldrh	r3, [r2, r3]
     66e:	4303      	orrs	r3, r0
     670:	620b      	str	r3, [r1, #32]
     672:	e770      	b.n	556 <tc_init+0x96>
     674:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     676:	b25b      	sxtb	r3, r3
     678:	2b00      	cmp	r3, #0
     67a:	dbfb      	blt.n	674 <tc_init+0x1b4>
					config->counter_8_bit.value;
     67c:	2328      	movs	r3, #40	; 0x28
     67e:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
     680:	742b      	strb	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     682:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     684:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     686:	b25b      	sxtb	r3, r3
     688:	2b00      	cmp	r3, #0
     68a:	dbfb      	blt.n	684 <tc_init+0x1c4>
					config->counter_8_bit.period;
     68c:	2329      	movs	r3, #41	; 0x29
     68e:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
     690:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     692:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     694:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     696:	b25b      	sxtb	r3, r3
     698:	2b00      	cmp	r3, #0
     69a:	dbfb      	blt.n	694 <tc_init+0x1d4>
					config->counter_8_bit.compare_capture_channel[0];
     69c:	232a      	movs	r3, #42	; 0x2a
     69e:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
     6a0:	762b      	strb	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     6a2:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     6a4:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     6a6:	b25b      	sxtb	r3, r3
     6a8:	2b00      	cmp	r3, #0
     6aa:	dbfb      	blt.n	6a4 <tc_init+0x1e4>
					config->counter_8_bit.compare_capture_channel[1];
     6ac:	232b      	movs	r3, #43	; 0x2b
     6ae:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
     6b0:	766b      	strb	r3, [r5, #25]
			return STATUS_OK;
     6b2:	2000      	movs	r0, #0
     6b4:	e730      	b.n	518 <tc_init+0x58>
     6b6:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     6b8:	b25b      	sxtb	r3, r3
     6ba:	2b00      	cmp	r3, #0
     6bc:	dbfb      	blt.n	6b6 <tc_init+0x1f6>
				= config->counter_32_bit.value;
     6be:	6ab3      	ldr	r3, [r6, #40]	; 0x28
     6c0:	612b      	str	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     6c2:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     6c4:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     6c6:	b25b      	sxtb	r3, r3
     6c8:	2b00      	cmp	r3, #0
     6ca:	dbfb      	blt.n	6c4 <tc_init+0x204>
			hw->COUNT32.CC[0].reg =
     6cc:	6af3      	ldr	r3, [r6, #44]	; 0x2c
     6ce:	61ab      	str	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     6d0:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     6d2:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     6d4:	b25b      	sxtb	r3, r3
     6d6:	2b00      	cmp	r3, #0
     6d8:	dbfb      	blt.n	6d2 <tc_init+0x212>
					config->counter_32_bit.compare_capture_channel[1];
     6da:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
     6dc:	61eb      	str	r3, [r5, #28]
			return STATUS_OK;
     6de:	2000      	movs	r0, #0
     6e0:	e71a      	b.n	518 <tc_init+0x58>
     6e2:	46c0      	nop			; (mov r8, r8)
     6e4:	00000489 	.word	0x00000489
     6e8:	200000f4 	.word	0x200000f4
     6ec:	40000400 	.word	0x40000400
     6f0:	00001495 	.word	0x00001495
     6f4:	00001409 	.word	0x00001409
     6f8:	0000158d 	.word	0x0000158d

000006fc <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
     6fc:	6802      	ldr	r2, [r0, #0]
     6fe:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
     700:	b25b      	sxtb	r3, r3
     702:	2b00      	cmp	r3, #0
     704:	dbfb      	blt.n	6fe <tc_get_count_value+0x2>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
     706:	7903      	ldrb	r3, [r0, #4]
     708:	2b04      	cmp	r3, #4
     70a:	d005      	beq.n	718 <tc_get_count_value+0x1c>
     70c:	2b08      	cmp	r3, #8
     70e:	d009      	beq.n	724 <tc_get_count_value+0x28>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
     710:	2000      	movs	r0, #0
	switch (module_inst->counter_size) {
     712:	2b00      	cmp	r3, #0
     714:	d003      	beq.n	71e <tc_get_count_value+0x22>
}
     716:	4770      	bx	lr
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
     718:	7c10      	ldrb	r0, [r2, #16]
     71a:	b2c0      	uxtb	r0, r0
     71c:	e7fb      	b.n	716 <tc_get_count_value+0x1a>
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
     71e:	8a10      	ldrh	r0, [r2, #16]
     720:	b280      	uxth	r0, r0
     722:	e7f8      	b.n	716 <tc_get_count_value+0x1a>
			return tc_module->COUNT32.COUNT.reg;
     724:	6910      	ldr	r0, [r2, #16]
     726:	e7f6      	b.n	716 <tc_get_count_value+0x1a>

00000728 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
     728:	b5f0      	push	{r4, r5, r6, r7, lr}
     72a:	46c6      	mov	lr, r8
     72c:	b500      	push	{lr}
     72e:	000c      	movs	r4, r1
     730:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
     732:	2800      	cmp	r0, #0
     734:	d10f      	bne.n	756 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
     736:	2a00      	cmp	r2, #0
     738:	dd11      	ble.n	75e <_read+0x36>
     73a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
     73c:	4e09      	ldr	r6, [pc, #36]	; (764 <_read+0x3c>)
     73e:	4d0a      	ldr	r5, [pc, #40]	; (768 <_read+0x40>)
     740:	6830      	ldr	r0, [r6, #0]
     742:	0021      	movs	r1, r4
     744:	682b      	ldr	r3, [r5, #0]
     746:	4798      	blx	r3
		ptr++;
     748:	3401      	adds	r4, #1
	for (; len > 0; --len) {
     74a:	42bc      	cmp	r4, r7
     74c:	d1f8      	bne.n	740 <_read+0x18>
		nChars++;
	}
	return nChars;
}
     74e:	4640      	mov	r0, r8
     750:	bc04      	pop	{r2}
     752:	4690      	mov	r8, r2
     754:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
     756:	2301      	movs	r3, #1
     758:	425b      	negs	r3, r3
     75a:	4698      	mov	r8, r3
     75c:	e7f7      	b.n	74e <_read+0x26>
	for (; len > 0; --len) {
     75e:	4680      	mov	r8, r0
     760:	e7f5      	b.n	74e <_read+0x26>
     762:	46c0      	nop			; (mov r8, r8)
     764:	200000f0 	.word	0x200000f0
     768:	200000e8 	.word	0x200000e8

0000076c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
     76c:	b5f0      	push	{r4, r5, r6, r7, lr}
     76e:	46c6      	mov	lr, r8
     770:	b500      	push	{lr}
     772:	000e      	movs	r6, r1
     774:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
     776:	3801      	subs	r0, #1
     778:	2802      	cmp	r0, #2
     77a:	d810      	bhi.n	79e <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
     77c:	2a00      	cmp	r2, #0
     77e:	d011      	beq.n	7a4 <_write+0x38>
     780:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
     782:	4b0c      	ldr	r3, [pc, #48]	; (7b4 <_write+0x48>)
     784:	4698      	mov	r8, r3
     786:	4f0c      	ldr	r7, [pc, #48]	; (7b8 <_write+0x4c>)
     788:	4643      	mov	r3, r8
     78a:	6818      	ldr	r0, [r3, #0]
     78c:	5d31      	ldrb	r1, [r6, r4]
     78e:	683b      	ldr	r3, [r7, #0]
     790:	4798      	blx	r3
     792:	2800      	cmp	r0, #0
     794:	db08      	blt.n	7a8 <_write+0x3c>
			return -1;
		}
		++nChars;
     796:	3401      	adds	r4, #1
	for (; len != 0; --len) {
     798:	42a5      	cmp	r5, r4
     79a:	d1f5      	bne.n	788 <_write+0x1c>
     79c:	e006      	b.n	7ac <_write+0x40>
		return -1;
     79e:	2401      	movs	r4, #1
     7a0:	4264      	negs	r4, r4
     7a2:	e003      	b.n	7ac <_write+0x40>
	for (; len != 0; --len) {
     7a4:	0014      	movs	r4, r2
     7a6:	e001      	b.n	7ac <_write+0x40>
			return -1;
     7a8:	2401      	movs	r4, #1
     7aa:	4264      	negs	r4, r4
	}
	return nChars;
}
     7ac:	0020      	movs	r0, r4
     7ae:	bc04      	pop	{r2}
     7b0:	4690      	mov	r8, r2
     7b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     7b4:	200000f0 	.word	0x200000f0
     7b8:	200000ec 	.word	0x200000ec

000007bc <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
     7bc:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
     7be:	0080      	lsls	r0, r0, #2
     7c0:	4b16      	ldr	r3, [pc, #88]	; (81c <_tc_interrupt_handler+0x60>)
     7c2:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     7c4:	6823      	ldr	r3, [r4, #0]
     7c6:	7b9d      	ldrb	r5, [r3, #14]
     7c8:	7e22      	ldrb	r2, [r4, #24]
     7ca:	7e63      	ldrb	r3, [r4, #25]
     7cc:	4013      	ands	r3, r2
     7ce:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
     7d0:	07eb      	lsls	r3, r5, #31
     7d2:	d406      	bmi.n	7e2 <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
     7d4:	07ab      	lsls	r3, r5, #30
     7d6:	d40b      	bmi.n	7f0 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
     7d8:	06eb      	lsls	r3, r5, #27
     7da:	d410      	bmi.n	7fe <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
     7dc:	06ab      	lsls	r3, r5, #26
     7de:	d415      	bmi.n	80c <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
     7e0:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
     7e2:	0020      	movs	r0, r4
     7e4:	68a3      	ldr	r3, [r4, #8]
     7e6:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
     7e8:	2301      	movs	r3, #1
     7ea:	6822      	ldr	r2, [r4, #0]
     7ec:	7393      	strb	r3, [r2, #14]
     7ee:	e7f1      	b.n	7d4 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
     7f0:	0020      	movs	r0, r4
     7f2:	68e3      	ldr	r3, [r4, #12]
     7f4:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
     7f6:	2302      	movs	r3, #2
     7f8:	6822      	ldr	r2, [r4, #0]
     7fa:	7393      	strb	r3, [r2, #14]
     7fc:	e7ec      	b.n	7d8 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
     7fe:	0020      	movs	r0, r4
     800:	6923      	ldr	r3, [r4, #16]
     802:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
     804:	2310      	movs	r3, #16
     806:	6822      	ldr	r2, [r4, #0]
     808:	7393      	strb	r3, [r2, #14]
     80a:	e7e7      	b.n	7dc <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
     80c:	0020      	movs	r0, r4
     80e:	6963      	ldr	r3, [r4, #20]
     810:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
     812:	6823      	ldr	r3, [r4, #0]
     814:	2220      	movs	r2, #32
     816:	739a      	strb	r2, [r3, #14]
}
     818:	e7e2      	b.n	7e0 <_tc_interrupt_handler+0x24>
     81a:	46c0      	nop			; (mov r8, r8)
     81c:	200000f4 	.word	0x200000f4

00000820 <TC3_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
     820:	b510      	push	{r4, lr}
     822:	2000      	movs	r0, #0
     824:	4b01      	ldr	r3, [pc, #4]	; (82c <TC3_Handler+0xc>)
     826:	4798      	blx	r3
     828:	bd10      	pop	{r4, pc}
     82a:	46c0      	nop			; (mov r8, r8)
     82c:	000007bd 	.word	0x000007bd

00000830 <TC4_Handler>:
     830:	b510      	push	{r4, lr}
     832:	2001      	movs	r0, #1
     834:	4b01      	ldr	r3, [pc, #4]	; (83c <TC4_Handler+0xc>)
     836:	4798      	blx	r3
     838:	bd10      	pop	{r4, pc}
     83a:	46c0      	nop			; (mov r8, r8)
     83c:	000007bd 	.word	0x000007bd

00000840 <TC5_Handler>:
     840:	b510      	push	{r4, lr}
     842:	2002      	movs	r0, #2
     844:	4b01      	ldr	r3, [pc, #4]	; (84c <TC5_Handler+0xc>)
     846:	4798      	blx	r3
     848:	bd10      	pop	{r4, pc}
     84a:	46c0      	nop			; (mov r8, r8)
     84c:	000007bd 	.word	0x000007bd

00000850 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     850:	b5f0      	push	{r4, r5, r6, r7, lr}
     852:	46de      	mov	lr, fp
     854:	4657      	mov	r7, sl
     856:	464e      	mov	r6, r9
     858:	4645      	mov	r5, r8
     85a:	b5e0      	push	{r5, r6, r7, lr}
     85c:	b091      	sub	sp, #68	; 0x44
     85e:	0005      	movs	r5, r0
     860:	000c      	movs	r4, r1
     862:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     864:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     866:	0008      	movs	r0, r1
     868:	4bbc      	ldr	r3, [pc, #752]	; (b5c <usart_init+0x30c>)
     86a:	4798      	blx	r3
     86c:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     86e:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     870:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     872:	07db      	lsls	r3, r3, #31
     874:	d506      	bpl.n	884 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     876:	b011      	add	sp, #68	; 0x44
     878:	bc3c      	pop	{r2, r3, r4, r5}
     87a:	4690      	mov	r8, r2
     87c:	4699      	mov	r9, r3
     87e:	46a2      	mov	sl, r4
     880:	46ab      	mov	fp, r5
     882:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     884:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
     886:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     888:	079b      	lsls	r3, r3, #30
     88a:	d4f4      	bmi.n	876 <usart_init+0x26>
     88c:	49b4      	ldr	r1, [pc, #720]	; (b60 <usart_init+0x310>)
     88e:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     890:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     892:	2301      	movs	r3, #1
     894:	40bb      	lsls	r3, r7
     896:	4303      	orrs	r3, r0
     898:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     89a:	a90f      	add	r1, sp, #60	; 0x3c
     89c:	272d      	movs	r7, #45	; 0x2d
     89e:	5df3      	ldrb	r3, [r6, r7]
     8a0:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     8a2:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     8a4:	b2d3      	uxtb	r3, r2
     8a6:	9302      	str	r3, [sp, #8]
     8a8:	0018      	movs	r0, r3
     8aa:	4bae      	ldr	r3, [pc, #696]	; (b64 <usart_init+0x314>)
     8ac:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     8ae:	9802      	ldr	r0, [sp, #8]
     8b0:	4bad      	ldr	r3, [pc, #692]	; (b68 <usart_init+0x318>)
     8b2:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     8b4:	5df0      	ldrb	r0, [r6, r7]
     8b6:	2100      	movs	r1, #0
     8b8:	4bac      	ldr	r3, [pc, #688]	; (b6c <usart_init+0x31c>)
     8ba:	4798      	blx	r3
	module->character_size = config->character_size;
     8bc:	7af3      	ldrb	r3, [r6, #11]
     8be:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     8c0:	2324      	movs	r3, #36	; 0x24
     8c2:	5cf3      	ldrb	r3, [r6, r3]
     8c4:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     8c6:	2325      	movs	r3, #37	; 0x25
     8c8:	5cf3      	ldrb	r3, [r6, r3]
     8ca:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
     8cc:	7ef3      	ldrb	r3, [r6, #27]
     8ce:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     8d0:	7f33      	ldrb	r3, [r6, #28]
     8d2:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
     8d4:	682b      	ldr	r3, [r5, #0]
     8d6:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     8d8:	0018      	movs	r0, r3
     8da:	4ba0      	ldr	r3, [pc, #640]	; (b5c <usart_init+0x30c>)
     8dc:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     8de:	3014      	adds	r0, #20
	uint16_t baud  = 0;
     8e0:	2200      	movs	r2, #0
     8e2:	230e      	movs	r3, #14
     8e4:	a906      	add	r1, sp, #24
     8e6:	468c      	mov	ip, r1
     8e8:	4463      	add	r3, ip
     8ea:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
     8ec:	8a32      	ldrh	r2, [r6, #16]
     8ee:	9202      	str	r2, [sp, #8]
     8f0:	2380      	movs	r3, #128	; 0x80
     8f2:	01db      	lsls	r3, r3, #7
     8f4:	429a      	cmp	r2, r3
     8f6:	d100      	bne.n	8fa <usart_init+0xaa>
     8f8:	e09e      	b.n	a38 <usart_init+0x1e8>
     8fa:	d90f      	bls.n	91c <usart_init+0xcc>
     8fc:	23c0      	movs	r3, #192	; 0xc0
     8fe:	01db      	lsls	r3, r3, #7
     900:	9a02      	ldr	r2, [sp, #8]
     902:	429a      	cmp	r2, r3
     904:	d100      	bne.n	908 <usart_init+0xb8>
     906:	e092      	b.n	a2e <usart_init+0x1de>
     908:	2380      	movs	r3, #128	; 0x80
     90a:	021b      	lsls	r3, r3, #8
     90c:	429a      	cmp	r2, r3
     90e:	d000      	beq.n	912 <usart_init+0xc2>
     910:	e11f      	b.n	b52 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     912:	2303      	movs	r3, #3
     914:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     916:	2300      	movs	r3, #0
     918:	9307      	str	r3, [sp, #28]
     91a:	e008      	b.n	92e <usart_init+0xde>
	switch (config->sample_rate) {
     91c:	2380      	movs	r3, #128	; 0x80
     91e:	019b      	lsls	r3, r3, #6
     920:	429a      	cmp	r2, r3
     922:	d000      	beq.n	926 <usart_init+0xd6>
     924:	e115      	b.n	b52 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     926:	2310      	movs	r3, #16
     928:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     92a:	3b0f      	subs	r3, #15
     92c:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
     92e:	6833      	ldr	r3, [r6, #0]
     930:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     932:	68f3      	ldr	r3, [r6, #12]
     934:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
     936:	6973      	ldr	r3, [r6, #20]
     938:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     93a:	7e33      	ldrb	r3, [r6, #24]
     93c:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     93e:	2326      	movs	r3, #38	; 0x26
     940:	5cf3      	ldrb	r3, [r6, r3]
     942:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     944:	6873      	ldr	r3, [r6, #4]
     946:	4699      	mov	r9, r3
	switch (transfer_mode)
     948:	2b00      	cmp	r3, #0
     94a:	d100      	bne.n	94e <usart_init+0xfe>
     94c:	e0a0      	b.n	a90 <usart_init+0x240>
     94e:	2380      	movs	r3, #128	; 0x80
     950:	055b      	lsls	r3, r3, #21
     952:	4599      	cmp	r9, r3
     954:	d100      	bne.n	958 <usart_init+0x108>
     956:	e084      	b.n	a62 <usart_init+0x212>
	if(config->encoding_format_enable) {
     958:	7e73      	ldrb	r3, [r6, #25]
     95a:	2b00      	cmp	r3, #0
     95c:	d002      	beq.n	964 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     95e:	7eb3      	ldrb	r3, [r6, #26]
     960:	4642      	mov	r2, r8
     962:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     964:	682a      	ldr	r2, [r5, #0]
     966:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     968:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     96a:	2b00      	cmp	r3, #0
     96c:	d1fc      	bne.n	968 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
     96e:	330e      	adds	r3, #14
     970:	aa06      	add	r2, sp, #24
     972:	4694      	mov	ip, r2
     974:	4463      	add	r3, ip
     976:	881b      	ldrh	r3, [r3, #0]
     978:	4642      	mov	r2, r8
     97a:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
     97c:	9b05      	ldr	r3, [sp, #20]
     97e:	9a03      	ldr	r2, [sp, #12]
     980:	4313      	orrs	r3, r2
     982:	9a04      	ldr	r2, [sp, #16]
     984:	4313      	orrs	r3, r2
     986:	464a      	mov	r2, r9
     988:	4313      	orrs	r3, r2
     98a:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     98c:	465b      	mov	r3, fp
     98e:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
     990:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     992:	4653      	mov	r3, sl
     994:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     996:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
     998:	2327      	movs	r3, #39	; 0x27
     99a:	5cf3      	ldrb	r3, [r6, r3]
     99c:	2b00      	cmp	r3, #0
     99e:	d101      	bne.n	9a4 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     9a0:	3304      	adds	r3, #4
     9a2:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     9a4:	7e73      	ldrb	r3, [r6, #25]
     9a6:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     9a8:	7f32      	ldrb	r2, [r6, #28]
     9aa:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     9ac:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     9ae:	7f72      	ldrb	r2, [r6, #29]
     9b0:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     9b2:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     9b4:	2224      	movs	r2, #36	; 0x24
     9b6:	5cb2      	ldrb	r2, [r6, r2]
     9b8:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     9ba:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     9bc:	2225      	movs	r2, #37	; 0x25
     9be:	5cb2      	ldrb	r2, [r6, r2]
     9c0:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     9c2:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
     9c4:	7ab1      	ldrb	r1, [r6, #10]
     9c6:	7af2      	ldrb	r2, [r6, #11]
     9c8:	4311      	orrs	r1, r2
     9ca:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
     9cc:	8933      	ldrh	r3, [r6, #8]
     9ce:	2bff      	cmp	r3, #255	; 0xff
     9d0:	d100      	bne.n	9d4 <usart_init+0x184>
     9d2:	e081      	b.n	ad8 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     9d4:	2280      	movs	r2, #128	; 0x80
     9d6:	0452      	lsls	r2, r2, #17
     9d8:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     9da:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     9dc:	232c      	movs	r3, #44	; 0x2c
     9de:	5cf3      	ldrb	r3, [r6, r3]
     9e0:	2b00      	cmp	r3, #0
     9e2:	d103      	bne.n	9ec <usart_init+0x19c>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     9e4:	4b62      	ldr	r3, [pc, #392]	; (b70 <usart_init+0x320>)
     9e6:	789b      	ldrb	r3, [r3, #2]
     9e8:	079b      	lsls	r3, r3, #30
     9ea:	d501      	bpl.n	9f0 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     9ec:	2380      	movs	r3, #128	; 0x80
     9ee:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
     9f0:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     9f2:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     9f4:	2b00      	cmp	r3, #0
     9f6:	d1fc      	bne.n	9f2 <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
     9f8:	4643      	mov	r3, r8
     9fa:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     9fc:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     9fe:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     a00:	2b00      	cmp	r3, #0
     a02:	d1fc      	bne.n	9fe <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
     a04:	4643      	mov	r3, r8
     a06:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     a08:	ab0e      	add	r3, sp, #56	; 0x38
     a0a:	2280      	movs	r2, #128	; 0x80
     a0c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     a0e:	2200      	movs	r2, #0
     a10:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
     a12:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     a14:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     a16:	6b33      	ldr	r3, [r6, #48]	; 0x30
     a18:	930a      	str	r3, [sp, #40]	; 0x28
     a1a:	6b73      	ldr	r3, [r6, #52]	; 0x34
     a1c:	930b      	str	r3, [sp, #44]	; 0x2c
     a1e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
     a20:	930c      	str	r3, [sp, #48]	; 0x30
     a22:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     a24:	9302      	str	r3, [sp, #8]
     a26:	930d      	str	r3, [sp, #52]	; 0x34
     a28:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     a2a:	ae0a      	add	r6, sp, #40	; 0x28
     a2c:	e063      	b.n	af6 <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     a2e:	2308      	movs	r3, #8
     a30:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     a32:	3b07      	subs	r3, #7
     a34:	9307      	str	r3, [sp, #28]
     a36:	e77a      	b.n	92e <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
     a38:	6833      	ldr	r3, [r6, #0]
     a3a:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     a3c:	68f3      	ldr	r3, [r6, #12]
     a3e:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
     a40:	6973      	ldr	r3, [r6, #20]
     a42:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     a44:	7e33      	ldrb	r3, [r6, #24]
     a46:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     a48:	2326      	movs	r3, #38	; 0x26
     a4a:	5cf3      	ldrb	r3, [r6, r3]
     a4c:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     a4e:	6873      	ldr	r3, [r6, #4]
     a50:	4699      	mov	r9, r3
	switch (transfer_mode)
     a52:	2b00      	cmp	r3, #0
     a54:	d018      	beq.n	a88 <usart_init+0x238>
     a56:	2380      	movs	r3, #128	; 0x80
     a58:	055b      	lsls	r3, r3, #21
     a5a:	4599      	cmp	r9, r3
     a5c:	d001      	beq.n	a62 <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
     a5e:	2000      	movs	r0, #0
     a60:	e025      	b.n	aae <usart_init+0x25e>
			if (!config->use_external_clock) {
     a62:	2327      	movs	r3, #39	; 0x27
     a64:	5cf3      	ldrb	r3, [r6, r3]
     a66:	2b00      	cmp	r3, #0
     a68:	d000      	beq.n	a6c <usart_init+0x21c>
     a6a:	e775      	b.n	958 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     a6c:	6a33      	ldr	r3, [r6, #32]
     a6e:	001f      	movs	r7, r3
     a70:	b2c0      	uxtb	r0, r0
     a72:	4b40      	ldr	r3, [pc, #256]	; (b74 <usart_init+0x324>)
     a74:	4798      	blx	r3
     a76:	0001      	movs	r1, r0
     a78:	220e      	movs	r2, #14
     a7a:	ab06      	add	r3, sp, #24
     a7c:	469c      	mov	ip, r3
     a7e:	4462      	add	r2, ip
     a80:	0038      	movs	r0, r7
     a82:	4b3d      	ldr	r3, [pc, #244]	; (b78 <usart_init+0x328>)
     a84:	4798      	blx	r3
     a86:	e012      	b.n	aae <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     a88:	2308      	movs	r3, #8
     a8a:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     a8c:	2300      	movs	r3, #0
     a8e:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
     a90:	2327      	movs	r3, #39	; 0x27
     a92:	5cf3      	ldrb	r3, [r6, r3]
     a94:	2b00      	cmp	r3, #0
     a96:	d00e      	beq.n	ab6 <usart_init+0x266>
				status_code =
     a98:	9b06      	ldr	r3, [sp, #24]
     a9a:	9300      	str	r3, [sp, #0]
     a9c:	9b07      	ldr	r3, [sp, #28]
     a9e:	220e      	movs	r2, #14
     aa0:	a906      	add	r1, sp, #24
     aa2:	468c      	mov	ip, r1
     aa4:	4462      	add	r2, ip
     aa6:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     aa8:	6a30      	ldr	r0, [r6, #32]
     aaa:	4f34      	ldr	r7, [pc, #208]	; (b7c <usart_init+0x32c>)
     aac:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
     aae:	2800      	cmp	r0, #0
     ab0:	d000      	beq.n	ab4 <usart_init+0x264>
     ab2:	e6e0      	b.n	876 <usart_init+0x26>
     ab4:	e750      	b.n	958 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
     ab6:	6a33      	ldr	r3, [r6, #32]
     ab8:	001f      	movs	r7, r3
     aba:	b2c0      	uxtb	r0, r0
     abc:	4b2d      	ldr	r3, [pc, #180]	; (b74 <usart_init+0x324>)
     abe:	4798      	blx	r3
     ac0:	0001      	movs	r1, r0
				status_code =
     ac2:	9b06      	ldr	r3, [sp, #24]
     ac4:	9300      	str	r3, [sp, #0]
     ac6:	9b07      	ldr	r3, [sp, #28]
     ac8:	220e      	movs	r2, #14
     aca:	a806      	add	r0, sp, #24
     acc:	4684      	mov	ip, r0
     ace:	4462      	add	r2, ip
     ad0:	0038      	movs	r0, r7
     ad2:	4f2a      	ldr	r7, [pc, #168]	; (b7c <usart_init+0x32c>)
     ad4:	47b8      	blx	r7
     ad6:	e7ea      	b.n	aae <usart_init+0x25e>
		if(config->lin_slave_enable) {
     ad8:	7ef3      	ldrb	r3, [r6, #27]
     ada:	2b00      	cmp	r3, #0
     adc:	d100      	bne.n	ae0 <usart_init+0x290>
     ade:	e77d      	b.n	9dc <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     ae0:	2380      	movs	r3, #128	; 0x80
     ae2:	04db      	lsls	r3, r3, #19
     ae4:	431f      	orrs	r7, r3
     ae6:	e779      	b.n	9dc <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     ae8:	0020      	movs	r0, r4
     aea:	4b25      	ldr	r3, [pc, #148]	; (b80 <usart_init+0x330>)
     aec:	4798      	blx	r3
     aee:	e007      	b.n	b00 <usart_init+0x2b0>
     af0:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     af2:	2f04      	cmp	r7, #4
     af4:	d00d      	beq.n	b12 <usart_init+0x2c2>
     af6:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     af8:	00bb      	lsls	r3, r7, #2
     afa:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
     afc:	2800      	cmp	r0, #0
     afe:	d0f3      	beq.n	ae8 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
     b00:	1c43      	adds	r3, r0, #1
     b02:	d0f5      	beq.n	af0 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     b04:	a90e      	add	r1, sp, #56	; 0x38
     b06:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     b08:	0c00      	lsrs	r0, r0, #16
     b0a:	b2c0      	uxtb	r0, r0
     b0c:	4b1d      	ldr	r3, [pc, #116]	; (b84 <usart_init+0x334>)
     b0e:	4798      	blx	r3
     b10:	e7ee      	b.n	af0 <usart_init+0x2a0>
		module->callback[i]            = NULL;
     b12:	2300      	movs	r3, #0
     b14:	60eb      	str	r3, [r5, #12]
     b16:	612b      	str	r3, [r5, #16]
     b18:	616b      	str	r3, [r5, #20]
     b1a:	61ab      	str	r3, [r5, #24]
     b1c:	61eb      	str	r3, [r5, #28]
     b1e:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
     b20:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     b22:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     b24:	2200      	movs	r2, #0
     b26:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     b28:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     b2a:	3330      	adds	r3, #48	; 0x30
     b2c:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     b2e:	3301      	adds	r3, #1
     b30:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     b32:	3301      	adds	r3, #1
     b34:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     b36:	3301      	adds	r3, #1
     b38:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     b3a:	6828      	ldr	r0, [r5, #0]
     b3c:	4b07      	ldr	r3, [pc, #28]	; (b5c <usart_init+0x30c>)
     b3e:	4798      	blx	r3
     b40:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     b42:	4911      	ldr	r1, [pc, #68]	; (b88 <usart_init+0x338>)
     b44:	4b11      	ldr	r3, [pc, #68]	; (b8c <usart_init+0x33c>)
     b46:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     b48:	00a4      	lsls	r4, r4, #2
     b4a:	4b11      	ldr	r3, [pc, #68]	; (b90 <usart_init+0x340>)
     b4c:	50e5      	str	r5, [r4, r3]
	return status_code;
     b4e:	2000      	movs	r0, #0
     b50:	e691      	b.n	876 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     b52:	2310      	movs	r3, #16
     b54:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     b56:	2300      	movs	r3, #0
     b58:	9307      	str	r3, [sp, #28]
     b5a:	e6e8      	b.n	92e <usart_init+0xde>
     b5c:	00000451 	.word	0x00000451
     b60:	40000400 	.word	0x40000400
     b64:	00001495 	.word	0x00001495
     b68:	00001409 	.word	0x00001409
     b6c:	0000028d 	.word	0x0000028d
     b70:	41002000 	.word	0x41002000
     b74:	000014b1 	.word	0x000014b1
     b78:	000001cf 	.word	0x000001cf
     b7c:	000001f9 	.word	0x000001f9
     b80:	000002d9 	.word	0x000002d9
     b84:	0000158d 	.word	0x0000158d
     b88:	00000c31 	.word	0x00000c31
     b8c:	00000dc9 	.word	0x00000dc9
     b90:	20000100 	.word	0x20000100

00000b94 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     b94:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
     b96:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
     b98:	2a00      	cmp	r2, #0
     b9a:	d101      	bne.n	ba0 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
     b9c:	0018      	movs	r0, r3
     b9e:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
     ba0:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
     ba2:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     ba4:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
     ba6:	2a00      	cmp	r2, #0
     ba8:	d1f8      	bne.n	b9c <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     baa:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
     bac:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
     bae:	2a00      	cmp	r2, #0
     bb0:	d1fc      	bne.n	bac <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
     bb2:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     bb4:	2102      	movs	r1, #2
     bb6:	7e1a      	ldrb	r2, [r3, #24]
     bb8:	420a      	tst	r2, r1
     bba:	d0fc      	beq.n	bb6 <usart_write_wait+0x22>
	return STATUS_OK;
     bbc:	2300      	movs	r3, #0
     bbe:	e7ed      	b.n	b9c <usart_write_wait+0x8>

00000bc0 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     bc0:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
     bc2:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
     bc4:	2a00      	cmp	r2, #0
     bc6:	d101      	bne.n	bcc <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
     bc8:	0018      	movs	r0, r3
     bca:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
     bcc:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
     bce:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     bd0:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
     bd2:	2a00      	cmp	r2, #0
     bd4:	d1f8      	bne.n	bc8 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     bd6:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
     bd8:	7e10      	ldrb	r0, [r2, #24]
     bda:	0740      	lsls	r0, r0, #29
     bdc:	d5f4      	bpl.n	bc8 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
     bde:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     be0:	2b00      	cmp	r3, #0
     be2:	d1fc      	bne.n	bde <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     be4:	8b53      	ldrh	r3, [r2, #26]
     be6:	b2db      	uxtb	r3, r3
	if (error_code) {
     be8:	0698      	lsls	r0, r3, #26
     bea:	d01d      	beq.n	c28 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
     bec:	0798      	lsls	r0, r3, #30
     bee:	d503      	bpl.n	bf8 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     bf0:	2302      	movs	r3, #2
     bf2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
     bf4:	3318      	adds	r3, #24
     bf6:	e7e7      	b.n	bc8 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     bf8:	0758      	lsls	r0, r3, #29
     bfa:	d503      	bpl.n	c04 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     bfc:	2304      	movs	r3, #4
     bfe:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
     c00:	331a      	adds	r3, #26
     c02:	e7e1      	b.n	bc8 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
     c04:	07d8      	lsls	r0, r3, #31
     c06:	d503      	bpl.n	c10 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     c08:	2301      	movs	r3, #1
     c0a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
     c0c:	3312      	adds	r3, #18
     c0e:	e7db      	b.n	bc8 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
     c10:	06d8      	lsls	r0, r3, #27
     c12:	d503      	bpl.n	c1c <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     c14:	2310      	movs	r3, #16
     c16:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
     c18:	3332      	adds	r3, #50	; 0x32
     c1a:	e7d5      	b.n	bc8 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
     c1c:	069b      	lsls	r3, r3, #26
     c1e:	d503      	bpl.n	c28 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     c20:	2320      	movs	r3, #32
     c22:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
     c24:	3321      	adds	r3, #33	; 0x21
     c26:	e7cf      	b.n	bc8 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
     c28:	8d13      	ldrh	r3, [r2, #40]	; 0x28
     c2a:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
     c2c:	2300      	movs	r3, #0
     c2e:	e7cb      	b.n	bc8 <usart_read_wait+0x8>

00000c30 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     c32:	0080      	lsls	r0, r0, #2
     c34:	4b62      	ldr	r3, [pc, #392]	; (dc0 <_usart_interrupt_handler+0x190>)
     c36:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     c38:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     c3a:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
     c3c:	2b00      	cmp	r3, #0
     c3e:	d1fc      	bne.n	c3a <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     c40:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     c42:	7da6      	ldrb	r6, [r4, #22]
     c44:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
     c46:	2330      	movs	r3, #48	; 0x30
     c48:	5ceb      	ldrb	r3, [r5, r3]
     c4a:	2231      	movs	r2, #49	; 0x31
     c4c:	5caf      	ldrb	r7, [r5, r2]
     c4e:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     c50:	07f3      	lsls	r3, r6, #31
     c52:	d522      	bpl.n	c9a <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
     c54:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     c56:	b29b      	uxth	r3, r3
     c58:	2b00      	cmp	r3, #0
     c5a:	d01c      	beq.n	c96 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     c5c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
     c5e:	7813      	ldrb	r3, [r2, #0]
     c60:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     c62:	1c51      	adds	r1, r2, #1
     c64:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     c66:	7969      	ldrb	r1, [r5, #5]
     c68:	2901      	cmp	r1, #1
     c6a:	d00e      	beq.n	c8a <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     c6c:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     c6e:	05db      	lsls	r3, r3, #23
     c70:	0ddb      	lsrs	r3, r3, #23
     c72:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     c74:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     c76:	3b01      	subs	r3, #1
     c78:	b29b      	uxth	r3, r3
     c7a:	85eb      	strh	r3, [r5, #46]	; 0x2e
     c7c:	2b00      	cmp	r3, #0
     c7e:	d10c      	bne.n	c9a <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     c80:	3301      	adds	r3, #1
     c82:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     c84:	3301      	adds	r3, #1
     c86:	75a3      	strb	r3, [r4, #22]
     c88:	e007      	b.n	c9a <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     c8a:	7851      	ldrb	r1, [r2, #1]
     c8c:	0209      	lsls	r1, r1, #8
     c8e:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
     c90:	3202      	adds	r2, #2
     c92:	62aa      	str	r2, [r5, #40]	; 0x28
     c94:	e7eb      	b.n	c6e <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     c96:	2301      	movs	r3, #1
     c98:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     c9a:	07b3      	lsls	r3, r6, #30
     c9c:	d506      	bpl.n	cac <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     c9e:	2302      	movs	r3, #2
     ca0:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
     ca2:	2200      	movs	r2, #0
     ca4:	3331      	adds	r3, #49	; 0x31
     ca6:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     ca8:	07fb      	lsls	r3, r7, #31
     caa:	d41a      	bmi.n	ce2 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     cac:	0773      	lsls	r3, r6, #29
     cae:	d565      	bpl.n	d7c <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
     cb0:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     cb2:	b29b      	uxth	r3, r3
     cb4:	2b00      	cmp	r3, #0
     cb6:	d05f      	beq.n	d78 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     cb8:	8b63      	ldrh	r3, [r4, #26]
     cba:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     cbc:	071a      	lsls	r2, r3, #28
     cbe:	d414      	bmi.n	cea <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     cc0:	223f      	movs	r2, #63	; 0x3f
     cc2:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     cc4:	2b00      	cmp	r3, #0
     cc6:	d034      	beq.n	d32 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     cc8:	079a      	lsls	r2, r3, #30
     cca:	d511      	bpl.n	cf0 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     ccc:	221a      	movs	r2, #26
     cce:	2332      	movs	r3, #50	; 0x32
     cd0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     cd2:	3b30      	subs	r3, #48	; 0x30
     cd4:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     cd6:	077b      	lsls	r3, r7, #29
     cd8:	d550      	bpl.n	d7c <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     cda:	0028      	movs	r0, r5
     cdc:	696b      	ldr	r3, [r5, #20]
     cde:	4798      	blx	r3
     ce0:	e04c      	b.n	d7c <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     ce2:	0028      	movs	r0, r5
     ce4:	68eb      	ldr	r3, [r5, #12]
     ce6:	4798      	blx	r3
     ce8:	e7e0      	b.n	cac <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
     cea:	2237      	movs	r2, #55	; 0x37
     cec:	4013      	ands	r3, r2
     cee:	e7e9      	b.n	cc4 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     cf0:	075a      	lsls	r2, r3, #29
     cf2:	d505      	bpl.n	d00 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
     cf4:	221e      	movs	r2, #30
     cf6:	2332      	movs	r3, #50	; 0x32
     cf8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     cfa:	3b2e      	subs	r3, #46	; 0x2e
     cfc:	8363      	strh	r3, [r4, #26]
     cfe:	e7ea      	b.n	cd6 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     d00:	07da      	lsls	r2, r3, #31
     d02:	d505      	bpl.n	d10 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
     d04:	2213      	movs	r2, #19
     d06:	2332      	movs	r3, #50	; 0x32
     d08:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     d0a:	3b31      	subs	r3, #49	; 0x31
     d0c:	8363      	strh	r3, [r4, #26]
     d0e:	e7e2      	b.n	cd6 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     d10:	06da      	lsls	r2, r3, #27
     d12:	d505      	bpl.n	d20 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
     d14:	2242      	movs	r2, #66	; 0x42
     d16:	2332      	movs	r3, #50	; 0x32
     d18:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     d1a:	3b22      	subs	r3, #34	; 0x22
     d1c:	8363      	strh	r3, [r4, #26]
     d1e:	e7da      	b.n	cd6 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
     d20:	2220      	movs	r2, #32
     d22:	421a      	tst	r2, r3
     d24:	d0d7      	beq.n	cd6 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
     d26:	3221      	adds	r2, #33	; 0x21
     d28:	2332      	movs	r3, #50	; 0x32
     d2a:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     d2c:	3b12      	subs	r3, #18
     d2e:	8363      	strh	r3, [r4, #26]
     d30:	e7d1      	b.n	cd6 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     d32:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     d34:	05db      	lsls	r3, r3, #23
     d36:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
     d38:	b2da      	uxtb	r2, r3
     d3a:	6a69      	ldr	r1, [r5, #36]	; 0x24
     d3c:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
     d3e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
     d40:	1c51      	adds	r1, r2, #1
     d42:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     d44:	7969      	ldrb	r1, [r5, #5]
     d46:	2901      	cmp	r1, #1
     d48:	d010      	beq.n	d6c <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
     d4a:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     d4c:	3b01      	subs	r3, #1
     d4e:	b29b      	uxth	r3, r3
     d50:	85ab      	strh	r3, [r5, #44]	; 0x2c
     d52:	2b00      	cmp	r3, #0
     d54:	d112      	bne.n	d7c <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     d56:	3304      	adds	r3, #4
     d58:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
     d5a:	2200      	movs	r2, #0
     d5c:	332e      	adds	r3, #46	; 0x2e
     d5e:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
     d60:	07bb      	lsls	r3, r7, #30
     d62:	d50b      	bpl.n	d7c <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     d64:	0028      	movs	r0, r5
     d66:	692b      	ldr	r3, [r5, #16]
     d68:	4798      	blx	r3
     d6a:	e007      	b.n	d7c <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
     d6c:	0a1b      	lsrs	r3, r3, #8
     d6e:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
     d70:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     d72:	3301      	adds	r3, #1
     d74:	626b      	str	r3, [r5, #36]	; 0x24
     d76:	e7e8      	b.n	d4a <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     d78:	2304      	movs	r3, #4
     d7a:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
     d7c:	06f3      	lsls	r3, r6, #27
     d7e:	d504      	bpl.n	d8a <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
     d80:	2310      	movs	r3, #16
     d82:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
     d84:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
     d86:	06fb      	lsls	r3, r7, #27
     d88:	d40e      	bmi.n	da8 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
     d8a:	06b3      	lsls	r3, r6, #26
     d8c:	d504      	bpl.n	d98 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
     d8e:	2320      	movs	r3, #32
     d90:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
     d92:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
     d94:	073b      	lsls	r3, r7, #28
     d96:	d40b      	bmi.n	db0 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
     d98:	0733      	lsls	r3, r6, #28
     d9a:	d504      	bpl.n	da6 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
     d9c:	2308      	movs	r3, #8
     d9e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
     da0:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
     da2:	06bb      	lsls	r3, r7, #26
     da4:	d408      	bmi.n	db8 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
     da6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
     da8:	0028      	movs	r0, r5
     daa:	69eb      	ldr	r3, [r5, #28]
     dac:	4798      	blx	r3
     dae:	e7ec      	b.n	d8a <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
     db0:	0028      	movs	r0, r5
     db2:	69ab      	ldr	r3, [r5, #24]
     db4:	4798      	blx	r3
     db6:	e7ef      	b.n	d98 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
     db8:	6a2b      	ldr	r3, [r5, #32]
     dba:	0028      	movs	r0, r5
     dbc:	4798      	blx	r3
}
     dbe:	e7f2      	b.n	da6 <_usart_interrupt_handler+0x176>
     dc0:	20000100 	.word	0x20000100

00000dc4 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     dc4:	4770      	bx	lr
	...

00000dc8 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     dca:	4b0a      	ldr	r3, [pc, #40]	; (df4 <_sercom_set_handler+0x2c>)
     dcc:	781b      	ldrb	r3, [r3, #0]
     dce:	2b00      	cmp	r3, #0
     dd0:	d10c      	bne.n	dec <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     dd2:	4f09      	ldr	r7, [pc, #36]	; (df8 <_sercom_set_handler+0x30>)
     dd4:	4e09      	ldr	r6, [pc, #36]	; (dfc <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     dd6:	4d0a      	ldr	r5, [pc, #40]	; (e00 <_sercom_set_handler+0x38>)
     dd8:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     dda:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     ddc:	195a      	adds	r2, r3, r5
     dde:	6014      	str	r4, [r2, #0]
     de0:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     de2:	2b18      	cmp	r3, #24
     de4:	d1f9      	bne.n	dda <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     de6:	2201      	movs	r2, #1
     de8:	4b02      	ldr	r3, [pc, #8]	; (df4 <_sercom_set_handler+0x2c>)
     dea:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     dec:	0080      	lsls	r0, r0, #2
     dee:	4b02      	ldr	r3, [pc, #8]	; (df8 <_sercom_set_handler+0x30>)
     df0:	50c1      	str	r1, [r0, r3]
}
     df2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     df4:	200000a2 	.word	0x200000a2
     df8:	200000a4 	.word	0x200000a4
     dfc:	00000dc5 	.word	0x00000dc5
     e00:	20000100 	.word	0x20000100

00000e04 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     e04:	b500      	push	{lr}
     e06:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     e08:	2309      	movs	r3, #9
     e0a:	466a      	mov	r2, sp
     e0c:	7013      	strb	r3, [r2, #0]
     e0e:	3301      	adds	r3, #1
     e10:	7053      	strb	r3, [r2, #1]
     e12:	3301      	adds	r3, #1
     e14:	7093      	strb	r3, [r2, #2]
     e16:	3301      	adds	r3, #1
     e18:	70d3      	strb	r3, [r2, #3]
     e1a:	3301      	adds	r3, #1
     e1c:	7113      	strb	r3, [r2, #4]
     e1e:	3301      	adds	r3, #1
     e20:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     e22:	4b03      	ldr	r3, [pc, #12]	; (e30 <_sercom_get_interrupt_vector+0x2c>)
     e24:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     e26:	466b      	mov	r3, sp
     e28:	5618      	ldrsb	r0, [r3, r0]
}
     e2a:	b003      	add	sp, #12
     e2c:	bd00      	pop	{pc}
     e2e:	46c0      	nop			; (mov r8, r8)
     e30:	00000451 	.word	0x00000451

00000e34 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     e34:	b510      	push	{r4, lr}
     e36:	4b02      	ldr	r3, [pc, #8]	; (e40 <SERCOM0_Handler+0xc>)
     e38:	681b      	ldr	r3, [r3, #0]
     e3a:	2000      	movs	r0, #0
     e3c:	4798      	blx	r3
     e3e:	bd10      	pop	{r4, pc}
     e40:	200000a4 	.word	0x200000a4

00000e44 <SERCOM1_Handler>:
     e44:	b510      	push	{r4, lr}
     e46:	4b02      	ldr	r3, [pc, #8]	; (e50 <SERCOM1_Handler+0xc>)
     e48:	685b      	ldr	r3, [r3, #4]
     e4a:	2001      	movs	r0, #1
     e4c:	4798      	blx	r3
     e4e:	bd10      	pop	{r4, pc}
     e50:	200000a4 	.word	0x200000a4

00000e54 <SERCOM2_Handler>:
     e54:	b510      	push	{r4, lr}
     e56:	4b02      	ldr	r3, [pc, #8]	; (e60 <SERCOM2_Handler+0xc>)
     e58:	689b      	ldr	r3, [r3, #8]
     e5a:	2002      	movs	r0, #2
     e5c:	4798      	blx	r3
     e5e:	bd10      	pop	{r4, pc}
     e60:	200000a4 	.word	0x200000a4

00000e64 <SERCOM3_Handler>:
     e64:	b510      	push	{r4, lr}
     e66:	4b02      	ldr	r3, [pc, #8]	; (e70 <SERCOM3_Handler+0xc>)
     e68:	68db      	ldr	r3, [r3, #12]
     e6a:	2003      	movs	r0, #3
     e6c:	4798      	blx	r3
     e6e:	bd10      	pop	{r4, pc}
     e70:	200000a4 	.word	0x200000a4

00000e74 <SERCOM4_Handler>:
     e74:	b510      	push	{r4, lr}
     e76:	4b02      	ldr	r3, [pc, #8]	; (e80 <SERCOM4_Handler+0xc>)
     e78:	691b      	ldr	r3, [r3, #16]
     e7a:	2004      	movs	r0, #4
     e7c:	4798      	blx	r3
     e7e:	bd10      	pop	{r4, pc}
     e80:	200000a4 	.word	0x200000a4

00000e84 <SERCOM5_Handler>:
     e84:	b510      	push	{r4, lr}
     e86:	4b02      	ldr	r3, [pc, #8]	; (e90 <SERCOM5_Handler+0xc>)
     e88:	695b      	ldr	r3, [r3, #20]
     e8a:	2005      	movs	r0, #5
     e8c:	4798      	blx	r3
     e8e:	bd10      	pop	{r4, pc}
     e90:	200000a4 	.word	0x200000a4

00000e94 <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
     e94:	b510      	push	{r4, lr}
	struct events_hook *current_hook = _events_inst.hook_list;
     e96:	4b0b      	ldr	r3, [pc, #44]	; (ec4 <EVSYS_Handler+0x30>)
     e98:	691c      	ldr	r4, [r3, #16]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
     e9a:	490b      	ldr	r1, [pc, #44]	; (ec8 <EVSYS_Handler+0x34>)
     e9c:	698a      	ldr	r2, [r1, #24]
	_events_inst.interrupt_flag_buffer |= flag;
     e9e:	6898      	ldr	r0, [r3, #8]
     ea0:	4302      	orrs	r2, r0
     ea2:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
     ea4:	4b09      	ldr	r3, [pc, #36]	; (ecc <EVSYS_Handler+0x38>)
     ea6:	618b      	str	r3, [r1, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
     ea8:	2c00      	cmp	r4, #0
     eaa:	d005      	beq.n	eb8 <EVSYS_Handler+0x24>
		current_hook->hook_func(current_hook->resource);
     eac:	6820      	ldr	r0, [r4, #0]
     eae:	6863      	ldr	r3, [r4, #4]
     eb0:	4798      	blx	r3
		current_hook = current_hook->next;
     eb2:	68a4      	ldr	r4, [r4, #8]
	while (current_hook != NULL) {
     eb4:	2c00      	cmp	r4, #0
     eb6:	d1f9      	bne.n	eac <EVSYS_Handler+0x18>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
     eb8:	4b02      	ldr	r3, [pc, #8]	; (ec4 <EVSYS_Handler+0x30>)
     eba:	68d9      	ldr	r1, [r3, #12]
	_events_inst.interrupt_flag_buffer &= ~flag;
     ebc:	689a      	ldr	r2, [r3, #8]
     ebe:	438a      	bics	r2, r1
     ec0:	609a      	str	r2, [r3, #8]
}
     ec2:	bd10      	pop	{r4, pc}
     ec4:	20000000 	.word	0x20000000
     ec8:	42000400 	.word	0x42000400
     ecc:	0f0fffff 	.word	0x0f0fffff

00000ed0 <_system_events_init>:
     ed0:	4a06      	ldr	r2, [pc, #24]	; (eec <_system_events_init+0x1c>)
     ed2:	6a13      	ldr	r3, [r2, #32]
     ed4:	2102      	movs	r1, #2
     ed6:	430b      	orrs	r3, r1
     ed8:	6213      	str	r3, [r2, #32]
{
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
     eda:	2201      	movs	r2, #1
     edc:	4b04      	ldr	r3, [pc, #16]	; (ef0 <_system_events_init+0x20>)
     ede:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
     ee0:	0019      	movs	r1, r3
     ee2:	780b      	ldrb	r3, [r1, #0]
     ee4:	4213      	tst	r3, r2
     ee6:	d1fc      	bne.n	ee2 <_system_events_init+0x12>
	}
}
     ee8:	4770      	bx	lr
     eea:	46c0      	nop			; (mov r8, r8)
     eec:	40000400 	.word	0x40000400
     ef0:	42000400 	.word	0x42000400

00000ef4 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     ef4:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     ef6:	2000      	movs	r0, #0
     ef8:	4b08      	ldr	r3, [pc, #32]	; (f1c <delay_init+0x28>)
     efa:	4798      	blx	r3
     efc:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     efe:	4c08      	ldr	r4, [pc, #32]	; (f20 <delay_init+0x2c>)
     f00:	21fa      	movs	r1, #250	; 0xfa
     f02:	0089      	lsls	r1, r1, #2
     f04:	47a0      	blx	r4
     f06:	4b07      	ldr	r3, [pc, #28]	; (f24 <delay_init+0x30>)
     f08:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     f0a:	4907      	ldr	r1, [pc, #28]	; (f28 <delay_init+0x34>)
     f0c:	0028      	movs	r0, r5
     f0e:	47a0      	blx	r4
     f10:	4b06      	ldr	r3, [pc, #24]	; (f2c <delay_init+0x38>)
     f12:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     f14:	2205      	movs	r2, #5
     f16:	4b06      	ldr	r3, [pc, #24]	; (f30 <delay_init+0x3c>)
     f18:	601a      	str	r2, [r3, #0]
}
     f1a:	bd70      	pop	{r4, r5, r6, pc}
     f1c:	0000137d 	.word	0x0000137d
     f20:	00001ab9 	.word	0x00001ab9
     f24:	20000014 	.word	0x20000014
     f28:	000f4240 	.word	0x000f4240
     f2c:	20000018 	.word	0x20000018
     f30:	e000e010 	.word	0xe000e010

00000f34 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     f34:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     f36:	4b08      	ldr	r3, [pc, #32]	; (f58 <delay_cycles_ms+0x24>)
     f38:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     f3a:	4a08      	ldr	r2, [pc, #32]	; (f5c <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     f3c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     f3e:	2180      	movs	r1, #128	; 0x80
     f40:	0249      	lsls	r1, r1, #9
	while (n--) {
     f42:	3801      	subs	r0, #1
     f44:	d307      	bcc.n	f56 <delay_cycles_ms+0x22>
	if (n > 0) {
     f46:	2c00      	cmp	r4, #0
     f48:	d0fb      	beq.n	f42 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     f4a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     f4c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     f4e:	6813      	ldr	r3, [r2, #0]
     f50:	420b      	tst	r3, r1
     f52:	d0fc      	beq.n	f4e <delay_cycles_ms+0x1a>
     f54:	e7f5      	b.n	f42 <delay_cycles_ms+0xe>
	}
}
     f56:	bd30      	pop	{r4, r5, pc}
     f58:	20000014 	.word	0x20000014
     f5c:	e000e010 	.word	0xe000e010

00000f60 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     f60:	4b0c      	ldr	r3, [pc, #48]	; (f94 <cpu_irq_enter_critical+0x34>)
     f62:	681b      	ldr	r3, [r3, #0]
     f64:	2b00      	cmp	r3, #0
     f66:	d106      	bne.n	f76 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     f68:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     f6c:	2b00      	cmp	r3, #0
     f6e:	d007      	beq.n	f80 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     f70:	2200      	movs	r2, #0
     f72:	4b09      	ldr	r3, [pc, #36]	; (f98 <cpu_irq_enter_critical+0x38>)
     f74:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     f76:	4a07      	ldr	r2, [pc, #28]	; (f94 <cpu_irq_enter_critical+0x34>)
     f78:	6813      	ldr	r3, [r2, #0]
     f7a:	3301      	adds	r3, #1
     f7c:	6013      	str	r3, [r2, #0]
}
     f7e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     f80:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     f82:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     f86:	2200      	movs	r2, #0
     f88:	4b04      	ldr	r3, [pc, #16]	; (f9c <cpu_irq_enter_critical+0x3c>)
     f8a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     f8c:	3201      	adds	r2, #1
     f8e:	4b02      	ldr	r3, [pc, #8]	; (f98 <cpu_irq_enter_critical+0x38>)
     f90:	701a      	strb	r2, [r3, #0]
     f92:	e7f0      	b.n	f76 <cpu_irq_enter_critical+0x16>
     f94:	200000bc 	.word	0x200000bc
     f98:	200000c0 	.word	0x200000c0
     f9c:	2000001c 	.word	0x2000001c

00000fa0 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     fa0:	4b08      	ldr	r3, [pc, #32]	; (fc4 <cpu_irq_leave_critical+0x24>)
     fa2:	681a      	ldr	r2, [r3, #0]
     fa4:	3a01      	subs	r2, #1
     fa6:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     fa8:	681b      	ldr	r3, [r3, #0]
     faa:	2b00      	cmp	r3, #0
     fac:	d109      	bne.n	fc2 <cpu_irq_leave_critical+0x22>
     fae:	4b06      	ldr	r3, [pc, #24]	; (fc8 <cpu_irq_leave_critical+0x28>)
     fb0:	781b      	ldrb	r3, [r3, #0]
     fb2:	2b00      	cmp	r3, #0
     fb4:	d005      	beq.n	fc2 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     fb6:	2201      	movs	r2, #1
     fb8:	4b04      	ldr	r3, [pc, #16]	; (fcc <cpu_irq_leave_critical+0x2c>)
     fba:	701a      	strb	r2, [r3, #0]
     fbc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     fc0:	b662      	cpsie	i
	}
}
     fc2:	4770      	bx	lr
     fc4:	200000bc 	.word	0x200000bc
     fc8:	200000c0 	.word	0x200000c0
     fcc:	2000001c 	.word	0x2000001c

00000fd0 <system_board_init>:




void system_board_init(void)
{
     fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
     fd2:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     fd4:	ac01      	add	r4, sp, #4
     fd6:	2501      	movs	r5, #1
     fd8:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     fda:	2700      	movs	r7, #0
     fdc:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     fde:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     fe0:	0021      	movs	r1, r4
     fe2:	2013      	movs	r0, #19
     fe4:	4e06      	ldr	r6, [pc, #24]	; (1000 <system_board_init+0x30>)
     fe6:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     fe8:	2280      	movs	r2, #128	; 0x80
     fea:	0312      	lsls	r2, r2, #12
     fec:	4b05      	ldr	r3, [pc, #20]	; (1004 <system_board_init+0x34>)
     fee:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     ff0:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     ff2:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     ff4:	0021      	movs	r1, r4
     ff6:	201c      	movs	r0, #28
     ff8:	47b0      	blx	r6
	config_pinmux.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;	
	system_pinmux_pin_set_config(PIN_RFCTRL1, &config_pinmux);
	system_pinmux_pin_set_config(PIN_RFCTRL2, &config_pinmux);
#endif

}
     ffa:	b003      	add	sp, #12
     ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ffe:	46c0      	nop			; (mov r8, r8)
    1000:	00001009 	.word	0x00001009
    1004:	41004400 	.word	0x41004400

00001008 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1008:	b500      	push	{lr}
    100a:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    100c:	ab01      	add	r3, sp, #4
    100e:	2280      	movs	r2, #128	; 0x80
    1010:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    1012:	780a      	ldrb	r2, [r1, #0]
    1014:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    1016:	784a      	ldrb	r2, [r1, #1]
    1018:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    101a:	788a      	ldrb	r2, [r1, #2]
    101c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    101e:	0019      	movs	r1, r3
    1020:	4b01      	ldr	r3, [pc, #4]	; (1028 <port_pin_set_config+0x20>)
    1022:	4798      	blx	r3
}
    1024:	b003      	add	sp, #12
    1026:	bd00      	pop	{pc}
    1028:	0000158d 	.word	0x0000158d

0000102c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    102c:	b510      	push	{r4, lr}
	switch (clock_source) {
    102e:	2808      	cmp	r0, #8
    1030:	d803      	bhi.n	103a <system_clock_source_get_hz+0xe>
    1032:	0080      	lsls	r0, r0, #2
    1034:	4b1b      	ldr	r3, [pc, #108]	; (10a4 <system_clock_source_get_hz+0x78>)
    1036:	581b      	ldr	r3, [r3, r0]
    1038:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    103a:	2000      	movs	r0, #0
    103c:	e030      	b.n	10a0 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    103e:	4b1a      	ldr	r3, [pc, #104]	; (10a8 <system_clock_source_get_hz+0x7c>)
    1040:	6918      	ldr	r0, [r3, #16]
    1042:	e02d      	b.n	10a0 <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1044:	4b19      	ldr	r3, [pc, #100]	; (10ac <system_clock_source_get_hz+0x80>)
    1046:	6a1b      	ldr	r3, [r3, #32]
    1048:	059b      	lsls	r3, r3, #22
    104a:	0f9b      	lsrs	r3, r3, #30
    104c:	4818      	ldr	r0, [pc, #96]	; (10b0 <system_clock_source_get_hz+0x84>)
    104e:	40d8      	lsrs	r0, r3
    1050:	e026      	b.n	10a0 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    1052:	4b15      	ldr	r3, [pc, #84]	; (10a8 <system_clock_source_get_hz+0x7c>)
    1054:	6958      	ldr	r0, [r3, #20]
    1056:	e023      	b.n	10a0 <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1058:	4b13      	ldr	r3, [pc, #76]	; (10a8 <system_clock_source_get_hz+0x7c>)
    105a:	681b      	ldr	r3, [r3, #0]
			return 0;
    105c:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    105e:	079b      	lsls	r3, r3, #30
    1060:	d51e      	bpl.n	10a0 <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1062:	4912      	ldr	r1, [pc, #72]	; (10ac <system_clock_source_get_hz+0x80>)
    1064:	2210      	movs	r2, #16
    1066:	68cb      	ldr	r3, [r1, #12]
    1068:	421a      	tst	r2, r3
    106a:	d0fc      	beq.n	1066 <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    106c:	4b0e      	ldr	r3, [pc, #56]	; (10a8 <system_clock_source_get_hz+0x7c>)
    106e:	681b      	ldr	r3, [r3, #0]
    1070:	075b      	lsls	r3, r3, #29
    1072:	d401      	bmi.n	1078 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    1074:	480f      	ldr	r0, [pc, #60]	; (10b4 <system_clock_source_get_hz+0x88>)
    1076:	e013      	b.n	10a0 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1078:	2000      	movs	r0, #0
    107a:	4b0f      	ldr	r3, [pc, #60]	; (10b8 <system_clock_source_get_hz+0x8c>)
    107c:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    107e:	4b0a      	ldr	r3, [pc, #40]	; (10a8 <system_clock_source_get_hz+0x7c>)
    1080:	689b      	ldr	r3, [r3, #8]
    1082:	041b      	lsls	r3, r3, #16
    1084:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1086:	4358      	muls	r0, r3
    1088:	e00a      	b.n	10a0 <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    108a:	2350      	movs	r3, #80	; 0x50
    108c:	4a07      	ldr	r2, [pc, #28]	; (10ac <system_clock_source_get_hz+0x80>)
    108e:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1090:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1092:	075b      	lsls	r3, r3, #29
    1094:	d504      	bpl.n	10a0 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    1096:	4b04      	ldr	r3, [pc, #16]	; (10a8 <system_clock_source_get_hz+0x7c>)
    1098:	68d8      	ldr	r0, [r3, #12]
    109a:	e001      	b.n	10a0 <system_clock_source_get_hz+0x74>
		return 32768UL;
    109c:	2080      	movs	r0, #128	; 0x80
    109e:	0200      	lsls	r0, r0, #8
	}
}
    10a0:	bd10      	pop	{r4, pc}
    10a2:	46c0      	nop			; (mov r8, r8)
    10a4:	00002e4c 	.word	0x00002e4c
    10a8:	200000c4 	.word	0x200000c4
    10ac:	40000800 	.word	0x40000800
    10b0:	007a1200 	.word	0x007a1200
    10b4:	02dc6c00 	.word	0x02dc6c00
    10b8:	000014b1 	.word	0x000014b1

000010bc <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    10bc:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    10be:	490c      	ldr	r1, [pc, #48]	; (10f0 <system_clock_source_osc8m_set_config+0x34>)
    10c0:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    10c2:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    10c4:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    10c6:	7840      	ldrb	r0, [r0, #1]
    10c8:	2201      	movs	r2, #1
    10ca:	4010      	ands	r0, r2
    10cc:	0180      	lsls	r0, r0, #6
    10ce:	2640      	movs	r6, #64	; 0x40
    10d0:	43b3      	bics	r3, r6
    10d2:	4303      	orrs	r3, r0
    10d4:	402a      	ands	r2, r5
    10d6:	01d2      	lsls	r2, r2, #7
    10d8:	2080      	movs	r0, #128	; 0x80
    10da:	4383      	bics	r3, r0
    10dc:	4313      	orrs	r3, r2
    10de:	2203      	movs	r2, #3
    10e0:	4022      	ands	r2, r4
    10e2:	0212      	lsls	r2, r2, #8
    10e4:	4803      	ldr	r0, [pc, #12]	; (10f4 <system_clock_source_osc8m_set_config+0x38>)
    10e6:	4003      	ands	r3, r0
    10e8:	4313      	orrs	r3, r2
    10ea:	620b      	str	r3, [r1, #32]
}
    10ec:	bd70      	pop	{r4, r5, r6, pc}
    10ee:	46c0      	nop			; (mov r8, r8)
    10f0:	40000800 	.word	0x40000800
    10f4:	fffffcff 	.word	0xfffffcff

000010f8 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    10f8:	2808      	cmp	r0, #8
    10fa:	d803      	bhi.n	1104 <system_clock_source_enable+0xc>
    10fc:	0080      	lsls	r0, r0, #2
    10fe:	4b25      	ldr	r3, [pc, #148]	; (1194 <system_clock_source_enable+0x9c>)
    1100:	581b      	ldr	r3, [r3, r0]
    1102:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1104:	2017      	movs	r0, #23
    1106:	e044      	b.n	1192 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1108:	4a23      	ldr	r2, [pc, #140]	; (1198 <system_clock_source_enable+0xa0>)
    110a:	6a13      	ldr	r3, [r2, #32]
    110c:	2102      	movs	r1, #2
    110e:	430b      	orrs	r3, r1
    1110:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1112:	2000      	movs	r0, #0
    1114:	e03d      	b.n	1192 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1116:	4a20      	ldr	r2, [pc, #128]	; (1198 <system_clock_source_enable+0xa0>)
    1118:	6993      	ldr	r3, [r2, #24]
    111a:	2102      	movs	r1, #2
    111c:	430b      	orrs	r3, r1
    111e:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    1120:	2000      	movs	r0, #0
		break;
    1122:	e036      	b.n	1192 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1124:	4a1c      	ldr	r2, [pc, #112]	; (1198 <system_clock_source_enable+0xa0>)
    1126:	8a13      	ldrh	r3, [r2, #16]
    1128:	2102      	movs	r1, #2
    112a:	430b      	orrs	r3, r1
    112c:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    112e:	2000      	movs	r0, #0
		break;
    1130:	e02f      	b.n	1192 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1132:	4a19      	ldr	r2, [pc, #100]	; (1198 <system_clock_source_enable+0xa0>)
    1134:	8a93      	ldrh	r3, [r2, #20]
    1136:	2102      	movs	r1, #2
    1138:	430b      	orrs	r3, r1
    113a:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    113c:	2000      	movs	r0, #0
		break;
    113e:	e028      	b.n	1192 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1140:	4916      	ldr	r1, [pc, #88]	; (119c <system_clock_source_enable+0xa4>)
    1142:	680b      	ldr	r3, [r1, #0]
    1144:	2202      	movs	r2, #2
    1146:	4313      	orrs	r3, r2
    1148:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    114a:	4b13      	ldr	r3, [pc, #76]	; (1198 <system_clock_source_enable+0xa0>)
    114c:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    114e:	0019      	movs	r1, r3
    1150:	320e      	adds	r2, #14
    1152:	68cb      	ldr	r3, [r1, #12]
    1154:	421a      	tst	r2, r3
    1156:	d0fc      	beq.n	1152 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1158:	4a10      	ldr	r2, [pc, #64]	; (119c <system_clock_source_enable+0xa4>)
    115a:	6891      	ldr	r1, [r2, #8]
    115c:	4b0e      	ldr	r3, [pc, #56]	; (1198 <system_clock_source_enable+0xa0>)
    115e:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1160:	6852      	ldr	r2, [r2, #4]
    1162:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    1164:	2200      	movs	r2, #0
    1166:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1168:	0019      	movs	r1, r3
    116a:	3210      	adds	r2, #16
    116c:	68cb      	ldr	r3, [r1, #12]
    116e:	421a      	tst	r2, r3
    1170:	d0fc      	beq.n	116c <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1172:	4b0a      	ldr	r3, [pc, #40]	; (119c <system_clock_source_enable+0xa4>)
    1174:	681b      	ldr	r3, [r3, #0]
    1176:	b29b      	uxth	r3, r3
    1178:	4a07      	ldr	r2, [pc, #28]	; (1198 <system_clock_source_enable+0xa0>)
    117a:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    117c:	2000      	movs	r0, #0
    117e:	e008      	b.n	1192 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1180:	4905      	ldr	r1, [pc, #20]	; (1198 <system_clock_source_enable+0xa0>)
    1182:	2244      	movs	r2, #68	; 0x44
    1184:	5c8b      	ldrb	r3, [r1, r2]
    1186:	2002      	movs	r0, #2
    1188:	4303      	orrs	r3, r0
    118a:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    118c:	2000      	movs	r0, #0
		break;
    118e:	e000      	b.n	1192 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    1190:	2000      	movs	r0, #0
}
    1192:	4770      	bx	lr
    1194:	00002e70 	.word	0x00002e70
    1198:	40000800 	.word	0x40000800
    119c:	200000c4 	.word	0x200000c4

000011a0 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    11a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    11a2:	46c6      	mov	lr, r8
    11a4:	b500      	push	{lr}
    11a6:	b084      	sub	sp, #16
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    11a8:	22c2      	movs	r2, #194	; 0xc2
    11aa:	00d2      	lsls	r2, r2, #3
    11ac:	4b22      	ldr	r3, [pc, #136]	; (1238 <system_clock_init+0x98>)
    11ae:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    11b0:	4a22      	ldr	r2, [pc, #136]	; (123c <system_clock_init+0x9c>)
    11b2:	6853      	ldr	r3, [r2, #4]
    11b4:	211e      	movs	r1, #30
    11b6:	438b      	bics	r3, r1
    11b8:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    11ba:	2301      	movs	r3, #1
    11bc:	466a      	mov	r2, sp
    11be:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    11c0:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    11c2:	4d1f      	ldr	r5, [pc, #124]	; (1240 <system_clock_init+0xa0>)
    11c4:	b2e0      	uxtb	r0, r4
    11c6:	4669      	mov	r1, sp
    11c8:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    11ca:	3401      	adds	r4, #1
    11cc:	2c25      	cmp	r4, #37	; 0x25
    11ce:	d1f9      	bne.n	11c4 <system_clock_init+0x24>
	config->run_in_standby  = false;
    11d0:	a803      	add	r0, sp, #12
    11d2:	2400      	movs	r4, #0
    11d4:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    11d6:	2501      	movs	r5, #1
    11d8:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    11da:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    11dc:	4b19      	ldr	r3, [pc, #100]	; (1244 <system_clock_init+0xa4>)
    11de:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    11e0:	2006      	movs	r0, #6
    11e2:	4b19      	ldr	r3, [pc, #100]	; (1248 <system_clock_init+0xa8>)
    11e4:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    11e6:	4b19      	ldr	r3, [pc, #100]	; (124c <system_clock_init+0xac>)
    11e8:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    11ea:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    11ec:	466b      	mov	r3, sp
    11ee:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    11f0:	2306      	movs	r3, #6
    11f2:	4698      	mov	r8, r3
    11f4:	466b      	mov	r3, sp
    11f6:	4642      	mov	r2, r8
    11f8:	701a      	strb	r2, [r3, #0]
#endif
	config->run_in_standby     = false;
    11fa:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
    11fc:	725c      	strb	r4, [r3, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    11fe:	4669      	mov	r1, sp
    1200:	2003      	movs	r0, #3
    1202:	4f13      	ldr	r7, [pc, #76]	; (1250 <system_clock_init+0xb0>)
    1204:	47b8      	blx	r7
    1206:	2003      	movs	r0, #3
    1208:	4e12      	ldr	r6, [pc, #72]	; (1254 <system_clock_init+0xb4>)
    120a:	47b0      	blx	r6
	PM->CPUSEL.reg = (uint32_t)divider;
    120c:	4b12      	ldr	r3, [pc, #72]	; (1258 <system_clock_init+0xb8>)
    120e:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    1210:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    1212:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    1214:	72dc      	strb	r4, [r3, #11]
	config->division_factor    = 1;
    1216:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    1218:	466b      	mov	r3, sp
    121a:	705c      	strb	r4, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    121c:	4642      	mov	r2, r8
    121e:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    1220:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
    1222:	725c      	strb	r4, [r3, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1224:	4669      	mov	r1, sp
    1226:	2000      	movs	r0, #0
    1228:	47b8      	blx	r7
    122a:	2000      	movs	r0, #0
    122c:	47b0      	blx	r6
#endif
}
    122e:	b004      	add	sp, #16
    1230:	bc04      	pop	{r2}
    1232:	4690      	mov	r8, r2
    1234:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1236:	46c0      	nop			; (mov r8, r8)
    1238:	40000800 	.word	0x40000800
    123c:	41004000 	.word	0x41004000
    1240:	00001495 	.word	0x00001495
    1244:	000010bd 	.word	0x000010bd
    1248:	000010f9 	.word	0x000010f9
    124c:	0000125d 	.word	0x0000125d
    1250:	00001281 	.word	0x00001281
    1254:	00001339 	.word	0x00001339
    1258:	40000400 	.word	0x40000400

0000125c <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    125c:	4a06      	ldr	r2, [pc, #24]	; (1278 <system_gclk_init+0x1c>)
    125e:	6993      	ldr	r3, [r2, #24]
    1260:	2108      	movs	r1, #8
    1262:	430b      	orrs	r3, r1
    1264:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1266:	2201      	movs	r2, #1
    1268:	4b04      	ldr	r3, [pc, #16]	; (127c <system_gclk_init+0x20>)
    126a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    126c:	0019      	movs	r1, r3
    126e:	780b      	ldrb	r3, [r1, #0]
    1270:	4213      	tst	r3, r2
    1272:	d1fc      	bne.n	126e <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1274:	4770      	bx	lr
    1276:	46c0      	nop			; (mov r8, r8)
    1278:	40000400 	.word	0x40000400
    127c:	40000c00 	.word	0x40000c00

00001280 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1280:	b570      	push	{r4, r5, r6, lr}
    1282:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1284:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1286:	780d      	ldrb	r5, [r1, #0]
    1288:	022d      	lsls	r5, r5, #8
    128a:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    128c:	784b      	ldrb	r3, [r1, #1]
    128e:	2b00      	cmp	r3, #0
    1290:	d002      	beq.n	1298 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1292:	2380      	movs	r3, #128	; 0x80
    1294:	02db      	lsls	r3, r3, #11
    1296:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1298:	7a4b      	ldrb	r3, [r1, #9]
    129a:	2b00      	cmp	r3, #0
    129c:	d002      	beq.n	12a4 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    129e:	2380      	movs	r3, #128	; 0x80
    12a0:	031b      	lsls	r3, r3, #12
    12a2:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    12a4:	6848      	ldr	r0, [r1, #4]
    12a6:	2801      	cmp	r0, #1
    12a8:	d910      	bls.n	12cc <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    12aa:	1e43      	subs	r3, r0, #1
    12ac:	4218      	tst	r0, r3
    12ae:	d134      	bne.n	131a <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    12b0:	2802      	cmp	r0, #2
    12b2:	d930      	bls.n	1316 <system_gclk_gen_set_config+0x96>
    12b4:	2302      	movs	r3, #2
    12b6:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    12b8:	3201      	adds	r2, #1
						mask <<= 1) {
    12ba:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    12bc:	4298      	cmp	r0, r3
    12be:	d8fb      	bhi.n	12b8 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    12c0:	0212      	lsls	r2, r2, #8
    12c2:	4332      	orrs	r2, r6
    12c4:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    12c6:	2380      	movs	r3, #128	; 0x80
    12c8:	035b      	lsls	r3, r3, #13
    12ca:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    12cc:	7a0b      	ldrb	r3, [r1, #8]
    12ce:	2b00      	cmp	r3, #0
    12d0:	d002      	beq.n	12d8 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    12d2:	2380      	movs	r3, #128	; 0x80
    12d4:	039b      	lsls	r3, r3, #14
    12d6:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    12d8:	4a13      	ldr	r2, [pc, #76]	; (1328 <system_gclk_gen_set_config+0xa8>)
    12da:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    12dc:	b25b      	sxtb	r3, r3
    12de:	2b00      	cmp	r3, #0
    12e0:	dbfb      	blt.n	12da <system_gclk_gen_set_config+0x5a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    12e2:	4b12      	ldr	r3, [pc, #72]	; (132c <system_gclk_gen_set_config+0xac>)
    12e4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    12e6:	4b12      	ldr	r3, [pc, #72]	; (1330 <system_gclk_gen_set_config+0xb0>)
    12e8:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    12ea:	4a0f      	ldr	r2, [pc, #60]	; (1328 <system_gclk_gen_set_config+0xa8>)
    12ec:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    12ee:	b25b      	sxtb	r3, r3
    12f0:	2b00      	cmp	r3, #0
    12f2:	dbfb      	blt.n	12ec <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    12f4:	4b0c      	ldr	r3, [pc, #48]	; (1328 <system_gclk_gen_set_config+0xa8>)
    12f6:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    12f8:	001a      	movs	r2, r3
    12fa:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    12fc:	b25b      	sxtb	r3, r3
    12fe:	2b00      	cmp	r3, #0
    1300:	dbfb      	blt.n	12fa <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1302:	4a09      	ldr	r2, [pc, #36]	; (1328 <system_gclk_gen_set_config+0xa8>)
    1304:	6853      	ldr	r3, [r2, #4]
    1306:	2180      	movs	r1, #128	; 0x80
    1308:	0249      	lsls	r1, r1, #9
    130a:	400b      	ands	r3, r1
    130c:	431d      	orrs	r5, r3
    130e:	6055      	str	r5, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1310:	4b08      	ldr	r3, [pc, #32]	; (1334 <system_gclk_gen_set_config+0xb4>)
    1312:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1314:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    1316:	2200      	movs	r2, #0
    1318:	e7d2      	b.n	12c0 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    131a:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    131c:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    131e:	2380      	movs	r3, #128	; 0x80
    1320:	029b      	lsls	r3, r3, #10
    1322:	431d      	orrs	r5, r3
    1324:	e7d2      	b.n	12cc <system_gclk_gen_set_config+0x4c>
    1326:	46c0      	nop			; (mov r8, r8)
    1328:	40000c00 	.word	0x40000c00
    132c:	00000f61 	.word	0x00000f61
    1330:	40000c08 	.word	0x40000c08
    1334:	00000fa1 	.word	0x00000fa1

00001338 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1338:	b510      	push	{r4, lr}
    133a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    133c:	4a0b      	ldr	r2, [pc, #44]	; (136c <system_gclk_gen_enable+0x34>)
    133e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1340:	b25b      	sxtb	r3, r3
    1342:	2b00      	cmp	r3, #0
    1344:	dbfb      	blt.n	133e <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    1346:	4b0a      	ldr	r3, [pc, #40]	; (1370 <system_gclk_gen_enable+0x38>)
    1348:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    134a:	4b0a      	ldr	r3, [pc, #40]	; (1374 <system_gclk_gen_enable+0x3c>)
    134c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    134e:	4a07      	ldr	r2, [pc, #28]	; (136c <system_gclk_gen_enable+0x34>)
    1350:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1352:	b25b      	sxtb	r3, r3
    1354:	2b00      	cmp	r3, #0
    1356:	dbfb      	blt.n	1350 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1358:	4a04      	ldr	r2, [pc, #16]	; (136c <system_gclk_gen_enable+0x34>)
    135a:	6851      	ldr	r1, [r2, #4]
    135c:	2380      	movs	r3, #128	; 0x80
    135e:	025b      	lsls	r3, r3, #9
    1360:	430b      	orrs	r3, r1
    1362:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1364:	4b04      	ldr	r3, [pc, #16]	; (1378 <system_gclk_gen_enable+0x40>)
    1366:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1368:	bd10      	pop	{r4, pc}
    136a:	46c0      	nop			; (mov r8, r8)
    136c:	40000c00 	.word	0x40000c00
    1370:	00000f61 	.word	0x00000f61
    1374:	40000c04 	.word	0x40000c04
    1378:	00000fa1 	.word	0x00000fa1

0000137c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    137c:	b570      	push	{r4, r5, r6, lr}
    137e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1380:	4a1a      	ldr	r2, [pc, #104]	; (13ec <system_gclk_gen_get_hz+0x70>)
    1382:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1384:	b25b      	sxtb	r3, r3
    1386:	2b00      	cmp	r3, #0
    1388:	dbfb      	blt.n	1382 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    138a:	4b19      	ldr	r3, [pc, #100]	; (13f0 <system_gclk_gen_get_hz+0x74>)
    138c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    138e:	4b19      	ldr	r3, [pc, #100]	; (13f4 <system_gclk_gen_get_hz+0x78>)
    1390:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1392:	4a16      	ldr	r2, [pc, #88]	; (13ec <system_gclk_gen_get_hz+0x70>)
    1394:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1396:	b25b      	sxtb	r3, r3
    1398:	2b00      	cmp	r3, #0
    139a:	dbfb      	blt.n	1394 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    139c:	4e13      	ldr	r6, [pc, #76]	; (13ec <system_gclk_gen_get_hz+0x70>)
    139e:	6870      	ldr	r0, [r6, #4]
    13a0:	04c0      	lsls	r0, r0, #19
    13a2:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    13a4:	4b14      	ldr	r3, [pc, #80]	; (13f8 <system_gclk_gen_get_hz+0x7c>)
    13a6:	4798      	blx	r3
    13a8:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    13aa:	4b12      	ldr	r3, [pc, #72]	; (13f4 <system_gclk_gen_get_hz+0x78>)
    13ac:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    13ae:	6876      	ldr	r6, [r6, #4]
    13b0:	02f6      	lsls	r6, r6, #11
    13b2:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    13b4:	4b11      	ldr	r3, [pc, #68]	; (13fc <system_gclk_gen_get_hz+0x80>)
    13b6:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    13b8:	4a0c      	ldr	r2, [pc, #48]	; (13ec <system_gclk_gen_get_hz+0x70>)
    13ba:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    13bc:	b25b      	sxtb	r3, r3
    13be:	2b00      	cmp	r3, #0
    13c0:	dbfb      	blt.n	13ba <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    13c2:	4b0a      	ldr	r3, [pc, #40]	; (13ec <system_gclk_gen_get_hz+0x70>)
    13c4:	689c      	ldr	r4, [r3, #8]
    13c6:	0224      	lsls	r4, r4, #8
    13c8:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    13ca:	4b0d      	ldr	r3, [pc, #52]	; (1400 <system_gclk_gen_get_hz+0x84>)
    13cc:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    13ce:	2e00      	cmp	r6, #0
    13d0:	d107      	bne.n	13e2 <system_gclk_gen_get_hz+0x66>
    13d2:	2c01      	cmp	r4, #1
    13d4:	d907      	bls.n	13e6 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    13d6:	0021      	movs	r1, r4
    13d8:	0028      	movs	r0, r5
    13da:	4b0a      	ldr	r3, [pc, #40]	; (1404 <system_gclk_gen_get_hz+0x88>)
    13dc:	4798      	blx	r3
    13de:	0005      	movs	r5, r0
    13e0:	e001      	b.n	13e6 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    13e2:	3401      	adds	r4, #1
    13e4:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    13e6:	0028      	movs	r0, r5
    13e8:	bd70      	pop	{r4, r5, r6, pc}
    13ea:	46c0      	nop			; (mov r8, r8)
    13ec:	40000c00 	.word	0x40000c00
    13f0:	00000f61 	.word	0x00000f61
    13f4:	40000c04 	.word	0x40000c04
    13f8:	0000102d 	.word	0x0000102d
    13fc:	40000c08 	.word	0x40000c08
    1400:	00000fa1 	.word	0x00000fa1
    1404:	00001ab9 	.word	0x00001ab9

00001408 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1408:	b510      	push	{r4, lr}
    140a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    140c:	4b06      	ldr	r3, [pc, #24]	; (1428 <system_gclk_chan_enable+0x20>)
    140e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1410:	4b06      	ldr	r3, [pc, #24]	; (142c <system_gclk_chan_enable+0x24>)
    1412:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1414:	4a06      	ldr	r2, [pc, #24]	; (1430 <system_gclk_chan_enable+0x28>)
    1416:	8853      	ldrh	r3, [r2, #2]
    1418:	2180      	movs	r1, #128	; 0x80
    141a:	01c9      	lsls	r1, r1, #7
    141c:	430b      	orrs	r3, r1
    141e:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1420:	4b04      	ldr	r3, [pc, #16]	; (1434 <system_gclk_chan_enable+0x2c>)
    1422:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1424:	bd10      	pop	{r4, pc}
    1426:	46c0      	nop			; (mov r8, r8)
    1428:	00000f61 	.word	0x00000f61
    142c:	40000c02 	.word	0x40000c02
    1430:	40000c00 	.word	0x40000c00
    1434:	00000fa1 	.word	0x00000fa1

00001438 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1438:	b510      	push	{r4, lr}
    143a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    143c:	4b0f      	ldr	r3, [pc, #60]	; (147c <system_gclk_chan_disable+0x44>)
    143e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1440:	4b0f      	ldr	r3, [pc, #60]	; (1480 <system_gclk_chan_disable+0x48>)
    1442:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1444:	4a0f      	ldr	r2, [pc, #60]	; (1484 <system_gclk_chan_disable+0x4c>)
    1446:	8853      	ldrh	r3, [r2, #2]
    1448:	051b      	lsls	r3, r3, #20
    144a:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    144c:	8853      	ldrh	r3, [r2, #2]
    144e:	490e      	ldr	r1, [pc, #56]	; (1488 <system_gclk_chan_disable+0x50>)
    1450:	400b      	ands	r3, r1
    1452:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1454:	8853      	ldrh	r3, [r2, #2]
    1456:	490d      	ldr	r1, [pc, #52]	; (148c <system_gclk_chan_disable+0x54>)
    1458:	400b      	ands	r3, r1
    145a:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    145c:	0011      	movs	r1, r2
    145e:	2280      	movs	r2, #128	; 0x80
    1460:	01d2      	lsls	r2, r2, #7
    1462:	884b      	ldrh	r3, [r1, #2]
    1464:	4213      	tst	r3, r2
    1466:	d1fc      	bne.n	1462 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1468:	4906      	ldr	r1, [pc, #24]	; (1484 <system_gclk_chan_disable+0x4c>)
    146a:	884a      	ldrh	r2, [r1, #2]
    146c:	0203      	lsls	r3, r0, #8
    146e:	4806      	ldr	r0, [pc, #24]	; (1488 <system_gclk_chan_disable+0x50>)
    1470:	4002      	ands	r2, r0
    1472:	4313      	orrs	r3, r2
    1474:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    1476:	4b06      	ldr	r3, [pc, #24]	; (1490 <system_gclk_chan_disable+0x58>)
    1478:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    147a:	bd10      	pop	{r4, pc}
    147c:	00000f61 	.word	0x00000f61
    1480:	40000c02 	.word	0x40000c02
    1484:	40000c00 	.word	0x40000c00
    1488:	fffff0ff 	.word	0xfffff0ff
    148c:	ffffbfff 	.word	0xffffbfff
    1490:	00000fa1 	.word	0x00000fa1

00001494 <system_gclk_chan_set_config>:
{
    1494:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1496:	780c      	ldrb	r4, [r1, #0]
    1498:	0224      	lsls	r4, r4, #8
    149a:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    149c:	4b02      	ldr	r3, [pc, #8]	; (14a8 <system_gclk_chan_set_config+0x14>)
    149e:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    14a0:	b2a4      	uxth	r4, r4
    14a2:	4b02      	ldr	r3, [pc, #8]	; (14ac <system_gclk_chan_set_config+0x18>)
    14a4:	805c      	strh	r4, [r3, #2]
}
    14a6:	bd10      	pop	{r4, pc}
    14a8:	00001439 	.word	0x00001439
    14ac:	40000c00 	.word	0x40000c00

000014b0 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    14b0:	b510      	push	{r4, lr}
    14b2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    14b4:	4b06      	ldr	r3, [pc, #24]	; (14d0 <system_gclk_chan_get_hz+0x20>)
    14b6:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    14b8:	4b06      	ldr	r3, [pc, #24]	; (14d4 <system_gclk_chan_get_hz+0x24>)
    14ba:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    14bc:	4b06      	ldr	r3, [pc, #24]	; (14d8 <system_gclk_chan_get_hz+0x28>)
    14be:	885c      	ldrh	r4, [r3, #2]
    14c0:	0524      	lsls	r4, r4, #20
    14c2:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    14c4:	4b05      	ldr	r3, [pc, #20]	; (14dc <system_gclk_chan_get_hz+0x2c>)
    14c6:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    14c8:	0020      	movs	r0, r4
    14ca:	4b05      	ldr	r3, [pc, #20]	; (14e0 <system_gclk_chan_get_hz+0x30>)
    14cc:	4798      	blx	r3
}
    14ce:	bd10      	pop	{r4, pc}
    14d0:	00000f61 	.word	0x00000f61
    14d4:	40000c02 	.word	0x40000c02
    14d8:	40000c00 	.word	0x40000c00
    14dc:	00000fa1 	.word	0x00000fa1
    14e0:	0000137d 	.word	0x0000137d

000014e4 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    14e4:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    14e6:	78d3      	ldrb	r3, [r2, #3]
    14e8:	2b00      	cmp	r3, #0
    14ea:	d135      	bne.n	1558 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    14ec:	7813      	ldrb	r3, [r2, #0]
    14ee:	2b80      	cmp	r3, #128	; 0x80
    14f0:	d029      	beq.n	1546 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    14f2:	061b      	lsls	r3, r3, #24
    14f4:	2480      	movs	r4, #128	; 0x80
    14f6:	0264      	lsls	r4, r4, #9
    14f8:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    14fa:	7854      	ldrb	r4, [r2, #1]
    14fc:	2502      	movs	r5, #2
    14fe:	43ac      	bics	r4, r5
    1500:	d106      	bne.n	1510 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1502:	7894      	ldrb	r4, [r2, #2]
    1504:	2c00      	cmp	r4, #0
    1506:	d120      	bne.n	154a <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1508:	2480      	movs	r4, #128	; 0x80
    150a:	02a4      	lsls	r4, r4, #10
    150c:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    150e:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1510:	7854      	ldrb	r4, [r2, #1]
    1512:	3c01      	subs	r4, #1
    1514:	2c01      	cmp	r4, #1
    1516:	d91c      	bls.n	1552 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1518:	040d      	lsls	r5, r1, #16
    151a:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    151c:	24a0      	movs	r4, #160	; 0xa0
    151e:	05e4      	lsls	r4, r4, #23
    1520:	432c      	orrs	r4, r5
    1522:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1524:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1526:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1528:	24d0      	movs	r4, #208	; 0xd0
    152a:	0624      	lsls	r4, r4, #24
    152c:	432c      	orrs	r4, r5
    152e:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1530:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1532:	78d4      	ldrb	r4, [r2, #3]
    1534:	2c00      	cmp	r4, #0
    1536:	d122      	bne.n	157e <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1538:	035b      	lsls	r3, r3, #13
    153a:	d51c      	bpl.n	1576 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    153c:	7893      	ldrb	r3, [r2, #2]
    153e:	2b01      	cmp	r3, #1
    1540:	d01e      	beq.n	1580 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1542:	6141      	str	r1, [r0, #20]
    1544:	e017      	b.n	1576 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    1546:	2300      	movs	r3, #0
    1548:	e7d7      	b.n	14fa <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    154a:	24c0      	movs	r4, #192	; 0xc0
    154c:	02e4      	lsls	r4, r4, #11
    154e:	4323      	orrs	r3, r4
    1550:	e7dd      	b.n	150e <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1552:	4c0d      	ldr	r4, [pc, #52]	; (1588 <_system_pinmux_config+0xa4>)
    1554:	4023      	ands	r3, r4
    1556:	e7df      	b.n	1518 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1558:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    155a:	040c      	lsls	r4, r1, #16
    155c:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    155e:	23a0      	movs	r3, #160	; 0xa0
    1560:	05db      	lsls	r3, r3, #23
    1562:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1564:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1566:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1568:	23d0      	movs	r3, #208	; 0xd0
    156a:	061b      	lsls	r3, r3, #24
    156c:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    156e:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1570:	78d3      	ldrb	r3, [r2, #3]
    1572:	2b00      	cmp	r3, #0
    1574:	d103      	bne.n	157e <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1576:	7853      	ldrb	r3, [r2, #1]
    1578:	3b01      	subs	r3, #1
    157a:	2b01      	cmp	r3, #1
    157c:	d902      	bls.n	1584 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    157e:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1580:	6181      	str	r1, [r0, #24]
    1582:	e7f8      	b.n	1576 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1584:	6081      	str	r1, [r0, #8]
}
    1586:	e7fa      	b.n	157e <_system_pinmux_config+0x9a>
    1588:	fffbffff 	.word	0xfffbffff

0000158c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    158c:	b510      	push	{r4, lr}
    158e:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1590:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1592:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1594:	2900      	cmp	r1, #0
    1596:	d104      	bne.n	15a2 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1598:	0943      	lsrs	r3, r0, #5
    159a:	01db      	lsls	r3, r3, #7
    159c:	4905      	ldr	r1, [pc, #20]	; (15b4 <system_pinmux_pin_set_config+0x28>)
    159e:	468c      	mov	ip, r1
    15a0:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    15a2:	241f      	movs	r4, #31
    15a4:	4020      	ands	r0, r4
    15a6:	2101      	movs	r1, #1
    15a8:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    15aa:	0018      	movs	r0, r3
    15ac:	4b02      	ldr	r3, [pc, #8]	; (15b8 <system_pinmux_pin_set_config+0x2c>)
    15ae:	4798      	blx	r3
}
    15b0:	bd10      	pop	{r4, pc}
    15b2:	46c0      	nop			; (mov r8, r8)
    15b4:	41004400 	.word	0x41004400
    15b8:	000014e5 	.word	0x000014e5

000015bc <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    15bc:	4770      	bx	lr
	...

000015c0 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    15c0:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    15c2:	4b05      	ldr	r3, [pc, #20]	; (15d8 <system_init+0x18>)
    15c4:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    15c6:	4b05      	ldr	r3, [pc, #20]	; (15dc <system_init+0x1c>)
    15c8:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    15ca:	4b05      	ldr	r3, [pc, #20]	; (15e0 <system_init+0x20>)
    15cc:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    15ce:	4b05      	ldr	r3, [pc, #20]	; (15e4 <system_init+0x24>)
    15d0:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    15d2:	4b05      	ldr	r3, [pc, #20]	; (15e8 <system_init+0x28>)
    15d4:	4798      	blx	r3
}
    15d6:	bd10      	pop	{r4, pc}
    15d8:	000011a1 	.word	0x000011a1
    15dc:	00000fd1 	.word	0x00000fd1
    15e0:	00000ed1 	.word	0x00000ed1
    15e4:	000015bd 	.word	0x000015bd
    15e8:	000015bd 	.word	0x000015bd

000015ec <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    15ec:	e7fe      	b.n	15ec <Dummy_Handler>
	...

000015f0 <Reset_Handler>:
{
    15f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    15f2:	4a2a      	ldr	r2, [pc, #168]	; (169c <Reset_Handler+0xac>)
    15f4:	4b2a      	ldr	r3, [pc, #168]	; (16a0 <Reset_Handler+0xb0>)
    15f6:	429a      	cmp	r2, r3
    15f8:	d011      	beq.n	161e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    15fa:	001a      	movs	r2, r3
    15fc:	4b29      	ldr	r3, [pc, #164]	; (16a4 <Reset_Handler+0xb4>)
    15fe:	429a      	cmp	r2, r3
    1600:	d20d      	bcs.n	161e <Reset_Handler+0x2e>
    1602:	4a29      	ldr	r2, [pc, #164]	; (16a8 <Reset_Handler+0xb8>)
    1604:	3303      	adds	r3, #3
    1606:	1a9b      	subs	r3, r3, r2
    1608:	089b      	lsrs	r3, r3, #2
    160a:	3301      	adds	r3, #1
    160c:	009b      	lsls	r3, r3, #2
    160e:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1610:	4823      	ldr	r0, [pc, #140]	; (16a0 <Reset_Handler+0xb0>)
    1612:	4922      	ldr	r1, [pc, #136]	; (169c <Reset_Handler+0xac>)
    1614:	588c      	ldr	r4, [r1, r2]
    1616:	5084      	str	r4, [r0, r2]
    1618:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    161a:	429a      	cmp	r2, r3
    161c:	d1fa      	bne.n	1614 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    161e:	4a23      	ldr	r2, [pc, #140]	; (16ac <Reset_Handler+0xbc>)
    1620:	4b23      	ldr	r3, [pc, #140]	; (16b0 <Reset_Handler+0xc0>)
    1622:	429a      	cmp	r2, r3
    1624:	d20a      	bcs.n	163c <Reset_Handler+0x4c>
    1626:	43d3      	mvns	r3, r2
    1628:	4921      	ldr	r1, [pc, #132]	; (16b0 <Reset_Handler+0xc0>)
    162a:	185b      	adds	r3, r3, r1
    162c:	2103      	movs	r1, #3
    162e:	438b      	bics	r3, r1
    1630:	3304      	adds	r3, #4
    1632:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    1634:	2100      	movs	r1, #0
    1636:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    1638:	4293      	cmp	r3, r2
    163a:	d1fc      	bne.n	1636 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    163c:	4a1d      	ldr	r2, [pc, #116]	; (16b4 <Reset_Handler+0xc4>)
    163e:	21ff      	movs	r1, #255	; 0xff
    1640:	4b1d      	ldr	r3, [pc, #116]	; (16b8 <Reset_Handler+0xc8>)
    1642:	438b      	bics	r3, r1
    1644:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1646:	39fd      	subs	r1, #253	; 0xfd
    1648:	2390      	movs	r3, #144	; 0x90
    164a:	005b      	lsls	r3, r3, #1
    164c:	4a1b      	ldr	r2, [pc, #108]	; (16bc <Reset_Handler+0xcc>)
    164e:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1650:	4a1b      	ldr	r2, [pc, #108]	; (16c0 <Reset_Handler+0xd0>)
    1652:	78d3      	ldrb	r3, [r2, #3]
    1654:	2503      	movs	r5, #3
    1656:	43ab      	bics	r3, r5
    1658:	2402      	movs	r4, #2
    165a:	4323      	orrs	r3, r4
    165c:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    165e:	78d3      	ldrb	r3, [r2, #3]
    1660:	270c      	movs	r7, #12
    1662:	43bb      	bics	r3, r7
    1664:	2608      	movs	r6, #8
    1666:	4333      	orrs	r3, r6
    1668:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    166a:	4b16      	ldr	r3, [pc, #88]	; (16c4 <Reset_Handler+0xd4>)
    166c:	7b98      	ldrb	r0, [r3, #14]
    166e:	2230      	movs	r2, #48	; 0x30
    1670:	4390      	bics	r0, r2
    1672:	2220      	movs	r2, #32
    1674:	4310      	orrs	r0, r2
    1676:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1678:	7b99      	ldrb	r1, [r3, #14]
    167a:	43b9      	bics	r1, r7
    167c:	4331      	orrs	r1, r6
    167e:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1680:	7b9a      	ldrb	r2, [r3, #14]
    1682:	43aa      	bics	r2, r5
    1684:	4322      	orrs	r2, r4
    1686:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1688:	4a0f      	ldr	r2, [pc, #60]	; (16c8 <Reset_Handler+0xd8>)
    168a:	6853      	ldr	r3, [r2, #4]
    168c:	2180      	movs	r1, #128	; 0x80
    168e:	430b      	orrs	r3, r1
    1690:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1692:	4b0e      	ldr	r3, [pc, #56]	; (16cc <Reset_Handler+0xdc>)
    1694:	4798      	blx	r3
        main();
    1696:	4b0e      	ldr	r3, [pc, #56]	; (16d0 <Reset_Handler+0xe0>)
    1698:	4798      	blx	r3
    169a:	e7fe      	b.n	169a <Reset_Handler+0xaa>
    169c:	00002f5c 	.word	0x00002f5c
    16a0:	20000000 	.word	0x20000000
    16a4:	20000084 	.word	0x20000084
    16a8:	20000004 	.word	0x20000004
    16ac:	20000084 	.word	0x20000084
    16b0:	200001a0 	.word	0x200001a0
    16b4:	e000ed00 	.word	0xe000ed00
    16b8:	00000000 	.word	0x00000000
    16bc:	41007000 	.word	0x41007000
    16c0:	41005000 	.word	0x41005000
    16c4:	41004800 	.word	0x41004800
    16c8:	41004000 	.word	0x41004000
    16cc:	00001df9 	.word	0x00001df9
    16d0:	00001a15 	.word	0x00001a15

000016d4 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    16d4:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    16d6:	4a06      	ldr	r2, [pc, #24]	; (16f0 <_sbrk+0x1c>)
    16d8:	6812      	ldr	r2, [r2, #0]
    16da:	2a00      	cmp	r2, #0
    16dc:	d004      	beq.n	16e8 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    16de:	4a04      	ldr	r2, [pc, #16]	; (16f0 <_sbrk+0x1c>)
    16e0:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    16e2:	18c3      	adds	r3, r0, r3
    16e4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    16e6:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    16e8:	4902      	ldr	r1, [pc, #8]	; (16f4 <_sbrk+0x20>)
    16ea:	4a01      	ldr	r2, [pc, #4]	; (16f0 <_sbrk+0x1c>)
    16ec:	6011      	str	r1, [r2, #0]
    16ee:	e7f6      	b.n	16de <_sbrk+0xa>
    16f0:	200000dc 	.word	0x200000dc
    16f4:	200021a0 	.word	0x200021a0

000016f8 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    16f8:	2001      	movs	r0, #1
    16fa:	4240      	negs	r0, r0
    16fc:	4770      	bx	lr

000016fe <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    16fe:	2380      	movs	r3, #128	; 0x80
    1700:	019b      	lsls	r3, r3, #6
    1702:	604b      	str	r3, [r1, #4]

	return 0;
}
    1704:	2000      	movs	r0, #0
    1706:	4770      	bx	lr

00001708 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    1708:	2001      	movs	r0, #1
    170a:	4770      	bx	lr

0000170c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    170c:	2000      	movs	r0, #0
    170e:	4770      	bx	lr

00001710 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    1710:	b570      	push	{r4, r5, r6, lr}
    1712:	b082      	sub	sp, #8
    1714:	0005      	movs	r5, r0
    1716:	000e      	movs	r6, r1
	uint16_t temp = 0;
    1718:	2200      	movs	r2, #0
    171a:	466b      	mov	r3, sp
    171c:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    171e:	4c06      	ldr	r4, [pc, #24]	; (1738 <usart_serial_getchar+0x28>)
    1720:	466b      	mov	r3, sp
    1722:	1d99      	adds	r1, r3, #6
    1724:	0028      	movs	r0, r5
    1726:	47a0      	blx	r4
    1728:	2800      	cmp	r0, #0
    172a:	d1f9      	bne.n	1720 <usart_serial_getchar+0x10>

	*c = temp;
    172c:	466b      	mov	r3, sp
    172e:	3306      	adds	r3, #6
    1730:	881b      	ldrh	r3, [r3, #0]
    1732:	7033      	strb	r3, [r6, #0]
}
    1734:	b002      	add	sp, #8
    1736:	bd70      	pop	{r4, r5, r6, pc}
    1738:	00000bc1 	.word	0x00000bc1

0000173c <usart_serial_putchar>:
{
    173c:	b570      	push	{r4, r5, r6, lr}
    173e:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    1740:	b28c      	uxth	r4, r1
    1742:	4e03      	ldr	r6, [pc, #12]	; (1750 <usart_serial_putchar+0x14>)
    1744:	0021      	movs	r1, r4
    1746:	0028      	movs	r0, r5
    1748:	47b0      	blx	r6
    174a:	2800      	cmp	r0, #0
    174c:	d1fa      	bne.n	1744 <usart_serial_putchar+0x8>
}
    174e:	bd70      	pop	{r4, r5, r6, pc}
    1750:	00000b95 	.word	0x00000b95

00001754 <get_color>:
 * parameter	: (COLOR) color		<- enum COLOR { RED, GREEN, BLUE }
 *				  (TERM_OUT) out	<- enum TERM_OUT { TERM_OUT_1, TERM_OUT_2 }
 * return		: (uint8_t) result  <- the value of color
 *
 * ---------------------------------------------------------------------- */
uint8_t get_color(COLOR color, OUT_NUM out) {
    1754:	b510      	push	{r4, lr}
	// variables used in timer
	uint8_t	start  = 0x00;
	uint8_t	end	   = 0x00;

	// select color and pin setting
	switch(color) {
    1756:	2801      	cmp	r0, #1
    1758:	d040      	beq.n	17dc <get_color+0x88>
    175a:	2800      	cmp	r0, #0
    175c:	d036      	beq.n	17cc <get_color+0x78>
    175e:	2802      	cmp	r0, #2
    1760:	d044      	beq.n	17ec <get_color+0x98>
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1762:	4b34      	ldr	r3, [pc, #208]	; (1834 <get_color+0xe0>)
    1764:	681a      	ldr	r2, [r3, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1766:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    1768:	b25b      	sxtb	r3, r3
    176a:	2b00      	cmp	r3, #0
    176c:	dbfb      	blt.n	1766 <get_color+0x12>
		/* Wait for sync */
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
    176e:	2300      	movs	r3, #0
    1770:	7113      	strb	r3, [r2, #4]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1772:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    1774:	b25b      	sxtb	r3, r3
    1776:	2b00      	cmp	r3, #0
    1778:	dbfb      	blt.n	1772 <get_color+0x1e>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_RETRIGGER_Val);
    177a:	2340      	movs	r3, #64	; 0x40
    177c:	7153      	strb	r3, [r2, #5]
	}
	
	// get the value of color
	tc_start_counter(&tc_instance);
	
	if(out == OUT_NUM_1) {	// Color 1
    177e:	2900      	cmp	r1, #0
    1780:	d13c      	bne.n	17fc <get_color+0xa8>
	return (port_base->IN.reg & pin_mask);
    1782:	492d      	ldr	r1, [pc, #180]	; (1838 <get_color+0xe4>)
    1784:	2280      	movs	r2, #128	; 0x80
    1786:	0212      	lsls	r2, r2, #8
    1788:	6a0b      	ldr	r3, [r1, #32]
		while(port_pin_get_input_level(TERM_OUT_1));		// wait until input level is LOW
    178a:	4213      	tst	r3, r2
    178c:	d1fc      	bne.n	1788 <get_color+0x34>
    178e:	492a      	ldr	r1, [pc, #168]	; (1838 <get_color+0xe4>)
    1790:	2280      	movs	r2, #128	; 0x80
    1792:	0212      	lsls	r2, r2, #8
    1794:	6a0b      	ldr	r3, [r1, #32]
		while(!(port_pin_get_input_level(TERM_OUT_1)));		// if the signal's level is HIGH, start timer 
    1796:	4213      	tst	r3, r2
    1798:	d0fc      	beq.n	1794 <get_color+0x40>
		start  = tc_get_count_value(&tc_instance);
    179a:	4826      	ldr	r0, [pc, #152]	; (1834 <get_color+0xe0>)
    179c:	4b27      	ldr	r3, [pc, #156]	; (183c <get_color+0xe8>)
    179e:	4798      	blx	r3
    17a0:	b2c4      	uxtb	r4, r0
    17a2:	4925      	ldr	r1, [pc, #148]	; (1838 <get_color+0xe4>)
    17a4:	2280      	movs	r2, #128	; 0x80
    17a6:	0212      	lsls	r2, r2, #8
    17a8:	6a0b      	ldr	r3, [r1, #32]
	
		while(port_pin_get_input_level(TERM_OUT_1));		// if the signal's level is LOW, stop timer
    17aa:	4213      	tst	r3, r2
    17ac:	d1fc      	bne.n	17a8 <get_color+0x54>
		end    = tc_get_count_value(&tc_instance);
    17ae:	4821      	ldr	r0, [pc, #132]	; (1834 <get_color+0xe0>)
    17b0:	4b22      	ldr	r3, [pc, #136]	; (183c <get_color+0xe8>)
    17b2:	4798      	blx	r3
    17b4:	b2c0      	uxtb	r0, r0
				
		while(port_pin_get_input_level(TERM_OUT_2));		// if the signal's level is LOW, stop timer
		end    = tc_get_count_value(&tc_instance);
	}

	result = end - start;		// get duration
    17b6:	1b00      	subs	r0, r0, r4
    17b8:	b2c0      	uxtb	r0, r0
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    17ba:	4b1e      	ldr	r3, [pc, #120]	; (1834 <get_color+0xe0>)
    17bc:	681a      	ldr	r2, [r3, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    17be:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    17c0:	b25b      	sxtb	r3, r3
    17c2:	2b00      	cmp	r3, #0
    17c4:	dbfb      	blt.n	17be <get_color+0x6a>
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_STOP_Val);
    17c6:	2380      	movs	r3, #128	; 0x80
    17c8:	7153      	strb	r3, [r2, #5]
	tc_stop_counter(&tc_instance);
	start = 0;
	end = 0;
	
	return result;
}
    17ca:	bd10      	pop	{r4, pc}
	} else {
		port_base->OUTCLR.reg = pin_mask;
    17cc:	4b1a      	ldr	r3, [pc, #104]	; (1838 <get_color+0xe4>)
    17ce:	2280      	movs	r2, #128	; 0x80
    17d0:	0192      	lsls	r2, r2, #6
    17d2:	615a      	str	r2, [r3, #20]
    17d4:	2280      	movs	r2, #128	; 0x80
    17d6:	0552      	lsls	r2, r2, #21
    17d8:	615a      	str	r2, [r3, #20]
    17da:	e7c2      	b.n	1762 <get_color+0xe>
		port_base->OUTSET.reg = pin_mask;
    17dc:	4b16      	ldr	r3, [pc, #88]	; (1838 <get_color+0xe4>)
    17de:	2280      	movs	r2, #128	; 0x80
    17e0:	0192      	lsls	r2, r2, #6
    17e2:	619a      	str	r2, [r3, #24]
    17e4:	2280      	movs	r2, #128	; 0x80
    17e6:	0552      	lsls	r2, r2, #21
    17e8:	619a      	str	r2, [r3, #24]
    17ea:	e7ba      	b.n	1762 <get_color+0xe>
		port_base->OUTCLR.reg = pin_mask;
    17ec:	4b12      	ldr	r3, [pc, #72]	; (1838 <get_color+0xe4>)
    17ee:	2280      	movs	r2, #128	; 0x80
    17f0:	0192      	lsls	r2, r2, #6
    17f2:	615a      	str	r2, [r3, #20]
		port_base->OUTSET.reg = pin_mask;
    17f4:	2280      	movs	r2, #128	; 0x80
    17f6:	0552      	lsls	r2, r2, #21
    17f8:	619a      	str	r2, [r3, #24]
    17fa:	e7b2      	b.n	1762 <get_color+0xe>
	return (port_base->IN.reg & pin_mask);
    17fc:	490e      	ldr	r1, [pc, #56]	; (1838 <get_color+0xe4>)
    17fe:	2280      	movs	r2, #128	; 0x80
    1800:	0412      	lsls	r2, r2, #16
    1802:	6a0b      	ldr	r3, [r1, #32]
		while(port_pin_get_input_level(TERM_OUT_2));		// wait until input level is LOW
    1804:	4213      	tst	r3, r2
    1806:	d1fc      	bne.n	1802 <get_color+0xae>
    1808:	490b      	ldr	r1, [pc, #44]	; (1838 <get_color+0xe4>)
    180a:	2280      	movs	r2, #128	; 0x80
    180c:	0412      	lsls	r2, r2, #16
    180e:	6a0b      	ldr	r3, [r1, #32]
		while(!(port_pin_get_input_level(TERM_OUT_2)));		// if the signal's level is HIGH, start timer
    1810:	4213      	tst	r3, r2
    1812:	d0fc      	beq.n	180e <get_color+0xba>
		start  = tc_get_count_value(&tc_instance);
    1814:	4807      	ldr	r0, [pc, #28]	; (1834 <get_color+0xe0>)
    1816:	4b09      	ldr	r3, [pc, #36]	; (183c <get_color+0xe8>)
    1818:	4798      	blx	r3
    181a:	b2c4      	uxtb	r4, r0
    181c:	4906      	ldr	r1, [pc, #24]	; (1838 <get_color+0xe4>)
    181e:	2280      	movs	r2, #128	; 0x80
    1820:	0412      	lsls	r2, r2, #16
    1822:	6a0b      	ldr	r3, [r1, #32]
		while(port_pin_get_input_level(TERM_OUT_2));		// if the signal's level is LOW, stop timer
    1824:	4213      	tst	r3, r2
    1826:	d1fc      	bne.n	1822 <get_color+0xce>
		end    = tc_get_count_value(&tc_instance);
    1828:	4802      	ldr	r0, [pc, #8]	; (1834 <get_color+0xe0>)
    182a:	4b04      	ldr	r3, [pc, #16]	; (183c <get_color+0xe8>)
    182c:	4798      	blx	r3
    182e:	b2c0      	uxtb	r0, r0
    1830:	e7c1      	b.n	17b6 <get_color+0x62>
    1832:	46c0      	nop			; (mov r8, r8)
    1834:	20000180 	.word	0x20000180
    1838:	41004400 	.word	0x41004400
    183c:	000006fd 	.word	0x000006fd

00001840 <basic_pin_setting>:
 *				  OUT: in /  -
 * parameter	: -
 * return		: -
 *
 * ---------------------------------------------------------------------- */
void basic_pin_setting() {
    1840:	b530      	push	{r4, r5, lr}
    1842:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
    1844:	ad01      	add	r5, sp, #4
    1846:	2200      	movs	r2, #0
    1848:	702a      	strb	r2, [r5, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    184a:	2301      	movs	r3, #1
    184c:	706b      	strb	r3, [r5, #1]
	config->powersave  = false;
    184e:	70aa      	strb	r2, [r5, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    1850:	4669      	mov	r1, sp
    1852:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
    1854:	708a      	strb	r2, [r1, #2]
	port_get_config_defaults(&pin_conf_out);
	
	pin_conf_in.direction	= PORT_PIN_DIR_INPUT;
	pin_conf_in.input_pull	= PORT_PIN_PULL_UP;
	
	pin_conf_out.direction	= PORT_PIN_DIR_OUTPUT;
    1856:	700b      	strb	r3, [r1, #0]
	pin_conf_out.input_pull	= PORT_PIN_PULL_UP;
	
	port_pin_set_config(TERM_S0, &pin_conf_out);
    1858:	200e      	movs	r0, #14
    185a:	4c10      	ldr	r4, [pc, #64]	; (189c <basic_pin_setting+0x5c>)
    185c:	47a0      	blx	r4
	port_pin_set_config(TERM_S1, &pin_conf_out);
    185e:	4669      	mov	r1, sp
    1860:	2008      	movs	r0, #8
    1862:	47a0      	blx	r4
	port_pin_set_config(TERM_S2, &pin_conf_out);
    1864:	4669      	mov	r1, sp
    1866:	200d      	movs	r0, #13
    1868:	47a0      	blx	r4
	port_pin_set_config(TERM_S3, &pin_conf_out);
    186a:	4669      	mov	r1, sp
    186c:	201c      	movs	r0, #28
    186e:	47a0      	blx	r4
	port_pin_set_config(TERM_OUT_1, &pin_conf_in);
    1870:	0029      	movs	r1, r5
    1872:	200f      	movs	r0, #15
    1874:	47a0      	blx	r4
	port_pin_set_config(TERM_OUT_2, &pin_conf_in);
    1876:	0029      	movs	r1, r5
    1878:	2017      	movs	r0, #23
    187a:	47a0      	blx	r4
		port_base->OUTSET.reg = pin_mask;
    187c:	4b08      	ldr	r3, [pc, #32]	; (18a0 <basic_pin_setting+0x60>)
    187e:	2280      	movs	r2, #128	; 0x80
    1880:	01d2      	lsls	r2, r2, #7
    1882:	619a      	str	r2, [r3, #24]
    1884:	2280      	movs	r2, #128	; 0x80
    1886:	0052      	lsls	r2, r2, #1
    1888:	619a      	str	r2, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
    188a:	2280      	movs	r2, #128	; 0x80
    188c:	0192      	lsls	r2, r2, #6
    188e:	615a      	str	r2, [r3, #20]
    1890:	2280      	movs	r2, #128	; 0x80
    1892:	0552      	lsls	r2, r2, #21
    1894:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(TERM_S0, HIGH);
	port_pin_set_output_level(TERM_S1, HIGH);
	port_pin_set_output_level(TERM_S2, LOW);
	port_pin_set_output_level(TERM_S3, LOW);
//	port_pin_set_output_level(TERM_LED, LOW);
}
    1896:	b003      	add	sp, #12
    1898:	bd30      	pop	{r4, r5, pc}
    189a:	46c0      	nop			; (mov r8, r8)
    189c:	00001009 	.word	0x00001009
    18a0:	41004400 	.word	0x41004400

000018a4 <configure_usart>:
			port_pin_set_output_level(TERM_S3, LOW);
	}
}

// configuration of usart
void configure_usart(void) {
    18a4:	b530      	push	{r4, r5, lr}
    18a6:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    18a8:	2380      	movs	r3, #128	; 0x80
    18aa:	05db      	lsls	r3, r3, #23
    18ac:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    18ae:	2300      	movs	r3, #0
    18b0:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    18b2:	22ff      	movs	r2, #255	; 0xff
    18b4:	4669      	mov	r1, sp
    18b6:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    18b8:	2200      	movs	r2, #0
    18ba:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    18bc:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    18be:	2101      	movs	r1, #1
    18c0:	2024      	movs	r0, #36	; 0x24
    18c2:	466c      	mov	r4, sp
    18c4:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    18c6:	3001      	adds	r0, #1
    18c8:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    18ca:	3125      	adds	r1, #37	; 0x25
    18cc:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    18ce:	3101      	adds	r1, #1
    18d0:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    18d2:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    18d4:	3105      	adds	r1, #5
    18d6:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    18d8:	3101      	adds	r1, #1
    18da:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    18dc:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    18de:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    18e0:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    18e2:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    18e4:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    18e6:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    18e8:	2313      	movs	r3, #19
    18ea:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    18ec:	7762      	strb	r2, [r4, #29]
	
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);
	config_usart.baudrate = 115200; //14400,19200, 115200
    18ee:	23e1      	movs	r3, #225	; 0xe1
    18f0:	025b      	lsls	r3, r3, #9
    18f2:	9308      	str	r3, [sp, #32]
	config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    18f4:	2380      	movs	r3, #128	; 0x80
    18f6:	035b      	lsls	r3, r3, #13
    18f8:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    18fa:	4b1e      	ldr	r3, [pc, #120]	; (1974 <configure_usart+0xd0>)
    18fc:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    18fe:	4b1e      	ldr	r3, [pc, #120]	; (1978 <configure_usart+0xd4>)
    1900:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    1902:	2301      	movs	r3, #1
    1904:	425b      	negs	r3, r3
    1906:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    1908:	930f      	str	r3, [sp, #60]	; 0x3c
	
	while(usart_init(&usart_instance, EDBG_CDC_MODULE, &config_usart) != STATUS_OK);
    190a:	4d1c      	ldr	r5, [pc, #112]	; (197c <configure_usart+0xd8>)
    190c:	4c1c      	ldr	r4, [pc, #112]	; (1980 <configure_usart+0xdc>)
    190e:	466a      	mov	r2, sp
    1910:	491c      	ldr	r1, [pc, #112]	; (1984 <configure_usart+0xe0>)
    1912:	0028      	movs	r0, r5
    1914:	47a0      	blx	r4
    1916:	2800      	cmp	r0, #0
    1918:	d1f9      	bne.n	190e <configure_usart+0x6a>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    191a:	4d18      	ldr	r5, [pc, #96]	; (197c <configure_usart+0xd8>)
    191c:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    191e:	0020      	movs	r0, r4
    1920:	4b19      	ldr	r3, [pc, #100]	; (1988 <configure_usart+0xe4>)
    1922:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1924:	231f      	movs	r3, #31
    1926:	4018      	ands	r0, r3
    1928:	3b1e      	subs	r3, #30
    192a:	4083      	lsls	r3, r0
    192c:	4a17      	ldr	r2, [pc, #92]	; (198c <configure_usart+0xe8>)
    192e:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1930:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1932:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1934:	2b00      	cmp	r3, #0
    1936:	d1fc      	bne.n	1932 <configure_usart+0x8e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1938:	6823      	ldr	r3, [r4, #0]
    193a:	2202      	movs	r2, #2
    193c:	4313      	orrs	r3, r2
    193e:	6023      	str	r3, [r4, #0]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    1940:	480e      	ldr	r0, [pc, #56]	; (197c <configure_usart+0xd8>)
    1942:	4b13      	ldr	r3, [pc, #76]	; (1990 <configure_usart+0xec>)
    1944:	6018      	str	r0, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    1946:	4a13      	ldr	r2, [pc, #76]	; (1994 <configure_usart+0xf0>)
    1948:	4b13      	ldr	r3, [pc, #76]	; (1998 <configure_usart+0xf4>)
    194a:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    194c:	4a13      	ldr	r2, [pc, #76]	; (199c <configure_usart+0xf8>)
    194e:	4b14      	ldr	r3, [pc, #80]	; (19a0 <configure_usart+0xfc>)
    1950:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    1952:	466a      	mov	r2, sp
    1954:	490b      	ldr	r1, [pc, #44]	; (1984 <configure_usart+0xe0>)
    1956:	4b0a      	ldr	r3, [pc, #40]	; (1980 <configure_usart+0xdc>)
    1958:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    195a:	4d12      	ldr	r5, [pc, #72]	; (19a4 <configure_usart+0x100>)
    195c:	682b      	ldr	r3, [r5, #0]
    195e:	6898      	ldr	r0, [r3, #8]
    1960:	2100      	movs	r1, #0
    1962:	4c11      	ldr	r4, [pc, #68]	; (19a8 <configure_usart+0x104>)
    1964:	47a0      	blx	r4
	setbuf(stdin, NULL);
    1966:	682b      	ldr	r3, [r5, #0]
    1968:	6858      	ldr	r0, [r3, #4]
    196a:	2100      	movs	r1, #0
    196c:	47a0      	blx	r4
	
	usart_enable(&usart_instance);
	stdio_serial_init(&usart_instance, EDBG_CDC_MODULE, &config_usart );
}
    196e:	b011      	add	sp, #68	; 0x44
    1970:	bd30      	pop	{r4, r5, pc}
    1972:	46c0      	nop			; (mov r8, r8)
    1974:	00040003 	.word	0x00040003
    1978:	00050003 	.word	0x00050003
    197c:	20000118 	.word	0x20000118
    1980:	00000851 	.word	0x00000851
    1984:	42000800 	.word	0x42000800
    1988:	00000e05 	.word	0x00000e05
    198c:	e000e100 	.word	0xe000e100
    1990:	200000f0 	.word	0x200000f0
    1994:	0000173d 	.word	0x0000173d
    1998:	200000ec 	.word	0x200000ec
    199c:	00001711 	.word	0x00001711
    19a0:	200000e8 	.word	0x200000e8
    19a4:	20000020 	.word	0x20000020
    19a8:	00001e85 	.word	0x00001e85

000019ac <configure_tc>:

// configuration of tc
void configure_tc(void) {
    19ac:	b510      	push	{r4, lr}
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    19ae:	4a15      	ldr	r2, [pc, #84]	; (1a04 <configure_tc+0x58>)
    19b0:	2300      	movs	r3, #0
    19b2:	2100      	movs	r1, #0
    19b4:	7093      	strb	r3, [r2, #2]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    19b6:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    19b8:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    19ba:	2000      	movs	r0, #0
    19bc:	7050      	strb	r0, [r2, #1]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    19be:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    19c0:	7311      	strb	r1, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    19c2:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    19c4:	7351      	strb	r1, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    19c6:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    19c8:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    19ca:	6193      	str	r3, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    19cc:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    19ce:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    19d0:	6253      	str	r3, [r2, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
    19d2:	8513      	strh	r3, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    19d4:	8553      	strh	r3, [r2, #42]	; 0x2a
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    19d6:	8593      	strh	r3, [r2, #44]	; 0x2c
	
	tc_get_config_defaults(&config_tc);
	config_tc.counter_size		= TC_COUNTER_SIZE_16BIT;
	config_tc.clock_source		= GCLK_GENERATOR_3;
    19d8:	3303      	adds	r3, #3
    19da:	7013      	strb	r3, [r2, #0]
	config_tc.clock_prescaler	= TC_CLOCK_PRESCALER_DIV8;
    19dc:	23c0      	movs	r3, #192	; 0xc0
    19de:	009b      	lsls	r3, r3, #2
    19e0:	8093      	strh	r3, [r2, #4]
	config_tc.enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = true;
    19e2:	2301      	movs	r3, #1
    19e4:	72d3      	strb	r3, [r2, #11]
	
	tc_init(&tc_instance, TC3, &config_tc);
    19e6:	4c08      	ldr	r4, [pc, #32]	; (1a08 <configure_tc+0x5c>)
    19e8:	4908      	ldr	r1, [pc, #32]	; (1a0c <configure_tc+0x60>)
    19ea:	0020      	movs	r0, r4
    19ec:	4b08      	ldr	r3, [pc, #32]	; (1a10 <configure_tc+0x64>)
    19ee:	4798      	blx	r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    19f0:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    19f2:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    19f4:	b25b      	sxtb	r3, r3
    19f6:	2b00      	cmp	r3, #0
    19f8:	dbfb      	blt.n	19f2 <configure_tc+0x46>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    19fa:	8813      	ldrh	r3, [r2, #0]
    19fc:	2102      	movs	r1, #2
    19fe:	430b      	orrs	r3, r1
    1a00:	8013      	strh	r3, [r2, #0]
	tc_enable(&tc_instance);

    1a02:	bd10      	pop	{r4, pc}
    1a04:	2000014c 	.word	0x2000014c
    1a08:	20000180 	.word	0x20000180
    1a0c:	42002c00 	.word	0x42002c00
    1a10:	000004c1 	.word	0x000004c1

00001a14 <main>:
{
    1a14:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a16:	46de      	mov	lr, fp
    1a18:	4647      	mov	r7, r8
    1a1a:	b580      	push	{r7, lr}
    1a1c:	b083      	sub	sp, #12
	system_init();
    1a1e:	4b1b      	ldr	r3, [pc, #108]	; (1a8c <main+0x78>)
    1a20:	4798      	blx	r3
	delay_init();
    1a22:	4b1b      	ldr	r3, [pc, #108]	; (1a90 <main+0x7c>)
    1a24:	4798      	blx	r3
	configure_tc();
    1a26:	4b1b      	ldr	r3, [pc, #108]	; (1a94 <main+0x80>)
    1a28:	4798      	blx	r3
	configure_usart();
    1a2a:	4b1b      	ldr	r3, [pc, #108]	; (1a98 <main+0x84>)
    1a2c:	4798      	blx	r3
	basic_pin_setting();
    1a2e:	4b1b      	ldr	r3, [pc, #108]	; (1a9c <main+0x88>)
    1a30:	4798      	blx	r3
		if((red = 10000 / get_color(RED, OUT_NUM_1)) > 255)
    1a32:	4d1b      	ldr	r5, [pc, #108]	; (1aa0 <main+0x8c>)
		delay_ms(100);
    1a34:	4e1b      	ldr	r6, [pc, #108]	; (1aa4 <main+0x90>)
		if((red = 10000 / get_color(RED, OUT_NUM_1)) > 255)
    1a36:	2100      	movs	r1, #0
    1a38:	2000      	movs	r0, #0
    1a3a:	47a8      	blx	r5
    1a3c:	9000      	str	r0, [sp, #0]
		delay_ms(100);
    1a3e:	2064      	movs	r0, #100	; 0x64
    1a40:	47b0      	blx	r6
		if((green = 10000 / get_color(GREEN, OUT_NUM_1)) > 255)
    1a42:	2100      	movs	r1, #0
    1a44:	2001      	movs	r0, #1
    1a46:	47a8      	blx	r5
    1a48:	9001      	str	r0, [sp, #4]
		delay_ms(100);
    1a4a:	2064      	movs	r0, #100	; 0x64
    1a4c:	47b0      	blx	r6
		if((blue = 10000 / get_color(BLUE, OUT_NUM_1)) > 255)
    1a4e:	2100      	movs	r1, #0
    1a50:	2002      	movs	r0, #2
    1a52:	47a8      	blx	r5
    1a54:	0004      	movs	r4, r0
		delay_ms(100);
    1a56:	2064      	movs	r0, #100	; 0x64
    1a58:	47b0      	blx	r6
		if((blue = 10000 / get_color(BLUE, OUT_NUM_1)) > 255)
    1a5a:	4f13      	ldr	r7, [pc, #76]	; (1aa8 <main+0x94>)
    1a5c:	0021      	movs	r1, r4
    1a5e:	4813      	ldr	r0, [pc, #76]	; (1aac <main+0x98>)
    1a60:	47b8      	blx	r7
		printf("%3d, %3d, %3d\n", red, green, blue);		
    1a62:	24ff      	movs	r4, #255	; 0xff
    1a64:	0003      	movs	r3, r0
    1a66:	4023      	ands	r3, r4
    1a68:	469b      	mov	fp, r3
		if((green = 10000 / get_color(GREEN, OUT_NUM_1)) > 255)
    1a6a:	9901      	ldr	r1, [sp, #4]
    1a6c:	480f      	ldr	r0, [pc, #60]	; (1aac <main+0x98>)
    1a6e:	47b8      	blx	r7
		printf("%3d, %3d, %3d\n", red, green, blue);		
    1a70:	0003      	movs	r3, r0
    1a72:	4023      	ands	r3, r4
    1a74:	4698      	mov	r8, r3
		if((red = 10000 / get_color(RED, OUT_NUM_1)) > 255)
    1a76:	9900      	ldr	r1, [sp, #0]
    1a78:	480c      	ldr	r0, [pc, #48]	; (1aac <main+0x98>)
    1a7a:	47b8      	blx	r7
		printf("%3d, %3d, %3d\n", red, green, blue);		
    1a7c:	0021      	movs	r1, r4
    1a7e:	4001      	ands	r1, r0
    1a80:	465b      	mov	r3, fp
    1a82:	4642      	mov	r2, r8
    1a84:	480a      	ldr	r0, [pc, #40]	; (1ab0 <main+0x9c>)
    1a86:	4c0b      	ldr	r4, [pc, #44]	; (1ab4 <main+0xa0>)
    1a88:	47a0      	blx	r4
    1a8a:	e7d4      	b.n	1a36 <main+0x22>
    1a8c:	000015c1 	.word	0x000015c1
    1a90:	00000ef5 	.word	0x00000ef5
    1a94:	000019ad 	.word	0x000019ad
    1a98:	000018a5 	.word	0x000018a5
    1a9c:	00001841 	.word	0x00001841
    1aa0:	00001755 	.word	0x00001755
    1aa4:	00000f35 	.word	0x00000f35
    1aa8:	00001bcd 	.word	0x00001bcd
    1aac:	00002710 	.word	0x00002710
    1ab0:	00002e94 	.word	0x00002e94
    1ab4:	00001e51 	.word	0x00001e51

00001ab8 <__udivsi3>:
    1ab8:	2200      	movs	r2, #0
    1aba:	0843      	lsrs	r3, r0, #1
    1abc:	428b      	cmp	r3, r1
    1abe:	d374      	bcc.n	1baa <__udivsi3+0xf2>
    1ac0:	0903      	lsrs	r3, r0, #4
    1ac2:	428b      	cmp	r3, r1
    1ac4:	d35f      	bcc.n	1b86 <__udivsi3+0xce>
    1ac6:	0a03      	lsrs	r3, r0, #8
    1ac8:	428b      	cmp	r3, r1
    1aca:	d344      	bcc.n	1b56 <__udivsi3+0x9e>
    1acc:	0b03      	lsrs	r3, r0, #12
    1ace:	428b      	cmp	r3, r1
    1ad0:	d328      	bcc.n	1b24 <__udivsi3+0x6c>
    1ad2:	0c03      	lsrs	r3, r0, #16
    1ad4:	428b      	cmp	r3, r1
    1ad6:	d30d      	bcc.n	1af4 <__udivsi3+0x3c>
    1ad8:	22ff      	movs	r2, #255	; 0xff
    1ada:	0209      	lsls	r1, r1, #8
    1adc:	ba12      	rev	r2, r2
    1ade:	0c03      	lsrs	r3, r0, #16
    1ae0:	428b      	cmp	r3, r1
    1ae2:	d302      	bcc.n	1aea <__udivsi3+0x32>
    1ae4:	1212      	asrs	r2, r2, #8
    1ae6:	0209      	lsls	r1, r1, #8
    1ae8:	d065      	beq.n	1bb6 <__udivsi3+0xfe>
    1aea:	0b03      	lsrs	r3, r0, #12
    1aec:	428b      	cmp	r3, r1
    1aee:	d319      	bcc.n	1b24 <__udivsi3+0x6c>
    1af0:	e000      	b.n	1af4 <__udivsi3+0x3c>
    1af2:	0a09      	lsrs	r1, r1, #8
    1af4:	0bc3      	lsrs	r3, r0, #15
    1af6:	428b      	cmp	r3, r1
    1af8:	d301      	bcc.n	1afe <__udivsi3+0x46>
    1afa:	03cb      	lsls	r3, r1, #15
    1afc:	1ac0      	subs	r0, r0, r3
    1afe:	4152      	adcs	r2, r2
    1b00:	0b83      	lsrs	r3, r0, #14
    1b02:	428b      	cmp	r3, r1
    1b04:	d301      	bcc.n	1b0a <__udivsi3+0x52>
    1b06:	038b      	lsls	r3, r1, #14
    1b08:	1ac0      	subs	r0, r0, r3
    1b0a:	4152      	adcs	r2, r2
    1b0c:	0b43      	lsrs	r3, r0, #13
    1b0e:	428b      	cmp	r3, r1
    1b10:	d301      	bcc.n	1b16 <__udivsi3+0x5e>
    1b12:	034b      	lsls	r3, r1, #13
    1b14:	1ac0      	subs	r0, r0, r3
    1b16:	4152      	adcs	r2, r2
    1b18:	0b03      	lsrs	r3, r0, #12
    1b1a:	428b      	cmp	r3, r1
    1b1c:	d301      	bcc.n	1b22 <__udivsi3+0x6a>
    1b1e:	030b      	lsls	r3, r1, #12
    1b20:	1ac0      	subs	r0, r0, r3
    1b22:	4152      	adcs	r2, r2
    1b24:	0ac3      	lsrs	r3, r0, #11
    1b26:	428b      	cmp	r3, r1
    1b28:	d301      	bcc.n	1b2e <__udivsi3+0x76>
    1b2a:	02cb      	lsls	r3, r1, #11
    1b2c:	1ac0      	subs	r0, r0, r3
    1b2e:	4152      	adcs	r2, r2
    1b30:	0a83      	lsrs	r3, r0, #10
    1b32:	428b      	cmp	r3, r1
    1b34:	d301      	bcc.n	1b3a <__udivsi3+0x82>
    1b36:	028b      	lsls	r3, r1, #10
    1b38:	1ac0      	subs	r0, r0, r3
    1b3a:	4152      	adcs	r2, r2
    1b3c:	0a43      	lsrs	r3, r0, #9
    1b3e:	428b      	cmp	r3, r1
    1b40:	d301      	bcc.n	1b46 <__udivsi3+0x8e>
    1b42:	024b      	lsls	r3, r1, #9
    1b44:	1ac0      	subs	r0, r0, r3
    1b46:	4152      	adcs	r2, r2
    1b48:	0a03      	lsrs	r3, r0, #8
    1b4a:	428b      	cmp	r3, r1
    1b4c:	d301      	bcc.n	1b52 <__udivsi3+0x9a>
    1b4e:	020b      	lsls	r3, r1, #8
    1b50:	1ac0      	subs	r0, r0, r3
    1b52:	4152      	adcs	r2, r2
    1b54:	d2cd      	bcs.n	1af2 <__udivsi3+0x3a>
    1b56:	09c3      	lsrs	r3, r0, #7
    1b58:	428b      	cmp	r3, r1
    1b5a:	d301      	bcc.n	1b60 <__udivsi3+0xa8>
    1b5c:	01cb      	lsls	r3, r1, #7
    1b5e:	1ac0      	subs	r0, r0, r3
    1b60:	4152      	adcs	r2, r2
    1b62:	0983      	lsrs	r3, r0, #6
    1b64:	428b      	cmp	r3, r1
    1b66:	d301      	bcc.n	1b6c <__udivsi3+0xb4>
    1b68:	018b      	lsls	r3, r1, #6
    1b6a:	1ac0      	subs	r0, r0, r3
    1b6c:	4152      	adcs	r2, r2
    1b6e:	0943      	lsrs	r3, r0, #5
    1b70:	428b      	cmp	r3, r1
    1b72:	d301      	bcc.n	1b78 <__udivsi3+0xc0>
    1b74:	014b      	lsls	r3, r1, #5
    1b76:	1ac0      	subs	r0, r0, r3
    1b78:	4152      	adcs	r2, r2
    1b7a:	0903      	lsrs	r3, r0, #4
    1b7c:	428b      	cmp	r3, r1
    1b7e:	d301      	bcc.n	1b84 <__udivsi3+0xcc>
    1b80:	010b      	lsls	r3, r1, #4
    1b82:	1ac0      	subs	r0, r0, r3
    1b84:	4152      	adcs	r2, r2
    1b86:	08c3      	lsrs	r3, r0, #3
    1b88:	428b      	cmp	r3, r1
    1b8a:	d301      	bcc.n	1b90 <__udivsi3+0xd8>
    1b8c:	00cb      	lsls	r3, r1, #3
    1b8e:	1ac0      	subs	r0, r0, r3
    1b90:	4152      	adcs	r2, r2
    1b92:	0883      	lsrs	r3, r0, #2
    1b94:	428b      	cmp	r3, r1
    1b96:	d301      	bcc.n	1b9c <__udivsi3+0xe4>
    1b98:	008b      	lsls	r3, r1, #2
    1b9a:	1ac0      	subs	r0, r0, r3
    1b9c:	4152      	adcs	r2, r2
    1b9e:	0843      	lsrs	r3, r0, #1
    1ba0:	428b      	cmp	r3, r1
    1ba2:	d301      	bcc.n	1ba8 <__udivsi3+0xf0>
    1ba4:	004b      	lsls	r3, r1, #1
    1ba6:	1ac0      	subs	r0, r0, r3
    1ba8:	4152      	adcs	r2, r2
    1baa:	1a41      	subs	r1, r0, r1
    1bac:	d200      	bcs.n	1bb0 <__udivsi3+0xf8>
    1bae:	4601      	mov	r1, r0
    1bb0:	4152      	adcs	r2, r2
    1bb2:	4610      	mov	r0, r2
    1bb4:	4770      	bx	lr
    1bb6:	e7ff      	b.n	1bb8 <__udivsi3+0x100>
    1bb8:	b501      	push	{r0, lr}
    1bba:	2000      	movs	r0, #0
    1bbc:	f000 f8f0 	bl	1da0 <__aeabi_idiv0>
    1bc0:	bd02      	pop	{r1, pc}
    1bc2:	46c0      	nop			; (mov r8, r8)

00001bc4 <__aeabi_uidivmod>:
    1bc4:	2900      	cmp	r1, #0
    1bc6:	d0f7      	beq.n	1bb8 <__udivsi3+0x100>
    1bc8:	e776      	b.n	1ab8 <__udivsi3>
    1bca:	4770      	bx	lr

00001bcc <__divsi3>:
    1bcc:	4603      	mov	r3, r0
    1bce:	430b      	orrs	r3, r1
    1bd0:	d47f      	bmi.n	1cd2 <__divsi3+0x106>
    1bd2:	2200      	movs	r2, #0
    1bd4:	0843      	lsrs	r3, r0, #1
    1bd6:	428b      	cmp	r3, r1
    1bd8:	d374      	bcc.n	1cc4 <__divsi3+0xf8>
    1bda:	0903      	lsrs	r3, r0, #4
    1bdc:	428b      	cmp	r3, r1
    1bde:	d35f      	bcc.n	1ca0 <__divsi3+0xd4>
    1be0:	0a03      	lsrs	r3, r0, #8
    1be2:	428b      	cmp	r3, r1
    1be4:	d344      	bcc.n	1c70 <__divsi3+0xa4>
    1be6:	0b03      	lsrs	r3, r0, #12
    1be8:	428b      	cmp	r3, r1
    1bea:	d328      	bcc.n	1c3e <__divsi3+0x72>
    1bec:	0c03      	lsrs	r3, r0, #16
    1bee:	428b      	cmp	r3, r1
    1bf0:	d30d      	bcc.n	1c0e <__divsi3+0x42>
    1bf2:	22ff      	movs	r2, #255	; 0xff
    1bf4:	0209      	lsls	r1, r1, #8
    1bf6:	ba12      	rev	r2, r2
    1bf8:	0c03      	lsrs	r3, r0, #16
    1bfa:	428b      	cmp	r3, r1
    1bfc:	d302      	bcc.n	1c04 <__divsi3+0x38>
    1bfe:	1212      	asrs	r2, r2, #8
    1c00:	0209      	lsls	r1, r1, #8
    1c02:	d065      	beq.n	1cd0 <__divsi3+0x104>
    1c04:	0b03      	lsrs	r3, r0, #12
    1c06:	428b      	cmp	r3, r1
    1c08:	d319      	bcc.n	1c3e <__divsi3+0x72>
    1c0a:	e000      	b.n	1c0e <__divsi3+0x42>
    1c0c:	0a09      	lsrs	r1, r1, #8
    1c0e:	0bc3      	lsrs	r3, r0, #15
    1c10:	428b      	cmp	r3, r1
    1c12:	d301      	bcc.n	1c18 <__divsi3+0x4c>
    1c14:	03cb      	lsls	r3, r1, #15
    1c16:	1ac0      	subs	r0, r0, r3
    1c18:	4152      	adcs	r2, r2
    1c1a:	0b83      	lsrs	r3, r0, #14
    1c1c:	428b      	cmp	r3, r1
    1c1e:	d301      	bcc.n	1c24 <__divsi3+0x58>
    1c20:	038b      	lsls	r3, r1, #14
    1c22:	1ac0      	subs	r0, r0, r3
    1c24:	4152      	adcs	r2, r2
    1c26:	0b43      	lsrs	r3, r0, #13
    1c28:	428b      	cmp	r3, r1
    1c2a:	d301      	bcc.n	1c30 <__divsi3+0x64>
    1c2c:	034b      	lsls	r3, r1, #13
    1c2e:	1ac0      	subs	r0, r0, r3
    1c30:	4152      	adcs	r2, r2
    1c32:	0b03      	lsrs	r3, r0, #12
    1c34:	428b      	cmp	r3, r1
    1c36:	d301      	bcc.n	1c3c <__divsi3+0x70>
    1c38:	030b      	lsls	r3, r1, #12
    1c3a:	1ac0      	subs	r0, r0, r3
    1c3c:	4152      	adcs	r2, r2
    1c3e:	0ac3      	lsrs	r3, r0, #11
    1c40:	428b      	cmp	r3, r1
    1c42:	d301      	bcc.n	1c48 <__divsi3+0x7c>
    1c44:	02cb      	lsls	r3, r1, #11
    1c46:	1ac0      	subs	r0, r0, r3
    1c48:	4152      	adcs	r2, r2
    1c4a:	0a83      	lsrs	r3, r0, #10
    1c4c:	428b      	cmp	r3, r1
    1c4e:	d301      	bcc.n	1c54 <__divsi3+0x88>
    1c50:	028b      	lsls	r3, r1, #10
    1c52:	1ac0      	subs	r0, r0, r3
    1c54:	4152      	adcs	r2, r2
    1c56:	0a43      	lsrs	r3, r0, #9
    1c58:	428b      	cmp	r3, r1
    1c5a:	d301      	bcc.n	1c60 <__divsi3+0x94>
    1c5c:	024b      	lsls	r3, r1, #9
    1c5e:	1ac0      	subs	r0, r0, r3
    1c60:	4152      	adcs	r2, r2
    1c62:	0a03      	lsrs	r3, r0, #8
    1c64:	428b      	cmp	r3, r1
    1c66:	d301      	bcc.n	1c6c <__divsi3+0xa0>
    1c68:	020b      	lsls	r3, r1, #8
    1c6a:	1ac0      	subs	r0, r0, r3
    1c6c:	4152      	adcs	r2, r2
    1c6e:	d2cd      	bcs.n	1c0c <__divsi3+0x40>
    1c70:	09c3      	lsrs	r3, r0, #7
    1c72:	428b      	cmp	r3, r1
    1c74:	d301      	bcc.n	1c7a <__divsi3+0xae>
    1c76:	01cb      	lsls	r3, r1, #7
    1c78:	1ac0      	subs	r0, r0, r3
    1c7a:	4152      	adcs	r2, r2
    1c7c:	0983      	lsrs	r3, r0, #6
    1c7e:	428b      	cmp	r3, r1
    1c80:	d301      	bcc.n	1c86 <__divsi3+0xba>
    1c82:	018b      	lsls	r3, r1, #6
    1c84:	1ac0      	subs	r0, r0, r3
    1c86:	4152      	adcs	r2, r2
    1c88:	0943      	lsrs	r3, r0, #5
    1c8a:	428b      	cmp	r3, r1
    1c8c:	d301      	bcc.n	1c92 <__divsi3+0xc6>
    1c8e:	014b      	lsls	r3, r1, #5
    1c90:	1ac0      	subs	r0, r0, r3
    1c92:	4152      	adcs	r2, r2
    1c94:	0903      	lsrs	r3, r0, #4
    1c96:	428b      	cmp	r3, r1
    1c98:	d301      	bcc.n	1c9e <__divsi3+0xd2>
    1c9a:	010b      	lsls	r3, r1, #4
    1c9c:	1ac0      	subs	r0, r0, r3
    1c9e:	4152      	adcs	r2, r2
    1ca0:	08c3      	lsrs	r3, r0, #3
    1ca2:	428b      	cmp	r3, r1
    1ca4:	d301      	bcc.n	1caa <__divsi3+0xde>
    1ca6:	00cb      	lsls	r3, r1, #3
    1ca8:	1ac0      	subs	r0, r0, r3
    1caa:	4152      	adcs	r2, r2
    1cac:	0883      	lsrs	r3, r0, #2
    1cae:	428b      	cmp	r3, r1
    1cb0:	d301      	bcc.n	1cb6 <__divsi3+0xea>
    1cb2:	008b      	lsls	r3, r1, #2
    1cb4:	1ac0      	subs	r0, r0, r3
    1cb6:	4152      	adcs	r2, r2
    1cb8:	0843      	lsrs	r3, r0, #1
    1cba:	428b      	cmp	r3, r1
    1cbc:	d301      	bcc.n	1cc2 <__divsi3+0xf6>
    1cbe:	004b      	lsls	r3, r1, #1
    1cc0:	1ac0      	subs	r0, r0, r3
    1cc2:	4152      	adcs	r2, r2
    1cc4:	1a41      	subs	r1, r0, r1
    1cc6:	d200      	bcs.n	1cca <__divsi3+0xfe>
    1cc8:	4601      	mov	r1, r0
    1cca:	4152      	adcs	r2, r2
    1ccc:	4610      	mov	r0, r2
    1cce:	4770      	bx	lr
    1cd0:	e05d      	b.n	1d8e <__divsi3+0x1c2>
    1cd2:	0fca      	lsrs	r2, r1, #31
    1cd4:	d000      	beq.n	1cd8 <__divsi3+0x10c>
    1cd6:	4249      	negs	r1, r1
    1cd8:	1003      	asrs	r3, r0, #32
    1cda:	d300      	bcc.n	1cde <__divsi3+0x112>
    1cdc:	4240      	negs	r0, r0
    1cde:	4053      	eors	r3, r2
    1ce0:	2200      	movs	r2, #0
    1ce2:	469c      	mov	ip, r3
    1ce4:	0903      	lsrs	r3, r0, #4
    1ce6:	428b      	cmp	r3, r1
    1ce8:	d32d      	bcc.n	1d46 <__divsi3+0x17a>
    1cea:	0a03      	lsrs	r3, r0, #8
    1cec:	428b      	cmp	r3, r1
    1cee:	d312      	bcc.n	1d16 <__divsi3+0x14a>
    1cf0:	22fc      	movs	r2, #252	; 0xfc
    1cf2:	0189      	lsls	r1, r1, #6
    1cf4:	ba12      	rev	r2, r2
    1cf6:	0a03      	lsrs	r3, r0, #8
    1cf8:	428b      	cmp	r3, r1
    1cfa:	d30c      	bcc.n	1d16 <__divsi3+0x14a>
    1cfc:	0189      	lsls	r1, r1, #6
    1cfe:	1192      	asrs	r2, r2, #6
    1d00:	428b      	cmp	r3, r1
    1d02:	d308      	bcc.n	1d16 <__divsi3+0x14a>
    1d04:	0189      	lsls	r1, r1, #6
    1d06:	1192      	asrs	r2, r2, #6
    1d08:	428b      	cmp	r3, r1
    1d0a:	d304      	bcc.n	1d16 <__divsi3+0x14a>
    1d0c:	0189      	lsls	r1, r1, #6
    1d0e:	d03a      	beq.n	1d86 <__divsi3+0x1ba>
    1d10:	1192      	asrs	r2, r2, #6
    1d12:	e000      	b.n	1d16 <__divsi3+0x14a>
    1d14:	0989      	lsrs	r1, r1, #6
    1d16:	09c3      	lsrs	r3, r0, #7
    1d18:	428b      	cmp	r3, r1
    1d1a:	d301      	bcc.n	1d20 <__divsi3+0x154>
    1d1c:	01cb      	lsls	r3, r1, #7
    1d1e:	1ac0      	subs	r0, r0, r3
    1d20:	4152      	adcs	r2, r2
    1d22:	0983      	lsrs	r3, r0, #6
    1d24:	428b      	cmp	r3, r1
    1d26:	d301      	bcc.n	1d2c <__divsi3+0x160>
    1d28:	018b      	lsls	r3, r1, #6
    1d2a:	1ac0      	subs	r0, r0, r3
    1d2c:	4152      	adcs	r2, r2
    1d2e:	0943      	lsrs	r3, r0, #5
    1d30:	428b      	cmp	r3, r1
    1d32:	d301      	bcc.n	1d38 <__divsi3+0x16c>
    1d34:	014b      	lsls	r3, r1, #5
    1d36:	1ac0      	subs	r0, r0, r3
    1d38:	4152      	adcs	r2, r2
    1d3a:	0903      	lsrs	r3, r0, #4
    1d3c:	428b      	cmp	r3, r1
    1d3e:	d301      	bcc.n	1d44 <__divsi3+0x178>
    1d40:	010b      	lsls	r3, r1, #4
    1d42:	1ac0      	subs	r0, r0, r3
    1d44:	4152      	adcs	r2, r2
    1d46:	08c3      	lsrs	r3, r0, #3
    1d48:	428b      	cmp	r3, r1
    1d4a:	d301      	bcc.n	1d50 <__divsi3+0x184>
    1d4c:	00cb      	lsls	r3, r1, #3
    1d4e:	1ac0      	subs	r0, r0, r3
    1d50:	4152      	adcs	r2, r2
    1d52:	0883      	lsrs	r3, r0, #2
    1d54:	428b      	cmp	r3, r1
    1d56:	d301      	bcc.n	1d5c <__divsi3+0x190>
    1d58:	008b      	lsls	r3, r1, #2
    1d5a:	1ac0      	subs	r0, r0, r3
    1d5c:	4152      	adcs	r2, r2
    1d5e:	d2d9      	bcs.n	1d14 <__divsi3+0x148>
    1d60:	0843      	lsrs	r3, r0, #1
    1d62:	428b      	cmp	r3, r1
    1d64:	d301      	bcc.n	1d6a <__divsi3+0x19e>
    1d66:	004b      	lsls	r3, r1, #1
    1d68:	1ac0      	subs	r0, r0, r3
    1d6a:	4152      	adcs	r2, r2
    1d6c:	1a41      	subs	r1, r0, r1
    1d6e:	d200      	bcs.n	1d72 <__divsi3+0x1a6>
    1d70:	4601      	mov	r1, r0
    1d72:	4663      	mov	r3, ip
    1d74:	4152      	adcs	r2, r2
    1d76:	105b      	asrs	r3, r3, #1
    1d78:	4610      	mov	r0, r2
    1d7a:	d301      	bcc.n	1d80 <__divsi3+0x1b4>
    1d7c:	4240      	negs	r0, r0
    1d7e:	2b00      	cmp	r3, #0
    1d80:	d500      	bpl.n	1d84 <__divsi3+0x1b8>
    1d82:	4249      	negs	r1, r1
    1d84:	4770      	bx	lr
    1d86:	4663      	mov	r3, ip
    1d88:	105b      	asrs	r3, r3, #1
    1d8a:	d300      	bcc.n	1d8e <__divsi3+0x1c2>
    1d8c:	4240      	negs	r0, r0
    1d8e:	b501      	push	{r0, lr}
    1d90:	2000      	movs	r0, #0
    1d92:	f000 f805 	bl	1da0 <__aeabi_idiv0>
    1d96:	bd02      	pop	{r1, pc}

00001d98 <__aeabi_idivmod>:
    1d98:	2900      	cmp	r1, #0
    1d9a:	d0f8      	beq.n	1d8e <__divsi3+0x1c2>
    1d9c:	e716      	b.n	1bcc <__divsi3>
    1d9e:	4770      	bx	lr

00001da0 <__aeabi_idiv0>:
    1da0:	4770      	bx	lr
    1da2:	46c0      	nop			; (mov r8, r8)

00001da4 <__aeabi_lmul>:
    1da4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1da6:	46ce      	mov	lr, r9
    1da8:	4647      	mov	r7, r8
    1daa:	0415      	lsls	r5, r2, #16
    1dac:	0c2d      	lsrs	r5, r5, #16
    1dae:	002e      	movs	r6, r5
    1db0:	b580      	push	{r7, lr}
    1db2:	0407      	lsls	r7, r0, #16
    1db4:	0c14      	lsrs	r4, r2, #16
    1db6:	0c3f      	lsrs	r7, r7, #16
    1db8:	4699      	mov	r9, r3
    1dba:	0c03      	lsrs	r3, r0, #16
    1dbc:	437e      	muls	r6, r7
    1dbe:	435d      	muls	r5, r3
    1dc0:	4367      	muls	r7, r4
    1dc2:	4363      	muls	r3, r4
    1dc4:	197f      	adds	r7, r7, r5
    1dc6:	0c34      	lsrs	r4, r6, #16
    1dc8:	19e4      	adds	r4, r4, r7
    1dca:	469c      	mov	ip, r3
    1dcc:	42a5      	cmp	r5, r4
    1dce:	d903      	bls.n	1dd8 <__aeabi_lmul+0x34>
    1dd0:	2380      	movs	r3, #128	; 0x80
    1dd2:	025b      	lsls	r3, r3, #9
    1dd4:	4698      	mov	r8, r3
    1dd6:	44c4      	add	ip, r8
    1dd8:	464b      	mov	r3, r9
    1dda:	4351      	muls	r1, r2
    1ddc:	4343      	muls	r3, r0
    1dde:	0436      	lsls	r6, r6, #16
    1de0:	0c36      	lsrs	r6, r6, #16
    1de2:	0c25      	lsrs	r5, r4, #16
    1de4:	0424      	lsls	r4, r4, #16
    1de6:	4465      	add	r5, ip
    1de8:	19a4      	adds	r4, r4, r6
    1dea:	1859      	adds	r1, r3, r1
    1dec:	1949      	adds	r1, r1, r5
    1dee:	0020      	movs	r0, r4
    1df0:	bc0c      	pop	{r2, r3}
    1df2:	4690      	mov	r8, r2
    1df4:	4699      	mov	r9, r3
    1df6:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001df8 <__libc_init_array>:
    1df8:	b570      	push	{r4, r5, r6, lr}
    1dfa:	2600      	movs	r6, #0
    1dfc:	4d0c      	ldr	r5, [pc, #48]	; (1e30 <__libc_init_array+0x38>)
    1dfe:	4c0d      	ldr	r4, [pc, #52]	; (1e34 <__libc_init_array+0x3c>)
    1e00:	1b64      	subs	r4, r4, r5
    1e02:	10a4      	asrs	r4, r4, #2
    1e04:	42a6      	cmp	r6, r4
    1e06:	d109      	bne.n	1e1c <__libc_init_array+0x24>
    1e08:	2600      	movs	r6, #0
    1e0a:	f001 f897 	bl	2f3c <_init>
    1e0e:	4d0a      	ldr	r5, [pc, #40]	; (1e38 <__libc_init_array+0x40>)
    1e10:	4c0a      	ldr	r4, [pc, #40]	; (1e3c <__libc_init_array+0x44>)
    1e12:	1b64      	subs	r4, r4, r5
    1e14:	10a4      	asrs	r4, r4, #2
    1e16:	42a6      	cmp	r6, r4
    1e18:	d105      	bne.n	1e26 <__libc_init_array+0x2e>
    1e1a:	bd70      	pop	{r4, r5, r6, pc}
    1e1c:	00b3      	lsls	r3, r6, #2
    1e1e:	58eb      	ldr	r3, [r5, r3]
    1e20:	4798      	blx	r3
    1e22:	3601      	adds	r6, #1
    1e24:	e7ee      	b.n	1e04 <__libc_init_array+0xc>
    1e26:	00b3      	lsls	r3, r6, #2
    1e28:	58eb      	ldr	r3, [r5, r3]
    1e2a:	4798      	blx	r3
    1e2c:	3601      	adds	r6, #1
    1e2e:	e7f2      	b.n	1e16 <__libc_init_array+0x1e>
    1e30:	00002f48 	.word	0x00002f48
    1e34:	00002f48 	.word	0x00002f48
    1e38:	00002f48 	.word	0x00002f48
    1e3c:	00002f4c 	.word	0x00002f4c

00001e40 <memset>:
    1e40:	0003      	movs	r3, r0
    1e42:	1882      	adds	r2, r0, r2
    1e44:	4293      	cmp	r3, r2
    1e46:	d100      	bne.n	1e4a <memset+0xa>
    1e48:	4770      	bx	lr
    1e4a:	7019      	strb	r1, [r3, #0]
    1e4c:	3301      	adds	r3, #1
    1e4e:	e7f9      	b.n	1e44 <memset+0x4>

00001e50 <iprintf>:
    1e50:	b40f      	push	{r0, r1, r2, r3}
    1e52:	4b0b      	ldr	r3, [pc, #44]	; (1e80 <iprintf+0x30>)
    1e54:	b513      	push	{r0, r1, r4, lr}
    1e56:	681c      	ldr	r4, [r3, #0]
    1e58:	2c00      	cmp	r4, #0
    1e5a:	d005      	beq.n	1e68 <iprintf+0x18>
    1e5c:	69a3      	ldr	r3, [r4, #24]
    1e5e:	2b00      	cmp	r3, #0
    1e60:	d102      	bne.n	1e68 <iprintf+0x18>
    1e62:	0020      	movs	r0, r4
    1e64:	f000 f9bc 	bl	21e0 <__sinit>
    1e68:	ab05      	add	r3, sp, #20
    1e6a:	9a04      	ldr	r2, [sp, #16]
    1e6c:	68a1      	ldr	r1, [r4, #8]
    1e6e:	0020      	movs	r0, r4
    1e70:	9301      	str	r3, [sp, #4]
    1e72:	f000 fb8b 	bl	258c <_vfiprintf_r>
    1e76:	bc16      	pop	{r1, r2, r4}
    1e78:	bc08      	pop	{r3}
    1e7a:	b004      	add	sp, #16
    1e7c:	4718      	bx	r3
    1e7e:	46c0      	nop			; (mov r8, r8)
    1e80:	20000020 	.word	0x20000020

00001e84 <setbuf>:
    1e84:	424a      	negs	r2, r1
    1e86:	414a      	adcs	r2, r1
    1e88:	2380      	movs	r3, #128	; 0x80
    1e8a:	b510      	push	{r4, lr}
    1e8c:	0052      	lsls	r2, r2, #1
    1e8e:	00db      	lsls	r3, r3, #3
    1e90:	f000 f802 	bl	1e98 <setvbuf>
    1e94:	bd10      	pop	{r4, pc}
	...

00001e98 <setvbuf>:
    1e98:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e9a:	001d      	movs	r5, r3
    1e9c:	4b4f      	ldr	r3, [pc, #316]	; (1fdc <setvbuf+0x144>)
    1e9e:	b085      	sub	sp, #20
    1ea0:	681e      	ldr	r6, [r3, #0]
    1ea2:	0004      	movs	r4, r0
    1ea4:	000f      	movs	r7, r1
    1ea6:	9200      	str	r2, [sp, #0]
    1ea8:	2e00      	cmp	r6, #0
    1eaa:	d005      	beq.n	1eb8 <setvbuf+0x20>
    1eac:	69b3      	ldr	r3, [r6, #24]
    1eae:	2b00      	cmp	r3, #0
    1eb0:	d102      	bne.n	1eb8 <setvbuf+0x20>
    1eb2:	0030      	movs	r0, r6
    1eb4:	f000 f994 	bl	21e0 <__sinit>
    1eb8:	4b49      	ldr	r3, [pc, #292]	; (1fe0 <setvbuf+0x148>)
    1eba:	429c      	cmp	r4, r3
    1ebc:	d150      	bne.n	1f60 <setvbuf+0xc8>
    1ebe:	6874      	ldr	r4, [r6, #4]
    1ec0:	9b00      	ldr	r3, [sp, #0]
    1ec2:	2b02      	cmp	r3, #2
    1ec4:	d005      	beq.n	1ed2 <setvbuf+0x3a>
    1ec6:	2b01      	cmp	r3, #1
    1ec8:	d900      	bls.n	1ecc <setvbuf+0x34>
    1eca:	e084      	b.n	1fd6 <setvbuf+0x13e>
    1ecc:	2d00      	cmp	r5, #0
    1ece:	da00      	bge.n	1ed2 <setvbuf+0x3a>
    1ed0:	e081      	b.n	1fd6 <setvbuf+0x13e>
    1ed2:	0021      	movs	r1, r4
    1ed4:	0030      	movs	r0, r6
    1ed6:	f000 f915 	bl	2104 <_fflush_r>
    1eda:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1edc:	2900      	cmp	r1, #0
    1ede:	d008      	beq.n	1ef2 <setvbuf+0x5a>
    1ee0:	0023      	movs	r3, r4
    1ee2:	3344      	adds	r3, #68	; 0x44
    1ee4:	4299      	cmp	r1, r3
    1ee6:	d002      	beq.n	1eee <setvbuf+0x56>
    1ee8:	0030      	movs	r0, r6
    1eea:	f000 fa7f 	bl	23ec <_free_r>
    1eee:	2300      	movs	r3, #0
    1ef0:	6363      	str	r3, [r4, #52]	; 0x34
    1ef2:	2300      	movs	r3, #0
    1ef4:	61a3      	str	r3, [r4, #24]
    1ef6:	6063      	str	r3, [r4, #4]
    1ef8:	89a3      	ldrh	r3, [r4, #12]
    1efa:	061b      	lsls	r3, r3, #24
    1efc:	d503      	bpl.n	1f06 <setvbuf+0x6e>
    1efe:	6921      	ldr	r1, [r4, #16]
    1f00:	0030      	movs	r0, r6
    1f02:	f000 fa73 	bl	23ec <_free_r>
    1f06:	89a3      	ldrh	r3, [r4, #12]
    1f08:	4a36      	ldr	r2, [pc, #216]	; (1fe4 <setvbuf+0x14c>)
    1f0a:	4013      	ands	r3, r2
    1f0c:	81a3      	strh	r3, [r4, #12]
    1f0e:	9b00      	ldr	r3, [sp, #0]
    1f10:	2b02      	cmp	r3, #2
    1f12:	d05a      	beq.n	1fca <setvbuf+0x132>
    1f14:	ab03      	add	r3, sp, #12
    1f16:	aa02      	add	r2, sp, #8
    1f18:	0021      	movs	r1, r4
    1f1a:	0030      	movs	r0, r6
    1f1c:	f000 f9f6 	bl	230c <__swhatbuf_r>
    1f20:	89a3      	ldrh	r3, [r4, #12]
    1f22:	4318      	orrs	r0, r3
    1f24:	81a0      	strh	r0, [r4, #12]
    1f26:	2d00      	cmp	r5, #0
    1f28:	d124      	bne.n	1f74 <setvbuf+0xdc>
    1f2a:	9d02      	ldr	r5, [sp, #8]
    1f2c:	0028      	movs	r0, r5
    1f2e:	f000 fa53 	bl	23d8 <malloc>
    1f32:	9501      	str	r5, [sp, #4]
    1f34:	1e07      	subs	r7, r0, #0
    1f36:	d142      	bne.n	1fbe <setvbuf+0x126>
    1f38:	9b02      	ldr	r3, [sp, #8]
    1f3a:	9301      	str	r3, [sp, #4]
    1f3c:	42ab      	cmp	r3, r5
    1f3e:	d139      	bne.n	1fb4 <setvbuf+0x11c>
    1f40:	2001      	movs	r0, #1
    1f42:	4240      	negs	r0, r0
    1f44:	2302      	movs	r3, #2
    1f46:	89a2      	ldrh	r2, [r4, #12]
    1f48:	4313      	orrs	r3, r2
    1f4a:	81a3      	strh	r3, [r4, #12]
    1f4c:	2300      	movs	r3, #0
    1f4e:	60a3      	str	r3, [r4, #8]
    1f50:	0023      	movs	r3, r4
    1f52:	3347      	adds	r3, #71	; 0x47
    1f54:	6023      	str	r3, [r4, #0]
    1f56:	6123      	str	r3, [r4, #16]
    1f58:	2301      	movs	r3, #1
    1f5a:	6163      	str	r3, [r4, #20]
    1f5c:	b005      	add	sp, #20
    1f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f60:	4b21      	ldr	r3, [pc, #132]	; (1fe8 <setvbuf+0x150>)
    1f62:	429c      	cmp	r4, r3
    1f64:	d101      	bne.n	1f6a <setvbuf+0xd2>
    1f66:	68b4      	ldr	r4, [r6, #8]
    1f68:	e7aa      	b.n	1ec0 <setvbuf+0x28>
    1f6a:	4b20      	ldr	r3, [pc, #128]	; (1fec <setvbuf+0x154>)
    1f6c:	429c      	cmp	r4, r3
    1f6e:	d1a7      	bne.n	1ec0 <setvbuf+0x28>
    1f70:	68f4      	ldr	r4, [r6, #12]
    1f72:	e7a5      	b.n	1ec0 <setvbuf+0x28>
    1f74:	2f00      	cmp	r7, #0
    1f76:	d0d9      	beq.n	1f2c <setvbuf+0x94>
    1f78:	69b3      	ldr	r3, [r6, #24]
    1f7a:	2b00      	cmp	r3, #0
    1f7c:	d102      	bne.n	1f84 <setvbuf+0xec>
    1f7e:	0030      	movs	r0, r6
    1f80:	f000 f92e 	bl	21e0 <__sinit>
    1f84:	9b00      	ldr	r3, [sp, #0]
    1f86:	2b01      	cmp	r3, #1
    1f88:	d103      	bne.n	1f92 <setvbuf+0xfa>
    1f8a:	89a3      	ldrh	r3, [r4, #12]
    1f8c:	9a00      	ldr	r2, [sp, #0]
    1f8e:	431a      	orrs	r2, r3
    1f90:	81a2      	strh	r2, [r4, #12]
    1f92:	2008      	movs	r0, #8
    1f94:	89a3      	ldrh	r3, [r4, #12]
    1f96:	6027      	str	r7, [r4, #0]
    1f98:	6127      	str	r7, [r4, #16]
    1f9a:	6165      	str	r5, [r4, #20]
    1f9c:	4018      	ands	r0, r3
    1f9e:	d018      	beq.n	1fd2 <setvbuf+0x13a>
    1fa0:	2001      	movs	r0, #1
    1fa2:	4018      	ands	r0, r3
    1fa4:	2300      	movs	r3, #0
    1fa6:	4298      	cmp	r0, r3
    1fa8:	d011      	beq.n	1fce <setvbuf+0x136>
    1faa:	426d      	negs	r5, r5
    1fac:	60a3      	str	r3, [r4, #8]
    1fae:	61a5      	str	r5, [r4, #24]
    1fb0:	0018      	movs	r0, r3
    1fb2:	e7d3      	b.n	1f5c <setvbuf+0xc4>
    1fb4:	9801      	ldr	r0, [sp, #4]
    1fb6:	f000 fa0f 	bl	23d8 <malloc>
    1fba:	1e07      	subs	r7, r0, #0
    1fbc:	d0c0      	beq.n	1f40 <setvbuf+0xa8>
    1fbe:	2380      	movs	r3, #128	; 0x80
    1fc0:	89a2      	ldrh	r2, [r4, #12]
    1fc2:	9d01      	ldr	r5, [sp, #4]
    1fc4:	4313      	orrs	r3, r2
    1fc6:	81a3      	strh	r3, [r4, #12]
    1fc8:	e7d6      	b.n	1f78 <setvbuf+0xe0>
    1fca:	2000      	movs	r0, #0
    1fcc:	e7ba      	b.n	1f44 <setvbuf+0xac>
    1fce:	60a5      	str	r5, [r4, #8]
    1fd0:	e7c4      	b.n	1f5c <setvbuf+0xc4>
    1fd2:	60a0      	str	r0, [r4, #8]
    1fd4:	e7c2      	b.n	1f5c <setvbuf+0xc4>
    1fd6:	2001      	movs	r0, #1
    1fd8:	4240      	negs	r0, r0
    1fda:	e7bf      	b.n	1f5c <setvbuf+0xc4>
    1fdc:	20000020 	.word	0x20000020
    1fe0:	00002ec8 	.word	0x00002ec8
    1fe4:	fffff35c 	.word	0xfffff35c
    1fe8:	00002ee8 	.word	0x00002ee8
    1fec:	00002ea8 	.word	0x00002ea8

00001ff0 <__sflush_r>:
    1ff0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1ff2:	898a      	ldrh	r2, [r1, #12]
    1ff4:	0005      	movs	r5, r0
    1ff6:	000c      	movs	r4, r1
    1ff8:	0713      	lsls	r3, r2, #28
    1ffa:	d460      	bmi.n	20be <STACK_SIZE+0xbe>
    1ffc:	684b      	ldr	r3, [r1, #4]
    1ffe:	2b00      	cmp	r3, #0
    2000:	dc04      	bgt.n	200c <STACK_SIZE+0xc>
    2002:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    2004:	2b00      	cmp	r3, #0
    2006:	dc01      	bgt.n	200c <STACK_SIZE+0xc>
    2008:	2000      	movs	r0, #0
    200a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    200c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    200e:	2f00      	cmp	r7, #0
    2010:	d0fa      	beq.n	2008 <STACK_SIZE+0x8>
    2012:	2300      	movs	r3, #0
    2014:	682e      	ldr	r6, [r5, #0]
    2016:	602b      	str	r3, [r5, #0]
    2018:	2380      	movs	r3, #128	; 0x80
    201a:	015b      	lsls	r3, r3, #5
    201c:	401a      	ands	r2, r3
    201e:	d034      	beq.n	208a <STACK_SIZE+0x8a>
    2020:	6d60      	ldr	r0, [r4, #84]	; 0x54
    2022:	89a3      	ldrh	r3, [r4, #12]
    2024:	075b      	lsls	r3, r3, #29
    2026:	d506      	bpl.n	2036 <STACK_SIZE+0x36>
    2028:	6863      	ldr	r3, [r4, #4]
    202a:	1ac0      	subs	r0, r0, r3
    202c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    202e:	2b00      	cmp	r3, #0
    2030:	d001      	beq.n	2036 <STACK_SIZE+0x36>
    2032:	6c23      	ldr	r3, [r4, #64]	; 0x40
    2034:	1ac0      	subs	r0, r0, r3
    2036:	0002      	movs	r2, r0
    2038:	6a21      	ldr	r1, [r4, #32]
    203a:	2300      	movs	r3, #0
    203c:	0028      	movs	r0, r5
    203e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    2040:	47b8      	blx	r7
    2042:	89a1      	ldrh	r1, [r4, #12]
    2044:	1c43      	adds	r3, r0, #1
    2046:	d106      	bne.n	2056 <STACK_SIZE+0x56>
    2048:	682b      	ldr	r3, [r5, #0]
    204a:	2b1d      	cmp	r3, #29
    204c:	d831      	bhi.n	20b2 <STACK_SIZE+0xb2>
    204e:	4a2c      	ldr	r2, [pc, #176]	; (2100 <STACK_SIZE+0x100>)
    2050:	40da      	lsrs	r2, r3
    2052:	07d3      	lsls	r3, r2, #31
    2054:	d52d      	bpl.n	20b2 <STACK_SIZE+0xb2>
    2056:	2300      	movs	r3, #0
    2058:	6063      	str	r3, [r4, #4]
    205a:	6923      	ldr	r3, [r4, #16]
    205c:	6023      	str	r3, [r4, #0]
    205e:	04cb      	lsls	r3, r1, #19
    2060:	d505      	bpl.n	206e <STACK_SIZE+0x6e>
    2062:	1c43      	adds	r3, r0, #1
    2064:	d102      	bne.n	206c <STACK_SIZE+0x6c>
    2066:	682b      	ldr	r3, [r5, #0]
    2068:	2b00      	cmp	r3, #0
    206a:	d100      	bne.n	206e <STACK_SIZE+0x6e>
    206c:	6560      	str	r0, [r4, #84]	; 0x54
    206e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2070:	602e      	str	r6, [r5, #0]
    2072:	2900      	cmp	r1, #0
    2074:	d0c8      	beq.n	2008 <STACK_SIZE+0x8>
    2076:	0023      	movs	r3, r4
    2078:	3344      	adds	r3, #68	; 0x44
    207a:	4299      	cmp	r1, r3
    207c:	d002      	beq.n	2084 <STACK_SIZE+0x84>
    207e:	0028      	movs	r0, r5
    2080:	f000 f9b4 	bl	23ec <_free_r>
    2084:	2000      	movs	r0, #0
    2086:	6360      	str	r0, [r4, #52]	; 0x34
    2088:	e7bf      	b.n	200a <STACK_SIZE+0xa>
    208a:	2301      	movs	r3, #1
    208c:	6a21      	ldr	r1, [r4, #32]
    208e:	0028      	movs	r0, r5
    2090:	47b8      	blx	r7
    2092:	1c43      	adds	r3, r0, #1
    2094:	d1c5      	bne.n	2022 <STACK_SIZE+0x22>
    2096:	682b      	ldr	r3, [r5, #0]
    2098:	2b00      	cmp	r3, #0
    209a:	d0c2      	beq.n	2022 <STACK_SIZE+0x22>
    209c:	2b1d      	cmp	r3, #29
    209e:	d001      	beq.n	20a4 <STACK_SIZE+0xa4>
    20a0:	2b16      	cmp	r3, #22
    20a2:	d101      	bne.n	20a8 <STACK_SIZE+0xa8>
    20a4:	602e      	str	r6, [r5, #0]
    20a6:	e7af      	b.n	2008 <STACK_SIZE+0x8>
    20a8:	2340      	movs	r3, #64	; 0x40
    20aa:	89a2      	ldrh	r2, [r4, #12]
    20ac:	4313      	orrs	r3, r2
    20ae:	81a3      	strh	r3, [r4, #12]
    20b0:	e7ab      	b.n	200a <STACK_SIZE+0xa>
    20b2:	2340      	movs	r3, #64	; 0x40
    20b4:	430b      	orrs	r3, r1
    20b6:	2001      	movs	r0, #1
    20b8:	81a3      	strh	r3, [r4, #12]
    20ba:	4240      	negs	r0, r0
    20bc:	e7a5      	b.n	200a <STACK_SIZE+0xa>
    20be:	690f      	ldr	r7, [r1, #16]
    20c0:	2f00      	cmp	r7, #0
    20c2:	d0a1      	beq.n	2008 <STACK_SIZE+0x8>
    20c4:	680b      	ldr	r3, [r1, #0]
    20c6:	600f      	str	r7, [r1, #0]
    20c8:	1bdb      	subs	r3, r3, r7
    20ca:	9301      	str	r3, [sp, #4]
    20cc:	2300      	movs	r3, #0
    20ce:	0792      	lsls	r2, r2, #30
    20d0:	d100      	bne.n	20d4 <STACK_SIZE+0xd4>
    20d2:	694b      	ldr	r3, [r1, #20]
    20d4:	60a3      	str	r3, [r4, #8]
    20d6:	9b01      	ldr	r3, [sp, #4]
    20d8:	2b00      	cmp	r3, #0
    20da:	dc00      	bgt.n	20de <STACK_SIZE+0xde>
    20dc:	e794      	b.n	2008 <STACK_SIZE+0x8>
    20de:	9b01      	ldr	r3, [sp, #4]
    20e0:	003a      	movs	r2, r7
    20e2:	6a21      	ldr	r1, [r4, #32]
    20e4:	0028      	movs	r0, r5
    20e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    20e8:	47b0      	blx	r6
    20ea:	2800      	cmp	r0, #0
    20ec:	dc03      	bgt.n	20f6 <STACK_SIZE+0xf6>
    20ee:	2340      	movs	r3, #64	; 0x40
    20f0:	89a2      	ldrh	r2, [r4, #12]
    20f2:	4313      	orrs	r3, r2
    20f4:	e7df      	b.n	20b6 <STACK_SIZE+0xb6>
    20f6:	9b01      	ldr	r3, [sp, #4]
    20f8:	183f      	adds	r7, r7, r0
    20fa:	1a1b      	subs	r3, r3, r0
    20fc:	9301      	str	r3, [sp, #4]
    20fe:	e7ea      	b.n	20d6 <STACK_SIZE+0xd6>
    2100:	20400001 	.word	0x20400001

00002104 <_fflush_r>:
    2104:	690b      	ldr	r3, [r1, #16]
    2106:	b570      	push	{r4, r5, r6, lr}
    2108:	0005      	movs	r5, r0
    210a:	000c      	movs	r4, r1
    210c:	2b00      	cmp	r3, #0
    210e:	d101      	bne.n	2114 <_fflush_r+0x10>
    2110:	2000      	movs	r0, #0
    2112:	bd70      	pop	{r4, r5, r6, pc}
    2114:	2800      	cmp	r0, #0
    2116:	d004      	beq.n	2122 <_fflush_r+0x1e>
    2118:	6983      	ldr	r3, [r0, #24]
    211a:	2b00      	cmp	r3, #0
    211c:	d101      	bne.n	2122 <_fflush_r+0x1e>
    211e:	f000 f85f 	bl	21e0 <__sinit>
    2122:	4b0b      	ldr	r3, [pc, #44]	; (2150 <_fflush_r+0x4c>)
    2124:	429c      	cmp	r4, r3
    2126:	d109      	bne.n	213c <_fflush_r+0x38>
    2128:	686c      	ldr	r4, [r5, #4]
    212a:	220c      	movs	r2, #12
    212c:	5ea3      	ldrsh	r3, [r4, r2]
    212e:	2b00      	cmp	r3, #0
    2130:	d0ee      	beq.n	2110 <_fflush_r+0xc>
    2132:	0021      	movs	r1, r4
    2134:	0028      	movs	r0, r5
    2136:	f7ff ff5b 	bl	1ff0 <__sflush_r>
    213a:	e7ea      	b.n	2112 <_fflush_r+0xe>
    213c:	4b05      	ldr	r3, [pc, #20]	; (2154 <_fflush_r+0x50>)
    213e:	429c      	cmp	r4, r3
    2140:	d101      	bne.n	2146 <_fflush_r+0x42>
    2142:	68ac      	ldr	r4, [r5, #8]
    2144:	e7f1      	b.n	212a <_fflush_r+0x26>
    2146:	4b04      	ldr	r3, [pc, #16]	; (2158 <_fflush_r+0x54>)
    2148:	429c      	cmp	r4, r3
    214a:	d1ee      	bne.n	212a <_fflush_r+0x26>
    214c:	68ec      	ldr	r4, [r5, #12]
    214e:	e7ec      	b.n	212a <_fflush_r+0x26>
    2150:	00002ec8 	.word	0x00002ec8
    2154:	00002ee8 	.word	0x00002ee8
    2158:	00002ea8 	.word	0x00002ea8

0000215c <_cleanup_r>:
    215c:	b510      	push	{r4, lr}
    215e:	4902      	ldr	r1, [pc, #8]	; (2168 <_cleanup_r+0xc>)
    2160:	f000 f8b2 	bl	22c8 <_fwalk_reent>
    2164:	bd10      	pop	{r4, pc}
    2166:	46c0      	nop			; (mov r8, r8)
    2168:	00002105 	.word	0x00002105

0000216c <std.isra.0>:
    216c:	2300      	movs	r3, #0
    216e:	b510      	push	{r4, lr}
    2170:	0004      	movs	r4, r0
    2172:	6003      	str	r3, [r0, #0]
    2174:	6043      	str	r3, [r0, #4]
    2176:	6083      	str	r3, [r0, #8]
    2178:	8181      	strh	r1, [r0, #12]
    217a:	6643      	str	r3, [r0, #100]	; 0x64
    217c:	81c2      	strh	r2, [r0, #14]
    217e:	6103      	str	r3, [r0, #16]
    2180:	6143      	str	r3, [r0, #20]
    2182:	6183      	str	r3, [r0, #24]
    2184:	0019      	movs	r1, r3
    2186:	2208      	movs	r2, #8
    2188:	305c      	adds	r0, #92	; 0x5c
    218a:	f7ff fe59 	bl	1e40 <memset>
    218e:	4b05      	ldr	r3, [pc, #20]	; (21a4 <std.isra.0+0x38>)
    2190:	6224      	str	r4, [r4, #32]
    2192:	6263      	str	r3, [r4, #36]	; 0x24
    2194:	4b04      	ldr	r3, [pc, #16]	; (21a8 <std.isra.0+0x3c>)
    2196:	62a3      	str	r3, [r4, #40]	; 0x28
    2198:	4b04      	ldr	r3, [pc, #16]	; (21ac <std.isra.0+0x40>)
    219a:	62e3      	str	r3, [r4, #44]	; 0x2c
    219c:	4b04      	ldr	r3, [pc, #16]	; (21b0 <std.isra.0+0x44>)
    219e:	6323      	str	r3, [r4, #48]	; 0x30
    21a0:	bd10      	pop	{r4, pc}
    21a2:	46c0      	nop			; (mov r8, r8)
    21a4:	00002af9 	.word	0x00002af9
    21a8:	00002b21 	.word	0x00002b21
    21ac:	00002b59 	.word	0x00002b59
    21b0:	00002b85 	.word	0x00002b85

000021b4 <__sfmoreglue>:
    21b4:	b570      	push	{r4, r5, r6, lr}
    21b6:	2568      	movs	r5, #104	; 0x68
    21b8:	1e4a      	subs	r2, r1, #1
    21ba:	4355      	muls	r5, r2
    21bc:	000e      	movs	r6, r1
    21be:	0029      	movs	r1, r5
    21c0:	3174      	adds	r1, #116	; 0x74
    21c2:	f000 f95d 	bl	2480 <_malloc_r>
    21c6:	1e04      	subs	r4, r0, #0
    21c8:	d008      	beq.n	21dc <__sfmoreglue+0x28>
    21ca:	2100      	movs	r1, #0
    21cc:	002a      	movs	r2, r5
    21ce:	6001      	str	r1, [r0, #0]
    21d0:	6046      	str	r6, [r0, #4]
    21d2:	300c      	adds	r0, #12
    21d4:	60a0      	str	r0, [r4, #8]
    21d6:	3268      	adds	r2, #104	; 0x68
    21d8:	f7ff fe32 	bl	1e40 <memset>
    21dc:	0020      	movs	r0, r4
    21de:	bd70      	pop	{r4, r5, r6, pc}

000021e0 <__sinit>:
    21e0:	6983      	ldr	r3, [r0, #24]
    21e2:	b513      	push	{r0, r1, r4, lr}
    21e4:	0004      	movs	r4, r0
    21e6:	2b00      	cmp	r3, #0
    21e8:	d128      	bne.n	223c <__sinit+0x5c>
    21ea:	6483      	str	r3, [r0, #72]	; 0x48
    21ec:	64c3      	str	r3, [r0, #76]	; 0x4c
    21ee:	6503      	str	r3, [r0, #80]	; 0x50
    21f0:	4b13      	ldr	r3, [pc, #76]	; (2240 <__sinit+0x60>)
    21f2:	4a14      	ldr	r2, [pc, #80]	; (2244 <__sinit+0x64>)
    21f4:	681b      	ldr	r3, [r3, #0]
    21f6:	6282      	str	r2, [r0, #40]	; 0x28
    21f8:	9301      	str	r3, [sp, #4]
    21fa:	4298      	cmp	r0, r3
    21fc:	d101      	bne.n	2202 <__sinit+0x22>
    21fe:	2301      	movs	r3, #1
    2200:	6183      	str	r3, [r0, #24]
    2202:	0020      	movs	r0, r4
    2204:	f000 f820 	bl	2248 <__sfp>
    2208:	6060      	str	r0, [r4, #4]
    220a:	0020      	movs	r0, r4
    220c:	f000 f81c 	bl	2248 <__sfp>
    2210:	60a0      	str	r0, [r4, #8]
    2212:	0020      	movs	r0, r4
    2214:	f000 f818 	bl	2248 <__sfp>
    2218:	2200      	movs	r2, #0
    221a:	60e0      	str	r0, [r4, #12]
    221c:	2104      	movs	r1, #4
    221e:	6860      	ldr	r0, [r4, #4]
    2220:	f7ff ffa4 	bl	216c <std.isra.0>
    2224:	2201      	movs	r2, #1
    2226:	2109      	movs	r1, #9
    2228:	68a0      	ldr	r0, [r4, #8]
    222a:	f7ff ff9f 	bl	216c <std.isra.0>
    222e:	2202      	movs	r2, #2
    2230:	2112      	movs	r1, #18
    2232:	68e0      	ldr	r0, [r4, #12]
    2234:	f7ff ff9a 	bl	216c <std.isra.0>
    2238:	2301      	movs	r3, #1
    223a:	61a3      	str	r3, [r4, #24]
    223c:	bd13      	pop	{r0, r1, r4, pc}
    223e:	46c0      	nop			; (mov r8, r8)
    2240:	00002ea4 	.word	0x00002ea4
    2244:	0000215d 	.word	0x0000215d

00002248 <__sfp>:
    2248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    224a:	4b1e      	ldr	r3, [pc, #120]	; (22c4 <__sfp+0x7c>)
    224c:	0007      	movs	r7, r0
    224e:	681e      	ldr	r6, [r3, #0]
    2250:	69b3      	ldr	r3, [r6, #24]
    2252:	2b00      	cmp	r3, #0
    2254:	d102      	bne.n	225c <__sfp+0x14>
    2256:	0030      	movs	r0, r6
    2258:	f7ff ffc2 	bl	21e0 <__sinit>
    225c:	3648      	adds	r6, #72	; 0x48
    225e:	68b4      	ldr	r4, [r6, #8]
    2260:	6873      	ldr	r3, [r6, #4]
    2262:	3b01      	subs	r3, #1
    2264:	d504      	bpl.n	2270 <__sfp+0x28>
    2266:	6833      	ldr	r3, [r6, #0]
    2268:	2b00      	cmp	r3, #0
    226a:	d007      	beq.n	227c <__sfp+0x34>
    226c:	6836      	ldr	r6, [r6, #0]
    226e:	e7f6      	b.n	225e <__sfp+0x16>
    2270:	220c      	movs	r2, #12
    2272:	5ea5      	ldrsh	r5, [r4, r2]
    2274:	2d00      	cmp	r5, #0
    2276:	d00d      	beq.n	2294 <__sfp+0x4c>
    2278:	3468      	adds	r4, #104	; 0x68
    227a:	e7f2      	b.n	2262 <__sfp+0x1a>
    227c:	2104      	movs	r1, #4
    227e:	0038      	movs	r0, r7
    2280:	f7ff ff98 	bl	21b4 <__sfmoreglue>
    2284:	6030      	str	r0, [r6, #0]
    2286:	2800      	cmp	r0, #0
    2288:	d1f0      	bne.n	226c <__sfp+0x24>
    228a:	230c      	movs	r3, #12
    228c:	0004      	movs	r4, r0
    228e:	603b      	str	r3, [r7, #0]
    2290:	0020      	movs	r0, r4
    2292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2294:	2301      	movs	r3, #1
    2296:	0020      	movs	r0, r4
    2298:	425b      	negs	r3, r3
    229a:	81e3      	strh	r3, [r4, #14]
    229c:	3302      	adds	r3, #2
    229e:	81a3      	strh	r3, [r4, #12]
    22a0:	6665      	str	r5, [r4, #100]	; 0x64
    22a2:	6025      	str	r5, [r4, #0]
    22a4:	60a5      	str	r5, [r4, #8]
    22a6:	6065      	str	r5, [r4, #4]
    22a8:	6125      	str	r5, [r4, #16]
    22aa:	6165      	str	r5, [r4, #20]
    22ac:	61a5      	str	r5, [r4, #24]
    22ae:	2208      	movs	r2, #8
    22b0:	0029      	movs	r1, r5
    22b2:	305c      	adds	r0, #92	; 0x5c
    22b4:	f7ff fdc4 	bl	1e40 <memset>
    22b8:	6365      	str	r5, [r4, #52]	; 0x34
    22ba:	63a5      	str	r5, [r4, #56]	; 0x38
    22bc:	64a5      	str	r5, [r4, #72]	; 0x48
    22be:	64e5      	str	r5, [r4, #76]	; 0x4c
    22c0:	e7e6      	b.n	2290 <__sfp+0x48>
    22c2:	46c0      	nop			; (mov r8, r8)
    22c4:	00002ea4 	.word	0x00002ea4

000022c8 <_fwalk_reent>:
    22c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    22ca:	0004      	movs	r4, r0
    22cc:	0007      	movs	r7, r0
    22ce:	2600      	movs	r6, #0
    22d0:	9101      	str	r1, [sp, #4]
    22d2:	3448      	adds	r4, #72	; 0x48
    22d4:	2c00      	cmp	r4, #0
    22d6:	d101      	bne.n	22dc <_fwalk_reent+0x14>
    22d8:	0030      	movs	r0, r6
    22da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    22dc:	6863      	ldr	r3, [r4, #4]
    22de:	68a5      	ldr	r5, [r4, #8]
    22e0:	9300      	str	r3, [sp, #0]
    22e2:	9b00      	ldr	r3, [sp, #0]
    22e4:	3b01      	subs	r3, #1
    22e6:	9300      	str	r3, [sp, #0]
    22e8:	d501      	bpl.n	22ee <_fwalk_reent+0x26>
    22ea:	6824      	ldr	r4, [r4, #0]
    22ec:	e7f2      	b.n	22d4 <_fwalk_reent+0xc>
    22ee:	89ab      	ldrh	r3, [r5, #12]
    22f0:	2b01      	cmp	r3, #1
    22f2:	d908      	bls.n	2306 <_fwalk_reent+0x3e>
    22f4:	220e      	movs	r2, #14
    22f6:	5eab      	ldrsh	r3, [r5, r2]
    22f8:	3301      	adds	r3, #1
    22fa:	d004      	beq.n	2306 <_fwalk_reent+0x3e>
    22fc:	0029      	movs	r1, r5
    22fe:	0038      	movs	r0, r7
    2300:	9b01      	ldr	r3, [sp, #4]
    2302:	4798      	blx	r3
    2304:	4306      	orrs	r6, r0
    2306:	3568      	adds	r5, #104	; 0x68
    2308:	e7eb      	b.n	22e2 <_fwalk_reent+0x1a>
	...

0000230c <__swhatbuf_r>:
    230c:	b570      	push	{r4, r5, r6, lr}
    230e:	000e      	movs	r6, r1
    2310:	001d      	movs	r5, r3
    2312:	230e      	movs	r3, #14
    2314:	5ec9      	ldrsh	r1, [r1, r3]
    2316:	b090      	sub	sp, #64	; 0x40
    2318:	0014      	movs	r4, r2
    231a:	2900      	cmp	r1, #0
    231c:	da07      	bge.n	232e <__swhatbuf_r+0x22>
    231e:	2300      	movs	r3, #0
    2320:	602b      	str	r3, [r5, #0]
    2322:	89b3      	ldrh	r3, [r6, #12]
    2324:	061b      	lsls	r3, r3, #24
    2326:	d411      	bmi.n	234c <__swhatbuf_r+0x40>
    2328:	2380      	movs	r3, #128	; 0x80
    232a:	00db      	lsls	r3, r3, #3
    232c:	e00f      	b.n	234e <__swhatbuf_r+0x42>
    232e:	aa01      	add	r2, sp, #4
    2330:	f000 fd20 	bl	2d74 <_fstat_r>
    2334:	2800      	cmp	r0, #0
    2336:	dbf2      	blt.n	231e <__swhatbuf_r+0x12>
    2338:	22f0      	movs	r2, #240	; 0xf0
    233a:	9b02      	ldr	r3, [sp, #8]
    233c:	0212      	lsls	r2, r2, #8
    233e:	4013      	ands	r3, r2
    2340:	4a05      	ldr	r2, [pc, #20]	; (2358 <__swhatbuf_r+0x4c>)
    2342:	189b      	adds	r3, r3, r2
    2344:	425a      	negs	r2, r3
    2346:	4153      	adcs	r3, r2
    2348:	602b      	str	r3, [r5, #0]
    234a:	e7ed      	b.n	2328 <__swhatbuf_r+0x1c>
    234c:	2340      	movs	r3, #64	; 0x40
    234e:	2000      	movs	r0, #0
    2350:	6023      	str	r3, [r4, #0]
    2352:	b010      	add	sp, #64	; 0x40
    2354:	bd70      	pop	{r4, r5, r6, pc}
    2356:	46c0      	nop			; (mov r8, r8)
    2358:	ffffe000 	.word	0xffffe000

0000235c <__smakebuf_r>:
    235c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    235e:	2602      	movs	r6, #2
    2360:	898b      	ldrh	r3, [r1, #12]
    2362:	0005      	movs	r5, r0
    2364:	000c      	movs	r4, r1
    2366:	4233      	tst	r3, r6
    2368:	d006      	beq.n	2378 <__smakebuf_r+0x1c>
    236a:	0023      	movs	r3, r4
    236c:	3347      	adds	r3, #71	; 0x47
    236e:	6023      	str	r3, [r4, #0]
    2370:	6123      	str	r3, [r4, #16]
    2372:	2301      	movs	r3, #1
    2374:	6163      	str	r3, [r4, #20]
    2376:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    2378:	ab01      	add	r3, sp, #4
    237a:	466a      	mov	r2, sp
    237c:	f7ff ffc6 	bl	230c <__swhatbuf_r>
    2380:	9900      	ldr	r1, [sp, #0]
    2382:	0007      	movs	r7, r0
    2384:	0028      	movs	r0, r5
    2386:	f000 f87b 	bl	2480 <_malloc_r>
    238a:	2800      	cmp	r0, #0
    238c:	d106      	bne.n	239c <__smakebuf_r+0x40>
    238e:	220c      	movs	r2, #12
    2390:	5ea3      	ldrsh	r3, [r4, r2]
    2392:	059a      	lsls	r2, r3, #22
    2394:	d4ef      	bmi.n	2376 <__smakebuf_r+0x1a>
    2396:	431e      	orrs	r6, r3
    2398:	81a6      	strh	r6, [r4, #12]
    239a:	e7e6      	b.n	236a <__smakebuf_r+0xe>
    239c:	4b0d      	ldr	r3, [pc, #52]	; (23d4 <__smakebuf_r+0x78>)
    239e:	62ab      	str	r3, [r5, #40]	; 0x28
    23a0:	2380      	movs	r3, #128	; 0x80
    23a2:	89a2      	ldrh	r2, [r4, #12]
    23a4:	6020      	str	r0, [r4, #0]
    23a6:	4313      	orrs	r3, r2
    23a8:	81a3      	strh	r3, [r4, #12]
    23aa:	9b00      	ldr	r3, [sp, #0]
    23ac:	6120      	str	r0, [r4, #16]
    23ae:	6163      	str	r3, [r4, #20]
    23b0:	9b01      	ldr	r3, [sp, #4]
    23b2:	2b00      	cmp	r3, #0
    23b4:	d00a      	beq.n	23cc <__smakebuf_r+0x70>
    23b6:	230e      	movs	r3, #14
    23b8:	5ee1      	ldrsh	r1, [r4, r3]
    23ba:	0028      	movs	r0, r5
    23bc:	f000 fcec 	bl	2d98 <_isatty_r>
    23c0:	2800      	cmp	r0, #0
    23c2:	d003      	beq.n	23cc <__smakebuf_r+0x70>
    23c4:	2301      	movs	r3, #1
    23c6:	89a2      	ldrh	r2, [r4, #12]
    23c8:	4313      	orrs	r3, r2
    23ca:	81a3      	strh	r3, [r4, #12]
    23cc:	89a0      	ldrh	r0, [r4, #12]
    23ce:	4338      	orrs	r0, r7
    23d0:	81a0      	strh	r0, [r4, #12]
    23d2:	e7d0      	b.n	2376 <__smakebuf_r+0x1a>
    23d4:	0000215d 	.word	0x0000215d

000023d8 <malloc>:
    23d8:	b510      	push	{r4, lr}
    23da:	4b03      	ldr	r3, [pc, #12]	; (23e8 <malloc+0x10>)
    23dc:	0001      	movs	r1, r0
    23de:	6818      	ldr	r0, [r3, #0]
    23e0:	f000 f84e 	bl	2480 <_malloc_r>
    23e4:	bd10      	pop	{r4, pc}
    23e6:	46c0      	nop			; (mov r8, r8)
    23e8:	20000020 	.word	0x20000020

000023ec <_free_r>:
    23ec:	b570      	push	{r4, r5, r6, lr}
    23ee:	0005      	movs	r5, r0
    23f0:	2900      	cmp	r1, #0
    23f2:	d010      	beq.n	2416 <_free_r+0x2a>
    23f4:	1f0c      	subs	r4, r1, #4
    23f6:	6823      	ldr	r3, [r4, #0]
    23f8:	2b00      	cmp	r3, #0
    23fa:	da00      	bge.n	23fe <_free_r+0x12>
    23fc:	18e4      	adds	r4, r4, r3
    23fe:	0028      	movs	r0, r5
    2400:	f000 fcfb 	bl	2dfa <__malloc_lock>
    2404:	4a1d      	ldr	r2, [pc, #116]	; (247c <_free_r+0x90>)
    2406:	6813      	ldr	r3, [r2, #0]
    2408:	2b00      	cmp	r3, #0
    240a:	d105      	bne.n	2418 <_free_r+0x2c>
    240c:	6063      	str	r3, [r4, #4]
    240e:	6014      	str	r4, [r2, #0]
    2410:	0028      	movs	r0, r5
    2412:	f000 fcf3 	bl	2dfc <__malloc_unlock>
    2416:	bd70      	pop	{r4, r5, r6, pc}
    2418:	42a3      	cmp	r3, r4
    241a:	d909      	bls.n	2430 <_free_r+0x44>
    241c:	6821      	ldr	r1, [r4, #0]
    241e:	1860      	adds	r0, r4, r1
    2420:	4283      	cmp	r3, r0
    2422:	d1f3      	bne.n	240c <_free_r+0x20>
    2424:	6818      	ldr	r0, [r3, #0]
    2426:	685b      	ldr	r3, [r3, #4]
    2428:	1841      	adds	r1, r0, r1
    242a:	6021      	str	r1, [r4, #0]
    242c:	e7ee      	b.n	240c <_free_r+0x20>
    242e:	0013      	movs	r3, r2
    2430:	685a      	ldr	r2, [r3, #4]
    2432:	2a00      	cmp	r2, #0
    2434:	d001      	beq.n	243a <_free_r+0x4e>
    2436:	42a2      	cmp	r2, r4
    2438:	d9f9      	bls.n	242e <_free_r+0x42>
    243a:	6819      	ldr	r1, [r3, #0]
    243c:	1858      	adds	r0, r3, r1
    243e:	42a0      	cmp	r0, r4
    2440:	d10b      	bne.n	245a <_free_r+0x6e>
    2442:	6820      	ldr	r0, [r4, #0]
    2444:	1809      	adds	r1, r1, r0
    2446:	1858      	adds	r0, r3, r1
    2448:	6019      	str	r1, [r3, #0]
    244a:	4282      	cmp	r2, r0
    244c:	d1e0      	bne.n	2410 <_free_r+0x24>
    244e:	6810      	ldr	r0, [r2, #0]
    2450:	6852      	ldr	r2, [r2, #4]
    2452:	1841      	adds	r1, r0, r1
    2454:	6019      	str	r1, [r3, #0]
    2456:	605a      	str	r2, [r3, #4]
    2458:	e7da      	b.n	2410 <_free_r+0x24>
    245a:	42a0      	cmp	r0, r4
    245c:	d902      	bls.n	2464 <_free_r+0x78>
    245e:	230c      	movs	r3, #12
    2460:	602b      	str	r3, [r5, #0]
    2462:	e7d5      	b.n	2410 <_free_r+0x24>
    2464:	6821      	ldr	r1, [r4, #0]
    2466:	1860      	adds	r0, r4, r1
    2468:	4282      	cmp	r2, r0
    246a:	d103      	bne.n	2474 <_free_r+0x88>
    246c:	6810      	ldr	r0, [r2, #0]
    246e:	6852      	ldr	r2, [r2, #4]
    2470:	1841      	adds	r1, r0, r1
    2472:	6021      	str	r1, [r4, #0]
    2474:	6062      	str	r2, [r4, #4]
    2476:	605c      	str	r4, [r3, #4]
    2478:	e7ca      	b.n	2410 <_free_r+0x24>
    247a:	46c0      	nop			; (mov r8, r8)
    247c:	200000e0 	.word	0x200000e0

00002480 <_malloc_r>:
    2480:	2303      	movs	r3, #3
    2482:	b570      	push	{r4, r5, r6, lr}
    2484:	1ccd      	adds	r5, r1, #3
    2486:	439d      	bics	r5, r3
    2488:	3508      	adds	r5, #8
    248a:	0006      	movs	r6, r0
    248c:	2d0c      	cmp	r5, #12
    248e:	d21e      	bcs.n	24ce <_malloc_r+0x4e>
    2490:	250c      	movs	r5, #12
    2492:	42a9      	cmp	r1, r5
    2494:	d81d      	bhi.n	24d2 <_malloc_r+0x52>
    2496:	0030      	movs	r0, r6
    2498:	f000 fcaf 	bl	2dfa <__malloc_lock>
    249c:	4a25      	ldr	r2, [pc, #148]	; (2534 <_malloc_r+0xb4>)
    249e:	6814      	ldr	r4, [r2, #0]
    24a0:	0021      	movs	r1, r4
    24a2:	2900      	cmp	r1, #0
    24a4:	d119      	bne.n	24da <_malloc_r+0x5a>
    24a6:	4c24      	ldr	r4, [pc, #144]	; (2538 <_malloc_r+0xb8>)
    24a8:	6823      	ldr	r3, [r4, #0]
    24aa:	2b00      	cmp	r3, #0
    24ac:	d103      	bne.n	24b6 <_malloc_r+0x36>
    24ae:	0030      	movs	r0, r6
    24b0:	f000 fb10 	bl	2ad4 <_sbrk_r>
    24b4:	6020      	str	r0, [r4, #0]
    24b6:	0029      	movs	r1, r5
    24b8:	0030      	movs	r0, r6
    24ba:	f000 fb0b 	bl	2ad4 <_sbrk_r>
    24be:	1c43      	adds	r3, r0, #1
    24c0:	d12c      	bne.n	251c <_malloc_r+0x9c>
    24c2:	230c      	movs	r3, #12
    24c4:	0030      	movs	r0, r6
    24c6:	6033      	str	r3, [r6, #0]
    24c8:	f000 fc98 	bl	2dfc <__malloc_unlock>
    24cc:	e003      	b.n	24d6 <_malloc_r+0x56>
    24ce:	2d00      	cmp	r5, #0
    24d0:	dadf      	bge.n	2492 <_malloc_r+0x12>
    24d2:	230c      	movs	r3, #12
    24d4:	6033      	str	r3, [r6, #0]
    24d6:	2000      	movs	r0, #0
    24d8:	bd70      	pop	{r4, r5, r6, pc}
    24da:	680b      	ldr	r3, [r1, #0]
    24dc:	1b5b      	subs	r3, r3, r5
    24de:	d41a      	bmi.n	2516 <_malloc_r+0x96>
    24e0:	2b0b      	cmp	r3, #11
    24e2:	d903      	bls.n	24ec <_malloc_r+0x6c>
    24e4:	600b      	str	r3, [r1, #0]
    24e6:	18cc      	adds	r4, r1, r3
    24e8:	6025      	str	r5, [r4, #0]
    24ea:	e003      	b.n	24f4 <_malloc_r+0x74>
    24ec:	428c      	cmp	r4, r1
    24ee:	d10e      	bne.n	250e <_malloc_r+0x8e>
    24f0:	6863      	ldr	r3, [r4, #4]
    24f2:	6013      	str	r3, [r2, #0]
    24f4:	0030      	movs	r0, r6
    24f6:	f000 fc81 	bl	2dfc <__malloc_unlock>
    24fa:	0020      	movs	r0, r4
    24fc:	2207      	movs	r2, #7
    24fe:	300b      	adds	r0, #11
    2500:	1d23      	adds	r3, r4, #4
    2502:	4390      	bics	r0, r2
    2504:	1ac3      	subs	r3, r0, r3
    2506:	d0e7      	beq.n	24d8 <_malloc_r+0x58>
    2508:	425a      	negs	r2, r3
    250a:	50e2      	str	r2, [r4, r3]
    250c:	e7e4      	b.n	24d8 <_malloc_r+0x58>
    250e:	684b      	ldr	r3, [r1, #4]
    2510:	6063      	str	r3, [r4, #4]
    2512:	000c      	movs	r4, r1
    2514:	e7ee      	b.n	24f4 <_malloc_r+0x74>
    2516:	000c      	movs	r4, r1
    2518:	6849      	ldr	r1, [r1, #4]
    251a:	e7c2      	b.n	24a2 <_malloc_r+0x22>
    251c:	2303      	movs	r3, #3
    251e:	1cc4      	adds	r4, r0, #3
    2520:	439c      	bics	r4, r3
    2522:	42a0      	cmp	r0, r4
    2524:	d0e0      	beq.n	24e8 <_malloc_r+0x68>
    2526:	1a21      	subs	r1, r4, r0
    2528:	0030      	movs	r0, r6
    252a:	f000 fad3 	bl	2ad4 <_sbrk_r>
    252e:	1c43      	adds	r3, r0, #1
    2530:	d1da      	bne.n	24e8 <_malloc_r+0x68>
    2532:	e7c6      	b.n	24c2 <_malloc_r+0x42>
    2534:	200000e0 	.word	0x200000e0
    2538:	200000e4 	.word	0x200000e4

0000253c <__sfputc_r>:
    253c:	6893      	ldr	r3, [r2, #8]
    253e:	b510      	push	{r4, lr}
    2540:	3b01      	subs	r3, #1
    2542:	6093      	str	r3, [r2, #8]
    2544:	2b00      	cmp	r3, #0
    2546:	da05      	bge.n	2554 <__sfputc_r+0x18>
    2548:	6994      	ldr	r4, [r2, #24]
    254a:	42a3      	cmp	r3, r4
    254c:	db08      	blt.n	2560 <__sfputc_r+0x24>
    254e:	b2cb      	uxtb	r3, r1
    2550:	2b0a      	cmp	r3, #10
    2552:	d005      	beq.n	2560 <__sfputc_r+0x24>
    2554:	6813      	ldr	r3, [r2, #0]
    2556:	1c58      	adds	r0, r3, #1
    2558:	6010      	str	r0, [r2, #0]
    255a:	7019      	strb	r1, [r3, #0]
    255c:	b2c8      	uxtb	r0, r1
    255e:	bd10      	pop	{r4, pc}
    2560:	f000 fb16 	bl	2b90 <__swbuf_r>
    2564:	e7fb      	b.n	255e <__sfputc_r+0x22>

00002566 <__sfputs_r>:
    2566:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2568:	0006      	movs	r6, r0
    256a:	000f      	movs	r7, r1
    256c:	0014      	movs	r4, r2
    256e:	18d5      	adds	r5, r2, r3
    2570:	42ac      	cmp	r4, r5
    2572:	d101      	bne.n	2578 <__sfputs_r+0x12>
    2574:	2000      	movs	r0, #0
    2576:	e007      	b.n	2588 <__sfputs_r+0x22>
    2578:	7821      	ldrb	r1, [r4, #0]
    257a:	003a      	movs	r2, r7
    257c:	0030      	movs	r0, r6
    257e:	f7ff ffdd 	bl	253c <__sfputc_r>
    2582:	3401      	adds	r4, #1
    2584:	1c43      	adds	r3, r0, #1
    2586:	d1f3      	bne.n	2570 <__sfputs_r+0xa>
    2588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000258c <_vfiprintf_r>:
    258c:	b5f0      	push	{r4, r5, r6, r7, lr}
    258e:	b09f      	sub	sp, #124	; 0x7c
    2590:	0006      	movs	r6, r0
    2592:	000f      	movs	r7, r1
    2594:	0014      	movs	r4, r2
    2596:	9305      	str	r3, [sp, #20]
    2598:	2800      	cmp	r0, #0
    259a:	d004      	beq.n	25a6 <_vfiprintf_r+0x1a>
    259c:	6983      	ldr	r3, [r0, #24]
    259e:	2b00      	cmp	r3, #0
    25a0:	d101      	bne.n	25a6 <_vfiprintf_r+0x1a>
    25a2:	f7ff fe1d 	bl	21e0 <__sinit>
    25a6:	4b7f      	ldr	r3, [pc, #508]	; (27a4 <_vfiprintf_r+0x218>)
    25a8:	429f      	cmp	r7, r3
    25aa:	d15c      	bne.n	2666 <_vfiprintf_r+0xda>
    25ac:	6877      	ldr	r7, [r6, #4]
    25ae:	89bb      	ldrh	r3, [r7, #12]
    25b0:	071b      	lsls	r3, r3, #28
    25b2:	d562      	bpl.n	267a <_vfiprintf_r+0xee>
    25b4:	693b      	ldr	r3, [r7, #16]
    25b6:	2b00      	cmp	r3, #0
    25b8:	d05f      	beq.n	267a <_vfiprintf_r+0xee>
    25ba:	2300      	movs	r3, #0
    25bc:	ad06      	add	r5, sp, #24
    25be:	616b      	str	r3, [r5, #20]
    25c0:	3320      	adds	r3, #32
    25c2:	766b      	strb	r3, [r5, #25]
    25c4:	3310      	adds	r3, #16
    25c6:	76ab      	strb	r3, [r5, #26]
    25c8:	9402      	str	r4, [sp, #8]
    25ca:	9c02      	ldr	r4, [sp, #8]
    25cc:	7823      	ldrb	r3, [r4, #0]
    25ce:	2b00      	cmp	r3, #0
    25d0:	d15d      	bne.n	268e <_vfiprintf_r+0x102>
    25d2:	9b02      	ldr	r3, [sp, #8]
    25d4:	1ae3      	subs	r3, r4, r3
    25d6:	9304      	str	r3, [sp, #16]
    25d8:	d00d      	beq.n	25f6 <_vfiprintf_r+0x6a>
    25da:	9b04      	ldr	r3, [sp, #16]
    25dc:	9a02      	ldr	r2, [sp, #8]
    25de:	0039      	movs	r1, r7
    25e0:	0030      	movs	r0, r6
    25e2:	f7ff ffc0 	bl	2566 <__sfputs_r>
    25e6:	1c43      	adds	r3, r0, #1
    25e8:	d100      	bne.n	25ec <_vfiprintf_r+0x60>
    25ea:	e0cc      	b.n	2786 <_vfiprintf_r+0x1fa>
    25ec:	696a      	ldr	r2, [r5, #20]
    25ee:	9b04      	ldr	r3, [sp, #16]
    25f0:	4694      	mov	ip, r2
    25f2:	4463      	add	r3, ip
    25f4:	616b      	str	r3, [r5, #20]
    25f6:	7823      	ldrb	r3, [r4, #0]
    25f8:	2b00      	cmp	r3, #0
    25fa:	d100      	bne.n	25fe <_vfiprintf_r+0x72>
    25fc:	e0c3      	b.n	2786 <_vfiprintf_r+0x1fa>
    25fe:	2201      	movs	r2, #1
    2600:	2300      	movs	r3, #0
    2602:	4252      	negs	r2, r2
    2604:	606a      	str	r2, [r5, #4]
    2606:	a902      	add	r1, sp, #8
    2608:	3254      	adds	r2, #84	; 0x54
    260a:	1852      	adds	r2, r2, r1
    260c:	3401      	adds	r4, #1
    260e:	602b      	str	r3, [r5, #0]
    2610:	60eb      	str	r3, [r5, #12]
    2612:	60ab      	str	r3, [r5, #8]
    2614:	7013      	strb	r3, [r2, #0]
    2616:	65ab      	str	r3, [r5, #88]	; 0x58
    2618:	7821      	ldrb	r1, [r4, #0]
    261a:	2205      	movs	r2, #5
    261c:	4862      	ldr	r0, [pc, #392]	; (27a8 <_vfiprintf_r+0x21c>)
    261e:	f000 fbe1 	bl	2de4 <memchr>
    2622:	1c63      	adds	r3, r4, #1
    2624:	469c      	mov	ip, r3
    2626:	2800      	cmp	r0, #0
    2628:	d135      	bne.n	2696 <_vfiprintf_r+0x10a>
    262a:	6829      	ldr	r1, [r5, #0]
    262c:	06cb      	lsls	r3, r1, #27
    262e:	d504      	bpl.n	263a <_vfiprintf_r+0xae>
    2630:	2353      	movs	r3, #83	; 0x53
    2632:	aa02      	add	r2, sp, #8
    2634:	3020      	adds	r0, #32
    2636:	189b      	adds	r3, r3, r2
    2638:	7018      	strb	r0, [r3, #0]
    263a:	070b      	lsls	r3, r1, #28
    263c:	d504      	bpl.n	2648 <_vfiprintf_r+0xbc>
    263e:	2353      	movs	r3, #83	; 0x53
    2640:	202b      	movs	r0, #43	; 0x2b
    2642:	aa02      	add	r2, sp, #8
    2644:	189b      	adds	r3, r3, r2
    2646:	7018      	strb	r0, [r3, #0]
    2648:	7823      	ldrb	r3, [r4, #0]
    264a:	2b2a      	cmp	r3, #42	; 0x2a
    264c:	d02c      	beq.n	26a8 <_vfiprintf_r+0x11c>
    264e:	2000      	movs	r0, #0
    2650:	210a      	movs	r1, #10
    2652:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2654:	7822      	ldrb	r2, [r4, #0]
    2656:	3a30      	subs	r2, #48	; 0x30
    2658:	2a09      	cmp	r2, #9
    265a:	d800      	bhi.n	265e <_vfiprintf_r+0xd2>
    265c:	e06b      	b.n	2736 <_vfiprintf_r+0x1aa>
    265e:	2800      	cmp	r0, #0
    2660:	d02a      	beq.n	26b8 <_vfiprintf_r+0x12c>
    2662:	9309      	str	r3, [sp, #36]	; 0x24
    2664:	e028      	b.n	26b8 <_vfiprintf_r+0x12c>
    2666:	4b51      	ldr	r3, [pc, #324]	; (27ac <_vfiprintf_r+0x220>)
    2668:	429f      	cmp	r7, r3
    266a:	d101      	bne.n	2670 <_vfiprintf_r+0xe4>
    266c:	68b7      	ldr	r7, [r6, #8]
    266e:	e79e      	b.n	25ae <_vfiprintf_r+0x22>
    2670:	4b4f      	ldr	r3, [pc, #316]	; (27b0 <_vfiprintf_r+0x224>)
    2672:	429f      	cmp	r7, r3
    2674:	d19b      	bne.n	25ae <_vfiprintf_r+0x22>
    2676:	68f7      	ldr	r7, [r6, #12]
    2678:	e799      	b.n	25ae <_vfiprintf_r+0x22>
    267a:	0039      	movs	r1, r7
    267c:	0030      	movs	r0, r6
    267e:	f000 faf1 	bl	2c64 <__swsetup_r>
    2682:	2800      	cmp	r0, #0
    2684:	d099      	beq.n	25ba <_vfiprintf_r+0x2e>
    2686:	2001      	movs	r0, #1
    2688:	4240      	negs	r0, r0
    268a:	b01f      	add	sp, #124	; 0x7c
    268c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    268e:	2b25      	cmp	r3, #37	; 0x25
    2690:	d09f      	beq.n	25d2 <_vfiprintf_r+0x46>
    2692:	3401      	adds	r4, #1
    2694:	e79a      	b.n	25cc <_vfiprintf_r+0x40>
    2696:	4b44      	ldr	r3, [pc, #272]	; (27a8 <_vfiprintf_r+0x21c>)
    2698:	6829      	ldr	r1, [r5, #0]
    269a:	1ac0      	subs	r0, r0, r3
    269c:	2301      	movs	r3, #1
    269e:	4083      	lsls	r3, r0
    26a0:	430b      	orrs	r3, r1
    26a2:	602b      	str	r3, [r5, #0]
    26a4:	4664      	mov	r4, ip
    26a6:	e7b7      	b.n	2618 <_vfiprintf_r+0x8c>
    26a8:	9b05      	ldr	r3, [sp, #20]
    26aa:	1d18      	adds	r0, r3, #4
    26ac:	681b      	ldr	r3, [r3, #0]
    26ae:	9005      	str	r0, [sp, #20]
    26b0:	2b00      	cmp	r3, #0
    26b2:	db3a      	blt.n	272a <_vfiprintf_r+0x19e>
    26b4:	9309      	str	r3, [sp, #36]	; 0x24
    26b6:	4664      	mov	r4, ip
    26b8:	7823      	ldrb	r3, [r4, #0]
    26ba:	2b2e      	cmp	r3, #46	; 0x2e
    26bc:	d10b      	bne.n	26d6 <_vfiprintf_r+0x14a>
    26be:	7863      	ldrb	r3, [r4, #1]
    26c0:	1c62      	adds	r2, r4, #1
    26c2:	2b2a      	cmp	r3, #42	; 0x2a
    26c4:	d13f      	bne.n	2746 <_vfiprintf_r+0x1ba>
    26c6:	9b05      	ldr	r3, [sp, #20]
    26c8:	3402      	adds	r4, #2
    26ca:	1d1a      	adds	r2, r3, #4
    26cc:	681b      	ldr	r3, [r3, #0]
    26ce:	9205      	str	r2, [sp, #20]
    26d0:	2b00      	cmp	r3, #0
    26d2:	db35      	blt.n	2740 <_vfiprintf_r+0x1b4>
    26d4:	9307      	str	r3, [sp, #28]
    26d6:	7821      	ldrb	r1, [r4, #0]
    26d8:	2203      	movs	r2, #3
    26da:	4836      	ldr	r0, [pc, #216]	; (27b4 <_vfiprintf_r+0x228>)
    26dc:	f000 fb82 	bl	2de4 <memchr>
    26e0:	2800      	cmp	r0, #0
    26e2:	d007      	beq.n	26f4 <_vfiprintf_r+0x168>
    26e4:	4b33      	ldr	r3, [pc, #204]	; (27b4 <_vfiprintf_r+0x228>)
    26e6:	682a      	ldr	r2, [r5, #0]
    26e8:	1ac0      	subs	r0, r0, r3
    26ea:	2340      	movs	r3, #64	; 0x40
    26ec:	4083      	lsls	r3, r0
    26ee:	4313      	orrs	r3, r2
    26f0:	602b      	str	r3, [r5, #0]
    26f2:	3401      	adds	r4, #1
    26f4:	7821      	ldrb	r1, [r4, #0]
    26f6:	1c63      	adds	r3, r4, #1
    26f8:	2206      	movs	r2, #6
    26fa:	482f      	ldr	r0, [pc, #188]	; (27b8 <_vfiprintf_r+0x22c>)
    26fc:	9302      	str	r3, [sp, #8]
    26fe:	7629      	strb	r1, [r5, #24]
    2700:	f000 fb70 	bl	2de4 <memchr>
    2704:	2800      	cmp	r0, #0
    2706:	d044      	beq.n	2792 <_vfiprintf_r+0x206>
    2708:	4b2c      	ldr	r3, [pc, #176]	; (27bc <_vfiprintf_r+0x230>)
    270a:	2b00      	cmp	r3, #0
    270c:	d12f      	bne.n	276e <_vfiprintf_r+0x1e2>
    270e:	6829      	ldr	r1, [r5, #0]
    2710:	9b05      	ldr	r3, [sp, #20]
    2712:	2207      	movs	r2, #7
    2714:	05c9      	lsls	r1, r1, #23
    2716:	d528      	bpl.n	276a <_vfiprintf_r+0x1de>
    2718:	189b      	adds	r3, r3, r2
    271a:	4393      	bics	r3, r2
    271c:	3308      	adds	r3, #8
    271e:	9305      	str	r3, [sp, #20]
    2720:	696b      	ldr	r3, [r5, #20]
    2722:	9a03      	ldr	r2, [sp, #12]
    2724:	189b      	adds	r3, r3, r2
    2726:	616b      	str	r3, [r5, #20]
    2728:	e74f      	b.n	25ca <_vfiprintf_r+0x3e>
    272a:	425b      	negs	r3, r3
    272c:	60eb      	str	r3, [r5, #12]
    272e:	2302      	movs	r3, #2
    2730:	430b      	orrs	r3, r1
    2732:	602b      	str	r3, [r5, #0]
    2734:	e7bf      	b.n	26b6 <_vfiprintf_r+0x12a>
    2736:	434b      	muls	r3, r1
    2738:	3401      	adds	r4, #1
    273a:	189b      	adds	r3, r3, r2
    273c:	2001      	movs	r0, #1
    273e:	e789      	b.n	2654 <_vfiprintf_r+0xc8>
    2740:	2301      	movs	r3, #1
    2742:	425b      	negs	r3, r3
    2744:	e7c6      	b.n	26d4 <_vfiprintf_r+0x148>
    2746:	2300      	movs	r3, #0
    2748:	0014      	movs	r4, r2
    274a:	200a      	movs	r0, #10
    274c:	001a      	movs	r2, r3
    274e:	606b      	str	r3, [r5, #4]
    2750:	7821      	ldrb	r1, [r4, #0]
    2752:	3930      	subs	r1, #48	; 0x30
    2754:	2909      	cmp	r1, #9
    2756:	d903      	bls.n	2760 <_vfiprintf_r+0x1d4>
    2758:	2b00      	cmp	r3, #0
    275a:	d0bc      	beq.n	26d6 <_vfiprintf_r+0x14a>
    275c:	9207      	str	r2, [sp, #28]
    275e:	e7ba      	b.n	26d6 <_vfiprintf_r+0x14a>
    2760:	4342      	muls	r2, r0
    2762:	3401      	adds	r4, #1
    2764:	1852      	adds	r2, r2, r1
    2766:	2301      	movs	r3, #1
    2768:	e7f2      	b.n	2750 <_vfiprintf_r+0x1c4>
    276a:	3307      	adds	r3, #7
    276c:	e7d5      	b.n	271a <_vfiprintf_r+0x18e>
    276e:	ab05      	add	r3, sp, #20
    2770:	9300      	str	r3, [sp, #0]
    2772:	003a      	movs	r2, r7
    2774:	4b12      	ldr	r3, [pc, #72]	; (27c0 <_vfiprintf_r+0x234>)
    2776:	0029      	movs	r1, r5
    2778:	0030      	movs	r0, r6
    277a:	e000      	b.n	277e <_vfiprintf_r+0x1f2>
    277c:	bf00      	nop
    277e:	9003      	str	r0, [sp, #12]
    2780:	9b03      	ldr	r3, [sp, #12]
    2782:	3301      	adds	r3, #1
    2784:	d1cc      	bne.n	2720 <_vfiprintf_r+0x194>
    2786:	89bb      	ldrh	r3, [r7, #12]
    2788:	065b      	lsls	r3, r3, #25
    278a:	d500      	bpl.n	278e <_vfiprintf_r+0x202>
    278c:	e77b      	b.n	2686 <_vfiprintf_r+0xfa>
    278e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    2790:	e77b      	b.n	268a <_vfiprintf_r+0xfe>
    2792:	ab05      	add	r3, sp, #20
    2794:	9300      	str	r3, [sp, #0]
    2796:	003a      	movs	r2, r7
    2798:	4b09      	ldr	r3, [pc, #36]	; (27c0 <_vfiprintf_r+0x234>)
    279a:	0029      	movs	r1, r5
    279c:	0030      	movs	r0, r6
    279e:	f000 f87f 	bl	28a0 <_printf_i>
    27a2:	e7ec      	b.n	277e <_vfiprintf_r+0x1f2>
    27a4:	00002ec8 	.word	0x00002ec8
    27a8:	00002f08 	.word	0x00002f08
    27ac:	00002ee8 	.word	0x00002ee8
    27b0:	00002ea8 	.word	0x00002ea8
    27b4:	00002f0e 	.word	0x00002f0e
    27b8:	00002f12 	.word	0x00002f12
    27bc:	00000000 	.word	0x00000000
    27c0:	00002567 	.word	0x00002567

000027c4 <_printf_common>:
    27c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    27c6:	0015      	movs	r5, r2
    27c8:	9301      	str	r3, [sp, #4]
    27ca:	688a      	ldr	r2, [r1, #8]
    27cc:	690b      	ldr	r3, [r1, #16]
    27ce:	9000      	str	r0, [sp, #0]
    27d0:	000c      	movs	r4, r1
    27d2:	4293      	cmp	r3, r2
    27d4:	da00      	bge.n	27d8 <_printf_common+0x14>
    27d6:	0013      	movs	r3, r2
    27d8:	0022      	movs	r2, r4
    27da:	602b      	str	r3, [r5, #0]
    27dc:	3243      	adds	r2, #67	; 0x43
    27de:	7812      	ldrb	r2, [r2, #0]
    27e0:	2a00      	cmp	r2, #0
    27e2:	d001      	beq.n	27e8 <_printf_common+0x24>
    27e4:	3301      	adds	r3, #1
    27e6:	602b      	str	r3, [r5, #0]
    27e8:	6823      	ldr	r3, [r4, #0]
    27ea:	069b      	lsls	r3, r3, #26
    27ec:	d502      	bpl.n	27f4 <_printf_common+0x30>
    27ee:	682b      	ldr	r3, [r5, #0]
    27f0:	3302      	adds	r3, #2
    27f2:	602b      	str	r3, [r5, #0]
    27f4:	2706      	movs	r7, #6
    27f6:	6823      	ldr	r3, [r4, #0]
    27f8:	401f      	ands	r7, r3
    27fa:	d027      	beq.n	284c <_printf_common+0x88>
    27fc:	0023      	movs	r3, r4
    27fe:	3343      	adds	r3, #67	; 0x43
    2800:	781b      	ldrb	r3, [r3, #0]
    2802:	1e5a      	subs	r2, r3, #1
    2804:	4193      	sbcs	r3, r2
    2806:	6822      	ldr	r2, [r4, #0]
    2808:	0692      	lsls	r2, r2, #26
    280a:	d430      	bmi.n	286e <_printf_common+0xaa>
    280c:	0022      	movs	r2, r4
    280e:	9901      	ldr	r1, [sp, #4]
    2810:	3243      	adds	r2, #67	; 0x43
    2812:	9800      	ldr	r0, [sp, #0]
    2814:	9e08      	ldr	r6, [sp, #32]
    2816:	47b0      	blx	r6
    2818:	1c43      	adds	r3, r0, #1
    281a:	d025      	beq.n	2868 <_printf_common+0xa4>
    281c:	2306      	movs	r3, #6
    281e:	6820      	ldr	r0, [r4, #0]
    2820:	682a      	ldr	r2, [r5, #0]
    2822:	68e1      	ldr	r1, [r4, #12]
    2824:	4003      	ands	r3, r0
    2826:	2500      	movs	r5, #0
    2828:	2b04      	cmp	r3, #4
    282a:	d103      	bne.n	2834 <_printf_common+0x70>
    282c:	1a8d      	subs	r5, r1, r2
    282e:	43eb      	mvns	r3, r5
    2830:	17db      	asrs	r3, r3, #31
    2832:	401d      	ands	r5, r3
    2834:	68a3      	ldr	r3, [r4, #8]
    2836:	6922      	ldr	r2, [r4, #16]
    2838:	4293      	cmp	r3, r2
    283a:	dd01      	ble.n	2840 <_printf_common+0x7c>
    283c:	1a9b      	subs	r3, r3, r2
    283e:	18ed      	adds	r5, r5, r3
    2840:	2700      	movs	r7, #0
    2842:	42bd      	cmp	r5, r7
    2844:	d120      	bne.n	2888 <_printf_common+0xc4>
    2846:	2000      	movs	r0, #0
    2848:	e010      	b.n	286c <_printf_common+0xa8>
    284a:	3701      	adds	r7, #1
    284c:	68e3      	ldr	r3, [r4, #12]
    284e:	682a      	ldr	r2, [r5, #0]
    2850:	1a9b      	subs	r3, r3, r2
    2852:	429f      	cmp	r7, r3
    2854:	dad2      	bge.n	27fc <_printf_common+0x38>
    2856:	0022      	movs	r2, r4
    2858:	2301      	movs	r3, #1
    285a:	3219      	adds	r2, #25
    285c:	9901      	ldr	r1, [sp, #4]
    285e:	9800      	ldr	r0, [sp, #0]
    2860:	9e08      	ldr	r6, [sp, #32]
    2862:	47b0      	blx	r6
    2864:	1c43      	adds	r3, r0, #1
    2866:	d1f0      	bne.n	284a <_printf_common+0x86>
    2868:	2001      	movs	r0, #1
    286a:	4240      	negs	r0, r0
    286c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    286e:	2030      	movs	r0, #48	; 0x30
    2870:	18e1      	adds	r1, r4, r3
    2872:	3143      	adds	r1, #67	; 0x43
    2874:	7008      	strb	r0, [r1, #0]
    2876:	0021      	movs	r1, r4
    2878:	1c5a      	adds	r2, r3, #1
    287a:	3145      	adds	r1, #69	; 0x45
    287c:	7809      	ldrb	r1, [r1, #0]
    287e:	18a2      	adds	r2, r4, r2
    2880:	3243      	adds	r2, #67	; 0x43
    2882:	3302      	adds	r3, #2
    2884:	7011      	strb	r1, [r2, #0]
    2886:	e7c1      	b.n	280c <_printf_common+0x48>
    2888:	0022      	movs	r2, r4
    288a:	2301      	movs	r3, #1
    288c:	321a      	adds	r2, #26
    288e:	9901      	ldr	r1, [sp, #4]
    2890:	9800      	ldr	r0, [sp, #0]
    2892:	9e08      	ldr	r6, [sp, #32]
    2894:	47b0      	blx	r6
    2896:	1c43      	adds	r3, r0, #1
    2898:	d0e6      	beq.n	2868 <_printf_common+0xa4>
    289a:	3701      	adds	r7, #1
    289c:	e7d1      	b.n	2842 <_printf_common+0x7e>
	...

000028a0 <_printf_i>:
    28a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    28a2:	b08b      	sub	sp, #44	; 0x2c
    28a4:	9206      	str	r2, [sp, #24]
    28a6:	000a      	movs	r2, r1
    28a8:	3243      	adds	r2, #67	; 0x43
    28aa:	9307      	str	r3, [sp, #28]
    28ac:	9005      	str	r0, [sp, #20]
    28ae:	9204      	str	r2, [sp, #16]
    28b0:	7e0a      	ldrb	r2, [r1, #24]
    28b2:	000c      	movs	r4, r1
    28b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    28b6:	2a6e      	cmp	r2, #110	; 0x6e
    28b8:	d100      	bne.n	28bc <_printf_i+0x1c>
    28ba:	e08f      	b.n	29dc <_printf_i+0x13c>
    28bc:	d817      	bhi.n	28ee <_printf_i+0x4e>
    28be:	2a63      	cmp	r2, #99	; 0x63
    28c0:	d02c      	beq.n	291c <_printf_i+0x7c>
    28c2:	d808      	bhi.n	28d6 <_printf_i+0x36>
    28c4:	2a00      	cmp	r2, #0
    28c6:	d100      	bne.n	28ca <_printf_i+0x2a>
    28c8:	e099      	b.n	29fe <_printf_i+0x15e>
    28ca:	2a58      	cmp	r2, #88	; 0x58
    28cc:	d054      	beq.n	2978 <_printf_i+0xd8>
    28ce:	0026      	movs	r6, r4
    28d0:	3642      	adds	r6, #66	; 0x42
    28d2:	7032      	strb	r2, [r6, #0]
    28d4:	e029      	b.n	292a <_printf_i+0x8a>
    28d6:	2a64      	cmp	r2, #100	; 0x64
    28d8:	d001      	beq.n	28de <_printf_i+0x3e>
    28da:	2a69      	cmp	r2, #105	; 0x69
    28dc:	d1f7      	bne.n	28ce <_printf_i+0x2e>
    28de:	6821      	ldr	r1, [r4, #0]
    28e0:	681a      	ldr	r2, [r3, #0]
    28e2:	0608      	lsls	r0, r1, #24
    28e4:	d523      	bpl.n	292e <_printf_i+0x8e>
    28e6:	1d11      	adds	r1, r2, #4
    28e8:	6019      	str	r1, [r3, #0]
    28ea:	6815      	ldr	r5, [r2, #0]
    28ec:	e025      	b.n	293a <_printf_i+0x9a>
    28ee:	2a73      	cmp	r2, #115	; 0x73
    28f0:	d100      	bne.n	28f4 <_printf_i+0x54>
    28f2:	e088      	b.n	2a06 <_printf_i+0x166>
    28f4:	d808      	bhi.n	2908 <_printf_i+0x68>
    28f6:	2a6f      	cmp	r2, #111	; 0x6f
    28f8:	d029      	beq.n	294e <_printf_i+0xae>
    28fa:	2a70      	cmp	r2, #112	; 0x70
    28fc:	d1e7      	bne.n	28ce <_printf_i+0x2e>
    28fe:	2220      	movs	r2, #32
    2900:	6809      	ldr	r1, [r1, #0]
    2902:	430a      	orrs	r2, r1
    2904:	6022      	str	r2, [r4, #0]
    2906:	e003      	b.n	2910 <_printf_i+0x70>
    2908:	2a75      	cmp	r2, #117	; 0x75
    290a:	d020      	beq.n	294e <_printf_i+0xae>
    290c:	2a78      	cmp	r2, #120	; 0x78
    290e:	d1de      	bne.n	28ce <_printf_i+0x2e>
    2910:	0022      	movs	r2, r4
    2912:	2178      	movs	r1, #120	; 0x78
    2914:	3245      	adds	r2, #69	; 0x45
    2916:	7011      	strb	r1, [r2, #0]
    2918:	4a6c      	ldr	r2, [pc, #432]	; (2acc <_printf_i+0x22c>)
    291a:	e030      	b.n	297e <_printf_i+0xde>
    291c:	000e      	movs	r6, r1
    291e:	681a      	ldr	r2, [r3, #0]
    2920:	3642      	adds	r6, #66	; 0x42
    2922:	1d11      	adds	r1, r2, #4
    2924:	6019      	str	r1, [r3, #0]
    2926:	6813      	ldr	r3, [r2, #0]
    2928:	7033      	strb	r3, [r6, #0]
    292a:	2301      	movs	r3, #1
    292c:	e079      	b.n	2a22 <_printf_i+0x182>
    292e:	0649      	lsls	r1, r1, #25
    2930:	d5d9      	bpl.n	28e6 <_printf_i+0x46>
    2932:	1d11      	adds	r1, r2, #4
    2934:	6019      	str	r1, [r3, #0]
    2936:	2300      	movs	r3, #0
    2938:	5ed5      	ldrsh	r5, [r2, r3]
    293a:	2d00      	cmp	r5, #0
    293c:	da03      	bge.n	2946 <_printf_i+0xa6>
    293e:	232d      	movs	r3, #45	; 0x2d
    2940:	9a04      	ldr	r2, [sp, #16]
    2942:	426d      	negs	r5, r5
    2944:	7013      	strb	r3, [r2, #0]
    2946:	4b62      	ldr	r3, [pc, #392]	; (2ad0 <_printf_i+0x230>)
    2948:	270a      	movs	r7, #10
    294a:	9303      	str	r3, [sp, #12]
    294c:	e02f      	b.n	29ae <_printf_i+0x10e>
    294e:	6820      	ldr	r0, [r4, #0]
    2950:	6819      	ldr	r1, [r3, #0]
    2952:	0605      	lsls	r5, r0, #24
    2954:	d503      	bpl.n	295e <_printf_i+0xbe>
    2956:	1d08      	adds	r0, r1, #4
    2958:	6018      	str	r0, [r3, #0]
    295a:	680d      	ldr	r5, [r1, #0]
    295c:	e005      	b.n	296a <_printf_i+0xca>
    295e:	0640      	lsls	r0, r0, #25
    2960:	d5f9      	bpl.n	2956 <_printf_i+0xb6>
    2962:	680d      	ldr	r5, [r1, #0]
    2964:	1d08      	adds	r0, r1, #4
    2966:	6018      	str	r0, [r3, #0]
    2968:	b2ad      	uxth	r5, r5
    296a:	4b59      	ldr	r3, [pc, #356]	; (2ad0 <_printf_i+0x230>)
    296c:	2708      	movs	r7, #8
    296e:	9303      	str	r3, [sp, #12]
    2970:	2a6f      	cmp	r2, #111	; 0x6f
    2972:	d018      	beq.n	29a6 <_printf_i+0x106>
    2974:	270a      	movs	r7, #10
    2976:	e016      	b.n	29a6 <_printf_i+0x106>
    2978:	3145      	adds	r1, #69	; 0x45
    297a:	700a      	strb	r2, [r1, #0]
    297c:	4a54      	ldr	r2, [pc, #336]	; (2ad0 <_printf_i+0x230>)
    297e:	9203      	str	r2, [sp, #12]
    2980:	681a      	ldr	r2, [r3, #0]
    2982:	6821      	ldr	r1, [r4, #0]
    2984:	1d10      	adds	r0, r2, #4
    2986:	6018      	str	r0, [r3, #0]
    2988:	6815      	ldr	r5, [r2, #0]
    298a:	0608      	lsls	r0, r1, #24
    298c:	d522      	bpl.n	29d4 <_printf_i+0x134>
    298e:	07cb      	lsls	r3, r1, #31
    2990:	d502      	bpl.n	2998 <_printf_i+0xf8>
    2992:	2320      	movs	r3, #32
    2994:	4319      	orrs	r1, r3
    2996:	6021      	str	r1, [r4, #0]
    2998:	2710      	movs	r7, #16
    299a:	2d00      	cmp	r5, #0
    299c:	d103      	bne.n	29a6 <_printf_i+0x106>
    299e:	2320      	movs	r3, #32
    29a0:	6822      	ldr	r2, [r4, #0]
    29a2:	439a      	bics	r2, r3
    29a4:	6022      	str	r2, [r4, #0]
    29a6:	0023      	movs	r3, r4
    29a8:	2200      	movs	r2, #0
    29aa:	3343      	adds	r3, #67	; 0x43
    29ac:	701a      	strb	r2, [r3, #0]
    29ae:	6863      	ldr	r3, [r4, #4]
    29b0:	60a3      	str	r3, [r4, #8]
    29b2:	2b00      	cmp	r3, #0
    29b4:	db5c      	blt.n	2a70 <_printf_i+0x1d0>
    29b6:	2204      	movs	r2, #4
    29b8:	6821      	ldr	r1, [r4, #0]
    29ba:	4391      	bics	r1, r2
    29bc:	6021      	str	r1, [r4, #0]
    29be:	2d00      	cmp	r5, #0
    29c0:	d158      	bne.n	2a74 <_printf_i+0x1d4>
    29c2:	9e04      	ldr	r6, [sp, #16]
    29c4:	2b00      	cmp	r3, #0
    29c6:	d064      	beq.n	2a92 <_printf_i+0x1f2>
    29c8:	0026      	movs	r6, r4
    29ca:	9b03      	ldr	r3, [sp, #12]
    29cc:	3642      	adds	r6, #66	; 0x42
    29ce:	781b      	ldrb	r3, [r3, #0]
    29d0:	7033      	strb	r3, [r6, #0]
    29d2:	e05e      	b.n	2a92 <_printf_i+0x1f2>
    29d4:	0648      	lsls	r0, r1, #25
    29d6:	d5da      	bpl.n	298e <_printf_i+0xee>
    29d8:	b2ad      	uxth	r5, r5
    29da:	e7d8      	b.n	298e <_printf_i+0xee>
    29dc:	6809      	ldr	r1, [r1, #0]
    29de:	681a      	ldr	r2, [r3, #0]
    29e0:	0608      	lsls	r0, r1, #24
    29e2:	d505      	bpl.n	29f0 <_printf_i+0x150>
    29e4:	1d11      	adds	r1, r2, #4
    29e6:	6019      	str	r1, [r3, #0]
    29e8:	6813      	ldr	r3, [r2, #0]
    29ea:	6962      	ldr	r2, [r4, #20]
    29ec:	601a      	str	r2, [r3, #0]
    29ee:	e006      	b.n	29fe <_printf_i+0x15e>
    29f0:	0649      	lsls	r1, r1, #25
    29f2:	d5f7      	bpl.n	29e4 <_printf_i+0x144>
    29f4:	1d11      	adds	r1, r2, #4
    29f6:	6019      	str	r1, [r3, #0]
    29f8:	6813      	ldr	r3, [r2, #0]
    29fa:	8aa2      	ldrh	r2, [r4, #20]
    29fc:	801a      	strh	r2, [r3, #0]
    29fe:	2300      	movs	r3, #0
    2a00:	9e04      	ldr	r6, [sp, #16]
    2a02:	6123      	str	r3, [r4, #16]
    2a04:	e054      	b.n	2ab0 <_printf_i+0x210>
    2a06:	681a      	ldr	r2, [r3, #0]
    2a08:	1d11      	adds	r1, r2, #4
    2a0a:	6019      	str	r1, [r3, #0]
    2a0c:	6816      	ldr	r6, [r2, #0]
    2a0e:	2100      	movs	r1, #0
    2a10:	6862      	ldr	r2, [r4, #4]
    2a12:	0030      	movs	r0, r6
    2a14:	f000 f9e6 	bl	2de4 <memchr>
    2a18:	2800      	cmp	r0, #0
    2a1a:	d001      	beq.n	2a20 <_printf_i+0x180>
    2a1c:	1b80      	subs	r0, r0, r6
    2a1e:	6060      	str	r0, [r4, #4]
    2a20:	6863      	ldr	r3, [r4, #4]
    2a22:	6123      	str	r3, [r4, #16]
    2a24:	2300      	movs	r3, #0
    2a26:	9a04      	ldr	r2, [sp, #16]
    2a28:	7013      	strb	r3, [r2, #0]
    2a2a:	e041      	b.n	2ab0 <_printf_i+0x210>
    2a2c:	6923      	ldr	r3, [r4, #16]
    2a2e:	0032      	movs	r2, r6
    2a30:	9906      	ldr	r1, [sp, #24]
    2a32:	9805      	ldr	r0, [sp, #20]
    2a34:	9d07      	ldr	r5, [sp, #28]
    2a36:	47a8      	blx	r5
    2a38:	1c43      	adds	r3, r0, #1
    2a3a:	d043      	beq.n	2ac4 <_printf_i+0x224>
    2a3c:	6823      	ldr	r3, [r4, #0]
    2a3e:	2500      	movs	r5, #0
    2a40:	079b      	lsls	r3, r3, #30
    2a42:	d40f      	bmi.n	2a64 <_printf_i+0x1c4>
    2a44:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2a46:	68e0      	ldr	r0, [r4, #12]
    2a48:	4298      	cmp	r0, r3
    2a4a:	da3d      	bge.n	2ac8 <_printf_i+0x228>
    2a4c:	0018      	movs	r0, r3
    2a4e:	e03b      	b.n	2ac8 <_printf_i+0x228>
    2a50:	0022      	movs	r2, r4
    2a52:	2301      	movs	r3, #1
    2a54:	3219      	adds	r2, #25
    2a56:	9906      	ldr	r1, [sp, #24]
    2a58:	9805      	ldr	r0, [sp, #20]
    2a5a:	9e07      	ldr	r6, [sp, #28]
    2a5c:	47b0      	blx	r6
    2a5e:	1c43      	adds	r3, r0, #1
    2a60:	d030      	beq.n	2ac4 <_printf_i+0x224>
    2a62:	3501      	adds	r5, #1
    2a64:	68e3      	ldr	r3, [r4, #12]
    2a66:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2a68:	1a9b      	subs	r3, r3, r2
    2a6a:	429d      	cmp	r5, r3
    2a6c:	dbf0      	blt.n	2a50 <_printf_i+0x1b0>
    2a6e:	e7e9      	b.n	2a44 <_printf_i+0x1a4>
    2a70:	2d00      	cmp	r5, #0
    2a72:	d0a9      	beq.n	29c8 <_printf_i+0x128>
    2a74:	9e04      	ldr	r6, [sp, #16]
    2a76:	0028      	movs	r0, r5
    2a78:	0039      	movs	r1, r7
    2a7a:	f7ff f8a3 	bl	1bc4 <__aeabi_uidivmod>
    2a7e:	9b03      	ldr	r3, [sp, #12]
    2a80:	3e01      	subs	r6, #1
    2a82:	5c5b      	ldrb	r3, [r3, r1]
    2a84:	0028      	movs	r0, r5
    2a86:	7033      	strb	r3, [r6, #0]
    2a88:	0039      	movs	r1, r7
    2a8a:	f7ff f815 	bl	1ab8 <__udivsi3>
    2a8e:	1e05      	subs	r5, r0, #0
    2a90:	d1f1      	bne.n	2a76 <_printf_i+0x1d6>
    2a92:	2f08      	cmp	r7, #8
    2a94:	d109      	bne.n	2aaa <_printf_i+0x20a>
    2a96:	6823      	ldr	r3, [r4, #0]
    2a98:	07db      	lsls	r3, r3, #31
    2a9a:	d506      	bpl.n	2aaa <_printf_i+0x20a>
    2a9c:	6863      	ldr	r3, [r4, #4]
    2a9e:	6922      	ldr	r2, [r4, #16]
    2aa0:	4293      	cmp	r3, r2
    2aa2:	dc02      	bgt.n	2aaa <_printf_i+0x20a>
    2aa4:	2330      	movs	r3, #48	; 0x30
    2aa6:	3e01      	subs	r6, #1
    2aa8:	7033      	strb	r3, [r6, #0]
    2aaa:	9b04      	ldr	r3, [sp, #16]
    2aac:	1b9b      	subs	r3, r3, r6
    2aae:	6123      	str	r3, [r4, #16]
    2ab0:	9b07      	ldr	r3, [sp, #28]
    2ab2:	aa09      	add	r2, sp, #36	; 0x24
    2ab4:	9300      	str	r3, [sp, #0]
    2ab6:	0021      	movs	r1, r4
    2ab8:	9b06      	ldr	r3, [sp, #24]
    2aba:	9805      	ldr	r0, [sp, #20]
    2abc:	f7ff fe82 	bl	27c4 <_printf_common>
    2ac0:	1c43      	adds	r3, r0, #1
    2ac2:	d1b3      	bne.n	2a2c <_printf_i+0x18c>
    2ac4:	2001      	movs	r0, #1
    2ac6:	4240      	negs	r0, r0
    2ac8:	b00b      	add	sp, #44	; 0x2c
    2aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2acc:	00002f2a 	.word	0x00002f2a
    2ad0:	00002f19 	.word	0x00002f19

00002ad4 <_sbrk_r>:
    2ad4:	2300      	movs	r3, #0
    2ad6:	b570      	push	{r4, r5, r6, lr}
    2ad8:	4c06      	ldr	r4, [pc, #24]	; (2af4 <_sbrk_r+0x20>)
    2ada:	0005      	movs	r5, r0
    2adc:	0008      	movs	r0, r1
    2ade:	6023      	str	r3, [r4, #0]
    2ae0:	f7fe fdf8 	bl	16d4 <_sbrk>
    2ae4:	1c43      	adds	r3, r0, #1
    2ae6:	d103      	bne.n	2af0 <_sbrk_r+0x1c>
    2ae8:	6823      	ldr	r3, [r4, #0]
    2aea:	2b00      	cmp	r3, #0
    2aec:	d000      	beq.n	2af0 <_sbrk_r+0x1c>
    2aee:	602b      	str	r3, [r5, #0]
    2af0:	bd70      	pop	{r4, r5, r6, pc}
    2af2:	46c0      	nop			; (mov r8, r8)
    2af4:	2000019c 	.word	0x2000019c

00002af8 <__sread>:
    2af8:	b570      	push	{r4, r5, r6, lr}
    2afa:	000c      	movs	r4, r1
    2afc:	250e      	movs	r5, #14
    2afe:	5f49      	ldrsh	r1, [r1, r5]
    2b00:	f000 f97e 	bl	2e00 <_read_r>
    2b04:	2800      	cmp	r0, #0
    2b06:	db03      	blt.n	2b10 <__sread+0x18>
    2b08:	6d63      	ldr	r3, [r4, #84]	; 0x54
    2b0a:	181b      	adds	r3, r3, r0
    2b0c:	6563      	str	r3, [r4, #84]	; 0x54
    2b0e:	bd70      	pop	{r4, r5, r6, pc}
    2b10:	89a3      	ldrh	r3, [r4, #12]
    2b12:	4a02      	ldr	r2, [pc, #8]	; (2b1c <__sread+0x24>)
    2b14:	4013      	ands	r3, r2
    2b16:	81a3      	strh	r3, [r4, #12]
    2b18:	e7f9      	b.n	2b0e <__sread+0x16>
    2b1a:	46c0      	nop			; (mov r8, r8)
    2b1c:	ffffefff 	.word	0xffffefff

00002b20 <__swrite>:
    2b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2b22:	001f      	movs	r7, r3
    2b24:	898b      	ldrh	r3, [r1, #12]
    2b26:	0005      	movs	r5, r0
    2b28:	000c      	movs	r4, r1
    2b2a:	0016      	movs	r6, r2
    2b2c:	05db      	lsls	r3, r3, #23
    2b2e:	d505      	bpl.n	2b3c <__swrite+0x1c>
    2b30:	230e      	movs	r3, #14
    2b32:	5ec9      	ldrsh	r1, [r1, r3]
    2b34:	2200      	movs	r2, #0
    2b36:	2302      	movs	r3, #2
    2b38:	f000 f940 	bl	2dbc <_lseek_r>
    2b3c:	89a3      	ldrh	r3, [r4, #12]
    2b3e:	4a05      	ldr	r2, [pc, #20]	; (2b54 <__swrite+0x34>)
    2b40:	0028      	movs	r0, r5
    2b42:	4013      	ands	r3, r2
    2b44:	81a3      	strh	r3, [r4, #12]
    2b46:	0032      	movs	r2, r6
    2b48:	230e      	movs	r3, #14
    2b4a:	5ee1      	ldrsh	r1, [r4, r3]
    2b4c:	003b      	movs	r3, r7
    2b4e:	f000 f875 	bl	2c3c <_write_r>
    2b52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2b54:	ffffefff 	.word	0xffffefff

00002b58 <__sseek>:
    2b58:	b570      	push	{r4, r5, r6, lr}
    2b5a:	000c      	movs	r4, r1
    2b5c:	250e      	movs	r5, #14
    2b5e:	5f49      	ldrsh	r1, [r1, r5]
    2b60:	f000 f92c 	bl	2dbc <_lseek_r>
    2b64:	89a3      	ldrh	r3, [r4, #12]
    2b66:	1c42      	adds	r2, r0, #1
    2b68:	d103      	bne.n	2b72 <__sseek+0x1a>
    2b6a:	4a05      	ldr	r2, [pc, #20]	; (2b80 <__sseek+0x28>)
    2b6c:	4013      	ands	r3, r2
    2b6e:	81a3      	strh	r3, [r4, #12]
    2b70:	bd70      	pop	{r4, r5, r6, pc}
    2b72:	2280      	movs	r2, #128	; 0x80
    2b74:	0152      	lsls	r2, r2, #5
    2b76:	4313      	orrs	r3, r2
    2b78:	81a3      	strh	r3, [r4, #12]
    2b7a:	6560      	str	r0, [r4, #84]	; 0x54
    2b7c:	e7f8      	b.n	2b70 <__sseek+0x18>
    2b7e:	46c0      	nop			; (mov r8, r8)
    2b80:	ffffefff 	.word	0xffffefff

00002b84 <__sclose>:
    2b84:	b510      	push	{r4, lr}
    2b86:	230e      	movs	r3, #14
    2b88:	5ec9      	ldrsh	r1, [r1, r3]
    2b8a:	f000 f8e1 	bl	2d50 <_close_r>
    2b8e:	bd10      	pop	{r4, pc}

00002b90 <__swbuf_r>:
    2b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2b92:	0005      	movs	r5, r0
    2b94:	000e      	movs	r6, r1
    2b96:	0014      	movs	r4, r2
    2b98:	2800      	cmp	r0, #0
    2b9a:	d004      	beq.n	2ba6 <__swbuf_r+0x16>
    2b9c:	6983      	ldr	r3, [r0, #24]
    2b9e:	2b00      	cmp	r3, #0
    2ba0:	d101      	bne.n	2ba6 <__swbuf_r+0x16>
    2ba2:	f7ff fb1d 	bl	21e0 <__sinit>
    2ba6:	4b22      	ldr	r3, [pc, #136]	; (2c30 <__swbuf_r+0xa0>)
    2ba8:	429c      	cmp	r4, r3
    2baa:	d12d      	bne.n	2c08 <__swbuf_r+0x78>
    2bac:	686c      	ldr	r4, [r5, #4]
    2bae:	69a3      	ldr	r3, [r4, #24]
    2bb0:	60a3      	str	r3, [r4, #8]
    2bb2:	89a3      	ldrh	r3, [r4, #12]
    2bb4:	071b      	lsls	r3, r3, #28
    2bb6:	d531      	bpl.n	2c1c <__swbuf_r+0x8c>
    2bb8:	6923      	ldr	r3, [r4, #16]
    2bba:	2b00      	cmp	r3, #0
    2bbc:	d02e      	beq.n	2c1c <__swbuf_r+0x8c>
    2bbe:	6823      	ldr	r3, [r4, #0]
    2bc0:	6922      	ldr	r2, [r4, #16]
    2bc2:	b2f7      	uxtb	r7, r6
    2bc4:	1a98      	subs	r0, r3, r2
    2bc6:	6963      	ldr	r3, [r4, #20]
    2bc8:	b2f6      	uxtb	r6, r6
    2bca:	4298      	cmp	r0, r3
    2bcc:	db05      	blt.n	2bda <__swbuf_r+0x4a>
    2bce:	0021      	movs	r1, r4
    2bd0:	0028      	movs	r0, r5
    2bd2:	f7ff fa97 	bl	2104 <_fflush_r>
    2bd6:	2800      	cmp	r0, #0
    2bd8:	d126      	bne.n	2c28 <__swbuf_r+0x98>
    2bda:	68a3      	ldr	r3, [r4, #8]
    2bdc:	3001      	adds	r0, #1
    2bde:	3b01      	subs	r3, #1
    2be0:	60a3      	str	r3, [r4, #8]
    2be2:	6823      	ldr	r3, [r4, #0]
    2be4:	1c5a      	adds	r2, r3, #1
    2be6:	6022      	str	r2, [r4, #0]
    2be8:	701f      	strb	r7, [r3, #0]
    2bea:	6963      	ldr	r3, [r4, #20]
    2bec:	4298      	cmp	r0, r3
    2bee:	d004      	beq.n	2bfa <__swbuf_r+0x6a>
    2bf0:	89a3      	ldrh	r3, [r4, #12]
    2bf2:	07db      	lsls	r3, r3, #31
    2bf4:	d51a      	bpl.n	2c2c <__swbuf_r+0x9c>
    2bf6:	2e0a      	cmp	r6, #10
    2bf8:	d118      	bne.n	2c2c <__swbuf_r+0x9c>
    2bfa:	0021      	movs	r1, r4
    2bfc:	0028      	movs	r0, r5
    2bfe:	f7ff fa81 	bl	2104 <_fflush_r>
    2c02:	2800      	cmp	r0, #0
    2c04:	d012      	beq.n	2c2c <__swbuf_r+0x9c>
    2c06:	e00f      	b.n	2c28 <__swbuf_r+0x98>
    2c08:	4b0a      	ldr	r3, [pc, #40]	; (2c34 <__swbuf_r+0xa4>)
    2c0a:	429c      	cmp	r4, r3
    2c0c:	d101      	bne.n	2c12 <__swbuf_r+0x82>
    2c0e:	68ac      	ldr	r4, [r5, #8]
    2c10:	e7cd      	b.n	2bae <__swbuf_r+0x1e>
    2c12:	4b09      	ldr	r3, [pc, #36]	; (2c38 <__swbuf_r+0xa8>)
    2c14:	429c      	cmp	r4, r3
    2c16:	d1ca      	bne.n	2bae <__swbuf_r+0x1e>
    2c18:	68ec      	ldr	r4, [r5, #12]
    2c1a:	e7c8      	b.n	2bae <__swbuf_r+0x1e>
    2c1c:	0021      	movs	r1, r4
    2c1e:	0028      	movs	r0, r5
    2c20:	f000 f820 	bl	2c64 <__swsetup_r>
    2c24:	2800      	cmp	r0, #0
    2c26:	d0ca      	beq.n	2bbe <__swbuf_r+0x2e>
    2c28:	2601      	movs	r6, #1
    2c2a:	4276      	negs	r6, r6
    2c2c:	0030      	movs	r0, r6
    2c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2c30:	00002ec8 	.word	0x00002ec8
    2c34:	00002ee8 	.word	0x00002ee8
    2c38:	00002ea8 	.word	0x00002ea8

00002c3c <_write_r>:
    2c3c:	b570      	push	{r4, r5, r6, lr}
    2c3e:	0005      	movs	r5, r0
    2c40:	0008      	movs	r0, r1
    2c42:	0011      	movs	r1, r2
    2c44:	2200      	movs	r2, #0
    2c46:	4c06      	ldr	r4, [pc, #24]	; (2c60 <_write_r+0x24>)
    2c48:	6022      	str	r2, [r4, #0]
    2c4a:	001a      	movs	r2, r3
    2c4c:	f7fd fd8e 	bl	76c <_write>
    2c50:	1c43      	adds	r3, r0, #1
    2c52:	d103      	bne.n	2c5c <_write_r+0x20>
    2c54:	6823      	ldr	r3, [r4, #0]
    2c56:	2b00      	cmp	r3, #0
    2c58:	d000      	beq.n	2c5c <_write_r+0x20>
    2c5a:	602b      	str	r3, [r5, #0]
    2c5c:	bd70      	pop	{r4, r5, r6, pc}
    2c5e:	46c0      	nop			; (mov r8, r8)
    2c60:	2000019c 	.word	0x2000019c

00002c64 <__swsetup_r>:
    2c64:	4b36      	ldr	r3, [pc, #216]	; (2d40 <__swsetup_r+0xdc>)
    2c66:	b570      	push	{r4, r5, r6, lr}
    2c68:	681d      	ldr	r5, [r3, #0]
    2c6a:	0006      	movs	r6, r0
    2c6c:	000c      	movs	r4, r1
    2c6e:	2d00      	cmp	r5, #0
    2c70:	d005      	beq.n	2c7e <__swsetup_r+0x1a>
    2c72:	69ab      	ldr	r3, [r5, #24]
    2c74:	2b00      	cmp	r3, #0
    2c76:	d102      	bne.n	2c7e <__swsetup_r+0x1a>
    2c78:	0028      	movs	r0, r5
    2c7a:	f7ff fab1 	bl	21e0 <__sinit>
    2c7e:	4b31      	ldr	r3, [pc, #196]	; (2d44 <__swsetup_r+0xe0>)
    2c80:	429c      	cmp	r4, r3
    2c82:	d10f      	bne.n	2ca4 <__swsetup_r+0x40>
    2c84:	686c      	ldr	r4, [r5, #4]
    2c86:	230c      	movs	r3, #12
    2c88:	5ee2      	ldrsh	r2, [r4, r3]
    2c8a:	b293      	uxth	r3, r2
    2c8c:	0719      	lsls	r1, r3, #28
    2c8e:	d42d      	bmi.n	2cec <__swsetup_r+0x88>
    2c90:	06d9      	lsls	r1, r3, #27
    2c92:	d411      	bmi.n	2cb8 <__swsetup_r+0x54>
    2c94:	2309      	movs	r3, #9
    2c96:	2001      	movs	r0, #1
    2c98:	6033      	str	r3, [r6, #0]
    2c9a:	3337      	adds	r3, #55	; 0x37
    2c9c:	4313      	orrs	r3, r2
    2c9e:	81a3      	strh	r3, [r4, #12]
    2ca0:	4240      	negs	r0, r0
    2ca2:	bd70      	pop	{r4, r5, r6, pc}
    2ca4:	4b28      	ldr	r3, [pc, #160]	; (2d48 <__swsetup_r+0xe4>)
    2ca6:	429c      	cmp	r4, r3
    2ca8:	d101      	bne.n	2cae <__swsetup_r+0x4a>
    2caa:	68ac      	ldr	r4, [r5, #8]
    2cac:	e7eb      	b.n	2c86 <__swsetup_r+0x22>
    2cae:	4b27      	ldr	r3, [pc, #156]	; (2d4c <__swsetup_r+0xe8>)
    2cb0:	429c      	cmp	r4, r3
    2cb2:	d1e8      	bne.n	2c86 <__swsetup_r+0x22>
    2cb4:	68ec      	ldr	r4, [r5, #12]
    2cb6:	e7e6      	b.n	2c86 <__swsetup_r+0x22>
    2cb8:	075b      	lsls	r3, r3, #29
    2cba:	d513      	bpl.n	2ce4 <__swsetup_r+0x80>
    2cbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2cbe:	2900      	cmp	r1, #0
    2cc0:	d008      	beq.n	2cd4 <__swsetup_r+0x70>
    2cc2:	0023      	movs	r3, r4
    2cc4:	3344      	adds	r3, #68	; 0x44
    2cc6:	4299      	cmp	r1, r3
    2cc8:	d002      	beq.n	2cd0 <__swsetup_r+0x6c>
    2cca:	0030      	movs	r0, r6
    2ccc:	f7ff fb8e 	bl	23ec <_free_r>
    2cd0:	2300      	movs	r3, #0
    2cd2:	6363      	str	r3, [r4, #52]	; 0x34
    2cd4:	2224      	movs	r2, #36	; 0x24
    2cd6:	89a3      	ldrh	r3, [r4, #12]
    2cd8:	4393      	bics	r3, r2
    2cda:	81a3      	strh	r3, [r4, #12]
    2cdc:	2300      	movs	r3, #0
    2cde:	6063      	str	r3, [r4, #4]
    2ce0:	6923      	ldr	r3, [r4, #16]
    2ce2:	6023      	str	r3, [r4, #0]
    2ce4:	2308      	movs	r3, #8
    2ce6:	89a2      	ldrh	r2, [r4, #12]
    2ce8:	4313      	orrs	r3, r2
    2cea:	81a3      	strh	r3, [r4, #12]
    2cec:	6923      	ldr	r3, [r4, #16]
    2cee:	2b00      	cmp	r3, #0
    2cf0:	d10b      	bne.n	2d0a <__swsetup_r+0xa6>
    2cf2:	21a0      	movs	r1, #160	; 0xa0
    2cf4:	2280      	movs	r2, #128	; 0x80
    2cf6:	89a3      	ldrh	r3, [r4, #12]
    2cf8:	0089      	lsls	r1, r1, #2
    2cfa:	0092      	lsls	r2, r2, #2
    2cfc:	400b      	ands	r3, r1
    2cfe:	4293      	cmp	r3, r2
    2d00:	d003      	beq.n	2d0a <__swsetup_r+0xa6>
    2d02:	0021      	movs	r1, r4
    2d04:	0030      	movs	r0, r6
    2d06:	f7ff fb29 	bl	235c <__smakebuf_r>
    2d0a:	2301      	movs	r3, #1
    2d0c:	89a2      	ldrh	r2, [r4, #12]
    2d0e:	4013      	ands	r3, r2
    2d10:	d011      	beq.n	2d36 <__swsetup_r+0xd2>
    2d12:	2300      	movs	r3, #0
    2d14:	60a3      	str	r3, [r4, #8]
    2d16:	6963      	ldr	r3, [r4, #20]
    2d18:	425b      	negs	r3, r3
    2d1a:	61a3      	str	r3, [r4, #24]
    2d1c:	2000      	movs	r0, #0
    2d1e:	6923      	ldr	r3, [r4, #16]
    2d20:	4283      	cmp	r3, r0
    2d22:	d1be      	bne.n	2ca2 <__swsetup_r+0x3e>
    2d24:	230c      	movs	r3, #12
    2d26:	5ee2      	ldrsh	r2, [r4, r3]
    2d28:	0613      	lsls	r3, r2, #24
    2d2a:	d5ba      	bpl.n	2ca2 <__swsetup_r+0x3e>
    2d2c:	2340      	movs	r3, #64	; 0x40
    2d2e:	4313      	orrs	r3, r2
    2d30:	81a3      	strh	r3, [r4, #12]
    2d32:	3801      	subs	r0, #1
    2d34:	e7b5      	b.n	2ca2 <__swsetup_r+0x3e>
    2d36:	0792      	lsls	r2, r2, #30
    2d38:	d400      	bmi.n	2d3c <__swsetup_r+0xd8>
    2d3a:	6963      	ldr	r3, [r4, #20]
    2d3c:	60a3      	str	r3, [r4, #8]
    2d3e:	e7ed      	b.n	2d1c <__swsetup_r+0xb8>
    2d40:	20000020 	.word	0x20000020
    2d44:	00002ec8 	.word	0x00002ec8
    2d48:	00002ee8 	.word	0x00002ee8
    2d4c:	00002ea8 	.word	0x00002ea8

00002d50 <_close_r>:
    2d50:	2300      	movs	r3, #0
    2d52:	b570      	push	{r4, r5, r6, lr}
    2d54:	4c06      	ldr	r4, [pc, #24]	; (2d70 <_close_r+0x20>)
    2d56:	0005      	movs	r5, r0
    2d58:	0008      	movs	r0, r1
    2d5a:	6023      	str	r3, [r4, #0]
    2d5c:	f7fe fccc 	bl	16f8 <_close>
    2d60:	1c43      	adds	r3, r0, #1
    2d62:	d103      	bne.n	2d6c <_close_r+0x1c>
    2d64:	6823      	ldr	r3, [r4, #0]
    2d66:	2b00      	cmp	r3, #0
    2d68:	d000      	beq.n	2d6c <_close_r+0x1c>
    2d6a:	602b      	str	r3, [r5, #0]
    2d6c:	bd70      	pop	{r4, r5, r6, pc}
    2d6e:	46c0      	nop			; (mov r8, r8)
    2d70:	2000019c 	.word	0x2000019c

00002d74 <_fstat_r>:
    2d74:	2300      	movs	r3, #0
    2d76:	b570      	push	{r4, r5, r6, lr}
    2d78:	4c06      	ldr	r4, [pc, #24]	; (2d94 <_fstat_r+0x20>)
    2d7a:	0005      	movs	r5, r0
    2d7c:	0008      	movs	r0, r1
    2d7e:	0011      	movs	r1, r2
    2d80:	6023      	str	r3, [r4, #0]
    2d82:	f7fe fcbc 	bl	16fe <_fstat>
    2d86:	1c43      	adds	r3, r0, #1
    2d88:	d103      	bne.n	2d92 <_fstat_r+0x1e>
    2d8a:	6823      	ldr	r3, [r4, #0]
    2d8c:	2b00      	cmp	r3, #0
    2d8e:	d000      	beq.n	2d92 <_fstat_r+0x1e>
    2d90:	602b      	str	r3, [r5, #0]
    2d92:	bd70      	pop	{r4, r5, r6, pc}
    2d94:	2000019c 	.word	0x2000019c

00002d98 <_isatty_r>:
    2d98:	2300      	movs	r3, #0
    2d9a:	b570      	push	{r4, r5, r6, lr}
    2d9c:	4c06      	ldr	r4, [pc, #24]	; (2db8 <_isatty_r+0x20>)
    2d9e:	0005      	movs	r5, r0
    2da0:	0008      	movs	r0, r1
    2da2:	6023      	str	r3, [r4, #0]
    2da4:	f7fe fcb0 	bl	1708 <_isatty>
    2da8:	1c43      	adds	r3, r0, #1
    2daa:	d103      	bne.n	2db4 <_isatty_r+0x1c>
    2dac:	6823      	ldr	r3, [r4, #0]
    2dae:	2b00      	cmp	r3, #0
    2db0:	d000      	beq.n	2db4 <_isatty_r+0x1c>
    2db2:	602b      	str	r3, [r5, #0]
    2db4:	bd70      	pop	{r4, r5, r6, pc}
    2db6:	46c0      	nop			; (mov r8, r8)
    2db8:	2000019c 	.word	0x2000019c

00002dbc <_lseek_r>:
    2dbc:	b570      	push	{r4, r5, r6, lr}
    2dbe:	0005      	movs	r5, r0
    2dc0:	0008      	movs	r0, r1
    2dc2:	0011      	movs	r1, r2
    2dc4:	2200      	movs	r2, #0
    2dc6:	4c06      	ldr	r4, [pc, #24]	; (2de0 <_lseek_r+0x24>)
    2dc8:	6022      	str	r2, [r4, #0]
    2dca:	001a      	movs	r2, r3
    2dcc:	f7fe fc9e 	bl	170c <_lseek>
    2dd0:	1c43      	adds	r3, r0, #1
    2dd2:	d103      	bne.n	2ddc <_lseek_r+0x20>
    2dd4:	6823      	ldr	r3, [r4, #0]
    2dd6:	2b00      	cmp	r3, #0
    2dd8:	d000      	beq.n	2ddc <_lseek_r+0x20>
    2dda:	602b      	str	r3, [r5, #0]
    2ddc:	bd70      	pop	{r4, r5, r6, pc}
    2dde:	46c0      	nop			; (mov r8, r8)
    2de0:	2000019c 	.word	0x2000019c

00002de4 <memchr>:
    2de4:	b2c9      	uxtb	r1, r1
    2de6:	1882      	adds	r2, r0, r2
    2de8:	4290      	cmp	r0, r2
    2dea:	d101      	bne.n	2df0 <memchr+0xc>
    2dec:	2000      	movs	r0, #0
    2dee:	4770      	bx	lr
    2df0:	7803      	ldrb	r3, [r0, #0]
    2df2:	428b      	cmp	r3, r1
    2df4:	d0fb      	beq.n	2dee <memchr+0xa>
    2df6:	3001      	adds	r0, #1
    2df8:	e7f6      	b.n	2de8 <memchr+0x4>

00002dfa <__malloc_lock>:
    2dfa:	4770      	bx	lr

00002dfc <__malloc_unlock>:
    2dfc:	4770      	bx	lr
	...

00002e00 <_read_r>:
    2e00:	b570      	push	{r4, r5, r6, lr}
    2e02:	0005      	movs	r5, r0
    2e04:	0008      	movs	r0, r1
    2e06:	0011      	movs	r1, r2
    2e08:	2200      	movs	r2, #0
    2e0a:	4c06      	ldr	r4, [pc, #24]	; (2e24 <_read_r+0x24>)
    2e0c:	6022      	str	r2, [r4, #0]
    2e0e:	001a      	movs	r2, r3
    2e10:	f7fd fc8a 	bl	728 <_read>
    2e14:	1c43      	adds	r3, r0, #1
    2e16:	d103      	bne.n	2e20 <_read_r+0x20>
    2e18:	6823      	ldr	r3, [r4, #0]
    2e1a:	2b00      	cmp	r3, #0
    2e1c:	d000      	beq.n	2e20 <_read_r+0x20>
    2e1e:	602b      	str	r3, [r5, #0]
    2e20:	bd70      	pop	{r4, r5, r6, pc}
    2e22:	46c0      	nop			; (mov r8, r8)
    2e24:	2000019c 	.word	0x2000019c
    2e28:	42000800 	.word	0x42000800
    2e2c:	42000c00 	.word	0x42000c00
    2e30:	42001000 	.word	0x42001000
    2e34:	42001400 	.word	0x42001400
    2e38:	42001800 	.word	0x42001800
    2e3c:	42001c00 	.word	0x42001c00
    2e40:	42002c00 	.word	0x42002c00
    2e44:	42003000 	.word	0x42003000
    2e48:	42003400 	.word	0x42003400
    2e4c:	0000103e 	.word	0x0000103e
    2e50:	0000103a 	.word	0x0000103a
    2e54:	0000103a 	.word	0x0000103a
    2e58:	0000109c 	.word	0x0000109c
    2e5c:	0000109c 	.word	0x0000109c
    2e60:	00001052 	.word	0x00001052
    2e64:	00001044 	.word	0x00001044
    2e68:	00001058 	.word	0x00001058
    2e6c:	0000108a 	.word	0x0000108a
    2e70:	00001124 	.word	0x00001124
    2e74:	00001104 	.word	0x00001104
    2e78:	00001104 	.word	0x00001104
    2e7c:	00001190 	.word	0x00001190
    2e80:	00001116 	.word	0x00001116
    2e84:	00001132 	.word	0x00001132
    2e88:	00001108 	.word	0x00001108
    2e8c:	00001140 	.word	0x00001140
    2e90:	00001180 	.word	0x00001180
    2e94:	2c643325 	.word	0x2c643325
    2e98:	64332520 	.word	0x64332520
    2e9c:	3325202c 	.word	0x3325202c
    2ea0:	00000a64 	.word	0x00000a64

00002ea4 <_global_impure_ptr>:
    2ea4:	20000024                                $.. 

00002ea8 <__sf_fake_stderr>:
	...

00002ec8 <__sf_fake_stdin>:
	...

00002ee8 <__sf_fake_stdout>:
	...
    2f08:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    2f18:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    2f28:	31300046 35343332 39383736 64636261     F.0123456789abcd
    2f38:	00006665                                ef..

00002f3c <_init>:
    2f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2f3e:	46c0      	nop			; (mov r8, r8)
    2f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2f42:	bc08      	pop	{r3}
    2f44:	469e      	mov	lr, r3
    2f46:	4770      	bx	lr

00002f48 <__init_array_start>:
    2f48:	000000dd 	.word	0x000000dd

00002f4c <_fini>:
    2f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2f4e:	46c0      	nop			; (mov r8, r8)
    2f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2f52:	bc08      	pop	{r3}
    2f54:	469e      	mov	lr, r3
    2f56:	4770      	bx	lr

00002f58 <__fini_array_start>:
    2f58:	000000b5 	.word	0x000000b5
