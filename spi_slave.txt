1.	ASF Wizard에 추가 할 목록

Generic board support (driver)
USART - Serial Interface (service)
Delay routines (service) : systick
PORT - GPIO Pin Control (driver)
SERCOM SPI - Serial Peripheral Interface (driver) : callback
SYSTEM - Core System Driver (driver)
Standard serial I/O (stdio) (driver)

2.	.h 파일의 변경사항

<conf_spi.h>

/**
 * \file
 *
 * \brief SAM R21 SPI configuration
 *
 * Copyright (C) 2014-2016 Atmel Corporation. All rights reserved.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * 3. The name of Atmel may not be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * 4. This software may only be redistributed and used in connection with an
 *    Atmel microcontroller product.
 *
 * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
 * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * \asf_license_stop
 *
 */
/*
 * Support and FAQ: visit <a href="http://www.atmel.com/design-support/">Atmel Support</a>
 */


#ifndef CONF_SPI_H_INCLUDED
#  define CONF_SPI_H_INCLUDED

#  define CONF_SPI_MASTER_ENABLE     false
#  define CONF_SPI_SLAVE_ENABLE      true

//[definition_slave]
#define CONF_SLAVE_SPI_MODULE  EXT1_SPI_MODULE
#define CONF_SLAVE_MUX_SETTING EXT1_SPI_SERCOM_MUX_SETTING
#define CONF_SLAVE_PINMUX_PAD0 EXT1_SPI_SERCOM_PINMUX_PAD0
#define CONF_SLAVE_PINMUX_PAD1 EXT1_SPI_SERCOM_PINMUX_PAD1
#define CONF_SLAVE_PINMUX_PAD2 EXT1_SPI_SERCOM_PINMUX_PAD2
#define CONF_SLAVE_PINMUX_PAD3 EXT1_SPI_SERCOM_PINMUX_PAD3
//[definition_slave]

#endif /* CONF_SPI_H_INCLUDED */




3.	전체 코드


#include <asf.h>

#define BUF_LENGTH 5

static uint8_t buffer_rx[BUF_LENGTH] = {0x00};
//static uint8_t buffer_expect[BUF_LENGTH] = {
		//0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
		 //0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13
//};
static uint8_t buffer_expect[BUF_LENGTH] = {
	0x00, 0x01, 0x02, 0x03, 0x04
};
struct spi_module spi_slave_instance;

void configure_spi_slave(void);

//usart----------------------------------------------------------------------------------
struct usart_module usart_instance;

void configure_usart(void);

//main--------------------------------------------------------------------
int main(void)
{
	uint8_t result = 0;
	
	system_init();
	configure_spi_slave();
	
	configure_usart();
	
	printf("Hi this is SLAVE\n");

	while (true) {

		printf("Before read\n");
		while(spi_read_buffer_wait(&spi_slave_instance, buffer_rx, BUF_LENGTH, 0x00) != STATUS_OK) {
			/* Wait for transfer from the master */
		}

		for(int i = 0; i < BUF_LENGTH; i++)
			printf("%d", buffer_rx[i]);
		printf("\n");

		port_pin_toggle_output_level(LED_0_PIN);
		volatile uint32_t delay = 30000;
		while(delay--) {
		}
		
		printf("After read\n");
	}	

}

//spi-------------------------------------------------------------------------

void configure_spi_slave(void)
{
	struct spi_config config_spi_slave;
	spi_get_config_defaults(&config_spi_slave);
	
	config_spi_slave.mode = SPI_MODE_SLAVE;
	
	config_spi_slave.mode_specific.slave.preload_enable = true;
	config_spi_slave.mode_specific.slave.frame_format = SPI_FRAME_FORMAT_SPI_FRAME;
	
	config_spi_slave.mux_setting = CONF_SLAVE_MUX_SETTING;
	
	config_spi_slave.pinmux_pad0 = CONF_SLAVE_PINMUX_PAD0;
	config_spi_slave.pinmux_pad1 = CONF_SLAVE_PINMUX_PAD1;
	config_spi_slave.pinmux_pad2 = CONF_SLAVE_PINMUX_PAD2;
	config_spi_slave.pinmux_pad3 = CONF_SLAVE_PINMUX_PAD3;

	spi_init(&spi_slave_instance, CONF_SLAVE_SPI_MODULE, &config_spi_slave);
	spi_enable(&spi_slave_instance);	
}

//usart---------------------------------------------------------------------------
void configure_usart(void)
{
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);
	config_usart.baudrate = 9600; //14400,19200, 115200
	config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
	
	while(usart_init(&usart_instance, EDBG_CDC_MODULE, &config_usart) != STATUS_OK)
	{}
	usart_enable(&usart_instance);
	stdio_serial_init(&usart_instance, EDBG_CDC_MODULE, &config_usart );
}

